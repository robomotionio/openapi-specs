{
  "openapi": "3.0.0",
  "info": {
    "version": "Beta",
    "title": "Asset Service",
    "description": "Provides functionality for applications working with visualization assets. You can search for, view, and manage 3D assets.\n",
    "contact": {
      "name": "SAP 3D Visualization service",
      "email": "sap_cp_3d_visualization@sap.com"
    }
  },
  "x-sap-shortText": "Work with versioned 3D assets.",
  "security": [
    {
      "service_auth": [
        "import-content",
        "read-content",
        "author-content",
        "delete-content"
      ]
    }
  ],
  "externalDocs": {
    "description": "Application Help",
    "url": "https://help.sap.com/viewer/b881318bde9048e69bb74379dcc75d7f/Cloud/en-US/0cf9a68e18144d0aa6ca57b878671b65.html"
  },
  "paths": {
    "/files": {
      "post": {
        "tags": [
          "Imports"
        ],
        "summary": "Upload files to a staging area.",
        "description": "Uploads a file to a staging area. Once uploaded, files can be referenced by the `GET /imports` operation.",
        "operationId": "postFiles",
        "parameters": [
          {
            "name": "fileName",
            "in": "query",
            "description": "If specified, the file name to use for this file when converting it. May include relative path information; for example, `parts/part1.prt`. Mutually exclusive with the `fileId` parameter.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fileId",
            "in": "query",
            "description": "If specified, the ID of an already-created file record in the `PENDING` state, created by calling `POST /imports/{id}/files`. Mutually exclusive with the `fileName` parameter.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "$ref": "#/components/parameters/header3DVisContext"
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "description": "The file to upload.",
                    "type": "string",
                    "format": "binary"
                  }
                },
                "required": [
                  "file"
                ]
              }
            }
          }
        },
        "security": [
          {
            "service_auth": [
              "import-content"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "File successfully uploaded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileUploadResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/files/{id}": {
      "get": {
        "tags": [
          "Exports"
        ],
        "summary": "Retrieve a stored file containing an exported scene.",
        "description": "Export of scene produces a file. This file can be retrieved using this API.\nThe ID of the file to retrieve is part of the export task status.\n",
        "operationId": "retrieveFile",
        "parameters": [
          {
            "name": "id",
            "description": "Id of file to retrieve.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/header3DVisContext"
          }
        ],
        "security": [
          {
            "service_auth": [
              "read-content"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "File retrieved.",
            "content": {
              "application/binary": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/binary": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/imports": {
      "get": {
        "tags": [
          "Imports"
        ],
        "summary": "Retrieves import tasks.",
        "description": "Retrieves all import tasks matching the specified criteria.",
        "operationId": "getImports",
        "parameters": [
          {
            "name": "sort",
            "in": "query",
            "description": "The order in which to sort returned import tasks.\n- `started`: Order import tasks by start time descending\n- `finished`: Order import tasks by completion time descending.\n\nIf no sort order is specified, the default is `finished`.\n",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "started",
                "finished"
              ],
              "default": "finished"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "A filter for the returned import tasks.\n- `active`: Only currently active import tasks returned.\n- `completed`: Only completed import tasks returned.\n\nIf no `filter` parameter is specified, all import tasks are returned.\n",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "active",
                "completed"
              ]
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "A facility to search for import tasks with a name or tag containing the supplied value.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "max",
            "in": "query",
            "description": "The maximum number of import tasks to return; the default is `100`.",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 100
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "An offset from which to start returning import tasks. Can be used for paging when the total number of imports exceeds the value of the `max` parameter. The default is `0`.",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "$ref": "#/components/parameters/header3DVisContext"
          }
        ],
        "security": [
          {
            "service_auth": [
              "import-content"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Imports successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Import"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Imports"
        ],
        "summary": "Creates a new import task.",
        "description": "Creates a new import task for the files specified in the request, and optionally starts it.",
        "operationId": "createImport",
        "parameters": [
          {
            "$ref": "#/components/parameters/header3DVisContext"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ImportRequest"
              }
            }
          }
        },
        "security": [
          {
            "service_auth": [
              "import-content"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Import task was successfully started, returned if `start` was `true` (the default).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Import"
                }
              }
            }
          },
          "201": {
            "description": "Import task was successfully created, returned if `start` was `false`. Will also contain the list of file records created by this import.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImportWithFiles"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/imports/{id}": {
      "get": {
        "tags": [
          "Imports"
        ],
        "summary": "Retrieves details for an import task.",
        "description": "Retrieves details for the import task with the supplied ID.",
        "operationId": "getImportById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the import task to retrieve.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/header3DVisContext"
          }
        ],
        "security": [
          {
            "service_auth": [
              "import-content"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "The details of the retrieved import task.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Import"
                    },
                    {
                      "properties": {
                        "conversionStatus": {
                          "description": "conversion task status, returned only if requested import is in CONVERTING state.",
                          "allOf": [
                            {
                              "$ref": "#/components/schemas/TaskStatus"
                            }
                          ]
                        },
                        "storageStatus": {
                          "type": "array",
                          "description": "a list of storage task states, returned only if requested import is in STORING state.",
                          "items": {
                            "type": "object",
                            "properties": {
                              "taskId": {
                                "type": "integer",
                                "description": "storage task id."
                              },
                              "status": {
                                "$ref": "#/components/schemas/TaskStatus"
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Imports"
        ],
        "summary": "Updates the import task status and/or name.",
        "description": "Updates the status and/or name of an import task. Use this operation to start a pending import task.",
        "operationId": "updateImport",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the import task to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/header3DVisContext"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateImportRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "service_auth": [
              "import-content"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "The import task status updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Imports"
        ],
        "summary": "Archives an import task.",
        "description": "Archives an import task, optionally deleting assets created by the import. If the import task is not completed yet, it will be cancelled before deletion.",
        "operationId": "archiveImport",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the import task to archive.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "deleteCreatedAssets",
            "in": "query",
            "description": "Indicates whether to delete assets created by the import task. The default is `false`.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "$ref": "#/components/parameters/header3DVisContext"
          }
        ],
        "security": [
          {
            "service_auth": [
              "import-content"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Import task successfully archived.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/imports/{id}/versions": {
      "get": {
        "tags": [
          "Imports"
        ],
        "summary": "Retrieves asset versions created by an import task.",
        "description": "Returns the asset versions created by a specified import task.",
        "operationId": "getAssetVersionsByImport",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the import task.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/header3DVisContext"
          }
        ],
        "security": [
          {
            "service_auth": [
              "import-content"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "A list of asset versions created by the import task.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ImportAssetVersion"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/imports/{id}/files": {
      "get": {
        "tags": [
          "Imports"
        ],
        "summary": "Retrieves uploaded files associated with an import task.",
        "description": "Returns a list of uploaded original files associated with an import task.",
        "operationId": "getOriginalFilesByImport",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the import task.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/header3DVisContext"
          }
        ],
        "security": [
          {
            "service_auth": [
              "import-content"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "A list containing the uploaded files associated with the import task.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ImportFileDetails"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Imports"
        ],
        "summary": "Links an uploaded file to an import task.",
        "description": "Links additional uploaded files to the import task. Task must have a status of `created`.",
        "operationId": "addFileToImport",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the import task.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/header3DVisContext"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddFileToImportRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "service_auth": [
              "import-content"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "The file was successfully linked to the import task.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddFileToImportResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/imports/{id}/files/{fileId}": {
      "delete": {
        "tags": [
          "Imports"
        ],
        "summary": "Unlinks a file from an import task.",
        "description": "Unlinks a file from an import task. Task must have a status of `created`.",
        "operationId": "removeFileFromImport",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the import task.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fileId",
            "in": "path",
            "description": "The ID of the file to unlink from the import task.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/header3DVisContext"
          }
        ],
        "security": [
          {
            "service_auth": [
              "import-content"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "The file was successfully unlinked from the import task.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/exports": {
      "get": {
        "tags": [
          "Exports"
        ],
        "summary": "Retrieves export tasks.",
        "description": "Retrieves all export tasks.",
        "operationId": "getExports",
        "parameters": [
          {
            "name": "sort",
            "in": "query",
            "description": "The order in which to sort returned export tasks.\n- `started`: Order export tasks by start time descending\n- `finished`: Order export tasks by completion time descending.\n\nIf no sort order is specified, the default is `finished`.\n",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "started",
                "finished"
              ],
              "default": "finished"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "A filter for the returned export tasks. - `active`: Only currently active export tasks returned. - `completed`: Only completed export tasks returned. - `error`: Only failed export tasks returned. - `cancelling`: Only export tasks with cancelling in progress are returned. - `cancelled`: Only cancelled export tasks returned.\nIf no `filter` parameter is specified, all import tasks are returned.\n",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "active",
                "completed",
                "error",
                "cancelling",
                "cancelled"
              ]
            }
          },
          {
            "name": "max",
            "in": "query",
            "description": "The maximum number of export tasks to return; the default is `100`.",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 100
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "An offset from which to start returning export tasks. Can be used for paging when the total number of exports exceeds the value of the `max` parameter. The default is `0`.",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "$ref": "#/components/parameters/header3DVisContext"
          }
        ],
        "security": [
          {
            "service_auth": [
              "read-content"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Export list successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Export"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Exports"
        ],
        "summary": "Creates a new export task.",
        "description": "Creates a new export task for the asset and optional version specified in the request, and starts it.",
        "operationId": "createExport",
        "parameters": [
          {
            "$ref": "#/components/parameters/header3DVisContext"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExportAssetRequest"
              }
            }
          }
        },
        "security": [
          {
            "service_auth": [
              "read-content"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Export task was successfully started.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Export"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/exports/{id}": {
      "get": {
        "tags": [
          "Exports"
        ],
        "summary": "Retrieves details for an export task.",
        "description": "Retrieves details for the export task with the supplied ID.",
        "operationId": "getExportById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the export task to retrieve.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/header3DVisContext"
          }
        ],
        "security": [
          {
            "service_auth": [
              "read-content"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "The details of the retrieved export task.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Export"
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Exports"
        ],
        "summary": "Cancels an export task.",
        "description": "Starts export task cancellation.",
        "operationId": "cancelExport",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the export task to cancel.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/header3DVisContext"
          }
        ],
        "security": [
          {
            "service_auth": [
              "read-content"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Cancellation request was processed successfully. The task cancellation was either started or it was not possible to do so. Action details are returned in response message field.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/assets": {
      "get": {
        "tags": [
          "Assets"
        ],
        "summary": "Retrieves the assets to which you have access.",
        "description": "Returns all assets to which you have access. Assets can also be filtered with query parameters.",
        "operationId": "getAssets",
        "parameters": [
          {
            "name": "sort",
            "in": "query",
            "description": "Sort order for returned assets.\n  - `name`: Order assets by name ascending.\n  - `created`: Order assets by creation time.\n  - `modified`: Order assets by version modification time.\n  - `viewed`: Order assets by version viewed time.\n\nIf the `sort` parameter is not specified, the default is `viewed`.\n",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "name",
                "created",
                "modified",
                "viewed"
              ],
              "default": "viewed"
            }
          },
          {
            "name": "import",
            "in": "query",
            "description": "An array of the import IDs for which to return assets.\n",
            "schema": {
              "type": "integer",
              "format": "array"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Filters the returned assets.\n  - `viewed`: Only returns assets with versions that you have viewed.\n  - `currently_modifying`: Only returns assets that have versions that are currently being modified (they have a modification token).\n  - `modified`: Only returns assets that have versions that have been modified at some point.\n\nIf no `filter` parameter is specified, no filtering is performed.\n",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "edited"
              ]
            }
          },
          {
            "name": "search",
            "in": "query",
            "description": "Within the list of returned assets, after any filters are applied, search for assets with a name containing the supplied value.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tag",
            "in": "query",
            "required": false,
            "description": "Within the list of returned assets, after any filters are applied,\nsearch for assets with tags matching all the supplied value.\n",
            "schema": {
              "type": "string",
              "format": "array"
            }
          },
          {
            "name": "max",
            "in": "query",
            "description": "Maximum number of assets to return; the default is `100`.",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 100
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "An offset from which to start returning assets. Can be used for paging when the total number of assets exceeds the value of the `max` parameter. The default is `0`.",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "$ref": "#/components/parameters/header3DVisContext"
          }
        ],
        "security": [
          {
            "service_auth": [
              "read-content"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "A list of assets. If you have no access to any assets, an empty array is returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Asset"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Assets"
        ],
        "summary": "Creates a new asset and version.",
        "description": "Creates a new asset and version from an existing asset version.",
        "parameters": [
          {
            "$ref": "#/components/parameters/header3DVisContext"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAssetRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "service_auth": [
              "author-content"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Asset and version created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetResponse"
                }
              }
            }
          },
          "202": {
            "description": "A task to create the asset was successfully queued. The [/assets/tasks/{taskId}](#/Assets/getAssetTask) endpoint can be used to get the status of the task.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskQueuedResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/assets/tasks/{taskId}": {
      "get": {
        "tags": [
          "Assets"
        ],
        "summary": "Get the status of a particular asset task. If it has completed successfully, the asset details are returned.",
        "operationId": "getAssetTask",
        "security": [
          {
            "service_auth": [
              "read-content"
            ]
          }
        ],
        "parameters": [
          {
            "name": "taskId",
            "description": "The task ID.",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/header3DVisContext"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetTaskResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/assets/tags": {
      "get": {
        "tags": [
          "Assets"
        ],
        "summary": "Retrieves list of asset tags.",
        "description": "Retrieves the asset tags from assets with matching criteria",
        "parameters": [
          {
            "name": "sort",
            "in": "query",
            "description": "Sort order for returned asset tags.\n  - `name`: Order asset tags by name ascending.\n  - `created`: Order assets by creation time.\n\nIf the `sort` parameter is not specified, the default is `name`.\nIf any tag query is supplied, order by `created` is not supported.\n",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "name",
                "created"
              ],
              "default": "name"
            }
          },
          {
            "name": "startswith",
            "in": "query",
            "description": "Within the list of returned asset tags, search for asset tags with a name starts with the supplied value.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tag",
            "in": "query",
            "required": false,
            "description": "Within the list of returned asset tags, search for assets with tags matching all the supplied value.\n",
            "schema": {
              "type": "string",
              "format": "array"
            }
          },
          {
            "name": "max",
            "in": "query",
            "description": "Maximum number of asset tags to return; the default is `100`.",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 100
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "An offset from which to start returning asset tags. Can be used for paging when the total number of asset tags exceeds the value of the `max` parameter. The default is `0`.",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "$ref": "#/components/parameters/header3DVisContext"
          }
        ],
        "security": [
          {
            "service_auth": [
              "read-content"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "A list of asset tag strings. If you have no access to any assets, an empty array is returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/assets/{id}": {
      "get": {
        "tags": [
          "Assets"
        ],
        "summary": "Retrieves details for an asset.",
        "description": "Retrieves the details for an asset with the supplied ID.",
        "operationId": "getAssetById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the asset to return.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/header3DVisContext"
          }
        ],
        "security": [
          {
            "service_auth": [
              "read-content"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Details for the asset with the specified ID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssetResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Assets"
        ],
        "summary": "Update asset name, attributes and / or tags.",
        "description": "Update name, attributes and / or tags assigned to the asset with the supplied ID.",
        "operationId": "updateAsset",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the asset to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/header3DVisContext"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAssetRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "service_auth": [
              "import-content"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "The asset was successfully deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Assets"
        ],
        "summary": "Deletes an asset and all its versions and scenes.",
        "description": "Deletes the asset with the supplied ID, along with all associated versions and scenes.",
        "operationId": "deleteAsset",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the asset to delete.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/header3DVisContext"
          }
        ],
        "security": [
          {
            "service_auth": [
              "delete-content"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "The asset was successfully deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/assets/{id}/versions": {
      "get": {
        "tags": [
          "Asset Versions"
        ],
        "summary": "Retrieves asset versions.",
        "description": "Retrieves all asset versions associated with an asset.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The asset ID for which to return version list.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [
          {
            "service_auth": [
              "author-content"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "The asset version list.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ImportAssetVersion"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Asset Versions"
        ],
        "summary": "Creates a new asset version.",
        "description": "Creates a new asset version for an asset.\nThe new asset version can be created by:\n- Copying the scene from an existing asset version\n- Using a supplied scene definition",
        "operationId": "createAssetVersion",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The asset ID for which to create a new version.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/header3DVisContext"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAssetVersionRequest"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "service_auth": [
              "author-content"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "The asset version was created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateAssetVersionResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/assets/{id}/versions/{version}/thumbnail": {
      "get": {
        "tags": [
          "Asset Versions"
        ],
        "summary": "Retrieves the thumbnail for an asset version.",
        "description": "Retrieves the thumbnail image for a specific asset version, or a placeholder image if none is available.",
        "operationId": "getAssetVersionThumbnail",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The asset ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "description": "The asset version for which to return a thumbnail.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/header3DVisContext"
          }
        ],
        "security": [
          {
            "service_auth": [
              "read-content"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the thumbnail image for the asset version. If the asset has no thumbnail, a placeholder image is returned."
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "image/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/assets/{id}/versions/{version}": {
      "post": {
        "tags": [
          "Asset Versions"
        ],
        "summary": "Updates an asset version.",
        "description": "Updates the properties of an asset version.",
        "operationId": "updateAssetVersion",
        "security": [
          {
            "service_auth": [
              "author-content"
            ]
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The asset ID for which to update a version.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "description": "The asset version to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/header3DVisContext"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAssetVersionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The asset version was successfully updated .",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Asset Versions"
        ],
        "summary": "Updates an asset version viewed timestamp.",
        "description": "Updates viewed timestamp of an asset version for the current user.",
        "operationId": "updateAssetVersionViewed",
        "security": [
          {
            "service_auth": [
              "read-content"
            ]
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The asset ID for which to update a version.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "description": "The asset version to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/header3DVisContext"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssetVersionViewedRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The asset version viewed timestamp was successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Asset Versions"
        ],
        "summary": "Deletes an asset version and its scene.",
        "description": "Deletes an asset version and the scene associated with it.",
        "operationId": "deleteAssetVersion",
        "security": [
          {
            "service_auth": [
              "delete-content"
            ]
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the asset with which the version is associated.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "version",
            "in": "path",
            "description": "The asset version to delete.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/header3DVisContext"
          }
        ],
        "responses": {
          "200": {
            "description": "The asset version was successfuly deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/userInfo": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Gets information about the currently authenticated user.",
        "description": "Gets the information about the currently authenticated user.",
        "operationId": "getUserInfo",
        "parameters": [
          {
            "$ref": "#/components/parameters/header3DVisContext"
          }
        ],
        "responses": {
          "200": {
            "description": "User information retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserInfoResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/settings/system": {
      "get": {
        "tags": [
          "Settings"
        ],
        "summary": "Get the system settings.",
        "operationId": "getSystemSettings",
        "parameters": [
          {
            "$ref": "#/components/parameters/header3DVisContext"
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SystemSettingsResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "servers": [
    {
      "url": "https://{subaccountname}.sap-3d-asset.cfapps.{region}.hana.ondemand.com/{instancename}/v1",
      "description": "Asset Service API on SAP Business Technology Platform",
      "templates": {
        "subaccountname": "The name of the subaccount on SAP Business Technology Platform",
        "region": {
          "enum": [
            "eu10",
            "us10"
          ],
          "default": "eu10",
          "description": "The SAP Business Technology Platform region where the Asset Service is being used from."
        },
        "instancename": "The name of the Asset Service instance to access (obtained from service binding)."
      }
    }
  ],
  "components": {
    "parameters": {
      "header3DVisContext": {
        "name": "X-SAP-3DVis-Context",
        "in": "header",
        "required": false,
        "description": "A value to be stored with API usage information. The API user can use this to define custom groupings for aggregating API usage information.",
        "schema": {
          "type": "string"
        }
      }
    },
    "securitySchemes": {
      "service_auth": {
        "type": "oauth2",
        "flows": {
          "clientCredentials": {
            "tokenUrl": "https://{subaccountname}.authentication.{region}.hana.ondemand.com/oauth/token",
            "scopes": {
              "import-content": "Ability to import new models.",
              "read-content": "Ability to read existing model content.",
              "author-content": "Ability to make changes to existing model content.",
              "delete-content": "Ability to delete models."
            }
          }
        }
      }
    },
    "schemas": {
      "MessageProperties": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Localized message describing the response detail in human terms."
          }
        }
      },
      "SuccessResponse": {
        "description": "Base response type for successful operations.",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/MessageProperties"
          },
          {
            "properties": {
              "result": {
                "type": "string",
                "description": "The result of the operation.",
                "default": "success",
                "enum": [
                  "success"
                ]
              }
            }
          }
        ]
      },
      "ErrorResponse": {
        "description": "Base response type for failed operations.",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/MessageProperties"
          },
          {
            "properties": {
              "result": {
                "type": "string",
                "description": "The result of the operation.",
                "default": "failure",
                "enum": [
                  "failure"
                ]
              }
            }
          }
        ]
      },
      "UserInfoResponse": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/SuccessResponse"
          },
          {
            "properties": {
              "userId": {
                "description": "The ID of the user.",
                "type": "string"
              },
              "userIdHash": {
                "description": "A hash of the ID of the user.",
                "type": "string"
              },
              "tenantId": {
                "description": "The tenant UUID.",
                "type": "string"
              },
              "firstName": {
                "description": "The first name of the user.",
                "type": "string"
              },
              "lastName": {
                "description": "The last name of the user.",
                "type": "string"
              },
              "email": {
                "description": "The email address of the user.",
                "type": "string"
              },
              "scopes": {
                "description": "The OAUTH scopes currently available to the user.",
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        ]
      },
      "SystemSettings": {
        "description": "The system settings.",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/SuccessResponse"
          },
          {
            "properties": {
              "maxRequestSize": {
                "description": "The payload size limit (in bytes) for ordinary (non-multipart MIME) requests. The service enforces this limit, but the client side code should also prevent payloads larger than this being sent to the server.",
                "type": "integer"
              },
              "maxMultipartRequestSize": {
                "description": "The payload size limit (in bytes) for multipart MIME requests. The service enforces this limit, but the client side code should also prevent payloads larger than this being sent to the server.",
                "type": "integer"
              },
              "maxJobStorageLength": {
                "description": "The max storage size limit (in bytes) for any conversion requests. The service enforces this limit, but the client side code should also prevent payloads larger than this being sent to the server.",
                "type": "integer"
              },
              "featureFlags": {
                "description": "A set of strings describing optional features to enable (allows for disabling of in-development features).",
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        ]
      },
      "SystemSettingsResponse": {
        "description": "System settings retrieval response.",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/SuccessResponse"
          },
          {
            "properties": {
              "systemSettings": {
                "$ref": "#/components/schemas/SystemSettings"
              }
            }
          }
        ]
      },
      "Asset": {
        "description": "Represents an asset stored by the service.",
        "type": "object",
        "required": [
          "id",
          "name"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the asset.",
            "example": 12
          },
          "name": {
            "type": "string",
            "description": "Display name for the asset, may not be unique."
          },
          "type": {
            "type": "string",
            "description": "Type of the asset. Values are:\n    - `source`: asset created with an import\n    - `derived`: asset created from another asset",
            "enum": [
              "source",
              "derived"
            ]
          },
          "originalFileId": {
            "type": "integer",
            "description": "The ID of the original file from which this asset was created.",
            "example": 624
          },
          "importId": {
            "type": "integer",
            "description": "The ID of the import task that created this asset.",
            "example": 123
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "versions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AssetVersion"
            }
          },
          "attributes": {
            "$ref": "#/components/schemas/Attributes"
          }
        }
      },
      "AssetVersion": {
        "description": "Represents an asset version stored by the service.",
        "type": "object",
        "required": [
          "version",
          "sceneId"
        ],
        "properties": {
          "version": {
            "type": "string",
            "description": "Version number.",
            "example": "v1"
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "description": "Time when the asset was created in ISO-8601 format."
          },
          "modified": {
            "type": "string",
            "format": "date-time",
            "description": "Time when the asset was modified in ISO-8601 format."
          },
          "sceneId": {
            "type": "string",
            "description": "The ID for the scene in the 3D Visualization Storage Service associated with this asset version."
          },
          "status": {
            "type": "string",
            "description": "The current status of the version.",
            "enum": [
              "private",
              "draft",
              "public"
            ],
            "example": "public"
          },
          "modificationToken": {
            "description": "The modification token of the asset version. If present, means that the asset is currently being modified.",
            "type": "string"
          }
        }
      },
      "ImportAssetVersion": {
        "description": "Represents an asset version created by a particular import.",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/AssetVersion"
          },
          {
            "properties": {
              "assetId": {
                "type": "integer",
                "description": "The asset ID",
                "example": 831
              }
            }
          }
        ]
      },
      "Import": {
        "description": "Represents a import task, which consists of conversion and import sub-tasks.",
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the import task.",
            "type": "integer",
            "example": 123
          },
          "name": {
            "description": "A name given to the import when it was created.",
            "type": "string"
          },
          "status": {
            "description": "The current status of the import task.",
            "type": "string",
            "enum": [
              "created",
              "converting",
              "storing",
              "completed",
              "cancelling",
              "cancelled"
            ],
            "example": "converting"
          },
          "totalProgress": {
            "description": "The overall progress of the conversion.",
            "type": "number",
            "format": "float",
            "example": 75
          },
          "conversionProgress": {
            "description": "The progress of the current conversion step.",
            "type": "number",
            "format": "float",
            "example": 100
          },
          "storageProgress": {
            "description": "The progress of the current conversion step.",
            "type": "number",
            "format": "float",
            "example": 50
          },
          "result": {
            "description": "The result of the import, if its status is `completed`.\n    - `success`: The import task was successful. However, this may be a partial success if `hasWarnings` is `true`.\n    - `failure`: The import task failed, and no files were successfully imported.\n",
            "type": "string",
            "enum": [
              "success",
              "failure"
            ]
          },
          "errorMessage": {
            "description": "If import fails this field will contain the reason.",
            "type": "string"
          },
          "warningMessage": {
            "description": "If `hasWarnings` is `true`, this will contain the details of the warning message.",
            "type": "string"
          },
          "hasWarnings": {
            "description": "If `true`, the import may only be partially successful. Some files may have failed. For details, invoke the `GET /import/{id}/files` endpoint.",
            "type": "boolean"
          },
          "created": {
            "description": "The time when the import task was created.",
            "type": "string",
            "format": "date"
          },
          "converted": {
            "description": "The time when the conversion part of the import was completed.",
            "type": "string",
            "format": "date"
          },
          "stored": {
            "description": "The time when the storage part of the import was completed.",
            "type": "string",
            "format": "date"
          },
          "completed": {
            "description": "The time when the import task completed.",
            "type": "string",
            "format": "date"
          },
          "tags": {
            "description": "The list of tags associated with the import.",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ImportWithFiles": {
        "type": "object",
        "description": "Represents a import task object returned when creating an import.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Import"
          },
          {
            "properties": {
              "files": {
                "description": "The list of file records created by this import.",
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "file ID",
                      "type": "integer",
                      "example": 624
                    },
                    "name": {
                      "description": "file name",
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        ]
      },
      "ImportRequest": {
        "description": "A request to import original data, and create assets for the data.",
        "type": "object",
        "required": [
          "name",
          "files"
        ],
        "properties": {
          "start": {
            "description": "Indicates whether to start the import task. If not specified, the default is `true`. If set to `false`, the import is in `created` state and you will need to perform an update to start the import.",
            "type": "boolean",
            "default": true
          },
          "name": {
            "description": "A name for the import task.",
            "type": "string",
            "minLength": 1
          },
          "tags": {
            "description": "A list of tags to associate with the import task.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": [],
            "example": [
              "tag1",
              "tag2"
            ]
          },
          "files": {
            "description": "An array of original files to import.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ImportFile"
            }
          },
          "expiresInDays": {
            "description": "Number of days, from now, when the outputs will expire",
            "type": "integer",
            "format": "int32",
            "minimum": 1,
            "maximum": 30,
            "default": 1
          }
        }
      },
      "FileUploadResponse": {
        "description": "Response to a file upload request.",
        "type": "object",
        "required": [
          "id"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/SuccessResponse"
          },
          {
            "properties": {
              "id": {
                "description": "The unique ID of the uploaded file, to be used when starting imports.",
                "type": "integer",
                "example": 123
              }
            }
          }
        ]
      },
      "ImportFile": {
        "description": "Details about an original file to import.",
        "type": "object",
        "properties": {
          "id": {
            "description": "File ID returned by the `/files` endpoint when uploading the file. Mutually exclusive with the `name` parameter.",
            "type": "integer",
            "format": "int64",
            "example": 624
          },
          "name": {
            "description": "File name. Specifying this field will create a file record in the PENDING state, and the ID will be returned in the response to this import creation request. Can be used to create multiple PENDING file records if file names are known ahead of time. Mutually exclusive with the `id` parameter.",
            "type": "string"
          },
          "assetName": {
            "description": "If specified, the name to give the asset created from this file. If not specified, the file name (without its extension) is used for the asset name.",
            "type": "string"
          },
          "assetTags": {
            "description": "A list of tags to associate with the asset created from this file. If not specified, no tags are associated with the asset.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "tag3",
              "tag4"
            ]
          },
          "assetId": {
            "type": "string",
            "description": "If specified, the asset for which to create a new version. If not specified, a new asset is created."
          },
          "importSettings": {
            "$ref": "#/components/schemas/ImportSettings"
          }
        }
      },
      "ImportFileDetails": {
        "description": "Contains details about an imported file.",
        "type": "object",
        "required": [
          "originalFileId",
          "originalFileName",
          "status"
        ],
        "properties": {
          "originalFileId": {
            "description": "The File ID returned by the `/files` endpoint when uploading the original file.",
            "type": "integer",
            "example": 624
          },
          "originalFileName": {
            "description": "The file name of the original file.",
            "type": "string"
          },
          "status": {
            "description": "The status of the file.\n    - `pending`: File has not yet been uploaded.\n    - `uploaded`: File is uploaded, but conversion has not started yet.\n    - `converting`: File conversion is in progress.\n    - `conversion_failed`: Conversion of the file failed.\n    - `converted`: The file was converted successfully, but not stored (not a top-level file).\n    - `storage_failed`: Storage of the file failed.\n    - `stored`: The file was converted successfully and stored (is a top-level file).\n    - `expired`: The file has expired or was deleted.\n",
            "type": "string",
            "enum": [
              "pending",
              "uploaded",
              "converting",
              "conversion_failed",
              "converted",
              "storage_failed",
              "stored",
              "expired"
            ],
            "example": "stored"
          },
          "assetId": {
            "type": "integer",
            "description": "If present, the ID of the asset associated with the asset version created from this file.",
            "example": 1674
          },
          "assetVersion": {
            "type": "string",
            "description": "If present, the asset version that was created from this file."
          },
          "failureReason": {
            "type": "string",
            "enum": [
              "missing_file",
              "outdated_configuration",
              "unsupported_format",
              "unsupported_version",
              "empty_file",
              "general_error"
            ],
            "description": "If `outcome` is `conversion_failed` or `storage_failed`, contains an enumeration value indicating the reason for failure.\n    - `missing_file`: A file required by the original file was missing.\n    - `outdated_configuration`: A configuration in the original file was outdated and needs to be rebuilt.\n    - `unsupported_format`: The file format of the original file is unsupported.\n    - `unsupported_version`: The version of the file format of the original file is unsupported.\n    - `empty_file`: The result was empty.\n    - `general_error`: A general processing error occurred; consult the `message` field to see more details.\n"
          },
          "message": {
            "type": "string",
            "description": "If `outcome` is `conversion_failed` or `storage_failed`, contains an error message describing the reason for failure."
          },
          "missingFiles": {
            "description": "A list of original files on which this file depends, and are required for conversion, but were missing.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "outOfDateConfigurations": {
            "description": "A list of configuration names that are out of date in the original file, and need rebuilding.",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ExportAssetRequest": {
        "type": "object",
        "description": "Request parameters to export a stored asset version to file.",
        "required": [
          "assetId"
        ],
        "properties": {
          "assetId": {
            "description": "ID of an asset to export.",
            "type": "string"
          },
          "version": {
            "description": "ID of an asset verion to export. If not specified - latest version will be used.",
            "type": "string"
          },
          "name": {
            "description": "Desired output file name.",
            "type": "string"
          },
          "compress": {
            "description": "Marker for file compression.",
            "type": "boolean",
            "default": true
          }
        },
        "additionalProperties": false
      },
      "Export": {
        "description": "Represents a export task.",
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique identifier of the export task.",
            "type": "integer",
            "example": 123
          },
          "status": {
            "description": "The current status of the export task.",
            "type": "string",
            "enum": [
              "active",
              "error",
              "completed",
              "cancelling",
              "cancelled"
            ],
            "example": "completed"
          },
          "progress": {
            "description": "The overall progress of the export.",
            "type": "number",
            "format": "float",
            "example": 75
          },
          "assetId": {
            "description": "asset id for the export.",
            "type": "string",
            "example": 1221
          },
          "assetVersionId": {
            "description": "asset version id for the export.",
            "type": "string",
            "example": "v2"
          },
          "outputs": {
            "description": "A collection of outputs associated with the task.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TaskOutput"
            }
          },
          "created": {
            "description": "The time when the export task was created.",
            "type": "string",
            "format": "date"
          },
          "updated": {
            "description": "The time when the export task was last updated.",
            "type": "string",
            "format": "date"
          }
        }
      },
      "TaskOutput": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The scene identifier."
          },
          "description": {
            "type": "string",
            "description": "Free-form description associated with the output."
          },
          "url": {
            "type": "string",
            "description": "The output URL."
          }
        }
      },
      "AddFileToImportRequest": {
        "description": "Request to add files to an import task in the `created` state.",
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "id": {
              "description": "The ID of the file to add to the import task. Mutually exclusive with the `name` parameter.",
              "type": "integer",
              "example": 624
            },
            "name": {
              "description": "The name of the file to add to the import task. A file record in the PENDING state will be created and the returned file ID can be used to upload the file content. Mutually exclusive with the `id` parameter.",
              "type": "string"
            },
            "assetName": {
              "description": "If specified, the name to give the asset created from this file. If not specified, the file name (without its extension) is used for the asset name.",
              "type": "string"
            },
            "assetTags": {
              "description": "A list of tags to associate with the asset created from this file. If not specified, no tags are associated with the asset.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "assetId": {
              "type": "string",
              "description": "If specified, the asset for which to create a new version. If not specified, a new asset is created.",
              "example": 1674
            },
            "importSettings": {
              "$ref": "#/components/schemas/ImportSettings"
            }
          }
        }
      },
      "AddFileToImportResponse": {
        "description": "Response to a action which adds file to the import task.",
        "type": "object",
        "required": [
          "files"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/SuccessResponse"
          },
          {
            "properties": {
              "files": {
                "description": "If fileId was not specified in request then this field will contain newly created file ID. File will be in 'pending' state and it will be added to the import task. If file ID was specified in request, this field will contain the specified value.",
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "ID of the file added to the import",
                      "example": 624,
                      "type": "string"
                    },
                    "name": {
                      "description": "name of the file added to the import",
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        ]
      },
      "UpdateImportRequest": {
        "description": "Request to update the status of an import task.",
        "type": "object",
        "properties": {
          "status": {
            "description": "The status of the import task to set.",
            "type": "string",
            "enum": [
              "converting",
              "cancelling"
            ]
          },
          "name": {
            "description": "The new name of the import task.",
            "type": "string"
          },
          "expiresInDays": {
            "description": "Number of days, from now, when the outputs will expire",
            "type": "integer",
            "format": "int32",
            "minimum": 1,
            "maximum": 30,
            "default": 1,
            "example": 1
          }
        }
      },
      "CreateAssetRequest": {
        "description": "Request to create a new asset. Specify at most one of:\n- `sceneRequest` (when creating an asset version from a specified scene tree)\n- `fromTreeId` and `fromTreeVersion` (when creating an asset version from an association tree)\n- `treeGeneration` (when creating an asset version from a scene tree generated from the source asset version)\nWhen none of these properties are specified, the request creates the new asset by copying the scene of the source asset version.",
        "type": "object",
        "properties": {
          "async": {
            "description": "When true, asset creation is performed as a background task and the API returns immediately with an HTTP 202 (ACCEPTED) response rather than waiting for the asset to be created. The response contains the ID of the asset task. [/assets/tasks/{taskId}](#/Assets/getAssetTask) can be used to get the status of the task (and the asset details when the task has completed successfully).",
            "type": "boolean"
          },
          "fromAssetId": {
            "description": "The `id` of the source asset from which to create the new asset. This or `sceneRequest` property has to be specified for request valid.",
            "type": "integer",
            "example": 12
          },
          "fromVersion": {
            "description": "The asset version on the source asset from which to create the new asset and version.\nThe scene for the new version is created from the scene of this version.\nIf not specified, the new version is created from the latest version associated with the source asset.\n",
            "type": "string",
            "example": "v1"
          },
          "name": {
            "description": "The name to give the new asset. If not specified, the name of the source asset is used.\nIt has to be specified if asset is created specifying sceneRequest field.",
            "type": "string"
          },
          "status": {
            "description": "The status to give the new asset version.",
            "type": "string",
            "enum": [
              "private",
              "draft",
              "public"
            ],
            "example": "public"
          },
          "tags": {
            "description": "A list of tags to assign to the asset.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "attributes": {
            "$ref": "#/components/schemas/Attributes"
          },
          "modificationToken": {
            "description": "If present, sets the modification token of the new version to the value supplied.",
            "type": "string"
          },
          "sceneRequest": {
            "type": "object",
            "description": "When present, this value specifies the scene content for the new asset version. This value has a structure identical to the CreateSceneRequest structure in the storage service.",
            "additionalProperties": true
          },
          "fromTreeId": {
            "type": "string",
            "description": "When present, the new asset is created from the specified association tree stored in the integration service."
          },
          "fromTreeVersion": {
            "type": "string",
            "description": "When present, the new asset is created from the specified association tree version stored in the integration service."
          },
          "treeGeneration": {
            "type": "object",
            "description": "When present, the new asset is created from a tree generated from the source asset version scene. This structure provides information specifying how the tree will be generated.",
            "properties": {
              "applicationIdSource": {
                "type": "string",
                "description": "The attribute source value to use for the application ID values."
              },
              "applicationIdType": {
                "type": "string",
                "description": "The attribute type value to use for the application ID values."
              },
              "applicationIdField": {
                "type": "string",
                "description": "When present, scene nodes will be created in the generated scene only for scene nodes in the source scene that contain a value for the metadata field specified by this field. The same form used by the storage service APIs to specify a metadata field is used (meta.CATEGORY.TAG) i.e. meta.SAP.MATERIAL When not present, scene nodes will be created in the generated scene for scene nodes in the source scene corresponding to instances of entities i.e. scene nodes for which stable ids can be produced."
              },
              "treeItemNameField": {
                "type": "string",
                "description": "When present, specifies a metadata field to use to set the name of scene nodes in the generated scene. The same form used by the storage service APIs to specify a metadata field is used (meta.CATEGORY.TAG) i.e. meta.SAP.MATERIAL When not present, the original scene node names will be used in the generated scene."
              }
            }
          }
        }
      },
      "AssetResponse": {
        "description": "Asset information response.",
        "type": "object",
        "required": [
          "versions"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/Asset"
          },
          {
            "$ref": "#/components/schemas/SuccessResponse"
          }
        ]
      },
      "TaskQueuedResponse": {
        "description": "A response returned when the asset creation API has been called with the async flag set.",
        "type": "object",
        "required": [
          "taskId"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/SuccessResponse"
          },
          {
            "properties": {
              "taskId": {
                "description": "The id of the task that was enqueued.",
                "type": "string"
              }
            }
          }
        ]
      },
      "AssetTaskResponse": {
        "description": "A response containing the status of an asset task.",
        "type": "object",
        "required": [
          "status"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/SuccessResponse"
          },
          {
            "properties": {
              "status": {
                "$ref": "#/components/schemas/TaskStatus"
              },
              "asset": {
                "$ref": "#/components/schemas/Asset"
              }
            }
          }
        ]
      },
      "CreateAssetVersionRequest": {
        "description": "Request to create a new asset version. If sceneRequest is specified, the new asset version will be created using the sceneRequest information. If sceneRequest is not specified, the new asset version will be created from an existing version (if fromVersion is also unspecified, the latest version will be used). sceneRequest and fromVersion cannot both be specified.",
        "type": "object",
        "properties": {
          "fromVersion": {
            "description": "A specific asset version from which to create the new version.\n",
            "type": "string",
            "example": "v1"
          },
          "status": {
            "description": "The status to give the new asset version.",
            "type": "string",
            "enum": [
              "private",
              "draft",
              "public"
            ],
            "example": "public"
          },
          "modificationToken": {
            "description": "If present, sets the modification token of the new version to the value supplied.",
            "type": "string"
          },
          "sceneRequest": {
            "type": "object",
            "description": "When specified, the scene is created using the information in this paramater. The structure of this object is identical to the storage service CreateSceneRequest structure.",
            "additionalProperties": true
          }
        }
      },
      "CreateAssetVersionResponse": {
        "description": "Response to a request to create a new asset version.",
        "type": "object",
        "required": [
          "version"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/SuccessResponse"
          },
          {
            "properties": {
              "version": {
                "$ref": "#/components/schemas/ImportAssetVersion"
              }
            }
          }
        ]
      },
      "UpdateAssetRequest": {
        "description": "Request to update some properties of an asset.",
        "type": "object",
        "properties": {
          "name": {
            "description": "The new name of the asset.",
            "type": "string"
          },
          "originalUpdated": {
            "description": "new indicator value for the asset.",
            "type": "boolean"
          },
          "tags": {
            "description": "A list of tags to override current tags assigned to the asset.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "attributes": {
            "$ref": "#/components/schemas/Attributes"
          }
        }
      },
      "UpdateAssetVersionRequest": {
        "description": "Request to update some properties of an asset version.",
        "type": "object",
        "properties": {
          "status": {
            "description": "If present, the status to which to set the asset version.\n- `private`: The asset version and associated scene can be changed, but are only visible to the creator.\n- `draft`: The asset version and associated scene can be changed by anyone with editing privileges.\n- `public`: The asset version and associated scene is publicly visible and cannot be changed. A new asset version has to be created in order to make changes.\n\nOnce the status has been set to `public` the status cannot be changed back to `draft`.\n",
            "type": "string",
            "enum": [
              "private",
              "draft",
              "public"
            ],
            "example": "public"
          },
          "modificationToken": {
            "description": "If present, sets the modification token to the value supplied. Modification token can only be set when the status is `private` and `draft`.",
            "type": "string"
          },
          "clearModificationTokenIfNotSet": {
            "description": "If present, and set to `true`, clears the modification token if no `modificationToken` value is present in this request. Otherwise, if no modification token is present in this request, and the asset version has a token set already, it is not changed.",
            "type": "boolean"
          }
        }
      },
      "AssetVersionViewedRequest": {
        "description": "Request to update viewed timestamp of an asset version for the current user.",
        "type": "object",
        "required": [
          "viewed"
        ],
        "properties": {
          "viewed": {
            "description": "Updates the viewed timestamp of the current user to the current time.",
            "type": "boolean"
          }
        }
      },
      "ImportSettings": {
        "description": "If specified, the import settings to use for this file when converting it.",
        "type": "object",
        "properties": {
          "load_hidden_geometry": {
            "type": "boolean",
            "description": "Whether to include hidden geometry in output files. The default is `true`.",
            "default": true
          },
          "load_metadata": {
            "type": "boolean",
            "description": "Whether to include metadata in output files. The default is `true`.",
            "default": true
          },
          "load_hidden_metadata": {
            "type": "boolean",
            "description": "Whether to include hidden metadata in output files. The default is `false`.",
            "default": false
          },
          "load_pmi": {
            "type": "boolean",
            "description": "Whether to include PMI information in output files. The default is `true`.",
            "default": true
          },
          "load_hidden_pmi": {
            "type": "boolean",
            "description": "Whether to include hidden PMI information in output files. The default is `false`.",
            "default": false
          }
        }
      },
      "TaskStatus": {
        "type": "string",
        "description": "processing task status. The list of possible value number might increase.",
        "enum": [
          "pending",
          "assigned",
          "in_progress",
          "success",
          "error",
          "cancelling",
          "cancelled"
        ]
      },
      "Attributes": {
        "type": "array",
        "description": "The attributes",
        "items": {
          "properties": {
            "source": {
              "type": "string",
              "description": "defines attribute setter, a source of this information."
            },
            "type": {
              "type": "string",
              "description": "defines attribute type."
            },
            "suppressed": {
              "type": "boolean",
              "description": "marks an attribute to be removed, for updates."
            },
            "values": {
              "type": "array",
              "description": "list of attribute key/value pairs represented as json object properties. Not required only on deletion. Values must be strings, otherwise key/value pair will be ignored.",
              "minItems": 1,
              "items": {
                "type": "object",
                "additionalProperties": true
              }
            }
          },
          "required": [
            "source",
            "type"
          ]
        }
      }
    }
  }
}