{
  "openapi": "3.0.1",
  "info": {
    "title": "Scopevisio OpenScope REST API",
    "description": "<p>This is an interactive API reference for the Scopevisio REST API.</p><p>Below you will see the main sections of the API. Click each section in order to see the endpoints that are available in that category and use the 'Try it out' button to make API calls.</p><p>For endpoints that require authentication you can click the lock symbol in the top right of the endpoint description, which will take you to a login form.</p><h3>Authentication</h3><p>In order to use the \"Try it out\" function in Swagger you need your own Scopevisio account. If you have not set up a Scopevisio user account already you can do so <a href='https://www.scopevisio.com' target='_blank'>here</a>.</p><h3>Example Application</h3><p>We also have an <a href='../browser/index.html'>example application</a> for you to explore. Usage requires a Scopevisio account.</p><h3>Search Documentation</h3><p>Our documentation regarding <a target='_blank' href='../browser/index.html#!/searchscope'> search specification and paging</a>.</p><h3>General Documentation</h3><p>Our general documentation can be found <a target='_blank' href='../browser/index.html#!/documentation'> here</a>.</p>",
    "termsOfService": "https://www.scopevisio.com",
    "contact": {
      "name": "Scopevisio AG",
      "url": "https://www.scopevisio.com",
      "email": "support@scopevisio.com"
    },
    "license": {
      "name": "Scopevisio AG",
      "url": "https://www.scopevisio.com"
    },
    "version": "1.0.0"
  },
  "externalDocs": {
    "description": "Find out more about Scopevisio and OpenScope",
    "url": "https://www.openscope.de"
  },
  "servers": [
    {
      "url": "https://appload.scopevisio.com/rest"
    }
  ],
  "tags": [
    {
      "name": "Accounting",
      "description": "Scopevisio Accounting webservices"
    },
    {
      "name": "Activities",
      "description": "Scopevisio Activities endpoints",
      "externalDocs": {
        "description": "Find out more",
        "url": "https://www.openscope.de"
      }
    },
    {
      "name": "Additional",
      "description": "Supportive endpoints",
      "externalDocs": {
        "description": "Find out more",
        "url": "https://www.openscope.de"
      }
    },
    {
      "name": "Data sources",
      "description": "Access to the Scopevisio data source facility",
      "externalDocs": {
        "description": "Find out more",
        "url": "https://www.openscope.de"
      }
    },
    {
      "name": "Authorization",
      "description": "Authorization of OpenScope REST Webservice calls",
      "externalDocs": {
        "description": "Find out more",
        "url": "https://www.openscope.de"
      }
    },
    {
      "name": "Contact",
      "description": "Scopevisio contact data",
      "externalDocs": {
        "description": "Find out more",
        "url": "https://www.openscope.de"
      }
    },
    {
      "name": "IncomingInvoice",
      "description": "Scopevisio incoming invoice data",
      "externalDocs": {
        "description": "Find out more",
        "url": "https://www.openscope.de"
      }
    },
    {
      "name": "Product",
      "description": "Scopevisio product data",
      "externalDocs": {
        "description": "Find out more",
        "url": "https://www.openscope.de"
      }
    },
    {
      "name": "Materials management (BETA)",
      "description": "Scopevisio materials management data (BETA)",
      "externalDocs": {
        "description": "Find out more",
        "url": "https://www.openscope.de"
      }
    },
    {
      "name": "Project",
      "description": "Scopevisio project data",
      "externalDocs": {
        "description": "Find out more",
        "url": "https://www.openscope.de"
      }
    },
    {
      "name": "Offer",
      "description": "Scopevisio Offer(s) data",
      "externalDocs": {
        "description": "Find out more",
        "url": "https://www.openscope.de"
      }
    },
    {
      "name": "Opportunity",
      "description": "Scopevisio opportunity data",
      "externalDocs": {
        "description": "Find out more",
        "url": "https://www.openscope.de"
      }
    },
    {
      "name": "Order",
      "description": "Scopevisio order(s) data",
      "externalDocs": {
        "description": "Find out more",
        "url": "https://www.openscope.de"
      }
    },
    {
      "name": "OutgoingInvoice",
      "description": "Scopevisio outgoing invoice data",
      "externalDocs": {
        "description": "Find out more",
        "url": "https://www.openscope.de"
      }
    },
    {
      "name": "RecurringInvoice",
      "description": "Scopevisio recurring invoice data",
      "externalDocs": {
        "description": "Find out more",
        "url": "https://www.openscope.de"
      }
    },
    {
      "name": "Credit",
      "description": "Scopevisio credit data",
      "externalDocs": {
        "description": "Find out more",
        "url": "https://www.openscope.de"
      }
    },
    {
      "name": "Dispatch",
      "description": "Scopevisio dispatch data",
      "externalDocs": {
        "description": "Find out more",
        "url": "https://www.openscope.de"
      }
    },
    {
      "name": "Task",
      "description": "Scopevisio task data",
      "externalDocs": {
        "description": "Find out more",
        "url": "https://www.openscope.de"
      }
    },
    {
      "name": "Campaign",
      "description": "Scopevisio campaigns",
      "externalDocs": {
        "description": "Find out more",
        "url": "https://www.openscope.de"
      }
    },
    {
      "name": "HumanResources",
      "description": "Scopevisio human resource data",
      "externalDocs": {
        "description": "Find out more",
        "url": "https://www.openscope.de"
      }
    },
    {
      "name": "Cashbook",
      "description": "Scopevisio cashbook data",
      "externalDocs": {
        "description": "Find out more",
        "url": "https://www.openscope.de"
      }
    },
    {
      "name": "Organisation",
      "description": "Scopevisio organisations",
      "externalDocs": {
        "description": "Find out more",
        "url": "https://www.openscope.de"
      }
    },
    {
      "name": "Teamwork",
      "description": "Teamwork access",
      "externalDocs": {
        "description": "See our documentation to see how to use the webservices below",
        "url": "https://www.openscope.de"
      }
    }
  ],
  "paths": {
    "/accountinginfo": {
      "get": {
        "tags": [
          "Accounting"
        ],
        "summary": "Returns accounting info details.",
        "description": "Required profiles: <i>Stammdaten (Anzeigen)</i>.",
        "operationId": "getAccountingInfos",
        "responses": {
          "200": {
            "description": "Successfully returns accounting info details."
          },
          "500": {
            "description": "Accounting is not set up for the organisation."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/debitoraccounts/{accountNumber}/bankConnection/new": {
      "post": {
        "tags": [
          "Accounting"
        ],
        "summary": "Create a new bank connection for debitor.",
        "description": "Creates a new bank connection for the debitor with the given accountNumber<br/>Required profile(s): <i>Stammdaten, Debitorenstamm (Bearbeiten)</i>.",
        "operationId": "createDebitorBankConnection",
        "parameters": [
          {
            "name": "accountNumber",
            "in": "path",
            "description": "accountNumber (Kontonummer)of a Scopevisio debitor",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": 10002
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BankConnectionForm"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Bank connection created."
          },
          "400": {
            "description": "Missing debitorAccount.<br/>Missing iban or bank account number and bank code."
          },
          "404": {
            "description": "No debitor with the given accountNumber found or authorization missing."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/kreditoraccounts/{accountNumber}/bankConnection/new": {
      "post": {
        "tags": [
          "Accounting"
        ],
        "summary": "Create a new bank connection for kreditor.",
        "description": "Creates a new bank connection for the kreditor with the given accountNumber<br/>Required profile(s): <i>Stammdaten, Kreditorenstamm (Bearbeiten)</i>.",
        "operationId": "createKebitorBankConnection",
        "parameters": [
          {
            "name": "accountNumber",
            "in": "path",
            "description": "accountNumber (Kontonummer)of a Scopevisio kreditor",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": 70008
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BankConnectionForm"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Bank connection created."
          },
          "400": {
            "description": "Missing kreditorAccount.<br/>Missing iban or bank account number and bank code."
          },
          "404": {
            "description": "No kreditor with the given accountNumber found or authorization missing."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/debitoraccounts/{accountNumber}/bankConnections": {
      "get": {
        "tags": [
          "Accounting"
        ],
        "summary": "Bank connections for a Scopevisio debitor account.",
        "description": "Returns the bank connections for the debitor account with the given accountNumber.<br/>Required profile(s): <i>Stammdaten, Debitorenstamm (Anzeigen)</i>.",
        "operationId": "getBankConnectionsForDebitor",
        "parameters": [
          {
            "name": "accountNumber",
            "in": "path",
            "description": "accountNumber (Kontonummer) of a Scopevisio debitor.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma separated list of fields to include in the response<br/><i>documentNumber, postingDate</i>",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the bank connections for the debitor with the given accountNumber."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/kreditoraccounts/{accountNumber}/bankConnections": {
      "get": {
        "tags": [
          "Accounting"
        ],
        "summary": "Bank connections for a Scopevisio kreditor account.",
        "description": "Returns the bank connections for the kreditor account with the given accountNumber.<br/>Required profile(s): <i>Stammdaten, Kreditorenstamm (Anzeigen)</i>.",
        "operationId": "getBankConnectionsForKreditor",
        "parameters": [
          {
            "name": "accountNumber",
            "in": "path",
            "description": "accountNumber (Kontonummer) of a Scopevisio kreditor.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma separated list of fields to include in the response<br/><i>documentNumber, postingDate</i>",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the bank connections for the kreditor with the given accountNumber."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/campaign/{campaignId}/campaignRunEntries": {
      "post": {
        "tags": [
          "Campaign"
        ],
        "summary": "campaign run entries (Zielgruppe Kampagne)",
        "description": "Returns Scopevisio campaigns.<br/>Required profile(s): <i>Kampagne (Anzeigen)</i>.",
        "operationId": "getCampaignRunEntries",
        "parameters": [
          {
            "name": "campaignId",
            "in": "path",
            "description": "id of a Scopevisio campaign",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "search filter in JSON format. See also <a target='_blank' href='../browser/index.html#!/searchscope'>our search documentation</a>.",
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns Scopevisio campaigns."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/campaigns": {
      "post": {
        "tags": [
          "Campaign"
        ],
        "summary": "campaigns",
        "description": "Returns Scopevisio campaigns.<br/>Required profile(s): <i>Kampagne (Anzeigen)</i>.",
        "operationId": "getCampaigns",
        "requestBody": {
          "description": "search filter in JSON format. See also <a target='_blank' href='../browser/index.html#!/searchscope'>our search documentation</a>.",
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns Scopevisio campaigns."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/cashbookentry/new": {
      "post": {
        "tags": [
          "Cashbook"
        ],
        "summary": "creates a new cashbook entry",
        "description": "Creates a new Scopevisio cashbook entry.<br/>Required profile(s): <i>Kassenbewegung eingeben (Bearbeiten)</i>.",
        "operationId": "createCashbookEntry",
        "requestBody": {
          "description": "content in JSON format, topic is required",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CashbookEntryForm"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created"
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/cashbooksheets": {
      "post": {
        "tags": [
          "Cashbook"
        ],
        "summary": "cashbook sheets",
        "description": "Returns Scopevisio cashbook sheets.<br/>Required profile(s): <i>Abgeschlossene Kassenblätter, Kassenbewegung eingeben (Anzeigen)</i>.",
        "operationId": "getCashbookSheets",
        "requestBody": {
          "description": "search filter in JSON format. See also <a target='_blank' href='../browser/index.html#!/searchscope'>our search documentation</a>.",
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns Scopevisio tasks."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/cashbooks": {
      "post": {
        "tags": [
          "Cashbook"
        ],
        "summary": "cashbooks",
        "description": "Returns Scopevisio cashbooks settings.<br/>Required profile(s): <i>Kassenbücher Dashboard (Anzeigen)</i>.",
        "operationId": "getCashbooks",
        "requestBody": {
          "description": "search filter in JSON format. See also <a target='_blank' href='../browser/index.html#!/searchscope'>our search documentation</a>.",
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns Scopevisio cashbooks settings."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/catalog/accounting/statisticsunit": {
      "get": {
        "tags": [
          "Additional"
        ],
        "summary": "catalog entries for statistics units",
        "description": "Returns the Scopevisio statistics units.<br/>Required profile(s): <i>Statistikbuchungen (Anzeigen)</i>.",
        "operationId": "getStatisticsAccount",
        "parameters": [
          {
            "name": "language",
            "in": "query",
            "description": "language (default is german)",
            "schema": {
              "type": "string",
              "enum": [
                "default",
                "english"
              ],
              "default": "default"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the Scopevisio statistics units."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/contact/{id}": {
      "get": {
        "tags": [
          "Contact"
        ],
        "summary": "Get contact by id",
        "description": "Returns the Scopevisio contact with the given id.<br/>Required profile(s): <i>Kontakte (Anzeigen)</i>.",
        "operationId": "getContactById",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma separated list of fields to include in the response<br/><i>id, lastname</i>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "id of a Scopevisio contact",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The contact with the given id was found."
          },
          "400": {
            "description": "The contact to update was not found or the user has no read permissions for it."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      },
      "post": {
        "tags": [
          "Contact"
        ],
        "summary": "update contact by id",
        "description": "Updates the Scopevisio Contact with the given id.<br/>Required profile(s): <i>Kontakte (Bearbeiten)</i>.",
        "operationId": "updateContactById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of a Contact",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "Content in JSON format. Please refer to KontaktForm for example values and to our <a href='../browser/index.html#!/documentation'>general documentation</a> for update information.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/KontaktForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The contact was successfully updated."
          },
          "404": {
            "description": "The contact to update was not found or the user has no write permissions for it."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/contact/{keyIdentifier}/{id}": {
      "get": {
        "tags": [
          "Contact"
        ],
        "summary": "Get contact by id matching the field stated as key identifier",
        "description": "Returns the Scopevisio contact with the given id matching the field stated as key identifier.<br/>If more than one contact is found for the given legacyNumber, then a HTTP 404 error will be returned. Please use the endpoint /contacts if you do not have distinct values for your key identifiers.<br/>Required profile(s): <i>Kontakte (Anzeigen)</i>.",
        "operationId": "getContactByKeyIdentifierId",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma separated list of fields to include in the response<br/>vid, lastname</i>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "keyIdentifier",
            "in": "path",
            "description": "key identifier [ID, LEGACYNUMBER], default key identifier: ID",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "ID",
                "LEGACYNUMBER"
              ],
              "default": "ID"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "id or legacyNumber of a Scopevisio contact, depending on the key identifier context",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The contact with the given id matching the field stated as key identifier was found."
          },
          "400": {
            "description": "The contact was not found or the user has no read permissions for it."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/contact/{id}/childOrganisations": {
      "get": {
        "tags": [
          "Contact"
        ],
        "summary": "child organisations of an organisation contact",
        "description": "Returns the child organisations of the Scopevisio organisation contact with the given id.<br/>Required profile(s): <i>Kontakte (Anzeigen)</i>.",
        "operationId": "getChildOrganisationContacts",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma separated list of fields to include in the response<br/><i>id, contactId, childContactId</i>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "id of a Scopevisio organisation contact",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the contact child organisations."
          },
          "400": {
            "description": "The contact with the given id was not found or the user does not have read permissions for it."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/contact/{contactId}/comment/new": {
      "post": {
        "tags": [
          "Contact"
        ],
        "summary": "Create a new comment.",
        "description": "Creates a new comment.<br/>Required profile(s): <i>Kontakte, Pinnwand (Bearbeiten)</i>.",
        "operationId": "createContactComment",
        "parameters": [
          {
            "name": "contactId",
            "in": "path",
            "description": "contactId of a Scopevisio contact",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 10942
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BlogEntryForm"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Comment created."
          },
          "400": {
            "description": "Missing contactId."
          },
          "404": {
            "description": "No contact with the given contactId found or authorization missing."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/contact/{contactIdOrLegacyNumber}/comments": {
      "post": {
        "tags": [
          "Contact"
        ],
        "summary": "Comments by contactIdOrLegacyNumber.",
        "description": "Returns the comments for the Scopevisio contact with the given contactId. This REST-API endpoints allows you to filter and search.<br/>\nRequired profile(s): <i>Kontakte, Pinnwand (Anzeigen)</i>",
        "operationId": "getContactCommentsSearch",
        "parameters": [
          {
            "name": "contactIdOrLegacyNumber",
            "in": "path",
            "description": "id (Master ID) of a Scopevisio contact",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "search filter in JSON format. See also <a target='_blank' href='../browser/index.html#!/searchscope'>our search documentation</a>.",
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the comments for the Scopevisio contact with the given contactId."
          },
          "400": {
            "description": "contactId not provided."
          },
          "404": {
            "description": "No contact with the given contactId found."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/contact/{contactIdOrLegacyNumber}": {
      "delete": {
        "tags": [
          "Contact"
        ],
        "summary": "Delete a contact by contactId or legacyNumber",
        "description": "Deletes a Scopevisio contact.<br/>Required profile(s): <i>Kontakte (Bearbeiten)</i>.<br/><strong>If the contact has the sphereEmployee set then the additional user profile <em>Personal</em> is needed</strong>",
        "operationId": "deleteContactById",
        "parameters": [
          {
            "name": "contactIdOrLegacyNumber",
            "in": "path",
            "description": "contactId or legacyNumber of a Scopevisio contact",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": 10942
          }
        ],
        "responses": {
          "204": {
            "description": "Successful delete."
          },
          "403": {
            "description": "Access denied."
          },
          "404": {
            "description": "No contact for the given contactIdOrLegacyNumber found or authorization missing."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/contact/{id}/employees": {
      "get": {
        "tags": [
          "Contact"
        ],
        "summary": "employees of an organisation contact",
        "description": "Returns the employees of the Scopevisio organisation contact with the given id.<br/>Required profile(s): <i>Kontakte (Anzeigen)</i>.",
        "operationId": "getContactEmployees",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma separated list of fields to include in the response<br/><i>id, contactId, lastname</i>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "id of a Scopevisio organisation contact",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the contact employees."
          },
          "400": {
            "description": "The contact with the given id was not found or the user does not have read permissions for it."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/contact/{id}/employers": {
      "get": {
        "tags": [
          "Contact"
        ],
        "summary": "employers of a personal contact",
        "description": "Returns the employers of the Scopevisio personal contact with the given id.<br/>Required profile(s): <i>Kontakte (Anzeigen)</i>.",
        "operationId": "getContactEmployers",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma separated list of fields to include in the response<br/><i>id, contactId, company</i>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "id of a Scopevisio personal contact",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the employers fo the contact with the given id."
          },
          "400": {
            "description": "The contact with the given id was not found or the user does not have read permissions for it."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/contact/{contactIdOrLegacyNumber}/file/new": {
      "post": {
        "tags": [
          "Contact"
        ],
        "summary": "Add a file to a Scopevisio contact",
        "description": "Adds a file to a Scopevisio contact entry.<br/>Required profile(s): <i>Kontakte (Bearbeiten)</i>.",
        "operationId": "addContactFile",
        "parameters": [
          {
            "name": "contactIdOrLegacyNumber",
            "in": "path",
            "description": "contactId or legacyNumber of a Scopevisio contact",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": 10942
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TeamworkFileForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "File added."
          },
          "400": {
            "description": "Data was not provided.<br/>The user does not have teamwork access."
          },
          "404": {
            "description": "No contact for the given contactIdOrLegacyNumber found or authorization missing."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/contact/{contactIdOrLegacyNumber}/assignMail": {
      "post": {
        "tags": [
          "Contact"
        ],
        "summary": "Assign mail to a contact.",
        "description": "Assigns the mail with the given mailId to the contact with the given contactIdOrLegacyNumber.<br/>Required profile(s): <i>Kontakte, Mailbot, Mailagent (Bearbeiten)</i>.",
        "operationId": "assignMailContact",
        "parameters": [
          {
            "name": "contactIdOrLegacyNumber",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "content in JSON format",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssignMailForm"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Mail assigned."
          },
          "400": {
            "description": "MailId not provided."
          },
          "404": {
            "description": "No mail with the given mailId found.<br/>No contact with the given contactIdOrLegacyNumber found."
          },
          "500": {
            "description": "Mail not assigned."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/contact/new": {
      "post": {
        "tags": [
          "Contact"
        ],
        "summary": "create a new contact",
        "description": "Creates a new Scopevisio Contact.<br/>Required profile(s): <i>Kontakte (Bearbeiten)</i>.",
        "operationId": "createContact",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/KontaktForm"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Contact created"
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/contact/{id}/properties": {
      "get": {
        "tags": [
          "Contact"
        ],
        "summary": "contact properties for the given contact",
        "description": "Returns the Scopevisio contact custom property fields with the given id.<br/>Required profile(s): <i>Kontakte (Anzeigen)</i>.",
        "operationId": "getContactProperties",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma separated list of fields to include in the response<br/><i>id, description</i>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "id of a Scopevisio contact",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the contact properties."
          },
          "403": {
            "description": "The user does not have read rights for the contact."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/contact/contactProperty/{propertyId}": {
      "get": {
        "tags": [
          "Contact"
        ],
        "summary": "Get contact property (allgemeine Information) by id",
        "description": "Returns the contact property (allgemeine Information) with the given propertyId of the given contactId.<br/>Required profile(s): <i>Kontakte bearbeiten (Anzeigen)</i>.",
        "operationId": "getProperty",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to include in the response<br/><i>id, type, subType</i>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "propertyId",
            "in": "path",
            "description": "id of a Scopevisio property",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the contact property"
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      },
      "post": {
        "tags": [
          "Contact"
        ],
        "summary": "Update contact property (allgemeine Information) by id",
        "description": "Updates the property (allgemeine Information) of a Scopevisio contact with the given propertyId.<br/>Required profile(s): <i>Kontakte bearbeiten (Bearbeiten)</i>.",
        "operationId": "updateProperty",
        "parameters": [
          {
            "name": "propertyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "content in JSON format",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContactPropertyForm"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Contact updated"
          },
          "403": {
            "description": "The user does not have write permissions for the contact property.<br/>The user does not have write permissions for the contact."
          },
          "404": {
            "description": "Contact property not found"
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/contact/{contactIdOrLegacyNumber}/contactProperty/new": {
      "post": {
        "tags": [
          "Contact"
        ],
        "summary": "Create a contact property (allgemeine Information)",
        "description": "Creates a new property (allgemeine Information) for a Scopevisio contact.<br/>Required profile(s): <i>Kontakte bearbeiten (Bearbeiten)</i>.",
        "operationId": "createProperty",
        "parameters": [
          {
            "name": "contactIdOrLegacyNumber",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "content in JSON format",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContactPropertyForm"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Contact property created"
          },
          "403": {
            "description": "Contact not found or the user does not have read permissions for it."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/contact/{id}/thumb": {
      "get": {
        "tags": [
          "Contact"
        ],
        "summary": "thumbnail image of contact",
        "description": "Returns the thumb of a Scopevisio contact with the given id.<br/>Required profile(s): <i>Kontakte (Anzeigen)</i>.",
        "operationId": "getImage",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of a Scopevisio contact",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the contact image"
          },
          "404": {
            "description": "Contact not found or the user does not have read permissions for it.<br/>Contact thumb not found."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/contacts": {
      "post": {
        "tags": [
          "Contact"
        ],
        "summary": "contacts",
        "description": "Returns Scopevisio contacts.<br/>Required profile(s): <i>Kontakte (Anzeigen)</i>.",
        "operationId": "getContacts",
        "requestBody": {
          "description": "search filter in JSON format. See also <a target='_blank' href='../browser/index.html#!/searchscope'>our search documentation</a>.",
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the Scopevisio contacts."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/createdebitor": {
      "post": {
        "tags": [
          "Accounting"
        ],
        "summary": "Create debitor for a given contact, if the contact is not already a debitor.",
        "description": "Required profiles: <i>Datenimport (Bearbeiten), Kontakte bearbeiten (Bearbeiten)</i>.<br/>At least one of the parameters in the body description below is needed.",
        "operationId": "createDebitor",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PersonalAccountForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Customer not created. A customer for the given contactId already exists. The existing personal account number for the given contactId is returned."
          },
          "201": {
            "description": "Customer created."
          },
          "400": {
            "description": "Account already exists."
          },
          "404": {
            "description": "Contact not found or authorization missing.<br/>PersonalAccountNumber does not have the correct format or is not within the allowed number range."
          },
          "500": {
            "description": "No  number ranges found in accounting area.<br/>Data is broken or accounting is not set up for the organisation."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/createimpersonalaccounts": {
      "post": {
        "tags": [
          "Accounting"
        ],
        "summary": "import impersonal accounts",
        "description": "Required profiles: <i>Datenimport (Bearbeiten)</i>.<br/>The examples and allowable values refer to chart of accounts SKR03. If you use another chart of accounts you should check your settings in the Scopevisio desktop application.",
        "operationId": "createImpersonalAcocunts",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ImpersonalAccountsForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Impersonal account created or updated."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/createkreditor": {
      "post": {
        "tags": [
          "Accounting"
        ],
        "summary": "Create vendor for a given contact, if the contact is not already a vendor",
        "description": "Required profile(s): <i>Datenimport (Bearbeiten), Kontakte bearbeiten (Bearbeiten)</i>.<br/>At least one of the parameters in the body description below is needed.",
        "operationId": "createKreditor",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PersonalAccountForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Kreditor was not created, because the contact is already a kreditor.<br/>The kreditor was not created because the number range has probably no free numbers anymore."
          },
          "201": {
            "description": "Kreditor created."
          },
          "400": {
            "description": "Account already exists."
          },
          "404": {
            "description": "Contact not found or authorization missing.<br/>PersonalAccountNumber does not have the correct format or is not within the allowed number range."
          },
          "500": {
            "description": "No  number ranges found in accounting area.<br/>Data is broken or accounting is not set up for the organisation."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/credit/{number}": {
      "get": {
        "tags": [
          "Credit"
        ],
        "summary": "credit for number (interne Nummer)",
        "description": "Returns the Scopevisio credit with the given number (interne Nummer).<br/>Required profile(s): <i>Rechnungen (Anzeigen)</i>.",
        "operationId": "getCredit",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma separated list of fields to include in the response<br/><i>id, documentNumber</i>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "number",
            "in": "path",
            "description": "number (interne Nummer) of a Scopevisio credit",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "GS-2021-1"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the Scopevisio credit with the given number (interne Nummer)."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/credit/{number}/post": {
      "post": {
        "tags": [
          "Credit"
        ],
        "summary": "Post a credit.",
        "description": "Post the credit with the given number(interne Nummer).<br/>Required profile(s): <i>Rechnungen (Bearbeiten)</i>.",
        "operationId": "postCredit",
        "parameters": [
          {
            "name": "number",
            "in": "path",
            "description": "number (interne Nummer) of a Scopevisio credit.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The credit was successfully posted."
          },
          "400": {
            "description": "The credit was already posted."
          },
          "404": {
            "description": "The credit was not found or the user has no write permissions for it."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/credit/all/positions": {
      "get": {
        "tags": [
          "Credit"
        ],
        "summary": "retrieve all credit note positions",
        "description": "Required profiles: <i>Angebote, Aufträge, Lieferscheine, Rechnungen (Anzeigen)</i>.<br/><strong>WARNING: A response contains a maximum of 5000 entries</strong><br/>Please use shorter time periods and/or pagination to retrieve all required entries",
        "operationId": "getAllCreditPositions",
        "parameters": [
          {
            "name": "startDate",
            "in": "query",
            "description": "Start date (applies to the credit note date). Format: dd.MM.yyyy",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "End date (applies to the credit note date). Format: dd.MM.yyyy",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma separated list of fields to include in the response<br/><i>id, name</i>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "the number of the desired page. First page number is zero",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "the number of entries per page. A maximum of 5.000 is allowed",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns all credit note positions."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/credit/{number}/parent": {
      "get": {
        "tags": [
          "Credit"
        ],
        "summary": "the parent of a credit with the given document number",
        "description": "Returns the Scopevisio outgoing invoice document which is parent of the credit with the given document number.<br/>Required profile(s): <i>Rechnungen (Anzeigen)</i>.",
        "operationId": "getCreditParent",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma separated list of fields to include in the response<br/><i>id, documentNumber</i>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "number",
            "in": "path",
            "description": "document number of a Scopevisio credit",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the Scopevisio outgoing invoice document which is the parent of the credit with the given document number."
          },
          "404": {
            "description": "The outgoing invoice was not found or authorization missing.<br/>No parent for the credit found."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/credit/{number}/positions": {
      "get": {
        "tags": [
          "Credit"
        ],
        "summary": "get outgoing invoice positions for the given number(interne Nummer)",
        "description": "Required profiles: <i>Angebote, Aufträge, Lieferscheine, Rechnungen (Anzeigen)</i>.<br/><strong>WARNING: A response contains a maximum of 5000 entries</strong><br/>Please use shorter time periods and/or pagination to retrieve all required entries",
        "operationId": "getCreditPositions",
        "parameters": [
          {
            "name": "number",
            "in": "path",
            "description": "number (interne Nummer) of a Scopevisio credit note",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma separated list of fields to include in the response<br/><i>id, name</i>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "the number of the desired page. First page number is zero",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "the number of entries per page. A maximum of 5.000 is allowed",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the positions for the credit with the given number(interne Nummer)."
          },
          "404": {
            "description": "No credit with the given number found or authorization missing."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/credits": {
      "post": {
        "tags": [
          "Credit"
        ],
        "summary": "credits",
        "description": "Returns the Scopevisio credits.<br/>Required profile(s): <i>Rechnungen (Anzeigen)</i>.",
        "operationId": "getCredits",
        "requestBody": {
          "description": "search filter in JSON format. See also <a target='_blank' href='../browser/index.html#!/searchscope'>our search documentation</a>.",
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the Scopevisio credits."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/datevexport": {
      "post": {
        "tags": [
          "Accounting"
        ],
        "summary": "export postings in DATEV EXTF format",
        "description": "Export postings in DATEV EXTF format.<br/>Required profiles: <i>Datenexport (Anzeigen)</i>.",
        "operationId": "exportDatev",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DatevExportSettingsForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Export Postings in DATEV Format."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/datevpostings/new": {
      "post": {
        "tags": [
          "Accounting"
        ],
        "summary": "import postings in DATEV-Format",
        "description": "Import postings in DATEV-Format.<br/>Required profiles: <i>Datenimport (Bearbeiten)</i>.",
        "operationId": "importDatevData",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DatevPostings"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Create a single posting. See response for error messages."
          },
          "400": {
            "description": "Mandatory parameter not given."
          },
          "404": {
            "description": "\"zone\" not found."
          },
          "500": {
            "description": "Posting error occurred or import data is not valid."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/debitoraccounts/{accountNumber}": {
      "post": {
        "tags": [
          "Accounting"
        ],
        "summary": "Update a debtor by accountNumber (Kontonummer).",
        "description": "Updates the debtor with the given accountNumber.<br/>Required profile(s): <i>Stammdaten, Debitorenstamm (Bearbeiten)</i>.",
        "operationId": "updateDebitor",
        "parameters": [
          {
            "name": "accountNumber",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "content in JSON format",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePersonalAccountForm"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Personal account updated."
          },
          "400": {
            "description": "No personal account given."
          },
          "404": {
            "description": "The personal account with the given accountNumber was not found or authorization missing."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/debitoraccounts": {
      "post": {
        "tags": [
          "Accounting"
        ],
        "summary": "debitor accounts",
        "description": "Returns the debtor accounts<br/>Required profile(s): <i>Stammdaten, Debitorenstamm (Anzeigen)</i>.",
        "operationId": "getDebitorAccounts",
        "requestBody": {
          "description": "search filter in JSON format. See also <a target='_blank' href='../browser/index.html#!/searchscope'>our search documentation</a>.",
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Returns the debitor accounts"
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/dimensions/{dimensionNameOrNumber}/dimensionentry": {
      "post": {
        "tags": [
          "Accounting"
        ],
        "summary": "Updates the name of a dimension entry.",
        "description": "Updates the name of the Scopevisio dimension entry with the given number.<br/>Required profile(s): <i>Berichte (Bearbeiten)</i>.",
        "operationId": "updateDimensionEntry",
        "parameters": [
          {
            "name": "dimensionNameOrNumber",
            "in": "path",
            "description": "the name or the number of the dimension. Example: Kostenstellen, 1",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "Kostenstellen"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DimensionEntryForm"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Dimension entry name updated."
          },
          "400": {
            "description": "\"number\" or \"name\" not given."
          },
          "404": {
            "description": "Dimension not found or authorization missing, dimensionEntry not found or authorization missing."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/dimensions/{dimensionNameOrNumber}/dimensionentry/new": {
      "post": {
        "tags": [
          "Accounting"
        ],
        "summary": "Add a dimensionEntry to a dimension",
        "description": "Adds a new dimension entry to a dimension.<br/>Required profile(s): <i>Berichte (Bearbeiten)</i>.",
        "operationId": "addDimensionEntry",
        "parameters": [
          {
            "name": "dimensionNameOrNumber",
            "in": "path",
            "description": "the name or the number of the dimension. Example: Kostenstellen, 1",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "Kostenstellen"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DimensionEntryForm"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Dimension entry created"
          },
          "400": {
            "description": "\"number\" not given, \"name\" not given or dimension entry with the given number already exists."
          },
          "404": {
            "description": "No dimension for the given dimensionNameOrNumber found or authorization missing"
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/dimensions/{dimensionNameOrNumber}/dimensionentries": {
      "get": {
        "tags": [
          "Accounting"
        ],
        "summary": "dimension entries",
        "description": "Returns the entries for a given dimension.<br/>Required profile(s): <i>Berichte (Anzeigen)</i>.",
        "operationId": "getDimensionReportEntries",
        "parameters": [
          {
            "name": "dimensionNameOrNumber",
            "in": "path",
            "description": "the name or the number of the dimension. Example: Kostenstellen, 1",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "Kostenstellen"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the dimension entries for the given dimension"
          },
          "404": {
            "description": "Dimension name not given.<br/>The dimension with the given name was not found."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/dimensions": {
      "post": {
        "tags": [
          "Accounting"
        ],
        "summary": "dimensions",
        "description": "Returns all of the dimensions.<br/>Required profile(s): <i>Journal (Anzeigen)</i>.",
        "operationId": "getAllDimensionEntries",
        "requestBody": {
          "description": "search filter in JSON format. See also <a target='_blank' href='../browser/index.html#!/searchscope'>our search documentation</a>.",
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the dimensions."
          },
          "404": {
            "description": "No dimensions found."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/dispatch/{number}": {
      "get": {
        "tags": [
          "Dispatch"
        ],
        "summary": "get dispatch with number (interne Nummer)",
        "description": "Returns the Scopevisio dispatch with the given number (interne Nummer).<br/>Required profile(s) : <i>Lieferscheine (Anzeigen)</i>.",
        "operationId": "getDispatch",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma separated list of fields to include in the response<br/><i>id, documentNumber</i>",
            "schema": {
              "type": "string"
            },
            "example": "id,documentNumber"
          },
          {
            "name": "number",
            "in": "path",
            "description": "number (interne Nummer) of a Scopevisio dispatch",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the Scopevisio dispatch with the given number (interne Nummer)."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/dispatch/all/positions": {
      "get": {
        "tags": [
          "Dispatch"
        ],
        "summary": "retrieve all dispatch positions",
        "description": "Required profiles: <i>Lieferscheine (Anzeigen)</i>.<br/><strong>WARNING: A response contains a maximum of 5000 entries</strong><br/>Please use shorter time periods and/or pagination to retrieve all required entries",
        "operationId": "getAllDispatchPositions",
        "parameters": [
          {
            "name": "startDate",
            "in": "query",
            "description": "Start date (applies to the dispatch date). Format: dd.MM.yyyy",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "End date (applies to the dispatch date). Format: dd.MM.yyyy",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma separated list of fields to include in the response<br/><i>id, name</i>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "the number of the desired page. First page number is zero",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "the number of entries per page. A maximum of 5.000 is allowed",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns all dispatch positions."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/dispatch/{number}/parent": {
      "get": {
        "tags": [
          "Dispatch"
        ],
        "summary": "the parent of the dispatch with the given document number",
        "description": "Returns the Scopevisio outgoing invoice document which is parent of the dispatch with the given document number.<br/>Required profile(s): <i>Lieferscheine (Anzeigen)</i>.",
        "operationId": "getDispatchParent",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma separated list of fields to include in the response<br/><i>id, documentNumber</i>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "number",
            "in": "path",
            "description": "document number of a Scopevisio dispatch",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the Scopevisio outgoing invoice document, which is the parent of the dispatch with the given document number."
          },
          "404": {
            "description": "The dispatch was not found or authorization missing.<br/>No parent for the dispatch found."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/dispatch/{number}/positions": {
      "get": {
        "tags": [
          "Dispatch"
        ],
        "summary": "get the positions for the dispatch with the given number (interne Nummer)",
        "description": "Required profiles: <i>Lieferscheine (Anzeigen)</i>.<br/><strong>WARNING: A response contains a maximum of 5000 entries</strong><br/>Please use shorter time periods and/or pagination to retrieve all required entries",
        "operationId": "getDispatchPositions",
        "parameters": [
          {
            "name": "number",
            "in": "path",
            "description": "number (interne Nummer) of a Scopevisio dispatch",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma separated list of fields to include in the response<br/><i>id, name</i>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "the number of the desired page. First page number is zero",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "the number of entries per page. A maximum of 5.000 is allowed",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the positions of the dispatch with the given number (interne Nummer)."
          },
          "404": {
            "description": "No dispatch with the given number found or authorization missing."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/dispatches": {
      "post": {
        "tags": [
          "Dispatch"
        ],
        "summary": "Dispatches",
        "description": "Returns all Scopevisio dispatches.<br/>Required profile(s): <i>Lieferscheine (Anzeigen)</i>.",
        "operationId": "getDispatches",
        "requestBody": {
          "description": "search filter in JSON format. See also <a target='_blank' href='../browser/index.html#!/searchscope'>our search documentation</a>.",
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns all Scopevisio dispatches."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/events": {
      "post": {
        "tags": [
          "Activities"
        ],
        "summary": "events",
        "description": "Returns Events of Scopevisio.<br/>Required profile(s): <i>Rechnungseingangsbuch (Anzeigen)</i>.",
        "operationId": "getEvents",
        "requestBody": {
          "description": "search filter in JSON format",
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns Events of Scopevisio."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/fiscalyears": {
      "get": {
        "tags": [
          "Accounting"
        ],
        "summary": "fiscal year information",
        "description": "Returns fiscal years and posting period information.<br/>Required profile(s): <i>Journal (Anzeigen)</i>.",
        "operationId": "getApplicationContext",
        "responses": {
          "200": {
            "description": "Returns fiscal years and posting period information."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/gainandlossadjustmentaccounts": {
      "get": {
        "tags": [
          "Accounting"
        ],
        "summary": "Gain and loss accounts",
        "description": "Returns Events of Scopevisio.<br/>Required profile(s): <i>Journal (Anzeigen)</i>.",
        "operationId": "getAccountSettings",
        "parameters": [
          {
            "name": "balanceDate",
            "in": "query",
            "description": "Balancedate. Format: <code>dd.MM.yyyy</code>",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns gain and loss accounts of the currently active organisation."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/hello": {
      "get": {
        "tags": [
          "Additional"
        ],
        "summary": "simple hello world call. ",
        "description": "Returns 'Hello world' test data.<br/>No profiles required.",
        "operationId": "helloJson",
        "responses": {
          "200": {
            "description": "Call succeeded."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/humanresources": {
      "post": {
        "tags": [
          "HumanResources"
        ],
        "summary": "Get human resources",
        "description": "Get human resources.<br/>Required profile(s): <i>Human-Ressourcen Verwaltung (Anzeigen)</i>.",
        "operationId": "getHumanResources",
        "requestBody": {
          "description": "search filter in JSON format. See also <a target='_blank' href='../browser/index.html#!/searchscope'>our search documentation</a>.",
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Shows all available human resources."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/humanresourcesAvailability": {
      "post": {
        "tags": [
          "HumanResources"
        ],
        "summary": "Get availability of human resources.",
        "description": "Return availability of human resources for the given time range. Both parameters (validFrom and validTill) specify the start and end time for which the availability of human resources should be retrieved.<br/>Required profile(s): <i>Human-Ressourcen Verwaltung (Anzeigen)</i>.<br/>It is recommended to submit a payload using the <i>application/json</i> media type",
        "operationId": "getHumanResourcesYear",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HumanResourcesAvailability"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/HumanResourcesAvailability"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Retrieves the availability of human resources."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/impersonalaccounts": {
      "post": {
        "tags": [
          "Accounting"
        ],
        "summary": "impersonal accounts",
        "description": "Returns the impersonal accounts.<br/>Required profile(s): <i>Stammdaten, Kontenplan (Anzeigen)</i>.",
        "operationId": "getImpersonalAccounts",
        "requestBody": {
          "description": "search filter in JSON format. See also <a target='_blank' href='../browser/index.html#!/searchscope'>our search documentation</a>.",
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Returns the impersonal accounts"
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/incominginvoice/{id}": {
      "post": {
        "tags": [
          "IncomingInvoice"
        ],
        "summary": "update incoming invoice",
        "description": "Updates the incoming invoice with the given id. Update is possible only if the invoice has not been verified (Beleg verifiziert).<br/>Required profile(s):<i> Rechnungseingangsbuch (Anzeigen)</i>.",
        "operationId": "updateInvoice",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of a Scopevisio incoming invoice",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "content in JSON format",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IncomingInvoiceUpdateForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "There was something wrong in the request and therefore it could not be processed (headers, json syntax/content)"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/incominginvoice/{idOrNumber}/file": {
      "get": {
        "tags": [
          "IncomingInvoice"
        ],
        "summary": "Retrieve the main file of an incoming invoice with the given idOrNumber (id or Interne Nummer)",
        "description": "Returns the main file of the Scopevisio incoming invoice with the given idOrNumber (id or Interne Nummer).<br/>Required profile(s):<i> Rechnungseingangsbuch (Anzeigen)</i>.",
        "operationId": "getInvoiceFile",
        "parameters": [
          {
            "name": "idOrNumber",
            "in": "path",
            "description": "id or number(Interne Nummer) of a Scopevisio invcoming invoice.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "2021-2"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the main file of the Scopevisio incoming invoice with the given idOrNumber (id or Interne Nummer)."
          },
          "404": {
            "description": "No incoming invoice for the given idOrNumber found or authorization missing.<br/>No file for the given invoice idOrNumber found."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/incominginvoice/new": {
      "post": {
        "tags": [
          "IncomingInvoice"
        ],
        "summary": "Import an incoming invoice.",
        "description": "Required profiles: <i>Rechnungseingangsbuch (Bearbeiten)</i>.<br/>The invoice should be provided as a base64 encoded pdf file. The maximum size allowed is 20 MB.",
        "operationId": "createIncomingInvoice",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IncomingInvoiceForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Import successful."
          },
          "404": {
            "description": "Filename missing.<br/>Data missing.<br/>The data size exceeds 20 MB."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/incominginvoice/{idOrNumber}/responsiblecontact": {
      "put": {
        "tags": [
          "IncomingInvoice"
        ],
        "summary": "Set the responsible contact in an incoming invoice.",
        "description": "Required profiles: <i>Rechnungseingangsbuch (Bearbeiten)</i>.",
        "operationId": "setIncomingInvoiceResponsibleContact",
        "parameters": [
          {
            "name": "idOrNumber",
            "in": "path",
            "description": "invoice master-id or number of a Scopevisio invoice",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": 28
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IncomingInvoiceResponsibleContactForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "user contact assigned"
          },
          "404": {
            "description": "invoice master-id missing<br/>invoice missinginvoice workflow missing<br/>invoice workflow class must be of type workflow (id=1)<br/>invoice workflow formal verification missing<br/>invoice workflow content state must be valid (id=0 or id=4)<br/>invoice workflow must not be complete<br/>contact missing<br/>contact must be a valid user contact"
          },
          "500": {
            "description": "responsible contact not assigned"
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/incominginvoice/{idOrNumber}/teamworkFileLink": {
      "get": {
        "tags": [
          "IncomingInvoice"
        ],
        "summary": "Link to the main file for the incoming invoice in the teamwork web application",
        "description": "Returns a link to the main file for the incoming invoice with the given idOrNumber (id or Interne Nummer) in the teamwork web application.You need to be logged in to the teamwork webapp.<br/>Required profile(s): <i>Rechnungseingangsbuch (Anzeigen)</i>.",
        "operationId": "getIncomingInvoiceTeamworkFileLink",
        "parameters": [
          {
            "name": "idOrNumber",
            "in": "path",
            "description": "idOrNumber (id or Interne Nummer) of a Scopevisio incoming invoice.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "2021-2"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a link to the main file for the incoming invoice with the given idOrNumber (id or Interne Nummer) in the teamwork web application."
          },
          "404": {
            "description": "No outgoingInvoice for the given idOrNumber found or authorization missing.<br/>No teamwork file for the given idOrNumber."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/incominginvoices": {
      "post": {
        "tags": [
          "IncomingInvoice"
        ],
        "summary": "Incoming invoices",
        "description": "Returns Scopevisio incoming invoices.<br/>Required profile(s): <i>Rechnungseingangsbuch (Anzeigen)</i>.",
        "operationId": "getIncomingInvoices",
        "requestBody": {
          "description": "(optional) Apply a search filter in JSON. See also <a target='_blank' href='../browser/index.html#!/searchscope'>our search documentation</a>.",
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns Scopevisio incoming invoices."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/incomingmail/new": {
      "post": {
        "tags": [
          "Project"
        ],
        "summary": "Import an incoming email. ",
        "description": "Required profiles: <i>Mailbot, Mailagent (Bearbeiten)</i>.<br/>The service tries to assign the imported mail to the sender and receiver contacts if found and if they are not the current user or a valid sender (see Scopevisio client, Systemadministration -> Persönliche E-Mail-Adresse verwalten -> Absender 1-5).The email should be provided as eml content.",
        "operationId": "createIncomingMail",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IncomingMailForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Import successful."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/journal/{documentNumber}/cancel": {
      "post": {
        "tags": [
          "Accounting"
        ],
        "summary": "Cancels the posting with the given documentNumber.",
        "description": "Cancels the posting with the given documentNumber. If the posting is already cancelled no error is thrown but the cancellation posting document number is returned.<br/>Required profiles: <i>Journal (Bearbeiten)</i>",
        "operationId": "cancelPostingDocument",
        "parameters": [
          {
            "name": "documentNumber",
            "in": "path",
            "description": "Document number (Buchungsnummer) of a Scopevisio general journal entry.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "2021-00001"
          }
        ],
        "responses": {
          "200": {
            "description": "The posting with the given documentNumber has already been or was just successfully cancelled.<br/>The posting with the given documentNumber could not be cancelled because of validation errors: The posting period is closed, the accounts are locked, etc. In this case please take the errors in the response into consideration."
          },
          "400": {
            "description": "The posting with the given documentNumber is a cancellation posting and cannot be cancelled."
          },
          "404": {
            "description": "The posting with the given documentNumber was not found."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/journal": {
      "post": {
        "tags": [
          "Accounting"
        ],
        "summary": "general journal entries",
        "description": "Returns the Scopevisio journal entries.<br/>Required profile(s): <i>Journal (Anzeigen)</i>.",
        "operationId": "getJournalEntries",
        "requestBody": {
          "description": "search filter in JSON format. See also <a target='_blank' href='../browser/index.html#!/searchscope'>our search documentation</a>.",
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the Scopevisio journal entries."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/journal/{documentNumber}": {
      "get": {
        "tags": [
          "Accounting"
        ],
        "summary": "Posting by documentNumber",
        "description": "Returns the Scopevisio posting rows with the given documentNumber.<br/>Required profile(s): <i>Journal (Anzeigen)</i>.",
        "operationId": "getJournalEntryByDocumentNumber",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma separated list of fields to include in the response<br/><i>documentNumber, postingDate</i>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "documentNumber",
            "in": "path",
            "description": "documentNumber (Buchungsnummer) of a Scopevisio posting.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "2021-00001"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the Scopevisio posting rows with the given documentNumber."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/journal/{documentNumber}/file": {
      "get": {
        "tags": [
          "Accounting"
        ],
        "summary": "Returns file for a journal entry if existing",
        "description": "Returns the file of the general journal entry with the given document number.<br/>Required profile(s): <i>Journal (Anzeigen)</i>.",
        "operationId": "getGeneralJournalEntryFile",
        "parameters": [
          {
            "name": "documentNumber",
            "in": "path",
            "description": "document number of a Scopevisio general journal entry",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "2021-00001"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the file for the journal entry with the given documentNumber."
          },
          "404": {
            "description": "No journal entry for the given number found or authorization missing.<br/>No file for the given documentNumber found.<br/>Not outgoing or incoming invoice found or authorization missing.<br/>No cashbook entry for the given documentNumber found."
          },
          "500": {
            "description": "There is a file name in the journal entry, but no reference to the file itself."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/journal/{documentNumber}/file/new": {
      "post": {
        "tags": [
          "Accounting"
        ],
        "summary": "Add a file to a Scopevisio journal entry",
        "description": "Adds a file to a Scopevisio journal entry.<br/>Required profile(s): <i>Journal (Bearbeiten)</i>.",
        "operationId": "addFile",
        "parameters": [
          {
            "name": "documentNumber",
            "in": "path",
            "description": "document number of a Scopevisio general journal entry",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "2021-00001"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FileForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "File added"
          },
          "400": {
            "description": "Data was not provided"
          },
          "404": {
            "description": "No journal entry for the given number found or authorization missing"
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/journal/{documentNumber}/filewithstamp": {
      "get": {
        "tags": [
          "Accounting"
        ],
        "summary": "Returns file for a journal entry if existing, adds invoice stamps based on invoice settings",
        "description": "Returns the file of the general journal entry with the given document number.<br/>Required profile(s): <i>Journal (Anzeigen)</i>.",
        "operationId": "getGeneralJournalEntryFile_1",
        "parameters": [
          {
            "name": "documentNumber",
            "in": "path",
            "description": "document number of a Scopevisio general journal entry",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "2021-00001"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the file for the journal entry with the given documentNumber."
          },
          "404": {
            "description": "No journal entry for the given number found or authorization missing.<br/>No file for the given documentNumber found.<br/>Not outgoing or incoming invoice found or authorization missing.<br/>No cashbook entry for the given documentNumber found."
          },
          "500": {
            "description": "There is a file name in the journal entry, but no reference to the file itself."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/kreditoraccounts/{accountNumber}": {
      "post": {
        "tags": [
          "Accounting"
        ],
        "summary": "Update a kreditor by accountNumber (Kontonummer).",
        "description": "Updates the kreditor with the given accountNumber.<br/>Required profile(s): <i>Stammdaten, Kreditorenstamm (Bearbeiten)</i>.",
        "operationId": "updateKreditor",
        "parameters": [
          {
            "name": "accountNumber",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "content in JSON format",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePersonalAccountForm"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Personal account updated."
          },
          "400": {
            "description": "No personal account given."
          },
          "404": {
            "description": "The personal account with the given accountNumber was not found or authorization missing."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/kreditoraccounts": {
      "post": {
        "tags": [
          "Accounting"
        ],
        "summary": "kreditor accounts",
        "description": "Returns the Kreditor-Accounts.<br/>Required profile(s): <i>Stammdaten, Kreditorenstamm (Anzeigen)</i>.",
        "operationId": "getKreditorAccounts",
        "requestBody": {
          "description": "search filter in JSON format. See also <a target='_blank' href='../browser/index.html#!/searchscope'>our search documentation</a>.",
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Returns the kreditor accounts"
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/licences": {
      "get": {
        "tags": [
          "Additional"
        ],
        "summary": "Scopevisio licences",
        "description": "Returns the available Scopevisio licences and the assigned users.<br/>No profiles required.",
        "operationId": "getLicences",
        "responses": {
          "200": {
            "description": "Returns the available Scopevisio licences and the assigned users."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/material/product/{number}": {
      "post": {
        "tags": [
          "Materials management (BETA)"
        ],
        "summary": "Retrieve a single materials management product (BETA)",
        "description": "Returns a single product.<br/>Required profile(s): <i>Produktverwaltung (Anzeigen)</i>.",
        "operationId": "getMaterialProduct",
        "parameters": [
          {
            "name": "number",
            "in": "path",
            "description": "number of a product",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "search filter in JSON format. See also <a target='_blank' href='../browser/index.html#!/searchscope'>our search documentation</a>.",
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns a single product."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/material/products": {
      "post": {
        "tags": [
          "Materials management (BETA)"
        ],
        "summary": "Retrieve multiple materials management products (BETA)",
        "description": "Returns multiple products.<br/>Required profile(s): <i>Produktverwaltung (Anzeigen)</i>.",
        "operationId": "getMaterialProducts",
        "requestBody": {
          "description": "search filter in JSON format. See also <a target='_blank' href='../browser/index.html#!/searchscope'>our search documentation</a>.",
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns multiple products."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/material/products/outgoing": {
      "post": {
        "tags": [
          "Materials management (BETA)"
        ],
        "summary": "Retrieve materials management outgoing product entries of multiple products (BETA)",
        "description": "Returns outgoing product entries of multiple products.<br/>Required profile(s): <i>Produktverwaltung (Anzeigen)</i>.",
        "operationId": "getMaterialAllProductsOutgoing",
        "parameters": [
          {
            "name": "storageLocationId",
            "in": "query",
            "description": "id of a storage location",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startTs",
            "in": "query",
            "description": "outgoing product entries starting at this timestamp (milliseconds since the Unix Epoch)",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "endTs",
            "in": "query",
            "description": "outgoing product entries earlier than this timestamp (milliseconds since the Unix Epoch)",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "search filter in JSON format. See also <a target='_blank' href='../browser/index.html#!/searchscope'>our search documentation</a>.",
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns outgoing product entries of multiple products."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/material/product/outgoing/{number}": {
      "post": {
        "tags": [
          "Materials management (BETA)"
        ],
        "summary": "Retrieve materials management outgoing product entries of a single product (BETA)",
        "description": "Returns outgoing product entries of a single product.<br/>Required profile(s): <i>Produktverwaltung (Anzeigen)</i>.",
        "operationId": "getMaterialSingleProductOutgoing",
        "parameters": [
          {
            "name": "storageLocationId",
            "in": "query",
            "description": "id of a storage location",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startTs",
            "in": "query",
            "description": "outgoing product entries starting at this timestamp (milliseconds since the Unix Epoch)",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "endTs",
            "in": "query",
            "description": "outgoing product entries earlier than this timestamp (milliseconds since the Unix Epoch)",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "number",
            "in": "path",
            "description": "number of a product",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "search filter in JSON format. See also <a target='_blank' href='../browser/index.html#!/searchscope'>our search documentation</a>.",
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns outgoing product entries of a single product."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/material/products/stock": {
      "post": {
        "tags": [
          "Materials management (BETA)"
        ],
        "summary": "Retrieve stock entries of materials management products (BETA)",
        "description": "Returns stock entries of multiple products.<br/>Required profile(s): <i>Produktverwaltung (Anzeigen)</i>.",
        "operationId": "getMaterialAllProductsStock",
        "parameters": [
          {
            "name": "storageLocationId",
            "in": "query",
            "description": "id of a storage location",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startTs",
            "in": "query",
            "description": "change to product stock starting at this timestamp (milliseconds since the Unix Epoch)",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "endTs",
            "in": "query",
            "description": "change to product stock earlier than this timestamp (milliseconds since the Unix Epoch)",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "search filter in JSON format. See also <a target='_blank' href='../browser/index.html#!/searchscope'>our search documentation</a>.",
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns stock entries of multiple products."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/material/product/stock/{number}": {
      "post": {
        "tags": [
          "Materials management (BETA)"
        ],
        "summary": "Retrieve stock entries of a single materials management product (BETA)",
        "description": "Returns stock entries of a single product.<br/>Required profile(s): <i>Produktverwaltung (Anzeigen)</i>.",
        "operationId": "getMaterialSingleProductStock",
        "parameters": [
          {
            "name": "storageLocationId",
            "in": "query",
            "description": "id of a storage location",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startTs",
            "in": "query",
            "description": "change to product stock starting at this timestamp (milliseconds since the Unix Epoch)",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "endTs",
            "in": "query",
            "description": "change to product stock earlier than this timestamp (milliseconds since the Unix Epoch)",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "number",
            "in": "path",
            "description": "number of a product",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "search filter in JSON format. See also <a target='_blank' href='../browser/index.html#!/searchscope'>our search documentation</a>.",
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns stock entries of a single product."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/myaccount": {
      "get": {
        "tags": [
          "Additional"
        ],
        "summary": "customer account information",
        "description": "Returns customer and user account info.<br/>No profiles required.",
        "operationId": "getApplicationContext_1",
        "responses": {
          "200": {
            "description": "Return the account information for the current user."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/offer/{number}/convertToDispatch": {
      "post": {
        "tags": [
          "Offer"
        ],
        "summary": "Convert offer to dispatch",
        "description": "Convert the Scopevisio offer with the given number (interne Nummer) to an dispatch.<br/>Required profile(s): <i>Angebote (Bearbeiten)</i>.",
        "operationId": "convertOfferToDispatch",
        "parameters": [
          {
            "name": "number",
            "in": "path",
            "description": "number (interne Nummer) of a Scopevisio offer",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The offer was successfully converted to dispatch."
          },
          "404": {
            "description": "The offer was not found or the user has no write permissions for it."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/offer/{number}/convertToOpportunity": {
      "post": {
        "tags": [
          "Offer"
        ],
        "summary": "Convert offer to opportunity",
        "description": "Convert the Scopevisio offer with the given number (interne Nummer) to an opportunity.<br/>Required profile(s): <i>Angebote (Bearbeiten)</i>.",
        "operationId": "convertOfferToOpportunity",
        "parameters": [
          {
            "name": "number",
            "in": "path",
            "description": "number (interne Nummer) of a Scopevisio offer",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The offer was successfully converted to opportunity."
          },
          "404": {
            "description": "The offer was not found or the user has no write permissions for it."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/offer/{number}/convertToOrder": {
      "post": {
        "tags": [
          "Offer"
        ],
        "summary": "Convert offer to order",
        "description": "Convert the Scopevisio offer with the given number (interne Nummer) to an order.<br/>Required profile(s): <i>Angebote (Bearbeiten)</i>.",
        "operationId": "convertOfferToOrder",
        "parameters": [
          {
            "name": "number",
            "in": "path",
            "description": "number (interne Nummer) of a Scopevisio offer",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The offer was successfully converted to order."
          },
          "404": {
            "description": "The offer was not found or the user has no write permissions for it."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/offer/{number}/convertToOutgoingInvoice": {
      "post": {
        "tags": [
          "Offer"
        ],
        "summary": "Convert offer to outgoing invoice",
        "description": "Convert the Scopevisio offer with the given number (interne Nummer) to an outgoing invoice.<br/>Required profile(s): <i>Angebote (Bearbeiten)</i>.",
        "operationId": "convertOfferToOutgoingInvoice",
        "parameters": [
          {
            "name": "number",
            "in": "path",
            "description": "number (interne Nummer) of a Scopevisio offer",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The offer was successfully converted to outgoing invoice."
          },
          "404": {
            "description": "The offer was not found or the user has no write permissions for it."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/offer/{number}/convertToRecurringInvoice": {
      "post": {
        "tags": [
          "Offer"
        ],
        "summary": "Convert offer to recurring invoice",
        "description": "Convert the Scopevisio offer with the given number (interne Nummer) to a recurring invoice.<br/>Required profile(s): <i>Angebote (Bearbeiten)</i>.",
        "operationId": "convertOfferToRecurringInvoice",
        "parameters": [
          {
            "name": "number",
            "in": "path",
            "description": "number (interne Nummer) of a Scopevisio offer",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConvertToRecurringInvoiceForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The offer was successfully converted to recurring invoice."
          },
          "404": {
            "description": "The offer was not found or the user has no write permissions for it."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/offer/{number}": {
      "get": {
        "tags": [
          "Offer"
        ],
        "summary": "get offer with number (interne Nummer)",
        "description": "Returns the Scopevisio offer with the given number (interne Nummer).<br/>Required profile(s) : <i>Angebote (Anzeigen)</i>.",
        "operationId": "getOffer",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma separated list of fields to include in the response<br/><i>id, documentNumber</i>",
            "schema": {
              "type": "string"
            },
            "example": "id,documentNumber,name"
          },
          {
            "name": "number",
            "in": "path",
            "description": "number (interne Nummer) of a Scopevisio offer",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the Scopevisio offer with the given number (interne Nummer)."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/offer/all/positions": {
      "get": {
        "tags": [
          "Offer"
        ],
        "summary": "retrieve all offer positions",
        "description": "Required profiles: <i>Angebote (Anzeigen)</i>.<br/><strong>WARNING: A response contains a maximum of 5000 entries</strong><br/>Please use shorter time periods and/or pagination to retrieve all required entries",
        "operationId": "getAllOfferPositions",
        "parameters": [
          {
            "name": "startDate",
            "in": "query",
            "description": "Start date (applies to the offer date). Format: dd.MM.yyyy",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "End date (applies to the offer date). Format: dd.MM.yyyy",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma separated list of fields to include in the response<br/><i>id, name</i>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "the number of the desired page. First page number is zero",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "the number of entries per page. A maximum of 5.000 is allowed",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns all offer positions."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/offer/{number}/parent": {
      "get": {
        "tags": [
          "Offer"
        ],
        "summary": "the parent of an offer with the given document number",
        "description": "Returns the Scopevisio outgoing invoice document which is parent of the outgoing invoice with the given document number.<br/>Required profile(s): <i>Angebote (Anzeigen)</i>.",
        "operationId": "getOfferParent",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma separated list of fields to include in the response<br/><i>id, documentNumber</i>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "number",
            "in": "path",
            "description": "document number of a Scopevisio offer",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the Scopevisio outgoing invoice document which is parent of the offer with the given document number."
          },
          "404": {
            "description": "The offer was not found or authorization missing.<br/>No parent for the offer found."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/offer/{number}/positions": {
      "get": {
        "tags": [
          "Offer"
        ],
        "summary": "get the positions for the offer with the given number (interne Nummer)",
        "description": "Required profiles: <i>Angebote (Anzeigen)</i>.<br/><strong>WARNING: A response contains a maximum of 5000 entries</strong><br/>Please use shorter time periods and/or pagination to retrieve all required entries",
        "operationId": "getOfferPositions",
        "parameters": [
          {
            "name": "number",
            "in": "path",
            "description": "number (interne Nummer) of a Scopevisio offer",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma separated list of fields to include in the response<br/><i>id, name</i>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "the number of the desired page. First page number is zero",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "the number of entries per page. A maximum of 5.000 is allowed",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the positions of the offer with the given number (interne Nummer). "
          },
          "404": {
            "description": "No offer with the given number found or authorization missing."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/offers": {
      "post": {
        "tags": [
          "Offer"
        ],
        "summary": "Offers",
        "description": "Returns all Scopevisio offers.<br/>Required profile(s): <i>Angebote (Anzeigen)</i>.",
        "operationId": "getOffers",
        "requestBody": {
          "description": "search filter in JSON format. See also <a target='_blank' href='../browser/index.html#!/searchscope'>our search documentation</a>.",
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns all Scopevisio offers."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/openitems/creditors": {
      "post": {
        "tags": [
          "Accounting"
        ],
        "summary": "creditor open items",
        "description": "Returns all creditor open items (outstanding accounts payable items)<br/>The output contains open incoming invoices (and credit notes) as well as unmatched payments made to a creditor<br/>Required profile(s): <i>Kreditoren (Anzeigen)</i>.",
        "operationId": "getCreditorOpenItems",
        "parameters": [
          {
            "name": "historicTs",
            "in": "query",
            "description": "creditor open items at this timestamp (milliseconds since the Unix Epoch)",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "accountNumber",
            "in": "query",
            "description": "creditor account number",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "search filter in JSON format. See also <a target='_blank' href='../browser/index.html#!/searchscope'>our search documentation</a>.",
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns all creditor open items"
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/openitems/debtors": {
      "post": {
        "tags": [
          "Accounting"
        ],
        "summary": "debtor open items",
        "description": "Returns all debtor open items (outstanding accounts receivable items)<br/>The output contains open outgoing invoices (and credit notes) as well as unmatched payments made by the debtor<br/>Required profile(s): <i>Debitoren (Anzeigen)</i>.",
        "operationId": "getDebtorOpenItems",
        "parameters": [
          {
            "name": "historicTs",
            "in": "query",
            "description": "debtor open items at this timestamp (milliseconds since the Unix Epoch)",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "accountNumber",
            "in": "query",
            "description": "debtor account number",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "search filter in JSON format. See also <a target='_blank' href='../browser/index.html#!/searchscope'>our search documentation</a>.",
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns all debtor open items"
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/opportunities": {
      "post": {
        "tags": [
          "Opportunity"
        ],
        "summary": "Opportunities",
        "description": "Returns all Scopevisio opportunites.<br/>Required profile(s): <i>Angebote, Aufträge, Lieferscheine, Rechnungen (Anzeigen)</i>.",
        "operationId": "getOpportunities",
        "requestBody": {
          "description": "search filter in JSON format. See also <a target='_blank' href='../browser/index.html#!/searchscope'>our search documentation</a>.",
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns all Scopevisio opportunities."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/opportunity/{number}/convertToDispatch": {
      "post": {
        "tags": [
          "Opportunity"
        ],
        "summary": "Convert opportunity to dispatch",
        "description": "Convert the Scopevisio opportunity with the given number (interne Nummer) to an dispatch.<br/>Required profile(s): <i>Rechnungen, Potenzial (Opportunities) (Bearbeiten)</i>.",
        "operationId": "convertOpportunityToDispatch",
        "parameters": [
          {
            "name": "number",
            "in": "path",
            "description": "number (interne Nummer) of a Scopevisio opportunity",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The opportunity was successfully converted to dispatch."
          },
          "404": {
            "description": "The opportunity was not found or the user has no write permissions for it."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/opportunity/{number}/convertToOffer": {
      "post": {
        "tags": [
          "Opportunity"
        ],
        "summary": "Convert opportunity to offer",
        "description": "Convert the Scopevisio opportunity with the given number (interne Nummer) to an offer.<br/>Required profile(s): <i>Rechnungen, Potenzial (Opportunities) (Bearbeiten)</i>.",
        "operationId": "convertOpportunityToOffer",
        "parameters": [
          {
            "name": "number",
            "in": "path",
            "description": "number (interne Nummer) of a Scopevisio opportunity",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The opportunity was successfully converted to offer."
          },
          "404": {
            "description": "The opportunity was not found or the user has no write permissions for it."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/opportunity/{number}/convertToOrder": {
      "post": {
        "tags": [
          "Opportunity"
        ],
        "summary": "Convert opportunity to order",
        "description": "Convert the Scopevisio opportunity with the given number (interne Nummer) to an order.<br/>Required profile(s): <i>Rechnungen, Potenzial (Opportunities) (Bearbeiten)</i>.",
        "operationId": "convertOpportunityToOrder",
        "parameters": [
          {
            "name": "number",
            "in": "path",
            "description": "number (interne Nummer) of a Scopevisio opportunity",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The opportunity was successfully converted to order."
          },
          "404": {
            "description": "The opportunity was not found or the user has no write permissions for it."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/opportunity/{number}/convertToOutgoingInvoice": {
      "post": {
        "tags": [
          "Opportunity"
        ],
        "summary": "Convert opportunity to outgoing invoice",
        "description": "Convert the Scopevisio opportunity with the given number (interne Nummer) to an outgoing invoice.<br/>Required profile(s): <i>Rechnungen, Potenzial (Opportunities) (Bearbeiten)</i>.",
        "operationId": "convertOpportunityToOutgoingInvoice",
        "parameters": [
          {
            "name": "number",
            "in": "path",
            "description": "number (interne Nummer) of a Scopevisio opportunity",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The opportunity was successfully converted to outgoing invoice."
          },
          "404": {
            "description": "The opportunity was not found or the user has no write permissions for it."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/opportunity/{number}/convertToRecurringInvoice": {
      "post": {
        "tags": [
          "Opportunity"
        ],
        "summary": "Convert opportunity to recurring invoice",
        "description": "Convert the Scopevisio opportunity with the given number (interne Nummer) to a recurring invoice.<br/>Required profile(s): <i>Rechnungen, Potenzial (Opportunities) (Bearbeiten)</i>.",
        "operationId": "convertOpportunityToRecurringInvoice",
        "parameters": [
          {
            "name": "number",
            "in": "path",
            "description": "number (interne Nummer) of a Scopevisio opportunity",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConvertToRecurringInvoiceForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The opportunity was successfully converted to recurring invoice."
          },
          "404": {
            "description": "The opportunity was not found or the user has no write permissions for it."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/opportunity/{number}": {
      "get": {
        "tags": [
          "Opportunity"
        ],
        "summary": "get opportunity with number (interne Nummer)",
        "description": "Returns the Scopevisio sales potential with the given number (interne Nummer).<br/>Required profile(s): <i>Rechnungen, Potenzial (Opportunities) (Anzeigen)</i>.",
        "operationId": "getOpportunity",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma separated list of fields to include in the response<br/><i>id, documentNumber</i>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "number",
            "in": "path",
            "description": "number (interne Nummer) of a Scopevisio outgoing invoice",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the Scopevisio opportunity with the given number (interne Nummer)."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/opportunity/all/positions": {
      "get": {
        "tags": [
          "Opportunity"
        ],
        "summary": "retrieve all potential positions",
        "description": "Required profiles: <i>Rechnungen, Potenzial (Opportunities) (Anzeigen)</i>.<br/><strong>WARNING: A response contains a maximum of 5000 entries</strong><br/>Please use shorter time periods and/or pagination to retrieve all required entries",
        "operationId": "getAllOpportunityPositions",
        "parameters": [
          {
            "name": "startDate",
            "in": "query",
            "description": "Start date (applies to the potential date). Format: dd.MM.yyyy",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "End date (applies to the potential date). Format: dd.MM.yyyy",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma separated list of fields to include in the response<br/><i>id, name</i>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "the number of the desired page. First page number is zero",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "the number of entries per page. A maximum of 5.000 is allowed",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns all potential positions."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/opportunity/{number}/positions": {
      "get": {
        "tags": [
          "Opportunity"
        ],
        "summary": "get opportunity positions for the given number (interne Nummer)",
        "description": "Required profiles: <i>Rechnungen, Potenzial (Opportunities) (Anzeigen)</i>.<br/><strong>WARNING: A response contains a maximum of 5000 entries</strong><br/>Please use shorter time periods and/or pagination to retrieve all required entries",
        "operationId": "getOpportunityPositions",
        "parameters": [
          {
            "name": "number",
            "in": "path",
            "description": "number (interne Nummer) of a Scopevisio potential",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma separated list of fields to include in the response<br/><i>id, name</i>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "the number of the desired page. First page number is zero",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "the number of entries per page. A maximum of 5.000 is allowed",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the positions for the opportunity with the given number (interne Nummer). "
          },
          "404": {
            "description": "No offer with the given number found or authorization missing."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/order/{number}/convertToDispatch": {
      "post": {
        "tags": [
          "Order"
        ],
        "summary": "Convert order to Dispatch",
        "description": "Convert the Scopevisio order with the given number (interne Nummer) to an dispatch.<br/>Required profile(s): <i>Aufträge (Bearbeiten)</i>.",
        "operationId": "convertOrderToDispatch",
        "parameters": [
          {
            "name": "number",
            "in": "path",
            "description": "number (interne Nummer) of a Scopevisio order",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The order was successfully converted to Dispatch."
          },
          "404": {
            "description": "The order was not found or the user has no write permissions for it."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/order/{number}/convertToOffer": {
      "post": {
        "tags": [
          "Order"
        ],
        "summary": "Convert order to offer",
        "description": "Convert the Scopevisio order with the given number (interne Nummer) to an offer.<br/>Required profile(s): <i>Aufträge (Bearbeiten)</i>.",
        "operationId": "convertOrderToOffer",
        "parameters": [
          {
            "name": "number",
            "in": "path",
            "description": "number (interne Nummer) of a Scopevisio order",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The order was successfully converted to offer."
          },
          "404": {
            "description": "The order was not found or the user has no write permissions for it."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/order/{number}/convertToOpportunity": {
      "post": {
        "tags": [
          "Order"
        ],
        "summary": "Convert order to opportunity",
        "description": "Convert the Scopevisio order with the given number (interne Nummer) to an opportunity.<br/>Required profile(s): <i>Aufträge (Bearbeiten)</i>.",
        "operationId": "convertOrderToOpportunity",
        "parameters": [
          {
            "name": "number",
            "in": "path",
            "description": "number (interne Nummer) of a Scopevisio order",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The order was successfully converted to opportunity."
          },
          "404": {
            "description": "The order was not found or the user has no write permissions for it."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/order/{number}/convertToOutgoingInvoice": {
      "post": {
        "tags": [
          "Order"
        ],
        "summary": "Convert order to outgoing invoice",
        "description": "Convert the Scopevisio order with the given number (interne Nummer) to an outgoing invoice.<br/>Required profile(s): <i>Aufträge (Bearbeiten)</i>.",
        "operationId": "convertOrderToOutgoingInvoice",
        "parameters": [
          {
            "name": "number",
            "in": "path",
            "description": "number (interne Nummer) of a Scopevisio order",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The order was successfully converted to outgoing invoice."
          },
          "404": {
            "description": "The order was not found or the user has no write permissions for it."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/order/{number}/convertToRecurringInvoice": {
      "post": {
        "tags": [
          "Order"
        ],
        "summary": "Convert order to recurring invoice",
        "description": "Convert the Scopevisio order with the given number (interne Nummer) to a recurring invoice.<br/>Required profile(s): <i>Aufträge (Bearbeiten)</i>.",
        "operationId": "convertOrderToRecurringInvoice",
        "parameters": [
          {
            "name": "number",
            "in": "path",
            "description": "number (interne Nummer) of a Scopevisio order",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConvertToRecurringInvoiceForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The order was successfully converted to recurring invoice."
          },
          "404": {
            "description": "The order was not found or the user has no write permissions for it."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/order/{number}": {
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "get order with number (interne Nummer)",
        "description": "Returns the Scopevisio order with the given number (interne Nummer).<br/>Required profile(s) : <i>Aufträge (Anzeigen)</i>.",
        "operationId": "getOrder",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma separated list of fields to include in the response<br/><i>id, documentNumber</i>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "number",
            "in": "path",
            "description": "number (interne Nummer) of a Scopevisio order",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the Scopevisio order with the given number (interne Nummer)."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/order/all/positions": {
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "retrieve all order positions",
        "description": "Required profiles: <i>Aufträge (Anzeigen)</i>.<br/><strong>WARNING: A response contains a maximum of 5000 entries</strong><br/>Please use shorter time periods and/or pagination to retrieve all required entries",
        "operationId": "getAllOrderPositions",
        "parameters": [
          {
            "name": "startDate",
            "in": "query",
            "description": "Start date (applies to the order date). Format: dd.MM.yyyy",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "End date (applies to the order date). Format: dd.MM.yyyy",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma separated list of fields to include in the response<br/><i>id, name</i>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "the number of the desired page. First page number is zero",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "the number of entries per page. A maximum of 5.000 is allowed",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns all order positions."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/order/{number}/parent": {
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "the parent of an order with the given document number",
        "description": "Returns the Scopevisio outgoing invoice document which is parent of the order with the given document number.<br/>Required profile(s): <i>Aufträge (Anzeigen)</i>.",
        "operationId": "getOrderParent",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma separated list of fields to include in the response<br/><i>id, documentNumber</i>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "number",
            "in": "path",
            "description": "document number of a Scopevisio offer",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the Scopevisio outgoing invoice document which is parent of the order with the given document number."
          },
          "404": {
            "description": "The order was not found or authorization missing.<br/>No parent for the offer found."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/order/{number}/positions": {
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "get the positions for the order with the given number (interne Nummer)",
        "description": "Required profiles: <i>Aufträge (Anzeigen)</i>.<br/><strong>WARNING: A response contains a maximum of 5000 entries</strong><br/>Please use shorter time periods and/or pagination to retrieve all required entries",
        "operationId": "getOrderPositions",
        "parameters": [
          {
            "name": "number",
            "in": "path",
            "description": "number (interne Nummer) of a Scopevisio order",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma separated list of fields to include in the response<br/><i>id, name</i>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "the number of the desired page. First page number is zero",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "the number of entries per page. A maximum of 5.000 is allowed",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the positions of the order with the given number (interne Nummer)."
          },
          "404": {
            "description": "No order with the given number found or authorization missing."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/orders": {
      "post": {
        "tags": [
          "Order"
        ],
        "summary": "Orders",
        "description": "Returns all Scopevisio orders.<br/>Required profile(s): <i>Aufträge (Anzeigen)</i>.",
        "operationId": "getOrders",
        "requestBody": {
          "description": "search filter in JSON format. See also <a target='_blank' href='../browser/index.html#!/searchscope'>our search documentation</a>.",
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns all Scopevisio orders."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/organisation/new": {
      "post": {
        "tags": [
          "Organisation"
        ],
        "summary": "Creates a Scopevisio organisation.",
        "description": "Creates a Scopevisio organisation with the given name (if not existing) and the given scoa (standard chart of accounts). <strong>The scoa set up takes some time. Please make sure you set your timeout to at least 5 min.</strong>\nRequired profiles: <i>Organisation (Bearbeiten)</i>",
        "operationId": "createOrganisation",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganisationForm"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Organisation created."
          },
          "400": {
            "description": "A Scopevisio organisation with the given organisationName already exists.<br/>No standard chart of accounts for the given scoa found."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/organisations": {
      "get": {
        "tags": [
          "Additional",
          "Organisation"
        ],
        "summary": "organisations",
        "description": "Returns organisations of a customers instance the user has access to.<br/>No profiles required.",
        "operationId": "organisationJson",
        "responses": {
          "200": {
            "description": "Returns organisations of a customers instance the user has access to."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/outgoinginvoice/{number}/convertToDispatch": {
      "post": {
        "tags": [
          "OutgoingInvoice"
        ],
        "summary": "Convert outgoing invoice to dispatch",
        "description": "Convert the Scopevisio outgoing invoice with the given number (interne Nummer) to an dispatch.<br/>Required profile(s): <i>Rechnungen (Bearbeiten)</i>.",
        "operationId": "convertInvoiceToDispatch",
        "parameters": [
          {
            "name": "number",
            "in": "path",
            "description": "number (interne Nummer) of a Scopevisio outgoing invoice",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The outgoing invoice was successfully converted to dispatch."
          },
          "404": {
            "description": "The outgoing invoice was not found or the user has no write permissions for it."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/outgoinginvoice/{number}/convertToOffer": {
      "post": {
        "tags": [
          "OutgoingInvoice"
        ],
        "summary": "Convert outgoing invoice to offer",
        "description": "Convert the Scopevisio outgoing invoice with the given number (interne Nummer) to an offer.\"Required profile(s): <i>Rechnungen (Bearbeiten)</i>.",
        "operationId": "convertInvoiceToOffer",
        "parameters": [
          {
            "name": "number",
            "in": "path",
            "description": "number (interne Nummer) of a Scopevisio outgoing invoice",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The outgoing invoice was successfully converted to offer."
          },
          "404": {
            "description": "The outgoing invoice was not found or the user has no write permissions for it."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/outgoinginvoice/{number}/convertToOpportunity": {
      "post": {
        "tags": [
          "OutgoingInvoice"
        ],
        "summary": "Convert outgoing invoice to opportunity",
        "description": "Convert the Scopevisio outgoing invoice with the given number (interne Nummer) to an opportunity. Required profile(s): <i>Rechnungen (Bearbeiten)</i>.",
        "operationId": "convertInvoiceToOpportunity",
        "parameters": [
          {
            "name": "number",
            "in": "path",
            "description": "number (interne Nummer) of a Scopevisio outgoing invoice",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The outgoing invoice was successfully converted to opportunity."
          },
          "404": {
            "description": "The outgoing invoice was not found or the user has no write permissions for it."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/outgoinginvoice/{number}/convertToOrder": {
      "post": {
        "tags": [
          "OutgoingInvoice"
        ],
        "summary": "Convert outgoing invoice to order",
        "description": "Convert the Scopevisio outgoing invoice with the given number (interne Nummer) to an order.<br/>Required profile(s): <i>Rechnungen (Bearbeiten)</i>.",
        "operationId": "convertInvoiceToOrder",
        "parameters": [
          {
            "name": "number",
            "in": "path",
            "description": "number (interne Nummer) of a Scopevisio outgoing invoice",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The outgoing invoice was successfully converted to order."
          },
          "404": {
            "description": "The outgoing invoice was not found or the user has no write permissions for it."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/outgoinginvoice/{number}/convertToRecurringInvoice": {
      "post": {
        "tags": [
          "OutgoingInvoice"
        ],
        "summary": "Convert outgoing invoice to recurring invoice",
        "description": "Convert the Scopevisio outgoing invoice with the given number (interne Nummer) to a recurring invoice.<br/>Required profile(s): <i>Rechnungen (Bearbeiten)</i>.",
        "operationId": "convertInvoiceToRecurringInvoice",
        "parameters": [
          {
            "name": "number",
            "in": "path",
            "description": "number (interne Nummer) of a Scopevisio outgoing invoice",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConvertToRecurringInvoiceForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The outgoing invoice was successfully converted to recurring invoice."
          },
          "404": {
            "description": "The outgoing invoice was not found or the user has no write permissions for it."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/outgoinginvoice/{number}": {
      "get": {
        "tags": [
          "OutgoingInvoice"
        ],
        "summary": "outgoing invoice for number (interne Nummer)",
        "description": "Returns the Scopevisio outgoing invoices with the given number (interne Nummer).<br/>Required profile(s): <i>Rechnungen (Anzeigen)</i>.",
        "operationId": "getOutgoingInvoice",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma separated list of fields to include in the response<br/><i>id, documentNumber</i>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "number",
            "in": "path",
            "description": "number (interne Nummer) of a Scopevisio outgoing invoice",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the Scopevisio outgoing invoice with the given number (interne Nummer)."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      },
      "post": {
        "tags": [
          "OutgoingInvoice"
        ],
        "summary": "update outgoingInvoice by number (BETA)",
        "description": "<b> This endpoint is still in BETA version. Please make sure you get the desired results before you create your invoices in production. In case of errors or wrongful behaviour please contact our support.</b>\nUpdates the Scopevisio outgoing invoice with the given number.<br/>Required profile(s): <i>Rechnungen (Bearbeiten)</i>.",
        "operationId": "updateOutgoingInvoice",
        "parameters": [
          {
            "name": "number",
            "in": "path",
            "description": "document number of a Scopevisio outgoing invoice",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Content in JSON format.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OutgoingInvoiceForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The outgoing invoice was successfully updated."
          },
          "400": {
            "description": "Mandatory data is not provided."
          },
          "403": {
            "description": "Update forbidden. The outgoing invoice is already posted."
          },
          "404": {
            "description": "The outgoing invoice to update was not found or the user has no write permissions for it."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/outgoinginvoice/{number}/post": {
      "post": {
        "tags": [
          "OutgoingInvoice"
        ],
        "summary": "Post an outgoing invoice.",
        "description": "Post the outgoing invoice with the given number (interne Nummer).<br/>Required profile(s): <i>Rechnungen (Bearbeiten)</i>.",
        "operationId": "postOutgoingInvoice",
        "parameters": [
          {
            "name": "number",
            "in": "path",
            "description": "number (interne Nummer) of a Scopevisio outgoing invoice",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The outgoing invoice was successfully posted."
          },
          "400": {
            "description": "The outgoing invoice was already posted."
          },
          "404": {
            "description": "The outgoing invoice was not found or the user has no write permissions for it."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/outgoinginvoice/all/positions": {
      "get": {
        "tags": [
          "OutgoingInvoice"
        ],
        "summary": "retrieve all outgoing invoice positions",
        "description": "Required profiles: <i>Angebote, Aufträge, Lieferscheine, Rechnungen (Anzeigen)</i>.<br/><strong>WARNING: A response contains a maximum of 5000 entries</strong>\nPlease use shorter time periods and/or pagination to retrieve all required entries",
        "operationId": "getAllOutgoingInvoicePositions",
        "parameters": [
          {
            "name": "startDate",
            "in": "query",
            "description": "Start date (applies to the invoice date). Format: dd.MM.yyyy",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "End date (applies to the invoice date). Format: dd.MM.yyyy",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma separated list of fields to include in the response<br/><i>id, name</i>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "the number of the desired page. First page number is zero",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "the number of entries per page. A maximum of 5.000 is allowed",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns all outgoing invoice positions."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/outgoinginvoice/exporttemplates": {
      "get": {
        "tags": [
          "OutgoingInvoice"
        ],
        "summary": "Export templates for offer, opportunity, order, outgoing invoice, credit, packing slip",
        "description": "Returns the Scopevisio expoirt templates for offer, opportunity, order, outgoing invoice, credit, packing slip.<br/>Required profile(s): <i>Faktura Stammdaten, Opportunities (Anzeigen)</i>.",
        "operationId": "getOutgoingInvoiceExportTemplates",
        "responses": {
          "200": {
            "description": "Returns the Scopevisio export templates."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/outgoinginvoice/{number}/file": {
      "get": {
        "tags": [
          "OutgoingInvoice"
        ],
        "summary": "The file for the outgoing invoice",
        "description": "Returns the last file for the given outgoing invoice number.<br/>Required profile(s): <i>Rechnungen (Anzeigen)</i>.",
        "operationId": "getOutgoingInvoiceFile",
        "parameters": [
          {
            "name": "number",
            "in": "path",
            "description": "document number of a Scopevisio outgoing invoice",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "RE-2021-2"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the main file of the Scopevisio outgoing invoice with the given document number."
          },
          "404": {
            "description": "No outgoing invoice for the given number found or authorization missing.<br/>No file for the given document number found."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/outgoinginvoice/{number}/file/new": {
      "post": {
        "tags": [
          "OutgoingInvoice"
        ],
        "summary": "Add a file to a Scopevisio outgoing invoice",
        "description": "Adds a file to a Scopevisio outgoing invoice.<br/>Required profile(s): <i>Rechnungen (Bearbeiten)</i>.",
        "operationId": "addFileToOutgoingInvoice",
        "parameters": [
          {
            "name": "number",
            "in": "path",
            "description": "documentNumber (Belegnummer) of a Scopevisio outgoing invoice",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "2021-00001"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FileForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "File added"
          },
          "400": {
            "description": "Data was not provided"
          },
          "404": {
            "description": "No outgoing invoice for the given number found or authorization missing"
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/outgoinginvoice/{number}/parent": {
      "get": {
        "tags": [
          "OutgoingInvoice"
        ],
        "summary": "the parent of an outgoing invoice with the given document number",
        "description": "Returns the Scopevisio outgoing invoice document which is parent of the outgoing invoice with the given document number.<br/>Required profile(s): <i>Rechnungen (Anzeigen)</i>.",
        "operationId": "getOutgoingInvoiceParent",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma separated list of fields to include in the response<br/><i>id, documentNumber</i>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "number",
            "in": "path",
            "description": "document number of a Scopevisio outgoing invoice",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the Scopevisio outgoing invoice document which is parent of the outgoing invoice with the given document number."
          },
          "404": {
            "description": "The outgoing invoice was not found or authorization missing.<br/>No parent for the outgoing invoice found."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/outgoinginvoice/{number}/positions": {
      "get": {
        "tags": [
          "OutgoingInvoice"
        ],
        "summary": "get outgoing invoice positions for the given number (interne Nummer)",
        "description": "Required profiles: <i>Angebote, Aufträge, Lieferscheine, Rechnungen (Anzeigen)</i>.<br/><strong>WARNING: A response contains a maximum of 5000 entries</strong><br/>Please use shorter time periods and/or pagination to retrieve all required entries",
        "operationId": "getOutgoingInvoicePositions",
        "parameters": [
          {
            "name": "number",
            "in": "path",
            "description": "number (interne Nummer) of a Scopevisio outgoing invoice",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma separated list of fields to include in the response<br/><i>id, name</i>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "the number of the desired page. First page number is zero",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "the number of entries per page. A maximum of 5.000 is allowed",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the positions for the outgoing invoice with the given number (interne Nummer)."
          },
          "404": {
            "description": "No outgoing invoice with with the given number found or authorization missing."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/outgoinginvoice/{number}/teamworkFileLink": {
      "get": {
        "tags": [
          "OutgoingInvoice"
        ],
        "summary": "Link to the last file for the outgoing invoice in the teamwork web application",
        "description": "Returns a link to the last file for the given outgoing invoice number in the teamwork web application. You need to be logged in to the teamwork webapp.<br/>Required profile(s): <i>Rechnungen (Anzeigen)</i>.",
        "operationId": "getOutgoingInvoiceTeamworkFileLink",
        "parameters": [
          {
            "name": "number",
            "in": "path",
            "description": "document number of a Scopevisio outgoing invoice",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "RE-2021-2"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a link to the last file for the given outgoing invoice number in the teamwork web application."
          },
          "404": {
            "description": "No outgoingInvoice for the given number found or authorization missing.<br/>No teamwork file for the given number."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/outgoinginvoices": {
      "post": {
        "tags": [
          "OutgoingInvoice"
        ],
        "summary": "outgoing invoices",
        "description": "Returns the Scopevisio outgoing invoices.<br/>Required profile(s): <i>Rechnungen (Anzeigen)</i>.",
        "operationId": "getOutgoingInvoices",
        "requestBody": {
          "description": "search filter in JSON format. See also <a target='_blank' href='../browser/index.html#!/searchscope'>our search documentation</a>.",
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the Scopevisio outgoing invoices."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/outgoinginvoices/import": {
      "post": {
        "tags": [
          "OutgoingInvoice"
        ],
        "summary": "Imports outgoing invoices",
        "description": "Required profile(s): <i>Angebote, Aufträge, Lieferscheine, Rechnungen (Bearbeiten)</i>.",
        "operationId": "importOutgoingInvoices",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OutgoingInvoiceImportForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Imports outgoing invoices. Errors are set in the response."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/paymentterm/{id}": {
      "get": {
        "tags": [
          "Accounting"
        ],
        "summary": "Gets payment term for id.",
        "description": "Returns the Scopevisio payment term with the given id.<br/>Required profile(s): <i>Stammdaten, Zahlungsbedingungen (Anzeigen)</i>",
        "operationId": "getPaymentTerm",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of a Scopevisio payment term",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the Scopevisio payment term with the given id."
          },
          "404": {
            "description": "No payment term for the given id exists."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      },
      "post": {
        "tags": [
          "Accounting"
        ],
        "summary": "Update payment term.",
        "description": "Update the payment term with the given id. <br/>Required profile(s): <i>Stammdaten, Zahlungsbedingungen (Bearbeiten)</i>.",
        "operationId": "updatePaymentTerm",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of a Scopevisio payment term",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentTermForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Payment term updated."
          },
          "400": {
            "description": "Payment term name missing.<br/>A payment term with the given name already exists.<br/>Payment term nettimelimit missing.<br/>netTimeLimit is less or equal cashDiscountDays1 and/or cashDiscountDays1.<br/>percentage2 is greater than percentage1.<br/>percentage2 or percentage1 are greater than 100."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/paymentterm/new": {
      "post": {
        "tags": [
          "Accounting"
        ],
        "summary": "Create a new payment term.",
        "description": "Creates a new payment term.<br/>Required profile(s): <i>Stammdaten, Zahlungsbedingungen (Bearbeiten)</i>.",
        "operationId": "createPaymentTerm",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentTermForm"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Payment term created."
          },
          "400": {
            "description": "Payment term name missing.<br/>A payment term with the given name already exists.<br/>Payment term nettimelimit missing.<br/>netTimeLimit is less or equal cashDiscountDays1 and/or cashDiscountDays1.<br/>percentage2 is greater than percentage1.<br/>percentage2 or percentage1 are more than 100."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/paymentterms": {
      "get": {
        "tags": [
          "Accounting"
        ],
        "summary": "Get payment terms.",
        "description": "Returns all payment terms for the current Scopevisio organisation.<br/>Required profile(s): <i>Stammdaten, Zahlungsbedingungen (Anzeigen)</i>.",
        "operationId": "getPaymentTerms",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma separated list of fields to include in the response<br/><i>name, netTimeLimit</i>",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the payment terms for the current Scopevisio organisation."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/personaljournal": {
      "post": {
        "tags": [
          "Accounting"
        ],
        "summary": "personal journal entries",
        "description": "Returns the Scopevisio journal entries.<br/>Required profile(s): <i>Journal (Anzeigen)</i>.",
        "operationId": "getPersonalJournalEntries",
        "requestBody": {
          "description": "search filter in JSON format. See also <a target='_blank' href='../browser/index.html#!/searchscope'>our search documentation</a>.",
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the Scopevisio journal entries."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/postings/new": {
      "post": {
        "tags": [
          "Accounting"
        ],
        "summary": "import postings",
        "description": "Required profiles: <i>Datenimport (Bearbeiten)</i>.<br/>The examples and allowable values refer to chart of accounts SKR03. If you use another chart of accounts you should check your settings in the Scopevisio desktop application.<br/>To import a posting two or more postings rows are needed. More information and the relevant data structure is available in the Scopevisio client",
        "operationId": "createPostings",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Postings"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Create a single posting. See response for error messages."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/proreport/{type}/{name}/{year}/{month}": {
      "get": {
        "tags": [
          "Report"
        ],
        "summary": "Retrieve a financial report",
        "description": "Required profile(s): <i>Berichte (Anzeigen)</i>.",
        "operationId": "getProReport",
        "parameters": [
          {
            "name": "type",
            "in": "path",
            "description": "type of account layout.<br/>Valid values are: 1 (Gewinn- und Verlustrechnung), 2 (Bilanz), 3 (Sonstige Auswertungen), 4 (Kostenstelle), 5 (Kostenträger)",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "path",
            "description": "name of account layout",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "year",
            "in": "path",
            "description": "yearly period",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "month",
            "in": "path",
            "description": "monthly period (1-12)",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "layoutName",
            "in": "query",
            "description": "name of column layout",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "budgetGroupName",
            "in": "query",
            "description": "name of budget group / plan",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "organisations",
            "in": "query",
            "description": "comma separated list of names of organisations (default: the current organisation)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "showAccounts",
            "in": "query",
            "description": "show accounts",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "showGuvAccounts",
            "in": "query",
            "description": "show GUV accounts",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "showEmptyRows",
            "in": "query",
            "description": "show empty rows",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "showLineNumbers",
            "in": "query",
            "description": "show line numbers",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "useForeignLanguage",
            "in": "query",
            "description": "use foreign language",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "amountSuffix",
            "in": "query",
            "description": "amount suffix (NoSuffix: no suffix, DebitCredit: append a suffix to a monetary value. Either S (Soll) or H (Haben) (default: DebitCredit))",
            "schema": {
              "type": "string",
              "enum": [
                "NoSuffix",
                "DebitCredit"
              ]
            }
          },
          {
            "name": "amountFormatting",
            "in": "query",
            "description": "formatting to apply to monetary values (default: 2 Decimal digits)",
            "schema": {
              "type": "string",
              "enum": [
                "NoDecimalDigits",
                "TwoDecimalDigits",
                "DivideByThousand"
              ]
            }
          },
          {
            "name": "percentFormatting",
            "in": "query",
            "description": "formatting to apply to percent values (default: 2 Decimal digits)",
            "schema": {
              "type": "string",
              "enum": [
                "NoDecimalDigits",
                "OneDecimalDigit",
                "TwoDecimalDigits"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a financial report according to the specified parameters."
          },
          "400": {
            "description": "A required parameter is missing or is invalid."
          },
          "404": {
            "description": "Financial report with the given type/name or object representing an argument not found."
          },
          "500": {
            "description": "Internal server error."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/product/{id}": {
      "get": {
        "tags": [
          "Product"
        ],
        "summary": "get product by id",
        "description": "Returns the Scopevisio product with the given id.<br/>Required profile(s): <i>Produktverwaltung (Anzeigen)</i>.",
        "operationId": "getProduct",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma separated list of fields to include in the response<br/><i>id, number, name</i>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "the id of the product you want to retrieve",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the Scopevisio product with the given id."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      },
      "post": {
        "tags": [
          "Product"
        ],
        "summary": "update product by id",
        "description": "Updates the Scopevisio product with the given id.<br/>Required profile(s): <i>Produktverwaltung (Bearbeiten)</i>.",
        "operationId": "updateProduct",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of a Scopevisio product",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updates the Scopevisio product with the given id."
          },
          "404": {
            "description": "Product not found or authorization missing."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/productGroup/new": {
      "post": {
        "tags": [
          "Product"
        ],
        "summary": "creates a new productGroup",
        "description": "Creates a new Scopevisio productGroup.<br/>Required profile(s): <i>Produktverwaltung (Bearbeiten)</i>.",
        "operationId": "createProductGroup",
        "requestBody": {
          "description": "content in JSON format, topic is required",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductGroupForm"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created"
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/productGroups": {
      "get": {
        "tags": [
          "Product"
        ],
        "summary": "get all productGroups",
        "description": "Returns all the Scopevisio productGroups.<br/>Required profile(s): <i>Produktverwaltung (Anzeigen)</i>.",
        "operationId": "getProductGroup",
        "responses": {
          "200": {
            "description": "Returns the Scopevisio productGroups."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/product/new": {
      "post": {
        "tags": [
          "Product"
        ],
        "summary": "creates a new product",
        "description": "Creates a new Scopevisio product.<br/>Required profile(s): <i>Produktverwaltung (Bearbeiten)</i>.",
        "operationId": "createProduct",
        "requestBody": {
          "description": "content in JSON format, topic is required",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductForm"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created"
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/products": {
      "post": {
        "tags": [
          "Product"
        ],
        "summary": "products",
        "description": "Returns all Scopevisio products.<br/>Required profile(s): <i>Produktverwaltung (Anzeigen)</i>.",
        "operationId": "getProducts",
        "requestBody": {
          "description": "search filter in JSON format. See also <a target='_blank' href='../browser/index.html#!/searchscope'>our search documentation</a>.",
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns all Scopevisio products."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/project/{id}": {
      "get": {
        "tags": [
          "Project"
        ],
        "summary": "project by id",
        "description": "Returns the Scopevisio project with the given id.<br/>Required profile(s): <i>Projekte (Anzeigen)</i>.",
        "operationId": "getProject",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma separated list of fields to include in the response<br/><i>id, number, name</i>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the Scopevisio project with the given id."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      },
      "post": {
        "tags": [
          "Project"
        ],
        "summary": "update project by id",
        "description": "Updates the Scopevisio project with the given id.<br/>Required profile(s): <i>Projekte (Bearbeiten)</i>.",
        "operationId": "updateProject",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of a Scopevisio Project",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updates the Scopevisio project with the given id."
          },
          "400": {
            "description": "Project name missing.<br/>Contact id missing.<br/>Personal contactId for project employee needed."
          },
          "404": {
            "description": "Project not found or authorization missing."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/project/{projectId}/comment/new": {
      "post": {
        "tags": [
          "Project"
        ],
        "summary": "Create a new comment.",
        "description": "Creates a new comment.<br/>Required profile(s): <i>Projekte, Pinnwand (Bearbeiten)</i>.",
        "operationId": "createProjectComment",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "projectId of a Scopevisio project",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 10942
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BlogEntryForm"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Comment created."
          },
          "400": {
            "description": "Missing projectId."
          },
          "404": {
            "description": "No project with the given projectId found or authorization missing."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/project/{projectId}/comments": {
      "post": {
        "tags": [
          "Project"
        ],
        "summary": "Comments by projectId.",
        "description": "Returns the comments for the Scopevisio project with the given projectId.<br/>Required profile(s): <i>Projekte, Pinnwand (Anzeigen)</i>",
        "operationId": "getProjectCommentsSearch",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "id (Master ID) of a Scopevisio project",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "search filter in JSON format. See also <a target='_blank' href='../browser/index.html#!/searchscope'>our search documentation</a>.",
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the comments for the Scopevisio project with the given projectId."
          },
          "400": {
            "description": "projectId not provided."
          },
          "404": {
            "description": "No project with the given projectId found."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/project/{projectId}/projectemployee/new": {
      "post": {
        "tags": [
          "Project"
        ],
        "summary": "Create a project employee (Projektteam-Eintrag)",
        "description": "Creates a new project employee (Projektteam-Eintrag) for a Scopevisio project.<br/>Required profile(s): <i>Kontakte, Projekte (Bearbeiten)</i>.",
        "operationId": "createProjectEmployee",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "content in JSON format",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectEmployeeForm"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created"
          },
          "404": {
            "description": "No project with the given id or authorization missing.<br/>No project employee with the given employeeId found.<br/>No personal contact with the given contactId found or authorization missing."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/project/{projectId}/projectemployee/{employeeId}": {
      "get": {
        "tags": [
          "Project"
        ],
        "summary": "Get project employee (Projektteam-Eintrag) by id",
        "description": "Returns project employee with the given employee id (not contact id).<br/>Required profile(s): <i>Kontakte, Projekte (Anzeigen)</i>.",
        "operationId": "getProjectEmployee",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "Comma separated list of fields to include in the response<br/><i>id, type, subtype</i>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "employeeId",
            "in": "path",
            "description": "Id of a Scopevisio project employee",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      },
      "post": {
        "tags": [
          "Project"
        ],
        "summary": "update project employee (Projektteam-Eintrag) by employeeId (not contactId).",
        "description": "Updates the employee of a Scopevisio project with the given employeeId.<br/>Required profile(s): <i>Kontakte, Projekte (Bearbeiten)</i>.",
        "operationId": "updateProjectEmployee",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "content in JSON format",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectEmployeeForm"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Updates the employee of a Scopevisio project with the given employeeId."
          },
          "404": {
            "description": "No project with the given id or authorization missing.<br/>No project employee with the given employeeId found.<br/>No personal contact with the given contactId found or authorization missing."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/project/{projectId}/projectemployees": {
      "post": {
        "tags": [
          "Project"
        ],
        "summary": "project employees (Projektteam) of a given project",
        "description": "Returns the project employees (Projektteam) of a Scopevisio project with the given projectId.<br/>Required profile(s): <i>Kontakte, Projekte (Anzeigen)</i>.",
        "operationId": "getProjectEmployees",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "id of a Scopevisio project",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "search filter in JSON format. See also <a target='_blank' href='../browser/index.html#!/searchscope'>our search documentation</a>.",
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the project employees (Projektteam) of a Scopevisio project."
          },
          "403": {
            "description": "Permission missing."
          },
          "404": {
            "description": "No project with the given projectId found."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/project/{projectId}/file/new": {
      "post": {
        "tags": [
          "Project"
        ],
        "summary": "Add a file to a Scopevisio project",
        "description": "Adds a file to a Scopevisio project.<br/>Required profile(s): <i>Projekte (Bearbeiten)</i>.",
        "operationId": "addProjectFile",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "projectId (MID) of a Scopevisio project.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 10942
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TeamworkFileForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "File added."
          },
          "400": {
            "description": "Data was not provided.<br/>The user does't have teamwork access."
          },
          "404": {
            "description": "No project for the given projectId found or authorization missing."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/project/{projectId}/assignMail": {
      "post": {
        "tags": [
          "Project"
        ],
        "summary": "Assign mail to a project.",
        "description": "Assigns the mail with the given mailId to the project with the given projectId.<br/>Required profile(s): <i>Projekte, Mailbot, Mailagent (Bearbeiten)</i>.",
        "operationId": "assignMailProject",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "content in JSON format",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssignMailForm"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Mail assigned."
          },
          "400": {
            "description": "MailId not provided."
          },
          "404": {
            "description": "No mail with the given mailId found.<br/>No project with the given contactIdOrLegacyNumber found."
          },
          "500": {
            "description": "Mail not assigned."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/project/new": {
      "post": {
        "tags": [
          "Project"
        ],
        "summary": "create a new project",
        "description": "Creates a new Project<br/>Required profile(s): <i>Projekte (Bearbeiten)</i>.",
        "operationId": "createProject",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectForm"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Project created"
          },
          "400": {
            "description": "Project name missing.<br/>Contact id missing.<br/>Personal contactId for project employee needed."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/projectresources": {
      "post": {
        "tags": [
          "Project"
        ],
        "summary": "Get project resources.",
        "description": "Returns the project resources.<br/>Required profile(s): <i>Projekte (Anzeigen)</i>.<br/>It is recommended to submit a payload using the <i>application/json</i> media type",
        "operationId": "getProjectResources",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectResources"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/ProjectResources"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Shows all available project resources."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/projectrevenue": {
      "post": {
        "tags": [
          "Project"
        ],
        "summary": "Get project revenue",
        "description": "Get project revenue.<br/>Required profile(s): <i>Projekte (Anzeigen)</i>.<br/>It is recommended to submit a payload using the <i>application/json</i> media type",
        "operationId": "getProjectRevenue",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectRevenue"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/ProjectRevenue"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Shows all available project revenue."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/projects": {
      "post": {
        "tags": [
          "Project"
        ],
        "summary": "projects",
        "description": "Returns Scopevisio projects.<br/>Required profile(s): <i>Projekte (Anzeigen)</i>.",
        "operationId": "getProjects",
        "requestBody": {
          "description": "search filter in JSON format. See also <a target='_blank' href='../browser/index.html#!/searchscope'>our search documentation</a>.",
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns Scopevisio projects."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/recurringinvoice/{number}/convertToDispatch": {
      "post": {
        "tags": [
          "RecurringInvoice"
        ],
        "summary": "Convert recurring invoice to dispatch",
        "description": "Convert the Scopevisio recurring invoice with the given number (interne Nummer) to an dispatch.<br/>Required profile(s): <i>Rechnungen (Bearbeiten)</i>.",
        "operationId": "convertRecurringInvoiceToDispatch",
        "parameters": [
          {
            "name": "number",
            "in": "path",
            "description": "number (interne Nummer) of a Scopevisio recurring invoice",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The recurring invoice was successfully converted to dispatch."
          },
          "404": {
            "description": "The recurring invoice was not found or the user has no write permissions for it."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/recurringinvoice/{number}/convertToOffer": {
      "post": {
        "tags": [
          "RecurringInvoice"
        ],
        "summary": "Convert recurring invoice to offer",
        "description": "Convert the Scopevisio recurring invoice with the given number (interne Nummer) to an offer.<br/>Required profile(s): <i>Rechnungen (Bearbeiten)</i>.",
        "operationId": "convertRecurringInvoiceToOffer",
        "parameters": [
          {
            "name": "number",
            "in": "path",
            "description": "number (interne Nummer) of a Scopevisio recurring invoice",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The recurring invoice was successfully converted to offer."
          },
          "404": {
            "description": "The recurring invoice was not found or the user has no write permissions for it."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/recurringinvoice/{number}/convertToOpportunity": {
      "post": {
        "tags": [
          "RecurringInvoice"
        ],
        "summary": "Convert recurring invoice to opportunity",
        "description": "Convert the Scopevisio recurring invoice with the given number (interne Nummer) to an opportunity.<br/>Required profile(s): <i>Rechnungen (Bearbeiten)</i>.",
        "operationId": "convertRecurringInvoiceToOpportunity",
        "parameters": [
          {
            "name": "number",
            "in": "path",
            "description": "number (interne Nummer) of a Scopevisio recurring invoice",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The recurring invoice was successfully converted to opportunity."
          },
          "404": {
            "description": "The recurring invoice was not found or the user has no write permissions for it."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/recurringinvoice/{number}/convertToOrder": {
      "post": {
        "tags": [
          "RecurringInvoice"
        ],
        "summary": "Convert recurring invoice to order",
        "description": "Convert the Scopevisio recurring invoice with the given number (interne Nummer) to an order.<br/>Required profile(s): <i>Rechnungen (Bearbeiten)</i>.",
        "operationId": "convertRecurringInvoiceToOrder",
        "parameters": [
          {
            "name": "number",
            "in": "path",
            "description": "number (interne Nummer) of a Scopevisio recurring invoice",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The recurring invoice was successfully converted to order."
          },
          "404": {
            "description": "The recurring invoice was not found or the user has no write permissions for it."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/recurringinvoice/{number}/convertToOutgoingInvoice": {
      "post": {
        "tags": [
          "RecurringInvoice"
        ],
        "summary": "Convert recurring invoice to recurring invoice",
        "description": "Convert the Scopevisio recurring invoice with the given number (interne Nummer) to a recurring invoice.<br/>Required profile(s): <i>Rechnungen (Bearbeiten)</i>.",
        "operationId": "convertRecurringInvoiceToOutgoingInvoice",
        "parameters": [
          {
            "name": "number",
            "in": "path",
            "description": "number (interne Nummer) of a Scopevisio recurring invoice",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The recurring invoice was successfully converted to recurring invoice."
          },
          "404": {
            "description": "The recurring invoice was not found or the user has no write permissions for it."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/recurringinvoice/{number}": {
      "get": {
        "tags": [
          "RecurringInvoice"
        ],
        "summary": "recurring invoice for number (interne Nummer)",
        "description": "Returns the Scopevisio recurring invoice with the given number (interne Nummer).<br/>Required profile(s): <i>Rechnungen (Anzeigen)</i>.",
        "operationId": "getRecurringInvoice",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma separated list of fields to include in the response<br/><i>id, documentNumber</i>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "number",
            "in": "path",
            "description": "number (interne Nummer) of a Scopevisio outgoing invoice",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the Scopevisio recurring invoice with the given number (interne Nummer)."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      },
      "post": {
        "tags": [
          "RecurringInvoice"
        ],
        "summary": "Update the recurrence data of an invoice.",
        "description": "Update the recurrence data of the invoice with the given number(interne Nummer).<br/>Required profile(s): <i>Rechnungen (Bearbeiten)</i>.",
        "operationId": "updateRecurringInvoice",
        "parameters": [
          {
            "name": "number",
            "in": "path",
            "description": "number (interne Nummer) of a Scopevisio recurring invoice",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RecurringInvoiceForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The recurring data was successfully updated."
          },
          "404": {
            "description": "The recurring invoice was not found or the user has no write permissions for it."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/recurringinvoice/all/positions": {
      "get": {
        "tags": [
          "RecurringInvoice"
        ],
        "summary": "get all recurring invoice positions",
        "description": "Required profiles: <i>Angebote, Aufträge, Lieferscheine, Rechnungen (Anzeigen)</i>.<br/><strong>WARNING: A response contains a maximum of 5000 entries</strong><br/>Please use shorter time periods and/or pagination to retrieve all required entries",
        "operationId": "getAllRecurringInvoicePositions",
        "parameters": [
          {
            "name": "startDate",
            "in": "query",
            "description": "Start date (applies to the invoice date). Format: dd.MM.yyyy",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "End date (applies to the invoice date). Format: dd.MM.yyyy",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma separated list of fields to include in the response<br/><i>id, name</i>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "the number of the desired page. First page number is zero",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "the number of entries per page. A maximum of 5.000 is allowed",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the positions for the recurring invoice with the given number (interne Nummer). "
          },
          "404": {
            "description": "No recurring invoice with with the given number found or authorization missing."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/recurringinvoice/{number}/positions": {
      "get": {
        "tags": [
          "RecurringInvoice"
        ],
        "summary": "get recurring invoice positions for the given number (interne Nummer)",
        "description": "Required profiles: <i>Angebote, Aufträge, Lieferscheine, Rechnungen (Anzeigen)</i>.<br/><strong>WARNING: A response contains a maximum of 5000 entries</strong><br/>Please use shorter time periods and/or pagination to retrieve all required entries",
        "operationId": "getRecurringInvoicePositions",
        "parameters": [
          {
            "name": "number",
            "in": "path",
            "description": "number (interne Nummer) of a Scopevisio recurring invoice",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma separated list of fields to include in the response<br/><i>id, name</i>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "the number of the desired page. First page number is zero",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "the number of entries per page. A maximum of 5.000 is allowed",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the positions for the recurring invoice with the given number (interne Nummer)."
          },
          "404": {
            "description": "No recurring invoice with with the given number found or authorization missing."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/recurringinvoices": {
      "post": {
        "tags": [
          "RecurringInvoice"
        ],
        "summary": "recurring invoices",
        "description": "Returns the Scopevisio recurring invoices.<br/>Required profiles: <i>Rechnungen (Anzeigen)</i>.",
        "operationId": "getRecurringInvoices",
        "requestBody": {
          "description": "search filter in JSON format. See also <a target='_blank' href='../browser/index.html#!/searchscope'>our search documentation</a>.",
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the Scopevisio outgoing invoices."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/reports/{type}": {
      "get": {
        "tags": [
          "Report"
        ],
        "summary": "Exports accounting reports",
        "description": "Required profiles: <i>Berichte, Debitoren, Kreditoren (Anzeigen)</i>.",
        "operationId": "getReport",
        "parameters": [
          {
            "name": "type",
            "in": "path",
            "description": "The report type to export:<ul><li>susa_account = SuSa Sachkonten</li><li>susa_debitor = SuSa Debitorkonten</li><li>susa_creditor = SuSa Kreditorkonten</li><li>bilanz = Bilanz</li><li>guv = Gewinn- und Verlustrechnung</li><li>bwa = Betriebswirtschaftliche Auswertung</li></ul>",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "susa_account",
                "susa_debitor",
                "susa_creditor",
                "bilanz",
                "guv",
                "bwa"
              ]
            }
          },
          {
            "name": "reportName",
            "in": "query",
            "description": "Report name, applies only for type bilanz, guv, bwa",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "outputFormat",
            "in": "query",
            "description": "Output format",
            "schema": {
              "type": "string",
              "enum": [
                "pdf",
                "csv",
                "xml",
                "json"
              ],
              "default": "csv"
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "description": "Start date. Format: <code>dd.MM.yyyy</code>",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "End date. Format: <code>dd.MM.yyyy</code>",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "includeHeader",
            "in": "query",
            "description": "Trigger: Include header in csv export",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "includeZeroValued",
            "in": "query",
            "description": "Trigger: Include zero values in export",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "splitDimensions",
            "in": "query",
            "description": "Trigger: Comma separated dimension indices to use for subsplitting the account balances",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Exports accounting reports"
          },
          "404": {
            "description": "The report with the given reportName was not found."
          },
          "500": {
            "description": "Something went wrong"
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/salesproject/{id}": {
      "post": {
        "tags": [
          "Project"
        ],
        "summary": "update sales project (Vertriebsprojekt) by id",
        "description": "Updates the Scopevisio sales project (Vertriebsprojekt) with the given id. It is not possible to convert a  Lead (project \"sphereLead\" set) to Interessent (\"sphereInterested\" set) via the REST-API. The conversion must be done via the Scopevisio client. Setting the interested fields like intrestedBudget, intrestedAuthority, etc. is only possible if the projectis already Interessent (\"sphereInterested\" set). Otherwise they are overridden by the conversion process. To retrieve a sales project use the endpoint project/{id}.<br/>Required profile(s): <i>Projekte (Bearbeiten)</i>.",
        "operationId": "updateSalesProject",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of a Scopevisio Project",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SalesProjectForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updates the Scopevisio sales project (Vertriebsprojekt) with the given id."
          },
          "400": {
            "description": "Project name missing.<br/>Contact id missing.<br/>Personal contactId for project employee needed."
          },
          "404": {
            "description": "Project not found or authorization missing."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/salesproject/new": {
      "post": {
        "tags": [
          "Project"
        ],
        "summary": "Create a new sales project (Vertriebsprojekt)",
        "description": "Creates a new sales project (Vertriebsprojekt). The created project has \"sphereLead\" set. It is not possible to convert a  Lead (project with \"sphereLead\" set) to Interessent (\"sphereInterested\" set) via the REST-API. The conversion must be done via the Scopevisio client. To retrieve a sales project use the endpoint project/{id}.<br/>Required profile(s): <i>Projekte (Bearbeiten)</i>.",
        "operationId": "createSalesProject",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SalesProjectForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Creates a new sales project."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/statisticsaccount/{number}": {
      "get": {
        "tags": [
          "Accounting"
        ],
        "summary": "statistics account by number",
        "description": "Returns the Scopevisio statistics account with the given number.<br/>Required profile(s): <i>Statistikbuchungen (Anzeigen)</i>.",
        "operationId": "getStatisticsAccount_1",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma separated list of fields to include in the response<br/><i>id, number, name</i>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "number",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the Scopevisio statistics account with the given number."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/statisticsaccounts": {
      "post": {
        "tags": [
          "Accounting"
        ],
        "summary": "statistics accounts",
        "description": "Returns statistics accounts.<br/>Required profile(s): <i>Statistikbuchungen (Anzeigen)</i>.",
        "operationId": "search",
        "requestBody": {
          "description": "search filter in JSON format. See also <a target='_blank' href='../browser/index.html#!/searchscope'>our search documentation</a>.",
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns statistics accounts."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/statisticspostings": {
      "post": {
        "tags": [
          "Accounting"
        ],
        "summary": "Statistics postings",
        "description": "Returns statistics postings.<br/>Required profile(s): <i>Statistikbuchungen (Anzeigen)</i>.",
        "operationId": "search_1",
        "requestBody": {
          "description": "search filter in JSON format. See also <a target='_blank' href='../browser/index.html#!/searchscope'>our search documentation</a>.",
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns statistics postings."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/statisticspostings/new": {
      "post": {
        "tags": [
          "Accounting"
        ],
        "summary": "creates new statistics posting entries",
        "description": "Creates new Scopevisio statistics posting entries.<br/>Required profile(s): <i>Statistikbuchungen (Bearbeiten)</i>.",
        "operationId": "createStatisticsPostings",
        "requestBody": {
          "description": "content in JSON format",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StatisticsPostings"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "All postings created"
          },
          "201": {
            "description": "Posting created"
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/statisticspostings/{rowNumber}": {
      "get": {
        "tags": [
          "Accounting"
        ],
        "summary": "Statistics posting for row number",
        "description": "Returns the Scopevisio statistics posting with the given row number.<br/>Required profile(s): <i>Statistikbuchungen (Anzeigen)</i>.",
        "operationId": "getStatisticsPosting",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma separated list of fields to include in the response<br/><i>rowNumber, postingDate, accountNumber, amount, postingText</i>",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "rowNumber",
            "in": "path",
            "description": "rowNumber of a Scopevisio statistics posting",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the Scopevisio statistics posting with the given row number."
          },
          "404": {
            "description": "No statistics posting for the given row number found."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/subtask/new": {
      "post": {
        "tags": [
          "Task"
        ],
        "summary": "Create a new subtask (Tätigkeit)",
        "description": "Creates a new subtask (Tätigkeit) for a Scopevisio Task<br/>Required profile(s): <i>Aufgabe, Kontakte (Bearbeiten)</i>.",
        "operationId": "createSubtask",
        "requestBody": {
          "description": "content in JSON format, taskId is required",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubtaskForm"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created"
          },
          "404": {
            "description": "No task with the given taskId found or authorization missing."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/task/{taskId}/subtasks": {
      "get": {
        "tags": [
          "Task"
        ],
        "summary": "Subtasks (Tätigkeiten) for task id",
        "description": "Returns all subtasks (Tätigkeiten) for a Scopevisio task with the given id.<br/>Required profile(s): <i>Aufgabe (Anzeigen)</i>.",
        "operationId": "getSubtasks",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns all subtasks for a Scopevisio task with the given id."
          },
          "404": {
            "description": "A task with the given id was not found or authorization missing."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/task/{id}": {
      "get": {
        "tags": [
          "Task"
        ],
        "summary": "task for id",
        "description": "Returns the Scopevisio task with the given id.<br/>Required profile(s): <i>Aufgabe (Anzeigen)</i>",
        "operationId": "getTask",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of a Scopevisio task",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma separated list of fields to include in the response<br/><i>id, topic</i>",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the Scopevisio task with the given id."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      },
      "post": {
        "tags": [
          "Task"
        ],
        "summary": "Update task",
        "description": "Updates the Scopevisio task with the given task id.<br/>Required profile(s): <i>Aufgabe (Bearbeiten)</i>.",
        "operationId": "updateTask",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of a Scopevisio task",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "Content in JSON format. Please refer to TaskForm for example values and to our  <a href='../browser/index.html#!/documentation'>general documentation</a> for update information.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaskForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updates the Scopevisio task with the given task id."
          },
          "404": {
            "description": "Task not found or authorization missing"
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/task/{taskId}/comment/new": {
      "post": {
        "tags": [
          "Task"
        ],
        "summary": "Create a new comment.",
        "description": "Creates a new comment.<br/>Required profile(s): <i>Aufgaben, Pinnwand (Bearbeiten)</i>.",
        "operationId": "createTaskComment",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "description": "taskId of a Scopevisio task",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 10942
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BlogEntryForm"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Comment created."
          },
          "400": {
            "description": "Missing taskId."
          },
          "404": {
            "description": "No task with the given taskId found or authorization missing."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/task/{taskId}/comments": {
      "post": {
        "tags": [
          "Task"
        ],
        "summary": "Comments by taskId.",
        "description": "Returns the comments for the Scopevisio task with the given taskId. This endpoint allows you to filter and search.<br/>Required profile(s): <i>Aufgaben, Pinnwand (Anzeigen)</i>",
        "operationId": "getTaskCommentsSearch",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "description": "id (Master ID) of a Scopevisio task",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "search filter in JSON format. See also <a target='_blank' href='../browser/index.html#!/searchscope'>our search documentation</a>.",
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the comments for the Scopevisio task with the given taskId."
          },
          "400": {
            "description": "TaskId not provided."
          },
          "404": {
            "description": "No task with the given taskId found."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/task/{taskId}/file/new": {
      "post": {
        "tags": [
          "Task"
        ],
        "summary": "Add a file to a Scopevisio task",
        "description": "Adds a file to a Scopevisio task.<br/>Required profile(s): <i>Aufgaben (Bearbeiten)</i>.",
        "operationId": "addTaskFile",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "description": "taskId (Master ID) of a Scopevisio taskId.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 1094
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TeamworkFileForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "File added."
          },
          "400": {
            "description": "Data was not provided.<br/>The user does not have teamwork access."
          },
          "404": {
            "description": "No task for the given taskId found or authorization missing."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/task/{taskId}/assignMail": {
      "post": {
        "tags": [
          "Task"
        ],
        "summary": "Assign mail to a task.",
        "description": "Assigns the mail with the given mailId to the task with the given taskId.<br/>Required profile(s): <i>Aufgaben,Mailbot,Mailagent (Bearbeiten)</i>.",
        "operationId": "assignMailTask",
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "content in JSON format",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssignMailForm"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Mail assigned."
          },
          "400": {
            "description": "MailId not provided."
          },
          "404": {
            "description": "No mail with the given mailId found.<br/>No task with the given taskId found."
          },
          "500": {
            "description": "Mail not assigned."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/task/new": {
      "post": {
        "tags": [
          "Task"
        ],
        "summary": "create a new task",
        "description": "Creates a new Scopevisio Task<br/>Required profile(s): <i>Aufgabe, Kontakte (Bearbeiten)</i>.",
        "operationId": "createTask",
        "requestBody": {
          "description": "content in JSON format, topic is required",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaskForm"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created"
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/tasks": {
      "post": {
        "tags": [
          "Task"
        ],
        "summary": "tasks",
        "description": "Returns Scopevisio tasks.<br/>Required profile(s): <i>Aufgabe (Anzeigen)</i>.",
        "operationId": "getTasks",
        "requestBody": {
          "description": "search filter in JSON format. See also <a target='_blank' href='../browser/index.html#!/searchscope'>our search documentation</a>.",
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns Scopevisio tasks."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/teamworkbridge/{arg1}": {
      "get": {
        "tags": [
          "Teamwork"
        ],
        "description": "See our <a href='../browser/index.html#!/documentation#teamwork'>documentation</a> for usage.",
        "operationId": "getHandler1",
        "parameters": [
          {
            "name": "arg1",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      },
      "put": {
        "tags": [
          "Teamwork"
        ],
        "description": "See our <a href='../browser/index.html#!/documentation#teamwork'>documentation</a> for usage.",
        "operationId": "putHandler1",
        "parameters": [
          {
            "name": "arg1",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      },
      "post": {
        "tags": [
          "Teamwork"
        ],
        "description": "See our <a href='../browser/index.html#!/documentation#teamwork'>documentation</a> for usage.",
        "operationId": "postHandler1",
        "parameters": [
          {
            "name": "arg1",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Teamwork"
        ],
        "description": "See our <a href='../browser/index.html#!/documentation#teamwork'>documentation</a> for usage.",
        "operationId": "deleteHandler1",
        "parameters": [
          {
            "name": "arg1",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/teamworkbridge/{arg1}/{arg2}": {
      "get": {
        "tags": [
          "Teamwork"
        ],
        "description": "See our <a href='../browser/index.html#!/documentation#teamwork'>documentation</a> for usage.",
        "operationId": "getHandler2",
        "parameters": [
          {
            "name": "arg1",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "arg2",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      },
      "put": {
        "tags": [
          "Teamwork"
        ],
        "description": "See our <a href='../browser/index.html#!/documentation#teamwork'>documentation</a> for usage.",
        "operationId": "putHandler2",
        "parameters": [
          {
            "name": "arg1",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "arg2",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      },
      "post": {
        "tags": [
          "Teamwork"
        ],
        "description": "See our <a href='../browser/index.html#!/documentation#teamwork'>documentation</a> for usage.",
        "operationId": "postHandler2",
        "parameters": [
          {
            "name": "arg1",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "arg2",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Teamwork"
        ],
        "description": "See our <a href='../browser/index.html#!/documentation#teamwork'>documentation</a> for usage.",
        "operationId": "deleteHandler2",
        "parameters": [
          {
            "name": "arg1",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "arg2",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/teamworkbridge/{arg1}/{arg2}/{arg3}": {
      "get": {
        "tags": [
          "Teamwork"
        ],
        "description": "See our <a href='../browser/index.html#!/documentation#teamwork'>documentation</a> for usage.",
        "operationId": "getHandler3",
        "parameters": [
          {
            "name": "arg1",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "arg2",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "arg3",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      },
      "put": {
        "tags": [
          "Teamwork"
        ],
        "description": "See our <a href='../browser/index.html#!/documentation#teamwork'>documentation</a> for usage.",
        "operationId": "putHandler3",
        "parameters": [
          {
            "name": "arg1",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "arg2",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "arg3",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      },
      "post": {
        "tags": [
          "Teamwork"
        ],
        "description": "See our <a href='../browser/index.html#!/documentation#teamwork'>documentation</a> for usage.",
        "operationId": "postHandler3",
        "parameters": [
          {
            "name": "arg1",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "arg2",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "arg3",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Teamwork"
        ],
        "description": "See our <a href='../browser/index.html#!/documentation#teamwork'>documentation</a> for usage.",
        "operationId": "deleteHandler3",
        "parameters": [
          {
            "name": "arg1",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "arg2",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "arg3",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/teamworkbridge/{arg1}/{arg2}/{arg3}/{arg4}": {
      "put": {
        "tags": [
          "Teamwork"
        ],
        "description": "See our <a href='../browser/index.html#!/documentation#teamwork'>documentation</a> for usage.",
        "operationId": "putHandler4",
        "parameters": [
          {
            "name": "arg1",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "arg2",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "arg3",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "arg4",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Teamwork"
        ],
        "description": "See our <a href='../browser/index.html#!/documentation#teamwork'>documentation</a> for usage.",
        "operationId": "deleteHandler4",
        "parameters": [
          {
            "name": "arg1",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "arg2",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "arg3",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "arg4",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/teamworktoken": {
      "get": {
        "tags": [
          "Additional"
        ],
        "summary": "Teamwork token",
        "description": "Returns a teamwork token.<br/>No profiles required.",
        "operationId": "getTeamworkToken",
        "parameters": [
          {
            "name": "force",
            "in": "query",
            "description": "Force retrieving new teamwork token instead of returning existing one.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a teamwork token."
          },
          "400": {
            "description": "Teamwork is not set up or not able to retrieve refresh token."
          },
          "500": {
            "description": "Failed to get refreshToken.<br/>Failed to get accessToken."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Additional"
        ],
        "summary": "Invalidates the stored teamwork token",
        "operationId": "deleteTeamworkToken",
        "responses": {
          "204": {
            "description": "Teamwork token invalidated."
          },
          "403": {
            "description": "Access denied."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/texttemplates": {
      "get": {
        "tags": [
          "Accounting"
        ],
        "summary": "Get text templates (Textbausteine)",
        "description": "Returns the Scopevisio text templates (Textbausteine).<br/>Required profile(s): <i>Angebote, Aufträge, Lieferscheine, Rechnungen, Rechnungseingangsbuch (Anzeigen)</i>.",
        "operationId": "getTextTemplates",
        "responses": {
          "200": {
            "description": "Returns the Scopevisio text templates."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/timeentries": {
      "post": {
        "tags": [
          "Project"
        ],
        "summary": "Get all time entries available",
        "description": "Shows all available time entries.<br/>Required profile(s): <i>Zeiterfassung (Anzeigen)</i>.",
        "operationId": "getAllTimEntries",
        "requestBody": {
          "description": "search filter in JSON format. See also <a href='../browser/index.html#!/searchscope'>our search documentation</a>.",
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Shows all available time entries."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/timeentry/{id}": {
      "get": {
        "tags": [
          "Project"
        ],
        "summary": "timeEntry for id",
        "description": "Returns the Scopevisio timeEntry with the given id.<br/>Required profile(s): <i>Projekte (Anzeigen)</i>",
        "operationId": "getTimeEntry",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of a Scopevisio timeEntry",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma separated list of fields to include in the response<br/><i>id, topic</i>",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the Scopevisio timeEntry with the given id."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      },
      "post": {
        "tags": [
          "Project"
        ],
        "summary": "Update time entry",
        "description": "Updates the Scopevisio time entry with the given time entry id. Update may be refused if a time entry run exists for this time entry. In this case the time entry is updated only if the setting in the time entry run settings (see Scopevisio client application) is \"Änderungen zulassen\".<br/>Required profile(s): <i>Projekte (Bearbeiten)</i>.",
        "operationId": "updateTimeEntry",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of a Scopevisio timeEntry",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "Content in JSON format. Please refer to Time entry form for example values and to our  <a href='../browser/index.html#!/documentation'>general documentation</a> for update information.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TimeEntryForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updates the Scopevisio time entry with the given time entry id."
          },
          "400": {
            "description": "There is a time entry run for the time entry with the given id"
          },
          "404": {
            "description": "Time entry not found or authorization missing"
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Project"
        ],
        "summary": "Delete a time entry by id",
        "description": "Deletes a Scopevisio time entry.<br/>Required profile(s): <i>Projekte (Bearbeiten)</i>.<br/><strong>If the time entry is referenced, then it <em>cannot</em> be deleted</strong>",
        "operationId": "deleteContactById_1",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id or legacynumber of a Scopevisio time entry",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": 10942
          }
        ],
        "responses": {
          "204": {
            "description": "Successful delete."
          },
          "403": {
            "description": "Access denied."
          },
          "404": {
            "description": "No time entry for the given id found or authorization missing."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/timeentry/legacynumber/{legacynumber}": {
      "delete": {
        "tags": [
          "Project"
        ],
        "summary": "Delete a time entry by legacynumber",
        "description": "Deletes a Scopevisio time entry.<br/>Required profile(s): <i>Projekte (Bearbeiten)</i>.<br/><strong>If the time entry is referenced, then it <em>cannot</em> be deleted</strong>",
        "operationId": "deleteContactByLegacyNumber",
        "parameters": [
          {
            "name": "legacynumber",
            "in": "path",
            "description": "legacynumber of a Scopevisio time entry",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "id.123"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful delete."
          },
          "403": {
            "description": "Access denied."
          },
          "404": {
            "description": "No time entry for the given legacynumber found or authorization missing."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/timeentry/new": {
      "post": {
        "tags": [
          "Project"
        ],
        "summary": "Create a new time entry",
        "description": "Creates a new time entry including references to existing scopevisio-objects.<br/>Required profile(s): <i>Projekte, Zeiterfassung (Bearbeiten)</i>.",
        "operationId": "createTimeEntry",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TimeEntryForm"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Time entry created"
          },
          "400": {
            "description": "Employee id or Employee mail is missing."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/timeentryrunentries": {
      "post": {
        "tags": [
          "Project"
        ],
        "summary": "Get all time entry run entries available",
        "description": "Shows all available time entry run entries.<br/>Required profile(s): <i>Zeitabrechnungen (Anzeigen)</i>.",
        "operationId": "getTimeEntryRunEntries",
        "requestBody": {
          "description": "search filter in JSON format. See also <a target='_blank' href='../browser/index.html#!/searchscope'>our search documentation</a>.",
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Shows all available time entry run entries."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/timeentryruns": {
      "post": {
        "tags": [
          "Project"
        ],
        "summary": "Get all time entry runs available",
        "description": "Shows all available time entry runs.<br/>Required profile(s): <i>Zeitabrechnungen (Anzeigen)</i>.",
        "operationId": "getTimeEntryRuns",
        "requestBody": {
          "description": "search filter in JSON format. See also <a target='_blank' href='../browser/index.html#!/searchscope'>our search documentation</a>.",
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Shows all available time entry runs."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/token/organisation/{organisationId}": {
      "put": {
        "tags": [
          "Authorization"
        ],
        "summary": "Changes the organisation by ID",
        "operationId": "changeOrganisationById",
        "parameters": [
          {
            "name": "organisationId",
            "in": "path",
            "description": "ID of the organisation to change to",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Invalid organisation ID"
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/token/organisation": {
      "put": {
        "tags": [
          "Authorization"
        ],
        "summary": "Changes the organisation by name",
        "operationId": "changeOrganisationByName",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "Name of the organisation to change to",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Invalid organisation name"
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/token": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "summary": "Access token",
        "description": "Retrieves a Scopevisio access token.<br/>No profiles required.",
        "operationId": "token",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "required": [
                  "customer",
                  "grant_type"
                ],
                "type": "object",
                "properties": {
                  "client_id": {
                    "type": "string",
                    "description": "Client ID, if not set, will revert to \"sv\""
                  },
                  "client_secret": {
                    "type": "string",
                    "description": "Client secret"
                  },
                  "grant_type": {
                    "type": "string",
                    "description": "Grant type",
                    "enum": [
                      "password",
                      "refresh_token",
                      "authorization_code"
                    ]
                  },
                  "customer": {
                    "type": "string",
                    "description": "Scopevisio 7-digit customer number"
                  },
                  "username": {
                    "type": "string",
                    "description": "Scopevisio user login, required if grant_type=password"
                  },
                  "organisation_id": {
                    "type": "integer",
                    "description": "Scopevisio organisation id",
                    "format": "int64"
                  },
                  "organisation": {
                    "type": "string",
                    "description": "Scopevisio organisation name"
                  },
                  "password": {
                    "type": "string",
                    "description": "Scopevisio user password, required if grant_type=password"
                  },
                  "totpResponse": {
                    "type": "string",
                    "description": "Scopevisio user one time password, required only if activated"
                  },
                  "refresh_token": {
                    "type": "string",
                    "description": "Refresh token, required if grant_type=refresh_token"
                  },
                  "code": {
                    "type": "string",
                    "description": "Authorization code, required if grant_type=authorization_code"
                  },
                  "requestcookie": {
                    "type": "boolean",
                    "description": "Whether to set access token in cookie"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Retrieves a Scopevisio access token."
          },
          "400": {
            "description": "Unknown client id.<br/>Missing grant type.<br/>Unsupported grant type."
          },
          "403": {
            "description": "Bad client credentials."
          }
        }
      },
      "delete": {
        "tags": [
          "Authorization"
        ],
        "summary": "Revokes the given token",
        "operationId": "revokeToken",
        "responses": {
          "204": {
            "description": "OK"
          },
          "403": {
            "description": "Access denied."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/travelentries": {
      "post": {
        "tags": [
          "Accounting"
        ],
        "summary": "Get all travel entries available",
        "description": "Shows all available travel entries.<br/>Required profile(s): <i>Reisekostenerfassung (Anzeigen)</i>.",
        "operationId": "getAllTravelEntries",
        "requestBody": {
          "description": "search filter in JSON format. See also <a href='../browser/index.html#!/searchscope'>our search documentation</a>.",
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Shows all available travel entries."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/users": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Returns all users",
        "description": "Required profile(s): <i>Benutzer (Bearbeiten)</i>.",
        "operationId": "getUsers",
        "parameters": [
          {
            "name": "onlyActive",
            "in": "query",
            "description": "If set to true, deleted users are not returned.",
            "schema": {
              "type": "boolean"
            },
            "example": true
          },
          {
            "name": "organisationId",
            "in": "query",
            "description": "If set, only the users with rights for the organisation with the given  organisationId are returned.",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 9
          }
        ],
        "responses": {
          "200": {
            "description": "Returns all users."
          },
          "404": {
            "description": "No organisation with the given organisationId found."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      },
      "put": {
        "tags": [
          "User"
        ],
        "summary": "Updates the given users",
        "description": "Required profile(s): Benutzer (Bearbeiten).",
        "operationId": "updateUsers",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UserForm"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updates the given users"
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      },
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Creates the given users",
        "description": "Required profile(s): Benutzer (Bearbeiten).",
        "operationId": "createUsers",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UserForm"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Creates the given users."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/users/{uidOrEmail}": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Returns the user by UID or email",
        "description": "Required profile(s): Benutzer (Anzeigen).",
        "operationId": "getUser",
        "parameters": [
          {
            "name": "uidOrEmail",
            "in": "path",
            "description": "User ID or email",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the user by UID or email."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "User"
        ],
        "summary": "Deletes the user by UID or email. Please note, the users are only marked as deleted.",
        "description": "Required profile(s): Benutzer (Bearbeiten).",
        "operationId": "deleteUser",
        "parameters": [
          {
            "name": "uidOrEmail",
            "in": "path",
            "description": "User ID or email",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful delete."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/vatmatrixentries": {
      "get": {
        "tags": [
          "Accounting"
        ],
        "summary": "vat matrix",
        "description": "Returns the vat matrix for the current organisation.<br/>Required profile(s): <i>Stammdaten, Steuermatrix (Anzeigen)</i>.",
        "operationId": "getVatMatrixEntries",
        "responses": {
          "200": {
            "description": "Returns the vat matrix for the current organisation."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/version": {
      "get": {
        "tags": [
          "Additional"
        ],
        "summary": "retrieve deployment version infos",
        "description": "Returns deployment version infos.<br/>No profiles required.",
        "operationId": "getVersion",
        "responses": {
          "200": {
            "description": "Returns deployment version infos."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/zones": {
      "post": {
        "tags": [
          "Accounting"
        ],
        "summary": "zones",
        "description": "Returns all Scopevisio zones (Rechnungskreise).<br/>Required profile(s): <i>Stammdaten, Rechnungskreis (Anzeigen)</i>.",
        "operationId": "getZones",
        "requestBody": {
          "description": "search filter in JSON format. See also <a target='_blank' href='../browser/index.html#!/searchscope'>our search documentation</a>.",
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns all Scopevisio zones."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/datasource/auditLog": {
      "get": {
        "tags": [
          "Data sources"
        ],
        "summary": "Retrieve audit log entries",
        "description": "Required profile(s): <i>Änderungsprotokoll (Anzeigen)</i>.",
        "operationId": "getAuditLog",
        "parameters": [
          {
            "name": "startDate",
            "in": "query",
            "description": "Start date. Format: dd.MM.yyyy",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "End date. Format: dd.MM.yyyy",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma separated list of fields to include in the response",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns audit log entries according to the specified parameters."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/datasource/blog": {
      "get": {
        "tags": [
          "Data sources"
        ],
        "summary": "Retrieve blog entries",
        "description": "Required profile(s): <i>Pinnwand (Anzeigen)</i>.",
        "operationId": "getBlog",
        "parameters": [
          {
            "name": "startDate",
            "in": "query",
            "description": "Start date. Format: dd.MM.yyyy",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "End date. Format: dd.MM.yyyy",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma separated list of fields to include in the response",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns blog entries according to the specified parameters."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/datasource/budgetGroup": {
      "get": {
        "tags": [
          "Data sources"
        ],
        "summary": "Retrieve the entries of a single budget group (plan)",
        "description": "Required profile(s): <i>Finanzplanungen (Anzeigen)</i>.",
        "operationId": "getBudgetGroup",
        "parameters": [
          {
            "name": "budgetGroupName",
            "in": "query",
            "description": "name of a budget group",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma separated list of fields to include in the response",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the entries of a single budget group (plan) according to the specified parameters."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/datasource/plan": {
      "get": {
        "tags": [
          "Data sources"
        ],
        "summary": "Retrieve the entries of a single plan (budget group)",
        "description": "Required profile(s): <i>Finanzplanungen (Anzeigen)</i>.",
        "operationId": "getPlan",
        "parameters": [
          {
            "name": "planName",
            "in": "query",
            "description": "name of a plan",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma separated list of fields to include in the response",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the entries of a single plan (budget group) according to the specified parameters."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/datasource/teamwork": {
      "get": {
        "tags": [
          "Data sources"
        ],
        "summary": "Retrieve teamwork document metadata",
        "description": "Required profile(s): <i>Archiv (Anzeigen)</i>.",
        "operationId": "getTeamworkDocumentMetadata",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma separated list of fields to include in the response",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns teamwork document metadata according to the specified parameters."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/datasource/contact": {
      "get": {
        "tags": [
          "Data sources"
        ],
        "summary": "Retrieve contacts",
        "description": "Required profile(s): <i>Kontakt (Anzeigen)</i>.",
        "operationId": "getContact",
        "parameters": [
          {
            "name": "startDate",
            "in": "query",
            "description": "Start date. Format: dd.MM.yyyy",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "End date. Format: dd.MM.yyyy",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "roles",
            "in": "query",
            "description": "comma separated list of roles the request should be restricted to.<br/>Valid values are: interested, lead, customer, vendor, debitor, kreditor, employee, partner, worker",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma separated list of fields to include in the response",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns contacts according to the specified parameters."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/datasource/contactProperties": {
      "get": {
        "tags": [
          "Data sources"
        ],
        "summary": "Retrieve contact properties",
        "description": "Required profile(s): <i>Kontakt (Anzeigen)</i>.",
        "operationId": "getContactProperties_1",
        "parameters": [
          {
            "name": "startDate",
            "in": "query",
            "description": "Start date. Format: dd.MM.yyyy",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "End date. Format: dd.MM.yyyy",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma separated list of fields to include in the response",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns contact properties according to the specified parameters."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/datasource/conversion": {
      "get": {
        "tags": [
          "Data sources"
        ],
        "summary": "Retrieve (contact) conversions",
        "description": "Required profile(s): <i>Kontakt (Anzeigen)</i>.",
        "operationId": "getConversion",
        "parameters": [
          {
            "name": "startDate",
            "in": "query",
            "description": "Start date. Format: dd.MM.yyyy",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "End date. Format: dd.MM.yyyy",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma separated list of fields to include in the response",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns (contact) conversions according to the specified parameters."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/datasource/creditNote": {
      "get": {
        "tags": [
          "Data sources"
        ],
        "summary": "Retrieve customer credit description",
        "description": "Required profile(s): <i>Ausgangsrechnungen (Anzeigen)</i>.",
        "operationId": "getCreditNote",
        "parameters": [
          {
            "name": "startDate",
            "in": "query",
            "description": "Start date. Format: dd.MM.yyyy",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "End date. Format: dd.MM.yyyy",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountingEntityNumbers",
            "in": "query",
            "description": "comma separated list of numbers for accounting entities the request should be restricted to",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma separated list of fields to include in the response",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns customer credit notes according to the specified parameters."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/datasource/dispatch": {
      "get": {
        "tags": [
          "Data sources"
        ],
        "summary": "Retrieve customer delivery description",
        "description": "Required profile(s): <i>Lieferscheinen (Anzeigen)</i>.",
        "operationId": "getDispatch_1",
        "parameters": [
          {
            "name": "startDate",
            "in": "query",
            "description": "Start date. Format: dd.MM.yyyy",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "End date. Format: dd.MM.yyyy",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma separated list of fields to include in the response",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns customer delivery notes according to the specified parameters."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/datasource/event": {
      "get": {
        "tags": [
          "Data sources"
        ],
        "summary": "Retrieve event journal entries",
        "description": "Required profile(s): <i>Aktivitätenjournal (Anzeigen)</i>.",
        "operationId": "getEventJournalEntries",
        "parameters": [
          {
            "name": "startDate",
            "in": "query",
            "description": "Start date. Format: dd.MM.yyyy",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "End date. Format: dd.MM.yyyy",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma separated list of fields to include in the response",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns event journal entries according to the specified parameters."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/datasource/expense": {
      "get": {
        "tags": [
          "Data sources"
        ],
        "summary": "Retrieve expense entries",
        "description": "Required profile(s): <i>Reisekostenerfassung, Reisekostenerfassung (Mitarbeiter) (Anzeigen)</i>.",
        "operationId": "getExpense",
        "parameters": [
          {
            "name": "startDate",
            "in": "query",
            "description": "Start date. Format: dd.MM.yyyy",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "End date. Format: dd.MM.yyyy",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma separated list of fields to include in the response",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns expense entries according to the specified parameters."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/datasource/travelEntry": {
      "get": {
        "tags": [
          "Data sources"
        ],
        "summary": "Retrieve travel expense entries",
        "description": "Required profile(s): <i>Reisekostenerfassung, Reisekostenerfassung (Mitarbeiter) (Anzeigen)</i>.",
        "operationId": "getTravelEntry_1",
        "parameters": [
          {
            "name": "startDate",
            "in": "query",
            "description": "Start date. Format: dd.MM.yyyy",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "End date. Format: dd.MM.yyyy",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountingEntityNumbers",
            "in": "query",
            "description": "comma separated list of numbers for accounting entities the request should be restricted to",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma separated list of fields to include in the response",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns travel expense entries according to the specified parameters."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/datasource/travelEntryPositions": {
      "get": {
        "tags": [
          "Data sources"
        ],
        "summary": "Retrieve travel expense positions",
        "description": "Required profile(s): <i>Reisekostenerfassung, Reisekostenerfassung (Mitarbeiter) (Anzeigen)</i>.",
        "operationId": "getTravelEntryPositions_2",
        "parameters": [
          {
            "name": "startDate",
            "in": "query",
            "description": "Start date. Format: dd.MM.yyyy",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "End date. Format: dd.MM.yyyy",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma separated list of fields to include in the response",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns travel expense positions according to the specified parameters."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/datasource/humanResource": {
      "get": {
        "tags": [
          "Data sources"
        ],
        "summary": "Retrieve human resource entries",
        "description": "Required profile(s): <i>Human-Ressourcen Verwaltung (Anzeigen)</i>.",
        "operationId": "getHumanResource",
        "parameters": [
          {
            "name": "startDate",
            "in": "query",
            "description": "Start date. Format: dd.MM.yyyy",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "End date. Format: dd.MM.yyyy",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "hideTimeUnrestricted",
            "in": "query",
            "description": "hide time unrestricted entries (default: true)",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma separated list of fields to include in the response",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns human resource entries according to the specified parameters."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/datasource/humanResourceAvailability": {
      "get": {
        "tags": [
          "Data sources"
        ],
        "summary": "Retrieve human resource availability entries",
        "description": "Required profile(s): <i>Human-Ressourcen Verwaltung (Anzeigen)</i>.",
        "operationId": "getHumanResource_1",
        "parameters": [
          {
            "name": "startDate",
            "in": "query",
            "description": "Start date. Format: dd.MM.yyyy",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "End date. Format: dd.MM.yyyy",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma separated list of fields to include in the response",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns human resource availability entries according to the specified parameters."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/datasource/incomingInvoice": {
      "get": {
        "tags": [
          "Data sources"
        ],
        "summary": "Retrieve vendor invoices",
        "description": "Required profile(s): <i>Eingangsrechnungen (Anzeigen)</i>.",
        "operationId": "getIncomingInvoice",
        "parameters": [
          {
            "name": "startDate",
            "in": "query",
            "description": "Start date. Format: dd.MM.yyyy",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "End date. Format: dd.MM.yyyy",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountingEntityNumbers",
            "in": "query",
            "description": "comma separated list of numbers for accounting entities the request should be restricted to",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma separated list of fields to include in the response",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns vendor invoices according to the specified parameters."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/datasource/journal": {
      "get": {
        "tags": [
          "Data sources"
        ],
        "summary": "Retrieve general journal entries",
        "description": "Required profile(s): <i>Journal (Anzeigen)</i>.",
        "operationId": "getJournal",
        "parameters": [
          {
            "name": "startDate",
            "in": "query",
            "description": "Start date. Format: dd.MM.yyyy",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "End date. Format: dd.MM.yyyy",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "reportName",
            "in": "query",
            "description": "name of report layout",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "unassigned",
            "in": "query",
            "description": "include unassigned entries",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "forcePersonalEntries",
            "in": "query",
            "description": "force personal entries",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "hideCancellationEntries",
            "in": "query",
            "description": "hide cancellation entries",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "dimension1",
            "in": "query",
            "description": "consider cost center dimension",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "dimension2",
            "in": "query",
            "description": "consider cost bearer dimension",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "dimension3",
            "in": "query",
            "description": "consider project dimension",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "dimension4",
            "in": "query",
            "description": "consider dimension # 4",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "dimension5",
            "in": "query",
            "description": "consider dimension # 5",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "dimension6",
            "in": "query",
            "description": "consider dimension # 6",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "dimension7",
            "in": "query",
            "description": "consider dimension # 7",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "dimension8",
            "in": "query",
            "description": "consider dimension # 8",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "dimension9",
            "in": "query",
            "description": "consider dimension # 9",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "dimension10",
            "in": "query",
            "description": "consider dimension # 10",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "accountingEntityNumbers",
            "in": "query",
            "description": "comma separated list of numbers for accounting entities the request should be restricted to",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma separated list of fields to include in the response",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns general journal entries according to the specified parameters."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/datasource/material/product": {
      "get": {
        "tags": [
          "Data sources"
        ],
        "summary": "Retrieve material management products",
        "description": "Required profile(s): <i>Produktverwaltung (Anzeigen)</i>.",
        "operationId": "getProduct_1",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma separated list of fields to include in the response",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns material management products according to the specified parameters."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/datasource/material/productOutgoing": {
      "get": {
        "tags": [
          "Data sources"
        ],
        "summary": "Retrieve material management outgoing product entries",
        "description": "Required profile(s): <i>Produktverwaltung (Anzeigen)</i>.",
        "operationId": "getProductOutgoing",
        "parameters": [
          {
            "name": "startDate",
            "in": "query",
            "description": "Start date. Format: dd.MM.yyyy",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "End date. Format: dd.MM.yyyy",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma separated list of fields to include in the response",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns material management outgoing product entries according to the specified parameters."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/datasource/material/productStock": {
      "get": {
        "tags": [
          "Data sources"
        ],
        "summary": "Retrieve material management product stock entries",
        "description": "Required profile(s): <i>Produktverwaltung (Anzeigen)</i>.",
        "operationId": "getProductStock",
        "parameters": [
          {
            "name": "startDate",
            "in": "query",
            "description": "Start date. Format: dd.MM.yyyy",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "End date. Format: dd.MM.yyyy",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma separated list of fields to include in the response",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns material management product stock entries according to the specified parameters."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/datasource/offer": {
      "get": {
        "tags": [
          "Data sources"
        ],
        "summary": "Retrieve customer offers",
        "description": "Required profile(s): <i>Angebote (Anzeigen)</i>.",
        "operationId": "getOffer_1",
        "parameters": [
          {
            "name": "startDate",
            "in": "query",
            "description": "Start date. Format: dd.MM.yyyy",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "End date. Format: dd.MM.yyyy",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountingEntityNumbers",
            "in": "query",
            "description": "comma separated list of numbers for accounting entities the request should be restricted to",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma separated list of fields to include in the response",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns customer offers according to the specified parameters."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/datasource/opportunity": {
      "get": {
        "tags": [
          "Data sources"
        ],
        "summary": "Retrieve opportunities",
        "description": "Required profile(s): <i>Potenzial(Opportunities) (Anzeigen)</i>.",
        "operationId": "getOutgoingInvoice_1",
        "parameters": [
          {
            "name": "startDate",
            "in": "query",
            "description": "Start date. Format: dd.MM.yyyy",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "End date. Format: dd.MM.yyyy",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma separated list of fields to include in the response",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns opportunities according to the specified parameters."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/datasource/order": {
      "get": {
        "tags": [
          "Data sources"
        ],
        "summary": "Retrieve customer orders",
        "description": "Required profile(s): <i>Aufträge (Anzeigen)</i>.",
        "operationId": "getOrder_1",
        "parameters": [
          {
            "name": "startDate",
            "in": "query",
            "description": "Start date. Format: dd.MM.yyyy",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "End date. Format: dd.MM.yyyy",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountingEntityNumbers",
            "in": "query",
            "description": "comma separated list of numbers for accounting entities the request should be restricted to",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma separated list of fields to include in the response",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns customer orders according to the specified parameters."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/datasource/outgoingInvoice": {
      "get": {
        "tags": [
          "Data sources"
        ],
        "summary": "Retrieve customer invoices",
        "description": "Required profile(s): <i>Ausgangsrechnungen (Anzeigen)</i>.",
        "operationId": "getOutgoingInvoice_2",
        "parameters": [
          {
            "name": "startDate",
            "in": "query",
            "description": "Start date. Format: dd.MM.yyyy",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "End date. Format: dd.MM.yyyy",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountingEntityNumbers",
            "in": "query",
            "description": "comma separated list of numbers for accounting entities the request should be restricted to",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma separated list of fields to include in the response",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns customer invoices according to the specified parameters."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/datasource/personalAccount/creditor": {
      "get": {
        "tags": [
          "Data sources"
        ],
        "summary": "Retrieve creditor accounts",
        "description": "Required profile(s): <i>Kreditoren (Anzeigen)</i>.",
        "operationId": "getCreditor",
        "parameters": [
          {
            "name": "startDate",
            "in": "query",
            "description": "Start date. Format: dd.MM.yyyy",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "End date. Format: dd.MM.yyyy",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma separated list of fields to include in the response",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns creditor accounts according to the specified parameters."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/datasource/personalAccount/debtor": {
      "get": {
        "tags": [
          "Data sources"
        ],
        "summary": "Retrieve debtor accounts",
        "description": "Required profile(s): <i>Debitoren (Anzeigen)</i>.",
        "operationId": "getDebtor",
        "parameters": [
          {
            "name": "startDate",
            "in": "query",
            "description": "Start date. Format: dd.MM.yyyy",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "End date. Format: dd.MM.yyyy",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma separated list of fields to include in the response",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns debtor accounts according to the specified parameters."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/datasource/personalJournal": {
      "get": {
        "tags": [
          "Data sources"
        ],
        "summary": "Retrieve personal journal entries",
        "description": "Required profile(s): <i>Zeiterfassung (Anzeigen)</i>.",
        "operationId": "getTimeEntry_1",
        "parameters": [
          {
            "name": "startDate",
            "in": "query",
            "description": "Start date. Format: dd.MM.yyyy",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "End date. Format: dd.MM.yyyy",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma separated list of fields to include in the response",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns personal journal entries according to the specified parameters."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/datasource/positions/creditNote": {
      "get": {
        "tags": [
          "Data sources"
        ],
        "summary": "Retrieve credit note positions",
        "description": "Required profile(s): <i>Ausgangsrechnungen (Anzeigen)</i>.",
        "operationId": "getCreditNotePositions",
        "parameters": [
          {
            "name": "startDate",
            "in": "query",
            "description": "Start date. Format: dd.MM.yyyy",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "End date. Format: dd.MM.yyyy",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountingEntityNumbers",
            "in": "query",
            "description": "comma separated list of numbers for accounting entities the request should be restricted to",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma separated list of fields to include in the response",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns credit note positions according to the specified parameters."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/datasource/positions/dispatch": {
      "get": {
        "tags": [
          "Data sources"
        ],
        "summary": "Retrieve dispatch positions",
        "description": "Required profile(s): <i>Lieferscheine (Anzeigen)</i>.",
        "operationId": "getDispatchPositions_1",
        "parameters": [
          {
            "name": "startDate",
            "in": "query",
            "description": "Start date. Format: dd.MM.yyyy",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "End date. Format: dd.MM.yyyy",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma separated list of fields to include in the response",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns dispatch positions according to the specified parameters."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/datasource/positions/offer": {
      "get": {
        "tags": [
          "Data sources"
        ],
        "summary": "Retrieve offer positions",
        "description": "Required profile(s): <i>Angebote (Anzeigen)</i>.",
        "operationId": "getOfferPositions_1",
        "parameters": [
          {
            "name": "startDate",
            "in": "query",
            "description": "Start date. Format: dd.MM.yyyy",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "End date. Format: dd.MM.yyyy",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountingEntityNumbers",
            "in": "query",
            "description": "comma separated list of numbers for accounting entities the request should be restricted to",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma separated list of fields to include in the response",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns offer positions according to the specified parameters."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/datasource/positions/opportunity": {
      "get": {
        "tags": [
          "Data sources"
        ],
        "summary": "Retrieve opportunity positions",
        "description": "Required profile(s): <i>Potenzial (Opportunities) (Anzeigen)</i>.",
        "operationId": "getOpportunityPositions_1",
        "parameters": [
          {
            "name": "startDate",
            "in": "query",
            "description": "Start date. Format: dd.MM.yyyy",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "End date. Format: dd.MM.yyyy",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma separated list of fields to include in the response",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns opportunity positions according to the specified parameters."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/datasource/positions/order": {
      "get": {
        "tags": [
          "Data sources"
        ],
        "summary": "Retrieve order positions",
        "description": "Required profile(s): <i>Aufträge (Anzeigen)</i>.",
        "operationId": "getOrderPositions_1",
        "parameters": [
          {
            "name": "startDate",
            "in": "query",
            "description": "Start date. Format: dd.MM.yyyy",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "End date. Format: dd.MM.yyyy",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountingEntityNumbers",
            "in": "query",
            "description": "comma separated list of numbers for accounting entities the request should be restricted to",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma separated list of fields to include in the response",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns order positions according to the specified parameters."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/datasource/positions/outgoingInvoice": {
      "get": {
        "tags": [
          "Data sources"
        ],
        "summary": "Retrieve customer invoice positions",
        "description": "Required profile(s): <i>Ausgangsrechnungen (Anzeigen)</i>.",
        "operationId": "getOutgoingInvoicePositions_1",
        "parameters": [
          {
            "name": "startDate",
            "in": "query",
            "description": "Start date. Format: dd.MM.yyyy",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "End date. Format: dd.MM.yyyy",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountingEntityNumbers",
            "in": "query",
            "description": "comma separated list of numbers for accounting entities the request should be restricted to",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma separated list of fields to include in the response",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns customer invoice positions according to the specified parameters."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/datasource/proReport": {
      "get": {
        "tags": [
          "Data sources"
        ],
        "summary": "Retrieve a financial report",
        "description": "Required profile(s): <i>Berichte (Anzeigen)</i>.",
        "operationId": "getProReport_1",
        "parameters": [
          {
            "name": "month",
            "in": "query",
            "description": "monthly period (1-12)",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "year",
            "in": "query",
            "description": "yearly period",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "definitionType",
            "in": "query",
            "description": "type of account layout.<br/>Valid values are: 1 (Gewinn- und Verlustrechnung), 2 (Bilanz), 3 (Sonstige Auswertungen), 4 (Kostenstelle), 5 (Kostenträger)",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "definitionName",
            "in": "query",
            "description": "name of account layout",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "layoutName",
            "in": "query",
            "description": "name of column layout",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "budgetGroupName",
            "in": "query",
            "description": "name of budget group / plan",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "organisations",
            "in": "query",
            "description": "comma separated list of names of organisations (default: the current organisation)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "showAccounts",
            "in": "query",
            "description": "show accounts",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "showGuvAccounts",
            "in": "query",
            "description": "show GUV accounts",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "showEmptyRows",
            "in": "query",
            "description": "show empty rows",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "showLineNumbers",
            "in": "query",
            "description": "show line numbers",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "useForeignLanguage",
            "in": "query",
            "description": "use foreign language",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "amountSuffix",
            "in": "query",
            "description": "amount suffix (NoSuffix: no suffix, DebitCredit: append a suffix to a monetary value. Either S (Soll) or H (Haben) (default: DebitCredit))",
            "schema": {
              "type": "string",
              "enum": [
                "NoSuffix",
                "DebitCredit"
              ]
            }
          },
          {
            "name": "amountFormatting",
            "in": "query",
            "description": "formatting to apply to monetary values (default: 2 Decimal digits)",
            "schema": {
              "type": "string",
              "enum": [
                "NoDecimalDigits",
                "TwoDecimalDigits",
                "DivideByThousand"
              ]
            }
          },
          {
            "name": "percentFormatting",
            "in": "query",
            "description": "formatting to apply to percent values (default: 2 Decimal digits)",
            "schema": {
              "type": "string",
              "enum": [
                "NoDecimalDigits",
                "OneDecimalDigit",
                "TwoDecimalDigits"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a financial report according to the specified parameters."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/datasource/product": {
      "get": {
        "tags": [
          "Data sources"
        ],
        "summary": "Retrieve the product list",
        "description": "Required profile(s): <i>Faktura Stammdaten, Eingangsrechnungen, Potenzial(Opportunities) (Anzeigen)</i>.",
        "operationId": "getProduct_2",
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "description": "comma separated list of fields to include in the response",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the product list according to the specified parameters."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/datasource/productUsage/creditNote": {
      "get": {
        "tags": [
          "Data sources"
        ],
        "summary": "Retrieve product usage in credit description",
        "description": "Required profile(s): <i>Ausgangsrechnungen (Anzeigen)</i>.",
        "operationId": "getCreditNoteProductUsage",
        "parameters": [
          {
            "name": "startDate",
            "in": "query",
            "description": "Start date. Format: dd.MM.yyyy",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "End date. Format: dd.MM.yyyy",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "showCustomersSeparately",
            "in": "query",
            "description": "showCustomersSeparately",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "currency",
            "in": "query",
            "description": "currency (ISO three-letter currency code, default: EUR)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountingEntityNumbers",
            "in": "query",
            "description": "comma separated list of numbers for accounting entities the request should be restricted to",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma separated list of fields to include in the response",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns product usage in credit notes according to the specified parameters."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/datasource/productUsage/dispatch": {
      "get": {
        "tags": [
          "Data sources"
        ],
        "summary": "Retrieve product usage in dispatches",
        "description": "Required profile(s): <i>Lieferscheine (Anzeigen)</i>.",
        "operationId": "getDispatchProductUsage",
        "parameters": [
          {
            "name": "startDate",
            "in": "query",
            "description": "Start date. Format: dd.MM.yyyy",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "End date. Format: dd.MM.yyyy",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "showCustomersSeparately",
            "in": "query",
            "description": "showCustomersSeparately",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "currency",
            "in": "query",
            "description": "currency (ISO three-letter currency code, default: EUR)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma separated list of fields to include in the response",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns product usage in dispatches according to the specified parameters."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/datasource/productUsage/offer": {
      "get": {
        "tags": [
          "Data sources"
        ],
        "summary": "Retrieve product usage in offers",
        "description": "Required profile(s): <i>Angebote (Anzeigen)</i>.",
        "operationId": "getOfferProductUsage",
        "parameters": [
          {
            "name": "startDate",
            "in": "query",
            "description": "Start date. Format: dd.MM.yyyy",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "End date. Format: dd.MM.yyyy",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "showCustomersSeparately",
            "in": "query",
            "description": "showCustomersSeparately",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "validOffersOnly",
            "in": "query",
            "description": "only valid offers",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "currency",
            "in": "query",
            "description": "currency (ISO three-letter currency code, default: EUR)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountingEntityNumbers",
            "in": "query",
            "description": "comma separated list of numbers for accounting entities the request should be restricted to",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma separated list of fields to include in the response",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns product usage in offers according to the specified parameters."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/datasource/productUsage/opportunity": {
      "get": {
        "tags": [
          "Data sources"
        ],
        "summary": "Retrieve product usage in opportunities",
        "description": "Required profile(s): <i>Potenzial (Opportunities) (Anzeigen)</i>.",
        "operationId": "getOpportunityProductUsage",
        "parameters": [
          {
            "name": "startDate",
            "in": "query",
            "description": "Start date. Format: dd.MM.yyyy",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "End date. Format: dd.MM.yyyy",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma separated list of fields to include in the response",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns product usage in credit notes according to the specified parameters."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/datasource/productUsage/order": {
      "get": {
        "tags": [
          "Data sources"
        ],
        "summary": "Retrieve product usage in orders",
        "description": "Required profile(s): <i>Aufträge (Anzeigen)</i>.",
        "operationId": "getOrderProductUsage",
        "parameters": [
          {
            "name": "startDate",
            "in": "query",
            "description": "Start date. Format: dd.MM.yyyy",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "End date. Format: dd.MM.yyyy",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "showCustomersSeparately",
            "in": "query",
            "description": "showCustomersSeparately",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "currency",
            "in": "query",
            "description": "currency (ISO three-letter currency code, default: EUR)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountingEntityNumbers",
            "in": "query",
            "description": "comma separated list of numbers for accounting entities the request should be restricted to",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma separated list of fields to include in the response",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns product usage in orders according to the specified parameters."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/datasource/productUsage/outgoingInvoice": {
      "get": {
        "tags": [
          "Data sources"
        ],
        "summary": "Retrieve product usage in customer invoices",
        "description": "Required profile(s): <i>Ausgangsrechnungen (Anzeigen)</i>.",
        "operationId": "getOutgoingInvoiceProductUsage",
        "parameters": [
          {
            "name": "startDate",
            "in": "query",
            "description": "Start date. Format: dd.MM.yyyy",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "End date. Format: dd.MM.yyyy",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "showCustomersSeparately",
            "in": "query",
            "description": "showCustomersSeparately",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "currency",
            "in": "query",
            "description": "currency (ISO three-letter currency code, default: EUR)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountingEntityNumbers",
            "in": "query",
            "description": "comma separated list of numbers for accounting entities the request should be restricted to",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma separated list of fields to include in the response",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns product usage in customer invoices according to the specified parameters."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/datasource/project": {
      "get": {
        "tags": [
          "Data sources"
        ],
        "summary": "Retrieve projects",
        "description": "Required profile(s): <i>Projekt (Anzeigen)</i>.",
        "operationId": "getProject_1",
        "parameters": [
          {
            "name": "startDate",
            "in": "query",
            "description": "Start date. Format: dd.MM.yyyy",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "End date. Format: dd.MM.yyyy",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma separated list of fields to include in the response",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns projects according to the specified parameters."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/datasource/projectResource": {
      "get": {
        "tags": [
          "Data sources"
        ],
        "summary": "Retrieve project resources",
        "description": "Required profile(s): <i>Projekt (Anzeigen)</i>.",
        "operationId": "getStatisticsJournal",
        "parameters": [
          {
            "name": "startDate",
            "in": "query",
            "description": "Start date. Format: dd.MM.yyyy",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "End date. Format: dd.MM.yyyy",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma separated list of fields to include in the response",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns project resources according to the specified parameters."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/datasource/projectRevenue": {
      "get": {
        "tags": [
          "Data sources"
        ],
        "summary": "Retrieve project revenue entries",
        "description": "Required profile(s): <i>Projekt (Anzeigen)</i>.",
        "operationId": "getProjectRevenue_1",
        "parameters": [
          {
            "name": "startDate",
            "in": "query",
            "description": "Start date. Format: dd.MM.yyyy",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "End date. Format: dd.MM.yyyy",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "revenueType",
            "in": "query",
            "description": "type of revenue.<br/>Valid values are: Planung, Realisierung, Abweichung",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma separated list of fields to include in the response",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns project revenue entries according to the specified parameters."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/datasource/salesProject": {
      "get": {
        "tags": [
          "Data sources"
        ],
        "summary": "Retrieve sales projects",
        "description": "Required profile(s): <i>Projekt (Anzeigen)</i>.",
        "operationId": "getSalesProject",
        "parameters": [
          {
            "name": "startDate",
            "in": "query",
            "description": "Start date. Format: dd.MM.yyyy",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "End date. Format: dd.MM.yyyy",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma separated list of fields to include in the response",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns sales projects according to the specified parameters."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/datasource/statisticsJournal": {
      "get": {
        "tags": [
          "Data sources"
        ],
        "summary": "Retrieve statistics journal entries",
        "description": "Required profile(s): <i>Statistikbuchungen (Anzeigen)</i>.",
        "operationId": "getStatisticsJournal_1",
        "parameters": [
          {
            "name": "startDate",
            "in": "query",
            "description": "Start date. Format: dd.MM.yyyy",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "End date. Format: dd.MM.yyyy",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountingEntityNumbers",
            "in": "query",
            "description": "comma separated list of numbers for accounting entities the request should be restricted to",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma separated list of fields to include in the response",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns statistics journal entries according to the specified parameters."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/datasource/susa/creditors": {
      "get": {
        "tags": [
          "Data sources"
        ],
        "summary": "Retrieve SUSA report for creditors",
        "description": "Required profile(s): <i>Berichte (Anzeigen)</i>.",
        "operationId": "getSusaCreditors",
        "parameters": [
          {
            "name": "startDate",
            "in": "query",
            "description": "Start date. Format: dd.MM.yyyy",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "End date. Format: dd.MM.yyyy",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountingEntityNumbers",
            "in": "query",
            "description": "comma separated list of numbers for accounting entities the request should be restricted to",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma separated list of fields to include in the response",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns SUSA report for creditors according to the specified parameters."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/datasource/susa/debtors": {
      "get": {
        "tags": [
          "Data sources"
        ],
        "summary": "Retrieve SUSA report for creditors",
        "description": "Required profile(s): <i>Berichte (Anzeigen)</i>.",
        "operationId": "getSusaDebtors",
        "parameters": [
          {
            "name": "startDate",
            "in": "query",
            "description": "Start date. Format: dd.MM.yyyy",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "End date. Format: dd.MM.yyyy",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountingEntityNumbers",
            "in": "query",
            "description": "comma separated list of numbers for accounting entities the request should be restricted to",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma separated list of fields to include in the response",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns SUSA report for creditors according to the specified parameters."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/datasource/susa/impersonalAccounts": {
      "get": {
        "tags": [
          "Data sources"
        ],
        "summary": "Retrieve SUSA report for impersonal accounts",
        "description": "Required profile(s): <i>Berichte (Anzeigen)</i>.",
        "operationId": "getSusaImpersonalAccounts",
        "parameters": [
          {
            "name": "startDate",
            "in": "query",
            "description": "Start date. Format: dd.MM.yyyy",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "End date. Format: dd.MM.yyyy",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accountingEntityNumbers",
            "in": "query",
            "description": "comma separated list of numbers for accounting entities the request should be restricted to",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma separated list of fields to include in the response",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns SUSA report for impersonal accounts according to the specified parameters."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/datasource/task": {
      "get": {
        "tags": [
          "Data sources"
        ],
        "summary": "Retrieve tasks",
        "description": "Required profile(s): <i>Aufgaben (Anzeigen)</i>.",
        "operationId": "getTask_1",
        "parameters": [
          {
            "name": "startDate",
            "in": "query",
            "description": "Start date. Format: dd.MM.yyyy",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "End date. Format: dd.MM.yyyy",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma separated list of fields to include in the response",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns tasks according to the specified parameters."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/datasource/timeEntry": {
      "get": {
        "tags": [
          "Data sources"
        ],
        "summary": "Retrieve time entries",
        "description": "Required profile(s): <i>Zeiterfassung (Anzeigen)</i>.",
        "operationId": "getTimeEntry_2",
        "parameters": [
          {
            "name": "startDate",
            "in": "query",
            "description": "Start date. Format: dd.MM.yyyy",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "End date. Format: dd.MM.yyyy",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma separated list of fields to include in the response",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns time entries according to the specified parameters."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/datasource/timeEntryRun": {
      "get": {
        "tags": [
          "Data sources"
        ],
        "summary": "Retrieve time entry runs",
        "description": "Required profile(s): <i>Zeitabrechnung (Anzeigen)</i>.",
        "operationId": "getTimeEntryRun",
        "parameters": [
          {
            "name": "startDate",
            "in": "query",
            "description": "Start date. Format: dd.MM.yyyy",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "End date. Format: dd.MM.yyyy",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma separated list of fields to include in the response",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns time entry run according to the specified parameters."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/datasource/timeEntryRunEntry": {
      "get": {
        "tags": [
          "Data sources"
        ],
        "summary": "Retrieve time entry run entries",
        "description": "Required profile(s): <i>Zeitabrechnung (Anzeigen)</i>.",
        "operationId": "getTimeEntryRunEntry",
        "parameters": [
          {
            "name": "startDate",
            "in": "query",
            "description": "Start date. Format: dd.MM.yyyy",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "End date. Format: dd.MM.yyyy",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fields",
            "in": "query",
            "description": "comma separated list of fields to include in the response",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns time entry run entries according to the specified parameters."
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "AccountingInfoForm": {
        "type": "object",
        "properties": {
          "numberRanges": {
            "type": "array",
            "description": "number ranges",
            "items": {
              "$ref": "#/components/schemas/NumberRangeType"
            }
          }
        }
      },
      "NumberRangeType": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "number": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          },
          "format": {
            "type": "string"
          },
          "alphanumeric": {
            "type": "boolean"
          },
          "automatic": {
            "type": "boolean"
          },
          "interval": {
            "type": "integer",
            "format": "int64"
          },
          "startNumber": {
            "type": "integer",
            "format": "int64"
          },
          "endNumber": {
            "type": "integer",
            "format": "int64"
          },
          "currentVal": {
            "type": "integer",
            "format": "int64"
          }
        },
        "description": "number ranges"
      },
      "BankConnectionForm": {
        "type": "object",
        "properties": {
          "number": {
            "type": "string",
            "description": "number (Kontonummer)"
          },
          "bankCode": {
            "type": "string",
            "description": "bankCode (BLZ)"
          },
          "iban": {
            "type": "string",
            "description": "iban"
          },
          "swiftBic": {
            "type": "string",
            "description": "swiftBic"
          },
          "bankName": {
            "type": "string",
            "description": "bankName (Kreditinstitut)"
          },
          "accountHolder": {
            "type": "string",
            "description": "accountHolder (Kontoinhaber)"
          },
          "standard": {
            "type": "boolean",
            "description": "standard, whether or not this should be the standard bank connection for transfers or withdrawals."
          },
          "description": {
            "type": "string",
            "description": "description (Beschreibung)"
          }
        }
      },
      "BankStatementForm": {
        "type": "object",
        "properties": {
          "data": {
            "type": "string"
          }
        }
      },
      "CashbookEntryForm": {
        "required": [
          "cashbookId",
          "documentDate"
        ],
        "type": "object",
        "properties": {
          "cashbookId": {
            "type": "integer",
            "description": "cashbookId (Ref-Nummer Kasse)",
            "format": "int64",
            "example": 2
          },
          "documentDate": {
            "type": "integer",
            "description": "documentDate(Datum), epoch timestamp in milliseconds",
            "format": "int64",
            "example": 1579526577000
          },
          "externalDocumentNumber": {
            "type": "string",
            "description": "externalDocumentNumber(externe Belegnummer)",
            "example": "B878"
          },
          "internalDocumentNumber": {
            "type": "string",
            "description": "internalDocumentNumber (interne Belegnummer),",
            "readOnly": true,
            "example": "K1000-2020-1-3"
          },
          "freeText": {
            "type": "string",
            "description": "freeText(Belegtext)",
            "example": "von/an Bank"
          },
          "debitAmount": {
            "type": "number",
            "description": "debitAmount(Einnahmen)",
            "example": 18
          },
          "creditAmount": {
            "type": "number",
            "description": "creditAmount(Ausgaben)",
            "example": 23
          },
          "impersonalAccountNumber": {
            "type": "string",
            "description": "impersonalAccountNumber(Gegenkonto)",
            "example": "1360"
          },
          "personalAccountNumber": {
            "type": "string",
            "description": "Kunde/Lieferant",
            "example": "70000"
          },
          "notice": {
            "type": "string",
            "description": "notice(Notiz)",
            "example": "Geschäftsessen"
          },
          "dimensions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DimensionEntryValueForm"
            }
          }
        }
      },
      "DimensionEntryValueForm": {
        "required": [
          "dimensionEntryNumber",
          "dimensionNumber"
        ],
        "type": "object",
        "properties": {
          "dimensionNumber": {
            "type": "integer",
            "description": "dimensionNumber (e.g. 1 (Kostenstelle), 2 (Kostenträger), etc.",
            "format": "int64",
            "example": 3
          },
          "dimensionEntryNumber": {
            "type": "integer",
            "description": "DimensionEntryNumber",
            "format": "int64",
            "example": 7
          },
          "dimensionEntryName": {
            "type": "string",
            "description": "DimensionEntryName, if the dimensionEntryNumber does not exist, it will be created. If dimensionEntryName is not provided then it is set to the dimensionNumber.",
            "example": "Entwicklung"
          }
        }
      },
      "CustomField": {
        "required": [
          "customFieldName",
          "customFieldValue"
        ],
        "type": "object",
        "properties": {
          "customFieldName": {
            "type": "string",
            "description": "See our <a href='../browser/index.html#!/documentation#cf'>documentation </a> for how the names are put together.",
            "example": "customText1"
          },
          "customFieldValue": {
            "type": "object",
            "example": "my custom text"
          }
        },
        "description": "Benutzerdefinierte Felder"
      },
      "Employer": {
        "type": "object",
        "properties": {
          "employerId": {
            "type": "integer",
            "description": "id of a Scopevisio oganisation contact. Either employerId or legacyNumber must be provided.",
            "format": "int64",
            "example": 10045
          },
          "legacyNumber": {
            "type": "string",
            "description": "legacyNumber (ID Vorsystem) of a Scopevisio oganisation contact. Either employerId or legacyNumber must be provided.",
            "example": "10045"
          },
          "companyType": {
            "type": "string",
            "description": "Employer type",
            "example": "Arbeitgeber",
            "enum": [
              "Hauptarbeitgeber",
              "Arbeitgeber",
              "Auftraggeber",
              "Ehemaliger AG"
            ]
          },
          "companyDocumentVisibility": {
            "type": "boolean",
            "description": "Employee documents are visible in the employer contact if set to true"
          },
          "companyCommentVisibility": {
            "type": "boolean",
            "description": "Employee comments are visible in the employer contact if set to true"
          },
          "companyTaskVisibility": {
            "type": "boolean",
            "description": "Employee tasks are visible in the employer contact if set to true"
          },
          "companyInfoVisibility": {
            "type": "boolean",
            "description": "Employee properties (Allgemeine Informationen) are visible in the employer contact if set to true"
          },
          "validFrom": {
            "type": "integer",
            "description": "Employee from",
            "format": "int64",
            "example": 1546210800000
          },
          "validTo": {
            "type": "integer",
            "description": "Employee to",
            "format": "int64",
            "example": 1546210800000
          }
        },
        "description": "To set an employer to a personal contact an employerId (id of a Scopevisio oganisation contact) or legacyNumber (ID Vorsystem) of a Scopevisio organisation contact must be provided. If both are provided the id is used to find the contact. If no contact with the given employerId is found the legacyNumber is used. "
      },
      "KontaktForm": {
        "required": [
          "lastname",
          "person"
        ],
        "type": "object",
        "properties": {
          "person": {
            "type": "boolean",
            "description": "true = Person, false = Gesellschaft. Evaluated only when creating a contact."
          },
          "salutation": {
            "type": "string",
            "description": "Anrede",
            "example": "Frau",
            "enum": [
              "Herr",
              "Frau",
              "Familie",
              "Eheleute"
            ]
          },
          "title": {
            "type": "string",
            "description": "Titel",
            "example": "Dr.",
            "enum": [
              "Bachelor",
              "Master",
              "Magister",
              "Lizentiat",
              "Diplom (FH)",
              "Diplom",
              "Ph.D.",
              "Dr.",
              "Dr. mult.",
              "Dr. habil.",
              "Dr. h.c.",
              "Dr. e.h.",
              "Prof.",
              "Prof. Dr."
            ]
          },
          "lastname": {
            "type": "string",
            "description": "Name/Gesellschaftsname",
            "example": "Müller GmbH"
          },
          "firstname": {
            "type": "string",
            "description": "Vorname",
            "example": "Peter"
          },
          "paymentTypeName": {
            "type": "string",
            "description": "paymentTypeName (Zahlungsart).Sets also paymentType.",
            "enum": [
              "Vorkasse",
              "Überweisung",
              "Bar",
              "EC-Karte",
              "Einzugsermächtigung",
              "Abbuchungsgenehmigung",
              "Kreditkarte",
              "Nachnahme",
              "PayPal",
              "Rechnung",
              "AmazonPay",
              "Billpay",
              "Abbuchungsgenehmigung Priorität",
              "Überweisung Priorität",
              "Sofortüberweisung",
              "Klarna",
              "Apple Pay"
            ]
          },
          "federalState": {
            "type": "string",
            "description": "Bundesland [Hauptadresse]",
            "example": "Nordrhein-Westfalen"
          },
          "federalState2": {
            "type": "string",
            "description": "Bundesland [Rechnungsadresse]",
            "example": "Nordrhein-Westfalen"
          },
          "federalState3": {
            "type": "string",
            "description": "Bundesland [Lieferadresse]",
            "example": "Nordrhein-Westfalen"
          },
          "federalState4": {
            "type": "string",
            "description": "Bundesland [Postalisch]",
            "example": "Nordrhein-Westfalen"
          },
          "federalState5": {
            "type": "string",
            "description": "Bundesland [Privat]",
            "example": "Nordrhein-Westfalen"
          },
          "federalState6": {
            "type": "string",
            "description": "Bundesland [weiteres]",
            "example": "Nordrhein-Westfalen"
          },
          "street1": {
            "type": "string",
            "description": "Straße und Hausnummer [Hauptadresse]",
            "example": "Hauptstr. 10"
          },
          "street2": {
            "type": "string",
            "description": "Straße und Hausnummer [Rechnungsadresse]",
            "example": "Hauptstr. 10"
          },
          "street3": {
            "type": "string",
            "description": "Straße und Hausnummer [Lieferadresse]",
            "example": "Hauptstr. 10"
          },
          "street4": {
            "type": "string",
            "description": "Straße und Hausnummer [Postalisch]",
            "example": "Hauptstr. 10"
          },
          "street5": {
            "type": "string",
            "description": "Straße und Hausnummer [Privat]",
            "example": "Hauptstr. 10"
          },
          "street6": {
            "type": "string",
            "description": "Straße und Hausnummer [weiteres]",
            "example": "Hauptstr. 10"
          },
          "addressExtra1": {
            "type": "string",
            "description": "Zustellanweisung [c/o] [Hauptadresse]",
            "example": "Hauptstr. 10"
          },
          "addressExtra2": {
            "type": "string",
            "description": "Zustellanweisung [c/o] [Rechnungsadresse]",
            "example": "Hauptstr. 10"
          },
          "addressExtra3": {
            "type": "string",
            "description": "Zustellanweisung [c/o] [Lieferadresse]",
            "example": "Hauptstr. 10"
          },
          "addressExtra4": {
            "type": "string",
            "description": "Zustellanweisung [c/o] [Postalisch]",
            "example": "Hauptstr. 10"
          },
          "addressExtra5": {
            "type": "string",
            "description": "Zustellanweisung [c/o] [Privat]",
            "example": "Hauptstr. 10"
          },
          "addressExtra6": {
            "type": "string",
            "description": "Zustellanweisung [c/o] [weiteres]",
            "example": "Hauptstr. 10"
          },
          "city1": {
            "type": "string",
            "description": "Stadt [Hauptadresse]",
            "example": "Köln"
          },
          "city2": {
            "type": "string",
            "description": "Stadt [Rechnungsadresse]",
            "example": "Köln"
          },
          "city3": {
            "type": "string",
            "description": "Stadt [Lieferadresse]",
            "example": "Köln"
          },
          "city4": {
            "type": "string",
            "description": "Stadt [Postalisch]",
            "example": "Köln"
          },
          "city5": {
            "type": "string",
            "description": "Stadt [Privat]",
            "example": "Köln"
          },
          "city6": {
            "type": "string",
            "description": "Stadt [weiteres]",
            "example": "Köln"
          },
          "postcode1": {
            "type": "string",
            "description": "Postleitzahl [Hauptadresse]",
            "example": "50667"
          },
          "postcode2": {
            "type": "string",
            "description": "Postleitzahl [Rechnungsadresse]",
            "example": "50667"
          },
          "postcode3": {
            "type": "string",
            "description": "Postleitzahl [Lieferadresse]",
            "example": "50667"
          },
          "postcode4": {
            "type": "string",
            "description": "Postleitzahl [Postalisch]",
            "example": "50667"
          },
          "postcode5": {
            "type": "string",
            "description": "Postleitzahl [Privat]",
            "example": "50667"
          },
          "postcode6": {
            "type": "string",
            "description": "Postleitzahl",
            "example": "50667"
          },
          "country1": {
            "type": "string",
            "description": "Land [Hauptadresse]",
            "example": "Deutschland"
          },
          "country2": {
            "type": "string",
            "description": "Land [Rechnungsadresse]",
            "example": "Deutschland"
          },
          "country3": {
            "type": "string",
            "description": "Land [Lieferadresse]",
            "example": "Deutschland"
          },
          "country4": {
            "type": "string",
            "description": "Land [Postalisch]",
            "example": "Deutschland"
          },
          "country5": {
            "type": "string",
            "description": "Land [Privat]",
            "example": "Deutschland"
          },
          "country6": {
            "type": "string",
            "description": "Land [weiteres]",
            "example": "Deutschland"
          },
          "email": {
            "type": "string",
            "description": "E-Mai-Addresse [Geschäftlich]",
            "example": "info@mueller-gmbh.de"
          },
          "email2": {
            "type": "string",
            "description": "E-Mail-Addresse [Geschäftlich 2]",
            "example": "info@mueller-gmbh.de"
          },
          "email3": {
            "type": "string",
            "description": "E-Mail-Addresse[Assistent]",
            "example": "info@mueller-gmbh.de"
          },
          "email4": {
            "type": "string",
            "description": "E-Mail-Addresse[Privat]",
            "example": "info@mueller-gmbh.de"
          },
          "email5": {
            "type": "string",
            "description": "E-Mail-Addresse[Privat 2]",
            "example": "info@mueller-gmbh.de"
          },
          "email6": {
            "type": "string",
            "description": "E-Mail-Addresse[weiteres]",
            "example": "info@mueller-gmbh.de"
          },
          "phone": {
            "type": "string",
            "description": "Telefon [Geschäftlich]",
            "example": "0228 334 8756"
          },
          "phone2": {
            "type": "string",
            "description": "Telefon [Geschäftlich 2]",
            "example": "0228 334 8756"
          },
          "phone3": {
            "type": "string",
            "description": "Telefon [Assistent]",
            "example": "0228 334 8756"
          },
          "phone4": {
            "type": "string",
            "description": "Telefon [Privat]",
            "example": "0228 334 8756"
          },
          "phone5": {
            "type": "string",
            "description": "Telefon [Privat 2]",
            "example": "0228 334 8756"
          },
          "phone6": {
            "type": "string",
            "description": "Telefon [weiteres]",
            "example": "0228 334 8756"
          },
          "mobile": {
            "type": "string",
            "description": "Mobiltelefon [Geschäftlich]",
            "example": "0177 89647923"
          },
          "mobile2": {
            "type": "string",
            "description": "Mobiltelefon  [Geschäftlich 2]",
            "example": "0177 89647923"
          },
          "mobile3": {
            "type": "string",
            "description": "Mobiltelefon  [Assistent]",
            "example": "0177 89647923"
          },
          "mobile4": {
            "type": "string",
            "description": "Mobiltelefon  [Privat]",
            "example": "0177 89647923"
          },
          "mobile5": {
            "type": "string",
            "description": "Mobiltelefon  [Privat 2]",
            "example": "0177 89647923"
          },
          "mobile6": {
            "type": "string",
            "description": "Mobiltelefon  [weiteres]",
            "example": "0177 89647923"
          },
          "fax": {
            "type": "string",
            "description": "Telefax [Geschäftlich]",
            "example": "0228 3344 8759"
          },
          "fax2": {
            "type": "string",
            "description": "Telefax [Geschäftlich 2]",
            "example": "0228 3344 8759"
          },
          "fax3": {
            "type": "string",
            "description": "Telefax [Assistent]",
            "example": "0228 3344 8759"
          },
          "fax4": {
            "type": "string",
            "description": "Telefax [Privat]",
            "example": "0228 3344 8759"
          },
          "fax5": {
            "type": "string",
            "description": "Telefax [Privat 2]",
            "example": "0228 3344 8759"
          },
          "fax6": {
            "type": "string",
            "description": "Telefax [weiteres]",
            "example": "0228 3344 8759"
          },
          "preferredKontaktType": {
            "type": "string",
            "description": "Preferred means of communication (Bevorzugte Kommunikationsart)",
            "example": "E-Mail"
          },
          "preferredInvoiceSendMethod": {
            "type": "string",
            "description": "Means of invoice dispatching (Versandart Abrechnung)",
            "example": "Brief"
          },
          "language": {
            "type": "string",
            "description": "Language (Sprache).",
            "example": "Deutsch (Österreich)",
            "enum": [
              "Arabisch",
              "Arabisch (Vereinigte Arabische Emirate)",
              "Arabisch (Bahrain)",
              "Arabisch (Algerien)",
              "Arabisch (Ägypten)",
              "Arabisch (Irak)",
              "Arabisch (Jordanien)",
              "Arabisch (Kuwait)",
              "Arabisch (Libanon)",
              "Arabisch (Libyen)",
              "Arabisch (Marokko)",
              "Arabisch (Oman)",
              "Arabisch (Katar)",
              "Arabisch (Saudi-Arabien)",
              "Arabisch (Sudan)",
              "Arabisch (Syrien)",
              "Arabisch (Tunesien)",
              "Arabisch (Jemen)",
              "Belorussisch",
              "Belorussisch (Belarus)",
              "Bulgarisch",
              "Bulgarisch (Bulgarien)",
              "Katalanisch",
              "Katalanisch (Spanien)",
              "Tschechisch",
              "Tschechisch (Tschechische Republik)",
              "Dänisch",
              "Dänisch (Dänemark)",
              "Deutsch",
              "Deutsch (Österreich)",
              "Deutsch (Schweiz)",
              "Deutsch (Deutschland)",
              "Deutsch (Luxemburg)",
              "Griechisch",
              "Griechisch (Zypern)",
              "Griechisch (Griechenland)",
              "Englisch",
              "Englisch (Australien)",
              "Englisch (Kanada)",
              "Englisch (Vereinigtes Königreich)",
              "Englisch (Irland)",
              "Englisch (Indien)",
              "Englisch (Malta)",
              "Englisch (Neuseeland)",
              "Englisch (Philippinen)",
              "Englisch (Singapur)",
              "Englisch (Vereinigte Staaten von Amerika)",
              "Englisch (Südafrika)",
              "Spanisch",
              "Spanisch (Argentinien)",
              "Spanisch (Bolivien)",
              "Spanisch (Chile)",
              "Spanisch (Kolumbien)",
              "Spanisch (Costa Rica)",
              "Spanisch (Dominikanische Republik)",
              "Spanisch (Ecuador)",
              "Spanisch (Spanien)",
              "Spanisch (Guatemala)",
              "Spanisch (Honduras)",
              "Spanisch (Mexiko)",
              "Spanisch (Nicaragua)",
              "Spanisch (Panama)",
              "Spanisch (Peru)",
              "Spanisch (Puerto Rico)",
              "Spanisch (Paraguay)",
              "Spanisch (El Salvador)",
              "Spanisch (Vereinigte Staaten von Amerika)",
              "Spanisch (Uruguay)",
              "Spanisch (Venezuela)",
              "Estnisch",
              "Estnisch (Estland)",
              "Finnisch",
              "Finnisch (Finnland)",
              "Französisch",
              "Französisch (Belgien)",
              "Französisch (Kanada)",
              "Französisch (Schweiz)",
              "Französisch (Frankreich)",
              "Französisch (Luxemburg)",
              "Irisch",
              "Irisch (Irland)",
              "Hindi (Indien)",
              "Kroatisch",
              "Kroatisch (Kroatien)",
              "Ungarisch",
              "Ungarisch (Ungarn)",
              "Indonesisch",
              "Indonesisch (Indonesien)",
              "Isländisch",
              "Isländisch (Island)",
              "Italienisch",
              "Italienisch (Schweiz)",
              "Italienisch (Italien)",
              "Hebräisch",
              "Hebräisch (Israel)",
              "Japanisch",
              "Japanisch (Japan)",
              "Japanisch (Japan,JP)",
              "Koreanisch",
              "Koreanisch (Südkorea)",
              "Litauisch",
              "Litauisch (Litauen)",
              "Lettisch",
              "Lettisch (Lettland)",
              "Mazedonisch",
              "Mazedonisch (Mazedonien)",
              "Malay",
              "Malay (Malaysia)",
              "Maltesisch",
              "Maltesisch (Malta)",
              "Niederländisch",
              "Niederländisch (Belgien)",
              "Niederländisch (Niederlande)",
              "Norwegisch",
              "Norwegisch (Norwegen)",
              "Norwegisch (Norwegen,Nynorsk)",
              "Polnisch",
              "Polnisch (Polen)",
              "Portugiesisch",
              "Portugiesisch (Brasilien)",
              "Portugiesisch (Portugal)",
              "Rumänisch",
              "Rumänisch (Rumänien)",
              "Russisch",
              "Russisch (Russland)",
              "Slowakisch",
              "Slowakisch (Slowakei)",
              "Slowenisch",
              "Slowenisch (Slowenien)",
              "Albanisch",
              "Albanisch (Albanien)",
              "Serbisch",
              "Serbisch (Bosnien und Herzegowina)",
              "Serbisch (Serbien und Montenegro)",
              "Schwedisch",
              "Schwedisch (Schweden)",
              "Thai",
              "Thai (Thailand)",
              "Thai (Thailand,TH)",
              "Türkisch",
              "Türkisch (Türkei)",
              "Ukrainisch",
              "Ukrainisch (Ukraine)",
              "Vietnamesisch",
              "Vietnamesisch (Vietnam)",
              "Chinesisch",
              "Chinesisch (China)",
              "Chinesisch (Hongkong)",
              "Chinesisch (Singapur)",
              "Chinesisch (Taiwan)"
            ]
          },
          "position": {
            "type": "string",
            "description": "Position (Stelle). Please check the catalog in the Scopevisio client for currently valid values.",
            "example": "Bereichsleiter",
            "enum": [
              "Abteilungsleiter",
              "Angestellter",
              "Bereichsleiter",
              "Geschäftsführer",
              "Projektleiter",
              "Leiter Entwicklung",
              "Leiter Produktion",
              "Prokurist",
              "Leiter Rechnungswesen",
              "Buchhalter",
              "Finanzbuchhalter",
              "Facharbeiter",
              "Auszubildender",
              "Externer Mitarbeiter",
              "Berater",
              "Externer steuerlicher Berater"
            ]
          },
          "positionReplacement": {
            "type": "string",
            "description": "positionReplacement (Position). Same as position. Please check the catalog in the Scopevisio client for currently valid values.",
            "example": "Bereichsleiter",
            "enum": [
              "Abteilungsleiter",
              "Angestellter",
              "Bereichsleiter",
              "Geschäftsführer",
              "Projektleiter",
              "Leiter Entwicklung",
              "Leiter Produktion",
              "Prokurist",
              "Leiter Rechnungswesen",
              "Buchhalter",
              "Finanzbuchhalter",
              "Facharbeiter",
              "Auszubildender",
              "Externer Mitarbeiter",
              "Berater",
              "Externer steuerlicher Berater"
            ]
          },
          "department": {
            "type": "string",
            "description": "Department (Abteilung). The value is set only if the contact is a personal contact. Please check the catalog in the Scopevisio client for currently valid values",
            "example": "Marketing",
            "enum": [
              "Absatz",
              "Beschaffung",
              "Buchhaltung",
              "Controlling",
              "Einkauf",
              "Entwicklung",
              "Finanzwesen",
              "Geschäftsführung",
              "Geschäftsführungsbüro",
              "Informationstechnologie",
              "Kundenservice",
              "Lager",
              "Logistik",
              "Marketing",
              "Öffentlichkeitsarbeit (PR)",
              "Personal",
              "Planung",
              "Produktion",
              "Projekte",
              "Rechnungswesen",
              "Support",
              "Vertrieb",
              "Vorstand",
              "Vorstandsbüro"
            ]
          },
          "industry": {
            "type": "string",
            "description": "Industry (Branche). Please check your catalog for allowable values.",
            "example": "Grafik, Foto und Papier"
          },
          "organisationType": {
            "type": "string",
            "description": "Legal entity type (Rechtsform). Please check the related catalog for allowable values.",
            "example": "Aktiengesellschaft"
          },
          "tradeRegisterName": {
            "type": "string",
            "description": "Commercial register (Handelsregister)",
            "example": "Amtsgericht Bonn"
          },
          "tradeRegisterNumber": {
            "type": "string",
            "description": "Commercial register number (Handelsregisternummer)",
            "example": "HRB 99999"
          },
          "customerNumber": {
            "type": "string",
            "description": "Kontaktnummer",
            "example": "P-454245"
          },
          "legacyNumber": {
            "type": "string",
            "description": "ID Vorsystem",
            "example": "K34235"
          },
          "tags": {
            "type": "string",
            "description": "Schlagwörter",
            "example": "Schlagwort1"
          },
          "website": {
            "type": "string",
            "description": "Website",
            "example": "www.scopevisio.com"
          },
          "description": {
            "type": "string",
            "description": "Description (Notiz). Use \"\\\\\\n\" to insert new line.",
            "example": "Notiz"
          },
          "vatId": {
            "type": "string",
            "description": "vatId/taxId. If the kontakt has personal account(s) assigned, the vatId will not be updated in the accounts.",
            "example": "DE254222079"
          },
          "currency": {
            "type": "string",
            "description": "currency. If the kontakt has personal account(s) assigned, the currency will not be updated in the accounts.",
            "example": "USD"
          },
          "customFields": {
            "type": "array",
            "description": "Benutzerdefinierte Felder",
            "items": {
              "$ref": "#/components/schemas/CustomField"
            }
          },
          "employers": {
            "type": "array",
            "description": "Employer and visibility in role \"Arbeitnehmer\".If more than one employer of type \"Hauptarbeitgeber\" is given, the last in the list is set in the contact card \"Angaben zur Person\"",
            "items": {
              "$ref": "#/components/schemas/Employer"
            }
          },
          "deliveryTermIncoterm": {
            "type": "string",
            "description": "Incoterms (Sphere Vendor/Rolle Lieferant). The allowable values depend on the system catalog in the Scopevisio client.",
            "example": "Fracht und Versicherung Bezahlt",
            "enum": [
              "Ab Werk",
              "Fracht und Versicherung bezahlt",
              "Frachtfrei",
              "Frei an Bord",
              "Frei Frachtführer",
              "Frei Längsseite Schiff",
              "Geliefert ab Kai (verzollt)",
              "Geliefert ab Schiff",
              "Geliefert benannter Ort",
              "Geliefert Grenze",
              "Geliefert Terminal",
              "Geliefert verzollt",
              "Kosten und Fracht",
              "Kosten",
              "Versicherung und Fracht"
            ]
          },
          "deliveryTermIncotermLocation": {
            "type": "string",
            "description": "Incoterms-Ort (Sphere Vendor/Rolle Lieferant)",
            "example": "Zürich"
          },
          "personalDataInsuranceType": {
            "type": "string",
            "description": "Art der Krankenversicherung (Sphere Employee/Rolle Mitarbeiter). For this field the additional profile \"Personal\" is needed",
            "example": "gesetzlich",
            "enum": [
              "gesetzlich",
              "privat",
              "freiwillig"
            ]
          },
          "personalDataInsurance": {
            "type": "string",
            "description": "Krankenkasse (Sphere Employee/Rolle Mitarbeiter). For this field the additional profile \"Personal\" is required. Please also check the Scopevisio client for currently valid values",
            "example": "EK Techniker Krankenkasse"
          },
          "personalDataInsuranceNumber": {
            "type": "string",
            "description": "KV-Nr. (Sphere Employee/Rolle Mitarbeiter). For this field the additional profile \"Personal\" is required.",
            "example": "96579086"
          },
          "personalDataCareInsurance": {
            "type": "string",
            "description": "Pflegekasse. (Sphere Employee/Rolle Mitarbeiter). For this field the additional profile \"Personal\" is required. Please also check the Scopevisio client for currently valid values",
            "example": "EK Techniker Krankenkasse"
          },
          "personalDataCareInsuranceNumber": {
            "type": "string",
            "description": "PV-Nr. (Sphere Employee/Rolle Mitarbeiter). For this field the additional profile \"Personal\" is required.",
            "example": "4890855"
          },
          "personalDataAnnuityInsurance": {
            "type": "string",
            "description": "Rentenversicherungsnummer (Sphere Employee/Rolle Mitarbeiter). For this field the additional profile \"Personal\" is required.",
            "example": "4890855"
          },
          "ownerUid": {
            "type": "string",
            "description": "ownerUid (Kontaktinhaber). The UID of a Scopevisio user",
            "example": "user_ffffffff-ffff-4351-b1d3-40bbdaa000345"
          },
          "permissionType": {
            "maximum": 2,
            "minimum": 0,
            "type": "integer",
            "description": "permissionType [0 = Öffentlich, 1 = Benutzerdefiniert, 2 = Persönlich]",
            "format": "int32",
            "example": 1,
            "default": 0
          },
          "readPermissionProfiles": {
            "type": "string",
            "description": "comma separated list of profiles for the read permissions, evaluated only if permissionType equals 1.",
            "example": "Faktura - alle Rechte,CRM - alle Rechte"
          },
          "readPermissionLogins": {
            "type": "string",
            "description": "comma separated list of user login emails for the read permissions, evaluated only if permissionType equals 1.",
            "example": "peter.mueller@scopevisio.com,michaela.trimm@scopevisio.com"
          },
          "writePermissionProfiles": {
            "type": "string",
            "description": "comma separated list of profiles for full access, evaluated only if permissionType equals 1.",
            "example": "Firmen und Benutzer - alle Rechte,Finanzen - alle Rechte"
          },
          "writePermissionLogins": {
            "type": "string",
            "description": "comma separated list of user login emails, evaluated only if permissionType equals 1.",
            "example": "stefan.tarn@scopevisio.com"
          }
        }
      },
      "BlogEntryForm": {
        "type": "object",
        "properties": {
          "category": {
            "type": "string",
            "description": "category (Kommentar-Typ/Kommentarart)",
            "enum": [
              "Notiz",
              "Anruf",
              "Besprechung",
              "Vertrag",
              "E-mail"
            ],
            "default": "Notiz"
          },
          "body": {
            "type": "string",
            "description": "body (Kommentar)",
            "example": "Musterkommentar"
          }
        }
      },
      "TeamworkFileForm": {
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "filename": {
            "type": "string",
            "description": "filename. If no filename is given, it is assumed a pdf file is uploaded.",
            "example": "Beleg.pdf"
          },
          "data": {
            "type": "string",
            "description": "file data in Base64",
            "example": "JVBERi0xLjMNCiXi48/TDQoyIDAgb2JqDQo8PA0KL1R5cGUgL0ZvbnREZXNjcmlwdG9yDQovQXNj\"ZW50IDcyMA0KL0NhcEhlaWdodCA2NjANCi9EZXNjZW50IC0yNzANCi9GbGFncyAzMg0KL0ZvbnRC\n\"Qm94IFstMTc3IC0yNjkgMTEyMyA4NjZdDQovRm9udE5hbWUgL0hlbHZldGljYQ0KL0l0YWxpY0Fu\n...\n...\n...\nMDAyNDQ4NyAwMDAwMCBuDQowMDAwMDI0NjQ5IDAwMDAwIG4NCjAwMDAwMjQ4NDMgMDAwMDAgbg0K\ndHJhaWxlcg0KPDwvU2l6ZSAyNC9Sb290IDIxIDAgUi9JRFs8MUNBMEFBOEZEMzg4Mzc3MzhDNUY1\nNkExMDRFMDFFNTM+PDFDQTBBQThGRDM4ODM3NzM4QzVGNTZBMTA0RTAxRTUzPl0vUHJldiAyMzk1\nNT4+DQpzdGFydHhyZWYNCjMyMzM2DQolJUVPRg0K"
          },
          "collection": {
            "type": "string",
            "description": "collection.  The name of the teamwork collection (Sammlung) the file should be added to.",
            "example": "Belege"
          },
          "createCollectionIfNotExist": {
            "type": "boolean",
            "description": "Create the collection, to which the file should be uploaded to, if it doesn't exist. If set to false, the file is uploaded without being added to a collection."
          }
        }
      },
      "AssignMailForm": {
        "required": [
          "mailId"
        ],
        "type": "object",
        "properties": {
          "mailId": {
            "type": "integer",
            "description": "Assigns the mail with the given mailId to the contact with the given contactIdOrLegacyNumber",
            "format": "int64",
            "example": 1008
          }
        }
      },
      "ContactPropertyForm": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Sets the values in column \"Art der Information\". For allowable values see catalog Systemadministration->System -> Auswahllisten Verwalten -> Allgemeine Kontaktdaten -> Art der Information",
            "example": "Informationen zum Kontakt"
          },
          "subtype": {
            "type": "string",
            "description": "Sets the values in column \"Untergruppierung\". For allowable values see catalog Systemadministration->System -> Auswahllisten Verwalten -> Allgemeine Kontaktdaten -> Untergruppierung",
            "example": "Abteilung"
          },
          "description": {
            "type": "string",
            "description": "Description",
            "example": "A1"
          },
          "validFrom": {
            "type": "integer",
            "description": "validFrom",
            "format": "int64",
            "example": 1546210800000
          },
          "validTo": {
            "type": "integer",
            "description": "validTo",
            "format": "int64",
            "example": 1546210800000
          },
          "employeeDomain": {
            "type": "boolean",
            "description": "employeeDomain"
          },
          "spheresDisplay": {
            "type": "string",
            "description": "spheres. Not set means visible in all spheres. ",
            "example": "Kunde, Lieferant",
            "enum": [
              "Kontakt",
              "Lead",
              "Interessent",
              "Kunde",
              "Lieferant",
              "Debitor",
              "Kreditor",
              "Mitarbeiter",
              "Partner",
              "Arbeitnehmer"
            ]
          },
          "employeeFilterDisplay": {
            "type": "string",
            "description": "In which employer contact should this information be visible. Not set equals \"Bei allen AG\"",
            "enum": [
              "Bei allen AG",
              "Bei keinem AG",
              "comma separated list of the employer contact names"
            ]
          },
          "permissionType": {
            "maximum": 2,
            "minimum": 0,
            "type": "integer",
            "description": "permissionType [0 = Öffentlich, 1 = Benutzerdefiniert, 2 = Persönlich]",
            "format": "int32",
            "example": 1,
            "default": 0
          },
          "readPermissionProfiles": {
            "type": "string",
            "description": "comma separated list of profiles for the read permissions, evaluated only if permissionType equals 1.",
            "example": "Faktura - alle Rechte,CRM - alle Rechte"
          },
          "readPermissionLogins": {
            "type": "string",
            "description": "comma separated list of user login emails for the read permissions, evaluated only if permissionType equals 1.",
            "example": "peter.mueller@scopevisio.com,michaela.trimm@scopevisio.com"
          },
          "writePermissionProfiles": {
            "type": "string",
            "description": "comma separated list of profiles for full access, evaluated only if permissionType equals 1.",
            "example": "Firmen und Benutzer - alle Rechte,Finanzen - alle Rechte"
          },
          "writePermissionLogins": {
            "type": "string",
            "description": "comma separated list of user login emails, evaluated only if permissionType equals 1.",
            "example": "stefan.tarn@scopevisio.com"
          }
        }
      },
      "PaymentTermForm": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "name (Bezeichnung). The name must be unique.",
            "example": "5 Tage 3% Skonto, 10 Tage 1% Skonto, 15 Tage netto"
          },
          "cashDiscountDays1": {
            "type": "integer",
            "description": "cashDiscountDays1 (Skontofrist 1)",
            "format": "int64",
            "example": 5
          },
          "percentage1": {
            "type": "number",
            "description": "percentage1 (Skontosatz 1)",
            "example": 3
          },
          "cashDiscountDays2": {
            "type": "integer",
            "description": "cashDiscountDays2 (Skontofrist 2)",
            "format": "int64",
            "example": 10
          },
          "percentage2": {
            "type": "number",
            "description": "percentage2 (Skontosatz 2)",
            "example": 1
          },
          "netTimeLimit": {
            "type": "integer",
            "description": "netTimeLimit (Fälligkeitsfrist)",
            "format": "int64",
            "example": 15
          },
          "description": {
            "type": "string",
            "description": "description (Beschreibung)",
            "example": "5 Tage 3% Skonto, 10 Tage 1% Skonto, 15 Tage netto"
          }
        }
      },
      "PersonalAccountForm": {
        "type": "object",
        "properties": {
          "contactId": {
            "type": "integer",
            "description": "contactId (Kontakt Id), the id(Master Id) of the contact, to create a personal account for.\nEither valid contactId or customerNumber or email must be provided to create a personal account.",
            "format": "int64",
            "example": 18678
          },
          "customerNumber": {
            "type": "string",
            "description": "customerNumber, the customerNumber(Kontaktnummer) of the contact, to create a personal account for.\nEither valid contactId or customerNumber or email must be provided to create a personal account.",
            "example": "G-2021-3"
          },
          "email": {
            "type": "string",
            "description": "email, the email(one of the existing seven possibilities E-Mail-Adresse[geschäftlich], E-Mail-Adresse[geschäftlich 2]. etc.) of the contact, to create a personal account for.\nEither valid contactId or customerNumber or email must be provided to create a personal account.",
            "example": "max.mustermann@scopevisio.com"
          },
          "personalAccountNumber": {
            "type": "string",
            "description": "personalAccountNumber (Kontonummer), the wished number of the created personal account. If no numberRangeNumber provided, then the number range fitting for the personalAccountNumber is set.",
            "example": "18678"
          },
          "sumAccountNumber": {
            "type": "string",
            "description": "sumAccountNumber (Sammelkonto Nummer), to be used in the created personal account. If no sumRangeNumber provided, then a default number will be set.",
            "example": "1400"
          },
          "numberRangeNumber": {
            "type": "integer",
            "description": "numberRangeNumber (Kreditoren-/Debitoren-Nummernkreis), the number of the number range for the personal account. If personalAccountNumber is not provided, the first available number for the provided numberRangeNumber is generated for the personal account. \n If numberRangeNumber not provided,  the first found number range will be used. We recommend setting \"numberRangeNumber\" if more than one number ranges for this account type(debitor or kreditor) exist otherwise errors may occur if the number range is full. \nThe default number ranges in the Scopevisio desktop applications are \"2\" for debitors and \"3\" for creditors",
            "format": "int64",
            "example": 2
          },
          "group": {
            "type": "string",
            "description": "group (Kundengruppe/Kreditorengruppe), if the given group does not exist, it is created and assigned to the personal account.",
            "example": "Inland Zulieferer"
          },
          "vatCode": {
            "type": "string",
            "description": "vatCode(Steuerkennzeichen) for the personal account. Please see vat matrix (Steuermatrix) in the Scopevisio client if you wish other than the standard allowable values.",
            "example": "INL",
            "enum": [
              "INL",
              "Drittland",
              "EUmID",
              "EUoID"
            ]
          },
          "paymentType": {
            "type": "string",
            "description": "paymentType(Zahlungsart) for the personal account.",
            "example": "Bar",
            "enum": [
              "Vorkasse",
              "Überweisung",
              "PayPal",
              "Nachnahme",
              "Einzugsermächtigung",
              "Rechnung,EC-Karte",
              "Abbuchungsgenehmigung",
              "Bar",
              "Kreditkarte"
            ]
          },
          "vatNumber": {
            "type": "string",
            "description": "vatNumber(Steuernummer)",
            "example": "181/815/08155"
          },
          "vatId": {
            "type": "string",
            "description": "vatId (Umsatzsteuer-ID)",
            "example": "DE136695976"
          },
          "currency": {
            "type": "string",
            "description": "currency(Währung), the ISO 4217 alphabetic currency code",
            "example": "USD"
          },
          "language": {
            "type": "string",
            "description": "language(Sprache), please check the Scopeviso client application for allowable values",
            "example": "Deutsch (Luxemburg)"
          },
          "paymentTermId": {
            "type": "integer",
            "description": "paymentTermId (Zahlungsbedingung id), the id of the wished payment term for the personal account. If an existing paymentTerm should be assigned to the personal account, then use \"paymentTermId\" . If a new paymentTerm should be created, use the parameter \"paymentTermForm\". If both \"paymentTermId\" and \"paymentTermForm\" are provided, a payment term with the given \"paymentTermId\" is searched. If not found,the \"paymentTermForm\" is used. If a payment term with the given name is found, then it is assigned to the personal account, a new payment term is created otherwise.",
            "format": "int64",
            "example": 18678
          },
          "paymentTermForm": {
            "$ref": "#/components/schemas/PaymentTermForm"
          }
        }
      },
      "DimensionForm": {
        "type": "object",
        "properties": {
          "dimensionId": {
            "type": "string",
            "description": "The id of the dimension. \"dimension_1\" for Kostenstellen, \"dimension_2\" for Kostenträger, \"dimension_3\" for Projekte, etc.",
            "example": "dimension_3"
          },
          "dimensionAccountNumber": {
            "type": "string",
            "description": "The account number for this dimension.",
            "example": "2343"
          }
        }
      },
      "ImpersonalAccountRow": {
        "required": [
          "name",
          "number",
          "type"
        ],
        "type": "object",
        "properties": {
          "number": {
            "type": "string",
            "description": "impersonal account number",
            "example": "8405"
          },
          "name": {
            "type": "string",
            "description": "impersonal account name",
            "example": "Erlöse"
          },
          "type": {
            "type": "string",
            "description": "The account type (Kontoart).",
            "example": "Erlöse",
            "enum": [
              "Aktiv",
              "Passiv",
              "Kosten",
              "Erlöse",
              "Aktiv/Passiv",
              "Sonstige Konten"
            ]
          },
          "category": {
            "type": "string",
            "description": "The account category (Kontokennzeichen).",
            "example": "Andere Konten",
            "enum": [
              "Andere Konten",
              "Forderungen aus Lieferungen und Leistungen",
              "Umsatzsteuer",
              "Verbindlichkeiten aus Lieferungen und Leistungen",
              "Vorsteuer"
            ]
          },
          "vatCode": {
            "type": "string",
            "description": "vatCode (Steuerkennzeichen), the allowable values are the standard values for SKR03, see vat matrix in Scopevisio client if you have different settings in your chart of accounts.",
            "example": "INL",
            "enum": [
              "INL",
              "EUmID",
              "EUoID",
              "Drittland"
            ]
          },
          "vatKey": {
            "type": "string",
            "description": "vatKey (Steuerschlüssel), the allowable values are the standard values for SKR03, see vat matrix in Scopevisio client if you have different settings in your chart of accounts.",
            "example": "U19",
            "enum": [
              "B19",
              "B7",
              "BoV19",
              "E19",
              "E7",
              "EoV7",
              "L19",
              "LoV19",
              "LoV7",
              "SL19",
              "SLoV19",
              "U19",
              "U7",
              "V19",
              "V7"
            ]
          },
          "fixVatKey": {
            "type": "boolean",
            "description": "is the vat key fixed or can another vat key be used when post to this account"
          },
          "deactivated": {
            "type": "boolean",
            "description": "fixVatKey (fester Steuerschlüssel) it is not possible to post to this account"
          },
          "directPosting": {
            "type": "boolean",
            "description": "directPosting(direkt buchbar) is direct posting possible",
            "example": true
          },
          "discountAccount": {
            "type": "string",
            "description": "discount account (Skontokonto)",
            "example": "3730"
          },
          "isFinanceAccount": {
            "type": "boolean",
            "description": "is finance account(Finanzkonto)"
          },
          "subjectToClearing": {
            "type": "boolean",
            "description": "subjectToClearing(Abstimmbar) is it possible to use the account for clearing",
            "example": true
          },
          "dimensions": {
            "type": "array",
            "description": "Kostenstelle, Kostenrechnung, Projekte, etc.",
            "items": {
              "$ref": "#/components/schemas/DimensionForm"
            }
          }
        }
      },
      "ImpersonalAccountsForm": {
        "type": "object",
        "properties": {
          "rows": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ImpersonalAccountRow"
            }
          }
        }
      },
      "CreditForm": {
        "required": [
          "customerContactId",
          "documentDate"
        ],
        "type": "object",
        "properties": {
          "projectId": {
            "type": "integer",
            "description": "projectId (Projekt). Sets also projectNumber, projectName. Please look up in your sales (Vertriebs-) and/or outgoing invoice settings (Abrechnungseinstellungen) to check if projectId is mandatory.",
            "format": "int64",
            "example": 9809
          },
          "customerContactId": {
            "type": "integer",
            "description": "customerContactId (Lead/Interessent/Kunde). Sets also customerPersonalAccountId, customerPersonalAccountNumber, customerPersonalAccountName, customerPersonalAccountExternalNumber, customerName, customerNameExtra, customerNumber, customerContactName, customerContactCustomerNumber. Must be set if project is not mandatory. Ignored otherwise.",
            "format": "int64",
            "example": 10979
          },
          "customerContactName": {
            "type": "string",
            "description": "customerContactName - the name of the contact with the given customerContactId.",
            "readOnly": true,
            "example": "Muster AG"
          },
          "customerContactCustomerNumber": {
            "type": "string",
            "description": "The customer number of the contact with the given customerContactId. Where to find the value in the Scopevisio client: open contact with master id == customerContactId, go to sphere (Rolle) Allgemein. The field contact number (Kontaktnummer) is the customerContactCustomerNumber.",
            "readOnly": true,
            "example": "G-2018-1"
          },
          "customerPersonalAccountId": {
            "type": "integer",
            "description": "The master id of personal account associated with the contact with the given customerContactId.",
            "format": "int64",
            "readOnly": true,
            "example": 97680
          },
          "customerPersonalAccountNumber": {
            "type": "string",
            "description": "The number of the personal account associated with the contact with the given customerContactId. Where to find the value in the Scopevisio client: open contact with master id == customerContactId, go to sphere (Rolle) Debitor. Field account number (Kontonummer) is the customerPersonalAccountNumber. This field also corresponds to field \"debitorNumber\" from endpoint  /contact/{customerContactId} and field  \"number\" from /debitoraccounts.",
            "readOnly": true,
            "example": "10008"
          },
          "customerPersonalAccountName": {
            "type": "string",
            "description": "The name of the personal account associated with the contact with the given customerContactId. Where to find the value in the Scopevisio client: open contact with master id == customerContactId, go to sphere (Rolle) Debitor. Field account name (Kontoname) is the customerPersonalAccountName. This field also corresponds to field \"name\" from endpoint /debitoraccounts.",
            "readOnly": true,
            "example": "Muster AG"
          },
          "customerPersonalAccountExternalNumber": {
            "type": "string",
            "description": "The customer number of the personal account with the given customerPersonalAccountNumber. Where to find the value in the Scopevisio client: open contact with master id == customerContactId, go to sphere (Rolle) Debitor.  Field customer number (Kundennummer) is the customerPersonalAccountExternalNumber.",
            "readOnly": true,
            "example": "D10008"
          },
          "customerName": {
            "type": "string",
            "description": "This field is for internal use only. Please use field customerContactName.",
            "readOnly": true
          },
          "customerNumber": {
            "type": "string",
            "description": "This field is for internal use only. Please use fields customerContactCustomerNumber or customerPersonalAccountExternalNumber.",
            "readOnly": true
          },
          "customerNameExtra": {
            "type": "string",
            "description": "This field is for internal use only. Please use fields customerContactCustomerNumber or customerPersonalAccountName.",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "description": "name (Bezeichnung)",
            "example": "RE-2018-1, KP für Muster AG vom 27.11.2018"
          },
          "text": {
            "type": "string",
            "description": "text (Beschreibung)",
            "example": "Folgeauftrag"
          },
          "customerContactPerson": {
            "type": "integer",
            "description": "customerContactPerson (Ansprechpartner). Sets also customerContactPersonName. The contact must be an employee of the project contact (contactId).",
            "format": "int64",
            "example": 9809
          },
          "documentDate": {
            "type": "integer",
            "description": "documentDate (PZ-/Angebots-/Auftrags-/Rechnungs-/GS-/LS-Datum). If not given, it is set to the current date. Sets also documentDateMonth.",
            "format": "int64",
            "example": 346234
          },
          "documentNumber": {
            "type": "string",
            "description": "documentNumber (Potenzial-/Angebots-/Auftrags-/Rechnungs-/Gutschrifts-/Lieferscheinnummer).The field is mandatory. If not provided a document number is generated.",
            "example": "Rg-18-090"
          },
          "ourContactPerson": {
            "type": "string",
            "description": "ourContactPerson (Potenzial-/Angebots- Auftrags-/Rechnungs-/Gutschrifts-/Lieferscheinbearbeiter). The UID of a Scopevisio user. The user must have a user contact (Aus Benutzerkontakt) for the current organisation. Setting this field also sets ourContactPersonName.",
            "example": "user_ffffffff-ffff-4351-b1d3-40bbdaa000345"
          },
          "deliveryType": {
            "type": "string",
            "description": "deliveryType (Lieferart).",
            "example": "UPS"
          },
          "deliveryCosts": {
            "type": "number",
            "description": "deliveryCosts (Lieferkosten).",
            "example": 3.95
          },
          "cashOnDelivery": {
            "type": "number",
            "description": "cashOnDelivery (Nachnamegebühr).",
            "example": 5.45
          },
          "textTitle": {
            "type": "string",
            "description": "textTitle (Titel).",
            "example": "Angebot"
          },
          "textSubTitle": {
            "type": "string",
            "description": "textSubTitle (Untertitel).",
            "example": "$Belegnummer"
          },
          "textIntro": {
            "type": "string",
            "description": "textIntro (Einleitungstext). Use \"\\n\" to insert new line.",
            "example": "Sehr geehrte Damen und Herren,\\nwir erlauben uns, Ihnen wie folgt in Rechnung zu stellen:"
          },
          "textExtro": {
            "type": "string",
            "description": "textExtro (Schlusstext). Use \"\\n\" to insert new line.",
            "example": "Wir freuen uns, wenn Ihnen das Angebot zusagt und verbleiben mit freundlichen Grüßen"
          },
          "selectedAddress": {
            "type": "integer",
            "description": "selectedAddress (Adresse [Haupt-/Rechnungs-/Liefer-/freie Adresse]). 0 = Hauptadresse, 1 = Rechnungsadresse, 2 = freie Adresse, 3 = Lieferadresse",
            "format": "int64",
            "example": 1
          },
          "otherAddress": {
            "type": "string",
            "description": "otherAddress (freie Adresse). Use \"\\n\" to insert new line.",
            "example": "Muster AG \\n Musterstraße 5 \\n45345 Musterstadt"
          },
          "gross": {
            "type": "boolean",
            "description": "gross (Preisangabe - Netto/Brutto)"
          },
          "permissionType": {
            "type": "integer",
            "description": "0 = Öffentlich, 1 = Benutzerdefiniert, 2 = Persönlich",
            "format": "int64",
            "example": 1
          },
          "readPermissionProfiles": {
            "type": "string",
            "description": "comma separated list of profiles for the read permissions, evaluated only if permissionType equals 1.",
            "example": "Faktura - alle Rechte,CRM - Alle Rechte"
          },
          "readPermissionLogins": {
            "type": "string",
            "description": "comma separated list of user login emails for the read permissions, evaluated only if permissionType equals 1.",
            "example": "peter.mueller@scopevisio.com,michaela.trimm@scopevisio.com"
          },
          "writePermissionProfiles": {
            "type": "string",
            "description": "comma separated list of profiles for full access, evaluated only if permissionType equals 1.",
            "example": "Firmen und Benutzer - alle Rechte,Finanzen - alle Rechte"
          },
          "writePermissionLogins": {
            "type": "string",
            "description": "comma separated list of user login emails, evaluated only if permissionType equals 1.",
            "example": "stefan.tarn@scopevisio.com"
          },
          "customFields": {
            "type": "array",
            "description": "Benutzerdefinierte Felder",
            "items": {
              "$ref": "#/components/schemas/CustomField"
            }
          },
          "positionsForm": {
            "$ref": "#/components/schemas/OutgoingInvoicePositionsForm"
          },
          "orderNumber": {
            "type": "string",
            "description": "orderNumber (Bestellnummer)",
            "example": "8698"
          },
          "zoneNumber": {
            "type": "string",
            "description": "zoneNumber (Rechnungskreis). Please check your zone settings in the Scopevisio client application if the field is mandaotry.",
            "example": "3"
          },
          "stateName": {
            "type": "string",
            "description": "stateName (Status der Gutschrift). Sets also state.",
            "example": "bezahlt",
            "enum": [
              "erstellt",
              "nicht bezahlt",
              "bezahlt",
              "storniert"
            ]
          },
          "postingDate": {
            "type": "integer",
            "description": "postingDate (Buchungsdatum). ",
            "format": "int64",
            "example": 1548925048000
          },
          "documentText": {
            "type": "string",
            "description": "documentText (Belegtext).",
            "example": "Gutschrift GS-2019-2"
          },
          "locale": {
            "type": "string",
            "description": "locale (Sprache)",
            "example": "Deutsch"
          }
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/OutgoingInvoiceBaseForm"
          }
        ]
      },
      "OutgoingInvoiceBaseForm": {
        "required": [
          "customerContactId",
          "documentDate"
        ],
        "type": "object",
        "properties": {
          "projectId": {
            "type": "integer",
            "description": "projectId (Projekt). Sets also projectNumber, projectName. Please look up in your sales (Vertriebs-) and/or outgoing invoice settings (Abrechnungseinstellungen) to check if projectId is mandatory.",
            "format": "int64",
            "example": 9809
          },
          "customerContactId": {
            "type": "integer",
            "description": "customerContactId (Lead/Interessent/Kunde). Sets also customerPersonalAccountId, customerPersonalAccountNumber, customerPersonalAccountName, customerPersonalAccountExternalNumber, customerName, customerNameExtra, customerNumber, customerContactName, customerContactCustomerNumber. Must be set if project is not mandatory. Ignored otherwise.",
            "format": "int64",
            "example": 10979
          },
          "customerContactName": {
            "type": "string",
            "description": "customerContactName - the name of the contact with the given customerContactId.",
            "readOnly": true,
            "example": "Muster AG"
          },
          "customerContactCustomerNumber": {
            "type": "string",
            "description": "The customer number of the contact with the given customerContactId. Where to find the value in the Scopevisio client: open contact with master id == customerContactId, go to sphere (Rolle) Allgemein. The field contact number (Kontaktnummer) is the customerContactCustomerNumber.",
            "readOnly": true,
            "example": "G-2018-1"
          },
          "customerPersonalAccountId": {
            "type": "integer",
            "description": "The master id of personal account associated with the contact with the given customerContactId.",
            "format": "int64",
            "readOnly": true,
            "example": 97680
          },
          "customerPersonalAccountNumber": {
            "type": "string",
            "description": "The number of the personal account associated with the contact with the given customerContactId. Where to find the value in the Scopevisio client: open contact with master id == customerContactId, go to sphere (Rolle) Debitor. Field account number (Kontonummer) is the customerPersonalAccountNumber. This field also corresponds to field \"debitorNumber\" from endpoint  /contact/{customerContactId} and field  \"number\" from /debitoraccounts.",
            "readOnly": true,
            "example": "10008"
          },
          "customerPersonalAccountName": {
            "type": "string",
            "description": "The name of the personal account associated with the contact with the given customerContactId. Where to find the value in the Scopevisio client: open contact with master id == customerContactId, go to sphere (Rolle) Debitor. Field account name (Kontoname) is the customerPersonalAccountName. This field also corresponds to field \"name\" from endpoint /debitoraccounts.",
            "readOnly": true,
            "example": "Muster AG"
          },
          "customerPersonalAccountExternalNumber": {
            "type": "string",
            "description": "The customer number of the personal account with the given customerPersonalAccountNumber. Where to find the value in the Scopevisio client: open contact with master id == customerContactId, go to sphere (Rolle) Debitor.  Field customer number (Kundennummer) is the customerPersonalAccountExternalNumber.",
            "readOnly": true,
            "example": "D10008"
          },
          "customerName": {
            "type": "string",
            "description": "This field is for internal use only. Please use field customerContactName.",
            "readOnly": true
          },
          "customerNumber": {
            "type": "string",
            "description": "This field is for internal use only. Please use fields customerContactCustomerNumber or customerPersonalAccountExternalNumber.",
            "readOnly": true
          },
          "customerNameExtra": {
            "type": "string",
            "description": "This field is for internal use only. Please use fields customerContactCustomerNumber or customerPersonalAccountName.",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "description": "name (Bezeichnung)",
            "example": "RE-2018-1, KP für Muster AG vom 27.11.2018"
          },
          "text": {
            "type": "string",
            "description": "text (Beschreibung)",
            "example": "Folgeauftrag"
          },
          "customerContactPerson": {
            "type": "integer",
            "description": "customerContactPerson (Ansprechpartner). Sets also customerContactPersonName. The contact must be an employee of the project contact (contactId).",
            "format": "int64",
            "example": 9809
          },
          "documentDate": {
            "type": "integer",
            "description": "documentDate (PZ-/Angebots-/Auftrags-/Rechnungs-/GS-/LS-Datum). If not given, it is set to the current date. Sets also documentDateMonth.",
            "format": "int64",
            "example": 346234
          },
          "documentNumber": {
            "type": "string",
            "description": "documentNumber (Potenzial-/Angebots-/Auftrags-/Rechnungs-/Gutschrifts-/Lieferscheinnummer).The field is mandatory. If not provided a document number is generated.",
            "example": "Rg-18-090"
          },
          "ourContactPerson": {
            "type": "string",
            "description": "ourContactPerson (Potenzial-/Angebots- Auftrags-/Rechnungs-/Gutschrifts-/Lieferscheinbearbeiter). The UID of a Scopevisio user. The user must have a user contact (Aus Benutzerkontakt) for the current organisation. Setting this field also sets ourContactPersonName.",
            "example": "user_ffffffff-ffff-4351-b1d3-40bbdaa000345"
          },
          "deliveryType": {
            "type": "string",
            "description": "deliveryType (Lieferart).",
            "example": "UPS"
          },
          "deliveryCosts": {
            "type": "number",
            "description": "deliveryCosts (Lieferkosten).",
            "example": 3.95
          },
          "cashOnDelivery": {
            "type": "number",
            "description": "cashOnDelivery (Nachnamegebühr).",
            "example": 5.45
          },
          "textTitle": {
            "type": "string",
            "description": "textTitle (Titel).",
            "example": "Angebot"
          },
          "textSubTitle": {
            "type": "string",
            "description": "textSubTitle (Untertitel).",
            "example": "$Belegnummer"
          },
          "textIntro": {
            "type": "string",
            "description": "textIntro (Einleitungstext). Use \"\\n\" to insert new line.",
            "example": "Sehr geehrte Damen und Herren,\\nwir erlauben uns, Ihnen wie folgt in Rechnung zu stellen:"
          },
          "textExtro": {
            "type": "string",
            "description": "textExtro (Schlusstext). Use \"\\n\" to insert new line.",
            "example": "Wir freuen uns, wenn Ihnen das Angebot zusagt und verbleiben mit freundlichen Grüßen"
          },
          "selectedAddress": {
            "type": "integer",
            "description": "selectedAddress (Adresse [Haupt-/Rechnungs-/Liefer-/freie Adresse]). 0 = Hauptadresse, 1 = Rechnungsadresse, 2 = freie Adresse, 3 = Lieferadresse",
            "format": "int64",
            "example": 1
          },
          "otherAddress": {
            "type": "string",
            "description": "otherAddress (freie Adresse). Use \"\\n\" to insert new line.",
            "example": "Muster AG \\n Musterstraße 5 \\n45345 Musterstadt"
          },
          "gross": {
            "type": "boolean",
            "description": "gross (Preisangabe - Netto/Brutto)"
          },
          "permissionType": {
            "type": "integer",
            "description": "0 = Öffentlich, 1 = Benutzerdefiniert, 2 = Persönlich",
            "format": "int64",
            "example": 1
          },
          "readPermissionProfiles": {
            "type": "string",
            "description": "comma separated list of profiles for the read permissions, evaluated only if permissionType equals 1.",
            "example": "Faktura - alle Rechte,CRM - Alle Rechte"
          },
          "readPermissionLogins": {
            "type": "string",
            "description": "comma separated list of user login emails for the read permissions, evaluated only if permissionType equals 1.",
            "example": "peter.mueller@scopevisio.com,michaela.trimm@scopevisio.com"
          },
          "writePermissionProfiles": {
            "type": "string",
            "description": "comma separated list of profiles for full access, evaluated only if permissionType equals 1.",
            "example": "Firmen und Benutzer - alle Rechte,Finanzen - alle Rechte"
          },
          "writePermissionLogins": {
            "type": "string",
            "description": "comma separated list of user login emails, evaluated only if permissionType equals 1.",
            "example": "stefan.tarn@scopevisio.com"
          },
          "customFields": {
            "type": "array",
            "description": "Benutzerdefinierte Felder",
            "items": {
              "$ref": "#/components/schemas/CustomField"
            }
          },
          "positionsForm": {
            "$ref": "#/components/schemas/OutgoingInvoicePositionsForm"
          }
        }
      },
      "OutgoingInvoicePositionForm": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "typeDisplay": {
            "type": "string",
            "description": "typeDisplay (Typ). Also sets type (Typ-Id). If invalid value provided or not provided at all, the typeDisplay is set to \"Produkt\".",
            "example": "Produkt",
            "enum": [
              "Produkt",
              "Zwischensumme",
              "Überschrift",
              "Freitext"
            ]
          },
          "number": {
            "type": "string",
            "description": "number (Produktnummer)",
            "example": "1"
          },
          "name": {
            "type": "string",
            "description": "name (Bezeichnung). Mandatory for positionsForm of types \"Überschrift\" and \"Freitext\"",
            "example": "Broschüre"
          },
          "description": {
            "type": "string",
            "description": "description (Beschreibung)",
            "example": "Neue Produkte"
          },
          "quantity": {
            "type": "number",
            "description": "quantity (Menge)",
            "example": 2
          },
          "unit": {
            "type": "string",
            "description": "unit (Einheit)",
            "example": "Paket"
          },
          "singleAmount": {
            "type": "number",
            "description": " singleAmount (Eizelpreis). If the invoice is nett (Netto) this will be the net amount, if the invoice is gross, this will be the gross amount for the position. After calculation the following fields are set: singleAmount(Einzelpreis (Netto)), singleAmountGross(Einzelpreis (Brutto)), amount(Gesamtpreis(Netto)), amountGross(Gesamtpreis (Brutto))",
            "example": 11.6
          },
          "account": {
            "type": "string",
            "description": "account (Konto)",
            "example": "8400"
          },
          "vatKey": {
            "type": "string",
            "description": "vatKey(Steuerschlüssel)",
            "example": "U16"
          },
          "discount": {
            "type": "number",
            "description": "discount (Rabatt (%))",
            "example": 10
          },
          "freeText1": {
            "type": "string",
            "description": "freeText1 (Freitext 1)"
          },
          "freeText2": {
            "type": "string",
            "description": "freeText2 (Freitext 2)"
          },
          "singleCostAmount": {
            "type": "number",
            "description": "singeCostAmount (Einkaufs-Einzelpreis(netto))",
            "example": 10
          },
          "valutaDate": {
            "type": "integer",
            "description": "valutaDate (Umsatzzeitpunkt)",
            "format": "int64",
            "example": 1599729044000
          },
          "dimension_1": {
            "type": "string",
            "description": "dimension_1 (Kostenstellen)",
            "example": "3"
          },
          "dimension_2": {
            "type": "string",
            "description": "dimension_2 (Kostenträger)"
          },
          "dimension_3": {
            "type": "string",
            "description": "dimension_3 (Projekte)"
          },
          "dimension_4": {
            "type": "string",
            "description": "dimension_4"
          },
          "dimension_5": {
            "type": "string",
            "description": "dimension_5"
          },
          "dimension_6": {
            "type": "string",
            "description": "dimension_6"
          },
          "dimension_7": {
            "type": "string",
            "description": "dimension_7"
          },
          "dimension_8": {
            "type": "string",
            "description": "dimension_8"
          },
          "dimension_9": {
            "type": "string",
            "description": "dimension_9"
          },
          "dimension_10": {
            "type": "string",
            "description": "dimension_10"
          },
          "asIfSold": {
            "type": "boolean",
            "description": "asIfSold (As-if-sold) Only used in opportunity and offer"
          }
        },
        "description": "positionsForm. Positions for outgoing invoice"
      },
      "OutgoingInvoicePositionsForm": {
        "required": [
          "positions"
        ],
        "type": "object",
        "properties": {
          "copyProductsToPositions": {
            "type": "boolean",
            "description": "Set to true if you want to use the existing products to create the positions. The product values are used only if the user has not provided values himself. E.g. if the singleAmount has been provided in the request body, the singleAmount from product is not used."
          },
          "positions": {
            "type": "array",
            "description": "positionsForm. Positions for outgoing invoice",
            "items": {
              "$ref": "#/components/schemas/OutgoingInvoicePositionForm"
            }
          }
        },
        "description": "Positions form. Mandatory if creating new outgoing invoice documents."
      },
      "OutgoingInvoiceWithPaymentTermForm": {
        "required": [
          "customerContactId",
          "documentDate"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/OutgoingInvoiceBaseForm"
          },
          {
            "type": "object",
            "properties": {
              "deliveryDate": {
                "type": "integer",
                "description": "deliveryDate (Leistungsdatum). The deliveryDate as epoch timestamp in milliseconds.",
                "format": "int64",
                "example": 1548323982000
              },
              "deliveryDateTo": {
                "type": "integer",
                "description": "deliveryDateTo (Leistungsdatum-bis). The deliveryDateTo as epoch timestamp in milliseconds.",
                "format": "int64",
                "example": 1548410382000
              },
              "isEndDiscountAbsolute": {
                "type": "boolean",
                "description": "isEndDiscountAbsolute (Schlussrabatt), true = absolute, false = percent",
                "example": true
              },
              "endDiscount": {
                "type": "number",
                "description": "endDiscount(Schlussrabatt), if isEndDiscountAbsolute is set to true, then endDiscount should be an amount, if isEndDiscountAbsolute is set to false then a percentage is needed.",
                "example": 5
              },
              "paymentTypeName": {
                "type": "string",
                "description": "paymentTypeName (Zahlungsart). If not provided for new invoice, the payment type from the personal account (connected to the customerContactId) is used. Also sets also paymentType.",
                "enum": [
                  "Vorkasse",
                  "Überweisung",
                  "PayPal",
                  "Nachname",
                  "Einzugsermächtigung",
                  "Rechnung",
                  "EC-Karte",
                  "Abbuchungsgenehmigung",
                  "Bar",
                  "Kreditkarte"
                ]
              },
              "isPaid": {
                "type": "boolean",
                "description": "isPaid (Auf exportiertem Beleg als Bezahlt ausweisen)"
              },
              "discountDate1": {
                "type": "integer",
                "description": "discountDate1 (Skontodatum 1). The discountDate1 as epoch timestamp in milliseconds. If it is set either discountPercent1 or discountAmount1 must be set. If one of the payment term properties is provided (discountDate1, discountDate2, dueDate, discountPercent1, discountPercent2, discountAmount1, discountAmount2) when creating an invoice, then the form is used. Otherwise the payment term from the personal account (connected to the customerContactId) is used.",
                "format": "int64",
                "example": 1546592408000
              },
              "discountDate2": {
                "type": "integer",
                "description": "discountDate2 (Skontodatum 2). The discountDate2 as epoch timestamp in milliseconds. It must be greater than discountDate1. If it is set either discountPercent2 or discountAmount2 must be set.",
                "format": "int64",
                "example": 1548752248000
              },
              "dueDate": {
                "type": "integer",
                "description": "dueDate (Fälligkeitsdatum). The dueDate as epoch timestamp in milliseconds. It must be greater than discountDate2.",
                "format": "int64",
                "example": 1548925048000
              },
              "discountPercent1": {
                "type": "number",
                "description": "discountPercent1 (Skontosatz1). Either discount percent(s) or discount amount(s) are allowed. Setting both is not possible. If set discountDate1 must be set too.",
                "example": 10
              },
              "discountPercent2": {
                "type": "number",
                "description": "discountPercent2 (Skontosatz2). Either discount percent(s) or discount amount(s) are allowed. Setting both is not possible. If set discountDate2 must be set too.",
                "example": 5
              },
              "explicitDiscount": {
                "type": "boolean",
                "description": "explicitDiscount (Skontobeträge manuell eingeben). If set discountAmount(s) must be provided"
              },
              "discountAmount1": {
                "type": "number",
                "description": "discountAmount1 (Skontobetrag1). Only evaluated if explicitDiscount is true. If set discountDate1 must be set too.",
                "example": 15
              },
              "discountAmount2": {
                "type": "number",
                "description": "discountAmount2 (Skontobetrag2). Only evaluated if explicitDiscount is true. If set discountDate2 must be set too.",
                "example": 5
              }
            }
          }
        ],
        "oneOf": [
          {
            "$ref": "#/components/schemas/OutgoingInvoiceBaseForm"
          }
        ]
      },
      "DatevExportSettingsForm": {
        "type": "object",
        "properties": {
          "fromPostingDateTs": {
            "type": "integer",
            "description": "fromPostingDateTs. Timestamp in milliseconds to set the posting date from. If not set the first day of the current year is set.",
            "format": "int64",
            "example": 1546300801000
          },
          "toPostingDateTs": {
            "type": "integer",
            "description": "toPostingDateTs. Timestamp in milliseconds to set the posting date to. If not set the last day of the current year is set.",
            "format": "int64",
            "example": 1577751839000
          },
          "fromCreationDateTs": {
            "type": "integer",
            "description": "fromCreationDateTs. Timestamp in milliseconds to set the creation date from. Both fromCreationDateTs and toCreationDateTs must be provided if creation date filtering needed.",
            "format": "int64",
            "example": 1546300801000
          },
          "toCreationDateTs": {
            "type": "integer",
            "description": "toCreationDateTs. Timestamp in milliseconds to set the creation date to. Both fromCreationDateTs and toCreationDateTs must be provided if creation date filtering needed.",
            "format": "int64",
            "example": 1577751839000
          },
          "dimension1": {
            "type": "string",
            "description": "dimension1. The name of the dimension which should be exported to Kost1 in DATEV.",
            "example": "Kostenstellen"
          },
          "dimension2": {
            "type": "string",
            "description": "dimension2. The name of the dimension which should be exported to Kost2 in DATEV.",
            "example": "Projekte"
          },
          "textConfiguration": {
            "type": "string",
            "description": "textConfiguration. The name of the text field which should be exported to Text in DATEV. If not set posting text(Belegtext) is used.",
            "example": "Belegtext",
            "enum": [
              "Belegtext",
              "Erste Buchungszeile"
            ]
          },
          "field1Configuration": {
            "type": "string",
            "description": "field1Configuration. The name of the field which should be exported to Text in DATEV. If not set external number(Externe Belegnummer) is used.",
            "example": "Externe Belegnummer",
            "enum": [
              "Belegnummer",
              "Externe Belegnummer"
            ]
          },
          "exportStrategy": {
            "type": "string",
            "description": "exportStrategy. The way split entries are exported. If not set standard is used.",
            "example": "Standard",
            "enum": [
              "Standard",
              "Journalreihenfolge beachten"
            ]
          },
          "skipCancellations": {
            "type": "boolean",
            "description": "skipCancellations. Do you want to export cancellation postings?"
          },
          "vatMatrixDatevKeys": {
            "type": "boolean",
            "description": "vatMatrixDatevKeys. Do you want to use the DATEV posting keys (BU-Schlüssel) from Scopevisios vat matrix? Standard value is true.",
            "example": true,
            "default": true
          },
          "preferRowTexts": {
            "type": "boolean",
            "description": "preferRowTexts. Whether to prefer RowTexts in the resulting export. Default value is false.",
            "example": false,
            "default": false
          }
        }
      },
      "DatevPostings": {
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "zone": {
            "type": "string",
            "description": "Zone (Rechnungskreis) If this parameter is mandatory depends on the zone settings in the Scopevisio desktop application. If set to mandatory and not given, the standard zone is used.",
            "example": "0"
          },
          "data": {
            "type": "string",
            "description": "A DATEV-Importfile (EXTF) in Base64 format.",
            "example": "RVhURjs1MTA7MjE7QnVjaHVuZ3NzdGFwZWw7NzsyMDE3MDkxMjEyMzAwMTUyNTs7U0M7U2NvcGV2aXNpbzs7MTIzNDU7MTAwMDA7MjAxNjAxMDE7NDsyMDE2MDEwMTsyMDE2MTIzMTs7Ozs7MTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7DQpVbXNhdHogKG9obmUgU29sbC9IYWJlbi1Leik7U29sbC9IYWJlbi1LZW5uemVpY2hlbjtXS1ogVW1zYXR6O0t1cnM7QmFzaXMtVW1zYXR6O1dLWiBCYXNpcy1VbXNhdHo7S29udG87R2VnZW5rb250byAob2huZSBCVS1TY2hs/HNzZWwpO0JVLVNjaGz8c3NlbDtCZWxlZ2RhdHVtO0JlbGVnZmVsZCAxO0JlbGVnZmVsZCAyO1Nrb250bztCdWNodW5nc3RleHQ7UG9zdGVuc3BlcnJlO0RpdmVyc2UgQWRyZXNzbnVtbWVyO0dlc2No5GZ0c3BhcnRuZXJiYW5rO1NhY2h2ZXJoYWx0O1ppbnNzcGVycmU7QmVsZWdsaW5..."
          }
        }
      },
      "UpdatePersonalAccountForm": {
        "type": "object",
        "properties": {
          "sumAccountNumber": {
            "type": "string",
            "description": "sumAccountNumber (Sammelkonto Nummer), to be used in the created personal account. If no sumRangeNumber provided, then a default number will be set.",
            "example": "1400"
          },
          "numberRangeNumber": {
            "type": "integer",
            "description": "numberRangeNumber (Kreditoren-/Debitoren-Nummernkreis), the number of the number range for the personal account. If personalAccountNumber is not provided, the first available number for the provided numberRangeNumber is generated for the personal account. \n If numberRangeNumber not provided,  the first found number range will be used. We recommend setting \"numberRangeNumber\" if more than one number ranges for this account type(debitor or kreditor) exist otherwise errors may occur if the number range is full. \nThe default number ranges in the Scopevisio desktop applications are \"2\" for debitors and \"3\" for creditors",
            "format": "int64",
            "example": 2
          },
          "group": {
            "type": "string",
            "description": "group (Kundengruppe/Kreditorengruppe), if the given group does not exist, it is created and assigned to the personal account.",
            "example": "Inland Zulieferer"
          },
          "vatCode": {
            "type": "string",
            "description": "vatCode(Steuerkennzeichen) for the personal account. Please see vat matrix (Steuermatrix) in the Scopevisio client if you wish other than the standard allowable values.",
            "example": "INL",
            "enum": [
              "INL",
              "Drittland",
              "EUmID",
              "EUoID"
            ]
          },
          "paymentType": {
            "type": "string",
            "description": "paymentType(Zahlungsart) for the personal account.",
            "example": "Bar",
            "enum": [
              "Vorkasse",
              "Überweisung",
              "PayPal",
              "Nachnahme",
              "Einzugsermächtigung",
              "Rechnung,EC-Karte",
              "Abbuchungsgenehmigung",
              "Bar",
              "Kreditkarte"
            ]
          },
          "vatNumber": {
            "type": "string",
            "description": "vatNumber(Steuernummer)",
            "example": "181/815/08155"
          },
          "vatId": {
            "type": "string",
            "description": "vatId (Umsatzsteuer-ID)",
            "example": "DE136695976"
          },
          "currency": {
            "type": "string",
            "description": "currency(Währung), the ISO 4217 alphabetic currency code",
            "example": "USD"
          },
          "language": {
            "type": "string",
            "description": "language(Sprache), please check the Scopeviso client application for allowable values",
            "example": "Deutsch (Luxemburg)"
          },
          "paymentTermId": {
            "type": "integer",
            "description": "paymentTermId (Zahlungsbedingung id), the id of the wished payment term for the personal account. If an existing paymentTerm should be assigned to the personal account, then use \"paymentTermId\" . If a new paymentTerm should be created, use the parameter \"paymentTermForm\". If both \"paymentTermId\" and \"paymentTermForm\" are provided, a payment term with the given \"paymentTermId\" is searched. If not found,the \"paymentTermForm\" is used. If a payment term with the given name is found, then it is assigned to the personal account, a new payment term is created otherwise.",
            "format": "int64",
            "example": 18678
          },
          "paymentTermForm": {
            "$ref": "#/components/schemas/PaymentTermForm"
          }
        }
      },
      "DimensionEntryForm": {
        "required": [
          "locked",
          "name",
          "number"
        ],
        "type": "object",
        "properties": {
          "number": {
            "type": "integer",
            "description": "Number",
            "format": "int64",
            "example": 3
          },
          "name": {
            "type": "string",
            "description": "Name",
            "example": "Entwicklung"
          },
          "locked": {
            "type": "boolean",
            "description": "locked",
            "example": true
          }
        }
      },
      "DispatchForm": {
        "required": [
          "customerContactId",
          "documentDate"
        ],
        "type": "object",
        "properties": {
          "projectId": {
            "type": "integer",
            "description": "projectId (Projekt). Sets also projectNumber, projectName. Please look up in your sales (Vertriebs-) and/or outgoing invoice settings (Abrechnungseinstellungen) to check if projectId is mandatory.",
            "format": "int64",
            "example": 9809
          },
          "customerContactId": {
            "type": "integer",
            "description": "customerContactId (Lead/Interessent/Kunde). Sets also customerPersonalAccountId, customerPersonalAccountNumber, customerPersonalAccountName, customerPersonalAccountExternalNumber, customerName, customerNameExtra, customerNumber, customerContactName, customerContactCustomerNumber. Must be set if project is not mandatory. Ignored otherwise.",
            "format": "int64",
            "example": 10979
          },
          "customerContactName": {
            "type": "string",
            "description": "customerContactName - the name of the contact with the given customerContactId.",
            "readOnly": true,
            "example": "Muster AG"
          },
          "customerContactCustomerNumber": {
            "type": "string",
            "description": "The customer number of the contact with the given customerContactId. Where to find the value in the Scopevisio client: open contact with master id == customerContactId, go to sphere (Rolle) Allgemein. The field contact number (Kontaktnummer) is the customerContactCustomerNumber.",
            "readOnly": true,
            "example": "G-2018-1"
          },
          "customerPersonalAccountId": {
            "type": "integer",
            "description": "The master id of personal account associated with the contact with the given customerContactId.",
            "format": "int64",
            "readOnly": true,
            "example": 97680
          },
          "customerPersonalAccountNumber": {
            "type": "string",
            "description": "The number of the personal account associated with the contact with the given customerContactId. Where to find the value in the Scopevisio client: open contact with master id == customerContactId, go to sphere (Rolle) Debitor. Field account number (Kontonummer) is the customerPersonalAccountNumber. This field also corresponds to field \"debitorNumber\" from endpoint  /contact/{customerContactId} and field  \"number\" from /debitoraccounts.",
            "readOnly": true,
            "example": "10008"
          },
          "customerPersonalAccountName": {
            "type": "string",
            "description": "The name of the personal account associated with the contact with the given customerContactId. Where to find the value in the Scopevisio client: open contact with master id == customerContactId, go to sphere (Rolle) Debitor. Field account name (Kontoname) is the customerPersonalAccountName. This field also corresponds to field \"name\" from endpoint /debitoraccounts.",
            "readOnly": true,
            "example": "Muster AG"
          },
          "customerPersonalAccountExternalNumber": {
            "type": "string",
            "description": "The customer number of the personal account with the given customerPersonalAccountNumber. Where to find the value in the Scopevisio client: open contact with master id == customerContactId, go to sphere (Rolle) Debitor.  Field customer number (Kundennummer) is the customerPersonalAccountExternalNumber.",
            "readOnly": true,
            "example": "D10008"
          },
          "customerName": {
            "type": "string",
            "description": "This field is for internal use only. Please use field customerContactName.",
            "readOnly": true
          },
          "customerNumber": {
            "type": "string",
            "description": "This field is for internal use only. Please use fields customerContactCustomerNumber or customerPersonalAccountExternalNumber.",
            "readOnly": true
          },
          "customerNameExtra": {
            "type": "string",
            "description": "This field is for internal use only. Please use fields customerContactCustomerNumber or customerPersonalAccountName.",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "description": "name (Bezeichnung)",
            "example": "RE-2018-1, KP für Muster AG vom 27.11.2018"
          },
          "text": {
            "type": "string",
            "description": "text (Beschreibung)",
            "example": "Folgeauftrag"
          },
          "customerContactPerson": {
            "type": "integer",
            "description": "customerContactPerson (Ansprechpartner). Sets also customerContactPersonName. The contact must be an employee of the project contact (contactId).",
            "format": "int64",
            "example": 9809
          },
          "documentDate": {
            "type": "integer",
            "description": "documentDate (PZ-/Angebots-/Auftrags-/Rechnungs-/GS-/LS-Datum). If not given, it is set to the current date. Sets also documentDateMonth.",
            "format": "int64",
            "example": 346234
          },
          "documentNumber": {
            "type": "string",
            "description": "documentNumber (Potenzial-/Angebots-/Auftrags-/Rechnungs-/Gutschrifts-/Lieferscheinnummer).The field is mandatory. If not provided a document number is generated.",
            "example": "Rg-18-090"
          },
          "ourContactPerson": {
            "type": "string",
            "description": "ourContactPerson (Potenzial-/Angebots- Auftrags-/Rechnungs-/Gutschrifts-/Lieferscheinbearbeiter). The UID of a Scopevisio user. The user must have a user contact (Aus Benutzerkontakt) for the current organisation. Setting this field also sets ourContactPersonName.",
            "example": "user_ffffffff-ffff-4351-b1d3-40bbdaa000345"
          },
          "deliveryType": {
            "type": "string",
            "description": "deliveryType (Lieferart).",
            "example": "UPS"
          },
          "deliveryCosts": {
            "type": "number",
            "description": "deliveryCosts (Lieferkosten).",
            "example": 3.95
          },
          "cashOnDelivery": {
            "type": "number",
            "description": "cashOnDelivery (Nachnamegebühr).",
            "example": 5.45
          },
          "textTitle": {
            "type": "string",
            "description": "textTitle (Titel).",
            "example": "Angebot"
          },
          "textSubTitle": {
            "type": "string",
            "description": "textSubTitle (Untertitel).",
            "example": "$Belegnummer"
          },
          "textIntro": {
            "type": "string",
            "description": "textIntro (Einleitungstext). Use \"\\n\" to insert new line.",
            "example": "Sehr geehrte Damen und Herren,\\nwir erlauben uns, Ihnen wie folgt in Rechnung zu stellen:"
          },
          "textExtro": {
            "type": "string",
            "description": "textExtro (Schlusstext). Use \"\\n\" to insert new line.",
            "example": "Wir freuen uns, wenn Ihnen das Angebot zusagt und verbleiben mit freundlichen Grüßen"
          },
          "selectedAddress": {
            "type": "integer",
            "description": "selectedAddress (Adresse [Haupt-/Rechnungs-/Liefer-/freie Adresse]). 0 = Hauptadresse, 1 = Rechnungsadresse, 2 = freie Adresse, 3 = Lieferadresse",
            "format": "int64",
            "example": 1
          },
          "otherAddress": {
            "type": "string",
            "description": "otherAddress (freie Adresse). Use \"\\n\" to insert new line.",
            "example": "Muster AG \\n Musterstraße 5 \\n45345 Musterstadt"
          },
          "gross": {
            "type": "boolean",
            "description": "gross (Preisangabe - Netto/Brutto)"
          },
          "permissionType": {
            "type": "integer",
            "description": "0 = Öffentlich, 1 = Benutzerdefiniert, 2 = Persönlich",
            "format": "int64",
            "example": 1
          },
          "readPermissionProfiles": {
            "type": "string",
            "description": "comma separated list of profiles for the read permissions, evaluated only if permissionType equals 1.",
            "example": "Faktura - alle Rechte,CRM - Alle Rechte"
          },
          "readPermissionLogins": {
            "type": "string",
            "description": "comma separated list of user login emails for the read permissions, evaluated only if permissionType equals 1.",
            "example": "peter.mueller@scopevisio.com,michaela.trimm@scopevisio.com"
          },
          "writePermissionProfiles": {
            "type": "string",
            "description": "comma separated list of profiles for full access, evaluated only if permissionType equals 1.",
            "example": "Firmen und Benutzer - alle Rechte,Finanzen - alle Rechte"
          },
          "writePermissionLogins": {
            "type": "string",
            "description": "comma separated list of user login emails, evaluated only if permissionType equals 1.",
            "example": "stefan.tarn@scopevisio.com"
          },
          "customFields": {
            "type": "array",
            "description": "Benutzerdefinierte Felder",
            "items": {
              "$ref": "#/components/schemas/CustomField"
            }
          },
          "positionsForm": {
            "$ref": "#/components/schemas/OutgoingInvoicePositionsForm"
          },
          "orderNumber": {
            "type": "string",
            "description": "orderNumber (Bestellnummer)",
            "example": "8698"
          },
          "stateName": {
            "type": "string",
            "description": "state (Angebotsstatus). Sets also state.",
            "example": "Ware ausgeliefert",
            "enum": [
              "Lieferung in Vorbereitung",
              "Ware ausgeliefert",
              "Lieferung nicht möglich"
            ]
          },
          "valutaDate": {
            "type": "integer",
            "description": "valutaDate (Umsatz-Zeitpunkt).",
            "format": "int64",
            "example": 1548925048000
          },
          "locale": {
            "type": "string",
            "description": "locale (Sprache)",
            "example": "Deutsch"
          }
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/OutgoingInvoiceBaseForm"
          }
        ]
      },
      "CompanyForm": {
        "required": [
          "company",
          "companyName"
        ],
        "type": "object",
        "properties": {
          "company": {
            "type": "boolean",
            "description": "true = Gesellschaft, false = Person. Evaluated only when creating  a company."
          },
          "companyName": {
            "type": "string",
            "description": "companyName (Name der Gesllschaft)",
            "example": "Echobot Media Technologies GmbH"
          },
          "legalform": {
            "type": "string",
            "description": "legalform (Rechtsform)",
            "example": "GmbH"
          },
          "street": {
            "type": "string",
            "description": "street and nummer (Straße und Hausnummre)",
            "example": "Südendstraße 52"
          },
          "zip": {
            "type": "string",
            "description": "zip (Postleitzahl)",
            "example": "76135"
          },
          "location": {
            "type": "string",
            "description": "location (Stadt)",
            "example": "Karlsruhe"
          },
          "country": {
            "type": "string",
            "description": "country (Land)",
            "example": "Deutschland"
          },
          "url": {
            "type": "string",
            "description": "url (Website)",
            "example": "http://www.echobot.de"
          },
          "email": {
            "type": "string",
            "description": "email (E-mail)",
            "example": "service@echobot.de"
          },
          "phone": {
            "type": "string",
            "description": "phone (Telefon)",
            "example": "+4972150057501"
          },
          "fax": {
            "type": "string",
            "description": "fax (Telefax)",
            "example": "+4972150057209"
          },
          "registerId": {
            "type": "string",
            "description": "registerId (Handelsnummer)",
            "example": "HRB711540"
          },
          "registerLocation": {
            "type": "string",
            "description": "registerLocation (Handelsregister)",
            "example": "Mannheim"
          },
          "vatId": {
            "type": "string",
            "description": "vatId (Ust-IdNr)",
            "example": "DE276265194"
          },
          "employeeSize": {
            "type": "string",
            "description": "employeeSize (Mitarbeiterzahl)",
            "example": "11"
          }
        }
      },
      "FiscalYearInfo": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "open": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "beginningTs": {
            "type": "integer",
            "format": "int64"
          },
          "endTs": {
            "type": "integer",
            "format": "int64"
          },
          "beginning": {
            "type": "string"
          },
          "end": {
            "type": "string"
          },
          "periods": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PeriodInfo"
            }
          }
        }
      },
      "FiscalYearsInfo": {
        "type": "object",
        "properties": {
          "years": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FiscalYearInfo"
            }
          }
        }
      },
      "PeriodInfo": {
        "type": "object",
        "properties": {
          "open": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "beginningTs": {
            "type": "integer",
            "format": "int64"
          },
          "endTs": {
            "type": "integer",
            "format": "int64"
          },
          "beginning": {
            "type": "string"
          },
          "end": {
            "type": "string"
          }
        }
      },
      "HumanResourcesAvailability": {
        "required": [
          "validFrom",
          "validTill"
        ],
        "type": "object",
        "properties": {
          "validFrom": {
            "type": "integer",
            "description": "validFrom (Planungszeit von). The start of the time range to show the availability of the human resources. It must be provided as an epoch timestamp in milliseconds.",
            "format": "int64",
            "example": 1609455600000
          },
          "validTill": {
            "type": "integer",
            "description": "validTill (Planungszeit bis). The end of the time range to show the availability of the human resources. It must be provided as an epoch timestamp in milliseconds.",
            "format": "int64",
            "example": 1640905200000
          },
          "searchSpecification": {
            "$ref": "#/components/schemas/searchSpecification"
          }
        }
      },
      "searchSpecification": {
        "type": "object",
        "description": "search filter in JSON format. See also <a target='_blank' href='../browser/index.html#!/searchscope'>our search documentation</a>.<br/><b>Note: the fields \"month\",\"monthRevenue\",\"id\" are excluded from the search.</b>",
        "nullable": true
      },
      "IncomingInvoiceUpdateForm": {
        "type": "object",
        "properties": {
          "incomingTs": {
            "type": "integer",
            "description": "incomingTs (Posteingangsdatum). It must be provided as an epoch timestamp in milliseconds.",
            "format": "int64",
            "example": 1591826400000
          },
          "documentDate": {
            "type": "integer",
            "description": "documentDate (Rechnungsdatum). It must be provided as an epoch timestamp in milliseconds.",
            "format": "int64",
            "example": 1591826400000
          },
          "documentNumber": {
            "type": "string",
            "description": "documentNumber (Rechnungsnummer)",
            "example": "T000004"
          },
          "orderNumber": {
            "type": "string",
            "description": "orderNumber (Bestellnummer)",
            "example": "865789"
          },
          "buyerContactId": {
            "type": "integer",
            "description": "buyerContactId (Besteller). The id of a Scopevisio employee contact (aus Benutzerkontakt). Sets also buyerContactName ",
            "format": "int64",
            "example": 97868
          },
          "deliveryDateFrom": {
            "type": "integer",
            "description": "deliveryDateFrom (Leistungsdatum). It must be provided as an epoch timestamp in milliseconds.",
            "format": "int64",
            "example": 1598824800000
          },
          "deliveryDateTo": {
            "type": "integer",
            "description": "deliveryDateTo (Leistungsdatum bis). It must be provided as an epoch timestamp in milliseconds.",
            "format": "int64",
            "example": 1598911200000
          },
          "text1": {
            "type": "string",
            "description": "text1 (Belegtext)",
            "example": "Belegtext"
          },
          "taxCountryIsoCode2": {
            "type": "string",
            "description": "taxCountryIsoCode2 (Ländercode Steuerland)",
            "example": "AT"
          },
          "buyerName": {
            "type": "string",
            "description": "buyerName (Leistungsempfänger, Empfänger)",
            "example": "Muster AG"
          },
          "buyerId": {
            "type": "string",
            "description": "buyerId (Leistungsempfänger, Kundennummer (extern))",
            "example": "7890"
          },
          "buyerContactPersonId": {
            "type": "integer",
            "description": "buyerContactPersonId (Leistungsempfänger, Ansprechpartner). The id of a Scopevisio employee contact (aus Benutzerkontakt). Sets also buyerContactPerson",
            "format": "int64",
            "example": 28048
          },
          "buyerGTIN": {
            "type": "string",
            "description": "buyerGTIN (Leistungsempfänger, Global-ID)",
            "example": "G53854"
          },
          "buyerDepartment": {
            "type": "string",
            "description": "buyerDepartment (Leistungsempfänger, Abteilung). Please check Scopevisio desktop client application for allowable values (Administration -> Auswahllisten verwalten -> Allgemeine Kontaktdaten -> Abteilung).",
            "example": "Beschaffung"
          },
          "buyerZipCode": {
            "type": "string",
            "description": "buyerZipCode (Leistungsempfänger, PLZ)",
            "example": "53227"
          },
          "buyerCity": {
            "type": "string",
            "description": "buyerCity (Leistungsempfänger, Ort)",
            "example": "Bonn"
          },
          "buyerStreet": {
            "type": "string",
            "description": "buyerStreet (Leistungsempfänger, Straße/Hausnummer)",
            "example": "Rheinwerkallee 3"
          },
          "buyerAddressExtra": {
            "type": "string",
            "description": "buyerAddressExtra (Leistungsempfänger, Zusätzliche Angaben)"
          },
          "buyerCountry": {
            "type": "string",
            "description": "buyerCountry (Leistungsempfänger, Land)",
            "example": "Deutschland"
          },
          "shiptoName": {
            "type": "string",
            "description": "shiptoName (Abweichender Warenempfänger, Empfänger)",
            "example": "Scopevisio Sales & Consulting GmbH"
          },
          "shiptoId": {
            "type": "string",
            "description": "shiptoId (Abweichender Warenempfänger, Kundennummer (extern))"
          },
          "shiptoGtin": {
            "type": "string",
            "description": "shiptoGtin (Abweichender Warenempfänger, Global-ID)"
          },
          "shiptoDepartment": {
            "type": "string",
            "description": "shiptoDepartment (Abweichender Warenempfänger, Abteilung)"
          },
          "shiptoZipCode": {
            "type": "string",
            "description": "shiptoZipCode (Abweichender Warenempfänger, PLZ)",
            "example": "10117"
          },
          "shiptoCity": {
            "type": "string",
            "description": "shiptoCity (Abweichender Warenempfänger, Ort)",
            "example": "Berlin"
          },
          "shiptoStreet": {
            "type": "string",
            "description": "shiptoStreet (Abweichender Warenempfänger, Straße/Hausnummer)",
            "example": "Behrensstrasse 42"
          },
          "shiptoAddressExtra": {
            "type": "string",
            "description": "shiptoAddressExtra (Abweichender Warenempfänger, Zusätzliche Angaben)",
            "example": "Humboldt-Carré"
          },
          "shiptoCountry": {
            "type": "string",
            "description": "shiptoCountry (Abweichender Warenempfänger, Land)",
            "example": "Deutschland"
          },
          "shiptoContactPersonId": {
            "type": "integer",
            "description": "shiptoContactPersonId (Besteller). The id of a Scopevisio employee contact (contact with role employee (Mitarbeiter) set). Sets also buyerContactName ",
            "format": "int64",
            "example": 8907890
          },
          "invoiceeName": {
            "type": "string",
            "description": "invoiceeName (Abweichender Rechnungsempfänger, Empfänger)"
          },
          "invoiceeId": {
            "type": "string",
            "description": "invoiceeId (Abweichender Rechnungsempfänger, Kundennummer (extern))"
          },
          "invoiceeGtin": {
            "type": "string",
            "description": "invoiceeGtin (Abweichender Rechnungsempfänger, Global-ID)"
          },
          "invoiceeDepartment": {
            "type": "string",
            "description": "invoiceeDepartment (Abweichender Rechnungsempfänger, Abteilung)"
          },
          "invoiceeZipCode": {
            "type": "string",
            "description": "invoiceeZipCode (Abweichender Rechnungsempfänger, PLZ)"
          },
          "invoiceeCity": {
            "type": "string",
            "description": "invoiceeCity (Abweichender Rechnungsempfänger, Ort)"
          },
          "invoiceeStreet": {
            "type": "string",
            "description": "invoiceeStreet (Abweichender Rechnungsempfänger, Straße/Hausnummer)"
          },
          "invoiceeAddressExtra": {
            "type": "string",
            "description": "invoiceeAddressExtra (Abweichender Rechnungsempfänger, Zusätzliche Angaben)"
          },
          "invoiceeCountry": {
            "type": "string",
            "description": "invoiceeCountry (Abweichender Rechnungsempfänger, Land)"
          },
          "invoiceeContactPersonId": {
            "type": "integer",
            "description": "invoiceeContactPersonId (Besteller). The id of a Scopevisio employee contact (contact with role employee (Mitarbeiter) set). Sets also buyerContactName ",
            "format": "int64"
          },
          "vendorContactId": {
            "type": "integer",
            "description": "vendorContactId (Lieferant/Kreditor Kontakt Master-ID). The id of a Scopevisio contact. If not provided explicitly the other vendor fields are copied from the contact.",
            "format": "int64",
            "example": 678070
          },
          "paymentTermName": {
            "type": "string",
            "description": "paymentTermName (Zahlungsbedingung) If not set explicitly by the user, creditor payment term is set. If one of discountDate1, discountDate2, discountAmount1, discountAmount2, discountPercent1 or discountPercent2 is set by the user, then the paymentTermName is ignored.",
            "example": "10 Tage 2 % Skonto, 20 Tage netto"
          },
          "discountDate1": {
            "type": "integer",
            "description": "discountDate1 (Skonto 1 Datum). The discountDate1 as epoch timestamp in milliseconds. If it is set either discountPercent1 or discountAmount1 must be set. If one of the payment term properties is provided (discountDate1, discountDate2, dueDate, discountPercent1, discountPercent2, discountAmount1, discountAmount2) when creating an invoice, then the form is used. Otherwise the payment term from the personal account (connected to the customerContactId) is used.",
            "format": "int64",
            "example": 1546592408000
          },
          "discountDate2": {
            "type": "integer",
            "description": "discountDate2 (Skonto 2 Datum). The discountDate2 as epoch timestamp in milliseconds. It must be greater than discountDate1. If it is set either discountPercent2 or discountAmount2 must be set.",
            "format": "int64",
            "example": 1548752248000
          },
          "dueDate": {
            "type": "integer",
            "description": "dueDate (Fälligkeitsdatum). The dueDate as epoch timestamp in milliseconds. It must be greater than discountDate2.",
            "format": "int64",
            "example": 1548925048000
          },
          "discountPercent1": {
            "type": "number",
            "description": "discountPercent1 (Skonto 1 Prozent). Either discount percent(s) or discount amount(s) are allowed. Setting both is not possible. If set discountDate1 must be set too.",
            "example": 10
          },
          "discountPercent2": {
            "type": "number",
            "description": "discountPercent2 (Skonto 2 Prozent). Either discount percent(s) or discount amount(s) are allowed. Setting both is not possible. If set discountDate2 must be set too.",
            "example": 5
          },
          "explicitDiscount": {
            "type": "boolean",
            "description": "explicitDiscount (Skontobeträge manuell). If set discountAmount(s) must be provided"
          },
          "discountAmount1": {
            "type": "number",
            "description": "discountAmount1 (Skonto 1 Betrag). Only evaluated if explicitDiscount is true. If set discountDate1 must be set too.",
            "example": 15
          },
          "discountAmount2": {
            "type": "number",
            "description": "discountAmount2 (Skonto 2 Betrag). Only evaluated if explicitDiscount is true. If set discountDate2 must be set too.",
            "example": 5
          },
          "permissionType": {
            "maximum": 2,
            "minimum": 0,
            "type": "integer",
            "description": "permissionType [0 = Öffentlich, 1 = Benutzerdefiniert, 2 = Persönlich]",
            "format": "int32",
            "example": 1,
            "default": 0
          },
          "readPermissionProfiles": {
            "type": "string",
            "description": "comma separated list of profiles for the read permissions, evaluated only if permissionType equals 1.",
            "example": "Faktura - alle Rechte,CRM - alle Rechte"
          },
          "readPermissionLogins": {
            "type": "string",
            "description": "comma separated list of user login emails for the read permissions, evaluated only if permissionType equals 1.",
            "example": "peter.mueller@scopevisio.com,michaela.trimm@scopevisio.com"
          },
          "writePermissionProfiles": {
            "type": "string",
            "description": "comma separated list of profiles for full access, evaluated only if permissionType equals 1.",
            "example": "Firmen und Benutzer - alle Rechte,Finanzen - alle Rechte"
          },
          "writePermissionLogins": {
            "type": "string",
            "description": "comma separated list of user login emails, evaluated only if permissionType equals 1.",
            "example": "stefan.tarn@scopevisio.com"
          }
        }
      },
      "IncomingInvoiceForm": {
        "type": "object",
        "properties": {
          "filename": {
            "type": "string",
            "description": "filename"
          },
          "data": {
            "type": "string",
            "description": "Incoming invoice file (pdf) in base64 format. Allowed size: 20 MB. An exception is thrown otherwise."
          }
        }
      },
      "FormDataContentDisposition": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "parameters": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "fileName": {
            "type": "string"
          },
          "creationDate": {
            "type": "string",
            "format": "date-time"
          },
          "modificationDate": {
            "type": "string",
            "format": "date-time"
          },
          "readDate": {
            "type": "string",
            "format": "date-time"
          },
          "size": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "IncomingInvoiceResponsibleContactForm": {
        "type": "object",
        "properties": {
          "contactId": {
            "type": "integer",
            "description": "user contact master-id (use zero or negative values to remove the attached user contact)",
            "format": "int64"
          }
        }
      },
      "IncomingMailForm": {
        "required": [
          "eml"
        ],
        "type": "object",
        "properties": {
          "encoding": {
            "type": "string",
            "description": "Encoding, if not provided UTF-8 is used.",
            "example": "base64",
            "enum": [
              "UTF-8",
              "base64"
            ]
          },
          "eml": {
            "type": "string",
            "description": "Email content as eml data. If encoding is set to base64, then the value of the parameter must be a base64 encoded eml."
          }
        }
      },
      "FileForm": {
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "filename": {
            "type": "string",
            "description": "filename. If no filename is given, it is assumed a pdf file is uploaded.",
            "example": "Beleg.pdf"
          },
          "data": {
            "type": "string",
            "description": "file data in Base64",
            "example": "JVBERi0xLjMNCiXi48/TDQoyIDAgb2JqDQo8PA0KL1R5cGUgL0ZvbnREZXNjcmlwdG9yDQovQXNj\"ZW50IDcyMA0KL0NhcEhlaWdodCA2NjANCi9EZXNjZW50IC0yNzANCi9GbGFncyAzMg0KL0ZvbnRC\n\"Qm94IFstMTc3IC0yNjkgMTEyMyA4NjZdDQovRm9udE5hbWUgL0hlbHZldGljYQ0KL0l0YWxpY0Fu\n...\n...\n...\nMDAyNDQ4NyAwMDAwMCBuDQowMDAwMDI0NjQ5IDAwMDAwIG4NCjAwMDAwMjQ4NDMgMDAwMDAgbg0K\ndHJhaWxlcg0KPDwvU2l6ZSAyNC9Sb290IDIxIDAgUi9JRFs8MUNBMEFBOEZEMzg4Mzc3MzhDNUY1\nNkExMDRFMDFFNTM+PDFDQTBBQThGRDM4ODM3NzM4QzVGNTZBMTA0RTAxRTUzPl0vUHJldiAyMzk1\nNT4+DQpzdGFydHhyZWYNCjMyMzM2DQolJUVPRg0K"
          }
        }
      },
      "JsonNode": {
        "type": "object",
        "description": "the json data to be imported",
        "example": {
          "fistname": "John",
          "lastname": "Doe"
        }
      },
      "ManagedDataForm": {
        "required": [
          "json"
        ],
        "type": "object",
        "properties": {
          "validFrom": {
            "type": "integer",
            "description": "validFrom",
            "format": "int64",
            "example": 1546210800000
          },
          "validTill": {
            "type": "integer",
            "description": "validTill",
            "format": "int64",
            "example": 1546210800000
          },
          "json": {
            "$ref": "#/components/schemas/JsonNode"
          },
          "permissionType": {
            "maximum": 2,
            "minimum": 0,
            "type": "integer",
            "description": "permissionType [0 = Öffentlich, 1 = Benutzerdefiniert, 2 = Persönlich]",
            "format": "int32",
            "example": 1,
            "default": 0
          },
          "readPermissionProfiles": {
            "type": "string",
            "description": "comma separated list of profiles for the read permissions, evaluated only if permissionType equals 1.",
            "example": "Faktura - alle Rechte,CRM - Alle Rechte"
          },
          "readPermissionLogins": {
            "type": "string",
            "description": "comma separated list of user login emails for the read permissions, evaluated only if permissionType equals 1.",
            "example": "peter.mueller@scopevisio.com,michaela.trimm@scopevisio.com"
          },
          "writePermissionProfiles": {
            "type": "string",
            "description": "comma separated list of profiles for full access, evaluated only if permissionType equals 1.",
            "example": "Firmen und Benutzer - alle Rechte,Finanzen - alle Rechte"
          },
          "writePermissionLogins": {
            "type": "string",
            "description": "comma separated list of user login emails, evaluated only if permissionType equals 1.",
            "example": "stefan.tarn@scopevisio.com"
          }
        }
      },
      "AccountInfo": {
        "type": "object",
        "properties": {
          "customer": {
            "$ref": "#/components/schemas/Customer"
          },
          "organisation": {
            "$ref": "#/components/schemas/Organisation"
          },
          "user": {
            "$ref": "#/components/schemas/User"
          },
          "teamwork": {
            "$ref": "#/components/schemas/Teamwork"
          }
        }
      },
      "Customer": {
        "type": "object",
        "properties": {
          "publicId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "origin": {
            "type": "string"
          }
        }
      },
      "License": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "example": "erp.SuiteEnt"
          },
          "validTill": {
            "type": "integer",
            "format": "int64",
            "readOnly": true,
            "example": 9223372036854776000
          }
        },
        "description": "Product licenses to assign"
      },
      "Organisation": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          },
          "teamworkTenantId": {
            "type": "string"
          },
          "teamworkTenantName": {
            "type": "string"
          }
        }
      },
      "Profile": {
        "required": [
          "name",
          "organisation"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Please consider, if you want to set the profile \"Firmen und Benutzer\" you needto set the parameter \"administrator\" to \"true\".",
            "example": "Kontakte - alle Rechte"
          },
          "organisation": {
            "type": "string",
            "description": "If you need to set a profile which is not used for an organisation but for the whole instance, then set \"Instanz\". P, ",
            "example": "ACME GmbH"
          }
        },
        "description": "User profiles to assign"
      },
      "Teamwork": {
        "type": "object",
        "properties": {
          "teamworkAppRootUrl": {
            "type": "string"
          }
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "uid": {
            "type": "string"
          },
          "login": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "licenses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/License"
            }
          },
          "profiles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Profile"
            }
          }
        }
      },
      "ConvertToRecurringInvoiceForm": {
        "required": [
          "frequency",
          "nextInvoiceDate",
          "validFrom",
          "validTo"
        ],
        "type": "object",
        "properties": {
          "validFrom": {
            "type": "integer",
            "description": "validFrom",
            "format": "int64",
            "example": 1546300800000
          },
          "validTo": {
            "type": "integer",
            "description": "validTo",
            "format": "int64",
            "example": 1577746800000
          },
          "frequency": {
            "type": "string",
            "description": "frequency",
            "example": "monthly",
            "enum": [
              "daily",
              "weekly",
              "monthly",
              "bimonthly",
              "quarterly",
              "half-yearly",
              "yearly"
            ]
          },
          "nextInvoiceDate": {
            "type": "integer",
            "description": "nextInvoiceDate",
            "format": "int64",
            "example": 1567288800000
          }
        }
      },
      "OfferForm": {
        "required": [
          "customerContactId",
          "documentDate"
        ],
        "type": "object",
        "properties": {
          "projectId": {
            "type": "integer",
            "description": "projectId (Projekt). Sets also projectNumber, projectName. Please look up in your sales (Vertriebs-) and/or outgoing invoice settings (Abrechnungseinstellungen) to check if projectId is mandatory.",
            "format": "int64",
            "example": 9809
          },
          "customerContactId": {
            "type": "integer",
            "description": "customerContactId (Lead/Interessent/Kunde). Sets also customerPersonalAccountId, customerPersonalAccountNumber, customerPersonalAccountName, customerPersonalAccountExternalNumber, customerName, customerNameExtra, customerNumber, customerContactName, customerContactCustomerNumber. Must be set if project is not mandatory. Ignored otherwise.",
            "format": "int64",
            "example": 10979
          },
          "customerContactName": {
            "type": "string",
            "description": "customerContactName - the name of the contact with the given customerContactId.",
            "readOnly": true,
            "example": "Muster AG"
          },
          "customerContactCustomerNumber": {
            "type": "string",
            "description": "The customer number of the contact with the given customerContactId. Where to find the value in the Scopevisio client: open contact with master id == customerContactId, go to sphere (Rolle) Allgemein. The field contact number (Kontaktnummer) is the customerContactCustomerNumber.",
            "readOnly": true,
            "example": "G-2018-1"
          },
          "customerPersonalAccountId": {
            "type": "integer",
            "description": "The master id of personal account associated with the contact with the given customerContactId.",
            "format": "int64",
            "readOnly": true,
            "example": 97680
          },
          "customerPersonalAccountNumber": {
            "type": "string",
            "description": "The number of the personal account associated with the contact with the given customerContactId. Where to find the value in the Scopevisio client: open contact with master id == customerContactId, go to sphere (Rolle) Debitor. Field account number (Kontonummer) is the customerPersonalAccountNumber. This field also corresponds to field \"debitorNumber\" from endpoint  /contact/{customerContactId} and field  \"number\" from /debitoraccounts.",
            "readOnly": true,
            "example": "10008"
          },
          "customerPersonalAccountName": {
            "type": "string",
            "description": "The name of the personal account associated with the contact with the given customerContactId. Where to find the value in the Scopevisio client: open contact with master id == customerContactId, go to sphere (Rolle) Debitor. Field account name (Kontoname) is the customerPersonalAccountName. This field also corresponds to field \"name\" from endpoint /debitoraccounts.",
            "readOnly": true,
            "example": "Muster AG"
          },
          "customerPersonalAccountExternalNumber": {
            "type": "string",
            "description": "The customer number of the personal account with the given customerPersonalAccountNumber. Where to find the value in the Scopevisio client: open contact with master id == customerContactId, go to sphere (Rolle) Debitor.  Field customer number (Kundennummer) is the customerPersonalAccountExternalNumber.",
            "readOnly": true,
            "example": "D10008"
          },
          "customerName": {
            "type": "string",
            "description": "This field is for internal use only. Please use field customerContactName.",
            "readOnly": true
          },
          "customerNumber": {
            "type": "string",
            "description": "This field is for internal use only. Please use fields customerContactCustomerNumber or customerPersonalAccountExternalNumber.",
            "readOnly": true
          },
          "customerNameExtra": {
            "type": "string",
            "description": "This field is for internal use only. Please use fields customerContactCustomerNumber or customerPersonalAccountName.",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "description": "name (Bezeichnung)",
            "example": "RE-2018-1, KP für Muster AG vom 27.11.2018"
          },
          "text": {
            "type": "string",
            "description": "text (Beschreibung)",
            "example": "Folgeauftrag"
          },
          "customerContactPerson": {
            "type": "integer",
            "description": "customerContactPerson (Ansprechpartner). Sets also customerContactPersonName. The contact must be an employee of the project contact (contactId).",
            "format": "int64",
            "example": 9809
          },
          "documentDate": {
            "type": "integer",
            "description": "documentDate (PZ-/Angebots-/Auftrags-/Rechnungs-/GS-/LS-Datum). If not given, it is set to the current date. Sets also documentDateMonth.",
            "format": "int64",
            "example": 346234
          },
          "documentNumber": {
            "type": "string",
            "description": "documentNumber (Potenzial-/Angebots-/Auftrags-/Rechnungs-/Gutschrifts-/Lieferscheinnummer).The field is mandatory. If not provided a document number is generated.",
            "example": "Rg-18-090"
          },
          "ourContactPerson": {
            "type": "string",
            "description": "ourContactPerson (Potenzial-/Angebots- Auftrags-/Rechnungs-/Gutschrifts-/Lieferscheinbearbeiter). The UID of a Scopevisio user. The user must have a user contact (Aus Benutzerkontakt) for the current organisation. Setting this field also sets ourContactPersonName.",
            "example": "user_ffffffff-ffff-4351-b1d3-40bbdaa000345"
          },
          "deliveryType": {
            "type": "string",
            "description": "deliveryType (Lieferart).",
            "example": "UPS"
          },
          "deliveryCosts": {
            "type": "number",
            "description": "deliveryCosts (Lieferkosten).",
            "example": 3.95
          },
          "cashOnDelivery": {
            "type": "number",
            "description": "cashOnDelivery (Nachnamegebühr).",
            "example": 5.45
          },
          "textTitle": {
            "type": "string",
            "description": "textTitle (Titel).",
            "example": "Angebot"
          },
          "textSubTitle": {
            "type": "string",
            "description": "textSubTitle (Untertitel).",
            "example": "$Belegnummer"
          },
          "textIntro": {
            "type": "string",
            "description": "textIntro (Einleitungstext). Use \"\\n\" to insert new line.",
            "example": "Sehr geehrte Damen und Herren,\\nwir erlauben uns, Ihnen wie folgt in Rechnung zu stellen:"
          },
          "textExtro": {
            "type": "string",
            "description": "textExtro (Schlusstext). Use \"\\n\" to insert new line.",
            "example": "Wir freuen uns, wenn Ihnen das Angebot zusagt und verbleiben mit freundlichen Grüßen"
          },
          "selectedAddress": {
            "type": "integer",
            "description": "selectedAddress (Adresse [Haupt-/Rechnungs-/Liefer-/freie Adresse]). 0 = Hauptadresse, 1 = Rechnungsadresse, 2 = freie Adresse, 3 = Lieferadresse",
            "format": "int64",
            "example": 1
          },
          "otherAddress": {
            "type": "string",
            "description": "otherAddress (freie Adresse). Use \"\\n\" to insert new line.",
            "example": "Muster AG \\n Musterstraße 5 \\n45345 Musterstadt"
          },
          "gross": {
            "type": "boolean",
            "description": "gross (Preisangabe - Netto/Brutto)"
          },
          "permissionType": {
            "type": "integer",
            "description": "0 = Öffentlich, 1 = Benutzerdefiniert, 2 = Persönlich",
            "format": "int64",
            "example": 1
          },
          "readPermissionProfiles": {
            "type": "string",
            "description": "comma separated list of profiles for the read permissions, evaluated only if permissionType equals 1.",
            "example": "Faktura - alle Rechte,CRM - Alle Rechte"
          },
          "readPermissionLogins": {
            "type": "string",
            "description": "comma separated list of user login emails for the read permissions, evaluated only if permissionType equals 1.",
            "example": "peter.mueller@scopevisio.com,michaela.trimm@scopevisio.com"
          },
          "writePermissionProfiles": {
            "type": "string",
            "description": "comma separated list of profiles for full access, evaluated only if permissionType equals 1.",
            "example": "Firmen und Benutzer - alle Rechte,Finanzen - alle Rechte"
          },
          "writePermissionLogins": {
            "type": "string",
            "description": "comma separated list of user login emails, evaluated only if permissionType equals 1.",
            "example": "stefan.tarn@scopevisio.com"
          },
          "customFields": {
            "type": "array",
            "description": "Benutzerdefinierte Felder",
            "items": {
              "$ref": "#/components/schemas/CustomField"
            }
          },
          "positionsForm": {
            "$ref": "#/components/schemas/OutgoingInvoicePositionsForm"
          },
          "deliveryDate": {
            "type": "integer",
            "description": "deliveryDate (Leistungsdatum). The deliveryDate as epoch timestamp in milliseconds.",
            "format": "int64",
            "example": 1548323982000
          },
          "deliveryDateTo": {
            "type": "integer",
            "description": "deliveryDateTo (Leistungsdatum-bis). The deliveryDateTo as epoch timestamp in milliseconds.",
            "format": "int64",
            "example": 1548410382000
          },
          "isEndDiscountAbsolute": {
            "type": "boolean",
            "description": "isEndDiscountAbsolute (Schlussrabatt), true = absolute, false = percent",
            "example": true
          },
          "endDiscount": {
            "type": "number",
            "description": "endDiscount(Schlussrabatt), if isEndDiscountAbsolute is set to true, then endDiscount should be an amount, if isEndDiscountAbsolute is set to false then a percentage is needed.",
            "example": 5
          },
          "paymentTypeName": {
            "type": "string",
            "description": "paymentTypeName (Zahlungsart). If not provided for new invoice, the payment type from the personal account (connected to the customerContactId) is used. Also sets also paymentType.",
            "enum": [
              "Vorkasse",
              "Überweisung",
              "PayPal",
              "Nachname",
              "Einzugsermächtigung",
              "Rechnung",
              "EC-Karte",
              "Abbuchungsgenehmigung",
              "Bar",
              "Kreditkarte"
            ]
          },
          "isPaid": {
            "type": "boolean",
            "description": "isPaid (Auf exportiertem Beleg als Bezahlt ausweisen)"
          },
          "discountDate1": {
            "type": "integer",
            "description": "discountDate1 (Skontodatum 1). The discountDate1 as epoch timestamp in milliseconds. If it is set either discountPercent1 or discountAmount1 must be set. If one of the payment term properties is provided (discountDate1, discountDate2, dueDate, discountPercent1, discountPercent2, discountAmount1, discountAmount2) when creating an invoice, then the form is used. Otherwise the payment term from the personal account (connected to the customerContactId) is used.",
            "format": "int64",
            "example": 1546592408000
          },
          "discountDate2": {
            "type": "integer",
            "description": "discountDate2 (Skontodatum 2). The discountDate2 as epoch timestamp in milliseconds. It must be greater than discountDate1. If it is set either discountPercent2 or discountAmount2 must be set.",
            "format": "int64",
            "example": 1548752248000
          },
          "dueDate": {
            "type": "integer",
            "description": "dueDate (Fälligkeitsdatum). The dueDate as epoch timestamp in milliseconds. It must be greater than discountDate2.",
            "format": "int64",
            "example": 1548925048000
          },
          "discountPercent1": {
            "type": "number",
            "description": "discountPercent1 (Skontosatz1). Either discount percent(s) or discount amount(s) are allowed. Setting both is not possible. If set discountDate1 must be set too.",
            "example": 10
          },
          "discountPercent2": {
            "type": "number",
            "description": "discountPercent2 (Skontosatz2). Either discount percent(s) or discount amount(s) are allowed. Setting both is not possible. If set discountDate2 must be set too.",
            "example": 5
          },
          "explicitDiscount": {
            "type": "boolean",
            "description": "explicitDiscount (Skontobeträge manuell eingeben). If set discountAmount(s) must be provided"
          },
          "discountAmount1": {
            "type": "number",
            "description": "discountAmount1 (Skontobetrag1). Only evaluated if explicitDiscount is true. If set discountDate1 must be set too.",
            "example": 15
          },
          "discountAmount2": {
            "type": "number",
            "description": "discountAmount2 (Skontobetrag2). Only evaluated if explicitDiscount is true. If set discountDate2 must be set too.",
            "example": 5
          },
          "salesPhase": {
            "type": "string",
            "description": "salesPhase (Potenzial-/Angebotsphase).  Please check your catalog in the Scopevisio desktop client for allowable values.",
            "example": "Grundbetreuung",
            "enum": [
              "Qualifizierungsphase",
              "Grundbetreuung",
              "Intensivbetreuung",
              "Angebotsbetreuung",
              "Preisverhandlung",
              "Abschlussverhandlung",
              "unverbindliche Zusage (z.B. mündliche Zusage)",
              "verbindliche Zusage (Auftrag, Vertrag)"
            ]
          },
          "salesClassification": {
            "type": "string",
            "description": "salesClassification (Angebotspriorität).  Please check your catalog in the Scopevisio desktop client for allowable values.",
            "example": "B Priorität (wichtig und nicht dringlich)",
            "enum": [
              "VIP Priorität (sehr wichtig und sehr dringlich)",
              "A Priorität (wichtig und dringlich)",
              "B Priorität (wichtig und nicht dringlich)",
              "C Priorität (nicht wichtig und dringlich)",
              "D Priorität (nicht wichtig und nicht dringlich)",
              "E Priorität (direkt verwerfen)"
            ]
          },
          "salesActivity": {
            "type": "string",
            "description": "salesActivity (Folgeaktivität).  Please check your catalog in the Scopevisio desktop client for allowable values.",
            "example": "Angebot erläutern",
            "enum": [
              "1. Anruf ",
              "2. Anruf",
              "3. Anruf",
              "zurückrufen",
              "E-Mail senden",
              "Webinar abhalten",
              "Prospekte zusenden",
              "Angebot erläutern"
            ]
          },
          "phase": {
            "type": "string",
            "description": "phase (Verkaufswahrscheinlichkeit).  Sets also phaseId. Please check your catalog in the Scopevisio desktop client for allowable values.",
            "example": "Abschlussverhandlungen führen",
            "enum": [
              "Auftrag wurde verbindlich erteilt",
              "Vorvertrag wurde geschlossen",
              "Abschlussverhandlungen führen",
              "Interessent erteilt mündliche Zusage",
              "Interessent favorisiert unser Angebot",
              "Entscheidung herbeiführen",
              "Interessent signalisiert deutliches Interesse",
              "Nutzenargumentation aufbauen",
              "Angebot abgegeben",
              "Angebot in Abstimmung",
              "Potenzial qualifizieren",
              "Potenzial identifizieren",
              "Individuelle Vertriebsaktivität gestartet",
              "Bedarf qualifiziert",
              "Bedarf identifiziert",
              "keine Prognose",
              "ungewichtet",
              "verloren"
            ]
          },
          "feasibility": {
            "type": "number",
            "description": "feasibility (Verkaufswahrscheinlichkeit %)",
            "example": 22.5
          },
          "closingDateTs": {
            "type": "integer",
            "description": "closingDateTs (Entscheidungsdatum). Sets also closingDateMonth The closingDateTs as epoch timestamp in milliseconds.",
            "format": "int64",
            "example": 1546592408000
          },
          "reminderDateTs": {
            "type": "integer",
            "description": "reminderDateTs (Wiedervorlage). The reminderDateTs as epoch timestamp in milliseconds.",
            "format": "int64",
            "example": 1546592408000
          },
          "orderNumber": {
            "type": "string",
            "description": "orderNumber (Bestellnummer)",
            "example": "8698"
          },
          "zoneNumber": {
            "type": "string",
            "description": "zoneNumber (Rechnungskreis). Please check your zone settings in the Scopevisio client application if the field is mandaotry.",
            "example": "3"
          },
          "stateName": {
            "type": "string",
            "description": "state (Angebotsstatus). Sets also state.",
            "example": "abgegeben",
            "enum": [
              "entworfen",
              "abgegeben",
              "angenommen",
              "veraltet",
              "abgelehnt"
            ]
          },
          "valutaDate": {
            "type": "integer",
            "description": "valutaDate (Umsatz-Zeitpunkt).",
            "format": "int64",
            "example": 1548925048000
          },
          "locale": {
            "type": "string",
            "description": "locale (Sprache)",
            "example": "Deutsch"
          }
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/OutgoingInvoiceSalesForm"
          }
        ]
      },
      "OutgoingInvoiceSalesForm": {
        "required": [
          "customerContactId",
          "documentDate"
        ],
        "type": "object",
        "properties": {
          "projectId": {
            "type": "integer",
            "description": "projectId (Projekt). Sets also projectNumber, projectName. Please look up in your sales (Vertriebs-) and/or outgoing invoice settings (Abrechnungseinstellungen) to check if projectId is mandatory.",
            "format": "int64",
            "example": 9809
          },
          "customerContactId": {
            "type": "integer",
            "description": "customerContactId (Lead/Interessent/Kunde). Sets also customerPersonalAccountId, customerPersonalAccountNumber, customerPersonalAccountName, customerPersonalAccountExternalNumber, customerName, customerNameExtra, customerNumber, customerContactName, customerContactCustomerNumber. Must be set if project is not mandatory. Ignored otherwise.",
            "format": "int64",
            "example": 10979
          },
          "customerContactName": {
            "type": "string",
            "description": "customerContactName - the name of the contact with the given customerContactId.",
            "readOnly": true,
            "example": "Muster AG"
          },
          "customerContactCustomerNumber": {
            "type": "string",
            "description": "The customer number of the contact with the given customerContactId. Where to find the value in the Scopevisio client: open contact with master id == customerContactId, go to sphere (Rolle) Allgemein. The field contact number (Kontaktnummer) is the customerContactCustomerNumber.",
            "readOnly": true,
            "example": "G-2018-1"
          },
          "customerPersonalAccountId": {
            "type": "integer",
            "description": "The master id of personal account associated with the contact with the given customerContactId.",
            "format": "int64",
            "readOnly": true,
            "example": 97680
          },
          "customerPersonalAccountNumber": {
            "type": "string",
            "description": "The number of the personal account associated with the contact with the given customerContactId. Where to find the value in the Scopevisio client: open contact with master id == customerContactId, go to sphere (Rolle) Debitor. Field account number (Kontonummer) is the customerPersonalAccountNumber. This field also corresponds to field \"debitorNumber\" from endpoint  /contact/{customerContactId} and field  \"number\" from /debitoraccounts.",
            "readOnly": true,
            "example": "10008"
          },
          "customerPersonalAccountName": {
            "type": "string",
            "description": "The name of the personal account associated with the contact with the given customerContactId. Where to find the value in the Scopevisio client: open contact with master id == customerContactId, go to sphere (Rolle) Debitor. Field account name (Kontoname) is the customerPersonalAccountName. This field also corresponds to field \"name\" from endpoint /debitoraccounts.",
            "readOnly": true,
            "example": "Muster AG"
          },
          "customerPersonalAccountExternalNumber": {
            "type": "string",
            "description": "The customer number of the personal account with the given customerPersonalAccountNumber. Where to find the value in the Scopevisio client: open contact with master id == customerContactId, go to sphere (Rolle) Debitor.  Field customer number (Kundennummer) is the customerPersonalAccountExternalNumber.",
            "readOnly": true,
            "example": "D10008"
          },
          "customerName": {
            "type": "string",
            "description": "This field is for internal use only. Please use field customerContactName.",
            "readOnly": true
          },
          "customerNumber": {
            "type": "string",
            "description": "This field is for internal use only. Please use fields customerContactCustomerNumber or customerPersonalAccountExternalNumber.",
            "readOnly": true
          },
          "customerNameExtra": {
            "type": "string",
            "description": "This field is for internal use only. Please use fields customerContactCustomerNumber or customerPersonalAccountName.",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "description": "name (Bezeichnung)",
            "example": "RE-2018-1, KP für Muster AG vom 27.11.2018"
          },
          "text": {
            "type": "string",
            "description": "text (Beschreibung)",
            "example": "Folgeauftrag"
          },
          "customerContactPerson": {
            "type": "integer",
            "description": "customerContactPerson (Ansprechpartner). Sets also customerContactPersonName. The contact must be an employee of the project contact (contactId).",
            "format": "int64",
            "example": 9809
          },
          "documentDate": {
            "type": "integer",
            "description": "documentDate (PZ-/Angebots-/Auftrags-/Rechnungs-/GS-/LS-Datum). If not given, it is set to the current date. Sets also documentDateMonth.",
            "format": "int64",
            "example": 346234
          },
          "documentNumber": {
            "type": "string",
            "description": "documentNumber (Potenzial-/Angebots-/Auftrags-/Rechnungs-/Gutschrifts-/Lieferscheinnummer).The field is mandatory. If not provided a document number is generated.",
            "example": "Rg-18-090"
          },
          "ourContactPerson": {
            "type": "string",
            "description": "ourContactPerson (Potenzial-/Angebots- Auftrags-/Rechnungs-/Gutschrifts-/Lieferscheinbearbeiter). The UID of a Scopevisio user. The user must have a user contact (Aus Benutzerkontakt) for the current organisation. Setting this field also sets ourContactPersonName.",
            "example": "user_ffffffff-ffff-4351-b1d3-40bbdaa000345"
          },
          "deliveryType": {
            "type": "string",
            "description": "deliveryType (Lieferart).",
            "example": "UPS"
          },
          "deliveryCosts": {
            "type": "number",
            "description": "deliveryCosts (Lieferkosten).",
            "example": 3.95
          },
          "cashOnDelivery": {
            "type": "number",
            "description": "cashOnDelivery (Nachnamegebühr).",
            "example": 5.45
          },
          "textTitle": {
            "type": "string",
            "description": "textTitle (Titel).",
            "example": "Angebot"
          },
          "textSubTitle": {
            "type": "string",
            "description": "textSubTitle (Untertitel).",
            "example": "$Belegnummer"
          },
          "textIntro": {
            "type": "string",
            "description": "textIntro (Einleitungstext). Use \"\\n\" to insert new line.",
            "example": "Sehr geehrte Damen und Herren,\\nwir erlauben uns, Ihnen wie folgt in Rechnung zu stellen:"
          },
          "textExtro": {
            "type": "string",
            "description": "textExtro (Schlusstext). Use \"\\n\" to insert new line.",
            "example": "Wir freuen uns, wenn Ihnen das Angebot zusagt und verbleiben mit freundlichen Grüßen"
          },
          "selectedAddress": {
            "type": "integer",
            "description": "selectedAddress (Adresse [Haupt-/Rechnungs-/Liefer-/freie Adresse]). 0 = Hauptadresse, 1 = Rechnungsadresse, 2 = freie Adresse, 3 = Lieferadresse",
            "format": "int64",
            "example": 1
          },
          "otherAddress": {
            "type": "string",
            "description": "otherAddress (freie Adresse). Use \"\\n\" to insert new line.",
            "example": "Muster AG \\n Musterstraße 5 \\n45345 Musterstadt"
          },
          "gross": {
            "type": "boolean",
            "description": "gross (Preisangabe - Netto/Brutto)"
          },
          "permissionType": {
            "type": "integer",
            "description": "0 = Öffentlich, 1 = Benutzerdefiniert, 2 = Persönlich",
            "format": "int64",
            "example": 1
          },
          "readPermissionProfiles": {
            "type": "string",
            "description": "comma separated list of profiles for the read permissions, evaluated only if permissionType equals 1.",
            "example": "Faktura - alle Rechte,CRM - Alle Rechte"
          },
          "readPermissionLogins": {
            "type": "string",
            "description": "comma separated list of user login emails for the read permissions, evaluated only if permissionType equals 1.",
            "example": "peter.mueller@scopevisio.com,michaela.trimm@scopevisio.com"
          },
          "writePermissionProfiles": {
            "type": "string",
            "description": "comma separated list of profiles for full access, evaluated only if permissionType equals 1.",
            "example": "Firmen und Benutzer - alle Rechte,Finanzen - alle Rechte"
          },
          "writePermissionLogins": {
            "type": "string",
            "description": "comma separated list of user login emails, evaluated only if permissionType equals 1.",
            "example": "stefan.tarn@scopevisio.com"
          },
          "customFields": {
            "type": "array",
            "description": "Benutzerdefinierte Felder",
            "items": {
              "$ref": "#/components/schemas/CustomField"
            }
          },
          "positionsForm": {
            "$ref": "#/components/schemas/OutgoingInvoicePositionsForm"
          },
          "deliveryDate": {
            "type": "integer",
            "description": "deliveryDate (Leistungsdatum). The deliveryDate as epoch timestamp in milliseconds.",
            "format": "int64",
            "example": 1548323982000
          },
          "deliveryDateTo": {
            "type": "integer",
            "description": "deliveryDateTo (Leistungsdatum-bis). The deliveryDateTo as epoch timestamp in milliseconds.",
            "format": "int64",
            "example": 1548410382000
          },
          "isEndDiscountAbsolute": {
            "type": "boolean",
            "description": "isEndDiscountAbsolute (Schlussrabatt), true = absolute, false = percent",
            "example": true
          },
          "endDiscount": {
            "type": "number",
            "description": "endDiscount(Schlussrabatt), if isEndDiscountAbsolute is set to true, then endDiscount should be an amount, if isEndDiscountAbsolute is set to false then a percentage is needed.",
            "example": 5
          },
          "paymentTypeName": {
            "type": "string",
            "description": "paymentTypeName (Zahlungsart). If not provided for new invoice, the payment type from the personal account (connected to the customerContactId) is used. Also sets also paymentType.",
            "enum": [
              "Vorkasse",
              "Überweisung",
              "PayPal",
              "Nachname",
              "Einzugsermächtigung",
              "Rechnung",
              "EC-Karte",
              "Abbuchungsgenehmigung",
              "Bar",
              "Kreditkarte"
            ]
          },
          "isPaid": {
            "type": "boolean",
            "description": "isPaid (Auf exportiertem Beleg als Bezahlt ausweisen)"
          },
          "discountDate1": {
            "type": "integer",
            "description": "discountDate1 (Skontodatum 1). The discountDate1 as epoch timestamp in milliseconds. If it is set either discountPercent1 or discountAmount1 must be set. If one of the payment term properties is provided (discountDate1, discountDate2, dueDate, discountPercent1, discountPercent2, discountAmount1, discountAmount2) when creating an invoice, then the form is used. Otherwise the payment term from the personal account (connected to the customerContactId) is used.",
            "format": "int64",
            "example": 1546592408000
          },
          "discountDate2": {
            "type": "integer",
            "description": "discountDate2 (Skontodatum 2). The discountDate2 as epoch timestamp in milliseconds. It must be greater than discountDate1. If it is set either discountPercent2 or discountAmount2 must be set.",
            "format": "int64",
            "example": 1548752248000
          },
          "dueDate": {
            "type": "integer",
            "description": "dueDate (Fälligkeitsdatum). The dueDate as epoch timestamp in milliseconds. It must be greater than discountDate2.",
            "format": "int64",
            "example": 1548925048000
          },
          "discountPercent1": {
            "type": "number",
            "description": "discountPercent1 (Skontosatz1). Either discount percent(s) or discount amount(s) are allowed. Setting both is not possible. If set discountDate1 must be set too.",
            "example": 10
          },
          "discountPercent2": {
            "type": "number",
            "description": "discountPercent2 (Skontosatz2). Either discount percent(s) or discount amount(s) are allowed. Setting both is not possible. If set discountDate2 must be set too.",
            "example": 5
          },
          "explicitDiscount": {
            "type": "boolean",
            "description": "explicitDiscount (Skontobeträge manuell eingeben). If set discountAmount(s) must be provided"
          },
          "discountAmount1": {
            "type": "number",
            "description": "discountAmount1 (Skontobetrag1). Only evaluated if explicitDiscount is true. If set discountDate1 must be set too.",
            "example": 15
          },
          "discountAmount2": {
            "type": "number",
            "description": "discountAmount2 (Skontobetrag2). Only evaluated if explicitDiscount is true. If set discountDate2 must be set too.",
            "example": 5
          },
          "salesPhase": {
            "type": "string",
            "description": "salesPhase (Potenzial-/Angebotsphase).  Please check your catalog in the Scopevisio desktop client for allowable values.",
            "example": "Grundbetreuung",
            "enum": [
              "Qualifizierungsphase",
              "Grundbetreuung",
              "Intensivbetreuung",
              "Angebotsbetreuung",
              "Preisverhandlung",
              "Abschlussverhandlung",
              "unverbindliche Zusage (z.B. mündliche Zusage)",
              "verbindliche Zusage (Auftrag, Vertrag)"
            ]
          },
          "salesClassification": {
            "type": "string",
            "description": "salesClassification (Angebotspriorität).  Please check your catalog in the Scopevisio desktop client for allowable values.",
            "example": "B Priorität (wichtig und nicht dringlich)",
            "enum": [
              "VIP Priorität (sehr wichtig und sehr dringlich)",
              "A Priorität (wichtig und dringlich)",
              "B Priorität (wichtig und nicht dringlich)",
              "C Priorität (nicht wichtig und dringlich)",
              "D Priorität (nicht wichtig und nicht dringlich)",
              "E Priorität (direkt verwerfen)"
            ]
          },
          "salesActivity": {
            "type": "string",
            "description": "salesActivity (Folgeaktivität).  Please check your catalog in the Scopevisio desktop client for allowable values.",
            "example": "Angebot erläutern",
            "enum": [
              "1. Anruf ",
              "2. Anruf",
              "3. Anruf",
              "zurückrufen",
              "E-Mail senden",
              "Webinar abhalten",
              "Prospekte zusenden",
              "Angebot erläutern"
            ]
          },
          "phase": {
            "type": "string",
            "description": "phase (Verkaufswahrscheinlichkeit).  Sets also phaseId. Please check your catalog in the Scopevisio desktop client for allowable values.",
            "example": "Abschlussverhandlungen führen",
            "enum": [
              "Auftrag wurde verbindlich erteilt",
              "Vorvertrag wurde geschlossen",
              "Abschlussverhandlungen führen",
              "Interessent erteilt mündliche Zusage",
              "Interessent favorisiert unser Angebot",
              "Entscheidung herbeiführen",
              "Interessent signalisiert deutliches Interesse",
              "Nutzenargumentation aufbauen",
              "Angebot abgegeben",
              "Angebot in Abstimmung",
              "Potenzial qualifizieren",
              "Potenzial identifizieren",
              "Individuelle Vertriebsaktivität gestartet",
              "Bedarf qualifiziert",
              "Bedarf identifiziert",
              "keine Prognose",
              "ungewichtet",
              "verloren"
            ]
          },
          "feasibility": {
            "type": "number",
            "description": "feasibility (Verkaufswahrscheinlichkeit %)",
            "example": 22.5
          },
          "closingDateTs": {
            "type": "integer",
            "description": "closingDateTs (Entscheidungsdatum). Sets also closingDateMonth The closingDateTs as epoch timestamp in milliseconds.",
            "format": "int64",
            "example": 1546592408000
          },
          "reminderDateTs": {
            "type": "integer",
            "description": "reminderDateTs (Wiedervorlage). The reminderDateTs as epoch timestamp in milliseconds.",
            "format": "int64",
            "example": 1546592408000
          }
        }
      },
      "OpportunityForm": {
        "required": [
          "customerContactId",
          "documentDate"
        ],
        "type": "object",
        "properties": {
          "projectId": {
            "type": "integer",
            "description": "projectId (Projekt). Sets also projectNumber, projectName. Please look up in your sales (Vertriebs-) and/or outgoing invoice settings (Abrechnungseinstellungen) to check if projectId is mandatory.",
            "format": "int64",
            "example": 9809
          },
          "customerContactId": {
            "type": "integer",
            "description": "customerContactId (Lead/Interessent/Kunde). Sets also customerPersonalAccountId, customerPersonalAccountNumber, customerPersonalAccountName, customerPersonalAccountExternalNumber, customerName, customerNameExtra, customerNumber, customerContactName, customerContactCustomerNumber. Must be set if project is not mandatory. Ignored otherwise.",
            "format": "int64",
            "example": 10979
          },
          "customerContactName": {
            "type": "string",
            "description": "customerContactName - the name of the contact with the given customerContactId.",
            "readOnly": true,
            "example": "Muster AG"
          },
          "customerContactCustomerNumber": {
            "type": "string",
            "description": "The customer number of the contact with the given customerContactId. Where to find the value in the Scopevisio client: open contact with master id == customerContactId, go to sphere (Rolle) Allgemein. The field contact number (Kontaktnummer) is the customerContactCustomerNumber.",
            "readOnly": true,
            "example": "G-2018-1"
          },
          "customerPersonalAccountId": {
            "type": "integer",
            "description": "The master id of personal account associated with the contact with the given customerContactId.",
            "format": "int64",
            "readOnly": true,
            "example": 97680
          },
          "customerPersonalAccountNumber": {
            "type": "string",
            "description": "The number of the personal account associated with the contact with the given customerContactId. Where to find the value in the Scopevisio client: open contact with master id == customerContactId, go to sphere (Rolle) Debitor. Field account number (Kontonummer) is the customerPersonalAccountNumber. This field also corresponds to field \"debitorNumber\" from endpoint  /contact/{customerContactId} and field  \"number\" from /debitoraccounts.",
            "readOnly": true,
            "example": "10008"
          },
          "customerPersonalAccountName": {
            "type": "string",
            "description": "The name of the personal account associated with the contact with the given customerContactId. Where to find the value in the Scopevisio client: open contact with master id == customerContactId, go to sphere (Rolle) Debitor. Field account name (Kontoname) is the customerPersonalAccountName. This field also corresponds to field \"name\" from endpoint /debitoraccounts.",
            "readOnly": true,
            "example": "Muster AG"
          },
          "customerPersonalAccountExternalNumber": {
            "type": "string",
            "description": "The customer number of the personal account with the given customerPersonalAccountNumber. Where to find the value in the Scopevisio client: open contact with master id == customerContactId, go to sphere (Rolle) Debitor.  Field customer number (Kundennummer) is the customerPersonalAccountExternalNumber.",
            "readOnly": true,
            "example": "D10008"
          },
          "customerName": {
            "type": "string",
            "description": "This field is for internal use only. Please use field customerContactName.",
            "readOnly": true
          },
          "customerNumber": {
            "type": "string",
            "description": "This field is for internal use only. Please use fields customerContactCustomerNumber or customerPersonalAccountExternalNumber.",
            "readOnly": true
          },
          "customerNameExtra": {
            "type": "string",
            "description": "This field is for internal use only. Please use fields customerContactCustomerNumber or customerPersonalAccountName.",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "description": "name (Bezeichnung)",
            "example": "RE-2018-1, KP für Muster AG vom 27.11.2018"
          },
          "text": {
            "type": "string",
            "description": "text (Beschreibung)",
            "example": "Folgeauftrag"
          },
          "customerContactPerson": {
            "type": "integer",
            "description": "customerContactPerson (Ansprechpartner). Sets also customerContactPersonName. The contact must be an employee of the project contact (contactId).",
            "format": "int64",
            "example": 9809
          },
          "documentDate": {
            "type": "integer",
            "description": "documentDate (PZ-/Angebots-/Auftrags-/Rechnungs-/GS-/LS-Datum). If not given, it is set to the current date. Sets also documentDateMonth.",
            "format": "int64",
            "example": 346234
          },
          "documentNumber": {
            "type": "string",
            "description": "documentNumber (Potenzial-/Angebots-/Auftrags-/Rechnungs-/Gutschrifts-/Lieferscheinnummer).The field is mandatory. If not provided a document number is generated.",
            "example": "Rg-18-090"
          },
          "ourContactPerson": {
            "type": "string",
            "description": "ourContactPerson (Potenzial-/Angebots- Auftrags-/Rechnungs-/Gutschrifts-/Lieferscheinbearbeiter). The UID of a Scopevisio user. The user must have a user contact (Aus Benutzerkontakt) for the current organisation. Setting this field also sets ourContactPersonName.",
            "example": "user_ffffffff-ffff-4351-b1d3-40bbdaa000345"
          },
          "deliveryType": {
            "type": "string",
            "description": "deliveryType (Lieferart).",
            "example": "UPS"
          },
          "deliveryCosts": {
            "type": "number",
            "description": "deliveryCosts (Lieferkosten).",
            "example": 3.95
          },
          "cashOnDelivery": {
            "type": "number",
            "description": "cashOnDelivery (Nachnamegebühr).",
            "example": 5.45
          },
          "textTitle": {
            "type": "string",
            "description": "textTitle (Titel).",
            "example": "Angebot"
          },
          "textSubTitle": {
            "type": "string",
            "description": "textSubTitle (Untertitel).",
            "example": "$Belegnummer"
          },
          "textIntro": {
            "type": "string",
            "description": "textIntro (Einleitungstext). Use \"\\n\" to insert new line.",
            "example": "Sehr geehrte Damen und Herren,\\nwir erlauben uns, Ihnen wie folgt in Rechnung zu stellen:"
          },
          "textExtro": {
            "type": "string",
            "description": "textExtro (Schlusstext). Use \"\\n\" to insert new line.",
            "example": "Wir freuen uns, wenn Ihnen das Angebot zusagt und verbleiben mit freundlichen Grüßen"
          },
          "selectedAddress": {
            "type": "integer",
            "description": "selectedAddress (Adresse [Haupt-/Rechnungs-/Liefer-/freie Adresse]). 0 = Hauptadresse, 1 = Rechnungsadresse, 2 = freie Adresse, 3 = Lieferadresse",
            "format": "int64",
            "example": 1
          },
          "otherAddress": {
            "type": "string",
            "description": "otherAddress (freie Adresse). Use \"\\n\" to insert new line.",
            "example": "Muster AG \\n Musterstraße 5 \\n45345 Musterstadt"
          },
          "gross": {
            "type": "boolean",
            "description": "gross (Preisangabe - Netto/Brutto)"
          },
          "permissionType": {
            "type": "integer",
            "description": "0 = Öffentlich, 1 = Benutzerdefiniert, 2 = Persönlich",
            "format": "int64",
            "example": 1
          },
          "readPermissionProfiles": {
            "type": "string",
            "description": "comma separated list of profiles for the read permissions, evaluated only if permissionType equals 1.",
            "example": "Faktura - alle Rechte,CRM - Alle Rechte"
          },
          "readPermissionLogins": {
            "type": "string",
            "description": "comma separated list of user login emails for the read permissions, evaluated only if permissionType equals 1.",
            "example": "peter.mueller@scopevisio.com,michaela.trimm@scopevisio.com"
          },
          "writePermissionProfiles": {
            "type": "string",
            "description": "comma separated list of profiles for full access, evaluated only if permissionType equals 1.",
            "example": "Firmen und Benutzer - alle Rechte,Finanzen - alle Rechte"
          },
          "writePermissionLogins": {
            "type": "string",
            "description": "comma separated list of user login emails, evaluated only if permissionType equals 1.",
            "example": "stefan.tarn@scopevisio.com"
          },
          "customFields": {
            "type": "array",
            "description": "Benutzerdefinierte Felder",
            "items": {
              "$ref": "#/components/schemas/CustomField"
            }
          },
          "positionsForm": {
            "$ref": "#/components/schemas/OutgoingInvoicePositionsForm"
          },
          "deliveryDate": {
            "type": "integer",
            "description": "deliveryDate (Leistungsdatum). The deliveryDate as epoch timestamp in milliseconds.",
            "format": "int64",
            "example": 1548323982000
          },
          "deliveryDateTo": {
            "type": "integer",
            "description": "deliveryDateTo (Leistungsdatum-bis). The deliveryDateTo as epoch timestamp in milliseconds.",
            "format": "int64",
            "example": 1548410382000
          },
          "isEndDiscountAbsolute": {
            "type": "boolean",
            "description": "isEndDiscountAbsolute (Schlussrabatt), true = absolute, false = percent",
            "example": true
          },
          "endDiscount": {
            "type": "number",
            "description": "endDiscount(Schlussrabatt), if isEndDiscountAbsolute is set to true, then endDiscount should be an amount, if isEndDiscountAbsolute is set to false then a percentage is needed.",
            "example": 5
          },
          "paymentTypeName": {
            "type": "string",
            "description": "paymentTypeName (Zahlungsart). If not provided for new invoice, the payment type from the personal account (connected to the customerContactId) is used. Also sets also paymentType.",
            "enum": [
              "Vorkasse",
              "Überweisung",
              "PayPal",
              "Nachname",
              "Einzugsermächtigung",
              "Rechnung",
              "EC-Karte",
              "Abbuchungsgenehmigung",
              "Bar",
              "Kreditkarte"
            ]
          },
          "isPaid": {
            "type": "boolean",
            "description": "isPaid (Auf exportiertem Beleg als Bezahlt ausweisen)"
          },
          "discountDate1": {
            "type": "integer",
            "description": "discountDate1 (Skontodatum 1). The discountDate1 as epoch timestamp in milliseconds. If it is set either discountPercent1 or discountAmount1 must be set. If one of the payment term properties is provided (discountDate1, discountDate2, dueDate, discountPercent1, discountPercent2, discountAmount1, discountAmount2) when creating an invoice, then the form is used. Otherwise the payment term from the personal account (connected to the customerContactId) is used.",
            "format": "int64",
            "example": 1546592408000
          },
          "discountDate2": {
            "type": "integer",
            "description": "discountDate2 (Skontodatum 2). The discountDate2 as epoch timestamp in milliseconds. It must be greater than discountDate1. If it is set either discountPercent2 or discountAmount2 must be set.",
            "format": "int64",
            "example": 1548752248000
          },
          "dueDate": {
            "type": "integer",
            "description": "dueDate (Fälligkeitsdatum). The dueDate as epoch timestamp in milliseconds. It must be greater than discountDate2.",
            "format": "int64",
            "example": 1548925048000
          },
          "discountPercent1": {
            "type": "number",
            "description": "discountPercent1 (Skontosatz1). Either discount percent(s) or discount amount(s) are allowed. Setting both is not possible. If set discountDate1 must be set too.",
            "example": 10
          },
          "discountPercent2": {
            "type": "number",
            "description": "discountPercent2 (Skontosatz2). Either discount percent(s) or discount amount(s) are allowed. Setting both is not possible. If set discountDate2 must be set too.",
            "example": 5
          },
          "explicitDiscount": {
            "type": "boolean",
            "description": "explicitDiscount (Skontobeträge manuell eingeben). If set discountAmount(s) must be provided"
          },
          "discountAmount1": {
            "type": "number",
            "description": "discountAmount1 (Skontobetrag1). Only evaluated if explicitDiscount is true. If set discountDate1 must be set too.",
            "example": 15
          },
          "discountAmount2": {
            "type": "number",
            "description": "discountAmount2 (Skontobetrag2). Only evaluated if explicitDiscount is true. If set discountDate2 must be set too.",
            "example": 5
          },
          "salesPhase": {
            "type": "string",
            "description": "salesPhase (Potenzial-/Angebotsphase).  Please check your catalog in the Scopevisio desktop client for allowable values.",
            "example": "Grundbetreuung",
            "enum": [
              "Qualifizierungsphase",
              "Grundbetreuung",
              "Intensivbetreuung",
              "Angebotsbetreuung",
              "Preisverhandlung",
              "Abschlussverhandlung",
              "unverbindliche Zusage (z.B. mündliche Zusage)",
              "verbindliche Zusage (Auftrag, Vertrag)"
            ]
          },
          "salesClassification": {
            "type": "string",
            "description": "salesClassification (Angebotspriorität).  Please check your catalog in the Scopevisio desktop client for allowable values.",
            "example": "B Priorität (wichtig und nicht dringlich)",
            "enum": [
              "VIP Priorität (sehr wichtig und sehr dringlich)",
              "A Priorität (wichtig und dringlich)",
              "B Priorität (wichtig und nicht dringlich)",
              "C Priorität (nicht wichtig und dringlich)",
              "D Priorität (nicht wichtig und nicht dringlich)",
              "E Priorität (direkt verwerfen)"
            ]
          },
          "salesActivity": {
            "type": "string",
            "description": "salesActivity (Folgeaktivität).  Please check your catalog in the Scopevisio desktop client for allowable values.",
            "example": "Angebot erläutern",
            "enum": [
              "1. Anruf ",
              "2. Anruf",
              "3. Anruf",
              "zurückrufen",
              "E-Mail senden",
              "Webinar abhalten",
              "Prospekte zusenden",
              "Angebot erläutern"
            ]
          },
          "phase": {
            "type": "string",
            "description": "phase (Verkaufswahrscheinlichkeit).  Sets also phaseId. Please check your catalog in the Scopevisio desktop client for allowable values.",
            "example": "Abschlussverhandlungen führen",
            "enum": [
              "Auftrag wurde verbindlich erteilt",
              "Vorvertrag wurde geschlossen",
              "Abschlussverhandlungen führen",
              "Interessent erteilt mündliche Zusage",
              "Interessent favorisiert unser Angebot",
              "Entscheidung herbeiführen",
              "Interessent signalisiert deutliches Interesse",
              "Nutzenargumentation aufbauen",
              "Angebot abgegeben",
              "Angebot in Abstimmung",
              "Potenzial qualifizieren",
              "Potenzial identifizieren",
              "Individuelle Vertriebsaktivität gestartet",
              "Bedarf qualifiziert",
              "Bedarf identifiziert",
              "keine Prognose",
              "ungewichtet",
              "verloren"
            ]
          },
          "feasibility": {
            "type": "number",
            "description": "feasibility (Verkaufswahrscheinlichkeit %)",
            "example": 22.5
          },
          "closingDateTs": {
            "type": "integer",
            "description": "closingDateTs (Entscheidungsdatum). Sets also closingDateMonth The closingDateTs as epoch timestamp in milliseconds.",
            "format": "int64",
            "example": 1546592408000
          },
          "reminderDateTs": {
            "type": "integer",
            "description": "reminderDateTs (Wiedervorlage). The reminderDateTs as epoch timestamp in milliseconds.",
            "format": "int64",
            "example": 1546592408000
          },
          "stateName": {
            "type": "string",
            "description": "state (PZ-Status). Sets also state.",
            "example": "erstellt",
            "enum": [
              "identifiziert",
              "erstellt",
              "qualifiziert",
              "überführt",
              "verworfen"
            ]
          }
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/OutgoingInvoiceSalesForm"
          }
        ]
      },
      "OptInForm": {
        "required": [
          "confirmEmailSubject",
          "confirmEmailTemplateId",
          "confirmPageTemplateId",
          "email"
        ],
        "type": "object",
        "properties": {
          "confirmEmailTemplateId": {
            "type": "integer",
            "description": "ID des Double-Opt-In-Mail Dokumentenlayouts",
            "format": "int64",
            "example": 1
          },
          "confirmEmailSubject": {
            "type": "string",
            "description": "Betreff der Double-Opt-In-Mail",
            "example": "Bitte bestätigen Sie Ihre Anmeldung"
          },
          "confirmPageTemplateId": {
            "type": "integer",
            "description": "ID der Double-Opt-In Bestätigungsseite Dokumentenlayouts",
            "format": "int64",
            "example": 2
          },
          "email": {
            "type": "string",
            "description": "E-Mail-Addresse",
            "example": "info@mueller-gmbh.de"
          },
          "salutation": {
            "type": "string",
            "description": "Anrede",
            "example": "Herr",
            "enum": [
              "Herr",
              "Frau",
              "Familie",
              "Eheleute"
            ]
          },
          "title": {
            "type": "string",
            "description": "Titel",
            "example": "Dr.",
            "enum": [
              "Bachelor",
              "Master",
              "Magister",
              "Lizentiat",
              "Diplom (FH)",
              "Diplom",
              "Ph.D.",
              "Dr.",
              "Dr. mult.",
              "Dr. habil.",
              "Dr. h.c.",
              "Dr. e.h.",
              "Prof.",
              "Prof. Dr."
            ]
          },
          "firstName": {
            "type": "string",
            "description": "Vorname",
            "example": "Peter"
          },
          "lastName": {
            "type": "string",
            "description": "Nachname",
            "example": "Müller"
          },
          "federalState": {
            "type": "string",
            "description": "Bundesland",
            "example": "Nordrhein-Westfalen"
          },
          "street": {
            "type": "string",
            "description": "Straße und Hausnummer",
            "example": "Hautpstr. 10"
          },
          "addressExtra": {
            "type": "string",
            "description": "Zustellanweisung [c/o]"
          },
          "city": {
            "type": "string",
            "description": "Stadt [Hauptadresse]",
            "example": "Köln"
          },
          "postcode": {
            "type": "string",
            "description": "Postleitzahl [Hauptadresse]",
            "example": "50667"
          },
          "country": {
            "type": "string",
            "description": "Land [Hauptadresse]",
            "example": "Deutschland"
          },
          "phone": {
            "type": "string",
            "description": "Telefon [Geschäftlich]",
            "example": "0228 334 8756"
          },
          "source": {
            "type": "string",
            "description": "Quelle",
            "example": "Newsletter"
          },
          "tags": {
            "type": "string",
            "description": "Schlagwörter",
            "example": "Schlagwort1 Schlagwort2"
          }
        }
      },
      "OrderForm": {
        "required": [
          "customerContactId",
          "documentDate"
        ],
        "type": "object",
        "properties": {
          "projectId": {
            "type": "integer",
            "description": "projectId (Projekt). Sets also projectNumber, projectName. Please look up in your sales (Vertriebs-) and/or outgoing invoice settings (Abrechnungseinstellungen) to check if projectId is mandatory.",
            "format": "int64",
            "example": 9809
          },
          "customerContactId": {
            "type": "integer",
            "description": "customerContactId (Lead/Interessent/Kunde). Sets also customerPersonalAccountId, customerPersonalAccountNumber, customerPersonalAccountName, customerPersonalAccountExternalNumber, customerName, customerNameExtra, customerNumber, customerContactName, customerContactCustomerNumber. Must be set if project is not mandatory. Ignored otherwise.",
            "format": "int64",
            "example": 10979
          },
          "customerContactName": {
            "type": "string",
            "description": "customerContactName - the name of the contact with the given customerContactId.",
            "readOnly": true,
            "example": "Muster AG"
          },
          "customerContactCustomerNumber": {
            "type": "string",
            "description": "The customer number of the contact with the given customerContactId. Where to find the value in the Scopevisio client: open contact with master id == customerContactId, go to sphere (Rolle) Allgemein. The field contact number (Kontaktnummer) is the customerContactCustomerNumber.",
            "readOnly": true,
            "example": "G-2018-1"
          },
          "customerPersonalAccountId": {
            "type": "integer",
            "description": "The master id of personal account associated with the contact with the given customerContactId.",
            "format": "int64",
            "readOnly": true,
            "example": 97680
          },
          "customerPersonalAccountNumber": {
            "type": "string",
            "description": "The number of the personal account associated with the contact with the given customerContactId. Where to find the value in the Scopevisio client: open contact with master id == customerContactId, go to sphere (Rolle) Debitor. Field account number (Kontonummer) is the customerPersonalAccountNumber. This field also corresponds to field \"debitorNumber\" from endpoint  /contact/{customerContactId} and field  \"number\" from /debitoraccounts.",
            "readOnly": true,
            "example": "10008"
          },
          "customerPersonalAccountName": {
            "type": "string",
            "description": "The name of the personal account associated with the contact with the given customerContactId. Where to find the value in the Scopevisio client: open contact with master id == customerContactId, go to sphere (Rolle) Debitor. Field account name (Kontoname) is the customerPersonalAccountName. This field also corresponds to field \"name\" from endpoint /debitoraccounts.",
            "readOnly": true,
            "example": "Muster AG"
          },
          "customerPersonalAccountExternalNumber": {
            "type": "string",
            "description": "The customer number of the personal account with the given customerPersonalAccountNumber. Where to find the value in the Scopevisio client: open contact with master id == customerContactId, go to sphere (Rolle) Debitor.  Field customer number (Kundennummer) is the customerPersonalAccountExternalNumber.",
            "readOnly": true,
            "example": "D10008"
          },
          "customerName": {
            "type": "string",
            "description": "This field is for internal use only. Please use field customerContactName.",
            "readOnly": true
          },
          "customerNumber": {
            "type": "string",
            "description": "This field is for internal use only. Please use fields customerContactCustomerNumber or customerPersonalAccountExternalNumber.",
            "readOnly": true
          },
          "customerNameExtra": {
            "type": "string",
            "description": "This field is for internal use only. Please use fields customerContactCustomerNumber or customerPersonalAccountName.",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "description": "name (Bezeichnung)",
            "example": "RE-2018-1, KP für Muster AG vom 27.11.2018"
          },
          "text": {
            "type": "string",
            "description": "text (Beschreibung)",
            "example": "Folgeauftrag"
          },
          "customerContactPerson": {
            "type": "integer",
            "description": "customerContactPerson (Ansprechpartner). Sets also customerContactPersonName. The contact must be an employee of the project contact (contactId).",
            "format": "int64",
            "example": 9809
          },
          "documentDate": {
            "type": "integer",
            "description": "documentDate (PZ-/Angebots-/Auftrags-/Rechnungs-/GS-/LS-Datum). If not given, it is set to the current date. Sets also documentDateMonth.",
            "format": "int64",
            "example": 346234
          },
          "documentNumber": {
            "type": "string",
            "description": "documentNumber (Potenzial-/Angebots-/Auftrags-/Rechnungs-/Gutschrifts-/Lieferscheinnummer).The field is mandatory. If not provided a document number is generated.",
            "example": "Rg-18-090"
          },
          "ourContactPerson": {
            "type": "string",
            "description": "ourContactPerson (Potenzial-/Angebots- Auftrags-/Rechnungs-/Gutschrifts-/Lieferscheinbearbeiter). The UID of a Scopevisio user. The user must have a user contact (Aus Benutzerkontakt) for the current organisation. Setting this field also sets ourContactPersonName.",
            "example": "user_ffffffff-ffff-4351-b1d3-40bbdaa000345"
          },
          "deliveryType": {
            "type": "string",
            "description": "deliveryType (Lieferart).",
            "example": "UPS"
          },
          "deliveryCosts": {
            "type": "number",
            "description": "deliveryCosts (Lieferkosten).",
            "example": 3.95
          },
          "cashOnDelivery": {
            "type": "number",
            "description": "cashOnDelivery (Nachnamegebühr).",
            "example": 5.45
          },
          "textTitle": {
            "type": "string",
            "description": "textTitle (Titel).",
            "example": "Angebot"
          },
          "textSubTitle": {
            "type": "string",
            "description": "textSubTitle (Untertitel).",
            "example": "$Belegnummer"
          },
          "textIntro": {
            "type": "string",
            "description": "textIntro (Einleitungstext). Use \"\\n\" to insert new line.",
            "example": "Sehr geehrte Damen und Herren,\\nwir erlauben uns, Ihnen wie folgt in Rechnung zu stellen:"
          },
          "textExtro": {
            "type": "string",
            "description": "textExtro (Schlusstext). Use \"\\n\" to insert new line.",
            "example": "Wir freuen uns, wenn Ihnen das Angebot zusagt und verbleiben mit freundlichen Grüßen"
          },
          "selectedAddress": {
            "type": "integer",
            "description": "selectedAddress (Adresse [Haupt-/Rechnungs-/Liefer-/freie Adresse]). 0 = Hauptadresse, 1 = Rechnungsadresse, 2 = freie Adresse, 3 = Lieferadresse",
            "format": "int64",
            "example": 1
          },
          "otherAddress": {
            "type": "string",
            "description": "otherAddress (freie Adresse). Use \"\\n\" to insert new line.",
            "example": "Muster AG \\n Musterstraße 5 \\n45345 Musterstadt"
          },
          "gross": {
            "type": "boolean",
            "description": "gross (Preisangabe - Netto/Brutto)"
          },
          "permissionType": {
            "type": "integer",
            "description": "0 = Öffentlich, 1 = Benutzerdefiniert, 2 = Persönlich",
            "format": "int64",
            "example": 1
          },
          "readPermissionProfiles": {
            "type": "string",
            "description": "comma separated list of profiles for the read permissions, evaluated only if permissionType equals 1.",
            "example": "Faktura - alle Rechte,CRM - Alle Rechte"
          },
          "readPermissionLogins": {
            "type": "string",
            "description": "comma separated list of user login emails for the read permissions, evaluated only if permissionType equals 1.",
            "example": "peter.mueller@scopevisio.com,michaela.trimm@scopevisio.com"
          },
          "writePermissionProfiles": {
            "type": "string",
            "description": "comma separated list of profiles for full access, evaluated only if permissionType equals 1.",
            "example": "Firmen und Benutzer - alle Rechte,Finanzen - alle Rechte"
          },
          "writePermissionLogins": {
            "type": "string",
            "description": "comma separated list of user login emails, evaluated only if permissionType equals 1.",
            "example": "stefan.tarn@scopevisio.com"
          },
          "customFields": {
            "type": "array",
            "description": "Benutzerdefinierte Felder",
            "items": {
              "$ref": "#/components/schemas/CustomField"
            }
          },
          "positionsForm": {
            "$ref": "#/components/schemas/OutgoingInvoicePositionsForm"
          },
          "deliveryDate": {
            "type": "integer",
            "description": "deliveryDate (Leistungsdatum). The deliveryDate as epoch timestamp in milliseconds.",
            "format": "int64",
            "example": 1548323982000
          },
          "deliveryDateTo": {
            "type": "integer",
            "description": "deliveryDateTo (Leistungsdatum-bis). The deliveryDateTo as epoch timestamp in milliseconds.",
            "format": "int64",
            "example": 1548410382000
          },
          "isEndDiscountAbsolute": {
            "type": "boolean",
            "description": "isEndDiscountAbsolute (Schlussrabatt), true = absolute, false = percent",
            "example": true
          },
          "endDiscount": {
            "type": "number",
            "description": "endDiscount(Schlussrabatt), if isEndDiscountAbsolute is set to true, then endDiscount should be an amount, if isEndDiscountAbsolute is set to false then a percentage is needed.",
            "example": 5
          },
          "paymentTypeName": {
            "type": "string",
            "description": "paymentTypeName (Zahlungsart). If not provided for new invoice, the payment type from the personal account (connected to the customerContactId) is used. Also sets also paymentType.",
            "enum": [
              "Vorkasse",
              "Überweisung",
              "PayPal",
              "Nachname",
              "Einzugsermächtigung",
              "Rechnung",
              "EC-Karte",
              "Abbuchungsgenehmigung",
              "Bar",
              "Kreditkarte"
            ]
          },
          "isPaid": {
            "type": "boolean",
            "description": "isPaid (Auf exportiertem Beleg als Bezahlt ausweisen)"
          },
          "discountDate1": {
            "type": "integer",
            "description": "discountDate1 (Skontodatum 1). The discountDate1 as epoch timestamp in milliseconds. If it is set either discountPercent1 or discountAmount1 must be set. If one of the payment term properties is provided (discountDate1, discountDate2, dueDate, discountPercent1, discountPercent2, discountAmount1, discountAmount2) when creating an invoice, then the form is used. Otherwise the payment term from the personal account (connected to the customerContactId) is used.",
            "format": "int64",
            "example": 1546592408000
          },
          "discountDate2": {
            "type": "integer",
            "description": "discountDate2 (Skontodatum 2). The discountDate2 as epoch timestamp in milliseconds. It must be greater than discountDate1. If it is set either discountPercent2 or discountAmount2 must be set.",
            "format": "int64",
            "example": 1548752248000
          },
          "dueDate": {
            "type": "integer",
            "description": "dueDate (Fälligkeitsdatum). The dueDate as epoch timestamp in milliseconds. It must be greater than discountDate2.",
            "format": "int64",
            "example": 1548925048000
          },
          "discountPercent1": {
            "type": "number",
            "description": "discountPercent1 (Skontosatz1). Either discount percent(s) or discount amount(s) are allowed. Setting both is not possible. If set discountDate1 must be set too.",
            "example": 10
          },
          "discountPercent2": {
            "type": "number",
            "description": "discountPercent2 (Skontosatz2). Either discount percent(s) or discount amount(s) are allowed. Setting both is not possible. If set discountDate2 must be set too.",
            "example": 5
          },
          "explicitDiscount": {
            "type": "boolean",
            "description": "explicitDiscount (Skontobeträge manuell eingeben). If set discountAmount(s) must be provided"
          },
          "discountAmount1": {
            "type": "number",
            "description": "discountAmount1 (Skontobetrag1). Only evaluated if explicitDiscount is true. If set discountDate1 must be set too.",
            "example": 15
          },
          "discountAmount2": {
            "type": "number",
            "description": "discountAmount2 (Skontobetrag2). Only evaluated if explicitDiscount is true. If set discountDate2 must be set too.",
            "example": 5
          },
          "orderNumber": {
            "type": "string",
            "description": "orderNumber (Bestellnummer)",
            "example": "8698"
          },
          "zoneNumber": {
            "type": "string",
            "description": "zoneNumber (Rechnungskreis). Please check your zone settings in the Scopevisio client application if the field is mandaotry.",
            "example": "3"
          },
          "stateName": {
            "type": "string",
            "description": "state (Status des Auftrags). Sets also state.",
            "example": "ausgeliefert",
            "enum": [
              "erteilt",
              "ausgeliefert",
              "abgerechnet",
              "storniert"
            ]
          },
          "locale": {
            "type": "string",
            "description": "locale (Sprache)",
            "example": "Deutsch"
          }
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/OutgoingInvoiceWithPaymentTermForm"
          }
        ]
      },
      "OrganisationForm": {
        "required": [
          "organisationName"
        ],
        "type": "object",
        "properties": {
          "organisationName": {
            "type": "string",
            "description": "organisationName. The name of the organisation to be created.",
            "example": "Musterfirma"
          },
          "scoa": {
            "type": "string",
            "description": "scoa. The whished standard chart of accounts. If not given it is not set up. This must be done manually by the user.  See also <a href='../browser/index.html#!/documentation#scoa'>our documentation</a> for detailed description of the chart of accounts.",
            "example": "SKR 03",
            "enum": [
              "SKR 03",
              "SKR 04",
              "SKR04 IFRS",
              "SKR03 IFRS IAS",
              "SKR 14",
              "SKR 45 PBV",
              "SKR 49",
              "SKR 70",
              "SKR 80",
              "SKR 81",
              "KHBV",
              "Individuell"
            ]
          }
        }
      },
      "OutgoingInvoiceForm": {
        "required": [
          "customerContactId",
          "documentDate"
        ],
        "type": "object",
        "properties": {
          "projectId": {
            "type": "integer",
            "description": "projectId (Projekt). Sets also projectNumber, projectName. Please look up in your sales (Vertriebs-) and/or outgoing invoice settings (Abrechnungseinstellungen) to check if projectId is mandatory.",
            "format": "int64",
            "example": 9809
          },
          "customerContactId": {
            "type": "integer",
            "description": "customerContactId (Lead/Interessent/Kunde). Sets also customerPersonalAccountId, customerPersonalAccountNumber, customerPersonalAccountName, customerPersonalAccountExternalNumber, customerName, customerNameExtra, customerNumber, customerContactName, customerContactCustomerNumber. Must be set if project is not mandatory. Ignored otherwise.",
            "format": "int64",
            "example": 10979
          },
          "customerContactName": {
            "type": "string",
            "description": "customerContactName - the name of the contact with the given customerContactId.",
            "readOnly": true,
            "example": "Muster AG"
          },
          "customerContactCustomerNumber": {
            "type": "string",
            "description": "The customer number of the contact with the given customerContactId. Where to find the value in the Scopevisio client: open contact with master id == customerContactId, go to sphere (Rolle) Allgemein. The field contact number (Kontaktnummer) is the customerContactCustomerNumber.",
            "readOnly": true,
            "example": "G-2018-1"
          },
          "customerPersonalAccountId": {
            "type": "integer",
            "description": "The master id of personal account associated with the contact with the given customerContactId.",
            "format": "int64",
            "readOnly": true,
            "example": 97680
          },
          "customerPersonalAccountNumber": {
            "type": "string",
            "description": "The number of the personal account associated with the contact with the given customerContactId. Where to find the value in the Scopevisio client: open contact with master id == customerContactId, go to sphere (Rolle) Debitor. Field account number (Kontonummer) is the customerPersonalAccountNumber. This field also corresponds to field \"debitorNumber\" from endpoint  /contact/{customerContactId} and field  \"number\" from /debitoraccounts.",
            "readOnly": true,
            "example": "10008"
          },
          "customerPersonalAccountName": {
            "type": "string",
            "description": "The name of the personal account associated with the contact with the given customerContactId. Where to find the value in the Scopevisio client: open contact with master id == customerContactId, go to sphere (Rolle) Debitor. Field account name (Kontoname) is the customerPersonalAccountName. This field also corresponds to field \"name\" from endpoint /debitoraccounts.",
            "readOnly": true,
            "example": "Muster AG"
          },
          "customerPersonalAccountExternalNumber": {
            "type": "string",
            "description": "The customer number of the personal account with the given customerPersonalAccountNumber. Where to find the value in the Scopevisio client: open contact with master id == customerContactId, go to sphere (Rolle) Debitor.  Field customer number (Kundennummer) is the customerPersonalAccountExternalNumber.",
            "readOnly": true,
            "example": "D10008"
          },
          "customerName": {
            "type": "string",
            "description": "This field is for internal use only. Please use field customerContactName.",
            "readOnly": true
          },
          "customerNumber": {
            "type": "string",
            "description": "This field is for internal use only. Please use fields customerContactCustomerNumber or customerPersonalAccountExternalNumber.",
            "readOnly": true
          },
          "customerNameExtra": {
            "type": "string",
            "description": "This field is for internal use only. Please use fields customerContactCustomerNumber or customerPersonalAccountName.",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "description": "name (Bezeichnung)",
            "example": "RE-2018-1, KP für Muster AG vom 27.11.2018"
          },
          "text": {
            "type": "string",
            "description": "text (Beschreibung)",
            "example": "Folgeauftrag"
          },
          "customerContactPerson": {
            "type": "integer",
            "description": "customerContactPerson (Ansprechpartner). Sets also customerContactPersonName. The contact must be an employee of the project contact (contactId).",
            "format": "int64",
            "example": 9809
          },
          "documentDate": {
            "type": "integer",
            "description": "documentDate (PZ-/Angebots-/Auftrags-/Rechnungs-/GS-/LS-Datum). If not given, it is set to the current date. Sets also documentDateMonth.",
            "format": "int64",
            "example": 346234
          },
          "documentNumber": {
            "type": "string",
            "description": "documentNumber (Potenzial-/Angebots-/Auftrags-/Rechnungs-/Gutschrifts-/Lieferscheinnummer).The field is mandatory. If not provided a document number is generated.",
            "example": "Rg-18-090"
          },
          "ourContactPerson": {
            "type": "string",
            "description": "ourContactPerson (Potenzial-/Angebots- Auftrags-/Rechnungs-/Gutschrifts-/Lieferscheinbearbeiter). The UID of a Scopevisio user. The user must have a user contact (Aus Benutzerkontakt) for the current organisation. Setting this field also sets ourContactPersonName.",
            "example": "user_ffffffff-ffff-4351-b1d3-40bbdaa000345"
          },
          "deliveryType": {
            "type": "string",
            "description": "deliveryType (Lieferart).",
            "example": "UPS"
          },
          "deliveryCosts": {
            "type": "number",
            "description": "deliveryCosts (Lieferkosten).",
            "example": 3.95
          },
          "cashOnDelivery": {
            "type": "number",
            "description": "cashOnDelivery (Nachnamegebühr).",
            "example": 5.45
          },
          "textTitle": {
            "type": "string",
            "description": "textTitle (Titel).",
            "example": "Angebot"
          },
          "textSubTitle": {
            "type": "string",
            "description": "textSubTitle (Untertitel).",
            "example": "$Belegnummer"
          },
          "textIntro": {
            "type": "string",
            "description": "textIntro (Einleitungstext). Use \"\\n\" to insert new line.",
            "example": "Sehr geehrte Damen und Herren,\\nwir erlauben uns, Ihnen wie folgt in Rechnung zu stellen:"
          },
          "textExtro": {
            "type": "string",
            "description": "textExtro (Schlusstext). Use \"\\n\" to insert new line.",
            "example": "Wir freuen uns, wenn Ihnen das Angebot zusagt und verbleiben mit freundlichen Grüßen"
          },
          "selectedAddress": {
            "type": "integer",
            "description": "selectedAddress (Adresse [Haupt-/Rechnungs-/Liefer-/freie Adresse]). 0 = Hauptadresse, 1 = Rechnungsadresse, 2 = freie Adresse, 3 = Lieferadresse",
            "format": "int64",
            "example": 1
          },
          "otherAddress": {
            "type": "string",
            "description": "otherAddress (freie Adresse). Use \"\\n\" to insert new line.",
            "example": "Muster AG \\n Musterstraße 5 \\n45345 Musterstadt"
          },
          "gross": {
            "type": "boolean",
            "description": "gross (Preisangabe - Netto/Brutto)"
          },
          "permissionType": {
            "type": "integer",
            "description": "0 = Öffentlich, 1 = Benutzerdefiniert, 2 = Persönlich",
            "format": "int64",
            "example": 1
          },
          "readPermissionProfiles": {
            "type": "string",
            "description": "comma separated list of profiles for the read permissions, evaluated only if permissionType equals 1.",
            "example": "Faktura - alle Rechte,CRM - Alle Rechte"
          },
          "readPermissionLogins": {
            "type": "string",
            "description": "comma separated list of user login emails for the read permissions, evaluated only if permissionType equals 1.",
            "example": "peter.mueller@scopevisio.com,michaela.trimm@scopevisio.com"
          },
          "writePermissionProfiles": {
            "type": "string",
            "description": "comma separated list of profiles for full access, evaluated only if permissionType equals 1.",
            "example": "Firmen und Benutzer - alle Rechte,Finanzen - alle Rechte"
          },
          "writePermissionLogins": {
            "type": "string",
            "description": "comma separated list of user login emails, evaluated only if permissionType equals 1.",
            "example": "stefan.tarn@scopevisio.com"
          },
          "customFields": {
            "type": "array",
            "description": "Benutzerdefinierte Felder",
            "items": {
              "$ref": "#/components/schemas/CustomField"
            }
          },
          "positionsForm": {
            "$ref": "#/components/schemas/OutgoingInvoicePositionsForm"
          },
          "deliveryDate": {
            "type": "integer",
            "description": "deliveryDate (Leistungsdatum). The deliveryDate as epoch timestamp in milliseconds.",
            "format": "int64",
            "example": 1548323982000
          },
          "deliveryDateTo": {
            "type": "integer",
            "description": "deliveryDateTo (Leistungsdatum-bis). The deliveryDateTo as epoch timestamp in milliseconds.",
            "format": "int64",
            "example": 1548410382000
          },
          "isEndDiscountAbsolute": {
            "type": "boolean",
            "description": "isEndDiscountAbsolute (Schlussrabatt), true = absolute, false = percent",
            "example": true
          },
          "endDiscount": {
            "type": "number",
            "description": "endDiscount(Schlussrabatt), if isEndDiscountAbsolute is set to true, then endDiscount should be an amount, if isEndDiscountAbsolute is set to false then a percentage is needed.",
            "example": 5
          },
          "paymentTypeName": {
            "type": "string",
            "description": "paymentTypeName (Zahlungsart). If not provided for new invoice, the payment type from the personal account (connected to the customerContactId) is used. Also sets also paymentType.",
            "enum": [
              "Vorkasse",
              "Überweisung",
              "PayPal",
              "Nachname",
              "Einzugsermächtigung",
              "Rechnung",
              "EC-Karte",
              "Abbuchungsgenehmigung",
              "Bar",
              "Kreditkarte"
            ]
          },
          "isPaid": {
            "type": "boolean",
            "description": "isPaid (Auf exportiertem Beleg als Bezahlt ausweisen)"
          },
          "discountDate1": {
            "type": "integer",
            "description": "discountDate1 (Skontodatum 1). The discountDate1 as epoch timestamp in milliseconds. If it is set either discountPercent1 or discountAmount1 must be set. If one of the payment term properties is provided (discountDate1, discountDate2, dueDate, discountPercent1, discountPercent2, discountAmount1, discountAmount2) when creating an invoice, then the form is used. Otherwise the payment term from the personal account (connected to the customerContactId) is used.",
            "format": "int64",
            "example": 1546592408000
          },
          "discountDate2": {
            "type": "integer",
            "description": "discountDate2 (Skontodatum 2). The discountDate2 as epoch timestamp in milliseconds. It must be greater than discountDate1. If it is set either discountPercent2 or discountAmount2 must be set.",
            "format": "int64",
            "example": 1548752248000
          },
          "dueDate": {
            "type": "integer",
            "description": "dueDate (Fälligkeitsdatum). The dueDate as epoch timestamp in milliseconds. It must be greater than discountDate2.",
            "format": "int64",
            "example": 1548925048000
          },
          "discountPercent1": {
            "type": "number",
            "description": "discountPercent1 (Skontosatz1). Either discount percent(s) or discount amount(s) are allowed. Setting both is not possible. If set discountDate1 must be set too.",
            "example": 10
          },
          "discountPercent2": {
            "type": "number",
            "description": "discountPercent2 (Skontosatz2). Either discount percent(s) or discount amount(s) are allowed. Setting both is not possible. If set discountDate2 must be set too.",
            "example": 5
          },
          "explicitDiscount": {
            "type": "boolean",
            "description": "explicitDiscount (Skontobeträge manuell eingeben). If set discountAmount(s) must be provided"
          },
          "discountAmount1": {
            "type": "number",
            "description": "discountAmount1 (Skontobetrag1). Only evaluated if explicitDiscount is true. If set discountDate1 must be set too.",
            "example": 15
          },
          "discountAmount2": {
            "type": "number",
            "description": "discountAmount2 (Skontobetrag2). Only evaluated if explicitDiscount is true. If set discountDate2 must be set too.",
            "example": 5
          },
          "orderNumber": {
            "type": "string",
            "description": "orderNumber (Bestellnummer)",
            "example": "8698"
          },
          "zoneNumber": {
            "type": "string",
            "description": "zoneNumber (Rechnungskreis). Please check your zone settings in the Scopevisio client application if the field is mandatory.",
            "example": "3"
          },
          "postingDate": {
            "type": "integer",
            "description": "postingDate (Buchungsdatum). ",
            "format": "int64",
            "example": 1548925048000
          },
          "documentText": {
            "type": "string",
            "description": "documentText (Rechnungstext).",
            "example": "Rechnung RE-2019-2"
          },
          "locale": {
            "type": "string",
            "description": "locale (Sprache). If not provided by the user the language(Sprache) from the contact with the given \"customerContactId\" is used. To be set correctly in the invoice the locale must be also set in the Scopevisio client application under \"Stammdaten\" > \"Sprachen und Textbausteine\" > \"Sprachen für Auftragsbelege bearbeiten\". Otherwise the locale of the invoice is set to \"Deutsch\".",
            "example": "Englisch"
          },
          "currency": {
            "type": "string",
            "description": "currency(Währung), the ISO 4217 alphabetic currency code. If currency is provided there must be an exchange rate specified - either via the parameter \"exchangeRate\" or set in the Scopevisio client application. If currency is not provided, the currency from the contact with the given \"customerContactId\" is used.",
            "example": "USD"
          },
          "exchangeRate": {
            "type": "number",
            "description": "exchangeRate(Wechselkurs), evaluated only if \"curency\" is set. If not provided in the request an exchange rate must be configured in the Scopevisio client application.",
            "example": 1.95
          },
          "reference": {
            "type": "string",
            "description": "reference(Zahlungsreferenz).",
            "example": "RE-2019-1"
          },
          "taxCountryCodeIso2": {
            "type": "string",
            "description": "taxCountryCodeIso2(Ländercode).",
            "example": "DE"
          }
        },
        "oneOf": [
          {
            "$ref": "#/components/schemas/OutgoingInvoiceWithPaymentTermForm"
          }
        ]
      },
      "OutgoingInvoiceCreatePdfForm": {
        "type": "object",
        "properties": {
          "ids": {
            "type": "array",
            "description": "ids",
            "items": {
              "type": "integer",
              "description": "ids",
              "format": "int64"
            }
          },
          "numbers": {
            "type": "array",
            "description": "numbers (Interne Nummer)",
            "items": {
              "type": "string",
              "description": "numbers (Interne Nummer)"
            }
          },
          "templateName": {
            "type": "string",
            "description": "The name (not the file name) of the template(Dokumentenlayout) to be used. If more tan one template with the given templateName exist, the first found template is used. If not template with the given name was found, the standard one was used.",
            "example": "Beleglayout_Rechnung.odt"
          }
        }
      },
      "Account": {
        "type": "object",
        "properties": {
          "accountNumber": {
            "type": "string"
          }
        }
      },
      "OutgoingInvoice": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "documentNumber": {
            "type": "string"
          }
        }
      },
      "OutgoingInvoiceImportResult": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "invoices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OutgoingInvoice"
            }
          },
          "customers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Account"
            }
          },
          "vendors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Account"
            }
          }
        }
      },
      "OutgoingInvoiceImportForm": {
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "generateDocumentNumbers": {
            "type": "boolean"
          },
          "doPost": {
            "type": "boolean"
          },
          "skipDuplicates": {
            "type": "boolean"
          },
          "createPdf": {
            "type": "boolean"
          },
          "template": {
            "type": "string"
          },
          "copyProductToPosition": {
            "type": "boolean"
          },
          "copyProductToPositionOverwriteMode": {
            "type": "boolean"
          },
          "copyImpersonalAccountFieldsToPosition": {
            "type": "boolean"
          },
          "data": {
            "type": "string",
            "description": "XML import document"
          }
        }
      },
      "PostingRow": {
        "required": [
          "account",
          "amount",
          "documentNumber",
          "postingDate"
        ],
        "type": "object",
        "properties": {
          "postingDate": {
            "type": "integer",
            "description": "posting date",
            "format": "int64",
            "example": 1546210800000
          },
          "documentDate": {
            "type": "integer",
            "description": "document date",
            "format": "int64",
            "example": 1546210800000
          },
          "documentNumber": {
            "type": "string",
            "description": "document number",
            "example": "P-2021-002"
          },
          "externalDocumentNumber": {
            "type": "string",
            "description": "external document number",
            "example": "B18-01"
          },
          "account": {
            "type": "string",
            "description": "account (personal or impersonal account)",
            "example": "70001"
          },
          "summaryAccount": {
            "type": "string",
            "description": "summary account (required if a personal account is used)",
            "example": "1600"
          },
          "amount": {
            "type": "number",
            "description": "amount",
            "example": 50
          },
          "cancelDocument": {
            "type": "string",
            "description": "number of document for cancellation",
            "example": "P-2021-001"
          },
          "foreignCurrencyAmount": {
            "type": "number",
            "description": "foreign currency amount"
          },
          "foreignCurrencyCode": {
            "type": "string",
            "description": "foreign currency code"
          },
          "foreignCurrencyRate": {
            "type": "number",
            "description": "foreign currency rate"
          },
          "documentText": {
            "type": "string",
            "description": "document text",
            "example": "my text"
          },
          "rowText": {
            "type": "string",
            "description": "posting row text",
            "example": "my row text"
          },
          "vatKey": {
            "type": "string",
            "description": "vat key",
            "example": "V19"
          },
          "dimensions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DimensionForm"
            }
          },
          "discountPercent1": {
            "type": "number",
            "description": "discount percent 1, evaluated if \"account\" is personal account",
            "example": 4.5
          },
          "discountPeriod1": {
            "type": "integer",
            "description": "discount period 1, evaluated if \"account\" is personal account",
            "format": "int64",
            "example": 10
          },
          "discountPercent2": {
            "type": "number",
            "description": "discount percent 2, evaluated if \"account\" is personal account",
            "example": 2.5
          },
          "discountPeriod2": {
            "type": "integer",
            "description": "discount period 2, evaluated if \"account\" is personal account",
            "format": "int64",
            "example": 5
          },
          "netTimeLimit": {
            "type": "integer",
            "description": "net time limit, evaluated if \"account\" is personal account",
            "format": "int64",
            "example": 15
          },
          "discountAccount": {
            "type": "string",
            "description": "discount account (Skontokonto), evaluated if \"account\" is personal account",
            "example": "3736"
          },
          "paymentType": {
            "type": "string",
            "description": "payment type (Zahlungsart), evaluated if \"account\" is personal account",
            "example": "Kreditkarte"
          },
          "internalDocumentNumber": {
            "type": "string",
            "description": "internal document number",
            "example": "2021-001"
          },
          "ustId": {
            "type": "string",
            "description": "vat Id for the personalaccount (ignored otherweise)",
            "example": "2021-001"
          }
        },
        "description": "Warning: A posting always requires more than one row."
      },
      "Postings": {
        "type": "object",
        "properties": {
          "adjustVatKey": {
            "type": "boolean",
            "description": "Replace the VAT key in the given rows with the vat key from the Scopevisio chart of accounts for this account."
          },
          "autoCreateTax": {
            "type": "boolean",
            "description": "Create automatically tax posting rows. In this case an extra row for the tax posting is not needed."
          },
          "rows": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PostingRow"
            }
          }
        }
      },
      "ProductForm": {
        "required": [
          "unit"
        ],
        "type": "object",
        "properties": {
          "number": {
            "type": "string",
            "description": "number(Produktnummer). \"number\" is a mandatory field when saving a product. If a new product is created and no \"number\" provided a value is generated and assigned to the product automatically.",
            "example": "32"
          },
          "name": {
            "type": "string",
            "description": "name(Bezeichnung)",
            "example": "Stundensatz"
          },
          "description": {
            "type": "string",
            "description": "description(Beschreibung)",
            "example": "Stundensatz berechnet"
          },
          "type": {
            "maximum": 3,
            "minimum": 0,
            "type": "integer",
            "description": "type(Produkttyp nummerisch) \"type\" is set automatically on the basis of \"typeDisplay\". ",
            "format": "int32",
            "readOnly": true,
            "example": 1
          },
          "typeDisplay": {
            "type": "string",
            "description": "typeDisplay(Produktart), default value is \"Ware\" if not set by the user.",
            "example": "Ware",
            "enum": [
              "Ware",
              "Material",
              "Leistung",
              "Recht"
            ]
          },
          "invoicePostingMode": {
            "type": "string",
            "description": "invoicePostingMode(Zuordnung Rechnungsart), default value is \"Einzel-/Teil-/Schlussrechnung\" if not set by the user",
            "example": "Einzel-/Teil-/Schlussrechnung",
            "enum": [
              "Einzel-/Teil-/Schlussrechnung",
              "Anzahlungs-/Abschlagsrechnung"
            ]
          },
          "taxRate": {
            "type": "number",
            "description": "taxRate(Steuersatz), default value is 0% if not set by the user.",
            "example": 19,
            "enum": [
              0,
              7,
              19
            ]
          },
          "revenueAccountMode": {
            "maximum": 1,
            "minimum": 0,
            "type": "integer",
            "description": "revenueAccountMode(0 = Standard-Erlöskonten verwenden, 1 = Manuelle Erlöskonten verwenden). If revenue accounts are provided (\"revenueAccount0\", etc.), it is set automatically to 1. Default value is 0 Standard-Erlöskonten verwenden) if not set by the user explicitly. ",
            "format": "int32",
            "example": 0
          },
          "revenueAccount0": {
            "type": "string",
            "description": "revenueAccount0(Manuelle erlöskonten verwenden - Inland)",
            "example": "8110"
          },
          "revenueAccount1": {
            "type": "string",
            "description": "revenueAccount1(Manuelle erlöskonten verwenden - EU Ausland)",
            "example": "8125"
          },
          "revenueAccount2": {
            "type": "string",
            "description": "revenueAccount2(Manuelle erlöskonten verwenden - Ausland)",
            "example": "8120"
          },
          "revenueAccount3": {
            "type": "string",
            "description": "revenueAccount3(Manuelle erlöskonten verwenden - Abschlagsrechnungen)",
            "example": "1593"
          },
          "unit": {
            "type": "string",
            "description": "Unit(Einheit). For more untits please check the Scopevisio client application, catalog Abrechnungsbelege -> Einheit.",
            "example": "Stück",
            "enum": [
              "Gramm",
              "Kartons",
              "Kilogramm",
              "Kilometer",
              "Kisten",
              "Kubikmeter",
              "Liter",
              "Meter",
              "Miligramm",
              "Mililiter",
              "Minuten",
              "Monate",
              "Paket",
              "Paletten",
              "Pauschale",
              "Quadratmeter",
              "Stück",
              "Stunden",
              "Tage",
              "Tonnen"
            ]
          },
          "asIfSold": {
            "type": "boolean",
            "description": "asIfSold(As-if-sold)",
            "example": false
          },
          "billable": {
            "type": "boolean",
            "description": "billable(Fakturierbar)",
            "example": true
          },
          "locked": {
            "type": "boolean",
            "description": "locked(Gesperrt)",
            "example": false
          },
          "planValue": {
            "type": "number",
            "description": "planValue(Planwert)",
            "example": 19
          },
          "costPrice": {
            "type": "number",
            "description": "costPrice(Einkaufspreis)",
            "example": 5
          },
          "singleAmount": {
            "type": "number",
            "description": "singleAmount(Netto Preisgruppe 1)",
            "example": 9.34
          },
          "singleAmount2": {
            "type": "number",
            "description": "singleAmount2(Netto Preisgruppe 2)",
            "example": 7.47
          },
          "singleAmount3": {
            "type": "number",
            "description": "singleAmount3(Netto Preisgruppe 3)",
            "example": 5.13
          },
          "singleAmountGross": {
            "type": "number",
            "description": "singleAmountGross(Brutto Preisgruppe 1)",
            "example": 9.99
          },
          "singleAmountGross2": {
            "type": "number",
            "description": "singleAmountGross2(Brutto Preisgruppe 2)",
            "example": 7.99
          },
          "singleAmountGross3": {
            "type": "number",
            "description": "singleAmountGross3(Brutto Preisgruppe 3)",
            "example": 5.49
          },
          "nameLng1": {
            "type": "string",
            "description": "nameLng1(Englisch Bezeichnung)",
            "example": "Hourly rate"
          },
          "descriptionLng1": {
            "type": "string",
            "description": "descriptionLng1(Englisch Beschreibung)",
            "example": "Calculate hourly rate"
          },
          "productGroupName": {
            "type": "string",
            "description": "productGroupName(Produktgruppen)",
            "example": "Ware"
          }
        }
      },
      "ProductGroupForm": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "name",
            "example": "Ware"
          }
        }
      },
      "ProjectEmployeeForm": {
        "required": [
          "contactId"
        ],
        "type": "object",
        "properties": {
          "contactId": {
            "type": "integer",
            "description": "contact id of the given project employee",
            "format": "int64",
            "example": 87567
          },
          "contactSphere": {
            "type": "string",
            "description": "contactSphere",
            "example": "Lieferant",
            "enum": [
              "Alle",
              "Lead",
              "Interessent",
              "Kunde",
              "Lieferant",
              "Debitor",
              "Kreditor",
              "Mitarbeiter"
            ]
          },
          "role": {
            "type": "string",
            "description": "role in the project, please chek your catalog in the Scopevisio desktop client for allowable values",
            "example": "Projektleitung",
            "enum": [
              "Auftraggeber",
              "Projektleitung",
              "Projektteammitglieder",
              "Lenkungsausschuss",
              "Projektservicestelle",
              "Arbeitspaket-Leitung",
              "Projektassistenz",
              "Project Management Office",
              "Projektmanagement",
              "Technische Koordination",
              "Fachliche Koordination",
              "Analyseleitung",
              "Entwicklungsteamleitung",
              "Software Architekt",
              "Testverantwortlicher",
              "QS Verantwortlicher",
              "Betriebsverantwortlicher"
            ]
          },
          "hourlyRate": {
            "type": "number",
            "description": "hourly rate",
            "example": 20.3
          },
          "dailyRate": {
            "type": "number",
            "description": "daily rate",
            "example": 200
          }
        },
        "description": "project employees are all contacts involved in the project (Projektbeteiligte)"
      },
      "ProjectForm": {
        "required": [
          "contactId",
          "name"
        ],
        "type": "object",
        "properties": {
          "number": {
            "type": "string",
            "description": "number",
            "example": "V-2021-1"
          },
          "name": {
            "type": "string",
            "description": "name",
            "example": "KP für John Doe vom 01.01.2021"
          },
          "category": {
            "type": "string",
            "description": "category (Projektkategorie), if not given, it is set to \"Kundenprojekt\"",
            "enum": [
              "Kundenprojekt",
              "Vertriebsprojekt",
              "Investitionsprojekt",
              "Entwicklungsprojekt",
              "Beratungsprojekt",
              "Organisationsprojekt",
              "Soziales Projekt",
              "Sonstiges Projekt"
            ]
          },
          "type": {
            "type": "string",
            "description": "type (Projektbezug) ",
            "example": "extern",
            "enum": [
              "intern",
              "extern"
            ]
          },
          "type2": {
            "type": "string",
            "description": "type2 (Projektart) - the allowable values depend on the project category. Please check the Scopevisio desktop application for all allowable values per category. The example values are for category \"Kundenprojekt\"",
            "enum": [
              "Kundenauftrag",
              "Lieferung",
              "Bestellabwicklung",
              "Leistungserbringung",
              "Auftragserbringung",
              "Sonstiges"
            ]
          },
          "description": {
            "type": "string",
            "description": "description (Projektbeschreibung)",
            "example": "Kundenprojekt mit Acme für Verbesserung Produkt 1A"
          },
          "contactId": {
            "type": "integer",
            "description": "contactId (Projektadressat)",
            "format": "int64",
            "example": 23456
          },
          "legacyNumber": {
            "type": "string",
            "description": "legacyNumber (ID Vorsystem). The Id of the project used in the previous system.",
            "example": "43425"
          },
          "initiatorContactId": {
            "type": "integer",
            "description": "project initiator (Projektträger)",
            "format": "int64",
            "example": 64346
          },
          "contactPerson": {
            "type": "integer",
            "description": "contactPerson (Ansprechpartner beim Kunden/Lead/Interessenten). The contact id of the contact person for the project - the selected contact must be an employee of the project contact and the project contact must be main employer.",
            "format": "int64",
            "example": 12475
          },
          "ownerUid": {
            "type": "string",
            "description": "ownerUid (Projektinhaber). Uid of the user, who is the owner of this project. Refer to /users to retrieve the uid",
            "example": "user_00000000-0000-0000-0000-000000000000"
          },
          "workdays": {
            "maximum": 6,
            "minimum": 4,
            "type": "integer",
            "description": "workdays (Arbeitstage). Please check the Scopevisio desktop client for all allowable values for workdays",
            "format": "int32",
            "example": 5
          },
          "startTs": {
            "type": "integer",
            "description": "Project start (Projektstart)",
            "format": "int64",
            "example": 1524217032000
          },
          "endTs": {
            "type": "integer",
            "description": "project end (Projektende)",
            "format": "int64",
            "example": 1535708232000
          },
          "decisionTs": {
            "type": "integer",
            "description": "Project decision timestamp (Entsch.zeitp.)",
            "format": "int64",
            "example": 1525167432000
          },
          "estimatedHoursMode": {
            "type": "boolean",
            "description": "estimatedHoursMode (checbox Manuell). Toggle if estimated hours is set manually or not, 0 = false, 1 = true"
          },
          "estimatedHours": {
            "type": "number",
            "description": "Estimated hours field is evaluated only if estimatedHoursMode is present and set to true",
            "example": 30
          },
          "dimensionNumber": {
            "type": "integer",
            "description": "dimensionNumber (Projektkostenstelle)",
            "format": "int64",
            "example": 10030
          },
          "dimensionName": {
            "type": "string",
            "description": "dimensionName (Projektkostenstelle) Name of the dimensionNumber. If not given, it is set to the project name.",
            "example": "10030"
          },
          "phase": {
            "type": "string",
            "description": "phase (Projekt-Phase) - the allowable values depend on the project category. Please check the Scopevisio desktop application for all allowable values per category. The example values are for category \"Kundenprojekt\"",
            "enum": [
              "Vorbereitung",
              "Durchführung",
              "Durchführung und Teilabrechnung",
              "Abschluss",
              "Schlußabrechnung",
              "Bewertung",
              "Zahlungsüberwachung"
            ]
          },
          "status": {
            "type": "string",
            "description": "status (Projekt-Status) - the allowable values depend on the project category. Please check the Scopevisio desktop application for all allowable values per category. The example values are for category \"Kundenprojekt\"",
            "enum": [
              "anstehend",
              "gestartet",
              "beendet",
              "unterbrochen",
              "zurückgestellt",
              "abgebrochen",
              "unbekannt"
            ]
          },
          "priority": {
            "type": "string",
            "description": "priority (Projekt-Priorität)",
            "enum": [
              "niedrig",
              "mittel",
              "hoch",
              "sehr hoch",
              "sofort"
            ]
          },
          "risk": {
            "type": "string",
            "description": "risk (Projekt-Risiko)",
            "enum": [
              "niedrig",
              "mittel",
              "hoch",
              "sehr hoch",
              "unbekannt"
            ]
          },
          "riskDescription": {
            "type": "string",
            "description": "riskDescription (Risikobeschreibung)",
            "example": "Low budget available"
          },
          "billable": {
            "type": "string",
            "description": "billable (Fakturierbar)",
            "example": "Ja",
            "enum": [
              "Ja",
              "Nein",
              "Noch zu genehmigen"
            ]
          },
          "timeRecordable": {
            "type": "string",
            "description": "timeRecordable (Zeiterfassung)",
            "example": "Ja",
            "enum": [
              "Ja",
              "Nein",
              "Noch zu genehmigen"
            ]
          },
          "timeRecordType": {
            "type": "string",
            "description": "time record type (Zeiterfassung in...)",
            "example": "Stunden",
            "enum": [
              "Minuten",
              "Stunden",
              "Tage",
              "Wochen",
              "Jahren"
            ]
          },
          "hoursPerDay": {
            "type": "integer",
            "description": "hours per day (Stunden pro Arbeitstag)",
            "format": "int64",
            "example": 8
          },
          "mail": {
            "type": "string",
            "description": "project email (E-Mail)",
            "example": "project@scopevisio.com"
          },
          "customFields": {
            "type": "array",
            "description": "custom fields (Benutzerdefinierte Felder)- these are available for projects only if your client supports sales projects",
            "items": {
              "$ref": "#/components/schemas/CustomField"
            }
          },
          "projectEmployees": {
            "type": "array",
            "description": "project employees are all contacts involved in the project (Projektbeteiligte)",
            "items": {
              "$ref": "#/components/schemas/ProjectEmployeeForm"
            }
          },
          "permissionType": {
            "maximum": 2,
            "minimum": 0,
            "type": "integer",
            "description": "permissionType [0 = Öffentlich, 1 = Benutzerdefiniert, 2 = Persönlich]",
            "format": "int32",
            "example": 1,
            "default": 0
          },
          "readPermissionProfiles": {
            "type": "string",
            "description": "comma separated list of profiles for the read permissions, evaluated only if permissionType equals 1.",
            "example": "Faktura - alle Rechte,CRM - Alle Rechte"
          },
          "readPermissionLogins": {
            "type": "string",
            "description": "comma separated list of user login emails for the read permissions, evaluated only if permissionType equals 1.",
            "example": "peter.mueller@scopevisio.com,michaela.trimm@scopevisio.com"
          },
          "writePermissionProfiles": {
            "type": "string",
            "description": "comma separated list of profiles for full access, evaluated only if permissionType equals 1.",
            "example": "Firmen und Benutzer - alle Rechte,Finanzen - alle Rechte"
          },
          "writePermissionLogins": {
            "type": "string",
            "description": "comma separated list of user login emails, evaluated only if permissionType equals 1.",
            "example": "stefan.tarn@scopevisio.com"
          }
        }
      },
      "ProjectResources": {
        "required": [
          "projectStartFrom",
          "projectStartTo"
        ],
        "type": "object",
        "properties": {
          "projectStartFrom": {
            "type": "integer",
            "description": "The earliest date on which the project should have started. It must be provided as an epoch timestamp in milliseconds.",
            "format": "int64",
            "example": 1609455600000
          },
          "projectStartTo": {
            "type": "integer",
            "description": "The last date on which the project should have started. It must be provided as an epoch timestamp in milliseconds.",
            "format": "int64",
            "example": 1640905200000
          },
          "searchSpecification": {
            "$ref": "#/components/schemas/searchSpecification"
          }
        }
      },
      "ProjectRevenue": {
        "required": [
          "projectStartFrom",
          "projectStartTo"
        ],
        "type": "object",
        "properties": {
          "projectStartFrom": {
            "type": "integer",
            "description": "The first date on which the project should have started. It must be provided as an epoch timestamp in milliseconds.",
            "format": "int64",
            "example": 1609455600000
          },
          "projectStartTo": {
            "type": "integer",
            "description": "The last date on which the project should have started. It must be provided as an epoch timestamp in milliseconds.",
            "format": "int64",
            "example": 1640905200000
          },
          "revenueType": {
            "maximum": 2,
            "minimum": 0,
            "type": "integer",
            "description": "revenueType(Umsatzart), the desired revenue Type. (Umsatzart), 0 = Planung, 1 = Realisierung, 2 = Abweichung, if not provided revenueType is set to \"0\"",
            "format": "int32",
            "example": 0,
            "default": 0
          },
          "searchSpecification": {
            "$ref": "#/components/schemas/searchSpecification"
          }
        }
      },
      "RecurringInvoiceForm": {
        "required": [
          "frequency",
          "nextInvoiceDate",
          "validFrom",
          "validTo"
        ],
        "type": "object",
        "properties": {
          "validFrom": {
            "type": "integer",
            "description": "validFrom (gültig von), the validFrom as epoch timestamp in milliseconds. The time of the day has no importance for the validFrom date.",
            "format": "int64",
            "example": 1546300800000
          },
          "validTo": {
            "type": "integer",
            "description": "validTo (gültig bis), the validTo as epoch timestamp in milliseconds. The time of the day has no importance for the validTo date. ",
            "format": "int64",
            "example": 1577746800000
          },
          "frequency": {
            "type": "string",
            "description": "frequency",
            "example": "monthly",
            "enum": [
              "daily",
              "weekly",
              "monthly",
              "bimonthly",
              "quarterly",
              "half-yearly",
              "yearly"
            ]
          },
          "nextInvoiceDate": {
            "type": "integer",
            "description": "nextInvoiceDate (nächste Rechnung), the nextInvoiceDate as epoch timestamp in milliseconds. The time of the day has no importance for the nextInvoiceDate date.",
            "format": "int64",
            "example": 1567288800000
          }
        }
      },
      "TeamworkRole": {
        "required": [
          "organisation",
          "teamworkRole"
        ],
        "type": "object",
        "properties": {
          "teamworkRole": {
            "type": "string",
            "example": "internal",
            "enum": [
              "admin",
              "internal",
              "external",
              "guest"
            ]
          },
          "organisation": {
            "type": "string",
            "example": "ACME GmbH"
          }
        },
        "description": "Users role rights for teamwork."
      },
      "UserForm": {
        "required": [
          "email",
          "firstName",
          "lastName"
        ],
        "type": "object",
        "properties": {
          "uid": {
            "type": "string",
            "description": "User ID",
            "example": "user_00000000-0000-0000-0000-000000000000"
          },
          "firstName": {
            "type": "string",
            "description": "First name",
            "example": "John"
          },
          "lastName": {
            "type": "string",
            "description": "Last name",
            "example": "Doe"
          },
          "gender": {
            "type": "string",
            "description": "Gender",
            "enum": [
              "MALE",
              "FEMALE"
            ]
          },
          "email": {
            "type": "string",
            "description": "Email address used as username",
            "example": "john.doe@acme.com"
          },
          "pendingLogin": {
            "type": "string",
            "description": "Pending e-mail address to be used as new login",
            "example": "john.doe@acme.com"
          },
          "shortName": {
            "type": "string",
            "description": "User signature",
            "example": "John.Doe"
          },
          "administrator": {
            "type": "boolean",
            "description": "Indicates whether this user is an administrator",
            "default": false
          },
          "password": {
            "type": "string",
            "description": "User password. Must be at least 6 characters long",
            "example": "8b34deb84b"
          },
          "changePassword": {
            "type": "boolean",
            "description": "Indicates whether the user has to change the password"
          },
          "profiles": {
            "type": "array",
            "description": "User profiles to assign",
            "items": {
              "$ref": "#/components/schemas/Profile"
            }
          },
          "licenses": {
            "type": "array",
            "description": "Product licenses to assign",
            "items": {
              "$ref": "#/components/schemas/License"
            }
          },
          "buyMissingLicenses": {
            "type": "boolean",
            "description": "Whether to buy licenses, if required"
          },
          "updateScopevisioEMail": {
            "type": "boolean",
            "description": "Whether to update the Scopevisio e-mail (login)"
          },
          "updateTeamworkEMail": {
            "type": "boolean",
            "description": "Whether to update the Teamwork e-mail (login)"
          },
          "newEmail": {
            "type": "string",
            "description": "The new e-mail address",
            "example": "peter.doe@acme.com"
          },
          "status": {
            "type": "string",
            "description": "User status",
            "readOnly": true,
            "enum": [
              "ACTIVE",
              "INVITED",
              "CHANGED",
              "DISABLED",
              "DELETED",
              "LOCKED"
            ]
          },
          "specialRights": {
            "type": "array",
            "description": "User's special rights",
            "readOnly": true,
            "items": {
              "type": "string",
              "description": "User's special rights",
              "readOnly": true
            }
          },
          "creationTs": {
            "type": "integer",
            "description": "Creation timestamp",
            "format": "int64",
            "readOnly": true
          },
          "teamworkRoles": {
            "type": "array",
            "description": "Users role rights for teamwork.",
            "items": {
              "$ref": "#/components/schemas/TeamworkRole"
            }
          }
        }
      },
      "RevenueStatementAccountRow": {
        "required": [
          "allocationAccountNumber",
          "settlementAccountNumber"
        ],
        "type": "object",
        "properties": {
          "allocationAccountNumber": {
            "type": "string",
            "description": "allocationAccountNumber (Verrechnungskonto Nummer)",
            "example": "1371"
          },
          "settlementAccountNumber": {
            "type": "string",
            "description": "settlementAccountNumber (Erlöskonto Nummer)",
            "example": "8300"
          }
        },
        "description": "Revenue statement accounts"
      },
      "RevenueStatementAccountsForm": {
        "type": "object",
        "properties": {
          "rows": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RevenueStatementAccountRow"
            }
          }
        }
      },
      "SalesProjectForm": {
        "required": [
          "contactId",
          "name"
        ],
        "type": "object",
        "properties": {
          "number": {
            "type": "string",
            "description": "number",
            "example": "V-2021-1"
          },
          "name": {
            "type": "string",
            "description": "name",
            "example": "KP für John Doe vom 01.01.2021"
          },
          "category": {
            "type": "string",
            "description": "category (Projektkategorie), if not given, it is set to \"Kundenprojekt\"",
            "enum": [
              "Kundenprojekt",
              "Vertriebsprojekt",
              "Investitionsprojekt",
              "Entwicklungsprojekt",
              "Beratungsprojekt",
              "Organisationsprojekt",
              "Soziales Projekt",
              "Sonstiges Projekt"
            ]
          },
          "type": {
            "type": "string",
            "description": "type (Projektbezug) ",
            "example": "extern",
            "enum": [
              "intern",
              "extern"
            ]
          },
          "type2": {
            "type": "string",
            "description": "type2 (Projektart) - the allowable values depend on the project category. Please check the Scopevisio desktop application for all allowable values per category. The example values are for category \"Kundenprojekt\"",
            "enum": [
              "Kundenauftrag",
              "Lieferung",
              "Bestellabwicklung",
              "Leistungserbringung",
              "Auftragserbringung",
              "Sonstiges"
            ]
          },
          "description": {
            "type": "string",
            "description": "description (Projektbeschreibung)",
            "example": "Kundenprojekt mit Acme für Verbesserung Produkt 1A"
          },
          "contactId": {
            "type": "integer",
            "description": "contactId (Projektadressat)",
            "format": "int64",
            "example": 23456
          },
          "legacyNumber": {
            "type": "string",
            "description": "legacyNumber (ID Vorsystem). The Id of the project used in the previous system.",
            "example": "43425"
          },
          "initiatorContactId": {
            "type": "integer",
            "description": "project initiator (Projektträger)",
            "format": "int64",
            "example": 64346
          },
          "contactPerson": {
            "type": "integer",
            "description": "contactPerson (Ansprechpartner beim Kunden/Lead/Interessenten). The contact id of the contact person for the project - the selected contact must be an employee of the project contact and the project contact must be main employer.",
            "format": "int64",
            "example": 12475
          },
          "ownerUid": {
            "type": "string",
            "description": "ownerUid (Projektinhaber). Uid of the user, who is the owner of this project. Refer to /users to retrieve the uid",
            "example": "user_00000000-0000-0000-0000-000000000000"
          },
          "workdays": {
            "maximum": 6,
            "minimum": 4,
            "type": "integer",
            "description": "workdays (Arbeitstage). Please check the Scopevisio desktop client for all allowable values for workdays",
            "format": "int32",
            "example": 5
          },
          "startTs": {
            "type": "integer",
            "description": "Project start (Projektstart)",
            "format": "int64",
            "example": 1524217032000
          },
          "endTs": {
            "type": "integer",
            "description": "project end (Projektende)",
            "format": "int64",
            "example": 1535708232000
          },
          "decisionTs": {
            "type": "integer",
            "description": "Project decision timestamp (Entsch.zeitp.)",
            "format": "int64",
            "example": 1525167432000
          },
          "estimatedHoursMode": {
            "type": "boolean",
            "description": "estimatedHoursMode (checbox Manuell). Toggle if estimated hours is set manually or not, 0 = false, 1 = true"
          },
          "estimatedHours": {
            "type": "number",
            "description": "Estimated hours field is evaluated only if estimatedHoursMode is present and set to true",
            "example": 30
          },
          "dimensionNumber": {
            "type": "integer",
            "description": "dimensionNumber (Projektkostenstelle)",
            "format": "int64",
            "example": 10030
          },
          "dimensionName": {
            "type": "string",
            "description": "dimensionName (Projektkostenstelle) Name of the dimensionNumber. If not given, it is set to the project name.",
            "example": "10030"
          },
          "phase": {
            "type": "string",
            "description": "phase (Projekt-Phase) - the allowable values depend on the project category. Please check the Scopevisio desktop application for all allowable values per category. The example values are for category \"Kundenprojekt\"",
            "enum": [
              "Vorbereitung",
              "Durchführung",
              "Durchführung und Teilabrechnung",
              "Abschluss",
              "Schlußabrechnung",
              "Bewertung",
              "Zahlungsüberwachung"
            ]
          },
          "status": {
            "type": "string",
            "description": "status (Projekt-Status) - the allowable values depend on the project category. Please check the Scopevisio desktop application for all allowable values per category. The example values are for category \"Kundenprojekt\"",
            "enum": [
              "anstehend",
              "gestartet",
              "beendet",
              "unterbrochen",
              "zurückgestellt",
              "abgebrochen",
              "unbekannt"
            ]
          },
          "priority": {
            "type": "string",
            "description": "priority (Projekt-Priorität)",
            "enum": [
              "niedrig",
              "mittel",
              "hoch",
              "sehr hoch",
              "sofort"
            ]
          },
          "risk": {
            "type": "string",
            "description": "risk (Projekt-Risiko)",
            "enum": [
              "niedrig",
              "mittel",
              "hoch",
              "sehr hoch",
              "unbekannt"
            ]
          },
          "riskDescription": {
            "type": "string",
            "description": "riskDescription (Risikobeschreibung)",
            "example": "Low budget available"
          },
          "billable": {
            "type": "string",
            "description": "billable (Fakturierbar)",
            "example": "Ja",
            "enum": [
              "Ja",
              "Nein",
              "Noch zu genehmigen"
            ]
          },
          "timeRecordable": {
            "type": "string",
            "description": "timeRecordable (Zeiterfassung)",
            "example": "Ja",
            "enum": [
              "Ja",
              "Nein",
              "Noch zu genehmigen"
            ]
          },
          "timeRecordType": {
            "type": "string",
            "description": "time record type (Zeiterfassung in...)",
            "example": "Stunden",
            "enum": [
              "Minuten",
              "Stunden",
              "Tage",
              "Wochen",
              "Jahren"
            ]
          },
          "hoursPerDay": {
            "type": "integer",
            "description": "hours per day (Stunden pro Arbeitstag)",
            "format": "int64",
            "example": 8
          },
          "mail": {
            "type": "string",
            "description": "project email (E-Mail)",
            "example": "project@scopevisio.com"
          },
          "customFields": {
            "type": "array",
            "description": "custom fields (Benutzerdefinierte Felder)- these are available for projects only if your client supports sales projects",
            "items": {
              "$ref": "#/components/schemas/CustomField"
            }
          },
          "projectEmployees": {
            "type": "array",
            "description": "project employees are all contacts involved in the project (Projektbeteiligte)",
            "items": {
              "$ref": "#/components/schemas/ProjectEmployeeForm"
            }
          },
          "permissionType": {
            "maximum": 2,
            "minimum": 0,
            "type": "integer",
            "description": "permissionType [0 = Öffentlich, 1 = Benutzerdefiniert, 2 = Persönlich]",
            "format": "int32",
            "example": 1,
            "default": 0
          },
          "readPermissionProfiles": {
            "type": "string",
            "description": "comma separated list of profiles for the read permissions, evaluated only if permissionType equals 1.",
            "example": "Faktura - alle Rechte,CRM - Alle Rechte"
          },
          "readPermissionLogins": {
            "type": "string",
            "description": "comma separated list of user login emails for the read permissions, evaluated only if permissionType equals 1.",
            "example": "peter.mueller@scopevisio.com,michaela.trimm@scopevisio.com"
          },
          "writePermissionProfiles": {
            "type": "string",
            "description": "comma separated list of profiles for full access, evaluated only if permissionType equals 1.",
            "example": "Firmen und Benutzer - alle Rechte,Finanzen - alle Rechte"
          },
          "writePermissionLogins": {
            "type": "string",
            "description": "comma separated list of user login emails, evaluated only if permissionType equals 1.",
            "example": "stefan.tarn@scopevisio.com"
          },
          "leadBudget": {
            "type": "string",
            "description": "Lead Bugdet.Please check your catalog in the Scopevisio desktop client for allowable values",
            "example": "mittleres Budget"
          },
          "leadBudgetSum": {
            "type": "number",
            "description": "Lead Bugdet Sum",
            "example": 500
          },
          "leadAuthority": {
            "type": "string",
            "description": "Lead Authority. Please check your catalog in the Scopevisio desktop client for allowable values",
            "example": "mittlere Entscheidungskraft"
          },
          "leadNeed": {
            "type": "string",
            "description": "Lead Need. Please check your catalog in the Scopevisio desktop client for allowable values",
            "example": "mittlerer Bedarf"
          },
          "leadTime": {
            "type": "string",
            "description": "Lead Time. Please check your catalog in the Scopevisio desktop client for allowable values",
            "example": "langfristig (9-12 Wochen)"
          },
          "salesPersonId": {
            "type": "integer",
            "description": "salesPersonId (Vertriebsbeauftragter) - this must be the id of a user contact (Aus Benutzerkontakt)",
            "format": "int64",
            "example": 26532
          },
          "leadNotice": {
            "type": "string",
            "description": "leadNotice (Vertriebsinformationen)",
            "example": "Interne Notiz"
          },
          "interestedBudget": {
            "type": "string",
            "description": "Interested Bugdet.Please check your catalog in the Scopevisio desktop client for allowable values. Set only when the project has \"sphereInterested\" set to true.",
            "example": "hohes Budget"
          },
          "interestedBudgetSum": {
            "type": "number",
            "description": "Interested Bugdet Sum. Set only when the project has \"sphereInterested\" set to true. Please check your catalog in the Scopevisio desktop client for allowable values.",
            "example": 500
          },
          "interestedAuthority": {
            "type": "string",
            "description": "Interested Authority. Set only when the project has \"sphereInterested\" set to true. Please check your catalog in the Scopevisio desktop client for allowable values.",
            "example": "mittlere Entscheidungskraft"
          },
          "interestedNeed": {
            "type": "string",
            "description": "Interested Need. Set only when the project has \"sphereInterested\" set to true. Please check your catalog in the Scopevisio desktop client for allowable values.",
            "example": "mittlerer Bedarf"
          },
          "interestedTime": {
            "type": "string",
            "description": "Interested Time. Set only when the project has \"sphereInterested\" set to true. Please check your catalog in the Scopevisio desktop client for allowable values.",
            "example": "langfristig (9-12 Wochen)"
          },
          "salesKontaktType": {
            "type": "string",
            "description": "salesKontaktType (Vertriebsquelle, Leadquelle)",
            "example": "Anzeigenwerbung"
          },
          "salesInternalOrganisation": {
            "type": "string",
            "description": "salesInternalOrganisation (Vertriebsorgansiation). Please check your catalog in the Scopevisio desktop client for allowable values.",
            "example": "Vertriebsorganisation Süden",
            "enum": [
              "Vertriebsorganisation Süden",
              "Vertriebsorganisation Westen",
              "Vertriebsorganisation Norden",
              "Vertriebsorganisation Osten"
            ]
          },
          "salesContractPerson": {
            "type": "integer",
            "description": "salesContractPerson (Entscheider). The contact must be an employee of the project contact (contactId).",
            "format": "int64",
            "example": 23412
          },
          "salesChannel": {
            "type": "string",
            "description": "salesChannel(Vertriebsweg). Please check your catalog in the Scopevisio desktop client for allowable values.",
            "example": "Großhandel"
          },
          "salesCampaignName": {
            "type": "string",
            "description": "salesCampaignName (Vertriebskampagne)",
            "example": "Messe"
          },
          "salesActivity": {
            "type": "string",
            "description": "salesActivity (Vertriebliche Folgeaktivität). Please check your catalog in the Scopevisio desktop client for allowable values.",
            "example": "1. Anruf"
          },
          "leadPersonId": {
            "type": "integer",
            "description": "leadPersonId (Marketingbeauftragter).  This must be the id of a user contact (Aus Benutzerkontakt).",
            "format": "int64",
            "example": 23412
          },
          "reminderDate": {
            "type": "integer",
            "description": "reminderDate (Wiedervorlage).",
            "format": "int64",
            "example": 1535148000000
          },
          "salesPhase": {
            "type": "string",
            "description": "salesPhase (Vertriebsphase). Please check your catalog in the Scopevisio desktop client for allowable values.",
            "example": "Qualifizierungsphase"
          },
          "salesStatus": {
            "type": "string",
            "description": "salesStatus (Vertriebsstatus). Please check your catalog in the Scopevisio desktop client for allowable values.",
            "example": "warten auf Freigabe"
          },
          "salesPriority": {
            "type": "string",
            "description": "salesPriority (Vertriebspriorität). Please check your catalog in the Scopevisio desktop client for allowable values.",
            "example": "sehr hoch"
          },
          "salesRisk": {
            "type": "string",
            "description": "salesRisk (Vertriebsrisiko). Please check your catalog in the Scopevisio desktop client for allowable values.",
            "example": "mittel"
          },
          "salesReminderFrom": {
            "type": "integer",
            "description": "salesReminderFrom (Wiedervorlagen nächste).",
            "format": "int64",
            "example": 1535148000000
          },
          "salesReminderTo": {
            "type": "integer",
            "description": "salesReminderTo (Wiedervorlagen weitere).",
            "format": "int64",
            "example": 1535148000000
          },
          "salesDescription": {
            "type": "string",
            "description": "salesDescription (Vertriebsprojektbeschreibung).",
            "example": "Notiz"
          },
          "replacementProductName": {
            "type": "string",
            "description": "replacementProductName (Abzulösendes Bestandsprodukt). Please check your catalog in the Scopevisio desktop client for allowable values.",
            "example": "Produkt A"
          },
          "residualProductName": {
            "type": "string",
            "description": "residualProductName (Verbleibende Bestandsprodukt). Please check your catalog in the Scopevisio desktop client for allowable values. To set more than one poduct use \"¤¤¤\" as a separator.",
            "example": "Produkt A¤¤¤ProductB"
          },
          "competitionProductsName": {
            "type": "string",
            "description": "competitionProductsName (Wettbewerbsprodukte). Please check your catalog in the Scopevisio desktop client for allowable values. To set more than one poduct use \"¤¤¤\" as a separator.",
            "example": "Produkt A¤¤¤ProductB"
          },
          "contractObligation": {
            "type": "integer",
            "description": "contractObligation (Vetragsbindung).",
            "format": "int64",
            "example": 1535148000000
          },
          "salesPotenzial": {
            "type": "string",
            "description": "salesPotenzial (Vertriebsinfo).",
            "example": "Hoher Potenzial"
          },
          "salesUpgrade": {
            "type": "boolean",
            "description": "salesUpgrade (Upgrade)."
          },
          "servicePartnerName": {
            "type": "string",
            "description": "servicePartnerName (Betreuender Servicepartner). Please check your catalog in the Scopevisio desktop client for allowable values.",
            "example": "Partner A"
          },
          "competitiveStrength": {
            "type": "string",
            "description": "competitiveStrength (Wettbewerbsstärke). Please check your catalog in the Scopevisio desktop client for allowable values.",
            "example": "gesunder Wettbewerb mit guter Konkurrenz"
          }
        }
      },
      "StatisticsPosting": {
        "required": [
          "accountNumber",
          "amount",
          "date"
        ],
        "type": "object",
        "properties": {
          "date": {
            "type": "integer",
            "description": "date (Buchungsdatum)",
            "format": "int64",
            "example": 1609779058000
          },
          "accountNumber": {
            "type": "string",
            "description": "accountNumber (Buchungskonto)",
            "example": "1000A"
          },
          "amount": {
            "type": "number",
            "description": "amount (Menge) The amount must never be zero.",
            "example": 18
          },
          "text": {
            "type": "string",
            "description": "text (Text)",
            "example": "Buchungstext"
          },
          "zoneNumber": {
            "type": "string",
            "description": "zoneNumber (Rechnungskreis). Please check via the Scopevisio client if the field is mandatory in your zone settings.",
            "example": "3"
          },
          "dimension_1": {
            "type": "integer",
            "description": "dimension_1 (Kostenstellen)",
            "format": "int64",
            "example": 3
          },
          "dimension_2": {
            "type": "integer",
            "description": "dimension_2 (Kostenträger)",
            "format": "int64"
          },
          "dimension_3": {
            "type": "integer",
            "description": "dimension_3 (Projekte)",
            "format": "int64"
          },
          "dimension_4": {
            "type": "integer",
            "description": "dimension_4",
            "format": "int64"
          },
          "dimension_5": {
            "type": "integer",
            "description": "dimension_5",
            "format": "int64"
          },
          "dimension_6": {
            "type": "integer",
            "description": "dimension_6",
            "format": "int64"
          },
          "dimension_7": {
            "type": "integer",
            "description": "dimension_7",
            "format": "int64"
          },
          "dimension_8": {
            "type": "integer",
            "description": "dimension_8",
            "format": "int64"
          },
          "dimension_9": {
            "type": "integer",
            "description": "dimension_9",
            "format": "int64"
          },
          "dimension_10": {
            "type": "integer",
            "description": "dimension_10",
            "format": "int64"
          }
        }
      },
      "StatisticsPostings": {
        "type": "object",
        "properties": {
          "autoCreateAccount": {
            "type": "boolean",
            "description": "autoCreateAccount Create an account automatically if one does not already exist."
          },
          "autoAccountDecimal": {
            "type": "integer",
            "description": "autoAccountDecimal The number of decimal digits assigned to automatically created accounts.",
            "format": "int64",
            "example": 2
          },
          "statisticsPostings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StatisticsPosting"
            }
          }
        }
      },
      "SubtaskForm": {
        "required": [
          "taskId"
        ],
        "type": "object",
        "properties": {
          "taskId": {
            "type": "integer",
            "description": "Id der Aufgabe für die die Tätigkeit erstellt wird",
            "format": "int64",
            "example": 1001
          },
          "topic": {
            "type": "string",
            "description": "topic",
            "example": "Telefonat durchführen"
          },
          "dueDateTS": {
            "type": "integer",
            "description": "dueDateTS",
            "format": "int64",
            "example": 1546210800000
          },
          "responsibleContactId": {
            "type": "integer",
            "description": "responsibleContactId",
            "format": "int64",
            "example": 78656
          },
          "status": {
            "type": "string",
            "description": "status(Status)",
            "example": "Anstehend",
            "enum": [
              "Anstehend",
              "Begonnen",
              "Erledigt"
            ]
          },
          "estimatedHours": {
            "type": "number",
            "description": "geschätzte Anzahl Stunden"
          }
        }
      },
      "TaskForm": {
        "required": [
          "topic"
        ],
        "type": "object",
        "properties": {
          "topic": {
            "type": "string",
            "description": "topic (Betreff/Bezeichnung)",
            "example": "Telefonat durchführen"
          },
          "priority": {
            "type": "string",
            "description": "priority(Priorität)",
            "example": "normal",
            "enum": [
              "niedrig",
              "normal",
              "hoch"
            ],
            "default": "normal"
          },
          "contactId": {
            "type": "integer",
            "description": "contactId(Kontakt)",
            "format": "int64",
            "example": 23456
          },
          "contactLegacyId": {
            "type": "string",
            "description": "contactLegacyId(Kontakt), if a contact with the given contactId is found, contactLegacyId is not evaluated",
            "example": "legacy01"
          },
          "contactSphere": {
            "type": "string",
            "description": "contactSphere(Rolle)",
            "example": "Kunde",
            "enum": [
              "Lead",
              "Interessent",
              "Kunde",
              "Lieferant",
              "Debitor",
              "Keditor",
              "Mitarbeiter",
              "Partner",
              "Projekt",
              "Durchführung",
              "Abrechnung"
            ]
          },
          "description": {
            "type": "string",
            "description": "description",
            "example": "Telefonat durchgeführt"
          },
          "startDateTS": {
            "type": "integer",
            "description": "startDateTS(Startdatum)",
            "format": "int64",
            "example": 1546210800000
          },
          "dueDateTS": {
            "type": "integer",
            "description": "dueDateTS(Fälligkeit)",
            "format": "int64",
            "example": 1546210800000
          },
          "responsibleContactId": {
            "type": "integer",
            "description": "responsibleContactId(Verantwortlich)",
            "format": "int64",
            "example": 78656
          },
          "reminderDateTS": {
            "type": "integer",
            "description": "reminderDateTS(Wiedervorlage)",
            "format": "int64",
            "example": 1546210800000
          },
          "status": {
            "type": "string",
            "description": "status(Status)",
            "example": "Anstehend",
            "enum": [
              "Anstehend",
              "Begonnen",
              "Erledigt"
            ]
          },
          "projectId": {
            "type": "integer",
            "description": "projectId(Bezug zu Projekt)",
            "format": "int64",
            "example": 1003
          },
          "outgoingInvoiceId": {
            "type": "integer",
            "description": "outgoingInvoiceId(Bezug zu Beleg)",
            "format": "int64",
            "example": 1
          },
          "tags": {
            "type": "string",
            "description": "tags(Schlagwörter)",
            "example": "Schlagwort1"
          },
          "employeeDomain": {
            "type": "boolean",
            "description": "creates an employee task"
          },
          "setEstimatedHoursManually": {
            "type": "boolean",
            "description": "setEstimatedHoursManually(geschätzte Anzahl Stunden Manuell) allows setting the estimated hours manually"
          },
          "estimatedHours": {
            "type": "number",
            "description": "estimatedHours(geschätzte Anzahl Stunden)this parameter is evaluated only if setEstimatedHoursManually is set to true"
          },
          "customFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomField"
            }
          },
          "permissionType": {
            "maximum": 2,
            "minimum": 0,
            "type": "integer",
            "description": "permissionType [0 = Öffentlich, 1 = Benutzerdefiniert, 2 = Persönlich]",
            "format": "int32",
            "example": 1,
            "default": 0
          },
          "readPermissionProfiles": {
            "type": "string",
            "description": "comma separated list of profiles for the read permissions, evaluated only if permissionType equals 1.",
            "example": "Faktura - alle Rechte,CRM - Alle Rechte"
          },
          "readPermissionLogins": {
            "type": "string",
            "description": "comma separated list of user login emails for the read permissions, evaluated only if permissionType equals 1.",
            "example": "peter.mueller@scopevisio.com,michaela.trimm@scopevisio.com"
          },
          "writePermissionProfiles": {
            "type": "string",
            "description": "comma separated list of profiles for full access, evaluated only if permissionType equals 1.",
            "example": "Firmen und Benutzer - alle Rechte,Finanzen - alle Rechte"
          },
          "writePermissionLogins": {
            "type": "string",
            "description": "comma separated list of user login emails, evaluated only if permissionType equals 1.",
            "example": "stefan.tarn@scopevisio.com"
          }
        }
      },
      "TimeEntryForm": {
        "required": [
          "employeeId",
          "employeeMail"
        ],
        "type": "object",
        "properties": {
          "employeeId": {
            "type": "integer",
            "description": "Id of the user contact (Aus Benutzerkontakt)",
            "format": "int64",
            "example": 1345
          },
          "employeeMail": {
            "type": "string",
            "description": "employeeMail (replacement for employeeId, allows to associate with an employee email address/login, if you set this parameter then do not set employeeId)",
            "example": "joe.johnson@scopevisio.com"
          },
          "startTs": {
            "type": "integer",
            "description": "Start timestamp. If not given it is set to the current time.",
            "format": "int64"
          },
          "endTs": {
            "type": "integer",
            "description": "End timestamp. If not given it is set to the current time.",
            "format": "int64"
          },
          "fullDay": {
            "type": "boolean",
            "description": "fullDay. When set the data given in startTs and endTs is ignored. Both timestamps are set to the full day start and end time configured in the Scopevisio desktop application."
          },
          "contactId": {
            "type": "integer",
            "description": "contactId. If no contact is set explicitly by the user, the contact from project, task or order (in this priority order) is set. E.g. the user sets no contact and no project, but task and order. In this case the task contact is set to the time entry. If there is no contact in task, the order contact is set to the time entry.",
            "format": "int64",
            "example": 43234
          },
          "projectId": {
            "type": "integer",
            "description": "projectId. If no project is set by the user explicitly the project from task or order(in this priority order) is set. E.g. the user sets no contact and no project, but task and order(in the order there is a project set). In this case the task project contact is set to the time entry. If there is no project in task, the order project is set to the time entry.",
            "format": "int64",
            "example": 334
          },
          "taskId": {
            "type": "integer",
            "description": "taskId",
            "format": "int64",
            "example": 1923
          },
          "orderId": {
            "type": "integer",
            "description": "orderId",
            "format": "int64",
            "example": 943
          },
          "orderNumber": {
            "type": "string",
            "description": "orderNumber (replacement for orderId, allows to associate with an order document-number, if you set this parameter then do not set orderId)",
            "example": "AN-2020-100"
          },
          "productIdOrNumber": {
            "type": "string",
            "description": "productId or product number",
            "example": "87"
          },
          "legacynumber": {
            "type": "string",
            "description": "legacynumber ",
            "example": "id.123"
          },
          "billable": {
            "type": "boolean",
            "description": "billable"
          },
          "confirmed": {
            "type": "boolean",
            "description": "confirmed"
          },
          "stateDone": {
            "type": "boolean",
            "description": "done (Durchgeführt)"
          },
          "internalNote": {
            "type": "string",
            "description": "internal Note",
            "example": "Not coming personally"
          },
          "note": {
            "type": "string",
            "description": "note",
            "example": "VIP"
          },
          "workLocation": {
            "type": "string",
            "description": "workLocation (Leistungsort)",
            "example": "Homeoffice"
          },
          "customFields": {
            "type": "array",
            "description": "Benutzerdefinierte Felder",
            "items": {
              "$ref": "#/components/schemas/CustomField"
            }
          },
          "permissionType": {
            "maximum": 2,
            "minimum": 0,
            "type": "integer",
            "description": "permissionType [0 = Öffentlich, 1 = Benutzerdefiniert, 2 = Persönlich]",
            "format": "int32",
            "example": 1,
            "default": 0
          },
          "readPermissionProfiles": {
            "type": "string",
            "description": "comma separated list of profiles for the read permissions, evaluated only if permissionType equals 1.",
            "example": "Faktura - alle Rechte,CRM - Alle Rechte"
          },
          "readPermissionLogins": {
            "type": "string",
            "description": "comma separated list of user login emails for the read permissions, evaluated only if permissionType equals 1.",
            "example": "peter.mueller@scopevisio.com,michaela.trimm@scopevisio.com"
          },
          "writePermissionProfiles": {
            "type": "string",
            "description": "comma separated list of profiles for full access, evaluated only if permissionType equals 1.",
            "example": "Firmen und Benutzer - alle Rechte,Finanzen - alle Rechte"
          },
          "writePermissionLogins": {
            "type": "string",
            "description": "comma separated list of user login emails, evaluated only if permissionType equals 1.",
            "example": "stefan.tarn@scopevisio.com"
          }
        }
      },
      "TokenResponse": {
        "required": [
          "access_token",
          "expires_in",
          "organisationId",
          "organisationName",
          "refresh_token",
          "token_type",
          "uid"
        ],
        "type": "object",
        "properties": {
          "token_type": {
            "type": "string",
            "description": "Token type",
            "example": "Bearer",
            "enum": [
              "Bearer"
            ]
          },
          "access_token": {
            "type": "string",
            "description": "Access token",
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "expires_in": {
            "type": "integer",
            "description": "The remaining lifetime of the access token in seconds",
            "format": "int64",
            "example": 8639999
          },
          "refresh_token": {
            "type": "string",
            "description": "Refresh token",
            "example": "00000000-0000-0000-0000-000000000000"
          },
          "uid": {
            "type": "string",
            "description": "User ID",
            "example": "user_00000000-0000-0000-0000-000000000000"
          },
          "organisationId": {
            "type": "integer",
            "description": "Organisation ID",
            "format": "int64",
            "example": 7
          },
          "organisationName": {
            "type": "string",
            "description": "Organisation Name",
            "example": "Meine GmbH"
          },
          "teamworkTenantId": {
            "type": "string",
            "description": "Teamwork tenant ID",
            "example": "00000000-0000-0000-0000-000000000000"
          }
        }
      },
      "TravelEntryForm": {
        "required": [
          "employeeId",
          "endTs",
          "startTs"
        ],
        "type": "object",
        "properties": {
          "employeeId": {
            "type": "integer",
            "description": "contact id of the employee (Reisender)",
            "format": "int64",
            "example": 1345
          },
          "accountType": {
            "type": "string",
            "description": "accountType(Beschäftigungsart).",
            "enum": [
              "Mitarbeiter",
              "Unternehmer",
              "Extern"
            ],
            "default": "Mitarbeiter"
          },
          "documentNumber": {
            "type": "string",
            "description": "documentNumber(Reisenummer). \"documentNumber\" if not provided a document number is generated. ",
            "example": "RK-2020-2"
          },
          "orderId": {
            "type": "integer",
            "description": "orderId(Auftrag)",
            "format": "int64",
            "example": 943
          },
          "dimensionNumber": {
            "type": "integer",
            "description": "dimensionNumber(Kostenstelle)",
            "format": "int64",
            "example": 334
          },
          "projectId": {
            "type": "integer",
            "description": "projectId(Projekt)",
            "format": "int64",
            "example": 334
          },
          "note": {
            "type": "string",
            "description": "note(Anlass der Reise).",
            "example": "VIP"
          },
          "startTs": {
            "type": "integer",
            "description": "start timestamp(Reisebeginn).\"startTs\" is a mandatory field. ",
            "format": "int64",
            "example": 1609484400000
          },
          "endTs": {
            "type": "integer",
            "description": "end timestamp(Reiseende).\"endTs\" is a mandatory field. ",
            "format": "int64",
            "example": 1627833600000
          },
          "startContactId": {
            "type": "integer",
            "description": "contactId of start address(Kontakt)",
            "format": "int64",
            "example": 4514
          },
          "startStreet": {
            "type": "string",
            "description": "street and number of start address(Straße und Hausnummer)",
            "example": "Hautpstr. 10"
          },
          "startCity": {
            "type": "string",
            "description": "city of start address(Stadt)",
            "example": "Köln"
          },
          "startPostcode": {
            "type": "string",
            "description": "postcode of start address(Postleitzahl)",
            "example": "50667"
          },
          "startCountry": {
            "type": "string",
            "description": "country of start address(Land)",
            "example": "Deutschland"
          },
          "startFederalState": {
            "type": "string",
            "description": "federalState of start address(Bundesland)",
            "example": "Nordrhein-Westfalen"
          },
          "contactId": {
            "type": "integer",
            "description": "contactId(Kontakt)",
            "format": "int64",
            "example": 1345
          },
          "street": {
            "type": "string",
            "description": "street and number(Straße und Hausnummer)",
            "example": "Hautpstr. 10"
          },
          "city": {
            "type": "string",
            "description": "city(Stadt)",
            "example": "Köln"
          },
          "postcode": {
            "type": "string",
            "description": "postcode(Postleitzahl)",
            "example": "50667"
          },
          "country": {
            "type": "string",
            "description": "county(Land)",
            "example": "Deutschland"
          },
          "federalState": {
            "type": "string",
            "description": "federalstate(Bundesland)",
            "example": "Nordrhein-Westfalen"
          },
          "internalNote": {
            "type": "string",
            "description": "internalNote(Interne Notiz)",
            "example": "Not coming personally"
          },
          "stateDone": {
            "type": "boolean",
            "description": "stateDone(Durchgeführt)",
            "default": false
          },
          "billable": {
            "type": "boolean",
            "description": "billable(Fakturierbar)",
            "default": false
          },
          "permissionType": {
            "maximum": 2,
            "minimum": 0,
            "type": "integer",
            "description": "permissionType [0 = Öffentlich, 1 = Benutzerdefiniert, 2 = Persönlich]",
            "format": "int32",
            "example": 1,
            "default": 0
          },
          "readPermissionProfiles": {
            "type": "string",
            "description": "comma separated list of profiles for the read permissions, evaluated only if permissionType equals 1.",
            "example": "Faktura - alle Rechte,CRM - Alle Rechte"
          },
          "readPermissionLogins": {
            "type": "string",
            "description": "comma separated list of user login emails for the read permissions, evaluated only if permissionType equals 1.",
            "example": "peter.mueller@scopevisio.com,michaela.trimm@scopevisio.com"
          },
          "writePermissionProfiles": {
            "type": "string",
            "description": "comma separated list of profiles for full access, evaluated only if permissionType equals 1.",
            "example": "Firmen und Benutzer - alle Rechte,Finanzen - alle Rechte"
          },
          "writePermissionLogins": {
            "type": "string",
            "description": "comma separated list of user login emails, evaluated only if permissionType equals 1.",
            "example": "stefan.tarn@scopevisio.com"
          },
          "entryType": {
            "maximum": 1,
            "minimum": 0,
            "type": "integer",
            "description": "entryType(Typ) [0 = Trip (Reise), 1 = Expenses (Spesen)].",
            "format": "int32",
            "example": 0,
            "default": 0
          }
        }
      }
    },
    "securitySchemes": {
      "oauth": {
        "type": "oauth2",
        "description": "Authorization is provided by a Scopevisio web page. You can leave the field client_secret blank.",
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "/static/authorize.html",
            "tokenUrl": "/rest/token",
            "scopes": {}
          }
        }
      }
    }
  }
}