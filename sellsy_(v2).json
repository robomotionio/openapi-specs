{
  "openapi": "3.0.2",
  "x-stoplight": {
    "id": "rdxzrnkmu1ma2"
  },
  "info": {
    "title": "Sellsy API",
    "version": "2.42.0",
    "description": "Find out the [Postman collections](dist/postman/CollectionsApiV2.json) with the required [environment variables](dist/postman/Environment.json)\n\nFind out the [Changelog](changelog.html)\n# Errors\n\nThe errors are returned in JSON with the following format:\n```\n{\n  \"error\": {\n     \"code\": HTTP_CODE,\n     \"message\": \"Error message\",\n     \"context\": \"Error context code\"\n     \"details\": {\n          \"FIELD\": \"Error message\"\n     }\n}\n```\n\nThe `details` field can contain an object that details the error. It is used in particular during validation to return the invalid fields\n\n\n| HTTP Code     | Description   |\n| ------------- | ------------- |\n| 400           | Validation and logic errors |\n| 401           | Authentification errors |\n| 402           | Quotas limit reached |\n| 403           | Insufficient privileges  |\n| 404           | Page not found |\n| 427           | A request is already in progress on the same object |\n| 429           | Quotas of requests reached (See quotas section) |\n| 5xx           | Server errors |\n\n\n# Versioning\n\nThis API is versioned, the modifications carried out on this one should not generate regression if you respect the following recommendations:\n\n- A new field can be added, your code must authorize this\n- A new error code can be added, your code must deal with unknown errors\n- On lists, values can be added\n- A missing field is not equal to `null`\n\nTo target a specific **major** version of the API, just precise the number in the url:  `{url}/v2/{endpoint}`\n\n# Quotas\n\nA limit on the number of requests per second, minute, day and/or month is applied to each user account.\n\nA 429 error will be sent if at least one of the quotas has reached zero.\n\nYou can know your remaining quota through the headers of the response:\n- `X-Quota-Remaining-By-Second`\n- `X-Quota-Remaining-By-Minute`\n- `X-Quota-Remaining-By-Day`\n- `X-Quota-Remaining-By-Month`\n\nThe quotas are counted on each request, even in the event of an error. On the scripts generating a lot of requests, it is therefore necessary to check these values before returning requests.\n\nA new 402 error code has created. This error appears when you try to create ressources like a pipeline or custom fields and the quota limit has been reached.\n\n# Pagination in listing and search queries\nOn listing and search queries, the pagination offset is presented as int or string type.\n\nYou can choose between two modes:\n\nBy default, the \"seek\" method is used, for performances and optimization issues : the offset represents the LAST object in the returned list. It must be returned in the same format to display the next page:\n```\nGET {{url}}/comments?limit=1\n\n{\n    \"data\": [\n        {\n            \"id\": 1\n        }\n    ],\n    \"pagination\": {\n        \"limit\": 1,\n        \"count\": 1,\n        \"total\": 13,\n        \"offset\": \"WyIxMSJd\"\n    }\n}\n\nGET {{url}}/comments?limit=1&offset=WyIxMSJd\n\n{\n    \"data\": [\n        {\n            \"id\": 2\n        }\n    ],\n    \"pagination\": {\n        \"limit\": 1,\n        \"count\": 1,\n        \"total\": 13,\n        \"offset\": \"SoIxNyJd\"\n    }\n}\n```\nThe second is a more classic method, where the offset corresponds to the page number, must be explicitly called up on the first request:\n\n```\nGET {{url}}/comments?limit=1&offset=0\n\n{\n    \"data\": [\n        {\n            \"id\": 1\n        }\n    ],\n    \"pagination\": {\n        \"limit\": 1,\n        \"count\": 1,\n        \"total\": 13,\n        \"offset\": 0\n    }\n}\n\nGET {{url}}/comments?limit=1&offset=1\n\n{\n    \"data\": [\n        {\n            \"id\": 2\n        }\n    ],\n    \"pagination\": {\n        \"limit\": 1,\n        \"count\": 1,\n        \"total\": 13,\n        \"offset\": 1\n    }\n}\n```\n# Embed objects\nAdditional objects can be included in the result, and are specified on each endpoint under the `embed` parameter. Those objects  may require different oauth2 scopes than the main endpoint, and will automatically be `null` if the scopes are not respected. Usually, the scopes are listed in the description of the parameter.",
    "contact": {
      "email": "api@sellsy.com"
    },
    "x-logo": {
      "url": "./resources/sellsy.png"
    }
  },
  "servers": [
    {
      "url": "https://api.sellsy.com/v2"
    }
  ],
  "tags": [
    {
      "name": "API Management",
      "description": "Api management"
    },
    {
      "name": "Accounting",
      "description": "Accouting management"
    },
    {
      "name": "Activities",
      "description": "Activities management"
    },
    {
      "name": "Batch",
      "description": "Batch requests"
    },
    {
      "name": "CRM Activities",
      "description": "CRM Activity management"
    },
    {
      "name": "Calendar",
      "description": "Calendar management"
    },
    {
      "name": "Comments",
      "description": "Comments"
    },
    {
      "name": "Companies",
      "description": "Client, Prospect and Supplier management"
    },
    {
      "name": "Conformities",
      "description": "Invoicing conformities management"
    },
    {
      "name": "Contacts",
      "description": "Contacts management"
    },
    {
      "name": "Corporations",
      "description": "Corporations management"
    },
    {
      "name": "Countries",
      "description": "Countries management"
    },
    {
      "name": "Credit notes",
      "description": "Credit Notes documents"
    },
    {
      "name": "Currencies",
      "description": "Currency management"
    },
    {
      "name": "Custom Activities",
      "description": "Custom Activities management"
    },
    {
      "name": "Custom Fields",
      "description": "Custom Fields management"
    },
    {
      "name": "Documents",
      "description": "Invoices and credit notes on the account"
    },
    {
      "name": "Electronic Signature",
      "description": "Electronic Signature management"
    },
    {
      "name": "Emails",
      "description": "Emails management"
    },
    {
      "name": "Estimates",
      "description": "Estimates documents"
    },
    {
      "name": "Fiscal Year",
      "description": "Fiscal year endpoint"
    },
    {
      "name": "Individuals",
      "description": "Individuals management"
    },
    {
      "name": "Invoices",
      "description": "Invoices documents"
    },
    {
      "name": "Items",
      "description": "Items management"
    },
    {
      "name": "Listings",
      "description": "Listings management"
    },
    {
      "name": "Marketing",
      "description": "Marketing management"
    },
    {
      "name": "Notifications",
      "description": "Notifications management"
    },
    {
      "name": "Opportunities",
      "description": "Opportunity Management"
    },
    {
      "name": "Payments",
      "description": "Payments management"
    },
    {
      "name": "PhoneCalls",
      "description": "PhoneCalls Management"
    },
    {
      "name": "Purchase (OCR)",
      "description": "Ocr Management"
    },
    {
      "name": "Quotas",
      "description": "Quotas management"
    },
    {
      "name": "Search Documents",
      "description": "Search documents"
    },
    {
      "name": "Smart Tags",
      "description": "Smart-tags management"
    },
    {
      "name": "Staffs",
      "description": "Staffs management"
    },
    {
      "name": "Tasks",
      "description": "Tasks management"
    },
    {
      "name": "Taxes",
      "description": "Taxes management"
    },
    {
      "name": "Two Factor Authentication",
      "description": "Two Factor Authentication management"
    },
    {
      "name": "Units",
      "description": "Units management"
    },
    {
      "name": "Webhooks",
      "description": "Webhooks"
    }
  ],
  "x-tagGroups": [
    {
      "name": "Core",
      "tags": [
        "Batch",
        "API Management",
        "Webhooks",
        "Listings",
        "Activities",
        "Custom Activities",
        null,
        null
      ]
    },
    {
      "name": "Prospection",
      "tags": [
        "Companies",
        "Contacts",
        "Individuals",
        "Opportunities",
        "Calendar",
        "Emails",
        "Comments",
        "Tasks",
        "PhoneCalls",
        "CRM Activities",
        "Estimates",
        null
      ]
    },
    {
      "name": "Catalog",
      "tags": [
        "Items",
        "Units",
        "Taxes"
      ]
    },
    {
      "name": "Invoicing",
      "tags": [
        "Accounting",
        "Purchase (OCR)",
        "Payments",
        null,
        "Invoices",
        "Credit Notes"
      ]
    },
    {
      "name": "Account",
      "tags": [
        "Currencies",
        "Custom Fields",
        "Countries",
        "Smart Tags",
        "Documents",
        "Staffs",
        "Subscription",
        "Quotas",
        "Conformities",
        "Notifications",
        null,
        "Fiscal Year"
      ]
    }
  ],
  "paths": {
    "/comments": {
      "get": {
        "summary": "Comments List",
        "tags": [
          "Comments"
        ],
        "description": "Get a list of comments",
        "operationId": "get-comments",
        "parameters": [
          {
            "$ref": "#/components/parameters/direction"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/commentItemEmbed"
          },
          {
            "$ref": "#/components/parameters/commentOrder"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/CommentItem"
                      }
                    }
                  },
                  "required": [
                    "pagination",
                    "data"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "comments.read"
            ]
          }
        ]
      },
      "post": {
        "summary": "Create a comment",
        "tags": [
          "Comments"
        ],
        "description": "Create a comment",
        "operationId": "create-comment",
        "parameters": [
          {
            "$ref": "#/components/parameters/commentItemEmbed"
          },
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "responses": {
          "201": {
            "description": "Comment created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommentItem"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommentCreateItem"
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "comments.write"
            ]
          }
        ]
      }
    },
    "/comments/{id}": {
      "parameters": [
        {
          "schema": {
            "type": "integer"
          },
          "name": "id",
          "in": "path",
          "required": true,
          "description": "Comment id"
        }
      ],
      "get": {
        "summary": "Get comment details",
        "parameters": [
          {
            "$ref": "#/components/parameters/commentItemEmbed"
          },
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "tags": [
          "Comments"
        ],
        "responses": {
          "200": {
            "description": "Comment Fetched",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommentItem"
                }
              }
            }
          }
        },
        "operationId": "get-comment",
        "description": "Fetch comment details",
        "security": [
          {
            "oauth2": [
              "comments.read"
            ]
          }
        ]
      },
      "put": {
        "summary": "Update a comment",
        "tags": [
          "Comments"
        ],
        "description": "Udate a comment",
        "operationId": "update-comment",
        "parameters": [
          {
            "$ref": "#/components/parameters/commentItemEmbed"
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/verify"
          }
        ],
        "responses": {
          "200": {
            "description": "Comment updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommentItem"
                }
              }
            }
          },
          "204": {
            "$ref": "#/components/schemas/Verify"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommentUpdateItem"
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "comments.write"
            ]
          }
        ]
      },
      "delete": {
        "summary": "Delete a comment",
        "tags": [
          "Comments"
        ],
        "operationId": "delete-comment",
        "responses": {
          "204": {
            "description": "Comment deleted"
          }
        },
        "description": "Remove a comment",
        "security": [
          {
            "oauth2": [
              "comments.write"
            ]
          }
        ]
      }
    },
    "/comments/search": {
      "post": {
        "summary": "Search comments",
        "tags": [
          "Comments"
        ],
        "description": "Search through comments",
        "operationId": "search-comments",
        "parameters": [
          {
            "$ref": "#/components/parameters/direction"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/commentItemEmbed"
          },
          {
            "$ref": "#/components/parameters/commentOrder"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommentFilters"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Comments List Fetched",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/CommentItem"
                      }
                    }
                  },
                  "required": [
                    "pagination",
                    "data"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "comments.read"
            ]
          }
        ]
      }
    },
    "/companies": {
      "post": {
        "summary": "Create a company",
        "tags": [
          "Companies"
        ],
        "operationId": "create-company",
        "parameters": [
          {
            "in": "query",
            "name": "embed",
            "description": "Example : `embed[]=invoicing_contact&embed[]=cf.1542&embed[]=acl` <br /> Additional object included in the result.<br /><br /> Each embed object may require different oauth2 scopes than the main endpoint:<br /> - opportunities: `opportunities.read`<br /> - main_contact, dunning_contact, invoicing_contact: `contacts.read`<br /> - estimates,invoices,orders,deliveries: `invoicing.read`<br /> - cf.{custom_field_id} : `custom-fields.read` <br /> - smart_tags: `smart-tags.read`<br /> Additionnally, the smart_tags embed is limited to the 20 first results sorted in alphabetical order. <br />\n",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "string",
                    "title": "standards",
                    "description": "The standards embeds",
                    "enum": [
                      "invoicing_address",
                      "delivery_address",
                      "main_contact",
                      "dunning_contact",
                      "invoicing_contact",
                      "opportunities",
                      "estimates",
                      "invoices",
                      "orders",
                      "deliveries",
                      "acl",
                      "smart_tags"
                    ]
                  },
                  {
                    "type": "string",
                    "title": "custom-fields",
                    "description": "Each custom field value can be requested as an embed object by passing the custom field identifier in the query, prefixed with the \"cf.\" string. Such as `embed[]=cf.123` for the value of the custom field of identifier `123`",
                    "pattern": "^cf.\\d+$"
                  }
                ]
              }
            }
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/verify"
          }
        ],
        "responses": {
          "201": {
            "description": "Company created",
            "content": {
              "application/json": {
                "schema": {
                  "title": "Company with embed",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/SaleEmbed/properties/_embed/allOf/0/properties/company"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "_embed": {
                          "nullable": true,
                          "allOf": [
                            {
                              "title": "Embed for Company",
                              "type": "object",
                              "description": "Optional objects added through the embed parameter",
                              "x-examples": {},
                              "additionalProperties": false,
                              "allOf": [
                                {
                                  "type": "object",
                                  "properties": {
                                    "invoicing_address": {
                                      "nullable": true,
                                      "description": "Invocing address",
                                      "allOf": [
                                        {
                                          "$ref": "#/components/schemas/SaleEmbed/properties/_embed/allOf/0/properties/invoicing_address"
                                        }
                                      ]
                                    },
                                    "delivery_address": {
                                      "nullable": true,
                                      "description": "Delivery address",
                                      "allOf": [
                                        {
                                          "$ref": "#/components/schemas/SaleEmbed/properties/_embed/allOf/0/properties/invoicing_address"
                                        }
                                      ]
                                    },
                                    "main_contact": {
                                      "nullable": true,
                                      "description": "Main contact",
                                      "allOf": [
                                        {
                                          "$ref": "#/components/schemas/ContactCreateItem/allOf/0"
                                        }
                                      ]
                                    },
                                    "dunning_contact": {
                                      "nullable": true,
                                      "description": "Dunning contact",
                                      "allOf": [
                                        {
                                          "$ref": "#/components/schemas/ContactCreateItem/allOf/0"
                                        }
                                      ]
                                    },
                                    "invoicing_contact": {
                                      "nullable": true,
                                      "description": "Invoicing contact",
                                      "allOf": [
                                        {
                                          "$ref": "#/components/schemas/ContactCreateItem/allOf/0"
                                        }
                                      ]
                                    },
                                    "opportunities": {
                                      "nullable": true,
                                      "type": "integer",
                                      "description": "Count of opportunities",
                                      "example": 2
                                    },
                                    "estimates": {
                                      "nullable": true,
                                      "type": "integer",
                                      "description": "Count of estimates",
                                      "example": 2
                                    },
                                    "invoices": {
                                      "nullable": true,
                                      "type": "integer",
                                      "description": "Count of invoices",
                                      "example": 2
                                    },
                                    "orders": {
                                      "nullable": true,
                                      "type": "integer",
                                      "description": "Count of orders",
                                      "example": 2
                                    },
                                    "deliveries": {
                                      "nullable": true,
                                      "type": "integer",
                                      "description": "Count of deliveries",
                                      "example": 2
                                    },
                                    "acl": {
                                      "nullable": true,
                                      "description": "Company acl",
                                      "allOf": [
                                        {
                                          "$ref": "#/components/schemas/Activity/properties/_embed/properties/acl/oneOf/0"
                                        }
                                      ]
                                    },
                                    "smart_tags": {
                                      "nullable": true,
                                      "description": "Smart-tags linked",
                                      "allOf": [
                                        {
                                          "$ref": "#/components/schemas/SaleEmbed/properties/_embed/allOf/0/properties/smart_tags/allOf/0"
                                        }
                                      ]
                                    }
                                  }
                                },
                                {
                                  "$ref": "#/components/schemas/SaleEmbed/properties/_embed/allOf/1"
                                }
                              ]
                            }
                          ]
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "204": {
            "$ref": "#/components/schemas/Verify"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Company",
                "type": "object",
                "additionalProperties": false,
                "description": "",
                "x-examples": {},
                "required": [
                  "name",
                  "type"
                ],
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "prospect",
                      "client",
                      "supplier"
                    ]
                  },
                  "name": {
                    "type": "string",
                    "description": "Company name",
                    "example": "Example company"
                  },
                  "email": {
                    "description": "Company email",
                    "type": "string",
                    "format": "email",
                    "example": "contact@example-company.com",
                    "nullable": true
                  },
                  "website": {
                    "type": "string",
                    "format": "url",
                    "description": "Company website",
                    "example": "http://example-company.com",
                    "nullable": true
                  },
                  "phone_number": {
                    "type": "string",
                    "description": "Company phone number",
                    "example": "+33100000000",
                    "nullable": true
                  },
                  "mobile_number": {
                    "type": "string",
                    "description": "Company mobile number",
                    "example": "+33600000000",
                    "nullable": true
                  },
                  "fax_number": {
                    "type": "string",
                    "description": "Company Fax number",
                    "example": "+33100000000",
                    "nullable": true
                  },
                  "legal_france": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "siret": {
                        "description": "Company Siret",
                        "type": "string",
                        "minLength": 14,
                        "maxLength": 14,
                        "nullable": true,
                        "example": "73282932000074"
                      },
                      "siren": {
                        "description": "Company Siren",
                        "type": "string",
                        "minLength": 9,
                        "maxLength": 9,
                        "nullable": true,
                        "example": "732829320"
                      },
                      "vat": {
                        "description": "VAT number",
                        "type": "string",
                        "minLength": 2,
                        "maxLength": 15,
                        "nullable": true,
                        "example": "FR99999999999"
                      },
                      "ape_naf_code": {
                        "description": "APE/NAF Code",
                        "type": "string",
                        "minLength": 5,
                        "maxLength": 6,
                        "nullable": true,
                        "example": "4711C"
                      },
                      "company_type": {
                        "description": "Company type",
                        "type": "string",
                        "minLength": 2,
                        "maxLength": 100,
                        "nullable": true,
                        "example": "SAS"
                      },
                      "rcs_immatriculation": {
                        "description": "RCS immatriculation code",
                        "type": "string",
                        "minLength": 3,
                        "maxLength": 200,
                        "nullable": true,
                        "example": "RCS xxxxx"
                      }
                    }
                  },
                  "capital": {
                    "type": "string",
                    "nullable": true,
                    "description": "Company Capital",
                    "example": "4000"
                  },
                  "reference": {
                    "type": "string",
                    "description": "Company reference",
                    "example": "CLI-1654",
                    "nullable": true
                  },
                  "note": {
                    "type": "string",
                    "description": "Note on company",
                    "example": "An handed-written note describing this company"
                  },
                  "auxiliary_code": {
                    "type": "string",
                    "description": "Auxiliary code",
                    "example": "0EX11C",
                    "nullable": true
                  },
                  "social": {
                    "type": "object",
                    "properties": {
                      "twitter": {
                        "type": "string",
                        "format": "url",
                        "description": "Twitter account",
                        "example": "https://twitter.com/example",
                        "nullable": true
                      },
                      "facebook": {
                        "type": "string",
                        "format": "url",
                        "description": "Facebook account",
                        "example": "https://facebook.com/example",
                        "nullable": true
                      },
                      "linkedin": {
                        "type": "string",
                        "format": "url",
                        "description": "Linkedin account",
                        "example": "https://linkedin.com/example",
                        "nullable": true
                      },
                      "viadeo": {
                        "type": "string",
                        "format": "url",
                        "description": "Viadeo account",
                        "example": "https://viadeo.com/example",
                        "nullable": true
                      }
                    }
                  },
                  "rate_category_id": {
                    "type": "integer",
                    "nullable": true,
                    "description": "Company Rate category id",
                    "example": 9956
                  },
                  "accounting_code_id": {
                    "type": "integer",
                    "nullable": true,
                    "description": "Company accounting code id",
                    "example": 12345
                  },
                  "accounting_purchase_code_id": {
                    "type": "integer",
                    "nullable": true,
                    "description": "Company accouting purchase code id",
                    "example": 98556
                  },
                  "is_archived": {
                    "type": "boolean",
                    "nullable": false,
                    "description": "Status archived or not",
                    "example": false
                  },
                  "business_segment": {
                    "type": "integer",
                    "description": "Company business segment",
                    "nullable": true
                  },
                  "number_of_employees": {
                    "type": "integer",
                    "description": "Number of employees of company",
                    "nullable": true
                  },
                  "marketing_campaigns_subscriptions": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "sms",
                        "phone",
                        "email",
                        "postal_mail",
                        "custom"
                      ]
                    },
                    "description": "list of campaign type subcribed",
                    "uniqueItems": true
                  },
                  "created": {
                    "description": "Date of creation of the company",
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          },
          "description": ""
        },
        "security": [
          {
            "oauth2": [
              "companies.write"
            ]
          }
        ],
        "description": "Create a company"
      },
      "get": {
        "summary": "Companies List",
        "tags": [
          "Companies"
        ],
        "description": "Get a list of companies",
        "operationId": "get-companies",
        "parameters": [
          {
            "in": "query",
            "name": "order",
            "description": "The order field",
            "schema": {
              "type": "string",
              "example": "id",
              "enum": [
                "name",
                "id",
                "created_at",
                "updated_at"
              ]
            }
          },
          {
            "$ref": "#/paths/~1companies/post/parameters/0"
          },
          {
            "$ref": "#/components/parameters/direction"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "Companies List Fetched",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/paths/~1companies/post/responses/201/content/application~1json/schema"
                      }
                    }
                  },
                  "required": [
                    "pagination",
                    "data"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "companies.read"
            ]
          }
        ]
      }
    },
    "/companies/search": {
      "post": {
        "summary": "Search companies",
        "tags": [
          "Companies"
        ],
        "description": "Search companies",
        "operationId": "search-companies",
        "parameters": [
          {
            "$ref": "#/paths/~1companies/get/parameters/0"
          },
          {
            "$ref": "#/paths/~1companies/post/parameters/0"
          },
          {
            "$ref": "#/components/parameters/direction"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Company filters",
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "filters"
                ],
                "properties": {
                  "filters": {
                    "type": "object",
                    "additionalProperties": false,
                    "description": "Company filters",
                    "properties": {
                      "created": {
                        "title": "Created at",
                        "type": "object",
                        "description": "Filter the company list by creation date",
                        "properties": {
                          "start": {
                            "type": "string",
                            "format": "date-time",
                            "example": "2020-01-01T00:00:00+01:00"
                          },
                          "end": {
                            "type": "string",
                            "format": "date-time",
                            "example": "2020-02-01T00:00:00+01:00"
                          }
                        }
                      },
                      "updated_at": {
                        "title": "Updated at",
                        "type": "object",
                        "description": "Filter the company list by modified date",
                        "properties": {
                          "start": {
                            "type": "string",
                            "format": "date-time",
                            "example": "2020-01-01T00:00:00+01:00"
                          },
                          "end": {
                            "type": "string",
                            "format": "date-time",
                            "example": "2020-02-01T00:00:00+01:00"
                          }
                        }
                      },
                      "name": {
                        "title": "Name",
                        "type": "string",
                        "description": "Filter the company list by name (exact search)",
                        "example": "Company"
                      },
                      "email": {
                        "title": "Email",
                        "type": "string",
                        "description": "Filter the company list by email (exact search)",
                        "example": "contact@example.com"
                      },
                      "type": {
                        "title": "Type",
                        "description": "Filter the company list by type",
                        "oneOf": [
                          {
                            "type": "string",
                            "enum": [
                              "prospect",
                              "client",
                              "supplier"
                            ]
                          },
                          {
                            "type": "array",
                            "uniqueItems": true,
                            "items": {
                              "type": "string",
                              "enum": [
                                "prospect",
                                "client",
                                "supplier"
                              ]
                            }
                          }
                        ]
                      },
                      "is_archived": {
                        "title": "Is archived",
                        "type": "boolean",
                        "description": "Filter the company list by is_archived",
                        "example": false
                      },
                      "contacts": {
                        "title": "Contacts",
                        "description": "Filter the company list for the given contacts",
                        "type": "array",
                        "items": {
                          "type": "integer"
                        }
                      },
                      "siret": {
                        "title": "Siret",
                        "description": "Filter the company list by siret",
                        "type": "string",
                        "example": "36252187900034"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Companies List Fetched",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/paths/~1companies/post/responses/201/content/application~1json/schema"
                      }
                    }
                  },
                  "required": [
                    "pagination",
                    "data"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "companies.read"
            ]
          }
        ]
      }
    },
    "/companies/{id}": {
      "parameters": [
        {
          "schema": {
            "type": "integer"
          },
          "name": "id",
          "in": "path",
          "required": true,
          "description": "Company id"
        }
      ],
      "get": {
        "summary": "Get Company",
        "tags": [
          "Companies"
        ],
        "parameters": [
          {
            "$ref": "#/paths/~1companies/post/parameters/0"
          },
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "Company Fetched",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1companies/post/responses/201/content/application~1json/schema"
                }
              }
            }
          }
        },
        "operationId": "get-company",
        "description": "Fetch company informations",
        "security": [
          {
            "oauth2": [
              "companies.read"
            ]
          }
        ]
      },
      "put": {
        "summary": "Update Company",
        "tags": [
          "Companies"
        ],
        "operationId": "update-company",
        "parameters": [
          {
            "$ref": "#/paths/~1companies/post/parameters/0"
          },
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "Company Updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1companies/post/responses/201/content/application~1json/schema"
                }
              }
            }
          }
        },
        "description": "Update Company informations",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Company",
                "type": "object",
                "additionalProperties": false,
                "description": "",
                "x-examples": {},
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Company name",
                    "example": "Example company"
                  },
                  "email": {
                    "description": "Company email",
                    "type": "string",
                    "format": "email",
                    "example": "contact@example-company.com",
                    "nullable": true
                  },
                  "website": {
                    "type": "string",
                    "format": "url",
                    "description": "Company website",
                    "example": "http://example-company.com",
                    "nullable": true
                  },
                  "phone_number": {
                    "type": "string",
                    "description": "Company phone number",
                    "example": "+33100000000",
                    "nullable": true
                  },
                  "mobile_number": {
                    "type": "string",
                    "description": "Company mobile number",
                    "example": "+33600000000",
                    "nullable": true
                  },
                  "fax_number": {
                    "type": "string",
                    "description": "Company Fax number",
                    "example": "+33100000000",
                    "nullable": true
                  },
                  "legal_france": {
                    "$ref": "#/paths/~1companies/post/requestBody/content/application~1json/schema/properties/legal_france"
                  },
                  "capital": {
                    "type": "string",
                    "nullable": true,
                    "description": "Company Capital",
                    "example": "4000"
                  },
                  "reference": {
                    "type": "string",
                    "description": "Company reference",
                    "example": "CLI-1654",
                    "nullable": true
                  },
                  "note": {
                    "type": "string",
                    "description": "Note on company",
                    "example": "An handed-written note describing this company"
                  },
                  "auxiliary_code": {
                    "type": "string",
                    "description": "Auxiliary code",
                    "example": "0EX11C",
                    "nullable": true
                  },
                  "social": {
                    "$ref": "#/paths/~1companies/post/requestBody/content/application~1json/schema/properties/social"
                  },
                  "rate_category_id": {
                    "type": "integer",
                    "nullable": true,
                    "description": "Company Rate category id",
                    "example": 9956
                  },
                  "accounting_code_id": {
                    "type": "integer",
                    "nullable": true,
                    "description": "Company accounting code id",
                    "example": 12345
                  },
                  "accounting_purchase_code_id": {
                    "type": "integer",
                    "nullable": true,
                    "description": "Company accouting purchase code id",
                    "example": 98556
                  },
                  "is_archived": {
                    "type": "boolean",
                    "nullable": false,
                    "description": "Status archived or not",
                    "example": false
                  },
                  "business_segment": {
                    "type": "integer",
                    "description": "Company business segment",
                    "nullable": true
                  },
                  "number_of_employees": {
                    "type": "integer",
                    "description": "Number of employees of company",
                    "nullable": true
                  },
                  "marketing_campaigns_subscriptions": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "sms",
                        "phone",
                        "email",
                        "postal_mail",
                        "custom"
                      ]
                    },
                    "description": "list of campaign type subcribed",
                    "uniqueItems": true
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "companies.write"
            ]
          }
        ]
      },
      "delete": {
        "summary": "Delete company",
        "tags": [
          "Companies"
        ],
        "operationId": "delete-company",
        "responses": {
          "204": {
            "description": "Company Deleted"
          }
        },
        "description": "Remove a company",
        "security": [
          {
            "oauth2": [
              "companies.write"
            ]
          }
        ]
      }
    },
    "/companies/{companyId}/addresses": {
      "parameters": [
        {
          "schema": {
            "type": "integer"
          },
          "name": "companyId",
          "in": "path",
          "required": true,
          "description": "Company id"
        }
      ],
      "get": {
        "summary": "Get company addresses",
        "tags": [
          "Companies"
        ],
        "responses": {
          "200": {
            "description": "Addresses Fetched",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Address"
                      }
                    }
                  },
                  "required": [
                    "pagination",
                    "data"
                  ]
                }
              }
            }
          }
        },
        "operationId": "get-company-addresses",
        "security": [
          {
            "oauth2": [
              "companies.read"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Companies"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/verify"
          }
        ],
        "responses": {
          "201": {
            "description": "Address created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Address"
                }
              }
            }
          },
          "204": {
            "$ref": "#/components/schemas/Verify"
          }
        },
        "operationId": "create-company-address",
        "summary": "Create a company address",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AddressCreate"
                  }
                ]
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "companies.write"
            ]
          }
        ]
      }
    },
    "/companies/{companyId}/addresses/{id}": {
      "parameters": [
        {
          "schema": {
            "type": "integer"
          },
          "name": "companyId",
          "in": "path",
          "required": true,
          "description": "Company id"
        },
        {
          "schema": {
            "type": "integer"
          },
          "name": "id",
          "in": "path",
          "required": true,
          "description": "Address id"
        }
      ],
      "get": {
        "tags": [
          "Companies"
        ],
        "responses": {
          "200": {
            "description": "Address fetched",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Address"
                }
              }
            }
          }
        },
        "operationId": "get-company-address",
        "summary": "Get a company address",
        "security": [
          {
            "oauth2": [
              "companies.read"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Companies"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/verify"
          }
        ],
        "responses": {
          "200": {
            "description": "Address updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Address"
                }
              }
            }
          },
          "204": {
            "$ref": "#/components/schemas/Verify"
          }
        },
        "operationId": "update-company-address",
        "summary": "Update a company address",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddressUpdate"
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "companies.write"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Companies"
        ],
        "responses": {
          "204": {
            "description": "Address deleted"
          }
        },
        "operationId": "delete-company-address",
        "summary": "Delete a company address",
        "security": [
          {
            "oauth2": [
              "companies.write"
            ]
          }
        ]
      }
    },
    "/companies/{id}/contacts": {
      "parameters": [
        {
          "schema": {
            "type": "integer"
          },
          "name": "id",
          "in": "path",
          "required": true,
          "description": "Company id"
        }
      ],
      "get": {
        "summary": "Get a company contacts",
        "tags": [
          "Companies"
        ],
        "responses": {
          "200": {
            "description": "List fetched",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ContactCollectionItem"
                      }
                    }
                  },
                  "required": [
                    "pagination",
                    "data"
                  ]
                }
              }
            }
          }
        },
        "operationId": "get-company-contacts",
        "parameters": [
          {
            "$ref": "#/components/parameters/order"
          },
          {
            "$ref": "#/components/parameters/direction"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/contactEmbed"
          },
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "security": [
          {
            "oauth2": [
              "companies.read",
              "contacts.read"
            ]
          }
        ]
      }
    },
    "/companies/{companyId}/contacts/{contactId}": {
      "parameters": [
        {
          "schema": {
            "type": "integer"
          },
          "name": "companyId",
          "in": "path",
          "required": true,
          "description": "Company id"
        },
        {
          "schema": {
            "type": "integer"
          },
          "name": "contactId",
          "in": "path",
          "required": true,
          "description": "Contact id"
        }
      ],
      "post": {
        "summary": "Link a contact at one company",
        "tags": [
          "Companies"
        ],
        "responses": {
          "200": {
            "description": "Contact already linked"
          },
          "201": {
            "description": "Contact linked"
          }
        },
        "operationId": "link-company-contact",
        "security": [
          {
            "oauth2": [
              "companies.write",
              "contacts.read"
            ]
          }
        ]
      },
      "delete": {
        "summary": "Unlink a contact of company",
        "tags": [
          "Companies"
        ],
        "responses": {
          "204": {
            "description": "Contact unlinked"
          }
        },
        "operationId": "unlink-company-contact",
        "security": [
          {
            "oauth2": [
              "companies.write",
              "contacts.read"
            ]
          }
        ]
      }
    },
    "/companies/{id}/custom-fields": {
      "parameters": [
        {
          "schema": {
            "type": "integer"
          },
          "name": "id",
          "in": "path",
          "required": true,
          "description": "Company id"
        }
      ],
      "get": {
        "summary": "Company custom fields List",
        "description": "Get list of custom fields for a company",
        "tags": [
          "Companies"
        ],
        "operationId": "get-company-custom-fields",
        "responses": {
          "200": {
            "description": "List fetched",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "anyOf": [
                          {
                            "title": "Simple text",
                            "type": "object",
                            "additionalProperties": false,
                            "allOf": [
                              {
                                "$ref": "#/paths/~1custom-fields/get/responses/200/content/application~1json/schema/properties/data/items/anyOf/0"
                              },
                              {
                                "type": "object",
                                "nullable": true,
                                "properties": {
                                  "value": {
                                    "type": "string",
                                    "description": "Value of custom field",
                                    "nullable": true,
                                    "example": "Lorem"
                                  }
                                }
                              }
                            ]
                          },
                          {
                            "title": "Rich text",
                            "type": "object",
                            "additionalProperties": false,
                            "allOf": [
                              {
                                "$ref": "#/paths/~1custom-fields/get/responses/200/content/application~1json/schema/properties/data/items/anyOf/1"
                              },
                              {
                                "type": "object",
                                "nullable": true,
                                "properties": {
                                  "value": {
                                    "type": "string",
                                    "description": "Value of custom field",
                                    "nullable": true,
                                    "example": "<p>Lorem ipsum in dolor.</p>"
                                  }
                                }
                              }
                            ]
                          },
                          {
                            "title": "Email address",
                            "type": "object",
                            "additionalProperties": false,
                            "allOf": [
                              {
                                "$ref": "#/paths/~1custom-fields/get/responses/200/content/application~1json/schema/properties/data/items/anyOf/2"
                              },
                              {
                                "type": "object",
                                "nullable": true,
                                "properties": {
                                  "value": {
                                    "type": "string",
                                    "format": "email",
                                    "description": "Email",
                                    "nullable": true,
                                    "example": "john.doe@email.com"
                                  }
                                }
                              }
                            ]
                          },
                          {
                            "title": "Url",
                            "type": "object",
                            "additionalProperties": false,
                            "allOf": [
                              {
                                "$ref": "#/paths/~1custom-fields/get/responses/200/content/application~1json/schema/properties/data/items/anyOf/3"
                              },
                              {
                                "type": "object",
                                "nullable": true,
                                "properties": {
                                  "value": {
                                    "type": "string",
                                    "format": "url",
                                    "description": "URL",
                                    "nullable": true,
                                    "example": "https://domain.com"
                                  }
                                }
                              }
                            ]
                          },
                          {
                            "title": "Numeric value",
                            "type": "object",
                            "additionalProperties": false,
                            "allOf": [
                              {
                                "$ref": "#/paths/~1custom-fields/get/responses/200/content/application~1json/schema/properties/data/items/anyOf/4"
                              },
                              {
                                "type": "object",
                                "nullable": true,
                                "properties": {
                                  "value": {
                                    "type": "string",
                                    "description": "Value of custom field, numeric value",
                                    "nullable": true,
                                    "example": "15"
                                  }
                                }
                              }
                            ]
                          },
                          {
                            "title": "Date",
                            "type": "object",
                            "additionalProperties": false,
                            "allOf": [
                              {
                                "$ref": "#/paths/~1custom-fields/get/responses/200/content/application~1json/schema/properties/data/items/anyOf/5"
                              },
                              {
                                "type": "object",
                                "nullable": true,
                                "properties": {
                                  "value": {
                                    "type": "string",
                                    "format": "date",
                                    "description": "Date",
                                    "nullable": true,
                                    "example": "2021-03-22"
                                  }
                                }
                              }
                            ]
                          },
                          {
                            "title": "Hour",
                            "type": "object",
                            "additionalProperties": false,
                            "allOf": [
                              {
                                "$ref": "#/paths/~1custom-fields/get/responses/200/content/application~1json/schema/properties/data/items/anyOf/6"
                              },
                              {
                                "type": "object",
                                "nullable": true,
                                "properties": {
                                  "value": {
                                    "type": "string",
                                    "description": "Time",
                                    "nullable": true,
                                    "pattern": "^(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$",
                                    "example": "05:30"
                                  }
                                }
                              }
                            ]
                          },
                          {
                            "title": "Amount with currency",
                            "type": "object",
                            "additionalProperties": false,
                            "allOf": [
                              {
                                "$ref": "#/paths/~1custom-fields/get/responses/200/content/application~1json/schema/properties/data/items/anyOf/7"
                              },
                              {
                                "type": "object",
                                "nullable": true,
                                "properties": {
                                  "value": {
                                    "type": "object",
                                    "additionalProperties": false,
                                    "properties": {
                                      "amount": {
                                        "type": "string",
                                        "description": "Amount, numeric value",
                                        "nullable": true,
                                        "example": "15.26"
                                      },
                                      "currency": {
                                        "type": "string",
                                        "description": "Currency (ISO 4217)",
                                        "pattern": "^[A-Za-z *]{2,5}$",
                                        "nullable": true,
                                        "example": "EUR"
                                      }
                                    }
                                  }
                                }
                              }
                            ]
                          },
                          {
                            "title": "Numeric field with unit",
                            "type": "object",
                            "additionalProperties": false,
                            "allOf": [
                              {
                                "$ref": "#/paths/~1custom-fields/get/responses/200/content/application~1json/schema/properties/data/items/anyOf/8"
                              },
                              {
                                "type": "object",
                                "nullable": true,
                                "properties": {
                                  "value": {
                                    "type": "object",
                                    "additionalProperties": false,
                                    "properties": {
                                      "number": {
                                        "type": "string",
                                        "description": "Value of custom field, numeric value",
                                        "nullable": true,
                                        "example": "15.26"
                                      },
                                      "unit_id": {
                                        "type": "integer",
                                        "description": "Unit ID",
                                        "nullable": true,
                                        "example": 1
                                      }
                                    }
                                  }
                                }
                              }
                            ]
                          },
                          {
                            "title": "Radio button",
                            "type": "object",
                            "additionalProperties": false,
                            "allOf": [
                              {
                                "$ref": "#/paths/~1custom-fields/get/responses/200/content/application~1json/schema/properties/data/items/anyOf/9"
                              },
                              {
                                "type": "object",
                                "nullable": true,
                                "properties": {
                                  "value": {
                                    "type": "integer",
                                    "description": "Selected choice",
                                    "nullable": true,
                                    "example": 12345
                                  }
                                }
                              }
                            ]
                          },
                          {
                            "title": "Select",
                            "type": "object",
                            "additionalProperties": false,
                            "allOf": [
                              {
                                "$ref": "#/paths/~1custom-fields/get/responses/200/content/application~1json/schema/properties/data/items/anyOf/10"
                              },
                              {
                                "type": "object",
                                "nullable": true,
                                "properties": {
                                  "value": {
                                    "type": "integer",
                                    "description": "Value of custom field",
                                    "nullable": true,
                                    "example": 12345
                                  }
                                }
                              }
                            ]
                          },
                          {
                            "title": "Multiple choice",
                            "type": "object",
                            "additionalProperties": false,
                            "allOf": [
                              {
                                "$ref": "#/paths/~1custom-fields/get/responses/200/content/application~1json/schema/properties/data/items/anyOf/11"
                              },
                              {
                                "type": "object",
                                "nullable": true,
                                "properties": {
                                  "value": {
                                    "type": "array",
                                    "description": "List of selected choice",
                                    "nullable": true,
                                    "example": "{ 1, 2, 3 }",
                                    "items": {
                                      "type": "integer"
                                    }
                                  }
                                }
                              }
                            ]
                          },
                          {
                            "title": "Yes / No",
                            "type": "object",
                            "additionalProperties": false,
                            "allOf": [
                              {
                                "$ref": "#/paths/~1custom-fields/get/responses/200/content/application~1json/schema/properties/data/items/anyOf/12"
                              },
                              {
                                "type": "object",
                                "nullable": true,
                                "properties": {
                                  "value": {
                                    "type": "boolean",
                                    "description": "Value of custom field",
                                    "nullable": true,
                                    "example": true
                                  }
                                }
                              }
                            ]
                          },
                          {
                            "title": "Client/Prospect/Supplier",
                            "type": "object",
                            "additionalProperties": false,
                            "allOf": [
                              {
                                "$ref": "#/paths/~1custom-fields/get/responses/200/content/application~1json/schema/properties/data/items/anyOf/13"
                              },
                              {
                                "type": "object",
                                "nullable": true,
                                "properties": {
                                  "value": {
                                    "type": "array",
                                    "description": "List of company/inviduals",
                                    "nullable": true,
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "type": {
                                          "type": "string",
                                          "description": "company/individual's type",
                                          "example": "company"
                                        },
                                        "id": {
                                          "type": "integer",
                                          "description": "company/individual's ID",
                                          "example": 15
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            ]
                          },
                          {
                            "title": "Contact",
                            "type": "object",
                            "additionalProperties": false,
                            "allOf": [
                              {
                                "$ref": "#/paths/~1custom-fields/get/responses/200/content/application~1json/schema/properties/data/items/anyOf/14"
                              },
                              {
                                "type": "object",
                                "nullable": true,
                                "properties": {
                                  "value": {
                                    "type": "array",
                                    "description": "List of Contact IDs",
                                    "nullable": true,
                                    "example": "{ 1, 2, 3 }",
                                    "items": {
                                      "type": "integer"
                                    }
                                  }
                                }
                              }
                            ]
                          },
                          {
                            "title": "Staff member",
                            "type": "object",
                            "additionalProperties": false,
                            "allOf": [
                              {
                                "$ref": "#/paths/~1custom-fields/get/responses/200/content/application~1json/schema/properties/data/items/anyOf/15"
                              },
                              {
                                "type": "object",
                                "nullable": true,
                                "properties": {
                                  "value": {
                                    "type": "array",
                                    "description": "List of Staff IDs",
                                    "nullable": true,
                                    "example": "{ 1, 2, 3 }",
                                    "items": {
                                      "type": "integer"
                                    }
                                  }
                                }
                              }
                            ]
                          },
                          {
                            "title": "Products/services",
                            "type": "object",
                            "additionalProperties": false,
                            "allOf": [
                              {
                                "$ref": "#/paths/~1custom-fields/get/responses/200/content/application~1json/schema/properties/data/items/anyOf/16"
                              },
                              {
                                "type": "object",
                                "nullable": true,
                                "properties": {
                                  "value": {
                                    "type": "array",
                                    "description": "List of Item IDs",
                                    "nullable": true,
                                    "example": "{ 1, 2, 3 }",
                                    "items": {
                                      "type": "integer"
                                    }
                                  }
                                }
                              }
                            ]
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "pagination",
                    "data"
                  ]
                }
              }
            }
          }
        },
        "parameters": [
          {
            "in": "query",
            "name": "order",
            "description": "The order field",
            "schema": {
              "type": "string",
              "example": "id",
              "enum": [
                "id"
              ]
            }
          },
          {
            "$ref": "#/components/parameters/direction"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "security": [
          {
            "oauth2": [
              "companies.read",
              "custom-fields.read"
            ]
          }
        ]
      },
      "put": {
        "summary": "Update Company custom fields",
        "description": "Update list of custom fields for a company",
        "tags": [
          "Companies"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/verify"
          }
        ],
        "operationId": "update-company-custom-fields",
        "responses": {
          "200": {
            "description": "Company's custom fields updated"
          },
          "204": {
            "$ref": "#/components/schemas/Verify"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "description": "Custom fields",
                "items": {
                  "type": "object",
                  "description": "Company",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "example": 1,
                      "description": "Custom Field id"
                    },
                    "value": {
                      "anyOf": [
                        {
                          "type": "string",
                          "description": "Value of custom field",
                          "title": "Simple text",
                          "example": "Lorem",
                          "nullable": true
                        },
                        {
                          "type": "string",
                          "description": "Value of custom field",
                          "title": "Rich text",
                          "example": "<p>Lorem ipsum in dolor.</p>",
                          "nullable": true
                        },
                        {
                          "type": "string",
                          "description": "Value of custom field. Numeric value (integer) only",
                          "example": "15",
                          "nullable": true,
                          "title": "Numeric value"
                        },
                        {
                          "type": "object",
                          "nullable": true,
                          "additionalProperties": false,
                          "title": "Amount with currency",
                          "properties": {
                            "amount": {
                              "type": "string",
                              "description": "Amount. Will use the default one if null. Numeric value",
                              "example": "15.26",
                              "nullable": true
                            },
                            "currency": {
                              "type": "string",
                              "description": "Currency (ISO 4217).  Will use the default one if null",
                              "example": "EUR",
                              "nullable": true
                            }
                          },
                          "required": [
                            "amount",
                            "currency"
                          ]
                        },
                        {
                          "type": "object",
                          "nullable": true,
                          "additionalProperties": false,
                          "title": "Numeric field with unit",
                          "properties": {
                            "number": {
                              "type": "string",
                              "description": "Value of custom field. Numeric value",
                              "example": "15.26",
                              "nullable": true
                            },
                            "unit_id": {
                              "type": "integer",
                              "description": "Unit ID",
                              "example": 1,
                              "nullable": true
                            }
                          },
                          "required": [
                            "number",
                            "unit_id"
                          ]
                        },
                        {
                          "type": "integer",
                          "description": "Selected choice",
                          "example": 12345,
                          "nullable": true,
                          "title": "Radio button"
                        },
                        {
                          "type": "integer",
                          "description": "Value of custom field",
                          "example": 12345,
                          "title": "Select",
                          "nullable": true
                        },
                        {
                          "type": "array",
                          "description": "List of selected choice",
                          "example": "{ 1, 2, 3 }",
                          "items": {
                            "type": "integer"
                          },
                          "nullable": true,
                          "title": "Multiple choice"
                        },
                        {
                          "type": "string",
                          "format": "date",
                          "title": "Date",
                          "nullable": true,
                          "description": "Date",
                          "example": "2021-03-22"
                        },
                        {
                          "type": "string",
                          "description": "Time",
                          "title": "Time",
                          "nullable": true,
                          "example": "05:30"
                        },
                        {
                          "type": "string",
                          "format": "email",
                          "description": "Email",
                          "title": "Email address",
                          "nullable": true,
                          "example": "john.doe@email.com"
                        },
                        {
                          "type": "string",
                          "format": "url",
                          "title": "Url",
                          "nullable": true,
                          "description": "URL",
                          "example": "https://domain.com"
                        },
                        {
                          "type": "boolean",
                          "description": "Value of custom field",
                          "example": true,
                          "title": "Yes / No",
                          "nullable": true
                        },
                        {
                          "type": "array",
                          "description": "List of company/invidual IDs",
                          "example": "{ 1, 2, 3 }",
                          "items": {
                            "type": "integer"
                          },
                          "nullable": true,
                          "title": "Client / Prospect / Supplier"
                        },
                        {
                          "type": "array",
                          "description": "List of Item IDs",
                          "example": "{ 1, 2, 3 }",
                          "items": {
                            "type": "integer"
                          },
                          "nullable": true,
                          "title": "Product / service"
                        },
                        {
                          "type": "array",
                          "description": "List of Contact IDs",
                          "example": "{ 1, 2, 3 }",
                          "items": {
                            "type": "integer"
                          },
                          "nullable": true,
                          "title": "Contact"
                        },
                        {
                          "type": "array",
                          "description": "List of Staff IDs",
                          "example": "{ 1, 2, 3 }",
                          "items": {
                            "type": "integer"
                          },
                          "title": "Staff member",
                          "nullable": true
                        }
                      ],
                      "nullable": true
                    }
                  },
                  "required": [
                    "id",
                    "value"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "companies.write",
              "custom-fields.write"
            ]
          }
        ]
      }
    },
    "/companies/{companyId}/smart-tags": {
      "parameters": [
        {
          "schema": {
            "type": "integer"
          },
          "name": "companyId",
          "in": "path",
          "required": true,
          "description": "Company id"
        }
      ],
      "get": {
        "summary": "Company smart tags List",
        "description": "Get list of smart tags for a company",
        "tags": [
          "Companies"
        ],
        "operationId": "get-company-smart-tags",
        "responses": {
          "200": {
            "description": "List fetched",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    },
                    "data": {
                      "title": "smart tag",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "value": {
                            "type": "string",
                            "description": "value of smart tags",
                            "example": "smart tag"
                          },
                          "id": {
                            "type": "integer",
                            "description": "Id of smart tags",
                            "example": 55
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "companies.read",
              "smart-tags.read"
            ]
          }
        ]
      },
      "post": {
        "summary": "Link smart tags to company",
        "description": "Link a list of smart tag to a company",
        "tags": [
          "Companies"
        ],
        "operationId": "link-company-smart-tags",
        "responses": {
          "200": {
            "description": "Smart tag linked",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    },
                    "data": {
                      "$ref": "#/paths/~1companies~1%7BcompanyId%7D~1smart-tags/get/responses/200/content/application~1json/schema/properties/data"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "smart tag",
                "type": "array",
                "nullable": true,
                "items": {
                  "type": "object",
                  "properties": {
                    "value": {
                      "type": "string",
                      "description": "value of smart tags",
                      "example": "smart tag"
                    },
                    "id": {
                      "type": "integer",
                      "description": "Id of smart tags",
                      "example": 55,
                      "nullable": true
                    }
                  },
                  "required": [
                    "value",
                    "id"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "smart-tags.write",
              "companies.write"
            ]
          }
        ]
      }
    },
    "/contacts/{id}/companies": {
      "get": {
        "summary": "Companies contact",
        "description": "Get the companies of a contact",
        "tags": [
          "Contacts"
        ],
        "operationId": "get-contact-companies",
        "security": [
          {
            "oauth2": [
              "companies.read",
              "contacts.read"
            ]
          }
        ],
        "parameters": [
          {
            "schema": {
              "type": "integer"
            },
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Contact id"
          }
        ],
        "responses": {
          "200": {
            "description": "Companies List of contact Fetched",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "title": "Company",
                        "type": "object",
                        "description": "",
                        "x-examples": {},
                        "properties": {
                          "id": {
                            "type": "integer",
                            "description": "Unique ID",
                            "example": 6657
                          },
                          "type": {
                            "type": "string",
                            "enum": [
                              "prospect",
                              "client",
                              "supplier"
                            ]
                          },
                          "name": {
                            "type": "string",
                            "description": "Company name",
                            "example": "Example company"
                          },
                          "email": {
                            "description": "Company email",
                            "type": "string",
                            "format": "email",
                            "example": "contact@example-company.com",
                            "nullable": true
                          },
                          "website": {
                            "type": "string",
                            "format": "url",
                            "description": "Company website",
                            "example": "http://example-company.com",
                            "nullable": true
                          },
                          "phone_number": {
                            "type": "string",
                            "description": "Company phone number",
                            "example": "+33100000000",
                            "nullable": true
                          },
                          "mobile_number": {
                            "type": "string",
                            "description": "Company mobile number",
                            "example": "+33600000000",
                            "nullable": true
                          },
                          "fax_number": {
                            "type": "string",
                            "description": "Company Fax number",
                            "example": "+33100000000",
                            "nullable": true
                          },
                          "legal_france": {
                            "type": "object",
                            "additionalProperties": false,
                            "properties": {
                              "siret": {
                                "description": "Company Siret",
                                "type": "string",
                                "nullable": true,
                                "example": "73282932000074"
                              },
                              "siren": {
                                "description": "Company Siren",
                                "type": "string",
                                "nullable": true,
                                "example": "732829320"
                              },
                              "vat": {
                                "description": "VAT number",
                                "type": "string",
                                "nullable": true,
                                "example": "FR99999999999"
                              },
                              "ape_naf_code": {
                                "description": "APE/NAF Code",
                                "type": "string",
                                "nullable": true,
                                "example": "4711C"
                              },
                              "company_type": {
                                "description": "Company type",
                                "type": "string",
                                "nullable": true,
                                "example": "SAS"
                              },
                              "rcs_immatriculation": {
                                "description": "RCS immatriculation code",
                                "type": "string",
                                "nullable": true,
                                "example": "RCS xxxxx"
                              }
                            }
                          },
                          "capital": {
                            "type": "string",
                            "nullable": true,
                            "description": "Company Capital",
                            "example": "4000"
                          },
                          "reference": {
                            "type": "string",
                            "description": "Company reference",
                            "example": "CLI-1654",
                            "nullable": true
                          },
                          "note": {
                            "type": "string",
                            "description": "Note on company",
                            "example": "An handed-written note describing this company"
                          },
                          "auxiliary_code": {
                            "type": "string",
                            "description": "Auxiliary code",
                            "example": "0EX11C",
                            "nullable": true
                          },
                          "social": {
                            "$ref": "#/paths/~1companies/post/requestBody/content/application~1json/schema/properties/social"
                          },
                          "rate_category_id": {
                            "type": "integer",
                            "nullable": true,
                            "description": "Company Rate category id",
                            "example": 9956
                          },
                          "main_contact_id": {
                            "description": "Main contact unique ID",
                            "type": "integer",
                            "nullable": true,
                            "minimum": 1,
                            "example": 6654
                          },
                          "dunning_contact_id": {
                            "description": "Dunning contact unique ID",
                            "type": "integer",
                            "nullable": true,
                            "minimum": 1,
                            "example": 6654
                          },
                          "invoicing_contact_id": {
                            "description": "Invoicing contact unique ID",
                            "type": "integer",
                            "nullable": true,
                            "minimum": 1,
                            "example": 6654
                          },
                          "invoicing_address_id": {
                            "description": "Invoicing address unique ID",
                            "type": "integer",
                            "nullable": true,
                            "minimum": 1,
                            "example": 9987
                          },
                          "delivery_address_id": {
                            "description": "Delivery address unique ID",
                            "type": "integer",
                            "nullable": true,
                            "minimum": 1,
                            "example": 6547
                          },
                          "accounting_code_id": {
                            "type": "integer",
                            "nullable": true,
                            "description": "Company accounting code id",
                            "example": 12345
                          },
                          "accounting_purchase_code_id": {
                            "type": "integer",
                            "nullable": true,
                            "description": "Company accouting purchase code id",
                            "example": 98556
                          },
                          "owner": {
                            "$ref": "#/components/schemas/StaffAutocompleteResultItem/properties/owner/allOf/0"
                          },
                          "created": {
                            "type": "string",
                            "format": "date-time",
                            "nullable": false,
                            "description": "Datetime of creating company",
                            "example": "2020-05-29T11:22:03+02:00"
                          },
                          "updated_at": {
                            "type": "string",
                            "format": "date-time",
                            "nullable": false,
                            "description": "Datetime of the last update of the company",
                            "example": "2020-05-29T11:22:03+02:00"
                          },
                          "is_archived": {
                            "type": "boolean",
                            "nullable": false,
                            "description": "Status archived or not",
                            "example": false
                          },
                          "business_segment": {
                            "type": "object",
                            "description": "Company business segment",
                            "nullable": true,
                            "properties": {
                              "id": {
                                "type": "integer",
                                "example": 3
                              },
                              "label": {
                                "type": "string",
                                "example": "Software publisher / Digital services company"
                              }
                            }
                          },
                          "number_of_employees": {
                            "type": "object",
                            "description": "Number of employees of company",
                            "nullable": true,
                            "properties": {
                              "id": {
                                "type": "integer",
                                "example": 1
                              },
                              "label": {
                                "type": "string",
                                "example": "From 1 to 5"
                              }
                            }
                          },
                          "marketing_campaigns_subscriptions": {
                            "type": "array",
                            "items": {
                              "type": "string",
                              "enum": [
                                "sms",
                                "phone",
                                "email",
                                "postal_mail",
                                "custom"
                              ]
                            },
                            "description": "list of campaign type subcribed",
                            "uniqueItems": true
                          }
                        }
                      }
                    }
                  },
                  "required": [
                    "pagination",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/smart-tags/{linkedtype}/autocomplete": {
      "parameters": [
        {
          "schema": {
            "type": "string",
            "enum": [
              "company",
              "contact",
              "individual"
            ]
          },
          "name": "linkedtype",
          "in": "path",
          "required": true,
          "description": "Linked type of smart tags searched"
        },
        {
          "schema": {
            "type": "string"
          },
          "name": "q",
          "in": "query",
          "required": true,
          "description": "Word for the research of autocomplete"
        }
      ],
      "get": {
        "summary": "Smart tags autocomplete",
        "description": "Autocompled for smart tags",
        "tags": [
          "Smart Tags"
        ],
        "operationId": "autocomplete-smart-tags",
        "responses": {
          "200": {
            "description": "Smart tags find",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    },
                    "data": {
                      "$ref": "#/paths/~1companies~1%7BcompanyId%7D~1smart-tags/get/responses/200/content/application~1json/schema/properties/data"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "smart-tags.read"
            ]
          }
        ]
      }
    },
    "/custom-fields": {
      "get": {
        "summary": "Custom Fields List",
        "description": "Get a list of custom fields",
        "tags": [
          "Custom Fields"
        ],
        "operationId": "get-custom-fields",
        "parameters": [
          {
            "$ref": "#/paths/~1companies~1%7Bid%7D~1custom-fields/get/parameters/0"
          },
          {
            "$ref": "#/components/parameters/direction"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "Custom fields fetched",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "anyOf": [
                          {
                            "title": "Simple text",
                            "type": "object",
                            "additionalProperties": false,
                            "allOf": [
                              {
                                "title": "Custom field",
                                "type": "object",
                                "description": "",
                                "x-examples": {},
                                "properties": {
                                  "id": {
                                    "type": "integer",
                                    "readOnly": true,
                                    "description": "Customfield id",
                                    "example": 6657
                                  },
                                  "name": {
                                    "type": "string",
                                    "maxLength": 250,
                                    "description": "Name of custom field",
                                    "example": "Business sector"
                                  },
                                  "code": {
                                    "type": "string",
                                    "maxLength": 250,
                                    "description": "Machine name of custom field",
                                    "example": "business-sector"
                                  },
                                  "description": {
                                    "type": "string",
                                    "maxLength": 250,
                                    "description": "Description of custom field",
                                    "example": "A text describing this custom field."
                                  },
                                  "mandatory": {
                                    "type": "boolean",
                                    "description": "Custom field must be completed or not",
                                    "example": false
                                  },
                                  "rank": {
                                    "type": "integer",
                                    "description": "Rank of custom field in group",
                                    "example": 1
                                  },
                                  "related_object": {
                                    "type": "array",
                                    "items": {
                                      "type": "string",
                                      "enum": [
                                        "document",
                                        "contact",
                                        "client",
                                        "prospect",
                                        "supplier",
                                        "product",
                                        "service",
                                        "ticket",
                                        "task",
                                        "purchase",
                                        "opportunity",
                                        "project",
                                        "staff",
                                        "site"
                                      ]
                                    },
                                    "description": "List of objects the custom field can be used on",
                                    "uniqueItems": true
                                  },
                                  "customfield_group": {
                                    "type": "object",
                                    "description": "Full custom field group object",
                                    "properties": {
                                      "id": {
                                        "type": "integer",
                                        "readOnly": true,
                                        "description": "Group id",
                                        "example": 123
                                      },
                                      "name": {
                                        "type": "string",
                                        "maxLength": 250,
                                        "description": "Group name",
                                        "example": "intervention"
                                      },
                                      "code": {
                                        "type": "string",
                                        "maxLength": 250,
                                        "description": "Group code",
                                        "example": "groupintervention"
                                      },
                                      "open_by_default": {
                                        "type": "boolean",
                                        "description": "Group is open by default or not",
                                        "example": false
                                      }
                                    }
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "description": "Simple text",
                                    "enum": [
                                      "simple-text"
                                    ]
                                  },
                                  "parameters": {
                                    "type": "object",
                                    "description": "Field type parameters",
                                    "additionalProperties": false,
                                    "properties": {
                                      "default_value": {
                                        "type": "string",
                                        "description": "Default value",
                                        "minLength": 0,
                                        "maxLength": 250,
                                        "nullable": true,
                                        "example": "Simple text"
                                      },
                                      "char_min": {
                                        "type": "integer",
                                        "description": "Min characters",
                                        "minimum": 0,
                                        "maximum": 250,
                                        "nullable": true,
                                        "example": 0
                                      },
                                      "char_max": {
                                        "type": "integer",
                                        "description": "Max characters",
                                        "minimum": 0,
                                        "maximum": 250,
                                        "nullable": true,
                                        "example": 250
                                      }
                                    }
                                  }
                                }
                              }
                            ]
                          },
                          {
                            "title": "Rich text",
                            "type": "object",
                            "additionalProperties": false,
                            "allOf": [
                              {
                                "$ref": "#/paths/~1custom-fields/get/responses/200/content/application~1json/schema/properties/data/items/anyOf/0/allOf/0"
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "description": "Rich text",
                                    "enum": [
                                      "rich-text"
                                    ]
                                  },
                                  "parameters": {
                                    "type": "object",
                                    "description": "Field type parameters",
                                    "additionalProperties": false,
                                    "properties": {
                                      "default_value": {
                                        "type": "string",
                                        "description": "Default value",
                                        "minLength": 0,
                                        "maxLength": 65000,
                                        "nullable": true,
                                        "example": "Rich text"
                                      },
                                      "char_min": {
                                        "type": "integer",
                                        "description": "Min characters",
                                        "minimum": 0,
                                        "maximum": 65000,
                                        "nullable": true,
                                        "example": 0
                                      },
                                      "char_max": {
                                        "type": "integer",
                                        "description": "Max characters",
                                        "minimum": 0,
                                        "maximum": 65000,
                                        "nullable": true,
                                        "example": 500
                                      }
                                    }
                                  }
                                }
                              }
                            ]
                          },
                          {
                            "title": "Email address",
                            "type": "object",
                            "additionalProperties": false,
                            "allOf": [
                              {
                                "$ref": "#/paths/~1custom-fields/get/responses/200/content/application~1json/schema/properties/data/items/anyOf/0/allOf/0"
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "description": "Email address",
                                    "enum": [
                                      "email"
                                    ]
                                  },
                                  "parameters": {
                                    "type": "object",
                                    "description": "Field type parameters",
                                    "additionalProperties": false,
                                    "properties": {
                                      "default_value": {
                                        "type": "string",
                                        "description": "Default value",
                                        "format": "email",
                                        "nullable": true,
                                        "example": "contact@domain.fr"
                                      }
                                    }
                                  }
                                }
                              }
                            ]
                          },
                          {
                            "title": "Url",
                            "type": "object",
                            "additionalProperties": false,
                            "allOf": [
                              {
                                "$ref": "#/paths/~1custom-fields/get/responses/200/content/application~1json/schema/properties/data/items/anyOf/0/allOf/0"
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "description": "Url",
                                    "enum": [
                                      "url"
                                    ]
                                  },
                                  "parameters": {
                                    "type": "object",
                                    "description": "Field type parameters",
                                    "additionalProperties": false,
                                    "properties": {
                                      "default_value": {
                                        "type": "string",
                                        "description": "Default value",
                                        "format": "uri",
                                        "nullable": true,
                                        "example": "www.sellsy.com"
                                      }
                                    }
                                  }
                                }
                              }
                            ]
                          },
                          {
                            "title": "Numeric value",
                            "type": "object",
                            "additionalProperties": false,
                            "allOf": [
                              {
                                "$ref": "#/paths/~1custom-fields/get/responses/200/content/application~1json/schema/properties/data/items/anyOf/0/allOf/0"
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "description": "Numeric value",
                                    "enum": [
                                      "numeric"
                                    ]
                                  },
                                  "parameters": {
                                    "type": "object",
                                    "description": "Field type parameters",
                                    "additionalProperties": false,
                                    "properties": {
                                      "default_value": {
                                        "type": "string",
                                        "description": "Default value, numeric value only",
                                        "nullable": true,
                                        "example": "5"
                                      },
                                      "min_value": {
                                        "type": "string",
                                        "description": "Min value, numeric value only",
                                        "nullable": true,
                                        "example": "0"
                                      },
                                      "max_value": {
                                        "type": "string",
                                        "description": "Max value, numeric value only",
                                        "nullable": true,
                                        "example": "500"
                                      }
                                    }
                                  }
                                }
                              }
                            ]
                          },
                          {
                            "title": "Date",
                            "type": "object",
                            "additionalProperties": false,
                            "allOf": [
                              {
                                "$ref": "#/paths/~1custom-fields/get/responses/200/content/application~1json/schema/properties/data/items/anyOf/0/allOf/0"
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "description": "Date",
                                    "enum": [
                                      "date"
                                    ]
                                  },
                                  "parameters": {
                                    "type": "object",
                                    "description": "Field type parameters",
                                    "additionalProperties": false,
                                    "properties": {
                                      "min_date": {
                                        "type": "string",
                                        "description": "Min date",
                                        "format": "date",
                                        "nullable": true,
                                        "example": "2002-01-01"
                                      },
                                      "max_date": {
                                        "type": "string",
                                        "description": "Max date",
                                        "format": "date",
                                        "nullable": true,
                                        "example": "2017-01-01"
                                      }
                                    }
                                  }
                                }
                              }
                            ]
                          },
                          {
                            "title": "Time",
                            "type": "object",
                            "additionalProperties": false,
                            "allOf": [
                              {
                                "$ref": "#/paths/~1custom-fields/get/responses/200/content/application~1json/schema/properties/data/items/anyOf/0/allOf/0"
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "description": "Time",
                                    "enum": [
                                      "time"
                                    ]
                                  },
                                  "parameters": {
                                    "type": "object",
                                    "description": "Field type parameters",
                                    "additionalProperties": false,
                                    "properties": {
                                      "min_hour": {
                                        "type": "string",
                                        "description": "Min hour",
                                        "pattern": "^(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$",
                                        "nullable": true,
                                        "example": "00:00"
                                      },
                                      "max_hour": {
                                        "type": "string",
                                        "description": "Max hour",
                                        "pattern": "^(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$",
                                        "nullable": true,
                                        "example": "08:45"
                                      }
                                    }
                                  }
                                }
                              }
                            ]
                          },
                          {
                            "title": "Amount with currency",
                            "type": "object",
                            "additionalProperties": false,
                            "allOf": [
                              {
                                "$ref": "#/paths/~1custom-fields/get/responses/200/content/application~1json/schema/properties/data/items/anyOf/0/allOf/0"
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "description": "Amount with currency",
                                    "enum": [
                                      "amount"
                                    ]
                                  },
                                  "parameters": {
                                    "type": "object",
                                    "description": "Field type parameters",
                                    "additionalProperties": false,
                                    "properties": {
                                      "default_value": {
                                        "type": "string",
                                        "description": "Default value, numeric value only",
                                        "nullable": true,
                                        "example": "15.36"
                                      },
                                      "min_value": {
                                        "type": "string",
                                        "description": "Min value, numeric value only",
                                        "nullable": true,
                                        "example": "0.00"
                                      },
                                      "max_value": {
                                        "type": "string",
                                        "description": "Max value, numeric value only",
                                        "nullable": true,
                                        "example": "1898.32"
                                      },
                                      "currency": {
                                        "type": "string",
                                        "description": "Currency (ISO 4217)",
                                        "pattern": "^[A-Za-z *]{2,5}$",
                                        "nullable": true,
                                        "example": "EUR"
                                      }
                                    }
                                  }
                                }
                              }
                            ]
                          },
                          {
                            "title": "Numeric field with unit",
                            "type": "object",
                            "additionalProperties": false,
                            "allOf": [
                              {
                                "$ref": "#/paths/~1custom-fields/get/responses/200/content/application~1json/schema/properties/data/items/anyOf/0/allOf/0"
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "description": "Numeric field with unit",
                                    "enum": [
                                      "numeric-with-unit"
                                    ]
                                  },
                                  "parameters": {
                                    "type": "object",
                                    "description": "Field type parameters",
                                    "additionalProperties": false,
                                    "properties": {
                                      "default_value": {
                                        "type": "string",
                                        "description": "Default value, numeric value only",
                                        "nullable": true,
                                        "example": "15.35"
                                      },
                                      "min_value": {
                                        "type": "string",
                                        "description": "Min value, numeric value only",
                                        "nullable": true,
                                        "example": "0.00"
                                      },
                                      "max_value": {
                                        "type": "string",
                                        "description": "Max value, numeric value only",
                                        "nullable": true,
                                        "example": "100.25"
                                      },
                                      "unit": {
                                        "type": "string",
                                        "description": "Type of unit",
                                        "nullable": true,
                                        "enum": [
                                          "unit",
                                          "package",
                                          "m2",
                                          "m3",
                                          "ton",
                                          "kg",
                                          "g",
                                          "metres",
                                          "days",
                                          "hour",
                                          "minutes"
                                        ]
                                      }
                                    }
                                  }
                                }
                              }
                            ]
                          },
                          {
                            "title": "Radio button",
                            "type": "object",
                            "additionalProperties": false,
                            "allOf": [
                              {
                                "$ref": "#/paths/~1custom-fields/get/responses/200/content/application~1json/schema/properties/data/items/anyOf/0/allOf/0"
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "description": "Radio button",
                                    "enum": [
                                      "radio"
                                    ]
                                  },
                                  "parameters": {
                                    "type": "object",
                                    "description": "Available values list",
                                    "additionalProperties": false,
                                    "properties": {
                                      "items": {
                                        "type": "array",
                                        "minItems": 2,
                                        "description": "Values list",
                                        "items": {
                                          "type": "object",
                                          "additionalProperties": false,
                                          "properties": {
                                            "id": {
                                              "type": "integer",
                                              "description": "Id of label",
                                              "example": 15
                                            },
                                            "label": {
                                              "type": "string",
                                              "description": "Label of checkbox item",
                                              "minLength": 1,
                                              "maxLength": 250,
                                              "example": "Label"
                                            },
                                            "checked": {
                                              "type": "boolean",
                                              "description": "Checked",
                                              "example": false
                                            },
                                            "rank": {
                                              "type": "integer",
                                              "description": "Rank of item",
                                              "example": 1
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            ]
                          },
                          {
                            "title": "Select",
                            "type": "object",
                            "additionalProperties": false,
                            "allOf": [
                              {
                                "$ref": "#/paths/~1custom-fields/get/responses/200/content/application~1json/schema/properties/data/items/anyOf/0/allOf/0"
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "description": "Select",
                                    "enum": [
                                      "select"
                                    ]
                                  },
                                  "parameters": {
                                    "type": "object",
                                    "description": "Available values list",
                                    "additionalProperties": false,
                                    "properties": {
                                      "items": {
                                        "type": "array",
                                        "minItems": 2,
                                        "description": "Values list",
                                        "items": {
                                          "type": "object",
                                          "additionalProperties": false,
                                          "properties": {
                                            "id": {
                                              "type": "integer",
                                              "description": "Id of label",
                                              "example": 15
                                            },
                                            "label": {
                                              "type": "string",
                                              "description": "Label of checkbox item",
                                              "minLength": 1,
                                              "maxLength": 250,
                                              "example": "Label"
                                            },
                                            "checked": {
                                              "type": "boolean",
                                              "description": "Checked",
                                              "example": false
                                            },
                                            "rank": {
                                              "type": "integer",
                                              "description": "Rank of item",
                                              "example": 1
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            ]
                          },
                          {
                            "title": "Multiple choice",
                            "type": "object",
                            "additionalProperties": false,
                            "allOf": [
                              {
                                "$ref": "#/paths/~1custom-fields/get/responses/200/content/application~1json/schema/properties/data/items/anyOf/0/allOf/0"
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "description": "Multiple choice",
                                    "enum": [
                                      "checkbox"
                                    ]
                                  },
                                  "parameters": {
                                    "type": "object",
                                    "description": "Available values list",
                                    "additionalProperties": false,
                                    "properties": {
                                      "min": {
                                        "type": "integer",
                                        "description": "Number minimum of checked values",
                                        "nullable": true,
                                        "minimum": 1,
                                        "example": 1
                                      },
                                      "max": {
                                        "type": "integer",
                                        "description": "Number maximum of checked values",
                                        "nullable": true,
                                        "example": 3
                                      },
                                      "items": {
                                        "type": "array",
                                        "minItems": 2,
                                        "description": "Values list",
                                        "items": {
                                          "type": "object",
                                          "additionalProperties": false,
                                          "properties": {
                                            "id": {
                                              "type": "integer",
                                              "description": "Id of label",
                                              "example": 15
                                            },
                                            "label": {
                                              "type": "string",
                                              "description": "Label of checkbox item",
                                              "minLength": 1,
                                              "maxLength": 250,
                                              "example": "Label"
                                            },
                                            "checked": {
                                              "type": "boolean",
                                              "description": "Checked",
                                              "example": false
                                            },
                                            "rank": {
                                              "type": "integer",
                                              "description": "Rank of item",
                                              "example": 1
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            ]
                          },
                          {
                            "title": "Yes / No",
                            "type": "object",
                            "additionalProperties": false,
                            "allOf": [
                              {
                                "$ref": "#/paths/~1custom-fields/get/responses/200/content/application~1json/schema/properties/data/items/anyOf/0/allOf/0"
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "description": "Yes / No",
                                    "enum": [
                                      "boolean"
                                    ]
                                  },
                                  "parameters": {
                                    "type": "object",
                                    "description": "Field type parameters",
                                    "additionalProperties": false,
                                    "properties": {
                                      "default_value": {
                                        "type": "boolean",
                                        "description": "Default value",
                                        "nullable": true,
                                        "example": false
                                      }
                                    }
                                  }
                                }
                              }
                            ]
                          },
                          {
                            "title": "Client/Prospect/Supplier",
                            "type": "object",
                            "additionalProperties": false,
                            "allOf": [
                              {
                                "$ref": "#/paths/~1custom-fields/get/responses/200/content/application~1json/schema/properties/data/items/anyOf/0/allOf/0"
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "description": "Client/Prospect/Supplier",
                                    "enum": [
                                      "company-individual"
                                    ]
                                  },
                                  "parameters": {
                                    "type": "object",
                                    "description": "Custom settings for this field type",
                                    "additionalProperties": false,
                                    "properties": {
                                      "number_of_values": {
                                        "type": "integer",
                                        "description": "Between 1 and 10",
                                        "minimum": 1,
                                        "maximum": 10,
                                        "example": 1
                                      },
                                      "client": {
                                        "type": "boolean",
                                        "description": "Enabled for client-type companies",
                                        "example": true
                                      },
                                      "prospect": {
                                        "type": "boolean",
                                        "description": "Enabled for prospect-type companies",
                                        "example": false
                                      },
                                      "supplier": {
                                        "type": "boolean",
                                        "description": "Enabled for supplier-type companies",
                                        "example": false
                                      },
                                      "address_on_pdf": {
                                        "type": "boolean",
                                        "description": "Add address information on PDFs",
                                        "example": false
                                      },
                                      "email_on_pdf": {
                                        "type": "boolean",
                                        "description": "Add email information on PDFs",
                                        "example": false
                                      },
                                      "phone_on_pdf": {
                                        "type": "boolean",
                                        "description": "Add phone information on PDFs",
                                        "example": false
                                      },
                                      "mobile_on_pdf": {
                                        "type": "boolean",
                                        "description": "Add mobile information on PDFs",
                                        "example": false
                                      }
                                    }
                                  }
                                }
                              }
                            ]
                          },
                          {
                            "title": "Contact",
                            "type": "object",
                            "additionalProperties": false,
                            "allOf": [
                              {
                                "$ref": "#/paths/~1custom-fields/get/responses/200/content/application~1json/schema/properties/data/items/anyOf/0/allOf/0"
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "description": "Contact",
                                    "enum": [
                                      "contact"
                                    ]
                                  },
                                  "parameters": {
                                    "type": "object",
                                    "description": "Custom settings for this field type",
                                    "additionalProperties": false,
                                    "properties": {
                                      "number_of_values": {
                                        "type": "integer",
                                        "description": "Between 1 and 10",
                                        "minimum": 1,
                                        "maximum": 10,
                                        "example": 2
                                      },
                                      "address_on_pdf": {
                                        "type": "boolean",
                                        "description": "Add address information on PDFs",
                                        "example": false
                                      },
                                      "email_on_pdf": {
                                        "type": "boolean",
                                        "description": "Add email information on PDFs",
                                        "example": false
                                      },
                                      "phone_on_pdf": {
                                        "type": "boolean",
                                        "description": "Add phone information on PDFs",
                                        "example": false
                                      },
                                      "mobile_on_pdf": {
                                        "type": "boolean",
                                        "description": "Add mobile information on PDFs",
                                        "example": false
                                      }
                                    }
                                  }
                                }
                              }
                            ]
                          },
                          {
                            "title": "Staff member",
                            "type": "object",
                            "additionalProperties": false,
                            "allOf": [
                              {
                                "$ref": "#/paths/~1custom-fields/get/responses/200/content/application~1json/schema/properties/data/items/anyOf/0/allOf/0"
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "description": "Staff member",
                                    "enum": [
                                      "staff"
                                    ]
                                  },
                                  "parameters": {
                                    "type": "object",
                                    "description": "Custom settings for this field type",
                                    "additionalProperties": false,
                                    "properties": {
                                      "number_of_values": {
                                        "type": "integer",
                                        "description": "Between 1 and 10",
                                        "minimum": 1,
                                        "maximum": 10,
                                        "example": 2
                                      },
                                      "email_on_pdf": {
                                        "type": "boolean",
                                        "description": "Add email information on PDFs",
                                        "example": false
                                      },
                                      "phone_on_pdf": {
                                        "type": "boolean",
                                        "description": "Add phone information on PDFs",
                                        "example": false
                                      },
                                      "mobile_on_pdf": {
                                        "type": "boolean",
                                        "description": "Add mobile information on PDFs",
                                        "example": false
                                      }
                                    }
                                  }
                                }
                              }
                            ]
                          },
                          {
                            "title": "Products/services",
                            "type": "object",
                            "additionalProperties": false,
                            "allOf": [
                              {
                                "$ref": "#/paths/~1custom-fields/get/responses/200/content/application~1json/schema/properties/data/items/anyOf/0/allOf/0"
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "description": "Products/services",
                                    "enum": [
                                      "item"
                                    ]
                                  },
                                  "parameters": {
                                    "type": "object",
                                    "description": "Custom settings for this field type",
                                    "additionalProperties": false,
                                    "properties": {
                                      "number_of_values": {
                                        "type": "integer",
                                        "description": "Between 1 and 10",
                                        "minimum": 1,
                                        "maximum": 10,
                                        "example": 1
                                      },
                                      "product": {
                                        "type": "boolean",
                                        "description": "Enabled for product-type items",
                                        "example": true
                                      },
                                      "service": {
                                        "type": "boolean",
                                        "description": "Enabled for service-type items",
                                        "example": false
                                      }
                                    }
                                  }
                                }
                              }
                            ]
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "pagination",
                    "data"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "custom-fields.read"
            ]
          }
        ]
      }
    },
    "/custom-fields/{id}": {
      "parameters": [
        {
          "schema": {
            "type": "integer"
          },
          "name": "id",
          "in": "path",
          "required": true,
          "description": "Custom field id"
        }
      ],
      "get": {
        "summary": "Get custom field",
        "description": "Fetch a custom field informations",
        "tags": [
          "Custom Fields"
        ],
        "operationId": "get-custom-field",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "Custom field fetched",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/paths/~1custom-fields/get/responses/200/content/application~1json/schema/properties/data/items/anyOf/0"
                    },
                    {
                      "$ref": "#/paths/~1custom-fields/get/responses/200/content/application~1json/schema/properties/data/items/anyOf/1"
                    },
                    {
                      "$ref": "#/paths/~1custom-fields/get/responses/200/content/application~1json/schema/properties/data/items/anyOf/2"
                    },
                    {
                      "$ref": "#/paths/~1custom-fields/get/responses/200/content/application~1json/schema/properties/data/items/anyOf/3"
                    },
                    {
                      "$ref": "#/paths/~1custom-fields/get/responses/200/content/application~1json/schema/properties/data/items/anyOf/4"
                    },
                    {
                      "$ref": "#/paths/~1custom-fields/get/responses/200/content/application~1json/schema/properties/data/items/anyOf/5"
                    },
                    {
                      "$ref": "#/paths/~1custom-fields/get/responses/200/content/application~1json/schema/properties/data/items/anyOf/6"
                    },
                    {
                      "$ref": "#/paths/~1custom-fields/get/responses/200/content/application~1json/schema/properties/data/items/anyOf/7"
                    },
                    {
                      "$ref": "#/paths/~1custom-fields/get/responses/200/content/application~1json/schema/properties/data/items/anyOf/8"
                    },
                    {
                      "$ref": "#/paths/~1custom-fields/get/responses/200/content/application~1json/schema/properties/data/items/anyOf/9"
                    },
                    {
                      "$ref": "#/paths/~1custom-fields/get/responses/200/content/application~1json/schema/properties/data/items/anyOf/10"
                    },
                    {
                      "$ref": "#/paths/~1custom-fields/get/responses/200/content/application~1json/schema/properties/data/items/anyOf/11"
                    },
                    {
                      "$ref": "#/paths/~1custom-fields/get/responses/200/content/application~1json/schema/properties/data/items/anyOf/12"
                    },
                    {
                      "$ref": "#/paths/~1custom-fields/get/responses/200/content/application~1json/schema/properties/data/items/anyOf/13"
                    },
                    {
                      "$ref": "#/paths/~1custom-fields/get/responses/200/content/application~1json/schema/properties/data/items/anyOf/14"
                    },
                    {
                      "$ref": "#/paths/~1custom-fields/get/responses/200/content/application~1json/schema/properties/data/items/anyOf/15"
                    },
                    {
                      "$ref": "#/paths/~1custom-fields/get/responses/200/content/application~1json/schema/properties/data/items/anyOf/16"
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "custom-fields.read"
            ]
          }
        ]
      }
    },
    "/custom-fields/search": {
      "post": {
        "summary": "Custom Fields Search",
        "description": "Search custom fields",
        "tags": [
          "Custom Fields"
        ],
        "operationId": "search-custom-fields",
        "parameters": [
          {
            "$ref": "#/paths/~1companies~1%7Bid%7D~1custom-fields/get/parameters/0"
          },
          {
            "$ref": "#/components/parameters/direction"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Custom Fields filters",
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "filters"
                ],
                "properties": {
                  "filters": {
                    "type": "object",
                    "additionalProperties": false,
                    "description": "Custom Fields filters",
                    "properties": {
                      "related_object": {
                        "title": "Related object",
                        "type": "string",
                        "description": "Filter the custom fields by object they can be used on",
                        "enum": [
                          "document",
                          "contact",
                          "client",
                          "prospect",
                          "supplier",
                          "item",
                          "service",
                          "ticket",
                          "task",
                          "purchase",
                          "opportunity",
                          "project",
                          "staff",
                          "site"
                        ]
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Custom fields fetched",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/paths/~1custom-fields/get/responses/200/content/application~1json/schema/properties/data/items"
                      }
                    }
                  },
                  "required": [
                    "pagination",
                    "data"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "custom-fields.read"
            ]
          }
        ]
      }
    },
    "/estimates": {
      "get": {
        "tags": [
          "Estimates"
        ],
        "summary": "Get all estimates",
        "operationId": "get-estimates",
        "parameters": [
          {
            "$ref": "#/components/parameters/direction"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/SaleEmbed"
          },
          {
            "$ref": "#/components/parameters/SaleOrder"
          }
        ],
        "responses": {
          "200": {
            "description": "Get a list of estimate",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/EstimateCollection"
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "estimates.read"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Estimates"
        ],
        "summary": "Create estimate",
        "operationId": "create-estimate",
        "responses": {
          "201": {
            "description": "Estimate created",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/EstimateOne"
                    },
                    {
                      "$ref": "#/components/schemas/SaleEmbed"
                    }
                  ]
                }
              }
            }
          }
        },
        "description": "Create an estimate",
        "security": [
          {
            "oauth2": [
              "estimates.write"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/SaleEmbed"
          },
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EstimateCreate"
              },
              "examples": {}
            }
          },
          "description": ""
        }
      }
    },
    "/estimates/search": {
      "post": {
        "tags": [
          "Estimates"
        ],
        "summary": "Search estimates",
        "operationId": "search-estimates",
        "parameters": [
          {
            "$ref": "#/components/parameters/direction"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/SaleEmbed"
          },
          {
            "$ref": "#/components/parameters/SaleOrder"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/EstimateFilters"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Get a list of estimate",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/EstimateCollection"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "aggregations": {
                          "title": "Document aggregations",
                          "type": "object",
                          "properties": {
                            "amount_sum_by_status": {
                              "type": "object",
                              "description": "Number of document by status, require currency filter to work"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Validation and logic errors"
          }
        },
        "security": [
          {
            "oauth2": [
              "estimates.read"
            ]
          }
        ]
      }
    },
    "/estimates/{id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/fields"
        },
        {
          "$ref": "#/components/parameters/SaleEmbed"
        },
        {
          "schema": {
            "type": "integer"
          },
          "name": "id",
          "in": "path",
          "required": true,
          "description": "Estimate id"
        }
      ],
      "get": {
        "tags": [
          "Estimates"
        ],
        "summary": "Get an estimate",
        "operationId": "get-estimate",
        "responses": {
          "200": {
            "description": "get an estimate",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/EstimateOne"
                    },
                    {
                      "$ref": "#/components/schemas/SaleEmbed"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Estimate no found"
          }
        },
        "security": [
          {
            "oauth2": [
              "estimates.read"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Estimates"
        ],
        "summary": "Update estimate",
        "operationId": "update-estimate",
        "responses": {
          "200": {
            "description": "Estimate updated",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/EstimateOne"
                    },
                    {
                      "$ref": "#/components/schemas/SaleEmbed"
                    }
                  ]
                }
              }
            }
          }
        },
        "description": "Update an estimate",
        "security": [
          {
            "oauth2": [
              "estimates.write"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/SaleEmbed"
          },
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EstimateUpdate"
              },
              "examples": {}
            }
          },
          "description": ""
        }
      }
    },
    "/estimates/compute": {
      "post": {
        "tags": [
          "Estimates"
        ],
        "summary": "Compute an estimate",
        "operationId": "compute-estimate",
        "responses": {
          "200": {
            "description": "Estimate computed successfully",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EstimateCompute"
                }
              }
            }
          }
        },
        "description": "Compute an estimate",
        "security": [
          {
            "oauth2": [
              "estimates.read"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EstimateCreate"
              },
              "examples": {}
            }
          },
          "description": ""
        }
      }
    },
    "/invoices/{id}/custom-fields": {
      "parameters": [
        {
          "schema": {
            "type": "integer"
          },
          "name": "id",
          "in": "path",
          "required": true,
          "description": "Invoice id"
        }
      ],
      "get": {
        "summary": "Invoice custom fields List",
        "description": "Get list of custom fields for an invoice",
        "tags": [
          "Invoices"
        ],
        "operationId": "get-invoice-custom-fields",
        "responses": {
          "200": {
            "description": "List fetched",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/paths/~1companies~1%7Bid%7D~1custom-fields/get/responses/200/content/application~1json/schema/properties/data/items"
                      }
                    }
                  },
                  "required": [
                    "pagination",
                    "data"
                  ]
                }
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/paths/~1companies~1%7Bid%7D~1custom-fields/get/parameters/0"
          },
          {
            "$ref": "#/components/parameters/direction"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "security": [
          {
            "oauth2": [
              "invoices.read",
              "custom-fields.read"
            ]
          }
        ]
      }
    },
    "/individuals": {
      "get": {
        "summary": "Individuals List",
        "tags": [
          "Individuals"
        ],
        "description": "Get a list of individuals",
        "operationId": "get-individuals",
        "parameters": [
          {
            "in": "query",
            "name": "order",
            "description": "The order field",
            "schema": {
              "type": "string",
              "example": "id",
              "enum": [
                "name",
                "id",
                "created_at"
              ]
            }
          },
          {
            "in": "query",
            "name": "embed",
            "description": "Example : `embed[]=invoicing_address&embed[]=cf.1542&embed[]=acl` <br /> Additional object included in the result.<br /><br /> Each embed object may require different oauth2 scopes than the main endpoint:<br /> - opportunities: `opportunities.read`<br /> - main_contact, dunning_contact, invoicing_contact: `contacts.read`<br /> - estimates,invoices,orders,deliveries: `invoicing.read`<br /> - cf.{custom_field_id} : `custom-fields.read` <br /> - smart_tags: `smart-tags.read`<br /> Additionnally, the smart_tags embed is limited to the 20 first results sorted in alphabetical order. <br />\n",
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "string",
                    "title": "standards",
                    "description": "The standards embeds",
                    "enum": [
                      "invoicing_address",
                      "delivery_address",
                      "main_contact",
                      "dunning_contact",
                      "invoicing_contact",
                      "opportunities",
                      "estimates",
                      "invoices",
                      "orders",
                      "deliveries",
                      "acl",
                      "smart_tags"
                    ]
                  },
                  {
                    "$ref": "#/components/parameters/contactEmbed/schema/items/oneOf/1"
                  }
                ]
              }
            }
          },
          {
            "$ref": "#/components/parameters/direction"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "Individuals List Fetched",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "title": "Individual with embed",
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/SaleEmbed/properties/_embed/allOf/0/properties/individual"
                          },
                          {
                            "type": "object",
                            "properties": {
                              "_embed": {
                                "nullable": true,
                                "allOf": [
                                  {
                                    "title": "Embed for Individual",
                                    "description": "Optional objects added through the embed parameter",
                                    "x-examples": {},
                                    "additionalProperties": false,
                                    "allOf": [
                                      {
                                        "type": "object",
                                        "properties": {
                                          "invoicing_address": {
                                            "nullable": true,
                                            "description": "Invocing address",
                                            "allOf": [
                                              {
                                                "$ref": "#/components/schemas/SaleEmbed/properties/_embed/allOf/0/properties/invoicing_address"
                                              }
                                            ]
                                          },
                                          "delivery_address": {
                                            "nullable": true,
                                            "description": "Delivery address",
                                            "allOf": [
                                              {
                                                "$ref": "#/components/schemas/SaleEmbed/properties/_embed/allOf/0/properties/invoicing_address"
                                              }
                                            ]
                                          },
                                          "main_contact": {
                                            "nullable": true,
                                            "description": "Main contact",
                                            "allOf": [
                                              {
                                                "$ref": "#/components/schemas/ContactCreateItem/allOf/0"
                                              }
                                            ]
                                          },
                                          "dunning_contact": {
                                            "nullable": true,
                                            "description": "Dunning contact",
                                            "allOf": [
                                              {
                                                "$ref": "#/components/schemas/ContactCreateItem/allOf/0"
                                              }
                                            ]
                                          },
                                          "invoicing_contact": {
                                            "nullable": true,
                                            "description": "Invoicing contact",
                                            "allOf": [
                                              {
                                                "$ref": "#/components/schemas/ContactCreateItem/allOf/0"
                                              }
                                            ]
                                          },
                                          "opportunities": {
                                            "nullable": true,
                                            "type": "integer",
                                            "description": "Count of opportunities",
                                            "example": 2
                                          },
                                          "estimates": {
                                            "nullable": true,
                                            "type": "integer",
                                            "description": "Count of estimates",
                                            "example": 2
                                          },
                                          "invoices": {
                                            "nullable": true,
                                            "type": "integer",
                                            "description": "Count of invoices",
                                            "example": 2
                                          },
                                          "orders": {
                                            "nullable": true,
                                            "type": "integer",
                                            "description": "Count of orders",
                                            "example": 2
                                          },
                                          "deliveries": {
                                            "nullable": true,
                                            "type": "integer",
                                            "description": "Count of deliveries",
                                            "example": 2
                                          },
                                          "acl": {
                                            "nullable": true,
                                            "description": "Individual acl",
                                            "allOf": [
                                              {
                                                "$ref": "#/components/schemas/Activity/properties/_embed/properties/acl/oneOf/2"
                                              }
                                            ]
                                          },
                                          "smart_tags": {
                                            "nullable": true,
                                            "description": "Smart-tags linked",
                                            "allOf": [
                                              {
                                                "$ref": "#/components/schemas/SaleEmbed/properties/_embed/allOf/0/properties/smart_tags/allOf/0"
                                              }
                                            ]
                                          }
                                        }
                                      },
                                      {
                                        "$ref": "#/components/schemas/SaleEmbed/properties/_embed/allOf/1"
                                      }
                                    ]
                                  }
                                ]
                              }
                            }
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "pagination",
                    "data"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "individuals.read"
            ]
          }
        ]
      },
      "post": {
        "summary": "Create an individual",
        "tags": [
          "Individuals"
        ],
        "operationId": "create-individual",
        "responses": {
          "201": {
            "description": "Individual created",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1individuals/get/responses/200/content/application~1json/schema/properties/data/items"
                }
              }
            }
          },
          "204": {
            "$ref": "#/components/schemas/Verify"
          }
        },
        "description": "Create an individual",
        "security": [
          {
            "oauth2": [
              "individuals.write"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/paths/~1individuals/get/parameters/1"
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/verify"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Individual",
                "type": "object",
                "description": "",
                "x-examples": {},
                "required": [
                  "last_name",
                  "type"
                ],
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "prospect",
                      "client",
                      "supplier"
                    ]
                  },
                  "last_name": {
                    "type": "string",
                    "description": "Individual contact lastname",
                    "example": "Martin",
                    "maxLength": 200
                  },
                  "first_name": {
                    "type": "string",
                    "description": "Individual contact firstname",
                    "example": "Jean",
                    "nullable": true
                  },
                  "email": {
                    "description": "Individual email",
                    "type": "string",
                    "format": "email",
                    "example": "jean.martin@personal-example.com",
                    "nullable": true
                  },
                  "website": {
                    "type": "string",
                    "format": "url",
                    "description": "Individual website",
                    "example": "http://personal-example.com",
                    "nullable": true
                  },
                  "phone_number": {
                    "type": "string",
                    "description": "Phone number",
                    "example": "+33100000000",
                    "nullable": true
                  },
                  "mobile_number": {
                    "type": "string",
                    "description": "Mobile number",
                    "example": "+33600000000",
                    "nullable": true
                  },
                  "fax_number": {
                    "type": "string",
                    "description": "Fax number",
                    "example": "+33100000000",
                    "nullable": true
                  },
                  "reference": {
                    "type": "string",
                    "description": "Internal reference",
                    "example": "IND-1654",
                    "nullable": true
                  },
                  "note": {
                    "type": "string",
                    "description": "Note on company",
                    "example": "An handed-written note describing this company"
                  },
                  "auxiliary_code": {
                    "type": "string",
                    "description": "Auxiliary code",
                    "example": "0EX11C",
                    "nullable": true
                  },
                  "social": {
                    "$ref": "#/paths/~1companies/post/requestBody/content/application~1json/schema/properties/social"
                  },
                  "rate_category_id": {
                    "type": "integer",
                    "nullable": true,
                    "description": "Rate category id",
                    "example": 9956
                  },
                  "accounting_code_id": {
                    "type": "integer",
                    "nullable": true,
                    "description": "Accounting code id",
                    "example": 12345
                  },
                  "accounting_purchase_code_id": {
                    "type": "integer",
                    "nullable": true,
                    "description": "Accouting purchase code id",
                    "example": 98556
                  },
                  "is_archived": {
                    "type": "boolean",
                    "nullable": false,
                    "description": "Status archived or not",
                    "example": false
                  },
                  "marketing_campaigns_subscriptions": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "sms",
                        "phone",
                        "email",
                        "postal_mail",
                        "custom"
                      ]
                    },
                    "description": "list of campaign type subcribed",
                    "uniqueItems": true
                  },
                  "sync": {
                    "type": "object",
                    "properties": {
                      "mailchimp": {
                        "type": "boolean",
                        "description": "Activate the mailchimp synchronization",
                        "nullable": false
                      },
                      "mailjet": {
                        "type": "boolean",
                        "description": "Activate the mailjet synchronization",
                        "nullable": false
                      },
                      "simplemail": {
                        "type": "boolean",
                        "description": "Activate the simplemail synchronization",
                        "nullable": false
                      }
                    }
                  },
                  "created": {
                    "description": "Date of creation of the individual",
                    "type": "string",
                    "format": "date-time"
                  }
                }
              },
              "examples": {}
            }
          },
          "description": ""
        }
      }
    },
    "/individuals/search": {
      "post": {
        "summary": "Search individuals",
        "tags": [
          "Individuals"
        ],
        "description": "Search individuals",
        "operationId": "search-individuals",
        "parameters": [
          {
            "$ref": "#/paths/~1individuals/get/parameters/0"
          },
          {
            "$ref": "#/paths/~1individuals/get/parameters/1"
          },
          {
            "$ref": "#/components/parameters/direction"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Individual filters",
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "filters"
                ],
                "properties": {
                  "filters": {
                    "type": "object",
                    "additionalProperties": false,
                    "description": "Individual filters",
                    "properties": {
                      "created": {
                        "title": "Created at",
                        "type": "object",
                        "description": "Filter the individual list by creation date",
                        "properties": {
                          "start": {
                            "type": "string",
                            "format": "date-time",
                            "example": "2020-01-01T00:00:00+01:00"
                          },
                          "end": {
                            "type": "string",
                            "format": "date-time",
                            "example": "2020-02-01T00:00:00+01:00"
                          }
                        }
                      },
                      "name": {
                        "title": "Name",
                        "type": "string",
                        "description": "Filter the individual list by name (exact search)",
                        "example": "Jean"
                      },
                      "email": {
                        "title": "Email",
                        "type": "string",
                        "description": "Filter the individual list by email (exact search)",
                        "example": "contact@example.com"
                      },
                      "type": {
                        "title": "Type",
                        "description": "Filter the individual list by type",
                        "oneOf": [
                          {
                            "type": "string",
                            "example": "prospect",
                            "enum": [
                              "prospect",
                              "client",
                              "supplier"
                            ]
                          },
                          {
                            "type": "array",
                            "uniqueItems": true,
                            "items": {
                              "type": "string",
                              "example": "prospect",
                              "enum": [
                                "prospect",
                                "client",
                                "supplier"
                              ]
                            }
                          }
                        ]
                      },
                      "is_archived": {
                        "title": "Is archived",
                        "type": "boolean",
                        "description": "Filter the individual list by is_archived",
                        "example": false
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Individuals List Fetched",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/paths/~1individuals/get/responses/200/content/application~1json/schema/properties/data/items"
                      }
                    }
                  },
                  "required": [
                    "pagination",
                    "data"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "individuals.read"
            ]
          }
        ]
      }
    },
    "/individuals/{id}/smart-tags": {
      "parameters": [
        {
          "schema": {
            "type": "integer"
          },
          "name": "id",
          "in": "path",
          "required": true,
          "description": "Individual id"
        }
      ],
      "get": {
        "summary": "Individual smart tags List",
        "description": "Get list of smart tags for an individual",
        "tags": [
          "Individuals"
        ],
        "operationId": "get-individual-smart-tags",
        "responses": {
          "200": {
            "description": "List fetched",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    },
                    "data": {
                      "$ref": "#/paths/~1companies~1%7BcompanyId%7D~1smart-tags/get/responses/200/content/application~1json/schema/properties/data"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "individuals.read",
              "smart-tags.read"
            ]
          }
        ]
      },
      "post": {
        "summary": "Link smart tags to individual",
        "description": "Link a list of smart tag to an individual",
        "tags": [
          "Individuals"
        ],
        "operationId": "link-individual-smart-tags",
        "responses": {
          "200": {
            "description": "Smart tag linked",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    },
                    "data": {
                      "$ref": "#/paths/~1companies~1%7BcompanyId%7D~1smart-tags/get/responses/200/content/application~1json/schema/properties/data"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/paths/~1companies~1%7BcompanyId%7D~1smart-tags/post/requestBody/content/application~1json/schema"
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "smart-tags.write",
              "individuals.write"
            ]
          }
        ]
      }
    },
    "/individuals/{id}": {
      "parameters": [
        {
          "schema": {
            "type": "integer"
          },
          "name": "id",
          "in": "path",
          "required": true,
          "description": "Individual id"
        }
      ],
      "get": {
        "summary": "Get Individual",
        "tags": [
          "Individuals"
        ],
        "parameters": [
          {
            "$ref": "#/paths/~1individuals/get/parameters/1"
          },
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "Individual Fetched",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1individuals/get/responses/200/content/application~1json/schema/properties/data/items"
                }
              }
            }
          }
        },
        "operationId": "get-individual",
        "description": "Fetch individual informations",
        "security": [
          {
            "oauth2": [
              "individuals.read"
            ]
          }
        ]
      },
      "put": {
        "summary": "Update Individual",
        "tags": [
          "Individuals"
        ],
        "operationId": "update-individual",
        "parameters": [
          {
            "$ref": "#/paths/~1individuals/get/parameters/1"
          },
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "Individual Updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/paths/~1individuals/get/responses/200/content/application~1json/schema/properties/data/items"
                }
              }
            }
          }
        },
        "description": "Update Individual informations",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Individual",
                "type": "object",
                "description": "",
                "x-examples": {},
                "properties": {
                  "last_name": {
                    "type": "string",
                    "description": "Individual contact lastname",
                    "example": "Martin",
                    "maxLength": 200
                  },
                  "first_name": {
                    "type": "string",
                    "description": "Individual contact firstname",
                    "example": "Jean",
                    "nullable": true
                  },
                  "email": {
                    "description": "Individual email",
                    "type": "string",
                    "format": "email",
                    "example": "jean.martin@personal-example.com",
                    "nullable": true
                  },
                  "website": {
                    "type": "string",
                    "format": "url",
                    "description": "Individual website",
                    "example": "http://personal-example.com",
                    "nullable": true
                  },
                  "phone_number": {
                    "type": "string",
                    "description": "Phone number",
                    "example": "+33100000000",
                    "nullable": true
                  },
                  "mobile_number": {
                    "type": "string",
                    "description": "Mobile number",
                    "example": "+33600000000",
                    "nullable": true
                  },
                  "fax_number": {
                    "type": "string",
                    "description": "Fax number",
                    "example": "+33100000000",
                    "nullable": true
                  },
                  "reference": {
                    "type": "string",
                    "description": "Internal reference",
                    "example": "IND-1654",
                    "nullable": true
                  },
                  "note": {
                    "type": "string",
                    "description": "Note on company",
                    "example": "An handed-written note describing this company"
                  },
                  "auxiliary_code": {
                    "type": "string",
                    "description": "Auxiliary code",
                    "example": "0EX11C",
                    "nullable": true
                  },
                  "social": {
                    "$ref": "#/paths/~1companies/post/requestBody/content/application~1json/schema/properties/social"
                  },
                  "rate_category_id": {
                    "type": "integer",
                    "nullable": true,
                    "description": "Rate category id",
                    "example": 9956
                  },
                  "accounting_code_id": {
                    "type": "integer",
                    "nullable": true,
                    "description": "Accounting code id",
                    "example": 12345
                  },
                  "accounting_purchase_code_id": {
                    "type": "integer",
                    "nullable": true,
                    "description": "Accouting purchase code id",
                    "example": 98556
                  },
                  "is_archived": {
                    "type": "boolean",
                    "nullable": false,
                    "description": "Status archived or not",
                    "example": false
                  },
                  "marketing_campaigns_subscriptions": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "sms",
                        "phone",
                        "email",
                        "postal_mail",
                        "custom"
                      ]
                    },
                    "description": "list of campaign type subcribed",
                    "uniqueItems": true
                  },
                  "sync": {
                    "type": "object",
                    "properties": {
                      "mailchimp": {
                        "type": "boolean",
                        "description": "Activate the mailchimp synchronization",
                        "nullable": false
                      },
                      "mailjet": {
                        "type": "boolean",
                        "description": "Activate the mailjet synchronization",
                        "nullable": false
                      },
                      "simplemail": {
                        "type": "boolean",
                        "description": "Activate the simplemail synchronization",
                        "nullable": false
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "individuals.write"
            ]
          }
        ]
      },
      "delete": {
        "summary": "Delete Individual",
        "tags": [
          "Individuals"
        ],
        "operationId": "delete-individual",
        "responses": {
          "204": {
            "description": "Individual Deleted"
          }
        },
        "description": "Remove a individual",
        "security": [
          {
            "oauth2": [
              "individuals.write"
            ]
          }
        ]
      }
    },
    "/individuals/{individualId}/addresses": {
      "parameters": [
        {
          "schema": {
            "type": "integer"
          },
          "name": "individualId",
          "in": "path",
          "required": true,
          "description": "Individual id"
        }
      ],
      "get": {
        "summary": "Get individual addresses",
        "tags": [
          "Individuals"
        ],
        "responses": {
          "200": {
            "description": "Addresses Fetched",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Address"
                      }
                    }
                  },
                  "required": [
                    "pagination",
                    "data"
                  ]
                }
              }
            }
          }
        },
        "operationId": "get-individual-addresses",
        "security": [
          {
            "oauth2": [
              "individuals.read"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Individuals"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/verify"
          }
        ],
        "responses": {
          "201": {
            "description": "Address created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Address"
                }
              }
            }
          },
          "204": {
            "$ref": "#/components/schemas/Verify"
          }
        },
        "operationId": "create-individual-address",
        "summary": "Create an individual address",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AddressCreate"
                  }
                ]
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "individuals.write"
            ]
          }
        ]
      }
    },
    "/individuals/{individualId}/addresses/{id}": {
      "parameters": [
        {
          "schema": {
            "type": "integer"
          },
          "name": "individualId",
          "in": "path",
          "required": true,
          "description": "Individual id"
        },
        {
          "schema": {
            "type": "integer"
          },
          "name": "id",
          "in": "path",
          "required": true,
          "description": "Address id"
        }
      ],
      "get": {
        "tags": [
          "Individuals"
        ],
        "responses": {
          "200": {
            "description": "Address fetched",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Address"
                }
              }
            }
          }
        },
        "operationId": "get-individual-address",
        "summary": "Get an individual address",
        "security": [
          {
            "oauth2": [
              "individuals.read"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Individuals"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/verify"
          }
        ],
        "responses": {
          "200": {
            "description": "Address updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Address"
                }
              }
            }
          },
          "204": {
            "$ref": "#/components/schemas/Verify"
          }
        },
        "operationId": "update-individual-address",
        "summary": "Update an individual address",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddressUpdate"
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "individuals.write"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Individuals"
        ],
        "responses": {
          "204": {
            "description": "Address deleted"
          }
        },
        "operationId": "delete-individual-address",
        "summary": "Delete an individual address",
        "security": [
          {
            "oauth2": [
              "individuals.write"
            ]
          }
        ]
      }
    },
    "/individuals/{id}/contacts": {
      "parameters": [
        {
          "schema": {
            "type": "integer"
          },
          "name": "id",
          "in": "path",
          "required": true,
          "description": "Individual id"
        }
      ],
      "get": {
        "summary": "Get an individual contacts",
        "tags": [
          "Individuals"
        ],
        "responses": {
          "200": {
            "description": "List fetched",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ContactCollectionItem"
                      }
                    }
                  },
                  "required": [
                    "pagination",
                    "data"
                  ]
                }
              }
            }
          }
        },
        "operationId": "get-individual-contacts",
        "parameters": [
          {
            "$ref": "#/components/parameters/order"
          },
          {
            "$ref": "#/components/parameters/direction"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/contactEmbed"
          },
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "security": [
          {
            "oauth2": [
              "individuals.read",
              "contacts.read"
            ]
          }
        ]
      }
    },
    "/individuals/{individualId}/contacts/{contactId}": {
      "parameters": [
        {
          "schema": {
            "type": "integer"
          },
          "name": "individualId",
          "in": "path",
          "required": true,
          "description": "Individual id"
        },
        {
          "schema": {
            "type": "integer"
          },
          "name": "contactId",
          "in": "path",
          "required": true,
          "description": "Contact id"
        }
      ],
      "post": {
        "summary": "Link contact to individual",
        "tags": [
          "Individuals"
        ],
        "responses": {
          "200": {
            "description": "Contact already link"
          },
          "201": {
            "description": "Contact was link to individual"
          }
        },
        "operationId": "link-individual-contact",
        "security": [
          {
            "oauth2": [
              "individuals.write",
              "contacts.read"
            ]
          }
        ]
      },
      "delete": {
        "summary": "Deleted link between contact and individual",
        "tags": [
          "Individuals"
        ],
        "responses": {
          "204": {
            "description": "Deleted link between contact and individual"
          }
        },
        "operationId": "unlink-individual-contact",
        "security": [
          {
            "oauth2": [
              "individuals.write",
              "contacts.read"
            ]
          }
        ]
      }
    },
    "/individuals/{id}/custom-fields": {
      "parameters": [
        {
          "schema": {
            "type": "integer"
          },
          "name": "id",
          "in": "path",
          "required": true,
          "description": "Individual id"
        }
      ],
      "get": {
        "summary": "Individual custom fields List",
        "description": "Get list of custom fields for an individual",
        "tags": [
          "Individuals"
        ],
        "operationId": "get-individual-custom-fields",
        "responses": {
          "200": {
            "description": "List fetched",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/paths/~1companies~1%7Bid%7D~1custom-fields/get/responses/200/content/application~1json/schema/properties/data/items"
                      }
                    }
                  },
                  "required": [
                    "pagination",
                    "data"
                  ]
                }
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/paths/~1companies~1%7Bid%7D~1custom-fields/get/parameters/0"
          },
          {
            "$ref": "#/components/parameters/direction"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "security": [
          {
            "oauth2": [
              "individuals.read",
              "custom-fields.read"
            ]
          }
        ]
      },
      "put": {
        "summary": "Update Individual custom fields",
        "description": "Update list of custom fields for an individual",
        "tags": [
          "Individuals"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/verify"
          }
        ],
        "operationId": "update-individual-custom-fields",
        "responses": {
          "200": {
            "description": "Individual's custom fields updated"
          },
          "204": {
            "$ref": "#/components/schemas/Verify"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/paths/~1companies~1%7Bid%7D~1custom-fields/put/requestBody/content/application~1json/schema"
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "custom-fields.write",
              "individuals.write"
            ]
          }
        ]
      }
    },
    "/activities/crm": {
      "get": {
        "summary": "Get the CRM activity",
        "tags": [
          "CRM Activities"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/CrmActivity"
                      }
                    },
                    "aggregations": {
                      "$ref": "#/components/schemas/CrmActivityAggregations"
                    }
                  },
                  "required": [
                    "pagination",
                    "data"
                  ]
                }
              }
            }
          }
        },
        "operationId": "get-crm-activities",
        "security": [
          {
            "oauth2": [
              "activities.read"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/crmActivityOrder"
          },
          {
            "$ref": "#/components/parameters/direction"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/crmActivityEmbed"
          },
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "description": "Get the activity"
      }
    },
    "/activities/crm/search": {
      "post": {
        "summary": "Search in CRM activity",
        "tags": [
          "CRM Activities"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/CrmActivity"
                      }
                    },
                    "aggregations": {
                      "$ref": "#/components/schemas/CrmActivityAggregations"
                    }
                  },
                  "required": [
                    "pagination",
                    "data"
                  ]
                }
              }
            }
          },
          "206": {
            "description": "Partial content if the due_date range is too wide",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/CrmActivity"
                      }
                    },
                    "aggregations": {
                      "$ref": "#/components/schemas/CrmActivityAggregations"
                    }
                  },
                  "required": [
                    "pagination",
                    "data"
                  ]
                }
              }
            },
            "headers": {
              "X-Partial-Content": {
                "schema": {
                  "type": "string",
                  "description": "Detail of the partial content reason"
                }
              }
            }
          }
        },
        "operationId": "search-crm-activities",
        "security": [
          {
            "oauth2": [
              "activities.read"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/crmActivityOrder"
          },
          {
            "$ref": "#/components/parameters/direction"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/crmActivityEmbed"
          },
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CrmActivityFilters"
              }
            }
          }
        },
        "description": "Search the activity"
      }
    },
    "/activities/crm/export": {
      "post": {
        "summary": "Export the CRM activity",
        "tags": [
          "CRM Activities"
        ],
        "responses": {
          "202": {
            "description": "Accepted"
          }
        },
        "operationId": "export-crm-activities",
        "security": [
          {
            "oauth2": [
              "activities.read"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/crmActivityOrder"
          },
          {
            "$ref": "#/components/parameters/direction"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ExportParams"
                  },
                  {
                    "$ref": "#/components/schemas/CrmActivityFilters"
                  }
                ]
              }
            }
          }
        },
        "description": "Search the activity"
      }
    },
    "/activities/crm/metas": {
      "get": {
        "summary": "Get meta informations for activity",
        "tags": [
          "CRM Activities"
        ],
        "responses": {
          "200": {
            "description": "Context object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CrmActivityMetas"
                }
              }
            }
          }
        },
        "operationId": "meta-crm-activities",
        "security": [
          {
            "oauth2": [
              "activities.read"
            ]
          }
        ],
        "parameters": [],
        "description": "Get metadata, ie everything you need to build the form (filter labels, static values aso..)"
      }
    },
    "/listings/{name}/context/me": {
      "get": {
        "summary": "Get current user context for listings",
        "tags": [
          "Listings"
        ],
        "responses": {
          "200": {
            "description": "Context object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListingUserContext"
                }
              }
            }
          }
        },
        "operationId": "get-listings-context",
        "security": [
          {
            "oauth2": [
              "listings.read"
            ]
          }
        ],
        "parameters": [],
        "description": "Get listing user context"
      },
      "parameters": [
        {
          "schema": {
            "type": "string",
            "enum": [
              "crm-activity",
              "ocr",
              "accounting-sell",
              "accounting-purchase",
              "accounting-bank",
              "accounting-cashtill"
            ]
          },
          "name": "name",
          "in": "path",
          "required": true,
          "description": "Listing name"
        }
      ],
      "put": {
        "summary": "Update user context for listings",
        "tags": [
          "Listings"
        ],
        "responses": {
          "200": {
            "description": "Context object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListingUserContext"
                }
              }
            }
          }
        },
        "operationId": "update-listings-context",
        "security": [
          {
            "oauth2": [
              "listings.write"
            ]
          }
        ],
        "parameters": [],
        "description": "Update user context  for listings",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/ListingUserContext"
              }
            }
          },
          "description": "User context object"
        }
      }
    },
    "/custom-activities/{id}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "id",
          "in": "path",
          "required": true,
          "description": "Custom Activity ID"
        }
      ],
      "get": {
        "summary": "Get Custom Activity",
        "tags": [
          "Custom Activities"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomActivity"
                }
              }
            }
          }
        },
        "operationId": "get-custom-activities-id",
        "description": "Fetch custom activity informations",
        "security": [
          {
            "oauth2": [
              "custom-activities.read"
            ]
          }
        ]
      },
      "put": {
        "summary": "Update Custom Activity",
        "operationId": "put-custom-activities-id",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomActivity"
                }
              }
            }
          }
        },
        "description": "Edit a custom activity",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomActivity"
              }
            }
          },
          "description": ""
        },
        "security": [
          {
            "oauth2": [
              "custom-activities.write"
            ]
          }
        ],
        "tags": [
          "Custom Activities"
        ]
      },
      "delete": {
        "summary": "Delete Custom Activity",
        "operationId": "delete-custom-activities-id",
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "description": "Delete a custom activity",
        "security": [
          {
            "oauth2": [
              "custom-activities.write"
            ]
          }
        ],
        "tags": [
          "Custom Activities"
        ]
      }
    },
    "/custom-activities": {
      "get": {
        "summary": "Customs Activities List",
        "tags": [
          "Custom Activities"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/CustomActivity"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "operationId": "get-custom-activities",
        "description": "Get a list of custom activities",
        "security": [
          {
            "oauth2": [
              "custom-activities.read"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/direction"
          },
          {
            "in": "query",
            "name": "order",
            "description": "The order field",
            "schema": {
              "type": "string",
              "example": "date",
              "enum": [
                "date"
              ]
            }
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          }
        ]
      },
      "post": {
        "summary": "Create Custom Activity",
        "operationId": "post-custom-activities",
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomActivity"
                }
              }
            }
          }
        },
        "description": "Create a custom activity",
        "security": [
          {
            "oauth2": [
              "custom-activities.write"
            ]
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomActivity"
              }
            }
          }
        },
        "tags": [
          "Custom Activities"
        ]
      }
    },
    "/custom-activities/search": {
      "post": {
        "summary": "Search Custom Activities",
        "operationId": "post-custom-activities-search",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/CustomActivity"
                      }
                    },
                    "pagination": {
                      "title": "pagination",
                      "type": "object",
                      "description": "The pagination",
                      "properties": {
                        "limit": {
                          "type": "integer",
                          "example": 25,
                          "minimum": 0,
                          "maximum": 100
                        },
                        "total": {
                          "type": "integer",
                          "example": 152,
                          "minimum": 0
                        },
                        "count": {
                          "type": "integer",
                          "example": 25,
                          "minimum": 0
                        },
                        "offset": {
                          "anyOf": [
                            {
                              "type": "integer",
                              "minimum": 0,
                              "example": 25
                            },
                            {
                              "type": "string",
                              "example": "WzIwMTQtMDEtMDEsNTk4XQ=="
                            }
                          ]
                        }
                      },
                      "required": [
                        "limit",
                        "total",
                        "count",
                        "offset"
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Search Custom Activities",
        "security": [
          {
            "oauth2": [
              "custom-activities.read"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/direction"
          },
          {
            "$ref": "#/components/parameters/order"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomActivityFilters"
              }
            }
          }
        },
        "tags": [
          "Custom Activities"
        ]
      }
    },
    "/custom-activity-types/{id}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "id",
          "in": "path",
          "required": true,
          "description": "Custom activity type ID"
        }
      ],
      "get": {
        "summary": "Get Custom Activity Type",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomActivityType"
                }
              }
            }
          }
        },
        "operationId": "get-custom-activity-types-id",
        "description": "Get a custom activity type",
        "security": [
          {
            "oauth2": [
              "custom-activities.read"
            ]
          }
        ],
        "tags": [
          "Custom Activities"
        ]
      },
      "put": {
        "summary": "Update Custom Activity Type",
        "operationId": "put-custom-activity-types-id",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomActivityType"
                }
              }
            }
          }
        },
        "description": "Update a custom activity type",
        "security": [
          {
            "oauth2": [
              "custom-activities.write"
            ]
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomActivityType"
              }
            }
          }
        },
        "tags": [
          "Custom Activities"
        ]
      }
    },
    "/custom-activity-types": {
      "post": {
        "summary": "Create Custom Activity Type",
        "operationId": "post-custom-activity-types",
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomActivityType"
                }
              }
            }
          }
        },
        "description": "Create a custom activity type",
        "security": [
          {
            "oauth2": [
              "custom-activities.write"
            ]
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomActivityType"
              }
            }
          }
        },
        "tags": [
          "Custom Activities"
        ]
      },
      "get": {
        "summary": "Custom Activity Types List",
        "operationId": "get-custom-activity-types",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/CustomActivityType"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Get a list of custom actvity types",
        "security": [
          {
            "oauth2": [
              "custom-activities.read"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/direction"
          },
          {
            "$ref": "#/components/parameters/order"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          }
        ],
        "tags": [
          "Custom Activities"
        ]
      }
    },
    "/scopes": {
      "get": {
        "summary": "Scopes List",
        "tags": [
          "API Management"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "operationId": "get-scopes",
        "description": "Get list of scopes",
        "security": [
          {
            "oauth2": [
              "scopes.read"
            ]
          }
        ]
      }
    },
    "/scopes/tree": {
      "get": {
        "summary": "Get Scopes Tree",
        "tags": [
          "API Management"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "examples": {}
              }
            }
          }
        },
        "operationId": "get-scopes-tree",
        "description": "Get tree of scopes",
        "security": [
          {
            "oauth2": [
              "scopes.read"
            ]
          }
        ]
      }
    },
    "/clients": {
      "get": {
        "summary": "List oauth clients",
        "tags": [
          "API Management"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Client"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/offset"
          }
        ],
        "operationId": "list-clients",
        "description": "List the oauth clients for API",
        "security": [
          {
            "oauth2": [
              "clients.read"
            ]
          }
        ]
      },
      "post": {
        "summary": "Create oauth client",
        "tags": [
          "API Management"
        ],
        "responses": {
          "201": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Client"
                }
              }
            }
          }
        },
        "operationId": "create-clients",
        "description": "Create oauth2 client for API",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClientCreate"
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "clients.write"
            ]
          }
        ]
      }
    },
    "/clients/{id}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "id",
          "in": "path",
          "required": true,
          "description": "OAuth client id"
        }
      ],
      "get": {
        "summary": "Get OAuth client token",
        "tags": [
          "API Management"
        ],
        "responses": {
          "200": {
            "description": "OAuth client",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Client"
                }
              }
            }
          }
        },
        "operationId": "fetch-clients",
        "description": "Fetch OAuth 2 client for API",
        "security": [
          {
            "oauth2": [
              "clients.read"
            ]
          }
        ]
      },
      "delete": {
        "summary": "Delete OAuth client",
        "tags": [
          "API Management"
        ],
        "responses": {
          "204": {
            "description": "Client deleted"
          }
        },
        "operationId": "delete-clients",
        "description": "Delete OAuth 2 client for API",
        "security": [
          {
            "oauth2": [
              "clients.write"
            ]
          }
        ]
      }
    },
    "/personal-access-tokens": {
      "get": {
        "deprecated": true,
        "summary": "List personal access tokens",
        "tags": [
          "API Management"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/PersonalAccessTokenItem"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/offset"
          }
        ],
        "operationId": "list-personal-access-tokens",
        "description": "List the personal access tokens for API",
        "security": [
          {
            "oauth2": [
              "access-tokens.read"
            ]
          }
        ]
      },
      "post": {
        "deprecated": true,
        "summary": "Create personal access token",
        "tags": [
          "API Management"
        ],
        "responses": {
          "201": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "createPersonalAccessTokenItem",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PersonalAccessTokenItem/allOf/0"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "The token name",
                          "example": "My Token 7"
                        },
                        "token": {
                          "type": "string",
                          "description": "The oauth2 access token",
                          "example": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJhdWQiOiI2NzBmYWRlZi01NzZlLTQ3YTEtOTM1OC02Mjc4NDYwNWMwMjQiLCJqdGkiOiI5MWUyYmRhNTI4MTYzMTZjMDJjMzRkNTU3YjI4NzJmYjJkNDRkYTNlMDNiZjY3YTQ1YTA2Yjk2MDgzZjNlZjlkNmU5YzU0ZmEzN2VjMGVlYSIsImlhdCI6MTU5MDQyMDUwOSwibmJmIjoxNTkwNDIwNTA5LCJleHAiOjQ3NDYwOTc3MDksInN1YiI6IjM1NjdlMzA0LTk4YTUtNGI3My1hOGY0LWJlN2Y5NzgwZjU4YiIsInNjb3BlcyI6WyJhbGwiLCJjb21wYW5pZXMiLCJjb21wYW5pZXMucmVhZCIsImNvbXBhbmllcy53cml0ZSIsImFjdGl2aXRpZXMiLCJhY3Rpdml0aWVzLnJlYWQiLCJhY3Rpdml0aWVzLndyaXRlIiwibGlzdGluZ3MiLCJsaXN0aW5ncy5yZWFkIiwibGlzdGluZ3Mud3JpdGUiXSwidXNlclR5cGUiOiJzdGFmZiIsInVzZXJJZCI6MSwiY29ycElkIjoxfQ.e6EhrwGhis1w2LdUdR_3aJMOnHRr3eYdiIExqChb_mXOo843spzOOhP5Gigv21IJIEslF7mqudahoLbWIeq12AAUUapAgA93f9-Pxl1OgKkqzvRHN_Ft_Q_HQhX2BuSKrd6HTFtgL6B-vCi21wL-VRsMuasuLl7KDVqlQxikqJ-59MAYCHXOE9hyLOUc85OFvBWyyJOzX_Ey45IYIG6VuieyuNNm6eibjrmnW47gFsT-1YWVDvDJnLwyPew1MuSwbaVmUBLOe9hfjOJGWYPz5Wlrwo0zwbuiKHaXK8BAJ5pLXMpL8uUuMHuaPiMza-mZETXmNKScUwSdUXwEFEmgoQ"
                        }
                      },
                      "required": [
                        "name",
                        "token"
                      ]
                    }
                  ]
                }
              }
            }
          }
        },
        "operationId": "create-personal-access-tokens",
        "description": "Create oauth2 personal access token for API",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PersonalAccessTokenCreateItem"
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "access-tokens.write"
            ]
          }
        ]
      }
    },
    "/personal-access-tokens/metas": {
      "get": {
        "deprecated": true,
        "summary": "Get meta informations for personal access tokens",
        "tags": [
          "API Management"
        ],
        "responses": {
          "200": {
            "description": "Context object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonalAccessTokenMetas"
                }
              }
            }
          }
        },
        "operationId": "personal-access-tokens-meta",
        "security": [
          {
            "oauth2": [
              "access-tokens.read"
            ]
          }
        ],
        "parameters": [],
        "description": "Get metadata, ie everything you need to build the form "
      }
    },
    "/personal-access-tokens/{id}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "id",
          "in": "path",
          "required": true,
          "description": "Personal access token id"
        }
      ],
      "get": {
        "deprecated": true,
        "summary": "Get personal access token",
        "tags": [
          "API Management"
        ],
        "responses": {
          "200": {
            "description": "Personal access token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonalAccessTokenItem"
                }
              }
            }
          }
        },
        "operationId": "fetch-personal-access-tokens",
        "description": "Fetch oauth2 personal access token for API",
        "security": [
          {
            "oauth2": [
              "access-tokens.read"
            ]
          }
        ]
      },
      "delete": {
        "deprecated": true,
        "summary": "Delete personal access token",
        "tags": [
          "API Management"
        ],
        "responses": {
          "204": {
            "description": "Personal access token deleted"
          }
        },
        "operationId": "delete-personal-access-tokens",
        "description": "Delete oauth2 personal access token for API",
        "security": [
          {
            "oauth2": [
              "access-tokens.write"
            ]
          }
        ]
      }
    },
    "/accounting-codes": {
      "get": {
        "summary": "Get accounting codes",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/AccountingCode"
                      }
                    }
                  },
                  "required": [
                    "pagination",
                    "data"
                  ]
                }
              }
            }
          }
        },
        "operationId": "get-accounting-codes",
        "tags": [
          "Accounting"
        ],
        "description": "Get list of accouting codes",
        "security": [
          {
            "oauth2": [
              "accounting-codes.read"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/direction"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/accountingOrder"
          }
        ]
      }
    },
    "/accounting-codes/search": {
      "post": {
        "summary": "Search accounting codes",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/AccountingCode"
                      }
                    }
                  },
                  "required": [
                    "pagination",
                    "data"
                  ]
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "operationId": "search-accounting-codes",
        "tags": [
          "Accounting"
        ],
        "description": "Search in list of accouting codes",
        "security": [
          {
            "oauth2": [
              "accounting-codes.read"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/direction"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/accountingOrder"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "accountingCodeFilters",
                "type": "object",
                "description": "Accounting code filters",
                "properties": {
                  "filters": {
                    "type": "object",
                    "description": "Accounting code filters",
                    "additionalProperties": false,
                    "properties": {
                      "views": {
                        "type": "array",
                        "items": {
                          "type": "string",
                          "enum": [
                            "third",
                            "purchase",
                            "sell",
                            "bank",
                            "reconciliation"
                          ]
                        }
                      }
                    }
                  }
                },
                "required": [
                  "filters"
                ]
              }
            }
          },
          "description": ""
        }
      }
    },
    "/accounting-journal/{type}": {
      "parameters": [
        {
          "schema": {
            "type": "string",
            "enum": [
              "sells",
              "purchases",
              "bank",
              "cashtill"
            ]
          },
          "name": "type",
          "in": "path",
          "required": true,
          "description": "Type of accounting journal to fetch"
        }
      ],
      "get": {
        "summary": "Get accounting journal",
        "description": "Get list of accounting journal",
        "tags": [
          "Accounting"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/direction"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/accountingEmbed"
          }
        ],
        "responses": {
          "200": {
            "description": "Accounting journal",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/AccountingJournal"
                      }
                    },
                    "aggregations": {
                      "$ref": "#/components/schemas/AccountingAggregations"
                    }
                  },
                  "required": [
                    "pagination",
                    "data"
                  ]
                }
              }
            }
          }
        },
        "operationId": "get-accounting-journal",
        "security": [
          {
            "oauth2": [
              "accounting-entry.read"
            ]
          }
        ]
      }
    },
    "/accounting-journal/{type}/search": {
      "parameters": [
        {
          "schema": {
            "type": "string",
            "enum": [
              "sells",
              "purchases",
              "bank",
              "cashtill"
            ]
          },
          "name": "type",
          "in": "path",
          "required": true,
          "description": "Type of accounting journal to fetch"
        }
      ],
      "post": {
        "summary": "Search accounting journal",
        "description": "Search in list of accounting journal",
        "tags": [
          "Accounting"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/direction"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/accountingEmbed"
          }
        ],
        "responses": {
          "200": {
            "description": "Accounting journal",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/AccountingJournal"
                      }
                    },
                    "aggregations": {
                      "$ref": "#/components/schemas/AccountingAggregations"
                    }
                  },
                  "required": [
                    "pagination",
                    "data"
                  ]
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Accounting journal filters",
                "type": "object",
                "description": "Accounting code filters",
                "properties": {
                  "filters": {
                    "type": "object",
                    "description": "Accounting code filters",
                    "additionalProperties": false,
                    "properties": {
                      "date": {
                        "description": "Filter  by date of accounting entry",
                        "type": "object",
                        "properties": {
                          "start": {
                            "type": "string",
                            "format": "date"
                          },
                          "end": {
                            "type": "string",
                            "format": "date"
                          }
                        }
                      },
                      "accounting_codes": {
                        "description": "Filter by accounting codes",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "currency": {
                        "description": "Filter by currency",
                        "type": "string"
                      },
                      "include_exported_entries": {
                        "description": "Include or not, entries already exported",
                        "type": "boolean"
                      },
                      "bank_accounts": {
                        "description": "Filter by bank accounts. Usable only for bank journal",
                        "type": "array",
                        "items": {
                          "type": "integer"
                        }
                      },
                      "simplified_view_by_client": {
                        "type": "boolean",
                        "description": "Filter client entries. Usable only for bank journal"
                      }
                    }
                  }
                },
                "required": [
                  "filters"
                ]
              }
            }
          },
          "description": ""
        },
        "operationId": "search-accounting-journal",
        "security": [
          {
            "oauth2": [
              "accounting-entry.read"
            ]
          }
        ]
      }
    },
    "/accounting-journal/{type}/metas": {
      "parameters": [
        {
          "schema": {
            "type": "string",
            "enum": [
              "sells",
              "purchases",
              "bank",
              "cashtill"
            ]
          },
          "name": "type",
          "in": "path",
          "required": true,
          "description": "Type of accounting journal to fetch"
        }
      ],
      "get": {
        "summary": "Get meta informations for accounting journal",
        "tags": [
          "Accounting"
        ],
        "responses": {
          "200": {
            "description": "Context object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountingMetas"
                }
              }
            }
          }
        },
        "operationId": "meta-accounting-journal",
        "security": [
          {
            "oauth2": [
              "accounting-entry.read"
            ]
          }
        ],
        "parameters": []
      }
    },
    "/accounting-journal/{type}/export": {
      "parameters": [
        {
          "schema": {
            "type": "string",
            "enum": [
              "sells",
              "purchases",
              "bank",
              "cashtill"
            ]
          },
          "name": "type",
          "in": "path",
          "required": true,
          "description": "Type of accounting journal to fetch"
        }
      ],
      "post": {
        "summary": "Export accounting journal",
        "description": "Export list of accounting journal",
        "tags": [
          "Accounting"
        ],
        "operationId": "export-accounting-journal",
        "security": [
          {
            "oauth2": [
              "accounting-entry.read"
            ]
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AccountingJournalExportParams"
                  },
                  {
                    "$ref": "#/paths/~1accounting-journal~1%7Btype%7D~1search/post/requestBody/content/application~1json/schema"
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/taxes": {
      "get": {
        "summary": "Get taxes",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Taxe"
                      }
                    }
                  },
                  "required": [
                    "pagination",
                    "data"
                  ]
                }
              }
            }
          }
        },
        "operationId": "get-taxes",
        "tags": [
          "Accounting"
        ],
        "description": "Get list of taxes",
        "security": [
          {
            "oauth2": [
              "taxes.read"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/direction"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          }
        ]
      }
    },
    "/payments/methods/{id}": {
      "get": {
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Payment method id"
          }
        ],
        "summary": "Get the payment method",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentMethod"
                }
              }
            }
          }
        },
        "operationId": "get-payment-method",
        "tags": [
          "Payments"
        ],
        "description": "List of all payment methods",
        "security": [
          {
            "oauth2": [
              "payments.read"
            ]
          }
        ]
      }
    },
    "/payments/methods": {
      "get": {
        "summary": "List of all payment methods",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/PaymentMethod"
                      }
                    }
                  },
                  "required": [
                    "pagination",
                    "data"
                  ]
                }
              }
            }
          }
        },
        "operationId": "get-payment-methods",
        "tags": [
          "Payments"
        ],
        "description": "List of all payment methods",
        "security": [
          {
            "oauth2": [
              "payments.read"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/direction"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/paymentMethodOrder"
          }
        ]
      }
    },
    "/payments/methods/search": {
      "post": {
        "summary": "Search methods of payment",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/PaymentMethod"
                      }
                    }
                  },
                  "required": [
                    "pagination",
                    "data"
                  ]
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "filters": {
                    "type": "object"
                  }
                }
              }
            }
          }
        },
        "operationId": "search-payment-methods",
        "tags": [
          "Payments"
        ],
        "description": "Search method of payment",
        "security": [
          {
            "oauth2": [
              "payments.read"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/direction"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/paymentMethodOrder"
          }
        ]
      }
    },
    "/ocr/pur-invoice": {
      "get": {
        "summary": "Ocr List - Purchase invoices",
        "operationId": "get-ocr-pur-invoice",
        "description": "Get list of OCR documents for purchase invoices",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Ocr"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "ocr.read"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/direction"
          },
          {
            "$ref": "#/components/parameters/ocrOrder"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          }
        ],
        "tags": [
          "Purchase (OCR)"
        ]
      }
    },
    "/ocr/pur-invoice/search": {
      "post": {
        "summary": "Search OCR - Purchase invoices",
        "operationId": "search-ocr-pur-invoice",
        "description": "Search OCR document of purchase invoices",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Ocr"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "ocr.read"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/direction"
          },
          {
            "$ref": "#/components/parameters/ocrOrder"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          }
        ],
        "tags": [
          "Purchase (OCR)"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "filters": {
                    "type": "object",
                    "properties": {
                      "state": {
                        "description": "Filter by ocr state",
                        "type": "array",
                        "items": {
                          "type": "string",
                          "enum": [
                            "pending",
                            "processing",
                            "completed",
                            "error"
                          ]
                        }
                      },
                      "staff_id": {
                        "description": "filters by staff ids",
                        "type": "array",
                        "items": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/ocr/pur-invoice/metas": {
      "get": {
        "summary": "Get Metadata for purchase invoice OCR",
        "tags": [
          "Purchase (OCR)"
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OcrPurInvoiceMetas"
                }
              }
            }
          }
        },
        "operationId": "get-ocr-pur-invoice-metas",
        "description": "Get metadata",
        "security": [
          {
            "oauth2": [
              "scopes.read"
            ]
          }
        ]
      }
    },
    "/contacts": {
      "post": {
        "summary": "Create a contact",
        "tags": [
          "Contacts"
        ],
        "description": "Create a contact",
        "operationId": "create-contact",
        "parameters": [
          {
            "$ref": "#/components/parameters/contactEmbed"
          },
          {
            "$ref": "#/components/parameters/verify"
          }
        ],
        "responses": {
          "201": {
            "description": "Contact created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactItem"
                }
              }
            }
          },
          "204": {
            "$ref": "#/components/schemas/Verify"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContactCreateItem"
              }
            }
          },
          "description": ""
        },
        "security": [
          {
            "oauth2": [
              "contacts.write"
            ]
          }
        ]
      },
      "get": {
        "summary": "Contacts List",
        "tags": [
          "Contacts"
        ],
        "description": "Get a list of contacts",
        "operationId": "get-contacts",
        "parameters": [
          {
            "$ref": "#/components/parameters/contactOrders"
          },
          {
            "$ref": "#/components/parameters/direction"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/contactEmbed"
          },
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "Contacts List Fetched",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ContactCollectionItem"
                      }
                    }
                  },
                  "required": [
                    "pagination",
                    "data"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "contacts.read"
            ]
          }
        ]
      }
    },
    "/contacts/search": {
      "post": {
        "summary": "Search contacts",
        "tags": [
          "Contacts"
        ],
        "description": "Search contacts",
        "operationId": "search-contacts",
        "parameters": [
          {
            "$ref": "#/components/parameters/contactOrders"
          },
          {
            "$ref": "#/components/parameters/direction"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/contactEmbed"
          },
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContactFilters"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "contacts List Fetched",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ContactCollectionItem"
                      }
                    }
                  },
                  "required": [
                    "pagination",
                    "data"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "contacts.read"
            ]
          }
        ]
      }
    },
    "/contacts/{id}": {
      "parameters": [
        {
          "schema": {
            "type": "integer"
          },
          "name": "id",
          "in": "path",
          "required": true,
          "description": "Contact id"
        }
      ],
      "get": {
        "summary": "Get contact",
        "tags": [
          "Contacts"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/contactEmbed"
          },
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "Contact Fetched",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactItem"
                }
              }
            }
          }
        },
        "operationId": "get-contact",
        "description": "Fetch contact informations",
        "security": [
          {
            "oauth2": [
              "contacts.read"
            ]
          }
        ]
      },
      "put": {
        "summary": "Update contact",
        "tags": [
          "Contacts"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/contactEmbed"
          },
          {
            "$ref": "#/components/parameters/verify"
          }
        ],
        "responses": {
          "200": {
            "description": "Contact Updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactItem"
                }
              }
            }
          },
          "204": {
            "$ref": "#/components/schemas/Verify"
          }
        },
        "description": "Update contact informations",
        "operationId": "update-contact",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContactUpdateItem"
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "contacts.write"
            ]
          }
        ]
      },
      "delete": {
        "summary": "Delete contact",
        "tags": [
          "Contacts"
        ],
        "operationId": "delete-contact",
        "responses": {
          "204": {
            "description": "Contact Deleted"
          }
        },
        "description": "Remove a contact",
        "security": [
          {
            "oauth2": [
              "contacts.write"
            ]
          }
        ]
      }
    },
    "/contacts/{contactId}/addresses": {
      "parameters": [
        {
          "schema": {
            "type": "integer"
          },
          "name": "contactId",
          "in": "path",
          "required": true,
          "description": "Contact id"
        }
      ],
      "get": {
        "summary": "Get contact addresses",
        "tags": [
          "Contacts"
        ],
        "responses": {
          "200": {
            "description": "Addresses Fetched",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Address"
                      }
                    }
                  },
                  "required": [
                    "pagination",
                    "data"
                  ]
                }
              }
            }
          }
        },
        "operationId": "get-contact-addresses",
        "security": [
          {
            "oauth2": [
              "contacts.read"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Contacts"
        ],
        "responses": {
          "201": {
            "description": "Address created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Address"
                }
              }
            }
          }
        },
        "operationId": "create-contact-address",
        "summary": "Create a contact address",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AddressCreate"
                  }
                ]
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "contacts.write"
            ]
          }
        ]
      }
    },
    "/contacts/{contactId}/addresses/{id}": {
      "parameters": [
        {
          "schema": {
            "type": "integer"
          },
          "name": "contactId",
          "in": "path",
          "required": true,
          "description": "Contact id"
        },
        {
          "schema": {
            "type": "integer"
          },
          "name": "id",
          "in": "path",
          "required": true,
          "description": "Address id"
        }
      ],
      "get": {
        "tags": [
          "Contacts"
        ],
        "responses": {
          "200": {
            "description": "Address fetched",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Address"
                }
              }
            }
          }
        },
        "operationId": "get-contact-address",
        "summary": "Get a contact address",
        "security": [
          {
            "oauth2": [
              "contacts.read"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Contacts"
        ],
        "responses": {
          "200": {
            "description": "Address updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Address"
                }
              }
            }
          }
        },
        "operationId": "update-contact-address",
        "summary": "Update a contact address",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddressUpdate"
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "contacts.write"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Contacts"
        ],
        "responses": {
          "204": {
            "description": "Address deleted"
          }
        },
        "operationId": "delete-contact-address",
        "summary": "Delete a contact address",
        "security": [
          {
            "oauth2": [
              "contacts.write"
            ]
          }
        ]
      }
    },
    "/contacts/{contactId}/custom-fields": {
      "parameters": [
        {
          "schema": {
            "type": "integer"
          },
          "name": "contactId",
          "in": "path",
          "required": true,
          "description": "Contact id"
        }
      ],
      "get": {
        "summary": "Contact custom fields List",
        "description": "Get list of custom fields for a contact",
        "tags": [
          "Contacts"
        ],
        "operationId": "get-contact-custom-fields",
        "responses": {
          "200": {
            "description": "List fetched",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/paths/~1custom-fields/get/responses/200/content/application~1json/schema/properties/data/items"
                      }
                    }
                  },
                  "required": [
                    "pagination",
                    "data"
                  ]
                }
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/paths/~1companies~1%7Bid%7D~1custom-fields/get/parameters/0"
          },
          {
            "$ref": "#/components/parameters/direction"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "security": [
          {
            "oauth2": [
              "custom-fields.read",
              "contacts.read"
            ]
          }
        ]
      },
      "put": {
        "summary": "Update contact custom fields",
        "description": "Update list of custom fields for a contact",
        "tags": [
          "Contacts"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/verify"
          }
        ],
        "operationId": "update-contact-custom-fields",
        "responses": {
          "200": {
            "description": "Contact's custom fields updated"
          },
          "204": {
            "$ref": "#/components/schemas/Verify"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/paths/~1companies~1%7Bid%7D~1custom-fields/put/requestBody/content/application~1json/schema"
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "custom-fields.write",
              "contacts.write"
            ]
          }
        ]
      }
    },
    "/contacts/{contactId}/smart-tags": {
      "parameters": [
        {
          "schema": {
            "type": "integer"
          },
          "name": "contactId",
          "in": "path",
          "required": true,
          "description": "Contact id"
        }
      ],
      "get": {
        "summary": "Contact smart tags List",
        "description": "Get list of smart tags for a contact",
        "tags": [
          "Contacts"
        ],
        "operationId": "get-contact-smart-tags",
        "responses": {
          "200": {
            "description": "List fetched",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    },
                    "data": {
                      "$ref": "#/paths/~1companies~1%7BcompanyId%7D~1smart-tags/get/responses/200/content/application~1json/schema/properties/data"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "smart-tags.read",
              "contacts.read"
            ]
          }
        ]
      },
      "post": {
        "summary": "Link smart tags to contact",
        "description": "Link a list of smart tag to a contact",
        "tags": [
          "Contacts"
        ],
        "operationId": "link-contact-smart-tags",
        "responses": {
          "200": {
            "description": "Smart tag linked",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    },
                    "data": {
                      "$ref": "#/paths/~1companies~1%7BcompanyId%7D~1smart-tags/get/responses/200/content/application~1json/schema/properties/data"
                    }
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/paths/~1companies~1%7BcompanyId%7D~1smart-tags/post/requestBody/content/application~1json/schema"
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "smart-tags.write",
              "contacts.write"
            ]
          }
        ]
      }
    },
    "/accounts/conformities": {
      "get": {
        "summary": "Retrieve invoicing conformity state",
        "tags": [
          "Conformities"
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoicingConformityState"
                }
              }
            }
          }
        },
        "operationId": "get-invoicing-conformity-state",
        "description": "Get invoicing conformity state",
        "security": [
          {
            "oauth2": [
              "accounts.read"
            ]
          }
        ]
      },
      "post": {
        "summary": "Activate invoice conformity (Definitively)",
        "tags": [
          "Conformities"
        ],
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoicingConformityState"
                }
              }
            }
          },
          "403": {
            "description": "Conformity has already been activated"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "confirm_final_change": {
                    "description": "Confirm definitively activate invoice conformity",
                    "type": "boolean",
                    "enum": [
                      true
                    ]
                  }
                },
                "required": [
                  "confirm_final_change"
                ]
              }
            }
          }
        },
        "operationId": "activate-invoicing-conformity",
        "description": "Definitively activate invoice conformity",
        "security": [
          {
            "oauth2": [
              "accounts.write"
            ]
          }
        ]
      }
    },
    "/accounts/documents": {
      "get": {
        "summary": "Get your invoices and credit notes",
        "tags": [
          "Documents"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/accountDocumentOrder"
          },
          {
            "$ref": "#/components/parameters/direction"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountDocumentCollection"
                }
              }
            }
          }
        },
        "operationId": "get-accounts-documents",
        "description": "Get your invoices and credit notes",
        "security": [
          {
            "oauth2": [
              "accounts.read"
            ]
          }
        ]
      }
    },
    "/opportunities/{id}": {
      "parameters": [
        {
          "schema": {
            "type": "integer"
          },
          "name": "id",
          "in": "path",
          "required": true,
          "description": "ID of opportunity"
        }
      ],
      "get": {
        "summary": "Get Opportunity",
        "tags": [
          "Opportunities"
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpportunityItem"
                }
              }
            }
          }
        },
        "operationId": "get-opportunity",
        "description": "Get an opportunity",
        "security": [
          {
            "oauth2": [
              "opportunities.read"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/opportunityEmbed"
          },
          {
            "in": "query",
            "name": "field",
            "description": "Filters the fields returned in the response <br /><br /> Example:<br /> - `field[]=id`: Return the `id` field<br /> - `field[]=address.id`: Return the `id` field of the `address` object<br /> - `field[]=addresses[].id`: Return the `id` field of the `address` objects<br />\n",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^[A-Za-z0-9\\.\\[\\]_-]+$"
              }
            }
          }
        ]
      },
      "put": {
        "summary": "Update Opportunity",
        "tags": [
          "Opportunities"
        ],
        "operationId": "update-opportunity",
        "responses": {
          "200": {
            "description": "Opportunity Updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpportunityItem"
                }
              }
            }
          },
          "204": {
            "$ref": "#/components/schemas/Verify"
          }
        },
        "description": "Update Opportunity informations",
        "security": [
          {
            "oauth2": [
              "opportunities.write"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/opportunityEmbed"
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/verify"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OpportunityUpdate"
              }
            }
          },
          "description": ""
        }
      },
      "delete": {
        "summary": "Delete an Opportunity",
        "tags": [
          "Opportunities"
        ],
        "operationId": "delete-opportunity",
        "responses": {
          "204": {
            "description": "Opportunity Deleted"
          }
        },
        "description": "Delete an opportunity",
        "security": [
          {
            "oauth2": [
              "opportunities.write"
            ]
          }
        ]
      }
    },
    "/opportunities/{id}/step-rank": {
      "parameters": [
        {
          "schema": {
            "type": "integer"
          },
          "name": "id",
          "in": "path",
          "required": true,
          "description": "ID of opportunity"
        }
      ],
      "patch": {
        "operationId": "update-opportunity-rank",
        "description": "Update opportunity's rank in its pipeline step or in a new step <br />> To apply new rank according to the sibling, we consider to be in the default ascending sort on opportunities rank\n",
        "summary": "Update opportunity's rank and/or step",
        "tags": [
          "Opportunities"
        ],
        "responses": {
          "204": {
            "description": "Opportunity's rank updated"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OpportunityRankUpdate"
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "opportunities.write"
            ]
          }
        ]
      }
    },
    "/opportunities": {
      "post": {
        "summary": "Create an opportunity",
        "tags": [
          "Opportunities"
        ],
        "operationId": "create-opportunity",
        "parameters": [
          {
            "$ref": "#/components/parameters/opportunityEmbed"
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/verify"
          }
        ],
        "responses": {
          "201": {
            "description": "Opportunity created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpportunityItem"
                }
              }
            }
          },
          "204": {
            "$ref": "#/components/schemas/Verify"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OpportunityCreate"
              }
            }
          },
          "description": ""
        },
        "security": [
          {
            "oauth2": [
              "opportunities.write"
            ]
          }
        ],
        "description": "Create an opportunity"
      },
      "get": {
        "summary": "Get Opportunities",
        "tags": [
          "Opportunities"
        ],
        "operationId": "get-opportunities",
        "description": "Get list of opportunities",
        "parameters": [
          {
            "$ref": "#/components/parameters/direction"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/opportunityEmbedWithAggregations"
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/opportunityOrder"
          }
        ],
        "responses": {
          "200": {
            "description": "Opportunities List Fetched",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/OpportunityItem"
                      }
                    },
                    "aggregations": {
                      "$ref": "#/components/schemas/OpportunitiesAggregations"
                    }
                  },
                  "required": [
                    "pagination",
                    "data"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "opportunities.read"
            ]
          }
        ]
      }
    },
    "/opportunities/search": {
      "post": {
        "summary": "Search Opportunities",
        "tags": [
          "Opportunities"
        ],
        "description": "Search opportunities",
        "operationId": "search-opportunities",
        "parameters": [
          {
            "$ref": "#/components/parameters/opportunityOrder"
          },
          {
            "$ref": "#/components/parameters/direction"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/opportunityEmbedWithAggregations"
          },
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OpportunityFilters"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Opportunities List Fetched",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/OpportunityItem"
                      }
                    },
                    "aggregations": {
                      "$ref": "#/components/schemas/OpportunitiesAggregations"
                    }
                  },
                  "required": [
                    "pagination",
                    "data"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "opportunities.read"
            ]
          }
        ]
      }
    },
    "/opportunities/sources": {
      "get": {
        "summary": "Get Opportunity Sources",
        "tags": [
          "Opportunities"
        ],
        "operationId": "get-opportunity-sources",
        "description": "Get list of opportunity sources",
        "parameters": [
          {
            "$ref": "#/components/parameters/direction"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/opportunitySourceOrder"
          }
        ],
        "responses": {
          "200": {
            "description": "Opportunity Sources List Fetched",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/OpportunitySourceCollectionItem"
                      }
                    }
                  },
                  "required": [
                    "pagination",
                    "data"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "opportunities.read"
            ]
          }
        ]
      }
    },
    "/opportunities/sources/search": {
      "post": {
        "summary": "Search Opportunity Sources",
        "tags": [
          "Opportunities"
        ],
        "description": "Search opportunity sources",
        "operationId": "search-opportunity-sources",
        "parameters": [
          {
            "$ref": "#/components/parameters/opportunitySourceOrder"
          },
          {
            "$ref": "#/components/parameters/direction"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OpportunitySourceFilters"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Opportunity Sources List Fetched",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/OpportunitySourceCollectionItem"
                      }
                    }
                  },
                  "required": [
                    "pagination",
                    "data"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "opportunities.read"
            ]
          }
        ]
      }
    },
    "/opportunities/categories/{sourceCategoryId}/sources": {
      "parameters": [
        {
          "schema": {
            "type": "integer"
          },
          "name": "sourceCategoryId",
          "in": "path",
          "required": true,
          "description": "ID of Opportunity Sources Category"
        }
      ],
      "get": {
        "summary": "Get Opportunity Category Sources",
        "tags": [
          "Opportunities"
        ],
        "operationId": "get-opportunity-category-sources",
        "description": "Get list of opportunity category sources",
        "parameters": [
          {
            "$ref": "#/components/parameters/direction"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/opportunitySourceOrder"
          }
        ],
        "responses": {
          "200": {
            "description": "Opportunity Category Sources List Fetched",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/OpportunitySourceCollectionItem"
                      }
                    }
                  },
                  "required": [
                    "pagination",
                    "data"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "opportunities.read"
            ]
          }
        ]
      }
    },
    "/opportunities/pipelines": {
      "get": {
        "summary": "Get Opportunity Pipelines",
        "tags": [
          "Opportunities"
        ],
        "operationId": "get-opportunity-pipelines",
        "description": "Get list of opportunity pipelines",
        "parameters": [
          {
            "$ref": "#/components/parameters/direction"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/opportunityPipelineOrder"
          }
        ],
        "responses": {
          "200": {
            "description": "Opportunity Pipelines List Fetched",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/OpportunityPipelineCollectionItem"
                      }
                    }
                  },
                  "required": [
                    "pagination",
                    "data"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "opportunities.read"
            ]
          }
        ]
      }
    },
    "/opportunities/pipelines/search": {
      "post": {
        "summary": "Search Opportunity Pipelines",
        "tags": [
          "Opportunities"
        ],
        "description": "Search opportunity pipelines",
        "operationId": "search-opportunity-pipelines",
        "parameters": [
          {
            "$ref": "#/components/parameters/opportunityPipelineOrder"
          },
          {
            "$ref": "#/components/parameters/direction"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OpportunityPipelineFilters"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Opportunity Pipelines List Fetched",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/OpportunityPipelineCollectionItem"
                      }
                    }
                  },
                  "required": [
                    "pagination",
                    "data"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "opportunities.read"
            ]
          }
        ]
      }
    },
    "/opportunities/pipelines/{pipelineId}/steps": {
      "parameters": [
        {
          "schema": {
            "type": "integer"
          },
          "name": "pipelineId",
          "in": "path",
          "required": true,
          "description": "Pipeline id"
        }
      ],
      "get": {
        "summary": "Get Opportunity Pipeline Steps",
        "tags": [
          "Opportunities"
        ],
        "operationId": "get-opportunity-pipeline-steps",
        "description": "Get list of opportunity pipeline steps",
        "parameters": [
          {
            "$ref": "#/components/parameters/direction"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/pipelineStepOrder"
          },
          {
            "$ref": "#/components/parameters/pipelineStepEmbed"
          }
        ],
        "responses": {
          "200": {
            "description": "Opportunity Pipeline Steps List Fetched",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "title": "Step with embed",
                        "allOf": [
                          {
                            "title": "Step",
                            "type": "object",
                            "additionalProperties": false,
                            "description": "Represents an Opportunity Pipeline Step",
                            "x-examples": {},
                            "properties": {
                              "id": {
                                "type": "integer",
                                "description": "Internal Opportunity Pipeline Step ID",
                                "readOnly": true,
                                "example": 1
                              },
                              "name": {
                                "type": "string",
                                "description": "Opportunity Pipeline Step name",
                                "example": "New website"
                              },
                              "probability": {
                                "type": "integer",
                                "description": "Opportunity Pipeline Step probability",
                                "example": 75,
                                "maximum": 100,
                                "minimum": 0
                              },
                              "rank": {
                                "type": "integer",
                                "description": "Pipeline rank in preferences",
                                "example": 2,
                                "minimum": 0
                              }
                            }
                          },
                          {
                            "type": "object",
                            "properties": {
                              "_embed": {
                                "nullable": true,
                                "allOf": [
                                  {
                                    "title": "Embed for Pipeline Steps",
                                    "type": "object",
                                    "description": "Optional objects added through the embed parameter",
                                    "x-examples": {},
                                    "additionalProperties": false,
                                    "properties": {
                                      "opportunities_number": {
                                        "type": "integer",
                                        "description": "Number of opportunities on this step",
                                        "example": 8
                                      }
                                    }
                                  }
                                ]
                              }
                            }
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "pagination",
                    "data"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "opportunities.read"
            ]
          }
        ]
      }
    },
    "/opportunities/pipelines/{pipelineId}/steps/search": {
      "parameters": [
        {
          "schema": {
            "type": "integer"
          },
          "name": "pipelineId",
          "in": "path",
          "required": true,
          "description": "Pipeline id"
        }
      ],
      "post": {
        "summary": "Search Opportunity Pipeline Steps",
        "tags": [
          "Opportunities"
        ],
        "description": "Search opportunity pipeline steps",
        "operationId": "search-opportunity-pipeline-steps",
        "parameters": [
          {
            "$ref": "#/components/parameters/direction"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/pipelineStepOrder"
          },
          {
            "$ref": "#/components/parameters/pipelineStepEmbed"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PipelineStepFilters"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Opportunity Pipeline Steps List Fetched",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/paths/~1opportunities~1pipelines~1%7BpipelineId%7D~1steps/get/responses/200/content/application~1json/schema/properties/data/items"
                      }
                    }
                  },
                  "required": [
                    "pagination",
                    "data"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "opportunities.read"
            ]
          }
        ]
      }
    },
    "/opportunities/steps/search": {
      "post": {
        "summary": "Search All Opportunity Pipeline Steps",
        "tags": [
          "Opportunities"
        ],
        "description": "Search all opportunity pipeline steps",
        "operationId": "search-all-opportunity-pipeline-steps",
        "parameters": [
          {
            "$ref": "#/components/parameters/direction"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/pipelineStepOrder"
          },
          {
            "$ref": "#/components/parameters/pipelineStepEmbed"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PipelineStepFilters"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Opportunity Steps List Fetched",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/paths/~1opportunities~1pipelines~1%7BpipelineId%7D~1steps/get/responses/200/content/application~1json/schema/properties/data/items"
                      }
                    }
                  },
                  "required": [
                    "pagination",
                    "data"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "opportunities.read"
            ]
          }
        ]
      }
    },
    "/opportunities/categories": {
      "get": {
        "summary": "Get Opportunities Categories List",
        "tags": [
          "Opportunities"
        ],
        "operationId": "get-opportunities-categories",
        "description": "Get list of opportunities categories",
        "parameters": [
          {
            "$ref": "#/components/parameters/direction"
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/opportuntiyCategoryEmbed"
          }
        ],
        "responses": {
          "200": {
            "description": "Opportunities Categories List",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/OpportunitiesCategoryItem"
                      }
                    }
                  },
                  "required": [
                    "pagination",
                    "data"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "opportunities.read"
            ]
          }
        ]
      }
    },
    "/opportunities/categories/{id}": {
      "parameters": [
        {
          "schema": {
            "type": "integer"
          },
          "name": "id",
          "in": "path",
          "required": true,
          "description": "Opportunities category id"
        },
        {
          "$ref": "#/components/parameters/opportuntiyCategoryEmbed"
        }
      ],
      "get": {
        "tags": [
          "Opportunities"
        ],
        "summary": "Get Opportunities Category",
        "responses": {
          "200": {
            "description": "Opportunity category fetched",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpportunitiesCategoryItem"
                }
              }
            }
          }
        },
        "operationId": "get-opportunities-category",
        "security": [
          {
            "oauth2": [
              "opportunities.read"
            ]
          }
        ]
      }
    },
    "/opportunities/{id}/custom-fields": {
      "parameters": [
        {
          "schema": {
            "type": "integer"
          },
          "name": "id",
          "in": "path",
          "required": true,
          "description": "Opportunity id"
        }
      ],
      "get": {
        "summary": "Opportunity custom fields List",
        "description": "Get list of custom fields for an opportunity",
        "tags": [
          "Opportunities"
        ],
        "operationId": "get-opportunity-custom-fields",
        "responses": {
          "200": {
            "description": "List fetched",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/paths/~1companies~1%7Bid%7D~1custom-fields/get/responses/200/content/application~1json/schema/properties/data/items"
                      }
                    }
                  },
                  "required": [
                    "pagination",
                    "data"
                  ]
                }
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/paths/~1companies~1%7Bid%7D~1custom-fields/get/parameters/0"
          },
          {
            "$ref": "#/components/parameters/direction"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "security": [
          {
            "oauth2": [
              "opportunities.read",
              "custom-fields.read"
            ]
          }
        ]
      },
      "put": {
        "summary": "Update opportunity custom fields",
        "description": "Update list of custom fields for an opportunity",
        "tags": [
          "Opportunities"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/verify"
          }
        ],
        "operationId": "update-opportunity-custom-fields",
        "responses": {
          "200": {
            "description": "Opportunity's custom fields updated"
          },
          "204": {
            "$ref": "#/components/schemas/Verify"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/paths/~1companies~1%7Bid%7D~1custom-fields/put/requestBody/content/application~1json/schema"
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "custom-fields.write",
              "opportunities.write"
            ]
          }
        ]
      }
    },
    "/tasks/{id}": {
      "parameters": [
        {
          "schema": {
            "type": "integer"
          },
          "name": "id",
          "in": "path",
          "required": true,
          "description": "Task id"
        }
      ],
      "get": {
        "tags": [
          "Tasks"
        ],
        "summary": "Get a task",
        "responses": {
          "200": {
            "description": "Task fetched",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskItem"
                }
              }
            }
          }
        },
        "operationId": "get-task",
        "security": [
          {
            "oauth2": [
              "tasks.read"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/taskEmbed"
          }
        ]
      },
      "put": {
        "tags": [
          "Tasks"
        ],
        "summary": "Update a task",
        "responses": {
          "200": {
            "description": "Task updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskItem"
                }
              }
            }
          }
        },
        "operationId": "update-task",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TaskUpdateItem"
                  }
                ]
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "tasks.write"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/taskEmbed"
          }
        ]
      },
      "delete": {
        "tags": [
          "Tasks"
        ],
        "operationId": "delete-task",
        "summary": "Delete a task",
        "responses": {
          "204": {
            "description": "Task deleted"
          }
        },
        "security": [
          {
            "oauth2": [
              "tasks.write"
            ]
          }
        ]
      }
    },
    "/tasks": {
      "post": {
        "tags": [
          "Tasks"
        ],
        "summary": "Create a task",
        "responses": {
          "201": {
            "description": "Task created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskItem"
                }
              }
            }
          }
        },
        "operationId": "create-task",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/taskEmbed"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaskCreateItem"
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "tasks.write"
            ]
          }
        ]
      },
      "get": {
        "summary": "Tasks List",
        "tags": [
          "Tasks"
        ],
        "description": "Get a list of tasks",
        "operationId": "get-tasks",
        "parameters": [
          {
            "$ref": "#/components/parameters/order"
          },
          {
            "$ref": "#/components/parameters/direction"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/taskEmbed"
          },
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "Tasks List Fetched",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/TaskCollectionItem"
                      }
                    }
                  },
                  "required": [
                    "pagination",
                    "data"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "tasks.read"
            ]
          }
        ]
      }
    },
    "/tasks/search": {
      "post": {
        "summary": "Search Tasks",
        "tags": [
          "Tasks"
        ],
        "description": "Search tasks",
        "operationId": "search-tasks",
        "parameters": [
          {
            "$ref": "#/components/parameters/taskOrder"
          },
          {
            "$ref": "#/components/parameters/direction"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/taskEmbed"
          },
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaskFilter"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Tasks List Fetched",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/TaskCollectionItem"
                      }
                    }
                  },
                  "required": [
                    "pagination",
                    "data"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "tasks.read"
            ]
          }
        ]
      }
    },
    "/tasks/labels": {
      "get": {
        "summary": "Get tasks labels",
        "description": "Get all tasks labels available",
        "tags": [
          "Tasks"
        ],
        "operationId": "get-tasks-labels",
        "security": [
          {
            "oauth2": [
              "tasks.read"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/labelOrder"
          },
          {
            "$ref": "#/components/parameters/direction"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Label"
                      }
                    }
                  },
                  "required": [
                    "pagination",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/calendar-events/labels": {
      "get": {
        "summary": "Get calendar events labels",
        "description": "Get all calendar events labels available",
        "tags": [
          "Calendar"
        ],
        "operationId": "get-calendar-events-labels",
        "security": [
          {
            "oauth2": [
              "calendars.read"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/labelOrder"
          },
          {
            "$ref": "#/components/parameters/direction"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Label"
                      }
                    }
                  },
                  "required": [
                    "pagination",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/staffs/{id}": {
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "schema": {
            "type": "string",
            "pattern": "^([0-9]+|me)$"
          },
          "required": true,
          "description": "Numerical identifier of the Staff. The logged-in Staff can also be retrieved by using the \"/me\" alias"
        }
      ],
      "get": {
        "summary": "Get Staff",
        "tags": [
          "Staffs"
        ],
        "responses": {
          "200": {
            "description": "Schema content depends on current user level of visibility on staffs, a restricted version could be return",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "title": "Staff with embed",
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/Activity/properties/_embed/properties/author"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "_embed": {
                              "nullable": true,
                              "allOf": [
                                {
                                  "title": "Embed for Staff",
                                  "type": "object",
                                  "description": "Optional objects added through the embed parameter",
                                  "x-examples": {},
                                  "additionalProperties": false,
                                  "properties": {
                                    "preferences": {
                                      "description": "Staff preferences",
                                      "allOf": [
                                        {
                                          "title": "Staff preferences",
                                          "type": "object",
                                          "properties": {
                                            "timezone": {
                                              "type": "string",
                                              "description": "Staff timezone",
                                              "example": "Europe/Paris"
                                            },
                                            "format_phone_number": {
                                              "readOnly": true,
                                              "type": "string",
                                              "description": "display phone number format",
                                              "enum": [
                                                "international",
                                                "national"
                                              ],
                                              "example": "international"
                                            },
                                            "format_date": {
                                              "readOnly": true,
                                              "type": "string",
                                              "description": "display date format",
                                              "example": "DD-MM-YYYY",
                                              "enum": [
                                                "MM-DD-YYYY",
                                                "DD-MM-YYYY"
                                              ]
                                            },
                                            "format_hour": {
                                              "readOnly": true,
                                              "type": "string",
                                              "description": "display hour format",
                                              "example": 24,
                                              "enum": [
                                                12,
                                                24
                                              ]
                                            },
                                            "currency": {
                                              "readOnly": true,
                                              "type": "string",
                                              "description": "current currency for staff",
                                              "example": "EUR"
                                            }
                                          }
                                        }
                                      ]
                                    },
                                    "acl": {
                                      "nullable": true,
                                      "description": "Staff acl",
                                      "allOf": [
                                        {
                                          "title": "Staff ACL",
                                          "type": "object",
                                          "description": "",
                                          "x-examples": {},
                                          "properties": {
                                            "view_companies": {
                                              "type": "boolean",
                                              "nullable": false,
                                              "description": "Is allowed to view companies",
                                              "example": true
                                            },
                                            "create_companies": {
                                              "type": "boolean",
                                              "nullable": false,
                                              "description": "Is allowed to create companies",
                                              "example": true
                                            },
                                            "update_companies": {
                                              "type": "boolean",
                                              "nullable": false,
                                              "description": "Is allowed to update companies",
                                              "example": true
                                            },
                                            "delete_companies": {
                                              "type": "boolean",
                                              "nullable": false,
                                              "description": "Is allowed to delete companies",
                                              "example": true
                                            },
                                            "view_individuals": {
                                              "type": "boolean",
                                              "nullable": false,
                                              "description": "Is allowed to view individuals",
                                              "example": true
                                            },
                                            "create_individuals": {
                                              "type": "boolean",
                                              "nullable": false,
                                              "description": "Is allowed to create individuals",
                                              "example": true
                                            },
                                            "update_individuals": {
                                              "type": "boolean",
                                              "nullable": false,
                                              "description": "Is allowed to update individuals",
                                              "example": true
                                            },
                                            "delete_individuals": {
                                              "type": "boolean",
                                              "nullable": false,
                                              "description": "Is allowed to delete individuals",
                                              "example": true
                                            },
                                            "view_clients": {
                                              "type": "boolean",
                                              "nullable": false,
                                              "description": "Is allowed to view clients",
                                              "example": true
                                            },
                                            "create_clients": {
                                              "type": "boolean",
                                              "nullable": false,
                                              "description": "Is allowed to create clients",
                                              "example": true
                                            },
                                            "update_clients": {
                                              "type": "boolean",
                                              "nullable": false,
                                              "description": "Is allowed to update clients",
                                              "example": true
                                            },
                                            "delete_clients": {
                                              "type": "boolean",
                                              "nullable": false,
                                              "description": "Is allowed to delete clients",
                                              "example": true
                                            },
                                            "view_prospects": {
                                              "type": "boolean",
                                              "nullable": false,
                                              "description": "Is allowed to view prospects",
                                              "example": true
                                            },
                                            "create_prospects": {
                                              "type": "boolean",
                                              "nullable": false,
                                              "description": "Is allowed to create prospects",
                                              "example": true
                                            },
                                            "update_prospects": {
                                              "type": "boolean",
                                              "nullable": false,
                                              "description": "Is allowed to update prospects",
                                              "example": true
                                            },
                                            "delete_prospects": {
                                              "type": "boolean",
                                              "nullable": false,
                                              "description": "Is allowed to delete prospects",
                                              "example": true
                                            },
                                            "view_suppliers": {
                                              "type": "boolean",
                                              "nullable": false,
                                              "description": "Is allowed to view suppliers",
                                              "example": true
                                            },
                                            "create_suppliers": {
                                              "type": "boolean",
                                              "nullable": false,
                                              "description": "Is allowed to create suppliers",
                                              "example": true
                                            },
                                            "update_suppliers": {
                                              "type": "boolean",
                                              "nullable": false,
                                              "description": "Is allowed to update suppliers",
                                              "example": true
                                            },
                                            "delete_suppliers": {
                                              "type": "boolean",
                                              "nullable": false,
                                              "description": "Is allowed to delete suppliers",
                                              "example": true
                                            },
                                            "create_contacts": {
                                              "type": "boolean",
                                              "nullable": false,
                                              "description": "Is allowed to create contacts",
                                              "example": true
                                            },
                                            "update_contacts": {
                                              "type": "boolean",
                                              "nullable": false,
                                              "description": "Is allowed to update contacts",
                                              "example": true
                                            },
                                            "delete_contacts": {
                                              "type": "boolean",
                                              "nullable": false,
                                              "description": "Is allowed to delete contacts",
                                              "example": true
                                            },
                                            "view_opportunities": {
                                              "type": "boolean",
                                              "nullable": false,
                                              "description": "Is allowed to view opportunities",
                                              "example": true
                                            },
                                            "create_opportunities": {
                                              "type": "boolean",
                                              "nullable": false,
                                              "description": "Is allowed to create opportunities",
                                              "example": true
                                            },
                                            "update_opportunities": {
                                              "type": "boolean",
                                              "nullable": false,
                                              "description": "Is allowed to update opportunities",
                                              "example": true
                                            },
                                            "delete_opportunities": {
                                              "type": "boolean",
                                              "nullable": false,
                                              "description": "Is allowed to delete opportunities",
                                              "example": true
                                            },
                                            "view_estimates": {
                                              "type": "boolean",
                                              "nullable": false,
                                              "description": "Is allowed to view estimates",
                                              "example": true
                                            },
                                            "create_estimates": {
                                              "type": "boolean",
                                              "nullable": false,
                                              "description": "Is allowed to create estimates",
                                              "example": true
                                            },
                                            "view_phone_calls": {
                                              "type": "boolean",
                                              "nullable": false,
                                              "description": "Is allowed to view phone calls",
                                              "example": true
                                            },
                                            "create_phone_calls": {
                                              "type": "boolean",
                                              "nullable": false,
                                              "description": "Is allowed to create phone calls",
                                              "example": true
                                            },
                                            "update_phone_calls": {
                                              "type": "boolean",
                                              "nullable": false,
                                              "description": "Is allowed to update phone calls",
                                              "example": true
                                            },
                                            "delete_phone_calls": {
                                              "type": "boolean",
                                              "nullable": false,
                                              "description": "Is allowed to delete phone calls",
                                              "example": true
                                            },
                                            "view_invoices": {
                                              "type": "boolean",
                                              "nullable": false,
                                              "description": "Is allowed to view invoices",
                                              "example": true
                                            },
                                            "create_invoices": {
                                              "type": "boolean",
                                              "nullable": false,
                                              "description": "Is allowed to create invoices",
                                              "example": true
                                            },
                                            "update_invoices": {
                                              "type": "boolean",
                                              "nullable": false,
                                              "description": "Is allowed to update invoices",
                                              "example": true
                                            },
                                            "delete_invoices": {
                                              "type": "boolean",
                                              "nullable": false,
                                              "description": "Is allowed to delete invoices",
                                              "example": true
                                            },
                                            "validate_invoices": {
                                              "type": "boolean",
                                              "nullable": false,
                                              "description": "Is allowed to validate invoices"
                                            },
                                            "view_credit_notes": {
                                              "type": "boolean",
                                              "nullable": false,
                                              "description": "Is allowed to view credit notes",
                                              "example": true
                                            },
                                            "create_credit_notes": {
                                              "type": "boolean",
                                              "nullable": false,
                                              "description": "Is allowed to create credit notes",
                                              "example": true
                                            },
                                            "update_credit_notes": {
                                              "type": "boolean",
                                              "nullable": false,
                                              "description": "Is allowed to update credit notes",
                                              "example": true
                                            },
                                            "delete_credit_notes": {
                                              "type": "boolean",
                                              "nullable": false,
                                              "description": "Is allowed to delete credit notes",
                                              "example": true
                                            },
                                            "validate_credit_notes": {
                                              "type": "boolean",
                                              "nullable": false,
                                              "description": "Is allowed to validate credit notes",
                                              "example": true
                                            },
                                            "view_cashflow": {
                                              "type": "boolean",
                                              "nullable": false,
                                              "description": "Is allowed to view cashflow",
                                              "example": true
                                            },
                                            "create_cashflow": {
                                              "type": "boolean",
                                              "nullable": false,
                                              "description": "Is allowed to create cashflow",
                                              "example": true
                                            }
                                          }
                                        }
                                      ]
                                    },
                                    "licenses": {
                                      "nullable": true,
                                      "description": "Staff licenses",
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "id": {
                                            "type": "string",
                                            "description": "License identifier",
                                            "example": "9998a80a-7b75-4616-96d5-7ccff7ac08e8"
                                          },
                                          "code": {
                                            "type": "string",
                                            "description": "License code",
                                            "example": "pack_all_included"
                                          },
                                          "enabled": {
                                            "type": "boolean",
                                            "description": "License is enabled"
                                          }
                                        }
                                      }
                                    },
                                    "preferences_calendar": {
                                      "description": "Staff preferences calendar",
                                      "allOf": [
                                        {
                                          "title": "Staff preferences calendar",
                                          "type": "object",
                                          "description": "Optional objects added through the embed parameter",
                                          "x-examples": {},
                                          "additionalProperties": false,
                                          "properties": {
                                            "provider": {
                                              "readOnly": true,
                                              "type": "string",
                                              "description": "display calendar provider",
                                              "enum": [
                                                "google",
                                                "outlook",
                                                "sellsy"
                                              ],
                                              "example": "google"
                                            }
                                          }
                                        }
                                      ]
                                    }
                                  }
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "profile": {
                                      "type": "object",
                                      "title": "Profile",
                                      "properties": {
                                        "id": {
                                          "type": "integer",
                                          "description": "Profile id",
                                          "example": 6657
                                        },
                                        "name": {
                                          "type": "string",
                                          "description": "Profile name",
                                          "example": "Collaborator"
                                        },
                                        "is_administrator": {
                                          "type": "boolean",
                                          "description": "Indicates if this profile grants administrator privileges",
                                          "example": true
                                        }
                                      },
                                      "required": [
                                        "id",
                                        "name",
                                        "is_administrator"
                                      ]
                                    }
                                  }
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "account": {
                                      "type": "object",
                                      "title": "Account details",
                                      "properties": {
                                        "id": {
                                          "type": "integer",
                                          "description": "Numerical identifier referencing the account",
                                          "example": 97417
                                        },
                                        "uuid": {
                                          "type": "string",
                                          "description": "Identifier referencing the account",
                                          "example": "600b851b-e5c9-44f0-a66b-9b8391eff153"
                                        },
                                        "name": {
                                          "type": "string",
                                          "description": "Account's name",
                                          "example": "Sellsy"
                                        },
                                        "country_code": {
                                          "type": "string",
                                          "description": "Account's country code",
                                          "example": "FR",
                                          "minLength": 2,
                                          "maxLength": 2,
                                          "nullable": true
                                        }
                                      },
                                      "required": [
                                        "uuid",
                                        "id",
                                        "name"
                                      ]
                                    }
                                  }
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "user": {
                                      "type": "object",
                                      "title": "User details",
                                      "properties": {
                                        "uuid": {
                                          "type": "string",
                                          "description": "Identifier referencing the user",
                                          "example": "600b851b-e5c9-44f0-a66b-9b8391eff153"
                                        }
                                      },
                                      "required": [
                                        "uuid"
                                      ]
                                    }
                                  }
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "subscriptions": {
                                      "title": "Staff subscriptions",
                                      "type": "object",
                                      "description": "Optional objects added through the embed parameter",
                                      "x-examples": {},
                                      "additionalProperties": false,
                                      "properties": {
                                        "cashflow": {
                                          "type": "object",
                                          "nullable": true,
                                          "properties": {
                                            "plan": {
                                              "type": "string",
                                              "description": "Cashflow plan",
                                              "enum": [
                                                "TRIAL",
                                                "STARTER",
                                                "PRO",
                                                "BUSINESS",
                                                "EXTERNAL"
                                              ],
                                              "example": "TRIAL"
                                            },
                                            "trial_end_date": {
                                              "nullable": true,
                                              "type": "string",
                                              "format": "date-time",
                                              "description": "Trial end date",
                                              "example": "2022-04-20T23:59:59+02:00"
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "intercom_hash": {
                                      "title": "Intercom hmac",
                                      "type": "object",
                                      "properties": {
                                        "web": {
                                          "type": "string",
                                          "description": "Web HMAC",
                                          "example": "64a4e500f2b08a855f1bc1cf202066c0d18adddf04d23583bf4b5db91778e067"
                                        },
                                        "ios": {
                                          "type": "string",
                                          "description": "iOS HMAC",
                                          "example": "64a4e500f2b08a855f1bc1cf202066c0d18adddf04d23583bf4b5db91778e067"
                                        },
                                        "android": {
                                          "type": "string",
                                          "description": "Android HMAC",
                                          "example": "64a4e500f2b08a855f1bc1cf202066c0d18adddf04d23583bf4b5db91778e067"
                                        }
                                      },
                                      "required": [
                                        "web",
                                        "ios",
                                        "android"
                                      ]
                                    }
                                  }
                                }
                              ]
                            }
                          }
                        }
                      ]
                    },
                    {
                      "$ref": "#/components/schemas/StaffRestrictedView"
                    }
                  ]
                }
              }
            }
          }
        },
        "operationId": "get-staff",
        "description": "Get a staff",
        "security": [
          {
            "oauth2": [
              "staffs.read"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/paths/~1opportunities~1%7Bid%7D/get/parameters/1"
          },
          {
            "$ref": "#/components/parameters/staffItemEmbed"
          }
        ]
      },
      "put": {
        "summary": "Update Staff",
        "tags": [
          "Staffs"
        ],
        "operationId": "update-staff",
        "description": "Update staff informations",
        "responses": {
          "200": {
            "description": "Staff updated, schema content depends on current user level of visibility on staffs, a restricted version could be return",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "title": "Staff with embed",
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/Activity/properties/_embed/properties/author"
                        },
                        {
                          "type": "object",
                          "properties": {
                            "_embed": {
                              "nullable": true,
                              "allOf": [
                                {
                                  "$ref": "#/paths/~1staffs~1%7Bid%7D/get/responses/200/content/application~1json/schema/oneOf/0/allOf/1/properties/_embed/allOf/0"
                                }
                              ]
                            }
                          }
                        }
                      ]
                    },
                    {
                      "$ref": "#/components/schemas/StaffRestrictedView"
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "staffs.write"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/paths/~1opportunities~1%7Bid%7D/get/parameters/1"
          },
          {
            "$ref": "#/components/parameters/staffEmbed"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StaffUpdateItem"
              }
            }
          }
        }
      }
    },
    "/staffs": {
      "post": {
        "tags": [
          "Staffs"
        ],
        "summary": "Create a staff",
        "responses": {
          "201": {
            "description": "Staff created, schema content depends on current user level of visibility on staffs, a restricted version could be return",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/paths/~1staffs~1%7Bid%7D/put/responses/200/content/application~1json/schema/oneOf/0"
                    },
                    {
                      "$ref": "#/components/schemas/StaffRestrictedView"
                    }
                  ]
                }
              }
            }
          }
        },
        "operationId": "create-staff",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StaffCreateItem"
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "staffs.write"
            ]
          }
        ]
      },
      "get": {
        "summary": "Get Staffs",
        "tags": [
          "Staffs"
        ],
        "responses": {
          "200": {
            "description": "Schema content depends on current user level of visibility on staffs, a restricted version could be return",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "oneOf": [
                          {
                            "$ref": "#/paths/~1staffs~1%7Bid%7D/put/responses/200/content/application~1json/schema/oneOf/0"
                          },
                          {
                            "$ref": "#/components/schemas/StaffRestrictedView"
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "pagination",
                    "data"
                  ]
                }
              }
            }
          }
        },
        "operationId": "get-staffs",
        "description": "Get a list of staffs",
        "security": [
          {
            "oauth2": [
              "staffs.read"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/paths/~1opportunities~1%7Bid%7D/get/parameters/1"
          },
          {
            "$ref": "#/components/parameters/staffEmbed"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          }
        ]
      }
    },
    "/staffs/search": {
      "post": {
        "summary": "Search Staffs",
        "tags": [
          "Staffs"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StaffFilters"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Schema content depends on current user level of visibility on staffs, a restricted version could be return",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "oneOf": [
                          {
                            "$ref": "#/paths/~1staffs~1%7Bid%7D/put/responses/200/content/application~1json/schema/oneOf/0"
                          },
                          {
                            "$ref": "#/components/schemas/StaffRestrictedView"
                          }
                        ]
                      }
                    }
                  },
                  "required": [
                    "pagination",
                    "data"
                  ]
                }
              }
            }
          }
        },
        "operationId": "search-staffs",
        "description": "Search list of staffs",
        "security": [
          {
            "oauth2": [
              "staffs.read"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/paths/~1opportunities~1%7Bid%7D/get/parameters/1"
          },
          {
            "$ref": "#/components/parameters/staffEmbed"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          }
        ]
      }
    },
    "/teams": {
      "get": {
        "summary": "Team List",
        "tags": [
          "Staffs"
        ],
        "description": "Get a list of team",
        "operationId": "get-teams",
        "security": [
          {
            "oauth2": [
              "staffs.read"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          }
        ],
        "responses": {
          "200": {
            "description": "Team List Fetched",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Team"
                      }
                    }
                  },
                  "required": [
                    "pagination",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/profiles": {
      "get": {
        "summary": "Profiles list",
        "tags": [
          "Staffs"
        ],
        "description": "Get profiles list",
        "operationId": "get-profiles",
        "security": [
          {
            "oauth2": [
              "staffs.read"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/profileOrder"
          },
          {
            "$ref": "#/components/parameters/direction"
          }
        ],
        "responses": {
          "200": {
            "description": "Profile List Fetched",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Profiles"
                      }
                    }
                  },
                  "required": [
                    "pagination",
                    "data"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/search": {
      "get": {
        "summary": "Search",
        "tags": [
          "Listings"
        ],
        "operationId": "search",
        "description": "Search objects",
        "security": [
          {
            "oauth2": [
              "search.read"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/autocomplete"
          },
          {
            "$ref": "#/components/parameters/searchType"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "The pagination limit. On a default search (without the `type` parameter), the limit parameter is not used because the limit is automatically calculated in relation to the relevance of the search results.",
            "schema": {
              "type": "integer",
              "description": "Pagination limit",
              "default": 25,
              "maximum": 100,
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Search result",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    },
                    "data": {
                      "$ref": "#/components/schemas/SearchResult"
                    },
                    "aggregations": {
                      "$ref": "#/components/schemas/SearchResultAggregations"
                    }
                  },
                  "required": [
                    "pagination",
                    "data",
                    "aggregations"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/calendar-events": {
      "post": {
        "summary": "Create a calendar event",
        "operationId": "create-calendar-event",
        "tags": [
          "Calendar"
        ],
        "security": [
          {
            "oauth2": [
              "calendars.write"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/paths/~1opportunities~1%7Bid%7D/get/parameters/1"
          },
          {
            "$ref": "#/components/parameters/calendarEventEmbed"
          }
        ],
        "responses": {
          "201": {
            "description": "Calendar event created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CalendarEventItem"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CalendarEventCreateItem"
              }
            }
          }
        }
      },
      "get": {
        "summary": "Calendar events List",
        "tags": [
          "Calendar"
        ],
        "description": "Get a list of calendar event",
        "operationId": "get-calendar-events",
        "parameters": [
          {
            "$ref": "#/components/parameters/order"
          },
          {
            "$ref": "#/components/parameters/direction"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/calendarEventEmbed"
          },
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "Calendar events List Fetched",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/CalendarEventItem"
                      }
                    }
                  },
                  "required": [
                    "pagination",
                    "data"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "calendars.read"
            ]
          }
        ]
      }
    },
    "/calendar-events/{id}": {
      "parameters": [
        {
          "schema": {
            "type": "integer"
          },
          "name": "id",
          "in": "path",
          "required": true,
          "description": "Calendar event id"
        }
      ],
      "get": {
        "summary": "Get calendar event",
        "operationId": "get-calendar-event",
        "tags": [
          "Calendar"
        ],
        "security": [
          {
            "oauth2": [
              "calendars.read"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/paths/~1opportunities~1%7Bid%7D/get/parameters/1"
          },
          {
            "$ref": "#/components/parameters/calendarEventEmbed"
          }
        ],
        "responses": {
          "200": {
            "description": "Calendar event fetched",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CalendarEventItem"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update calendar event",
        "operationId": "update-calendar-event",
        "tags": [
          "Calendar"
        ],
        "security": [
          {
            "oauth2": [
              "calendars.write"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Calendar event updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CalendarEventItem"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CalendarEventUpdateItem"
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete calendar event",
        "operationId": "delete-calendar-event",
        "tags": [
          "Calendar"
        ],
        "security": [
          {
            "oauth2": [
              "calendars.write"
            ]
          }
        ],
        "responses": {
          "204": {
            "description": "Calendar event deleted"
          }
        }
      }
    },
    "/calendar-events/search": {
      "post": {
        "summary": "Search calendar event",
        "tags": [
          "Calendar"
        ],
        "description": "Search calendar events",
        "operationId": "search-calendar-events",
        "parameters": [
          {
            "$ref": "#/components/parameters/calendarEventOrder"
          },
          {
            "$ref": "#/components/parameters/direction"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/calendarEventEmbed"
          },
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CalendarEventFilters"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Calendar events list Fetched",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/CalendarEventItem"
                      }
                    }
                  },
                  "required": [
                    "pagination",
                    "data"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "calendars.read"
            ]
          }
        ]
      }
    },
    "/activities/search": {
      "post": {
        "summary": "Search in activity",
        "description": "Search in activity",
        "tags": [
          "Activities"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Activity"
                      }
                    }
                  },
                  "required": [
                    "pagination",
                    "data"
                  ]
                }
              }
            }
          }
        },
        "operationId": "search-activities",
        "security": [
          {
            "oauth2": [
              "activities.read"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/activityOrder"
          },
          {
            "$ref": "#/components/parameters/direction"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/activityEmbed"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ActivityFilters"
                  },
                  {
                    "type": "object",
                    "description": "The activity filters",
                    "properties": {
                      "filters": {
                        "type": "object",
                        "description": "Activity filters",
                        "properties": {
                          "object_related": {
                            "type": "object",
                            "description": "Filter for get the activity related to an object",
                            "properties": {
                              "type": {
                                "type": "string",
                                "enum": [
                                  "company",
                                  "individual",
                                  "opportunity",
                                  "contact"
                                ]
                              },
                              "id": {
                                "type": "integer",
                                "minimum": 1,
                                "example": 1029
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/timeline/{type}/{id}/search": {
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "description": "Object identifier",
          "schema": {
            "type": "string"
          },
          "required": true
        },
        {
          "in": "path",
          "name": "type",
          "description": "Object type",
          "schema": {
            "type": "string",
            "enum": [
              "individual",
              "company",
              "contact",
              "opportunity"
            ]
          },
          "required": true
        }
      ],
      "post": {
        "summary": "Timeline search",
        "description": "Search in timeline activity of an object",
        "tags": [
          "Activities"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Activity"
                      }
                    }
                  },
                  "required": [
                    "pagination",
                    "data"
                  ]
                }
              }
            }
          }
        },
        "operationId": "search-timeline",
        "security": [
          {
            "oauth2": [
              "activities.read"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/activityOrder"
          },
          {
            "$ref": "#/components/parameters/direction"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/activityEmbed"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ActivityFilters"
              }
            }
          }
        }
      }
    },
    "/phone-calls/{id}": {
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "schema": {
            "type": "integer"
          },
          "required": true,
          "description": "Numerical identifier of phone call"
        }
      ],
      "get": {
        "summary": "Get PhoneCall",
        "tags": [
          "PhoneCalls"
        ],
        "description": "Get PhoneCall",
        "operationId": "get-phone-call",
        "parameters": [
          {
            "$ref": "#/components/parameters/phoneCallEmbed"
          },
          {
            "$ref": "#/paths/~1opportunities~1%7Bid%7D/get/parameters/1"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PhoneCallItem"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "phonecalls.read"
            ]
          }
        ]
      },
      "put": {
        "summary": "Update PhoneCall",
        "tags": [
          "PhoneCalls"
        ],
        "description": "Update a PhoneCall",
        "operationId": "update-phone-call",
        "parameters": [
          {
            "$ref": "#/components/parameters/phoneCallEmbed"
          },
          {
            "$ref": "#/paths/~1opportunities~1%7Bid%7D/get/parameters/1"
          }
        ],
        "responses": {
          "200": {
            "description": "Updated PhoneCall",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PhoneCallItem"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PhoneCallUpdateItem"
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "phonecalls.write"
            ]
          }
        ]
      },
      "delete": {
        "summary": "Delete a phoneCall",
        "tags": [
          "PhoneCalls"
        ],
        "operationId": "delete-phone-call",
        "responses": {
          "204": {
            "description": "PhoneCall deleted"
          }
        },
        "security": [
          {
            "oauth2": [
              "phonecalls.write"
            ]
          }
        ]
      }
    },
    "/phone-calls": {
      "get": {
        "summary": "PhoneCalls List",
        "tags": [
          "PhoneCalls"
        ],
        "description": "Get a list of PhoneCalls",
        "operationId": "get-phone-calls",
        "parameters": [
          {
            "$ref": "#/components/parameters/order"
          },
          {
            "$ref": "#/components/parameters/direction"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/phoneCallEmbed"
          }
        ],
        "responses": {
          "200": {
            "description": "PhoneCalls List Fetched",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/PhoneCallCollectionItem"
                      }
                    }
                  },
                  "required": [
                    "pagination",
                    "data"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "phonecalls.read"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "PhoneCalls"
        ],
        "summary": "Create a phone call",
        "responses": {
          "201": {
            "description": "PhoneCall created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PhoneCallItem"
                }
              }
            }
          }
        },
        "operationId": "create-phone-call",
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/phoneCallEmbed"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PhoneCallCreateItem"
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "phonecalls.write"
            ]
          }
        ]
      }
    },
    "/phone-calls/search": {
      "post": {
        "summary": "Search PhoneCalls",
        "tags": [
          "PhoneCalls"
        ],
        "description": "Search a list of PhoneCalls",
        "operationId": "search-phone-calls",
        "parameters": [
          {
            "$ref": "#/components/parameters/order"
          },
          {
            "$ref": "#/components/parameters/direction"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/phoneCallEmbed"
          }
        ],
        "responses": {
          "200": {
            "description": "PhoneCalls List Fetched",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/PhoneCallCollectionItem"
                      }
                    }
                  },
                  "required": [
                    "pagination",
                    "data"
                  ]
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PhoneCallFilter"
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "phonecalls.read"
            ]
          }
        ]
      }
    },
    "/emails/{id}": {
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "schema": {
            "type": "string"
          },
          "required": true,
          "description": "identifier of email"
        }
      ],
      "get": {
        "summary": "Get Email",
        "tags": [
          "Emails"
        ],
        "description": "Get an Email",
        "operationId": "get-email",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmailItem"
                }
              }
            }
          },
          "206": {
            "description": "Partial content if the email provider is unreachable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmailItem"
                }
              }
            },
            "headers": {
              "X-Mail-Provider-Error": {
                "schema": {
                  "$ref": "#/components/schemas/PartialEmailHeader"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "emails.read"
            ]
          }
        ]
      }
    },
    "/emails/threads/{id}": {
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "schema": {
            "type": "string"
          },
          "required": true,
          "description": "Identifier of email thread"
        }
      ],
      "get": {
        "summary": "Get Emails Thread",
        "tags": [
          "Emails"
        ],
        "description": "Get the emails list of a thread",
        "operationId": "get-email-thread",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Identifier of email thread"
                    },
                    "emails": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/EmailItem"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "emails.read"
            ]
          }
        ]
      }
    },
    "/email/authenticate": {
      "parameters": [
        {
          "in": "query",
          "name": "email",
          "schema": {
            "type": "string",
            "format": "email"
          },
          "required": true,
          "description": "email whose domain should be authenticated",
          "example": "jonh.doe@email.com"
        }
      ],
      "get": {
        "operationId": "get-email-domain-dns-data",
        "summary": "Get email's domain DNS data",
        "description": "Get DNS data for the domain extracted from the email",
        "tags": [
          "Emails"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmailAuthenticationItem"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "emails.settings"
            ]
          }
        ]
      }
    },
    "/email/domain/validate": {
      "post": {
        "operationId": "validate-email-domain-dns",
        "summary": "Validate email's DNS",
        "description": "Validate an email DNS",
        "tags": [
          "Emails"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmailValidationItem"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "oauth2": [
              "emails.settings"
            ]
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Email domain validation's request body",
                "properties": {
                  "domain": {
                    "type": "string",
                    "description": "The email DNS",
                    "example": "domain.com"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/webhooks": {
      "get": {
        "operationId": "get-webhooks",
        "summary": "Get Webhooks",
        "description": "Get list of webhooks",
        "tags": [
          "Webhooks"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/direction"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "Webhooks List Fetched",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/WebhookReadItem"
                      }
                    }
                  },
                  "required": [
                    "pagination",
                    "data"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "webhooks.read"
            ]
          }
        ]
      },
      "post": {
        "operationId": "create-webhook",
        "summary": "Create Webhook",
        "description": "Create a webhook",
        "tags": [
          "Webhooks"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "responses": {
          "201": {
            "description": "Webhook created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookReadItem"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookCreateItem"
              }
            }
          },
          "description": ""
        },
        "security": [
          {
            "oauth2": [
              "webhooks.write"
            ]
          }
        ]
      }
    },
    "/webhooks/search": {
      "post": {
        "operationId": "search-webhooks",
        "summary": "Search Webhooks",
        "description": "Get list of webhooks",
        "tags": [
          "Webhooks"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/direction"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookFilters"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Webhooks List Fetched",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/WebhookReadItem"
                      }
                    }
                  },
                  "required": [
                    "pagination",
                    "data"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "webhooks.read"
            ]
          }
        ]
      }
    },
    "/webhooks/{id}": {
      "parameters": [
        {
          "schema": {
            "type": "integer"
          },
          "name": "id",
          "in": "path",
          "required": true,
          "description": "ID of webhook"
        }
      ],
      "get": {
        "operationId": "get-webhook",
        "summary": "Get Webhook",
        "description": "Get a webhook",
        "tags": [
          "Webhooks"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookReadItem"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "webhooks.read"
            ]
          }
        ]
      },
      "put": {
        "operationId": "update-webhook",
        "summary": "Update Webhook",
        "description": "Update Webhook informations",
        "tags": [
          "Webhooks"
        ],
        "responses": {
          "200": {
            "description": "Webhook Updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookReadItem"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WebhookEditItem"
              }
            }
          },
          "description": ""
        },
        "security": [
          {
            "oauth2": [
              "webhooks.write"
            ]
          }
        ]
      },
      "delete": {
        "operationId": "delete-webhook",
        "summary": "Delete Webhook",
        "description": "Delete a webhook",
        "tags": [
          "Webhooks"
        ],
        "responses": {
          "204": {
            "description": "Webhook Deleted"
          }
        },
        "security": [
          {
            "oauth2": [
              "webhooks.write"
            ]
          }
        ]
      }
    },
    "/webhooks/events": {
      "get": {
        "operationId": "get-webhook-events",
        "description": "List all events' name available for a webhook",
        "summary": "List Webhook Events",
        "tags": [
          "Webhooks"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookEventsList"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "webhooks.read"
            ]
          }
        ]
      }
    },
    "/units": {
      "get": {
        "operationId": "get-units",
        "description": "Get all units of the corp",
        "summary": "Get Units",
        "tags": [
          "Units"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/direction"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Unit"
                      }
                    }
                  },
                  "required": [
                    "pagination",
                    "data"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "accounts.read"
            ]
          }
        ]
      }
    },
    "/currencies": {
      "get": {
        "operationId": "get-currencies",
        "description": "Get all currencies of the corp",
        "summary": "Get currencies",
        "tags": [
          "Currencies"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/direction"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Currency"
                      }
                    }
                  },
                  "required": [
                    "pagination",
                    "data"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "accounts.read"
            ]
          }
        ]
      }
    },
    "/countries": {
      "get": {
        "operationId": "get-countries",
        "description": "Get a list of countries",
        "summary": "Get countries list",
        "tags": [
          "Countries"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/language"
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "pagination": {
                      "title": "pagination",
                      "type": "object",
                      "description": "The pagination",
                      "properties": {
                        "limit": {
                          "type": "integer",
                          "example": 25,
                          "minimum": 0
                        },
                        "total": {
                          "type": "integer",
                          "example": 152,
                          "minimum": 0
                        },
                        "count": {
                          "type": "integer",
                          "example": 25,
                          "minimum": 0
                        },
                        "offset": {
                          "anyOf": [
                            {
                              "type": "integer",
                              "minimum": 0,
                              "example": 25
                            },
                            {
                              "type": "string",
                              "example": "WzIwMTQtMDEtMDEsNTk4XQ=="
                            }
                          ]
                        }
                      },
                      "required": [
                        "limit",
                        "total",
                        "count",
                        "offset"
                      ]
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Country"
                      }
                    }
                  },
                  "required": [
                    "pagination",
                    "data"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "accounts.read"
            ]
          }
        ]
      }
    },
    "/settings/subscription": {
      "get": {
        "operationId": "get-subscription",
        "summary": "Get Subscription",
        "description": "Get subscription information",
        "tags": [
          "Subscription"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subscription"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "accounts.read"
            ]
          }
        ]
      }
    },
    "/items": {
      "get": {
        "summary": "Items List",
        "tags": [
          "Items"
        ],
        "description": "Get a list of items",
        "operationId": "get-items",
        "parameters": [
          {
            "$ref": "#/components/parameters/direction"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/itemOrder"
          }
        ],
        "responses": {
          "200": {
            "description": "Items List Fetched",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemReadItem"
                      }
                    }
                  },
                  "required": [
                    "pagination",
                    "data"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "items.read"
            ]
          }
        ]
      }
    },
    "/items/search": {
      "post": {
        "summary": "Search items",
        "tags": [
          "Items"
        ],
        "description": "Search items",
        "operationId": "search-items",
        "parameters": [
          {
            "$ref": "#/components/parameters/direction"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/itemOrder"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Item filters",
                "type": "object",
                "additionalProperties": false,
                "required": [
                  "filters"
                ],
                "properties": {
                  "filters": {
                    "type": "object",
                    "description": "Item filters"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Items List Fetched",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemReadItem"
                      }
                    }
                  },
                  "required": [
                    "pagination",
                    "data"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "items.read"
            ]
          }
        ]
      }
    },
    "/items/{id}": {
      "parameters": [
        {
          "schema": {
            "type": "integer"
          },
          "name": "id",
          "in": "path",
          "required": true,
          "description": "ID of item"
        }
      ],
      "get": {
        "operationId": "get-item",
        "summary": "Get an item",
        "description": "Get an item",
        "tags": [
          "Items"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemReadItem"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "items.read"
            ]
          }
        ]
      }
    },
    "/staffs/{id}/licenses": {
      "parameters": [
        {
          "schema": {
            "type": "integer"
          },
          "name": "id",
          "in": "path",
          "required": true,
          "description": "ID of staff"
        }
      ],
      "put": {
        "operationId": "put-staff-licenses",
        "summary": "Put staff licenses",
        "description": "Put staff licenses. Need to pass all existing licenses if you want to keep licenses.",
        "tags": [
          "Staffs"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LicenseRead"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LicenseEdit"
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "accounts.write"
            ]
          }
        ]
      },
      "delete": {
        "operationId": "delete-staff-licenses",
        "summary": "Delete licenses",
        "description": "Delete staff licenses",
        "tags": [
          "Staffs"
        ],
        "responses": {
          "204": {
            "description": "licenses deleted"
          }
        },
        "security": [
          {
            "oauth2": [
              "accounts.write"
            ]
          }
        ]
      }
    },
    "/quotas": {
      "get": {
        "operationId": "get-quotas",
        "description": "Get quotas of the corp",
        "summary": "Get Quotas",
        "tags": [
          "Quotas"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Quotas"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "accounts.read"
            ]
          }
        ]
      }
    },
    "/batch": {
      "post": {
        "summary": "Batch request",
        "tags": [
          "Batch"
        ],
        "description": "Create a batch request",
        "operationId": "create-batch",
        "requestBody": {
          "content": {
            "text/plain": {
              "schema": {
                "type": "string"
              },
              "examples": {
                "example1": {
                  "summary": "PUT example",
                  "value": "{\"uri\": \"/comments/83\", \"method\": \"PUT\"}\n{\"description\": \"description updated !\"}\n{\"uri\": \"/comments/84\", \"method\": \"PUT\"}\n{\"description\": \"description updated !\"}\n"
                },
                "example2": {
                  "summary": "GET example",
                  "value": "{\"uri\": \"/comments\", \"method\": \"GET\", \"query\": {\"limit\": 2}}\n{}\n{\"uri\": \"/companies\", \"method\": \"GET\", \"query\": {\"limit\": 3}}\n{}\n"
                },
                "example3": {
                  "summary": "UUID usage",
                  "value": "{\"uri\": \"/companies\", \"method\": \"POST\", \"uuid\": \"6e9dbe21-2967-4762-a035-f2d2effbc433\"}\n{\"type\": \"client\", \"name\": \"Company Name\"}\n{\"uri\": \"/companies/6e9dbe21-2967-4762-a035-f2d2effbc433/addresses\", \"method\": \"POST\", \"uuid\": \"2ca47a9d-b41b-4f3f-b8c4-fafc54380a66\"}\n{\"name\": \"Main office\", \"address_line_1\": \"57 rue lucile\", \"postal_code\":\"75012\", \"city\": \"Paris\", \"country\": \"France\", \"country_code\": \"FR\"}\n{\"uri\": \"/companies/6e9dbe21-2967-4762-a035-f2d2effbc433/addresses/2ca47a9d-b41b-4f3f-b8c4-fafc54380a66\", \"method\": \"PUT\"}\n{\"name\": \"Main office updated\"}\n"
                }
              }
            }
          }
        },
        "responses": {
          "207": {
            "description": "Batch response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "example": {
                  "error": false,
                  "responses": [
                    {
                      "code": 200,
                      "response": {
                        "data": [
                          {
                            "id": 83,
                            "owner": {
                              "id": 21,
                              "type": "staff"
                            },
                            "related": [],
                            "created": "2021-04-13T15:11:51+02:00",
                            "updated": "2021-04-13T15:11:51+02:00",
                            "description": "Lorem ipsum dolor sit amet",
                            "parent_id": null,
                            "company_id": null,
                            "individual_id": null,
                            "contact_id": null
                          },
                          {
                            "id": 85,
                            "owner": {
                              "id": 21,
                              "type": "staff"
                            },
                            "related": [],
                            "created": "2021-04-13T15:39:34+02:00",
                            "updated": "2021-04-13T15:39:34+02:00",
                            "description": "Lorem ipsum dolor sit amet",
                            "parent_id": null,
                            "company_id": null,
                            "individual_id": null,
                            "contact_id": null
                          }
                        ],
                        "pagination": {
                          "limit": 2,
                          "count": 2,
                          "total": 45,
                          "offset": "WyI4NSJd"
                        }
                      }
                    },
                    {
                      "code": 200,
                      "response": {
                        "id": 83,
                        "owner": {
                          "id": 21,
                          "type": "staff"
                        },
                        "related": [],
                        "created": "2021-04-13T15:11:51+02:00",
                        "updated": "2021-04-13T15:11:51+02:00",
                        "description": "description updated !",
                        "parent_id": null,
                        "company_id": null,
                        "individual_id": null,
                        "contact_id": null
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": []
          }
        ]
      }
    },
    "/notifications": {
      "get": {
        "operationId": "get-notifications",
        "description": "Get notifications related to current user",
        "summary": "Get User Notifications",
        "tags": [
          "Notifications"
        ],
        "responses": {
          "200": {
            "description": "Notifications List Fetched",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Notification"
                      }
                    },
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  },
                  "required": [
                    "data",
                    "pagination"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "notifications.read"
            ]
          }
        ]
      }
    },
    "/notifications/search": {
      "post": {
        "operationId": "search-notifications",
        "description": "Search notifications related to current user",
        "summary": "Search User Notifications",
        "tags": [
          "Notifications"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/direction"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NotificationFilters"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Notifications List Fetched",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Notification"
                      }
                    },
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  },
                  "required": [
                    "data",
                    "pagination"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "notifications.read"
            ]
          }
        ]
      }
    },
    "/notifications/{id}": {
      "parameters": [
        {
          "schema": {
            "type": "integer"
          },
          "name": "id",
          "in": "path",
          "required": true,
          "description": "ID of notification"
        }
      ],
      "delete": {
        "operationId": "delete-notification",
        "description": "Delete a notification",
        "summary": "Delete notification",
        "tags": [
          "Notifications"
        ],
        "responses": {
          "204": {
            "description": "notification deleted"
          }
        },
        "security": [
          {
            "oauth2": [
              "notifications.write"
            ]
          }
        ]
      }
    },
    "/notifications/{id}/mark-as-read": {
      "parameters": [
        {
          "schema": {
            "type": "integer"
          },
          "name": "id",
          "in": "path",
          "required": true,
          "description": "ID of notification"
        }
      ],
      "patch": {
        "operationId": "mark-notification-as-read",
        "description": "Mark a notification as read or unread",
        "summary": "Mark notification as read",
        "tags": [
          "Notifications"
        ],
        "responses": {
          "204": {
            "description": "notification read status updated"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NotificationMarkAsRead"
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "notifications.write"
            ]
          }
        ]
      }
    },
    "/notifications/mark-all-as-read": {
      "patch": {
        "operationId": "mark-all-notifications-as-read",
        "description": "Mark all unread notifications as read",
        "summary": "Mark all unread notifications as read",
        "tags": [
          "Notifications"
        ],
        "responses": {
          "204": {
            "description": "notifications read status updated"
          }
        },
        "security": [
          {
            "oauth2": [
              "notifications.write"
            ]
          }
        ]
      }
    },
    "/notifications/settings": {
      "get": {
        "summary": "Get Notifications settings",
        "tags": [
          "Notifications"
        ],
        "description": "Get notifications settings",
        "operationId": "get-notifications-settings",
        "responses": {
          "200": {
            "description": "Notification settings response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationSettingsOutput"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "notifications.read"
            ]
          }
        ]
      },
      "put": {
        "summary": "Update Notifications settings",
        "tags": [
          "Notifications"
        ],
        "description": "Update notifications settings",
        "operationId": "put-notifications-settings",
        "responses": {
          "200": {
            "description": "Notification settings updated response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationSettingsOutput"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NotificationSettingsInput"
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "notifications.write"
            ]
          }
        ]
      }
    },
    "/invoices/{id}": {
      "parameters": [
        {
          "schema": {
            "type": "integer"
          },
          "name": "id",
          "in": "path",
          "required": true,
          "description": "Invoice ID"
        },
        {
          "$ref": "#/components/parameters/invoiceOneEmbed"
        }
      ],
      "get": {
        "operationId": "get-invoice",
        "summary": "Get invoice",
        "description": "Get an invoice by ID <div style=\"padding:17px; font-wright:bold; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;\"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>",
        "tags": [
          "Invoices"
        ],
        "responses": {
          "200": {
            "description": "Invoice fetched",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceOne"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "invoices.read"
            ]
          }
        ]
      }
    },
    "/invoices": {
      "get": {
        "summary": "Invoices List",
        "tags": [
          "Invoices"
        ],
        "description": "Get a list of invoices <div style=\"padding:17px; font-wright:bold; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;\"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>",
        "operationId": "get-invoices",
        "parameters": [
          {
            "$ref": "#/components/parameters/direction"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/invoiceEmbed"
          },
          {
            "$ref": "#/components/parameters/invoiceOrder"
          }
        ],
        "responses": {
          "200": {
            "description": "Invoices List Fetched",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Invoice"
                      }
                    }
                  },
                  "required": [
                    "pagination",
                    "data"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "invoices.read"
            ]
          }
        ]
      }
    },
    "/invoices/search": {
      "post": {
        "summary": "Search invoices",
        "tags": [
          "Invoices"
        ],
        "description": "Search invoices <div style=\"padding:17px; font-wright:bold; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;\"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>",
        "operationId": "search-invoices",
        "parameters": [
          {
            "$ref": "#/components/parameters/direction"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/invoiceEmbed"
          },
          {
            "$ref": "#/components/parameters/invoiceOrder"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "description": "Invoices filters",
                "$ref": "#/components/schemas/InvoiceFilters"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Invoices List Fetched",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Invoice"
                      }
                    }
                  },
                  "required": [
                    "pagination",
                    "data"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "invoices.read"
            ]
          }
        ]
      }
    },
    "/invoices/{id}/smart-tags": {
      "parameters": [
        {
          "schema": {
            "type": "integer"
          },
          "name": "id",
          "in": "path",
          "required": true,
          "description": "Invoice ID"
        }
      ],
      "get": {
        "summary": "Invoice smart-tags list",
        "description": "Get list of smart-tags for an invoice",
        "tags": [
          "Invoices"
        ],
        "operationId": "get-invoice-smart-tags",
        "responses": {
          "200": {
            "description": "Smart-tags list fetched",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    },
                    "data": {
                      "$ref": "#/paths/~1companies~1%7BcompanyId%7D~1smart-tags/get/responses/200/content/application~1json/schema/properties/data"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "invoices.read",
              "smart-tags.read"
            ]
          }
        ]
      }
    },
    "/credit-notes/{id}": {
      "parameters": [
        {
          "schema": {
            "type": "integer"
          },
          "name": "id",
          "in": "path",
          "required": true,
          "description": "Credit Note ID"
        },
        {
          "$ref": "#/components/parameters/creditNoteOneEmbed"
        }
      ],
      "get": {
        "operationId": "get-credit-note",
        "summary": "Get Credit Note",
        "description": "Get a credit note by ID <div style=\"padding:17px; font-wright:bold; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;\"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>",
        "tags": [
          "Credit Notes"
        ],
        "responses": {
          "200": {
            "description": "Credit note fetched",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreditNoteOne"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "credit-notes.read"
            ]
          }
        ]
      }
    },
    "/credit-notes": {
      "get": {
        "summary": "Credit Notes List",
        "tags": [
          "Credit Notes"
        ],
        "description": "Get a list of credit notes <div style=\"padding:17px; font-wright:bold; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;\"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>",
        "operationId": "get-credit-notes",
        "parameters": [
          {
            "$ref": "#/components/parameters/direction"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/creditNoteEmbed"
          },
          {
            "$ref": "#/components/parameters/creditNoteOrder"
          }
        ],
        "responses": {
          "200": {
            "description": "Credit Notes List Fetched",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/CreditNote"
                      }
                    }
                  },
                  "required": [
                    "pagination",
                    "data"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "credit-notes.read"
            ]
          }
        ]
      }
    },
    "/credit-notes/search": {
      "post": {
        "summary": "Search Credit Notes",
        "tags": [
          "Credit Notes"
        ],
        "description": "Search credit notes <div style=\"padding:17px; font-wright:bold; border-radius: 2px; margin-bottom: 4px; line-height: 1.5em; color: #9A7D36; background-color: #fff2cf; cursor: default;\"><b>This route is available in open beta.</b><br />Please note that its specifications are potentially subject to significant and breaking changes in the coming weeks.</div>",
        "operationId": "search-credit-notes",
        "parameters": [
          {
            "$ref": "#/components/parameters/direction"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/fields"
          },
          {
            "$ref": "#/components/parameters/creditNoteEmbed"
          },
          {
            "$ref": "#/components/parameters/creditNoteOrder"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Credit Notes filters",
                "$ref": "#/components/schemas/CreditNoteFilters"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Credit Notes List Fetched",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/CreditNote"
                      }
                    }
                  },
                  "required": [
                    "pagination",
                    "data"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "credit-notes.read"
            ]
          }
        ]
      }
    },
    "/credit-notes/{id}/smart-tags": {
      "parameters": [
        {
          "schema": {
            "type": "integer"
          },
          "name": "id",
          "in": "path",
          "required": true,
          "description": "Credit note ID"
        }
      ],
      "get": {
        "summary": "Credit note smart-tags list",
        "description": "Get list of smart-tags for a credit note",
        "tags": [
          "Credit Notes"
        ],
        "operationId": "get-credit-note-smart-tags",
        "responses": {
          "200": {
            "description": "Smart-tags list fetched",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    },
                    "data": {
                      "$ref": "#/paths/~1companies~1%7BcompanyId%7D~1smart-tags/get/responses/200/content/application~1json/schema/properties/data"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "credit-notes.read",
              "smart-tags.read"
            ]
          }
        ]
      }
    },
    "/credit-notes/{id}/custom-fields": {
      "parameters": [
        {
          "schema": {
            "type": "integer"
          },
          "name": "id",
          "in": "path",
          "required": true,
          "description": "Credit note id"
        }
      ],
      "get": {
        "summary": "Credit Note custom fields List",
        "description": "Get list of custom fields for a credit note",
        "tags": [
          "Credit Notes"
        ],
        "operationId": "get-credit-note-custom-fields",
        "responses": {
          "200": {
            "description": "List fetched",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/paths/~1companies~1%7Bid%7D~1custom-fields/get/responses/200/content/application~1json/schema/properties/data/items"
                      }
                    }
                  },
                  "required": [
                    "pagination",
                    "data"
                  ]
                }
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/paths/~1companies~1%7Bid%7D~1custom-fields/get/parameters/0"
          },
          {
            "$ref": "#/components/parameters/direction"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "security": [
          {
            "oauth2": [
              "credit-notes.read",
              "custom-fields.read"
            ]
          }
        ]
      }
    },
    "/settings/email": {
      "get": {
        "summary": "Get email settings",
        "tags": [
          "Emails"
        ],
        "description": "Get email settings",
        "operationId": "get-email-settings",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmailSettings"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "emails.settings"
            ]
          }
        ]
      },
      "put": {
        "summary": "Update email settings",
        "tags": [
          "Emails"
        ],
        "description": "Update email settings",
        "operationId": "put-email-settings",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmailSettings"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmailSettingsInput"
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "emails.settings"
            ]
          }
        ]
      }
    },
    "/settings/email/tags": {
      "get": {
        "summary": "Get available tags for email signature settings",
        "tags": [
          "Emails"
        ],
        "description": "Get available tags for email signature settings",
        "operationId": "get-email-signature-tags",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmailSignatureAvailableTags"
                }
              }
            }
          }
        },
        "security": [
          {
            "oauth2": [
              "emails.settings"
            ]
          }
        ]
      }
    },
    "/fiscal-years": {
      "get": {
        "summary": "Get fiscal years",
        "tags": [
          "Fiscal Year"
        ],
        "description": "Get list of fiscal years of account",
        "operationId": "get-fiscal-years",
        "responses": {
          "200": {
            "description": "List fetched",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/FiscalYear"
                      }
                    }
                  },
                  "required": [
                    "pagination",
                    "data"
                  ]
                }
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/direction"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/fields"
          }
        ],
        "security": [
          {
            "oauth2": [
              "accounts.read"
            ]
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "AccountDocumentCollection": {
        "title": "Account document collection",
        "type": "object",
        "properties": {
          "pagination": {
            "title": "pagination",
            "type": "object",
            "description": "The pagination",
            "properties": {
              "limit": {
                "type": "integer",
                "example": 25,
                "minimum": 0,
                "maximum": 100
              },
              "total": {
                "type": "integer",
                "example": 152,
                "minimum": 0
              },
              "count": {
                "type": "integer",
                "example": 25,
                "minimum": 0
              },
              "offset": {
                "anyOf": [
                  {
                    "type": "integer",
                    "minimum": 0,
                    "example": 25
                  },
                  {
                    "type": "string",
                    "example": "WzIwMTQtMDEtMDEsNTk4XQ=="
                  }
                ]
              }
            },
            "required": [
              "limit",
              "total",
              "count",
              "offset"
            ]
          },
          "data": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "type": "object",
                  "properties": {
                    "date": {
                      "description": "Date of the document",
                      "type": "string",
                      "format": "date"
                    },
                    "status": {
                      "description": "Status of the invoice and credit note",
                      "type": "string",
                      "readOnly": true,
                      "example": "draft",
                      "enum": [
                        "due",
                        "payinprogress",
                        "paid",
                        "late",
                        "stored",
                        "partialspend",
                        "spent",
                        "cancelled"
                      ]
                    },
                    "number": {
                      "type": "string",
                      "description": "Document number",
                      "example": "INV-20210611-0010"
                    },
                    "amount": {
                      "type": "string",
                      "description": "Total amount with taxes",
                      "example": "898.97"
                    },
                    "public_link": {
                      "description": "Public link of document",
                      "type": "string",
                      "nullable": true,
                      "readOnly": true
                    },
                    "pdf_link": {
                      "type": "string",
                      "format": "uri",
                      "readOnly": true,
                      "description": "Link to the pdf of document. /!\\ Link is regenerate after an update of document"
                    }
                  },
                  "required": [
                    "date",
                    "status",
                    "amount",
                    "public_link",
                    "pdf_link"
                  ]
                }
              ]
            }
          }
        },
        "required": [
          "pagination",
          "data"
        ]
      },
      "CommentItem": {
        "title": "CommentItem",
        "type": "object",
        "description": "Contains all properties + _embed for an Item endpoint",
        "allOf": [
          {
            "title": "CommentBaseItem",
            "type": "object",
            "description": "Contains all properties that are shared between an Item endpoint and a Collection Item endpoint, except _embed property",
            "properties": {
              "id": {
                "type": "integer",
                "description": "Internal Comment ID",
                "readOnly": true,
                "example": 1
              },
              "owner": {
                "type": "object",
                "description": "Owner of the comment",
                "properties": {
                  "id": {
                    "type": "integer",
                    "example": 123
                  },
                  "type": {
                    "type": "string",
                    "example": "staff",
                    "enum": [
                      "staff",
                      "contact"
                    ]
                  }
                }
              },
              "description": {
                "type": "string",
                "description": "Comment content"
              },
              "updated": {
                "type": "string",
                "description": "Modification date of the comment",
                "format": "date-time",
                "example": "1970-01-01T00:00:00+00:00"
              },
              "created": {
                "type": "string",
                "description": "Creation date of the comment",
                "format": "date-time",
                "example": "1970-01-01T00:00:00+00:00"
              },
              "parent_id": {
                "type": "integer",
                "description": "Comment parent ID",
                "nullable": true
              },
              "related": {
                "type": "array",
                "minItems": 0,
                "maxItems": 1,
                "description": "Main object related to the comment (limit to 1)",
                "items": {
                  "type": "object",
                  "additionalProperties": false,
                  "description": "Main object related to the comment",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "example": 1
                    },
                    "type": {
                      "type": "string",
                      "example": "opportunity",
                      "enum": [
                        "opportunity",
                        "company",
                        "individual",
                        "contact",
                        "item",
                        "estimate",
                        "creditnote",
                        "order",
                        "delivery",
                        "proforma",
                        "invoice",
                        "model",
                        "purchase-order",
                        "purchase-delivery",
                        "purchase-invoice",
                        "purchase-creditnote",
                        "redactor-template",
                        "redactor-document",
                        "campaign"
                      ]
                    }
                  }
                }
              },
              "company_id": {
                "type": "integer",
                "description": "Company linked to the comment",
                "example": 123,
                "nullable": true
              },
              "individual_id": {
                "type": "integer",
                "description": "Individual linked to the comment",
                "example": 123,
                "nullable": true
              },
              "contact_id": {
                "type": "integer",
                "description": "Contact linked to the comment",
                "example": 123,
                "nullable": true
              },
              "timetracking": {
                "nullable": true,
                "allOf": [
                  {
                    "title": "Timetracking",
                    "type": "object",
                    "description": "Timetracking details (requires the timetracking plugin)",
                    "properties": {
                      "duration": {
                        "description": "Timetracking duration in seconds",
                        "type": "integer",
                        "example": 3600,
                        "minimum": 1
                      },
                      "service": {
                        "description": "Timetracking service ID related",
                        "type": "integer",
                        "example": 6352439
                      },
                      "name": {
                        "description": "Timetracking service name",
                        "type": "string",
                        "nullable": true,
                        "example": "Service name"
                      }
                    }
                  }
                ]
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "_embed": {
                "allOf": [
                  {
                    "type": "object",
                    "readOnly": true,
                    "description": "Objects add to response. Use embed parameter",
                    "properties": {
                      "owner": {
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/Activity/properties/_embed/properties/author"
                          },
                          {
                            "type": "object",
                            "title": "Owner (staff) assigned to the comment"
                          }
                        ],
                        "nullable": true,
                        "title": "Owner (staff) assigned to the comment"
                      },
                      "related": {
                        "type": "array",
                        "minItems": 0,
                        "maxItems": 1,
                        "nullable": false,
                        "description": "Objects linked to the comment",
                        "items": {
                          "anyOf": [
                            {
                              "$ref": "#/components/schemas/SaleEmbed/properties/_embed/allOf/0/properties/company",
                              "title": "Company"
                            },
                            {
                              "$ref": "#/components/schemas/SaleEmbed/properties/_embed/allOf/0/properties/individual",
                              "title": "Individual"
                            },
                            {
                              "$ref": "#/components/schemas/ContactItem/allOf/0",
                              "title": "Contact"
                            },
                            {
                              "$ref": "#/components/schemas/Activity/properties/object/properties/model/oneOf/1",
                              "title": "Opportunity"
                            },
                            {
                              "$ref": "#/components/schemas/TaskItem/allOf/0",
                              "title": "Task"
                            }
                          ]
                        }
                      },
                      "company": {
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/SaleEmbed/properties/_embed/allOf/0/properties/company"
                          },
                          {
                            "type": "object",
                            "title": "Company linked to the comment"
                          }
                        ],
                        "nullable": true
                      },
                      "individual": {
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/SaleEmbed/properties/_embed/allOf/0/properties/individual"
                          },
                          {
                            "type": "object",
                            "title": "Individual linked to the comment"
                          }
                        ],
                        "nullable": true
                      },
                      "contact": {
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/ContactItem/allOf/0"
                          },
                          {
                            "type": "object",
                            "title": "Contact linked to the comment"
                          }
                        ],
                        "nullable": true
                      },
                      "acl": {
                        "allOf": [
                          {
                            "type": "object",
                            "description": "Comment ACL"
                          },
                          {
                            "$ref": "#/components/schemas/Activity/properties/_embed/properties/acl/oneOf/4"
                          }
                        ]
                      }
                    }
                  }
                ]
              }
            }
          }
        ]
      },
      "CommentFilters": {
        "title": "CommentFilters",
        "type": "object",
        "description": "The Comment filters",
        "properties": {
          "filters": {
            "type": "object",
            "properties": {
              "owners": {
                "title": "Owners",
                "type": "array",
                "items": {
                  "type": "integer",
                  "example": [
                    1,
                    2,
                    3
                  ]
                },
                "description": "Filter the comments list by owners"
              },
              "created": {
                "title": "Created at",
                "type": "object",
                "description": "Filter the comments list by creation date",
                "properties": {
                  "start": {
                    "type": "string",
                    "format": "date-time",
                    "example": "2021-01-01T00:00:00+01:00"
                  },
                  "end": {
                    "type": "string",
                    "format": "date-time",
                    "example": "2021-02-01T00:00:00+01:00"
                  }
                }
              },
              "updated": {
                "title": "Updated at",
                "type": "object",
                "description": "Filter the comments list by modification date",
                "properties": {
                  "start": {
                    "type": "string",
                    "format": "date-time",
                    "example": "2021-01-01T00:00:00+01:00"
                  },
                  "end": {
                    "type": "string",
                    "format": "date-time",
                    "example": "2021-02-01T00:00:00+01:00"
                  }
                }
              },
              "parent_id": {
                "title": "Parent ID",
                "type": "integer",
                "description": "Filter the comments list by parent ID",
                "example": 123
              },
              "related_objects": {
                "title": "Related Objects",
                "description": "Filter the comments list by related objects",
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "example": "opportunity"
                    },
                    "id": {
                      "type": "integer",
                      "example": 123
                    }
                  }
                }
              },
              "companies": {
                "title": "Companies",
                "type": "array",
                "description": "Filter the comments list by companies",
                "items": {
                  "type": "integer"
                }
              },
              "individuals": {
                "title": "Individuals",
                "type": "array",
                "description": "Filter the comments list by individuals",
                "items": {
                  "type": "integer"
                }
              },
              "contacts": {
                "title": "Contacts",
                "type": "array",
                "description": "Filter the comments list by contacts",
                "items": {
                  "type": "integer"
                }
              }
            }
          }
        },
        "required": [
          "filters"
        ]
      },
      "CommentCreateItem": {
        "title": "Comment",
        "type": "object",
        "description": "Comment creation object",
        "x-examples": {},
        "additionalProperties": false,
        "allOf": [
          {
            "title": "Comment",
            "type": "object",
            "description": "Comment update object",
            "x-examples": {},
            "properties": {
              "description": {
                "type": "string",
                "example": "Lorem ipsum dolor sit amet, consectetur adipiscing elit.",
                "description": "Comment content",
                "nullable": false
              },
              "timetracking": {
                "description": "if null provided, it'll delete existing timetracking entry for existing comment",
                "nullable": true,
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CommentUpdateItem/properties/timetracking/allOf/0"
                  }
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "description"
            ]
          },
          {
            "type": "object",
            "properties": {
              "related": {
                "type": "array",
                "minItems": 1,
                "maxItems": 1,
                "description": "Main object related to the comment (limit to 1)",
                "items": {
                  "type": "object",
                  "additionalProperties": false,
                  "description": "Main object related to the comment",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "example": 1
                    },
                    "type": {
                      "type": "string",
                      "example": "opportunity",
                      "enum": [
                        "opportunity",
                        "company",
                        "individual",
                        "contact",
                        "item",
                        "estimate",
                        "creditnote",
                        "order",
                        "delivery",
                        "proforma",
                        "invoice",
                        "model",
                        "purchase-order",
                        "purchase-delivery",
                        "purchase-invoice",
                        "purchase-creditnote",
                        "redactor-template",
                        "redactor-document",
                        "campaign"
                      ]
                    }
                  }
                }
              },
              "parent_id": {
                "type": "integer",
                "description": "Comment parent ID"
              },
              "mentioned_staff_ids": {
                "type": "array",
                "description": "Ids of staffs mentioned in the comment",
                "uniqueItems": true,
                "nullable": true,
                "items": {
                  "type": "integer",
                  "example": 12329
                }
              },
              "created": {
                "description": "Date of creation of the comment",
                "type": "string",
                "format": "date-time"
              }
            }
          }
        ]
      },
      "CommentUpdateItem": {
        "title": "Comment",
        "type": "object",
        "description": "Comment update object",
        "x-examples": {},
        "properties": {
          "description": {
            "type": "string",
            "example": "Lorem ipsum dolor sit amet, consectetur adipiscing elit.",
            "description": "Comment content",
            "nullable": false
          },
          "timetracking": {
            "description": "if null provided, it'll delete existing timetracking entry for existing comment",
            "nullable": true,
            "allOf": [
              {
                "title": "Timetracking",
                "type": "object",
                "required": [
                  "service",
                  "duration"
                ],
                "description": "Timetracking details (requires the timetracking plugin)",
                "properties": {
                  "duration": {
                    "description": "Timetracking duration in seconds",
                    "type": "integer",
                    "example": 3600,
                    "minimum": 1
                  },
                  "service": {
                    "description": "Timetracking service ID related",
                    "type": "integer",
                    "example": 6352439
                  }
                }
              }
            ]
          }
        }
      },
      "ContactItem": {
        "title": "Contact",
        "allOf": [
          {
            "title": "Contact",
            "type": "object",
            "description": "",
            "x-examples": {},
            "properties": {
              "id": {
                "type": "integer",
                "readOnly": true,
                "description": "Unique ID",
                "example": 6657
              },
              "civility": {
                "type": "string",
                "description": "Civility of staff",
                "example": "mrs",
                "nullable": true,
                "enum": [
                  "mr",
                  "mrs",
                  "ms"
                ]
              },
              "first_name": {
                "type": "string",
                "description": "Contact first name",
                "example": "John",
                "nullable": true
              },
              "last_name": {
                "type": "string",
                "description": "Contact name",
                "example": "Doe",
                "maxLength": 200,
                "nullable": true
              },
              "email": {
                "description": "Contact email",
                "type": "string",
                "format": "email",
                "example": "john.doe@example-company.com",
                "nullable": true
              },
              "website": {
                "type": "string",
                "format": "url",
                "description": "Contact website",
                "example": "http://example-john-doe.com",
                "nullable": true
              },
              "phone_number": {
                "type": "string",
                "description": "Contact phone number",
                "example": "+33100000000",
                "nullable": true
              },
              "mobile_number": {
                "type": "string",
                "description": "Contact mobile number",
                "example": "+33600000000",
                "nullable": true
              },
              "fax_number": {
                "type": "string",
                "description": "Contact Fax number",
                "example": "+33100000000",
                "nullable": true
              },
              "position": {
                "type": "string",
                "nullable": true,
                "description": "Contact job",
                "example": "Financial"
              },
              "birth_date": {
                "type": "string",
                "description": "Contact birth date",
                "example": "2000-05-29",
                "nullable": true
              },
              "avatar": {
                "type": "string",
                "format": "url",
                "description": "Contact avatar",
                "example": "http://example-john-doe.com/avatar",
                "nullable": true
              },
              "note": {
                "type": "string",
                "description": "Note on contact",
                "example": "An handed-written note describing this contact"
              },
              "invoicing_address_id": {
                "description": "Invoicing address unique ID",
                "type": "integer",
                "nullable": true,
                "minimum": 1,
                "example": 9987,
                "readOnly": true
              },
              "delivery_address_id": {
                "description": "Delivery address unique ID",
                "type": "integer",
                "nullable": true,
                "minimum": 1,
                "example": 6547,
                "readOnly": true
              },
              "social": {
                "allOf": [
                  {
                    "$ref": "#/paths/~1companies/post/requestBody/content/application~1json/schema/properties/social"
                  }
                ]
              },
              "sync": {
                "type": "object",
                "properties": {
                  "mailchimp": {
                    "type": "boolean",
                    "description": "Activate the mailchimp synchronization",
                    "nullable": false
                  },
                  "mailjet": {
                    "type": "boolean",
                    "description": "Activate the mailjet synchronization",
                    "nullable": false
                  },
                  "simplemail": {
                    "type": "boolean",
                    "description": "Activate the simplemail synchronization",
                    "nullable": false
                  }
                }
              },
              "owner": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/StaffAutocompleteResultItem/properties/owner/allOf/0"
                  }
                ],
                "readOnly": true
              },
              "created": {
                "type": "string",
                "nullable": false,
                "description": "Datetime of creating contact",
                "example": "2020-05-29T11:22:03+02:00",
                "readOnly": true
              },
              "updated": {
                "type": "string",
                "nullable": false,
                "description": "Datetime of updating contact",
                "example": "2020-05-29T11:22:03+02:00",
                "readOnly": true
              },
              "is_archived": {
                "type": "boolean",
                "nullable": false,
                "description": "Status archived or not",
                "example": false
              },
              "marketing_campaigns_subscriptions": {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "sms",
                    "phone",
                    "email",
                    "postal_mail",
                    "custom"
                  ]
                },
                "description": "list of campaign type subcribed",
                "uniqueItems": true
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "_embed": {
                "allOf": [
                  {
                    "title": "itemEmbed.yaml",
                    "allOf": [
                      {
                        "readOnly": true,
                        "description": "Objects add to response. Use embed parameter",
                        "allOf": [
                          {
                            "type": "object",
                            "properties": {
                              "invoicing_address": {
                                "nullable": true,
                                "description": "Invoicing address",
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/SaleEmbed/properties/_embed/allOf/0/properties/invoicing_address"
                                  }
                                ]
                              },
                              "delivery_address": {
                                "nullable": true,
                                "description": "Delivery address",
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/SaleEmbed/properties/_embed/allOf/0/properties/invoicing_address"
                                  }
                                ]
                              },
                              "opportunities": {
                                "nullable": true,
                                "type": "integer",
                                "description": "Count of opportunities",
                                "example": 2
                              },
                              "estimates": {
                                "nullable": true,
                                "type": "integer",
                                "description": "Count of estimates",
                                "example": 2
                              },
                              "invoices": {
                                "nullable": true,
                                "type": "integer",
                                "description": "Count of invoices",
                                "example": 2
                              },
                              "orders": {
                                "nullable": true,
                                "type": "integer",
                                "description": "Count of orders",
                                "example": 2
                              },
                              "deliveries": {
                                "nullable": true,
                                "type": "integer",
                                "description": "Count of deliveries",
                                "example": 2
                              },
                              "smart_tags": {
                                "nullable": true,
                                "description": "Smart-tags linked",
                                "allOf": [
                                  {
                                    "$ref": "#/components/schemas/SaleEmbed/properties/_embed/allOf/0/properties/smart_tags/allOf/0"
                                  }
                                ]
                              }
                            }
                          },
                          {
                            "$ref": "#/components/schemas/SaleEmbed/properties/_embed/allOf/1"
                          }
                        ]
                      },
                      {
                        "type": "object",
                        "properties": {
                          "acl": {
                            "nullable": true,
                            "description": "Contact ACL",
                            "allOf": [
                              {
                                "$ref": "#/components/schemas/Activity/properties/_embed/properties/acl/oneOf/1"
                              }
                            ]
                          }
                        }
                      }
                    ]
                  }
                ]
              }
            }
          }
        ]
      },
      "ContactCollectionItem": {
        "title": "ContactCollectionItem.yaml",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ContactItem/allOf/0"
          },
          {
            "type": "object",
            "properties": {
              "_embed": {
                "allOf": [
                  {
                    "title": "collectionItemEmbed.yaml",
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ContactItem/allOf/1/properties/_embed/allOf/0/allOf/0"
                      }
                    ]
                  }
                ]
              }
            }
          }
        ]
      },
      "ContactCreateItem": {
        "title": "contactCreateItem.yaml",
        "allOf": [
          {
            "title": "Contact",
            "allOf": [
              {
                "$ref": "#/components/schemas/ContactItem/allOf/0"
              },
              {
                "type": "object",
                "properties": {
                  "_embed": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/ContactItem/allOf/1/properties/_embed/allOf/0"
                      }
                    ]
                  }
                }
              }
            ]
          },
          {
            "type": "object",
            "properties": {
              "last_name": {
                "type": "string",
                "description": "Contact name",
                "example": "Doe",
                "maxLength": 200
              }
            },
            "required": [
              "last_name"
            ]
          }
        ]
      },
      "ContactUpdateItem": {
        "title": "updateItem.yaml",
        "allOf": [
          {
            "$ref": "#/components/schemas/ContactCreateItem/allOf/0"
          },
          {
            "type": "object",
            "properties": {
              "last_name": {
                "type": "string",
                "description": "Contact name",
                "example": "Doe",
                "maxLength": 200
              }
            }
          }
        ]
      },
      "ContactFilters": {
        "title": "contactFilters",
        "type": "object",
        "description": "The contact filters",
        "properties": {
          "filters": {
            "type": "object",
            "description": "contact filters",
            "properties": {
              "companies": {
                "title": "Companies",
                "type": "array",
                "items": {
                  "type": "integer"
                },
                "description": "Filter the contacts list by companies ID",
                "example": [
                  12,
                  22
                ]
              },
              "individuals": {
                "title": "Individuals",
                "type": "array",
                "items": {
                  "type": "integer"
                },
                "description": "Filter the contacts list by individuals ID",
                "example": [
                  12,
                  22
                ]
              },
              "created": {
                "title": "Created at",
                "type": "object",
                "description": "Filter the contact list by creation date",
                "properties": {
                  "start": {
                    "type": "string",
                    "format": "date-time",
                    "example": "2020-01-01T00:00:00+01:00"
                  },
                  "end": {
                    "type": "string",
                    "format": "date-time",
                    "example": "2020-02-01T00:00:00+01:00"
                  }
                }
              },
              "updated": {
                "title": "Updated at",
                "type": "object",
                "description": "Filter the contact list by last update date",
                "properties": {
                  "start": {
                    "type": "string",
                    "format": "date-time",
                    "example": "2020-01-01T00:00:00+01:00"
                  },
                  "end": {
                    "type": "string",
                    "format": "date-time",
                    "example": "2020-02-01T00:00:00+01:00"
                  }
                }
              },
              "last_name": {
                "title": "Lastname",
                "type": "string",
                "description": "Filter the contact list by lastname (exact search)",
                "example": "John Doe"
              },
              "birth_date": {
                "title": "Birth date",
                "type": "object",
                "description": "Filter the contact list by birth date-time",
                "properties": {
                  "start": {
                    "type": "string",
                    "format": "date",
                    "example": "2020-01-01"
                  },
                  "end": {
                    "type": "string",
                    "format": "date",
                    "example": "2020-02-01"
                  }
                }
              },
              "email": {
                "title": "Email",
                "type": "string",
                "description": "Filter the contact list by email (exact search)",
                "example": "john.doe@example.com"
              },
              "phone_number": {
                "title": "Phone number",
                "type": "string",
                "description": "Filter the contact list by phone number (exact search)",
                "example": "+33100000000"
              },
              "mobile_phone": {
                "title": "Mobile phone",
                "type": "string",
                "description": "Filter contact list by mobile number (exact search)",
                "example": "+33100000000"
              },
              "id": {
                "title": "Contacts",
                "type": "array",
                "items": {
                  "type": "integer"
                },
                "description": "Filter the contacts list by contacts ID",
                "example": [
                  12,
                  22
                ]
              }
            }
          }
        },
        "required": [
          "filters"
        ]
      },
      "Estimate": {
        "title": "Estimate",
        "allOf": [
          {
            "type": "object",
            "properties": {
              "date": {
                "description": "Date of the estimate",
                "type": "string",
                "format": "date"
              },
              "related": {
                "type": "array",
                "minItems": 1,
                "description": "Objects linked to the estimate : \n  - For Company & Individual, only `prospect` type is allowed\n",
                "items": {
                  "type": "object",
                  "description": "Object linked to the estimate (at least a Company or an Individual)",
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": [
                        "company",
                        "individual",
                        "opportunity"
                      ]
                    },
                    "id": {
                      "type": "integer"
                    }
                  },
                  "required": [
                    "type",
                    "id"
                  ]
                }
              },
              "contact_id": {
                "description": "Contact of company linked to the estimate",
                "type": "integer",
                "nullable": true
              },
              "assigned_staff_id": {
                "description": "Staff in charge of the estimate",
                "type": "integer"
              },
              "status": {
                "description": "Status of the estimate (draft if not provided at the creation)",
                "type": "string",
                "readOnly": true,
                "example": "draft",
                "enum": [
                  "draft",
                  "sent",
                  "read",
                  "accepted",
                  "refused",
                  "expired",
                  "advanced",
                  "partialinvoiced",
                  "invoiced",
                  "cancelled"
                ]
              },
              "number": {
                "type": "string",
                "description": "Estimate number",
                "example": "EST-20210611-0010"
              },
              "amounts": {
                "description": "Amounts of estimate with and without taxe",
                "type": "object",
                "readOnly": true,
                "properties": {
                  "shipping": {
                    "type": "string",
                    "description": "Total shipping amount",
                    "example": "128.54"
                  },
                  "packaging": {
                    "type": "string",
                    "description": "Total packaging amount",
                    "example": "40.24"
                  },
                  "total_raw_excl_tax": {
                    "type": "string",
                    "description": "Total without tax and without global discount",
                    "example": "933.07"
                  },
                  "total_after_discount_excl_tax": {
                    "type": "string",
                    "description": "Total without tax and after discount applied",
                    "example": "821.10"
                  },
                  "total_excl_tax": {
                    "description": "Total net without tax",
                    "type": "string",
                    "example": "843.10"
                  },
                  "total": {
                    "type": "string",
                    "description": "Total amount with taxes",
                    "example": "898.97"
                  }
                },
                "required": [
                  "shipping",
                  "packaging",
                  "total_raw_excl_tax",
                  "total_after_discount_excl_tax",
                  "total_excl_tax",
                  "total"
                ]
              },
              "currency": {
                "description": "Currency code of estimate",
                "type": "string"
              },
              "subject": {
                "description": "Subject of estimate",
                "type": "string"
              },
              "public_link": {
                "description": "Public link of estimate",
                "type": "string",
                "nullable": true,
                "readOnly": true
              },
              "public_link_enabled": {
                "type": "boolean",
                "description": "Public link is enabled"
              },
              "payment_method_ids": {
                "type": "array",
                "description": "payments methods allowed on the estimate",
                "nullable": true,
                "items": {
                  "type": "integer"
                }
              },
              "decimal_number": {
                "readOnly": true,
                "type": "object",
                "description": "Precision for decimal numbers",
                "properties": {
                  "unit_price": {
                    "type": "integer",
                    "nullable": true,
                    "description": "Precision of unit price"
                  },
                  "quantity": {
                    "type": "integer",
                    "nullable": true,
                    "description": "Precision of quantity"
                  },
                  "main": {
                    "type": "integer",
                    "description": "Main precision of estimate. Could be overrided for unit_price/quantity"
                  }
                }
              },
              "pdf_link": {
                "type": "string",
                "format": "uri",
                "readOnly": true,
                "description": "Link to the pdf of estimate. /!\\ Link is regenerate after an update of estimate"
              },
              "expiry_date": {
                "description": "Expiry date of the estimate",
                "type": "string",
                "format": "date"
              },
              "taxes": {
                "description": "List of taxes used on the estimate",
                "type": "array",
                "items": {
                  "type": "object",
                  "description": "Tax used",
                  "properties": {
                    "label": {
                      "type": "string"
                    },
                    "id": {
                      "type": "integer"
                    },
                    "rate": {
                      "type": "string"
                    },
                    "amount": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "label",
                    "id",
                    "rate",
                    "amount"
                  ]
                }
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "readOnly": true,
                "description": "Document ID",
                "example": 6657
              },
              "owner": {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string"
                  },
                  "id": {
                    "type": "integer"
                  }
                },
                "required": [
                  "type",
                  "id"
                ]
              },
              "created": {
                "type": "string",
                "description": "Date of creation of document",
                "format": "date-time",
                "readOnly": true
              },
              "discount": {
                "description": "Global discount applied on the document",
                "nullable": true,
                "type": "object",
                "properties": {
                  "percent": {
                    "type": "string",
                    "description": "Percentage of the discount",
                    "example": "12.00"
                  },
                  "amount": {
                    "type": "string",
                    "description": "Amount of the discount",
                    "example": "111.97"
                  },
                  "type": {
                    "type": "string",
                    "description": "Type of the global discount as defined on the document",
                    "enum": [
                      "amount",
                      "percent"
                    ]
                  }
                }
              },
              "fiscal_year_id": {
                "type": "integer",
                "nullable": true,
                "description": "ID of the estimate's fiscal year"
              },
              "invoicing_address_id": {
                "description": "Invoicing address, by default take invoicing address of company/individual.",
                "type": "integer",
                "readOnly": true
              },
              "delivery_address_id": {
                "type": "integer",
                "description": "Shipping address, by default take shipping address of company/individual.",
                "readOnly": true
              }
            },
            "required": [
              "id",
              "owner",
              "created",
              "date",
              "related",
              "contact_id",
              "invoicing_address_id",
              "delivery_address_id",
              "assigned_staff_id",
              "status",
              "number",
              "amounts",
              "currency",
              "subject",
              "public_link",
              "public_link_enabled",
              "payment_method_ids",
              "taxes",
              "fiscal_year_id"
            ]
          }
        ]
      },
      "EstimateCreate": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Estimate/allOf/0"
          },
          {
            "type": "object",
            "properties": {
              "owner_id": {
                "type": "integer",
                "description": "Owner of the estimate (staff id)"
              },
              "rows": {
                "type": "array",
                "description": "Document's rows",
                "nullable": true,
                "maxItems": 100,
                "items": {
                  "type": "object",
                  "oneOf": [
                    {
                      "title": "Single Row",
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "id": {
                          "type": "integer",
                          "description": "Row Identifier",
                          "readOnly": true
                        },
                        "type": {
                          "type": "string",
                          "enum": [
                            "single"
                          ]
                        },
                        "unit_id": {
                          "type": "integer",
                          "description": "Id of unit of measurement of quantity"
                        },
                        "purchase_amount": {
                          "type": "string",
                          "description": "Purchase amount"
                        },
                        "unit_amount": {
                          "description": "Unit amount without tax.",
                          "type": "string",
                          "example": "22.20"
                        },
                        "tax_id": {
                          "type": "integer",
                          "description": "Tax identifier",
                          "example": 12
                        },
                        "quantity": {
                          "type": "string",
                          "description": "Quantity",
                          "example": "7.2"
                        },
                        "reference": {
                          "type": "string",
                          "description": "Row reference",
                          "example": "MB880174910"
                        },
                        "description": {
                          "type": "string",
                          "nullable": true,
                          "description": "Row description",
                          "example": "Aluminium rail 4x3m"
                        },
                        "discount": {
                          "type": "object",
                          "nullable": true,
                          "description": "Discount applied on the row",
                          "properties": {
                            "type": {
                              "type": "string",
                              "description": "Type of the discount. Express her in percentage or with an amount",
                              "enum": [
                                "percent",
                                "amount"
                              ],
                              "example": "amount"
                            },
                            "value": {
                              "oneOf": [
                                {
                                  "type": "string",
                                  "description": "value of discount (Expressed in amount or percent depending choosen type)",
                                  "example": "20.5"
                                }
                              ]
                            },
                            "total": {
                              "type": "string",
                              "description": "Total of all discount for this row",
                              "example": "400",
                              "readOnly": true
                            }
                          }
                        },
                        "tax_rate": {
                          "type": "string",
                          "description": "Tax rate",
                          "readOnly": true,
                          "example": "20.00"
                        },
                        "tax_amount": {
                          "type": "string",
                          "description": "Tax amount",
                          "readOnly": true,
                          "example": "23.44"
                        },
                        "tax_label": {
                          "type": "string",
                          "description": "Tax label",
                          "readOnly": true,
                          "example": "tva"
                        },
                        "amount_tax_inc": {
                          "type": "string",
                          "description": "total amount of row tax included",
                          "readOnly": true,
                          "example": "1229.93"
                        },
                        "amount_tax_exc": {
                          "type": "string",
                          "description": "total amount of row without tax",
                          "readOnly": true,
                          "example": "445.33"
                        },
                        "accounting_code_id": {
                          "type": "integer",
                          "description": "Accouting code id of row",
                          "example": 7576
                        },
                        "analytic_code": {
                          "type": "string",
                          "nullable": true,
                          "description": "Analytic code of row",
                          "example": "divers"
                        }
                      },
                      "required": [
                        "quantity",
                        "unit_amount",
                        "type"
                      ]
                    },
                    {
                      "title": "Shipping/Packaging Row",
                      "description": "By default take value of related item",
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "id": {
                          "type": "integer",
                          "description": "Row Identifier",
                          "readOnly": true
                        },
                        "type": {
                          "type": "string",
                          "enum": [
                            "shipping",
                            "packaging"
                          ]
                        },
                        "related": {
                          "type": "object",
                          "description": "Related shipping or packaging",
                          "properties": {
                            "id": {
                              "type": "integer",
                              "description": "item identifier"
                            },
                            "type": {
                              "type": "string",
                              "description": "Type of item",
                              "enum": [
                                "shipping",
                                "packaging"
                              ]
                            }
                          }
                        },
                        "unit_amount": {
                          "description": "Unit amount without tax.",
                          "type": "string",
                          "example": "90.22"
                        },
                        "tax_id": {
                          "type": "integer",
                          "description": "Tax identifier",
                          "example": 12
                        },
                        "quantity": {
                          "type": "string",
                          "description": "Quantity",
                          "example": "7.2"
                        },
                        "reference": {
                          "type": "string",
                          "description": "Row reference",
                          "example": "MB880174910"
                        },
                        "description": {
                          "type": "string",
                          "nullable": true,
                          "description": "Row description",
                          "example": "Aluminium rail 4x3m"
                        },
                        "discount": {
                          "type": "object",
                          "nullable": true,
                          "description": "Discount applied on the row",
                          "properties": {
                            "type": {
                              "type": "string",
                              "description": "Type of the discount. Express her in percentage or with an amount",
                              "enum": [
                                "percent",
                                "amount"
                              ],
                              "example": "amount"
                            },
                            "value": {
                              "oneOf": [
                                {
                                  "type": "string",
                                  "description": "value of discount (Expressed in amount or percent depending choosen type)",
                                  "example": "20.5"
                                }
                              ]
                            },
                            "total": {
                              "type": "string",
                              "description": "Total of all discount for this row",
                              "example": "400",
                              "readOnly": true
                            }
                          }
                        },
                        "accounting_code_id": {
                          "type": "integer",
                          "description": "Accouting code id of row",
                          "example": 7576
                        },
                        "analytic_code": {
                          "type": "string",
                          "nullable": true,
                          "description": "Analytic code of row",
                          "example": "divers"
                        },
                        "tax_rate": {
                          "type": "string",
                          "description": "Tax rate",
                          "readOnly": true,
                          "example": "20.00"
                        },
                        "tax_amount": {
                          "type": "string",
                          "description": "Tax amount",
                          "readOnly": true,
                          "example": "23.44"
                        },
                        "tax_label": {
                          "type": "string",
                          "description": "Tax label",
                          "readOnly": true,
                          "example": "tva"
                        },
                        "amount_tax_inc": {
                          "type": "string",
                          "description": "total amount of row tax included",
                          "readOnly": true,
                          "example": "1229.93"
                        },
                        "amount_tax_exc": {
                          "type": "string",
                          "description": "total amount of row without tax",
                          "readOnly": true,
                          "example": "445.33"
                        }
                      },
                      "required": [
                        "related",
                        "quantity",
                        "type"
                      ]
                    },
                    {
                      "title": "Catalog Item Row",
                      "description": "By default take value of related item",
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "id": {
                          "type": "integer",
                          "description": "Row Identifier",
                          "readOnly": true
                        },
                        "type": {
                          "type": "string",
                          "enum": [
                            "catalog"
                          ]
                        },
                        "related": {
                          "type": "object",
                          "description": "Related product or service",
                          "properties": {
                            "id": {
                              "type": "integer",
                              "description": "item identifier"
                            },
                            "type": {
                              "type": "string",
                              "description": "Type of item",
                              "enum": [
                                "product",
                                "service"
                              ]
                            },
                            "declination_id": {
                              "type": "integer",
                              "description": "declination identifier",
                              "nullable": true
                            }
                          }
                        },
                        "unit_amount": {
                          "description": "Unit amount",
                          "type": "string",
                          "example": "29.28"
                        },
                        "eco_tax": {
                          "type": "object",
                          "nullable": true,
                          "description": "Eco tax applied on the row",
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "inc",
                                "excl"
                              ]
                            },
                            "value": {
                              "type": "string",
                              "example": "22.44"
                            }
                          }
                        },
                        "purchase_amount": {
                          "type": "string",
                          "description": "Purchase amount"
                        },
                        "unit_id": {
                          "type": "integer",
                          "description": "Id of unit of measurement of quantity"
                        },
                        "warehouse_id": {
                          "type": "integer",
                          "nullable": true,
                          "description": "Warehouse identifier"
                        },
                        "sku_id": {
                          "nullable": true,
                          "type": "integer",
                          "description": "Stock keeping unit"
                        },
                        "tax_id": {
                          "type": "integer",
                          "description": "Tax identifier",
                          "example": 12
                        },
                        "quantity": {
                          "type": "string",
                          "description": "Quantity",
                          "example": "7.2"
                        },
                        "reference": {
                          "type": "string",
                          "description": "Row reference",
                          "example": "MB880174910"
                        },
                        "description": {
                          "type": "string",
                          "nullable": true,
                          "description": "Row description",
                          "example": "Aluminium rail 4x3m"
                        },
                        "discount": {
                          "type": "object",
                          "nullable": true,
                          "description": "Discount applied on the row",
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "percent",
                                "amount"
                              ],
                              "example": "amount"
                            },
                            "value": {
                              "oneOf": [
                                {
                                  "type": "string",
                                  "description": "value of discount",
                                  "example": "25.20"
                                }
                              ]
                            },
                            "total": {
                              "type": "string",
                              "description": "Total of all discount for this row",
                              "example": "400",
                              "readOnly": true
                            }
                          }
                        },
                        "tax_rate": {
                          "type": "string",
                          "description": "Tax rate",
                          "readOnly": true,
                          "example": "20.00"
                        },
                        "tax_amount": {
                          "type": "string",
                          "description": "Tax amount",
                          "readOnly": true,
                          "example": "23.44"
                        },
                        "tax_label": {
                          "type": "string",
                          "description": "Tax label",
                          "readOnly": true,
                          "example": "tva"
                        },
                        "amount_tax_inc": {
                          "type": "string",
                          "description": "total amount of row tax included",
                          "readOnly": true,
                          "example": "1229.93"
                        },
                        "amount_tax_exc": {
                          "type": "string",
                          "description": "total amount of row without tax",
                          "readOnly": true,
                          "example": "445.33"
                        },
                        "accounting_code_id": {
                          "type": "integer",
                          "description": "Accouting code id of row",
                          "example": 7576
                        },
                        "analytic_code": {
                          "type": "string",
                          "nullable": true,
                          "description": "Analytic code of row",
                          "example": "divers"
                        }
                      },
                      "required": [
                        "related",
                        "quantity",
                        "type"
                      ]
                    },
                    {
                      "type": "object",
                      "title": "Comment Row",
                      "additionalProperties": false,
                      "properties": {
                        "id": {
                          "type": "integer",
                          "description": "Row Identifier",
                          "readOnly": true
                        },
                        "type": {
                          "type": "string",
                          "enum": [
                            "comment"
                          ]
                        },
                        "text": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "text",
                        "type"
                      ]
                    },
                    {
                      "type": "object",
                      "title": "Title Row",
                      "additionalProperties": false,
                      "properties": {
                        "id": {
                          "type": "integer",
                          "description": "Row Identifier",
                          "readOnly": true
                        },
                        "type": {
                          "type": "string",
                          "enum": [
                            "title"
                          ]
                        },
                        "text": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "text",
                        "type"
                      ]
                    },
                    {
                      "type": "object",
                      "title": "Sub Total Row",
                      "additionalProperties": false,
                      "properties": {
                        "id": {
                          "type": "integer",
                          "description": "Row Identifier",
                          "readOnly": true
                        },
                        "type": {
                          "type": "string",
                          "enum": [
                            "sub-total"
                          ]
                        },
                        "amount": {
                          "type": "string",
                          "readOnly": true,
                          "description": "Amount of the sub-total"
                        }
                      },
                      "required": [
                        "type"
                      ]
                    },
                    {
                      "type": "object",
                      "title": "Break Line Row",
                      "additionalProperties": false,
                      "properties": {
                        "id": {
                          "type": "integer",
                          "description": "Row Identifier",
                          "readOnly": true
                        },
                        "type": {
                          "type": "string",
                          "enum": [
                            "break-line"
                          ]
                        }
                      },
                      "required": [
                        "type"
                      ]
                    },
                    {
                      "type": "object",
                      "title": "Break Page Row",
                      "additionalProperties": false,
                      "properties": {
                        "id": {
                          "type": "integer",
                          "description": "Row Identifier",
                          "readOnly": true
                        },
                        "type": {
                          "type": "string",
                          "enum": [
                            "break-page"
                          ]
                        }
                      },
                      "required": [
                        "type"
                      ]
                    }
                  ]
                }
              },
              "discount": {
                "type": "object",
                "description": "Global discount applied on the estimate",
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "percent",
                      "amount"
                    ],
                    "example": "amount"
                  },
                  "value": {
                    "type": "string",
                    "description": "value of discount",
                    "example": "25.20"
                  }
                }
              }
            },
            "required": [
              "related"
            ]
          }
        ]
      },
      "EstimateUpdate": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Estimate/allOf/0"
          },
          {
            "type": "object",
            "properties": {
              "rows": {
                "type": "array",
                "nullable": true,
                "items": {
                  "type": "object",
                  "anyOf": [
                    {
                      "type": "object",
                      "title": "New Single Row",
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/EstimateCreate/allOf/1/properties/rows/items/oneOf/0"
                        }
                      ]
                    },
                    {
                      "type": "object",
                      "title": "New Packaging/Shipping Row",
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/EstimateCreate/allOf/1/properties/rows/items/oneOf/1"
                        }
                      ]
                    },
                    {
                      "type": "object",
                      "title": "New Catalog Item Row",
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/EstimateCreate/allOf/1/properties/rows/items/oneOf/2"
                        }
                      ]
                    },
                    {
                      "type": "object",
                      "title": "New Comment Row",
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/EstimateCreate/allOf/1/properties/rows/items/oneOf/3"
                        }
                      ]
                    },
                    {
                      "type": "object",
                      "title": "New Title Row",
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/EstimateCreate/allOf/1/properties/rows/items/oneOf/4"
                        }
                      ]
                    },
                    {
                      "type": "object",
                      "title": "New Sub-Total Row",
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/EstimateCreate/allOf/1/properties/rows/items/oneOf/5"
                        }
                      ]
                    },
                    {
                      "type": "object",
                      "title": "New Break Line Row",
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/EstimateCreate/allOf/1/properties/rows/items/oneOf/6"
                        }
                      ]
                    },
                    {
                      "type": "object",
                      "title": "New Break Page Row",
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/EstimateCreate/allOf/1/properties/rows/items/oneOf/7"
                        }
                      ]
                    },
                    {
                      "title": "Update Single Row",
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "id": {
                          "type": "integer",
                          "description": "Row Identifier"
                        },
                        "unit": {
                          "type": "integer",
                          "description": "Id of unit of measurement of quantity"
                        },
                        "purchase_amount": {
                          "type": "string",
                          "description": "Purchase amount"
                        },
                        "unit_amount": {
                          "description": "Unit amount without tax.",
                          "type": "string",
                          "example": "22.20"
                        },
                        "tax_id": {
                          "type": "integer",
                          "description": "Tax identifier",
                          "example": 12
                        },
                        "tax": {
                          "deprecated": true,
                          "type": "integer",
                          "description": "Tax identifier. This field will be removed on 1 July 2022, use tax_id instead",
                          "example": 12
                        },
                        "quantity": {
                          "type": "string",
                          "description": "Quantity",
                          "example": 7
                        },
                        "reference": {
                          "type": "string",
                          "description": "Row reference",
                          "example": "MB880174910"
                        },
                        "description": {
                          "type": "string",
                          "nullable": true,
                          "description": "Row description",
                          "example": "Aluminium rail 4x3m"
                        },
                        "discount": {
                          "type": "object",
                          "nullable": true,
                          "description": "Discount applied on the row",
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "percent",
                                "amount"
                              ],
                              "example": "amount"
                            },
                            "value": {
                              "oneOf": [
                                {
                                  "type": "string",
                                  "description": "value of discount",
                                  "example": "25.20"
                                }
                              ]
                            }
                          }
                        },
                        "accounting_code": {
                          "type": "integer",
                          "description": "Accouting code of row",
                          "example": 7576
                        },
                        "analytic_code": {
                          "type": "string",
                          "nullable": true,
                          "description": "Analytic code of row",
                          "example": "divers"
                        }
                      },
                      "required": [
                        "id"
                      ]
                    },
                    {
                      "title": "Update Shipping/Packaging Row",
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "unit_amount": {
                          "description": "Unit amount without tax.",
                          "type": "string",
                          "example": "90.22"
                        },
                        "tax_id": {
                          "type": "integer",
                          "description": "Tax identifier",
                          "example": 12
                        },
                        "quantity": {
                          "type": "string",
                          "description": "Quantity",
                          "example": 7
                        },
                        "reference": {
                          "type": "string",
                          "description": "Row reference",
                          "example": "MB880174910"
                        },
                        "description": {
                          "type": "string",
                          "nullable": true,
                          "description": "Row description",
                          "example": "Aluminium rail 4x3m"
                        },
                        "discount": {
                          "type": "object",
                          "nullable": true,
                          "description": "Discount applied on the row",
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "percent",
                                "amount"
                              ],
                              "example": "amount"
                            },
                            "value": {
                              "oneOf": [
                                {
                                  "type": "string",
                                  "description": "value of discount",
                                  "example": "25.20"
                                }
                              ]
                            }
                          }
                        },
                        "tax_rate": {
                          "type": "string",
                          "description": "Tax rate",
                          "readOnly": true,
                          "example": "20.00"
                        },
                        "tax_amount": {
                          "type": "string",
                          "description": "Tax amount",
                          "readOnly": true,
                          "example": "23.44"
                        },
                        "amount_tax_inc": {
                          "type": "string",
                          "description": "total amount of row tax included",
                          "readOnly": true,
                          "example": "1229.93"
                        },
                        "amount_tax_exc": {
                          "type": "string",
                          "description": "total amount of row without tax",
                          "readOnly": true,
                          "example": "445.33"
                        },
                        "accounting_code_id": {
                          "type": "integer",
                          "description": "Accouting code id of row",
                          "example": 7576
                        },
                        "analytic_code": {
                          "type": "string",
                          "nullable": true,
                          "description": "Analytic code of row",
                          "example": "divers"
                        }
                      },
                      "required": [
                        "related",
                        "quantity"
                      ]
                    },
                    {
                      "type": "object",
                      "title": "Update Catalog Item Row",
                      "additionalProperties": false,
                      "properties": {
                        "id": {
                          "type": "integer",
                          "description": "Row Identifier"
                        },
                        "unit_amount": {
                          "description": "Unit amount",
                          "type": "string",
                          "example": "29.28"
                        },
                        "eco_tax": {
                          "type": "object",
                          "nullable": true,
                          "description": "Eco tax applied on the row",
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "inc",
                                "excl"
                              ]
                            },
                            "value": {
                              "type": "string",
                              "example": "22.44"
                            }
                          }
                        },
                        "purchase_amount": {
                          "type": "string",
                          "description": "Purchase amount"
                        },
                        "unit": {
                          "type": "integer",
                          "description": "Id of unit of measurement of quantity"
                        },
                        "warehouse_id": {
                          "type": "integer",
                          "nullable": true,
                          "description": "Warehouse identifier"
                        },
                        "sku_id": {
                          "nullable": true,
                          "type": "integer",
                          "description": "Stock keeping unit"
                        },
                        "tax_id": {
                          "type": "integer",
                          "description": "Tax identifier",
                          "example": 12
                        },
                        "tax": {
                          "deprecated": true,
                          "type": "integer",
                          "description": "Tax identifier. This field will be removed on 1 July 2022, use tax_id instead",
                          "example": 12
                        },
                        "quantity": {
                          "type": "string",
                          "description": "Quantity",
                          "example": 7
                        },
                        "reference": {
                          "type": "string",
                          "description": "Row reference",
                          "example": "MB880174910"
                        },
                        "description": {
                          "type": "string",
                          "nullable": true,
                          "description": "Row description",
                          "example": "Aluminium rail 4x3m"
                        },
                        "discount": {
                          "type": "object",
                          "nullable": true,
                          "description": "Discount applied on the row",
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "percent",
                                "amount"
                              ],
                              "example": "amount"
                            },
                            "value": {
                              "oneOf": [
                                {
                                  "type": "string",
                                  "description": "value of discount",
                                  "example": "25.20"
                                }
                              ]
                            }
                          }
                        },
                        "accounting_code": {
                          "type": "integer",
                          "description": "Accouting code of row",
                          "example": 7576
                        },
                        "analytic_code": {
                          "type": "string",
                          "nullable": true,
                          "description": "Analytic code of row",
                          "example": "divers"
                        }
                      },
                      "required": [
                        "id"
                      ]
                    },
                    {
                      "type": "object",
                      "title": "Update Comment Row",
                      "properties": {
                        "id": {
                          "type": "integer",
                          "description": "Row Identifier"
                        },
                        "text": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "id"
                      ],
                      "additionalProperties": false
                    },
                    {
                      "type": "object",
                      "title": "Update Title Row",
                      "properties": {
                        "id": {
                          "type": "integer",
                          "description": "Row Identifier"
                        },
                        "text": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "id"
                      ],
                      "additionalProperties": false
                    },
                    {
                      "type": "object",
                      "title": "Update Sub Total Row",
                      "properties": {
                        "id": {
                          "type": "integer",
                          "description": "Row Identifier"
                        }
                      },
                      "required": [
                        "id"
                      ],
                      "additionalProperties": false
                    },
                    {
                      "type": "object",
                      "title": "Update Break Line Row",
                      "properties": {
                        "id": {
                          "type": "integer",
                          "description": "Row Identifier"
                        }
                      },
                      "required": [
                        "id"
                      ],
                      "additionalProperties": false
                    },
                    {
                      "type": "object",
                      "title": "Update Break Page Row",
                      "properties": {
                        "id": {
                          "type": "integer",
                          "description": "Row Identifier"
                        }
                      },
                      "required": [
                        "id"
                      ],
                      "additionalProperties": false
                    }
                  ]
                }
              }
            }
          }
        ]
      },
      "EstimateCollection": {
        "title": "Estimate collection item",
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/AccountDocumentCollection/properties/pagination"
          },
          "data": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/EstimateOne/allOf/0"
                },
                {
                  "title": "Embed for Estimate",
                  "description": "Objects add to response. Use embed parameter",
                  "x-examples": {},
                  "type": "object",
                  "properties": {
                    "_embed": {
                      "allOf": [
                        {
                          "type": "object",
                          "properties": {
                            "company": {
                              "$ref": "#/components/schemas/SaleEmbed/properties/_embed/allOf/0/properties/company"
                            },
                            "individual": {
                              "$ref": "#/components/schemas/SaleEmbed/properties/_embed/allOf/0/properties/individual"
                            },
                            "contact": {
                              "$ref": "#/components/schemas/ContactItem/allOf/0"
                            },
                            "invoicing_address": {
                              "$ref": "#/components/schemas/SaleEmbed/properties/_embed/allOf/0/properties/invoicing_address"
                            },
                            "delivery_address": {
                              "$ref": "#/components/schemas/SaleEmbed/properties/_embed/allOf/0/properties/invoicing_address"
                            },
                            "currency": {
                              "nullable": true,
                              "$ref": "#/components/schemas/SaleEmbed/properties/_embed/allOf/0/properties/currency"
                            },
                            "acl": {
                              "title": "EstimateAcl",
                              "type": "object",
                              "description": "",
                              "x-examples": {},
                              "properties": {
                                "can_be_updated": {
                                  "type": "boolean",
                                  "nullable": true,
                                  "description": "Document can be updated",
                                  "example": true
                                },
                                "can_be_deleted": {
                                  "type": "boolean",
                                  "nullable": true,
                                  "description": "Document can be deleted",
                                  "example": true
                                }
                              }
                            },
                            "payment_method_ids": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "title": "Payment method object",
                                "properties": {
                                  "id": {
                                    "type": "integer",
                                    "description": "Payment method identifier"
                                  },
                                  "label": {
                                    "type": "string",
                                    "description": "Payment method label"
                                  }
                                }
                              }
                            },
                            "fiscal_year": {
                              "$ref": "#/components/schemas/SaleEmbed/properties/_embed/allOf/0/properties/fiscal_year"
                            },
                            "smart_tags": {
                              "nullable": true,
                              "description": "Smart-tags linked",
                              "allOf": [
                                {
                                  "$ref": "#/components/schemas/SaleEmbed/properties/_embed/allOf/0/properties/smart_tags/allOf/0"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "$ref": "#/components/schemas/SaleEmbed/properties/_embed/allOf/1"
                        }
                      ]
                    }
                  }
                }
              ]
            }
          }
        },
        "required": [
          "pagination",
          "data"
        ]
      },
      "EstimateOne": {
        "allOf": [
          {
            "title": "Estimate",
            "allOf": [
              {
                "$ref": "#/components/schemas/Estimate/allOf/0"
              },
              {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "integer",
                    "readOnly": true,
                    "description": "Document ID",
                    "example": 6657
                  },
                  "owner": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string"
                      },
                      "id": {
                        "type": "integer"
                      }
                    },
                    "required": [
                      "type",
                      "id"
                    ]
                  },
                  "created": {
                    "type": "string",
                    "description": "Date of creation of document",
                    "format": "date-time",
                    "readOnly": true
                  },
                  "discount": {
                    "description": "Global discount applied on the document",
                    "nullable": true,
                    "type": "object",
                    "properties": {
                      "percent": {
                        "type": "string",
                        "description": "Percentage of the discount",
                        "example": "12.00"
                      },
                      "amount": {
                        "type": "string",
                        "description": "Amount of the discount",
                        "example": "111.97"
                      },
                      "type": {
                        "type": "string",
                        "description": "Type of the global discount as defined on the document",
                        "enum": [
                          "amount",
                          "percent"
                        ]
                      }
                    }
                  },
                  "fiscal_year_id": {
                    "type": "integer",
                    "nullable": true,
                    "description": "ID of the estimate's fiscal year"
                  },
                  "invoicing_address_id": {
                    "description": "Invoicing address, by default take invoicing address of company/individual.",
                    "type": "integer",
                    "readOnly": true
                  },
                  "delivery_address_id": {
                    "type": "integer",
                    "description": "Shipping address, by default take shipping address of company/individual.",
                    "readOnly": true
                  }
                },
                "required": [
                  "id",
                  "owner",
                  "created",
                  "date",
                  "related",
                  "contact_id",
                  "invoicing_address_id",
                  "delivery_address_id",
                  "assigned_staff_id",
                  "status",
                  "number",
                  "amounts",
                  "currency",
                  "subject",
                  "public_link",
                  "public_link_enabled",
                  "payment_method_ids",
                  "taxes",
                  "fiscal_year_id"
                ]
              }
            ]
          },
          {
            "type": "object",
            "properties": {
              "rows": {
                "type": "array",
                "nullable": true,
                "maxItems": 100,
                "items": {
                  "$ref": "#/components/schemas/EstimateCreate/allOf/1/properties/rows/items"
                }
              }
            },
            "required": [
              "id",
              "owner",
              "created",
              "date",
              "related",
              "contact_id",
              "invoicing_address_id",
              "delivery_address_id",
              "assigned_staff_id",
              "status",
              "number",
              "amounts",
              "currency",
              "subject",
              "public_link",
              "public_link_enabled",
              "rows"
            ]
          }
        ]
      },
      "EstimateCompute": {
        "type": "object",
        "properties": {
          "owner": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string"
              },
              "id": {
                "type": "integer"
              }
            },
            "required": [
              "type",
              "id"
            ]
          },
          "rows": {
            "type": "array",
            "nullable": true,
            "items": {
              "type": "object",
              "anyOf": [
                {
                  "title": "Single Row",
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": [
                        "single"
                      ]
                    },
                    "unit_id": {
                      "type": "integer",
                      "description": "Id of unit of measurement of quantity"
                    },
                    "purchase_amount": {
                      "type": "string",
                      "description": "Purchase amount"
                    },
                    "unit_amount": {
                      "description": "Unit amount without tax.",
                      "type": "string",
                      "example": "22.20"
                    },
                    "tax_id": {
                      "type": "integer",
                      "description": "Tax identifier",
                      "example": 12
                    },
                    "quantity": {
                      "type": "string",
                      "description": "Quantity",
                      "example": "7.2"
                    },
                    "reference": {
                      "type": "string",
                      "description": "Row reference",
                      "example": "MB880174910"
                    },
                    "description": {
                      "type": "string",
                      "nullable": true,
                      "description": "Row description",
                      "example": "Aluminium rail 4x3m"
                    },
                    "discount": {
                      "type": "object",
                      "nullable": true,
                      "description": "Discount applied on the row",
                      "properties": {
                        "type": {
                          "type": "string",
                          "description": "Type of the discount. Express her in percentage or with an amount",
                          "enum": [
                            "percent",
                            "amount"
                          ],
                          "example": "amount"
                        },
                        "value": {
                          "oneOf": [
                            {
                              "type": "string",
                              "description": "value of discount (Expressed in amount or percent depending choosen type)",
                              "example": "20.5"
                            }
                          ]
                        },
                        "total": {
                          "type": "string",
                          "description": "Total of all discount for this row",
                          "example": "400"
                        }
                      }
                    },
                    "tax_rate": {
                      "type": "string",
                      "description": "Tax rate",
                      "readOnly": true,
                      "example": "20.00"
                    },
                    "tax_amount": {
                      "type": "string",
                      "description": "Tax amount",
                      "readOnly": true,
                      "example": "23.44"
                    },
                    "tax_label": {
                      "type": "string",
                      "description": "Tax label",
                      "readOnly": true,
                      "example": "tva"
                    },
                    "amount_tax_inc": {
                      "type": "string",
                      "description": "total amount of row tax included",
                      "readOnly": true,
                      "example": "1229.93"
                    },
                    "amount_tax_exc": {
                      "type": "string",
                      "description": "total amount of row without tax",
                      "readOnly": true,
                      "example": "445.33"
                    },
                    "accounting_code_id": {
                      "type": "integer",
                      "description": "Accouting code id of row",
                      "example": 7576
                    },
                    "analytic_code": {
                      "type": "string",
                      "nullable": true,
                      "description": "Analytic code of row",
                      "example": "divers"
                    }
                  },
                  "required": [
                    "quantity",
                    "unit_amount",
                    "type"
                  ]
                },
                {
                  "title": "Shipping/Packaging Row",
                  "description": "By default take value of related item",
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": [
                        "shipping",
                        "packaging"
                      ]
                    },
                    "related": {
                      "type": "object",
                      "description": "Related shipping or packaging",
                      "properties": {
                        "id": {
                          "type": "integer",
                          "description": "item identifier"
                        },
                        "type": {
                          "type": "string",
                          "description": "Type of item",
                          "enum": [
                            "shipping",
                            "packaging"
                          ]
                        }
                      }
                    },
                    "unit_amount": {
                      "description": "Unit amount without tax.",
                      "type": "string",
                      "example": "90.22"
                    },
                    "tax_id": {
                      "type": "integer",
                      "description": "Tax identifier",
                      "example": 12
                    },
                    "quantity": {
                      "type": "string",
                      "description": "Quantity",
                      "example": "7.2"
                    },
                    "reference": {
                      "type": "string",
                      "description": "Row reference",
                      "example": "MB880174910"
                    },
                    "description": {
                      "type": "string",
                      "nullable": true,
                      "description": "Row description",
                      "example": "Aluminium rail 4x3m"
                    },
                    "discount": {
                      "type": "object",
                      "nullable": true,
                      "description": "Discount applied on the row",
                      "properties": {
                        "type": {
                          "type": "string",
                          "description": "Type of the discount. Express her in percentage or with an amount",
                          "enum": [
                            "percent",
                            "amount"
                          ],
                          "example": "amount"
                        },
                        "value": {
                          "oneOf": [
                            {
                              "type": "string",
                              "description": "value of discount (Expressed in amount or percent depending choosen type)",
                              "example": "20.5"
                            }
                          ]
                        },
                        "total": {
                          "type": "string",
                          "description": "Total of all discount for this row",
                          "example": "400"
                        }
                      }
                    },
                    "accounting_code_id": {
                      "type": "integer",
                      "description": "Accouting code id of row",
                      "example": 7576
                    },
                    "analytic_code": {
                      "type": "string",
                      "nullable": true,
                      "description": "Analytic code of row",
                      "example": "divers"
                    },
                    "tax_rate": {
                      "type": "string",
                      "description": "Tax rate",
                      "readOnly": true,
                      "example": "20.00"
                    },
                    "tax_amount": {
                      "type": "string",
                      "description": "Tax amount",
                      "readOnly": true,
                      "example": "23.44"
                    },
                    "tax_label": {
                      "type": "string",
                      "description": "Tax label",
                      "readOnly": true,
                      "example": "tva"
                    },
                    "amount_tax_inc": {
                      "type": "string",
                      "description": "total amount of row tax included",
                      "readOnly": true,
                      "example": "1229.93"
                    },
                    "amount_tax_exc": {
                      "type": "string",
                      "description": "total amount of row without tax",
                      "readOnly": true,
                      "example": "445.33"
                    }
                  },
                  "required": [
                    "related",
                    "quantity",
                    "type"
                  ]
                },
                {
                  "title": "Catalog Item Row",
                  "description": "By default take value of related item",
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": [
                        "catalog"
                      ]
                    },
                    "related": {
                      "type": "object",
                      "description": "Related product or service",
                      "properties": {
                        "id": {
                          "type": "integer",
                          "description": "item identifier"
                        },
                        "type": {
                          "type": "string",
                          "description": "Type of item",
                          "enum": [
                            "product",
                            "service"
                          ]
                        }
                      }
                    },
                    "unit_amount": {
                      "description": "Unit amount",
                      "type": "string",
                      "example": "29.28"
                    },
                    "eco_tax": {
                      "type": "object",
                      "nullable": true,
                      "description": "Eco tax applied on the row",
                      "properties": {
                        "type": {
                          "type": "string",
                          "enum": [
                            "inc",
                            "excl"
                          ]
                        },
                        "value": {
                          "type": "string",
                          "example": "22.44"
                        }
                      }
                    },
                    "purchase_amount": {
                      "type": "string",
                      "description": "Purchase amount"
                    },
                    "unit_id": {
                      "type": "integer",
                      "description": "Id of unit of measurement of quantity"
                    },
                    "warehouse_id": {
                      "type": "integer",
                      "nullable": true,
                      "description": "Warehouse identifier"
                    },
                    "sku_id": {
                      "nullable": true,
                      "type": "integer",
                      "description": "Stock keeping unit"
                    },
                    "tax_id": {
                      "type": "integer",
                      "description": "Tax identifier",
                      "example": 12
                    },
                    "quantity": {
                      "type": "string",
                      "description": "Quantity",
                      "example": "7.2"
                    },
                    "reference": {
                      "type": "string",
                      "description": "Row reference",
                      "example": "MB880174910"
                    },
                    "description": {
                      "type": "string",
                      "nullable": true,
                      "description": "Row description",
                      "example": "Aluminium rail 4x3m"
                    },
                    "discount": {
                      "type": "object",
                      "nullable": true,
                      "description": "Discount applied on the row",
                      "properties": {
                        "type": {
                          "type": "string",
                          "enum": [
                            "percent",
                            "amount"
                          ],
                          "example": "amount"
                        },
                        "value": {
                          "oneOf": [
                            {
                              "type": "string",
                              "description": "value of discount",
                              "example": "25.20"
                            }
                          ]
                        },
                        "total": {
                          "type": "string",
                          "description": "Total of all discount for this row",
                          "example": "400"
                        }
                      }
                    },
                    "tax_rate": {
                      "type": "string",
                      "description": "Tax rate",
                      "readOnly": true,
                      "example": "20.00"
                    },
                    "tax_amount": {
                      "type": "string",
                      "description": "Tax amount",
                      "readOnly": true,
                      "example": "23.44"
                    },
                    "tax_label": {
                      "type": "string",
                      "description": "Tax label",
                      "readOnly": true,
                      "example": "tva"
                    },
                    "amount_tax_inc": {
                      "type": "string",
                      "description": "total amount of row tax included",
                      "readOnly": true,
                      "example": "1229.93"
                    },
                    "amount_tax_exc": {
                      "type": "string",
                      "description": "total amount of row without tax",
                      "readOnly": true,
                      "example": "445.33"
                    },
                    "accounting_code_id": {
                      "type": "integer",
                      "description": "Accouting code id of row",
                      "example": 7576
                    },
                    "analytic_code": {
                      "type": "string",
                      "nullable": true,
                      "description": "Analytic code of row",
                      "example": "divers"
                    }
                  },
                  "required": [
                    "related",
                    "quantity",
                    "type"
                  ]
                },
                {
                  "type": "object",
                  "title": "Comment Row",
                  "additionalProperties": false,
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": [
                        "comment"
                      ]
                    },
                    "text": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "text",
                    "type"
                  ]
                },
                {
                  "type": "object",
                  "title": "Title Row",
                  "additionalProperties": false,
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": [
                        "title"
                      ]
                    },
                    "text": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "text",
                    "type"
                  ]
                },
                {
                  "type": "object",
                  "title": "Sub Total Row",
                  "additionalProperties": false,
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": [
                        "sub-total"
                      ]
                    },
                    "amount": {
                      "type": "string",
                      "readOnly": true,
                      "description": "Amount of the sub-total"
                    }
                  },
                  "required": [
                    "type"
                  ]
                },
                {
                  "type": "object",
                  "title": "Break Line Row",
                  "additionalProperties": false,
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": [
                        "break-line"
                      ]
                    }
                  },
                  "required": [
                    "type"
                  ]
                },
                {
                  "type": "object",
                  "title": "Break Page Row",
                  "additionalProperties": false,
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": [
                        "break-page"
                      ]
                    }
                  },
                  "required": [
                    "type"
                  ]
                }
              ]
            }
          },
          "date": {
            "description": "Date of the estimate",
            "type": "string",
            "format": "date"
          },
          "related": {
            "type": "array",
            "minItems": 1,
            "maxItems": 1,
            "description": "Objects linked to the estimate : \n  - For Company & Individual, only `prospect` type is allowed\n",
            "items": {
              "type": "object",
              "description": "Object linked to the estimate (a Company or an Individual)",
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "company",
                    "individual"
                  ]
                },
                "id": {
                  "type": "integer"
                }
              },
              "required": [
                "type",
                "id"
              ]
            }
          },
          "contact_id": {
            "description": "Contact of company linked to the estimate",
            "type": "integer",
            "nullable": true
          },
          "invoicing_address_id": {
            "description": "Invoicing address, by default take invoicing address of company/individual.",
            "type": "integer",
            "nullable": true
          },
          "delivery_address_id": {
            "type": "integer",
            "description": "Shipping address, by default take shipping address of company/individual.",
            "nullable": true
          },
          "assigned_staff_id": {
            "description": "Staff in charge of the estimate",
            "type": "integer"
          },
          "status": {
            "description": "Status of the estimate (draft if not provided at the creation)",
            "type": "string",
            "readOnly": true,
            "example": "draft",
            "enum": [
              "draft",
              "sent",
              "read",
              "accepted",
              "refused",
              "expired",
              "advanced",
              "partialinvoiced",
              "invoiced",
              "cancelled"
            ]
          },
          "number": {
            "type": "string",
            "description": "Estimate number",
            "example": "EST-20210611-0010"
          },
          "amounts": {
            "description": "Amounts of estimate with and without taxe",
            "type": "object",
            "readOnly": true,
            "properties": {
              "shipping": {
                "type": "string",
                "description": "Total shipping amount",
                "example": "128.54"
              },
              "packaging": {
                "type": "string",
                "description": "Total packaging amount",
                "example": "40.24"
              },
              "total_raw_excl_tax": {
                "type": "string",
                "description": "Total without tax and without global discount",
                "example": "933.07"
              },
              "total_after_discount_excl_tax": {
                "type": "string",
                "description": "Total without tax and after discount applied",
                "example": "821.10"
              },
              "total_excl_tax": {
                "description": "Total net without tax",
                "type": "string",
                "example": "843.10"
              },
              "total": {
                "type": "string",
                "description": "Total amount with taxes",
                "example": "898.97"
              }
            },
            "required": [
              "shipping",
              "packaging",
              "total_raw_excl_tax",
              "total_after_discount_excl_tax",
              "total_excl_tax",
              "total"
            ]
          },
          "currency": {
            "description": "Currency code of estimate",
            "type": "string"
          },
          "subject": {
            "description": "Subject of estimate",
            "type": "string"
          },
          "public_link": {
            "description": "Public link of estimate",
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "public_link_enabled": {
            "type": "boolean",
            "description": "Public link is enabled"
          },
          "payment_method_ids": {
            "type": "array",
            "description": "payments methods allowed on the estimate",
            "nullable": true,
            "items": {
              "type": "integer"
            }
          },
          "decimal_number": {
            "readOnly": true,
            "type": "object",
            "description": "Precision for decimal numbers",
            "properties": {
              "unit_price": {
                "type": "integer",
                "nullable": true,
                "description": "Precision of unit price"
              },
              "quantity": {
                "type": "integer",
                "nullable": true,
                "description": "Precision of quantity"
              },
              "main": {
                "type": "integer",
                "description": "Main precision of estimate. Could be overrided for unit_price/quantity"
              }
            }
          },
          "pdf_link": {
            "type": "string",
            "format": "uri",
            "readOnly": true,
            "description": "Link to the pdf of estimate. /!\\ Link is regenerate after an update of estimate"
          },
          "expiry_date": {
            "description": "Expiry date of the estimate",
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "taxes": {
            "description": "List of taxes used on the estimate",
            "type": "array",
            "items": {
              "type": "object",
              "description": "Tax used",
              "properties": {
                "label": {
                  "type": "string"
                },
                "id": {
                  "type": "integer"
                },
                "rate": {
                  "type": "string"
                },
                "amount": {
                  "type": "string"
                }
              },
              "required": [
                "label",
                "id",
                "rate",
                "amount"
              ]
            }
          },
          "discount": {
            "description": "Global discount applied on the document",
            "nullable": true,
            "type": "object",
            "properties": {
              "percent": {
                "type": "string",
                "description": "Percentage of the discount",
                "example": "12.00"
              },
              "amount": {
                "type": "string",
                "description": "Amount of the discount",
                "example": "111.97"
              },
              "type": {
                "type": "string",
                "description": "Type of the global discount as defined on the document",
                "enum": [
                  "amount",
                  "percent"
                ]
              }
            }
          }
        },
        "required": [
          "owner",
          "date",
          "related",
          "contact_id",
          "invoicing_address_id",
          "delivery_address_id",
          "assigned_staff_id",
          "status",
          "number",
          "amounts",
          "currency",
          "subject",
          "public_link",
          "public_link_enabled",
          "payment_method_ids",
          "taxes"
        ]
      },
      "EstimateFilters": {
        "title": "estimate filters",
        "type": "object",
        "description": "The estimates filters",
        "properties": {
          "filters": {
            "type": "object",
            "description": "estimates filters",
            "properties": {
              "created": {
                "title": "Created at",
                "type": "object",
                "description": "Filter the estimate list by creation date",
                "properties": {
                  "start": {
                    "type": "string",
                    "format": "date-time",
                    "example": "2020-01-01T00:00:00+01:00"
                  },
                  "end": {
                    "type": "string",
                    "format": "date-time",
                    "example": "2020-02-01T00:00:00+01:00"
                  }
                }
              },
              "owners": {
                "title": "Owners",
                "type": "array",
                "description": "Filter the estimate list by owner (staff id)",
                "items": {
                  "type": "integer"
                }
              },
              "date": {
                "title": "Document date",
                "type": "object",
                "description": "Filter the estimate list by date",
                "properties": {
                  "start": {
                    "type": "string",
                    "format": "date",
                    "example": "2020-01-01"
                  },
                  "end": {
                    "type": "string",
                    "format": "date",
                    "example": "2020-02-01"
                  }
                }
              },
              "related_objects": {
                "title": "Related Objects",
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": [
                        "company",
                        "individual",
                        "opportunity"
                      ],
                      "example": "company"
                    },
                    "id": {
                      "type": "integer",
                      "example": 22
                    }
                  }
                }
              },
              "contacts": {
                "title": "Contact",
                "type": "array",
                "description": "Filter the estimate list by contact (contact id)",
                "items": {
                  "type": "integer"
                }
              },
              "assigned_staff_ids": {
                "title": "Assigned staffs",
                "type": "array",
                "description": "Filter the estimate list by assigned staffs (staff id)",
                "items": {
                  "type": "integer"
                }
              },
              "status": {
                "title": "Status",
                "description": "Filter the estimate list by status",
                "example": "sent",
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "draft",
                    "sent",
                    "read",
                    "accepted",
                    "refused",
                    "expired",
                    "advanced",
                    "partialinvoiced",
                    "invoiced",
                    "cancelled"
                  ]
                }
              },
              "number": {
                "title": "number",
                "type": "string",
                "description": "Filter the estimate list by number (exact search)",
                "example": "DEVIS-0001"
              },
              "currency": {
                "title": "currency",
                "type": "string",
                "description": "Currency code (exact search)",
                "example": "EUR"
              }
            }
          }
        },
        "required": [
          "filters"
        ]
      },
      "SaleEmbed": {
        "title": "Embed for Estimate",
        "description": "Objects add to response. Use embed parameter",
        "x-examples": {},
        "type": "object",
        "properties": {
          "_embed": {
            "allOf": [
              {
                "type": "object",
                "properties": {
                  "company": {
                    "title": "Company",
                    "type": "object",
                    "description": "",
                    "x-examples": {},
                    "properties": {
                      "id": {
                        "type": "integer",
                        "description": "Unique ID",
                        "example": 6657
                      },
                      "type": {
                        "type": "string",
                        "enum": [
                          "prospect",
                          "client",
                          "supplier"
                        ]
                      },
                      "name": {
                        "type": "string",
                        "description": "Company name",
                        "example": "Example company"
                      },
                      "email": {
                        "description": "Company email",
                        "type": "string",
                        "format": "email",
                        "example": "contact@example-company.com",
                        "nullable": true
                      },
                      "website": {
                        "type": "string",
                        "format": "url",
                        "description": "Company website",
                        "example": "http://example-company.com",
                        "nullable": true
                      },
                      "phone_number": {
                        "type": "string",
                        "description": "Company phone number",
                        "example": "+33100000000",
                        "nullable": true
                      },
                      "mobile_number": {
                        "type": "string",
                        "description": "Company mobile number",
                        "example": "+33600000000",
                        "nullable": true
                      },
                      "fax_number": {
                        "type": "string",
                        "description": "Company Fax number",
                        "example": "+33100000000",
                        "nullable": true
                      },
                      "legal_france": {
                        "$ref": "#/paths/~1contacts~1%7Bid%7D~1companies/get/responses/200/content/application~1json/schema/properties/data/items/properties/legal_france"
                      },
                      "capital": {
                        "type": "string",
                        "nullable": true,
                        "description": "Company Capital",
                        "example": "4000"
                      },
                      "reference": {
                        "type": "string",
                        "description": "Company reference",
                        "example": "CLI-1654",
                        "nullable": true
                      },
                      "note": {
                        "type": "string",
                        "description": "Note on company",
                        "example": "An handed-written note describing this company"
                      },
                      "auxiliary_code": {
                        "type": "string",
                        "description": "Auxiliary code",
                        "example": "0EX11C",
                        "nullable": true
                      },
                      "social": {
                        "$ref": "#/paths/~1companies/post/requestBody/content/application~1json/schema/properties/social"
                      },
                      "rate_category_id": {
                        "type": "integer",
                        "nullable": true,
                        "description": "Company Rate category id",
                        "example": 9956
                      },
                      "main_contact_id": {
                        "description": "Main contact unique ID",
                        "type": "integer",
                        "nullable": true,
                        "minimum": 1,
                        "example": 6654
                      },
                      "dunning_contact_id": {
                        "description": "Dunning contact unique ID",
                        "type": "integer",
                        "nullable": true,
                        "minimum": 1,
                        "example": 6654
                      },
                      "invoicing_contact_id": {
                        "description": "Invoicing contact unique ID",
                        "type": "integer",
                        "nullable": true,
                        "minimum": 1,
                        "example": 6654
                      },
                      "invoicing_address_id": {
                        "description": "Invoicing address unique ID",
                        "type": "integer",
                        "nullable": true,
                        "minimum": 1,
                        "example": 9987
                      },
                      "delivery_address_id": {
                        "description": "Delivery address unique ID",
                        "type": "integer",
                        "nullable": true,
                        "minimum": 1,
                        "example": 6547
                      },
                      "accounting_code_id": {
                        "type": "integer",
                        "nullable": true,
                        "description": "Company accounting code id",
                        "example": 12345
                      },
                      "accounting_purchase_code_id": {
                        "type": "integer",
                        "nullable": true,
                        "description": "Company accouting purchase code id",
                        "example": 98556
                      },
                      "owner": {
                        "$ref": "#/components/schemas/StaffAutocompleteResultItem/properties/owner/allOf/0"
                      },
                      "created": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": false,
                        "description": "Datetime of creating company",
                        "example": "2020-05-29T11:22:03+02:00"
                      },
                      "updated_at": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": false,
                        "description": "Datetime of the last update of the company",
                        "example": "2020-05-29T11:22:03+02:00"
                      },
                      "is_archived": {
                        "type": "boolean",
                        "nullable": false,
                        "description": "Status archived or not",
                        "example": false
                      },
                      "business_segment": {
                        "type": "object",
                        "description": "Company business segment",
                        "nullable": true,
                        "properties": {
                          "id": {
                            "type": "integer",
                            "example": 3
                          },
                          "label": {
                            "type": "string",
                            "example": "Software publisher / Digital services company"
                          }
                        }
                      },
                      "number_of_employees": {
                        "type": "object",
                        "description": "Number of employees of company",
                        "nullable": true,
                        "properties": {
                          "id": {
                            "type": "integer",
                            "example": 1
                          },
                          "label": {
                            "type": "string",
                            "example": "From 1 to 5"
                          }
                        }
                      },
                      "marketing_campaigns_subscriptions": {
                        "type": "array",
                        "items": {
                          "type": "string",
                          "enum": [
                            "sms",
                            "phone",
                            "email",
                            "postal_mail",
                            "custom"
                          ]
                        },
                        "description": "list of campaign type subcribed",
                        "uniqueItems": true
                      }
                    }
                  },
                  "individual": {
                    "title": "Individual",
                    "type": "object",
                    "description": "",
                    "x-examples": {},
                    "properties": {
                      "id": {
                        "type": "integer",
                        "description": "Unique ID",
                        "example": 6657
                      },
                      "type": {
                        "type": "string",
                        "enum": [
                          "prospect",
                          "client",
                          "supplier"
                        ]
                      },
                      "last_name": {
                        "type": "string",
                        "description": "Individual contact lastname",
                        "example": "Martin",
                        "maxLength": 200
                      },
                      "first_name": {
                        "type": "string",
                        "description": "Individual contact firstname",
                        "example": "Jean",
                        "nullable": true
                      },
                      "email": {
                        "description": "Individual email",
                        "type": "string",
                        "format": "email",
                        "example": "jean.martin@personal-example.com",
                        "nullable": true
                      },
                      "website": {
                        "type": "string",
                        "format": "url",
                        "description": "Individual website",
                        "example": "http://personal-example.com",
                        "nullable": true
                      },
                      "phone_number": {
                        "type": "string",
                        "description": "Phone number",
                        "example": "+33100000000",
                        "nullable": true
                      },
                      "mobile_number": {
                        "type": "string",
                        "description": "Mobile number",
                        "example": "+33600000000",
                        "nullable": true
                      },
                      "fax_number": {
                        "type": "string",
                        "description": "Fax number",
                        "example": "+33100000000",
                        "nullable": true
                      },
                      "reference": {
                        "type": "string",
                        "description": "Internal reference",
                        "example": "IND-1654",
                        "nullable": true
                      },
                      "note": {
                        "type": "string",
                        "description": "Note on company",
                        "example": "An handed-written note describing this company"
                      },
                      "auxiliary_code": {
                        "type": "string",
                        "description": "Auxiliary code",
                        "example": "0EX11C",
                        "nullable": true
                      },
                      "social": {
                        "$ref": "#/paths/~1companies/post/requestBody/content/application~1json/schema/properties/social"
                      },
                      "rate_category_id": {
                        "type": "integer",
                        "nullable": true,
                        "description": "Rate category id",
                        "example": 9956
                      },
                      "main_contact_id": {
                        "description": "Main contact unique ID",
                        "type": "integer",
                        "nullable": true,
                        "minimum": 1,
                        "example": 6654
                      },
                      "dunning_contact_id": {
                        "description": "Dunning contact unique ID",
                        "type": "integer",
                        "nullable": true,
                        "minimum": 1,
                        "example": 6654
                      },
                      "invoicing_contact_id": {
                        "description": "Invoicing contact unique ID",
                        "type": "integer",
                        "nullable": true,
                        "minimum": 1,
                        "example": 6654
                      },
                      "invoicing_address_id": {
                        "description": "Invoicing address unique ID",
                        "type": "integer",
                        "nullable": true,
                        "minimum": 1,
                        "example": 9987
                      },
                      "delivery_address_id": {
                        "description": "Delivery address unique ID",
                        "type": "integer",
                        "nullable": true,
                        "minimum": 1,
                        "example": 6547
                      },
                      "accounting_code_id": {
                        "type": "integer",
                        "nullable": true,
                        "description": "Accounting code id",
                        "example": 12345
                      },
                      "accounting_purchase_code_id": {
                        "type": "integer",
                        "nullable": true,
                        "description": "Accouting purchase code id",
                        "example": 98556
                      },
                      "owner": {
                        "$ref": "#/components/schemas/StaffAutocompleteResultItem/properties/owner/allOf/0"
                      },
                      "created": {
                        "type": "string",
                        "format": "date-time",
                        "nullable": false,
                        "description": "Datetime of creation",
                        "example": "2020-05-29T11:22:03+02:00"
                      },
                      "is_archived": {
                        "type": "boolean",
                        "nullable": false,
                        "description": "Status archived or not",
                        "example": false
                      },
                      "marketing_campaigns_subscriptions": {
                        "type": "array",
                        "items": {
                          "type": "string",
                          "enum": [
                            "sms",
                            "phone",
                            "email",
                            "postal_mail",
                            "custom"
                          ]
                        },
                        "description": "list of campaign type subcribed",
                        "uniqueItems": true
                      },
                      "sync": {
                        "type": "object",
                        "properties": {
                          "mailchimp": {
                            "type": "boolean",
                            "description": "Activate the mailchimp synchronization",
                            "nullable": false
                          },
                          "mailjet": {
                            "type": "boolean",
                            "description": "Activate the mailjet synchronization",
                            "nullable": false
                          },
                          "simplemail": {
                            "type": "boolean",
                            "description": "Activate the simplemail synchronization",
                            "nullable": false
                          }
                        }
                      }
                    }
                  },
                  "contact": {
                    "$ref": "#/components/schemas/ContactItem/allOf/0"
                  },
                  "invoicing_address": {
                    "type": "object",
                    "title": "Address",
                    "properties": {
                      "id": {
                        "type": "integer",
                        "readOnly": true,
                        "description": "Unique ID",
                        "example": 6657
                      },
                      "name": {
                        "type": "string",
                        "description": "Address name",
                        "example": "Main office",
                        "minLength": 2
                      },
                      "address_line_1": {
                        "type": "string",
                        "description": "Address line one",
                        "example": "30 Commercial Road",
                        "nullable": true
                      },
                      "address_line_2": {
                        "type": "string",
                        "description": "Address line two",
                        "example": "Finance and Accounting",
                        "nullable": true
                      },
                      "address_line_3": {
                        "type": "string",
                        "description": "Address line three",
                        "example": "Lighthouse Promotions",
                        "nullable": true
                      },
                      "address_line_4": {
                        "type": "string",
                        "description": "Address line four",
                        "example": "PO Box 215",
                        "nullable": true
                      },
                      "postal_code": {
                        "type": "string",
                        "nullable": true,
                        "description": "Address postal code",
                        "example": "75012",
                        "minLength": 2
                      },
                      "city": {
                        "type": "string",
                        "description": "Address city name",
                        "example": "Paris",
                        "minLength": 2
                      },
                      "country": {
                        "type": "string",
                        "description": "Address country",
                        "example": "France",
                        "minLength": 2
                      },
                      "country_code": {
                        "type": "string",
                        "description": "Address country code",
                        "example": "FR",
                        "minLength": 2,
                        "maxLength": 2
                      },
                      "is_invoicing_address": {
                        "readOnly": true,
                        "type": "boolean"
                      },
                      "is_delivery_address": {
                        "readOnly": true,
                        "type": "boolean"
                      },
                      "geocode": {
                        "type": "object",
                        "properties": {
                          "lat": {
                            "type": "number",
                            "nullable": true,
                            "example": 46.140862
                          },
                          "lng": {
                            "type": "number",
                            "nullable": true,
                            "example": -1.168249
                          }
                        },
                        "required": [
                          "lat",
                          "lng"
                        ]
                      }
                    }
                  },
                  "delivery_address": {
                    "$ref": "#/components/schemas/SaleEmbed/properties/_embed/allOf/0/properties/invoicing_address"
                  },
                  "currency": {
                    "type": "object",
                    "title": "Currency",
                    "properties": {
                      "id": {
                        "type": "integer",
                        "description": "Currency Identifier",
                        "readOnly": true,
                        "example": 13
                      },
                      "code": {
                        "type": "string",
                        "description": "Currency code (EUR, USD..)",
                        "readOnly": true,
                        "example": "EUR"
                      },
                      "symbol": {
                        "type": "string",
                        "description": "Currency symbol (€, $)",
                        "example": "€",
                        "readOnly": true
                      },
                      "is_default": {
                        "type": "boolean",
                        "description": "Is default currency?",
                        "example": true
                      }
                    }
                  },
                  "acl": {
                    "title": "EstimateAcl",
                    "type": "object",
                    "description": "",
                    "x-examples": {},
                    "properties": {
                      "can_be_updated": {
                        "type": "boolean",
                        "nullable": true,
                        "description": "Document can be updated",
                        "example": true
                      },
                      "can_be_deleted": {
                        "type": "boolean",
                        "nullable": true,
                        "description": "Document can be deleted",
                        "example": true
                      }
                    }
                  },
                  "payment_method_ids": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "title": "Payment method object",
                      "properties": {
                        "id": {
                          "type": "integer",
                          "description": "Payment method identifier"
                        },
                        "label": {
                          "type": "string",
                          "description": "Payment method label"
                        }
                      }
                    }
                  },
                  "fiscal_year": {
                    "type": "object",
                    "title": "Fiscal year",
                    "properties": {
                      "id": {
                        "type": "integer",
                        "description": "Fiscal year's ID"
                      },
                      "start_at": {
                        "type": "string",
                        "format": "date",
                        "description": "Start date of the fiscal yaer"
                      },
                      "end_at": {
                        "type": "string",
                        "format": "date",
                        "description": "End date of the fiscal year"
                      }
                    }
                  },
                  "smart_tags": {
                    "nullable": true,
                    "description": "Smart-tags linked",
                    "allOf": [
                      {
                        "title": "smart tag",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "value": {
                              "type": "string",
                              "description": "value of smart tags",
                              "example": "smart tag"
                            },
                            "id": {
                              "type": "integer",
                              "description": "Id of smart tags",
                              "example": 55
                            }
                          }
                        }
                      }
                    ]
                  }
                }
              },
              {
                "type": "object",
                "properties": {
                  "custom_fields": {
                    "type": "array",
                    "nullable": true,
                    "description": "Custom-fields values requested",
                    "items": {
                      "anyOf": [
                        {
                          "$ref": "#/paths/~1companies~1%7Bid%7D~1custom-fields/get/responses/200/content/application~1json/schema/properties/data/items/anyOf/0"
                        },
                        {
                          "$ref": "#/paths/~1companies~1%7Bid%7D~1custom-fields/get/responses/200/content/application~1json/schema/properties/data/items/anyOf/1"
                        },
                        {
                          "$ref": "#/paths/~1companies~1%7Bid%7D~1custom-fields/get/responses/200/content/application~1json/schema/properties/data/items/anyOf/2"
                        },
                        {
                          "$ref": "#/paths/~1companies~1%7Bid%7D~1custom-fields/get/responses/200/content/application~1json/schema/properties/data/items/anyOf/3"
                        },
                        {
                          "$ref": "#/paths/~1companies~1%7Bid%7D~1custom-fields/get/responses/200/content/application~1json/schema/properties/data/items/anyOf/4"
                        },
                        {
                          "$ref": "#/paths/~1companies~1%7Bid%7D~1custom-fields/get/responses/200/content/application~1json/schema/properties/data/items/anyOf/5"
                        },
                        {
                          "$ref": "#/paths/~1companies~1%7Bid%7D~1custom-fields/get/responses/200/content/application~1json/schema/properties/data/items/anyOf/6"
                        },
                        {
                          "$ref": "#/paths/~1companies~1%7Bid%7D~1custom-fields/get/responses/200/content/application~1json/schema/properties/data/items/anyOf/7"
                        },
                        {
                          "$ref": "#/paths/~1companies~1%7Bid%7D~1custom-fields/get/responses/200/content/application~1json/schema/properties/data/items/anyOf/8"
                        },
                        {
                          "$ref": "#/paths/~1companies~1%7Bid%7D~1custom-fields/get/responses/200/content/application~1json/schema/properties/data/items/anyOf/9"
                        },
                        {
                          "$ref": "#/paths/~1companies~1%7Bid%7D~1custom-fields/get/responses/200/content/application~1json/schema/properties/data/items/anyOf/10"
                        },
                        {
                          "$ref": "#/paths/~1companies~1%7Bid%7D~1custom-fields/get/responses/200/content/application~1json/schema/properties/data/items/anyOf/11"
                        },
                        {
                          "$ref": "#/paths/~1companies~1%7Bid%7D~1custom-fields/get/responses/200/content/application~1json/schema/properties/data/items/anyOf/12"
                        },
                        {
                          "$ref": "#/paths/~1companies~1%7Bid%7D~1custom-fields/get/responses/200/content/application~1json/schema/properties/data/items/anyOf/13"
                        },
                        {
                          "$ref": "#/paths/~1companies~1%7Bid%7D~1custom-fields/get/responses/200/content/application~1json/schema/properties/data/items/anyOf/14"
                        },
                        {
                          "$ref": "#/paths/~1companies~1%7Bid%7D~1custom-fields/get/responses/200/content/application~1json/schema/properties/data/items/anyOf/15"
                        },
                        {
                          "$ref": "#/paths/~1companies~1%7Bid%7D~1custom-fields/get/responses/200/content/application~1json/schema/properties/data/items/anyOf/16"
                        }
                      ]
                    }
                  }
                }
              }
            ]
          }
        }
      },
      "Address": {
        "type": "object",
        "title": "Address",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true,
            "description": "Unique ID",
            "example": 6657
          },
          "name": {
            "type": "string",
            "description": "Address name",
            "example": "Main office",
            "minLength": 2
          },
          "address_line_1": {
            "type": "string",
            "description": "Address line one",
            "example": "30 Commercial Road",
            "nullable": true
          },
          "address_line_2": {
            "type": "string",
            "description": "Address line two",
            "example": "Finance and Accounting",
            "nullable": true
          },
          "address_line_3": {
            "type": "string",
            "description": "Address line three",
            "example": "Lighthouse Promotions",
            "nullable": true
          },
          "address_line_4": {
            "type": "string",
            "description": "Address line four",
            "example": "PO Box 215",
            "nullable": true
          },
          "postal_code": {
            "type": "string",
            "nullable": true,
            "description": "Address postal code",
            "example": "75012",
            "minLength": 2
          },
          "city": {
            "type": "string",
            "description": "Address city name",
            "example": "Paris",
            "minLength": 2
          },
          "country": {
            "type": "string",
            "description": "Address country",
            "example": "France",
            "minLength": 2
          },
          "country_code": {
            "type": "string",
            "description": "Address country code",
            "example": "FR",
            "minLength": 2,
            "maxLength": 2
          },
          "is_invoicing_address": {
            "readOnly": true,
            "type": "boolean"
          },
          "is_delivery_address": {
            "readOnly": true,
            "type": "boolean"
          },
          "geocode": {
            "type": "object",
            "properties": {
              "lat": {
                "type": "number",
                "nullable": true,
                "example": 46.140862
              },
              "lng": {
                "type": "number",
                "nullable": true,
                "example": -1.168249
              }
            },
            "required": [
              "lat",
              "lng"
            ]
          }
        }
      },
      "AddressCreate": {
        "type": "object",
        "required": [
          "name",
          "address_line_1",
          "postal_code",
          "city",
          "country",
          "country_code"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Address name",
            "example": "Main office",
            "minLength": 2,
            "nullable": false
          },
          "address_line_1": {
            "type": "string",
            "description": "Address line one",
            "example": "30 Commercial Road",
            "nullable": false
          },
          "address_line_2": {
            "type": "string",
            "description": "Address line two",
            "example": "Finance and Accounting",
            "nullable": true
          },
          "address_line_3": {
            "type": "string",
            "description": "Address line three",
            "example": "Lighthouse Promotions",
            "nullable": true
          },
          "address_line_4": {
            "type": "string",
            "description": "Address line four",
            "example": "PO Box 215",
            "nullable": true
          },
          "postal_code": {
            "type": "string",
            "nullable": false,
            "description": "Address postal code",
            "example": "75012",
            "minLength": 2
          },
          "city": {
            "type": "string",
            "description": "Address city name",
            "example": "Paris",
            "minLength": 2,
            "nullable": false
          },
          "country": {
            "type": "string",
            "description": "Address country",
            "example": "France",
            "minLength": 2,
            "nullable": false
          },
          "country_code": {
            "type": "string",
            "description": "Address country code",
            "example": "FR",
            "minLength": 2,
            "maxLength": 2,
            "nullable": false
          },
          "is_invoicing_address": {
            "type": "boolean",
            "description": "default to true if no invoicing address is already defined, false otherwise"
          },
          "is_delivery_address": {
            "type": "boolean",
            "description": "default to true if no delivery address is already defined, false otherwise"
          },
          "geocode": {
            "type": "object",
            "properties": {
              "lat": {
                "type": "number",
                "nullable": true,
                "example": 46.140862
              },
              "lng": {
                "type": "number",
                "nullable": true,
                "example": -1.168249
              }
            },
            "required": [
              "lat",
              "lng"
            ]
          }
        }
      },
      "AddressUpdate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Address name",
            "example": "Main office",
            "minLength": 2,
            "nullable": false
          },
          "address_line_1": {
            "type": "string",
            "description": "Address line one",
            "example": "30 Commercial Road",
            "nullable": false
          },
          "address_line_2": {
            "type": "string",
            "description": "Address line two",
            "example": "Finance and Accounting",
            "nullable": true
          },
          "address_line_3": {
            "type": "string",
            "description": "Address line three",
            "example": "Lighthouse Promotions",
            "nullable": true
          },
          "address_line_4": {
            "type": "string",
            "description": "Address line four",
            "example": "PO Box 215",
            "nullable": true
          },
          "postal_code": {
            "type": "string",
            "nullable": false,
            "description": "Address postal code",
            "example": "75012",
            "minLength": 2
          },
          "city": {
            "type": "string",
            "description": "Address city name",
            "example": "Paris",
            "minLength": 2,
            "nullable": false
          },
          "country": {
            "type": "string",
            "description": "Address country",
            "example": "France",
            "minLength": 2,
            "nullable": false
          },
          "country_code": {
            "type": "string",
            "description": "Address country code",
            "example": "FR",
            "minLength": 2,
            "maxLength": 2,
            "nullable": false
          },
          "is_invoicing_address": {
            "type": "boolean"
          },
          "is_delivery_address": {
            "type": "boolean"
          },
          "geocode": {
            "type": "object",
            "properties": {
              "lat": {
                "type": "number",
                "nullable": true,
                "example": 46.140862
              },
              "lng": {
                "type": "number",
                "nullable": true,
                "example": -1.168249
              }
            },
            "required": [
              "lat",
              "lng"
            ]
          }
        }
      },
      "Staff": {
        "title": "Staff Schemas",
        "description": "Staff schemas according of current user level of visibility on staffs",
        "allOf": [
          {
            "title": "Staff restricted visibility",
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "readOnly": true,
                "description": "Unique ID",
                "example": 6657
              },
              "lastname": {
                "type": "string",
                "description": "Staff last name",
                "example": "Smith",
                "maxLength": 200,
                "nullable": true
              },
              "firstname": {
                "type": "string",
                "description": "Staff first name",
                "example": "John",
                "maxLength": 200,
                "nullable": true
              },
              "email": {
                "type": "string",
                "format": "email",
                "description": "Staff email address",
                "example": "john@example-company.com"
              },
              "avatar": {
                "type": "string",
                "nullable": true,
                "description": "Avatar url",
                "format": "uri",
                "readOnly": true
              },
              "status": {
                "type": "string",
                "description": "Staff status",
                "enum": [
                  "ok",
                  "blocked",
                  "deleted"
                ],
                "readOnly": true
              },
              "position": {
                "type": "string",
                "description": "Staff position",
                "example": "Sales manager",
                "nullable": true
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "phone_number": {
                "type": "string",
                "description": "Staff phone number",
                "example": "+33100000000",
                "nullable": true
              },
              "mobile_number": {
                "type": "string",
                "description": "Staff mobile number",
                "example": "+33600000000",
                "nullable": true
              },
              "fax_number": {
                "type": "string",
                "description": "Staff fax number",
                "example": "+33500000000",
                "nullable": true
              },
              "groups": {
                "type": "array",
                "nullable": true,
                "description": "Staff groups",
                "readOnly": true,
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "example": 1
                    },
                    "name": {
                      "type": "string",
                      "example": "Sales"
                    }
                  }
                }
              },
              "civility": {
                "type": "string",
                "description": "Civility of staff",
                "example": "mrs",
                "nullable": true,
                "enum": [
                  "mr",
                  "mrs",
                  "ms"
                ]
              },
              "created": {
                "type": "string",
                "description": "Creation date of the staff",
                "format": "date-time",
                "example": "1970-01-01T00:00:00+00:00",
                "readOnly": true
              },
              "profile": {
                "type": "integer",
                "description": "Staff privilège profile",
                "example": 3443
              },
              "team": {
                "nullable": true,
                "type": "object",
                "properties": {
                  "id": {
                    "type": "integer",
                    "example": -1
                  },
                  "name": {
                    "type": "string",
                    "example": "Commercial"
                  }
                },
                "description": "Staff team position"
              },
              "job": {
                "nullable": true,
                "type": "object",
                "properties": {
                  "id": {
                    "type": "integer",
                    "example": -1
                  },
                  "name": {
                    "type": "string",
                    "example": "Office manager"
                  }
                },
                "description": "Staff job"
              },
              "timezone": {
                "type": "string",
                "description": "Staff time zone",
                "example": "Europe/Paris"
              },
              "language": {
                "type": "string",
                "description": "Staff language",
                "example": "fr"
              }
            }
          }
        ]
      },
      "StaffRestrictedView": {
        "title": "Staff restricted visibility",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true,
            "description": "Unique ID",
            "example": 6657
          },
          "lastname": {
            "type": "string",
            "description": "Staff last name",
            "example": "Smith",
            "maxLength": 200,
            "nullable": true
          },
          "firstname": {
            "type": "string",
            "description": "Staff first name",
            "example": "John",
            "maxLength": 200,
            "nullable": true
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "Staff email address",
            "example": "john@example-company.com"
          },
          "avatar": {
            "type": "string",
            "nullable": true,
            "description": "Avatar url",
            "format": "uri",
            "readOnly": true
          },
          "status": {
            "type": "string",
            "description": "Staff status",
            "enum": [
              "ok",
              "blocked",
              "deleted"
            ],
            "readOnly": true
          },
          "position": {
            "type": "string",
            "description": "Staff position",
            "example": "Sales manager",
            "nullable": true
          }
        }
      },
      "StaffUpdateItem": {
        "title": "Staff",
        "description": "Staff update request body",
        "type": "object",
        "properties": {
          "lastname": {
            "type": "string",
            "description": "Staff last name",
            "example": "Smith",
            "maxLength": 200,
            "nullable": false
          },
          "firstname": {
            "type": "string",
            "description": "Staff first name",
            "example": "John",
            "maxLength": 200,
            "nullable": false
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "Staff email address",
            "example": "john@example-company.com"
          },
          "phone_number": {
            "type": "string",
            "description": "Staff phone number",
            "example": "+33100000000",
            "nullable": true
          },
          "mobile_number": {
            "type": "string",
            "description": "Staff mobile number",
            "example": "+33600000000",
            "nullable": true
          },
          "fax_number": {
            "type": "string",
            "description": "Staff fax number",
            "example": "+33500000000",
            "nullable": true
          },
          "civility": {
            "type": "string",
            "description": "Civility of staff",
            "example": "mrs",
            "nullable": true,
            "enum": [
              "mr",
              "mrs",
              "ms"
            ]
          },
          "position": {
            "type": "string",
            "description": "Staff position",
            "example": "Sales manager",
            "maxLength": 200,
            "nullable": true
          },
          "profile": {
            "type": "integer",
            "description": "Staff privilège profile",
            "example": 3443
          },
          "team": {
            "type": "integer",
            "description": "Staff team position",
            "example": -1
          },
          "job": {
            "type": "integer",
            "description": "Staff job",
            "example": -1
          },
          "timezone": {
            "type": "string",
            "description": "Staff time zone",
            "example": "Europe/Paris"
          },
          "language": {
            "type": "string",
            "description": "Staff language",
            "example": "fr"
          },
          "licenses": {
            "title": "Licenses",
            "type": "array",
            "minItems": 0,
            "maxItems": 1,
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "License identifier",
                  "example": "9998a80a-7b75-4616-96d5-7ccff7ac08e8"
                }
              }
            }
          }
        }
      },
      "StaffPreferences": {
        "title": "Staff preferences",
        "type": "object",
        "properties": {
          "timezone": {
            "type": "string",
            "description": "Staff timezone",
            "example": "Europe/Paris"
          },
          "format_phone_number": {
            "readOnly": true,
            "type": "string",
            "description": "display phone number format",
            "enum": [
              "international",
              "national"
            ],
            "example": "international"
          },
          "format_date": {
            "readOnly": true,
            "type": "string",
            "description": "display date format",
            "example": "DD-MM-YYYY",
            "enum": [
              "MM-DD-YYYY",
              "DD-MM-YYYY"
            ]
          },
          "format_hour": {
            "readOnly": true,
            "type": "string",
            "description": "display hour format",
            "example": 24,
            "enum": [
              12,
              24
            ]
          },
          "currency": {
            "readOnly": true,
            "type": "string",
            "description": "current currency for staff",
            "example": "EUR"
          }
        }
      },
      "StaffAcl": {
        "title": "Staff ACL",
        "type": "object",
        "description": "",
        "x-examples": {},
        "properties": {
          "view_companies": {
            "type": "boolean",
            "nullable": false,
            "description": "Is allowed to view companies",
            "example": true
          },
          "create_companies": {
            "type": "boolean",
            "nullable": false,
            "description": "Is allowed to create companies",
            "example": true
          },
          "update_companies": {
            "type": "boolean",
            "nullable": false,
            "description": "Is allowed to update companies",
            "example": true
          },
          "delete_companies": {
            "type": "boolean",
            "nullable": false,
            "description": "Is allowed to delete companies",
            "example": true
          },
          "view_individuals": {
            "type": "boolean",
            "nullable": false,
            "description": "Is allowed to view individuals",
            "example": true
          },
          "create_individuals": {
            "type": "boolean",
            "nullable": false,
            "description": "Is allowed to create individuals",
            "example": true
          },
          "update_individuals": {
            "type": "boolean",
            "nullable": false,
            "description": "Is allowed to update individuals",
            "example": true
          },
          "delete_individuals": {
            "type": "boolean",
            "nullable": false,
            "description": "Is allowed to delete individuals",
            "example": true
          },
          "view_clients": {
            "type": "boolean",
            "nullable": false,
            "description": "Is allowed to view clients",
            "example": true
          },
          "create_clients": {
            "type": "boolean",
            "nullable": false,
            "description": "Is allowed to create clients",
            "example": true
          },
          "update_clients": {
            "type": "boolean",
            "nullable": false,
            "description": "Is allowed to update clients",
            "example": true
          },
          "delete_clients": {
            "type": "boolean",
            "nullable": false,
            "description": "Is allowed to delete clients",
            "example": true
          },
          "view_prospects": {
            "type": "boolean",
            "nullable": false,
            "description": "Is allowed to view prospects",
            "example": true
          },
          "create_prospects": {
            "type": "boolean",
            "nullable": false,
            "description": "Is allowed to create prospects",
            "example": true
          },
          "update_prospects": {
            "type": "boolean",
            "nullable": false,
            "description": "Is allowed to update prospects",
            "example": true
          },
          "delete_prospects": {
            "type": "boolean",
            "nullable": false,
            "description": "Is allowed to delete prospects",
            "example": true
          },
          "view_suppliers": {
            "type": "boolean",
            "nullable": false,
            "description": "Is allowed to view suppliers",
            "example": true
          },
          "create_suppliers": {
            "type": "boolean",
            "nullable": false,
            "description": "Is allowed to create suppliers",
            "example": true
          },
          "update_suppliers": {
            "type": "boolean",
            "nullable": false,
            "description": "Is allowed to update suppliers",
            "example": true
          },
          "delete_suppliers": {
            "type": "boolean",
            "nullable": false,
            "description": "Is allowed to delete suppliers",
            "example": true
          },
          "create_contacts": {
            "type": "boolean",
            "nullable": false,
            "description": "Is allowed to create contacts",
            "example": true
          },
          "update_contacts": {
            "type": "boolean",
            "nullable": false,
            "description": "Is allowed to update contacts",
            "example": true
          },
          "delete_contacts": {
            "type": "boolean",
            "nullable": false,
            "description": "Is allowed to delete contacts",
            "example": true
          },
          "view_opportunities": {
            "type": "boolean",
            "nullable": false,
            "description": "Is allowed to view opportunities",
            "example": true
          },
          "create_opportunities": {
            "type": "boolean",
            "nullable": false,
            "description": "Is allowed to create opportunities",
            "example": true
          },
          "update_opportunities": {
            "type": "boolean",
            "nullable": false,
            "description": "Is allowed to update opportunities",
            "example": true
          },
          "delete_opportunities": {
            "type": "boolean",
            "nullable": false,
            "description": "Is allowed to delete opportunities",
            "example": true
          },
          "view_estimates": {
            "type": "boolean",
            "nullable": false,
            "description": "Is allowed to view estimates",
            "example": true
          },
          "create_estimates": {
            "type": "boolean",
            "nullable": false,
            "description": "Is allowed to create estimates",
            "example": true
          },
          "view_phone_calls": {
            "type": "boolean",
            "nullable": false,
            "description": "Is allowed to view phone calls",
            "example": true
          },
          "create_phone_calls": {
            "type": "boolean",
            "nullable": false,
            "description": "Is allowed to create phone calls",
            "example": true
          },
          "update_phone_calls": {
            "type": "boolean",
            "nullable": false,
            "description": "Is allowed to update phone calls",
            "example": true
          },
          "delete_phone_calls": {
            "type": "boolean",
            "nullable": false,
            "description": "Is allowed to delete phone calls",
            "example": true
          },
          "view_invoices": {
            "type": "boolean",
            "nullable": false,
            "description": "Is allowed to view invoices",
            "example": true
          },
          "create_invoices": {
            "type": "boolean",
            "nullable": false,
            "description": "Is allowed to create invoices",
            "example": true
          },
          "update_invoices": {
            "type": "boolean",
            "nullable": false,
            "description": "Is allowed to update invoices",
            "example": true
          },
          "delete_invoices": {
            "type": "boolean",
            "nullable": false,
            "description": "Is allowed to delete invoices",
            "example": true
          },
          "validate_invoices": {
            "type": "boolean",
            "nullable": false,
            "description": "Is allowed to validate invoices"
          },
          "view_credit_notes": {
            "type": "boolean",
            "nullable": false,
            "description": "Is allowed to view credit notes",
            "example": true
          },
          "create_credit_notes": {
            "type": "boolean",
            "nullable": false,
            "description": "Is allowed to create credit notes",
            "example": true
          },
          "update_credit_notes": {
            "type": "boolean",
            "nullable": false,
            "description": "Is allowed to update credit notes",
            "example": true
          },
          "delete_credit_notes": {
            "type": "boolean",
            "nullable": false,
            "description": "Is allowed to delete credit notes",
            "example": true
          },
          "validate_credit_notes": {
            "type": "boolean",
            "nullable": false,
            "description": "Is allowed to validate credit notes",
            "example": true
          },
          "view_cashflow": {
            "type": "boolean",
            "nullable": false,
            "description": "Is allowed to view cashflow",
            "example": true
          },
          "create_cashflow": {
            "type": "boolean",
            "nullable": false,
            "description": "Is allowed to create cashflow",
            "example": true
          }
        }
      },
      "StaffCreateItem": {
        "title": "Staff",
        "description": "Staff creation request body",
        "type": "object",
        "properties": {
          "lastname": {
            "type": "string",
            "description": "Staff last name",
            "example": "Smith",
            "maxLength": 200,
            "nullable": false
          },
          "firstname": {
            "type": "string",
            "description": "Staff first name",
            "example": "John",
            "maxLength": 200,
            "nullable": false
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "Staff email address",
            "example": "john@example-company.com"
          },
          "phone_number": {
            "type": "string",
            "description": "Staff phone number",
            "example": "+33100000000",
            "nullable": true
          },
          "mobile_number": {
            "type": "string",
            "description": "Staff mobile number",
            "example": "+33600000000",
            "nullable": true
          },
          "fax_number": {
            "type": "string",
            "description": "Staff fax number",
            "example": "+33500000000",
            "nullable": true
          },
          "civility": {
            "type": "string",
            "description": "Civility of staff",
            "example": "mrs",
            "nullable": true,
            "enum": [
              "mr",
              "mrs",
              "ms"
            ]
          },
          "position": {
            "type": "string",
            "description": "Staff position",
            "example": "Sales manager",
            "maxLength": 200,
            "nullable": true
          },
          "profile": {
            "type": "integer",
            "description": "Staff privilège profile",
            "example": 3443
          },
          "team": {
            "type": "integer",
            "description": "Staff team position",
            "example": -1
          },
          "job": {
            "type": "integer",
            "description": "Staff job",
            "example": -1
          },
          "timezone": {
            "type": "string",
            "description": "Staff time zone",
            "example": "Europe/Paris"
          },
          "language": {
            "type": "string",
            "description": "Staff language",
            "example": "fr"
          },
          "first_connection_onboarding": {
            "type": "boolean",
            "description": "Staff onboarding on first connection",
            "example": true
          },
          "licenses": {
            "title": "Licenses",
            "type": "array",
            "minItems": 0,
            "maxItems": 1,
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "License identifier",
                  "example": "9998a80a-7b75-4616-96d5-7ccff7ac08e8"
                }
              }
            }
          }
        },
        "required": [
          "email",
          "civility",
          "lastname",
          "firstname",
          "profile",
          "team",
          "job",
          "timezone",
          "language",
          "first_connection_onboarding"
        ]
      },
      "StaffAutocompleteResultItem": {
        "type": "object",
        "title": "Staff search result",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true,
            "description": "Unique ID",
            "example": 6657
          },
          "object": {
            "type": "object",
            "description": "Main object",
            "properties": {
              "type": {
                "type": "string",
                "default": "staff"
              },
              "sub_type": {
                "type": "string",
                "default": "staff",
                "nullable": true
              },
              "id": {
                "type": "integer",
                "example": 11
              }
            }
          },
          "owner": {
            "allOf": [
              {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "integer",
                    "readOnly": true,
                    "description": "Unique ID",
                    "example": 6657
                  },
                  "type": {
                    "type": "string",
                    "readOnly": true,
                    "description": "Type of owner",
                    "example": "staff"
                  }
                }
              }
            ],
            "readOnly": true
          },
          "created": {
            "type": "string",
            "format": "datetime",
            "description": "Created datetime of object",
            "example": "2020-05-29T11:22:03+02:00",
            "readOnly": true
          },
          "updated": {
            "type": "string",
            "format": "datetime",
            "description": "updated datetime of object",
            "example": "2020-05-29T11:22:03+02:00",
            "readOnly": true
          },
          "is_archived": {
            "type": "boolean",
            "description": "Staff status is archived",
            "example": false
          },
          "first_name": {
            "description": "Staff first name",
            "type": "string",
            "format": "text",
            "example": "John",
            "nullable": true
          },
          "last_name": {
            "description": "Staff last name",
            "type": "string",
            "format": "text",
            "example": "Doe",
            "nullable": true
          },
          "phone_number": {
            "type": "string",
            "description": "Staff phone number",
            "example": "+33100000000",
            "nullable": true
          },
          "mobile_number": {
            "type": "string",
            "description": "Staff mobile number",
            "example": "+33100000000",
            "nullable": true
          },
          "blocked": {
            "description": "Staff active status",
            "type": "boolean"
          },
          "email": {
            "description": "Staff email",
            "type": "string",
            "format": "email",
            "example": "john.doe@example-company.com",
            "nullable": true
          },
          "position": {
            "type": "string",
            "nullable": true,
            "description": "Staff job",
            "example": "Financial"
          }
        }
      },
      "Social": {
        "type": "object",
        "properties": {
          "twitter": {
            "type": "string",
            "format": "url",
            "description": "Twitter account",
            "example": "https://twitter.com/example",
            "nullable": true
          },
          "facebook": {
            "type": "string",
            "format": "url",
            "description": "Facebook account",
            "example": "https://facebook.com/example",
            "nullable": true
          },
          "linkedin": {
            "type": "string",
            "format": "url",
            "description": "Linkedin account",
            "example": "https://linkedin.com/example",
            "nullable": true
          },
          "viadeo": {
            "type": "string",
            "format": "url",
            "description": "Viadeo account",
            "example": "https://viadeo.com/example",
            "nullable": true
          }
        }
      },
      "Owner": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true,
            "description": "Unique ID",
            "example": 6657
          },
          "type": {
            "type": "string",
            "readOnly": true,
            "description": "Type of owner",
            "example": "staff"
          }
        }
      },
      "Pagination": {
        "title": "pagination",
        "type": "object",
        "description": "The pagination",
        "properties": {
          "limit": {
            "type": "integer",
            "example": 25,
            "minimum": 0,
            "maximum": 100
          },
          "total": {
            "type": "integer",
            "example": 152,
            "minimum": 0
          },
          "count": {
            "type": "integer",
            "example": 25,
            "minimum": 0
          },
          "offset": {
            "anyOf": [
              {
                "type": "integer",
                "minimum": 0,
                "example": 25
              },
              {
                "type": "string",
                "example": "WzIwMTQtMDEtMDEsNTk4XQ=="
              }
            ]
          }
        },
        "required": [
          "limit",
          "total",
          "count",
          "offset"
        ]
      },
      "CrmActivity": {
        "type": "object",
        "description": "The CRM activity",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id of activity"
          },
          "due_date": {
            "type": "string",
            "format": "date-time",
            "description": "Due date of activity"
          },
          "date": {
            "type": "string",
            "description": "Date of activity",
            "format": "date-time"
          },
          "related": {
            "type": "object",
            "nullable": true,
            "description": "Related object of activity",
            "required": [
              "type",
              "id",
              "name"
            ],
            "properties": {
              "type": {
                "type": "string",
                "example": "third",
                "pattern": "^[a-zA-Z_-]+$"
              },
              "name": {
                "type": "string",
                "example": "My companies",
                "minLength": 1
              },
              "id": {
                "oneOf": [
                  {
                    "type": "string",
                    "example": 1056,
                    "minLength": 1
                  },
                  {
                    "type": "integer",
                    "example": 1056,
                    "minimum": 1
                  },
                  {
                    "type": "array",
                    "items": {
                      "oneOf": [
                        {
                          "type": "string",
                          "example": 1056,
                          "minLength": 1
                        },
                        {
                          "type": "integer",
                          "example": 1056,
                          "minimum": 1
                        }
                      ]
                    }
                  }
                ]
              }
            }
          },
          "companies": {
            "type": "array",
            "description": "Related companies of activity",
            "minItems": 0,
            "items": {
              "type": "object",
              "description": "Company",
              "required": [
                "type",
                "id",
                "name"
              ],
              "properties": {
                "type": {
                  "type": "string",
                  "example": "client",
                  "enum": [
                    "prospect",
                    "client",
                    "supplier"
                  ]
                },
                "id": {
                  "type": "integer",
                  "example": 1056,
                  "minimum": 1
                },
                "name": {
                  "type": "string",
                  "example": "My companies",
                  "minLength": 1
                }
              }
            }
          },
          "people": {
            "type": "object",
            "description": "Related people of activity",
            "nullable": true,
            "required": [
              "id",
              "name"
            ],
            "properties": {
              "id": {
                "type": "integer",
                "example": 1056,
                "minimum": 1
              },
              "name": {
                "type": "string",
                "example": "My companies",
                "minLength": 1
              }
            }
          },
          "event": {
            "type": "string",
            "enum": [
              "email.sent",
              "email.link.sent",
              "task.completed",
              "phonecall.created",
              "calendar_event.created",
              "email.scheduled.sent"
            ],
            "description": "Event type"
          },
          "author": {
            "$ref": "#/components/schemas/Activity/properties/_embed/properties/author"
          },
          "object": {
            "type": "object",
            "description": "Event object of activity",
            "required": [
              "type",
              "id"
            ],
            "properties": {
              "type": {
                "type": "string",
                "example": "task",
                "pattern": "^[a-zA-Z_-]+$"
              },
              "id": {
                "oneOf": [
                  {
                    "type": "string",
                    "example": 1056,
                    "minLength": 1
                  },
                  {
                    "type": "integer",
                    "example": 1056,
                    "minimum": 1
                  },
                  {
                    "type": "array",
                    "items": {
                      "oneOf": [
                        {
                          "type": "string",
                          "example": 1056,
                          "minLength": 1
                        },
                        {
                          "type": "integer",
                          "example": 1056,
                          "minimum": 1
                        }
                      ]
                    }
                  }
                ]
              }
            }
          },
          "more": {
            "type": "object",
            "description": "Additional informations",
            "example": {
              "old": "client",
              "new": "prospect"
            },
            "additionalProperties": true
          }
        },
        "required": [
          "id",
          "due_date",
          "date",
          "related",
          "people",
          "companies",
          "event",
          "author",
          "object",
          "more"
        ]
      },
      "CrmActivityFilters": {
        "title": "activityFilter",
        "type": "object",
        "description": "The activity filters",
        "properties": {
          "filters": {
            "type": "object",
            "description": "Activity filters",
            "properties": {
              "date": {
                "type": "object",
                "description": "The filter by date",
                "nullable": true,
                "properties": {
                  "start": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "end": {
                    "type": "string",
                    "format": "date-time"
                  }
                },
                "additionalProperties": false
              },
              "due_date": {
                "type": "object",
                "description": "The filter by due date",
                "nullable": true,
                "properties": {
                  "start": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "end": {
                    "type": "string",
                    "format": "date-time"
                  }
                },
                "additionalProperties": false
              },
              "events": {
                "type": "array",
                "description": "The filter by events",
                "minItems": 1,
                "nullable": true,
                "example": [
                  "email.sent",
                  "annotation.created"
                ],
                "items": {
                  "type": "string"
                }
              },
              "authors": {
                "type": "array",
                "description": "The filter by authors",
                "minItems": 1,
                "nullable": true,
                "example": [
                  5,
                  15
                ],
                "items": {
                  "type": "integer"
                }
              },
              "companies": {
                "type": "object",
                "description": "The filter by companies",
                "nullable": true,
                "minProperties": 1,
                "properties": {
                  "match": {
                    "type": "array",
                    "nullable": true,
                    "description": "Search activities related to one or more companies. If empty, search activities without related companies.\n",
                    "example": [
                      58,
                      105
                    ],
                    "items": {
                      "type": "integer",
                      "minimum": 1
                    }
                  },
                  "not_match": {
                    "type": "array",
                    "nullable": true,
                    "description": "Search activities not related to one or more companies. If empty, search activities with one or more related companies\n",
                    "example": [],
                    "items": {
                      "type": "integer",
                      "minimum": 1
                    }
                  }
                }
              },
              "peoples": {
                "type": "object",
                "description": "The filter by peoples",
                "nullable": true,
                "minProperties": 1,
                "properties": {
                  "match": {
                    "type": "array",
                    "nullable": true,
                    "description": "Search activities related to one or more peoples. If empty, search activities without related peoples.\n",
                    "example": [
                      58,
                      105
                    ],
                    "items": {
                      "type": "integer",
                      "minimum": 1
                    }
                  },
                  "not_match": {
                    "type": "array",
                    "nullable": true,
                    "description": "Search activities not related to one or more peoples. If empty, search activities with one or more related peoples\n",
                    "example": [],
                    "items": {
                      "type": "integer",
                      "minimum": 1
                    }
                  }
                }
              },
              "event.labels": {
                "type": "array",
                "description": "The filter by event labels",
                "minItems": 1,
                "nullable": true,
                "example": [
                  5,
                  15
                ],
                "items": {
                  "type": "integer"
                }
              },
              "task.labels": {
                "$ref": "#/components/schemas/CrmActivityFilters/properties/filters/properties/event.labels"
              },
              "phonecall.statuses": {
                "type": "array",
                "description": "The filter by phonecall statuses",
                "minItems": 1,
                "nullable": true,
                "example": [
                  "busy",
                  "wrongnumber"
                ],
                "items": {
                  "type": "string"
                }
              },
              "phonecall.sources": {
                "type": "array",
                "description": "The filter by phonecall sources",
                "minItems": 1,
                "nullable": true,
                "example": [
                  "incoming",
                  "outcoming"
                ],
                "items": {
                  "type": "string"
                }
              },
              "phonecall.labels": {
                "type": "array",
                "description": "The filter by phonecall labels",
                "minItems": 1,
                "nullable": true,
                "example": [
                  5,
                  15
                ],
                "items": {
                  "type": "integer"
                }
              },
              "related.types": {
                "type": "object",
                "description": "The filter by related types",
                "nullable": true,
                "minProperties": 1,
                "properties": {
                  "match": {
                    "type": "array",
                    "nullable": true,
                    "description": "Search activities related to one or more types.\n",
                    "example": [
                      "document",
                      "third"
                    ],
                    "items": {
                      "type": "string",
                      "enum": [
                        "document",
                        "third",
                        "opportunity",
                        "people"
                      ]
                    }
                  },
                  "not_match": {
                    "type": "array",
                    "nullable": true,
                    "description": "Search activities not related to one or more types.\n",
                    "example": [],
                    "items": {
                      "type": "string",
                      "enum": [
                        "document",
                        "third",
                        "opportunity",
                        "people"
                      ]
                    }
                  }
                }
              }
            },
            "additionalProperties": false
          }
        },
        "required": [
          "filters"
        ]
      },
      "CrmActivityAggregations": {
        "title": "activityAggregations",
        "type": "object",
        "description": "The activity aggregations",
        "properties": {
          "by_event": {
            "type": "object",
            "description": "Count activity by event",
            "properties": {
              "email.sent": {
                "type": "integer",
                "example": 5,
                "minimum": 0
              },
              "email.link.sent": {
                "type": "integer",
                "example": 5,
                "minimum": 0
              },
              "calendar_event.created": {
                "type": "integer",
                "example": 1,
                "minimum": 0
              },
              "phonecall.created": {
                "type": "integer",
                "example": 0,
                "minimum": 0
              },
              "task.completed": {
                "type": "integer",
                "example": 6,
                "minimum": 0
              }
            },
            "additionalProperties": true
          },
          "by_month_and_event": {
            "type": "object",
            "description": "Count activity by month and by event. Key are the first day of the month",
            "additionalProperties": true,
            "example": {
              "2021-05-01": {
                "event.created": 36,
                "email.sent": 75
              },
              "2021-06-01": {
                "event.created": 12,
                "email.sent": 25
              }
            }
          },
          "by_week_and_event": {
            "type": "object",
            "description": "Count activity by week and by event. Key are the first day of the week",
            "additionalProperties": true,
            "example": {
              "2021-05-24": {
                "email.sent": 13,
                "task.completed": 27
              },
              "2021-05-31": {
                "email.sent": 8,
                "task.completed": 4
              }
            }
          },
          "by_day_and_event": {
            "type": "object",
            "description": "Count activity by day and by event.",
            "additionalProperties": true,
            "example": {
              "2021-06-29": {
                "event.created": 2
              },
              "2021-06-30": {
                "email.sent": 6
              }
            }
          },
          "by_author_and_event": {
            "type": "object",
            "description": "Count activity by author and event.",
            "additionalProperties": true,
            "example": {
              "1": {
                "phonecall.created": 57,
                "event.created": 24,
                "email.sent": 5
              },
              "95": {
                "task.completed": 1
              }
            }
          },
          "by_author_and_label": {
            "type": "object",
            "description": "Count activity by author and event then by label id.",
            "additionalProperties": true,
            "example": {
              "1": {
                "event.created": {
                  "0": 17,
                  "2377730": 1
                },
                "phonecall.created": [],
                "task.completed": {
                  "5": 1
                }
              },
              "95": {
                "task.completed": []
              }
            }
          }
        }
      },
      "CrmActivityMetas": {
        "title": "listingMeta",
        "type": "object",
        "description": "The listing meta",
        "properties": {
          "authors": {
            "type": "array",
            "description": "List of authors",
            "minItems": 1,
            "items": {
              "$ref": "#/components/schemas/Activity/properties/_embed/properties/author"
            }
          },
          "task": {
            "type": "object",
            "description": "The task metas",
            "required": [
              "labels"
            ],
            "properties": {
              "labels": {
                "type": "array",
                "description": "List of event labels",
                "minItems": 1,
                "items": {
                  "type": "object",
                  "description": "The label",
                  "required": [
                    "id",
                    "label"
                  ],
                  "properties": {
                    "id": {
                      "type": "integer",
                      "minimum": 1,
                      "description": "Label identifier",
                      "example": 156
                    },
                    "label": {
                      "type": "string",
                      "minLength": 1,
                      "description": "Label",
                      "example": "Remember"
                    },
                    "color": {
                      "type": "string",
                      "example": "#f7dcf5",
                      "description": "Color of label",
                      "nullable": true
                    }
                  }
                }
              }
            }
          },
          "event": {
            "type": "object",
            "description": "The event metas",
            "required": [
              "labels"
            ],
            "properties": {
              "labels": {
                "type": "array",
                "description": "List of event labels",
                "minItems": 1,
                "items": {
                  "$ref": "#/components/schemas/CrmActivityMetas/properties/task/properties/labels/items"
                }
              }
            }
          },
          "phonecall": {
            "type": "object",
            "description": "The phonecall metas",
            "required": [
              "statuses",
              "labels"
            ],
            "properties": {
              "labels": {
                "type": "array",
                "description": "List of phonecall labels",
                "minItems": 1,
                "items": {
                  "$ref": "#/components/schemas/CrmActivityMetas/properties/task/properties/labels/items"
                }
              },
              "statuses": {
                "type": "array",
                "description": "List of statuses",
                "minItems": 1,
                "items": {
                  "type": "object",
                  "description": "The status",
                  "required": [
                    "id",
                    "label"
                  ],
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Label identifier",
                      "example": "connected"
                    },
                    "label": {
                      "type": "string",
                      "minLength": 1,
                      "description": "Label",
                      "example": "Remenber"
                    }
                  }
                }
              }
            }
          },
          "permissions": {
            "type": "object",
            "description": "The permissions",
            "required": [
              "favorite",
              "export"
            ],
            "properties": {
              "favorite": {
                "type": "boolean",
                "description": "Can access to export"
              },
              "export": {
                "type": "boolean",
                "description": "Can access to favorite"
              }
            }
          }
        },
        "required": [
          "permissions",
          "event",
          "task",
          "authors",
          "phonecall"
        ]
      },
      "ExportParams": {
        "title": "exportParams",
        "type": "object",
        "description": "The output params",
        "x-examples": {
          "example-1": {
            "output_format": "csv",
            "charset": "UTF-8",
            "columns": [
              "date",
              "due_date"
            ]
          }
        },
        "properties": {
          "output_format": {
            "description": "Output format of file",
            "default": "pdf",
            "enum": [
              "csv",
              "pdf"
            ],
            "type": "string"
          },
          "charset": {
            "description": "Output charset for export",
            "default": "UTF-8",
            "enum": [
              "UTF-8",
              "ISO-8859-1"
            ],
            "type": "string"
          },
          "columns": {
            "description": "List of specifics columns to export",
            "nullable": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "output_format",
          "charset"
        ]
      },
      "AccountingJournalExportParams": {
        "title": "exportParams",
        "type": "object",
        "description": "The output params",
        "x-examples": {
          "example-1": {
            "output_format": "csv",
            "charset": "UTF-8",
            "columns": [
              "date",
              "due_date"
            ]
          }
        },
        "properties": {
          "output_format": {
            "description": "Output format of file",
            "default": "csv",
            "enum": [
              "csv",
              "fec"
            ],
            "type": "string"
          },
          "charset": {
            "description": "Output charset for export",
            "default": "UTF-8",
            "enum": [
              "UTF-8",
              "ISO-8859-1"
            ],
            "type": "string"
          },
          "columns": {
            "description": "List of specifics columns to export.",
            "nullable": true,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "type",
                "document.public_link",
                "company-individual.reference",
                "document.service_end_date",
                "document.service_start_date",
                "document.currency",
                "date",
                "document.subject",
                "company-individual.name",
                "code.label",
                "document.external_reference",
                "document.external_reference",
                "debit",
                "credit",
                "analytic_code",
                "analytic_plan",
                "code.value",
                "document.due_date",
                "auxiliary_code",
                "document.number",
                "label",
                "amount.direction",
                "amount.value",
                "accounting_type"
              ]
            }
          }
        },
        "required": [
          "output_format",
          "charset"
        ]
      },
      "ListingUserContext": {
        "title": "listingUserContext",
        "type": "object",
        "description": "The saved user context for listings",
        "properties": {
          "sorting": {
            "nullable": true,
            "type": "object",
            "description": "The listing sorting",
            "required": [
              "field",
              "direction"
            ],
            "properties": {
              "field": {
                "type": "string"
              },
              "direction": {
                "type": "string",
                "enum": [
                  "asc",
                  "desc"
                ]
              }
            }
          },
          "pagination": {
            "nullable": true,
            "type": "object",
            "description": "The listing pagination",
            "required": [
              "current_page"
            ],
            "properties": {
              "current_page": {
                "type": "integer",
                "minimum": 1,
                "example": 1
              }
            }
          },
          "columns": {
            "nullable": true,
            "type": "array",
            "description": "The listing selected columns",
            "example": [
              "id",
              "name"
            ],
            "items": {
              "type": "string"
            }
          },
          "filters": {
            "nullable": true,
            "type": "object",
            "description": "The listing filters",
            "additionalProperties": true,
            "example": {
              "name": {
                "mode": "contain",
                "value": "search"
              }
            }
          },
          "columns_size": {
            "nullable": true,
            "type": "array",
            "description": "The listing columns size",
            "items": {
              "type": "object",
              "required": [
                "name",
                "width"
              ],
              "properties": {
                "name": {
                  "type": "string",
                  "minLength": 1,
                  "example": "name"
                },
                "width": {
                  "type": "number",
                  "example": 534
                }
              }
            }
          },
          "display": {
            "nullable": true,
            "type": "object",
            "description": "The listing display"
          }
        },
        "required": [
          "sorting",
          "pagination",
          "columns",
          "filters",
          "columns_size",
          "display"
        ]
      },
      "CustomActivity": {
        "title": "customActivity",
        "type": "object",
        "description": "Custom Activity Object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true,
            "example": "xZk348lb2"
          },
          "type_id": {
            "type": "string",
            "example": "vJ340fF1",
            "description": "Activity type identifier"
          },
          "action": {
            "type": "string",
            "example": "Jean-pierre has opened a new ticket on Xeno."
          },
          "relation": {
            "type": "object",
            "description": "Object linked to custom activity",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "client",
                  "prospect",
                  "supplier",
                  "opportunity",
                  "contact"
                ],
                "example": "prospect"
              },
              "id": {
                "type": "integer",
                "example": 123
              }
            }
          },
          "date": {
            "type": "string",
            "default": "Current datetime",
            "format": "date-time",
            "example": "1970-01-01T00:00:00+00:00",
            "description": "Date of activity (ISO 8601)"
          },
          "author": {
            "readOnly": true,
            "type": "object",
            "description": "Author of the custom activity",
            "properties": {
              "type": {
                "type": "string",
                "default": "staff",
                "enum": [
                  "staff"
                ]
              },
              "id": {
                "type": "integer",
                "example": 11
              }
            }
          },
          "created": {
            "readOnly": true,
            "type": "string",
            "format": "date-time",
            "example": "1970-01-01T00:00:00+00:00",
            "description": "Creation date of custom activity (ISO 8601)"
          },
          "updated": {
            "readOnly": true,
            "type": "string",
            "format": "date-time",
            "example": "1970-01-01T00:00:00+00:00",
            "description": "Updated date of custom activity (ISO 8601)"
          }
        }
      },
      "CustomActivityCreate": {
        "$ref": "#/components/schemas/CustomActivity"
      },
      "CustomActivityFilters": {
        "title": "customActivityFilters",
        "type": "object",
        "description": "Available filters for Custom Events Search",
        "properties": {
          "filters": {
            "type": "object",
            "properties": {
              "date": {
                "type": "object",
                "properties": {
                  "start": {
                    "type": "string",
                    "format": "date-time",
                    "example": "1970-01-01T00:00:00+00:00"
                  },
                  "end": {
                    "type": "string",
                    "format": "date-time",
                    "example": "1970-01-01T00:00:00+00:00"
                  }
                }
              },
              "type_id": {
                "description": "ID of custom activity type",
                "type": "string",
                "example": "Voluptates aspernatur"
              },
              "staff_id": {
                "type": "integer",
                "example": 1
              }
            }
          }
        },
        "required": [
          "filters"
        ]
      },
      "CustomActivityType": {
        "title": "customActivityType",
        "type": "object",
        "description": "Represents a type of custom activity",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true,
            "example": "xZk348lb2",
            "minLength": 1,
            "description": "Activity type identifier"
          },
          "name": {
            "type": "string",
            "example": "Xeni",
            "minLength": 1,
            "description": "Activity type name"
          },
          "created": {
            "readOnly": true,
            "type": "string",
            "format": "date-time",
            "example": "1970-01-01T00:00:00+00:00",
            "description": "Creation date of custom activity type (ISO 8601)"
          },
          "updated": {
            "readOnly": true,
            "type": "string",
            "format": "date-time",
            "example": "1970-01-01T00:00:00+00:00",
            "description": "Updated date of custom activity type (ISO 8601)"
          },
          "author": {
            "readOnly": true,
            "type": "object",
            "description": "Author of the custom activity type",
            "properties": {
              "type": {
                "type": "string",
                "default": "staff",
                "enum": [
                  "staff"
                ]
              },
              "id": {
                "type": "integer",
                "example": 11
              }
            }
          }
        },
        "required": [
          "name"
        ]
      },
      "PersonalAccessTokenCreateItem": {
        "title": "personalAccessToken",
        "type": "object",
        "description": "The personal access token for api",
        "x-examples": {},
        "properties": {
          "name": {
            "type": "string",
            "description": "The personal access token name",
            "example": "MyToken"
          },
          "user_id": {
            "description": "The linked user",
            "example": 1257,
            "oneOf": [
              {
                "type": "integer",
                "description": "The staff id"
              },
              {
                "type": "string",
                "description": "The current staff",
                "enum": [
                  "me"
                ]
              }
            ]
          },
          "scopes": {
            "type": "array",
            "description": "The allowed scopes",
            "minItems": 1,
            "example": [
              "companies.read",
              "companies.write"
            ],
            "items": {
              "type": "string",
              "description": "The scope"
            }
          }
        },
        "required": [
          "name",
          "scopes",
          "user_id"
        ]
      },
      "PersonalAccessTokenItem": {
        "title": "personalAccessTokenItem",
        "allOf": [
          {
            "title": "accessTokenItem",
            "type": "object",
            "description": "The access token for api",
            "x-examples": {},
            "properties": {
              "id": {
                "type": "string",
                "description": "The access token id",
                "example": "091d4c6200421657090c8ef5e5349172e668f507050a13e6ae0e3f2ff4b743acf5092f48faa1f98d"
              },
              "client_id": {
                "type": "string",
                "description": "The oauth client id",
                "example": "670fadef-576e-47a1-9358-62784605c024"
              },
              "user": {
                "description": "The linked user",
                "type": "object",
                "properties": {
                  "id": {
                    "type": "integer",
                    "description": "The user id",
                    "example": 154
                  },
                  "type": {
                    "type": "string",
                    "description": "User type",
                    "enum": [
                      "staff"
                    ]
                  }
                },
                "required": [
                  "id",
                  "type"
                ]
              },
              "expiration": {
                "type": "string",
                "format": "date-time",
                "description": "The token expiration date",
                "example": "2120-05-25T17:28:29+0100"
              },
              "scopes": {
                "type": "array",
                "description": "The allowed scopes",
                "minItems": 1,
                "example": [
                  "companies.read",
                  "companies.write"
                ],
                "items": {
                  "type": "string",
                  "description": "The scope"
                }
              }
            },
            "required": [
              "id",
              "client_id",
              "user",
              "expiration",
              "scopes"
            ]
          },
          {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "The token name",
                "example": "My Token 7"
              }
            },
            "required": [
              "name"
            ]
          }
        ]
      },
      "PersonalAccessTokenMetas": {
        "title": "listingMeta",
        "type": "object",
        "description": "The personal access tokens metas",
        "properties": {
          "staffs": {
            "type": "array",
            "description": "List of staffs",
            "minItems": 1,
            "items": {
              "$ref": "#/components/schemas/Activity/properties/_embed/properties/author"
            }
          },
          "permissions": {
            "type": "object",
            "description": "The permissions",
            "required": [
              "favorite",
              "export"
            ],
            "properties": {
              "favorite": {
                "type": "boolean",
                "description": "Can access to export"
              },
              "export": {
                "type": "boolean",
                "description": "Can access to favorite"
              }
            }
          }
        },
        "required": [
          "permissions",
          "staffs"
        ]
      },
      "Client": {
        "title": "client",
        "type": "object",
        "description": "The oauth client for api",
        "x-examples": {},
        "properties": {
          "id": {
            "type": "string",
            "description": "The oauth client id",
            "example": "670fadef-576e-47a1-9358-62784605c024"
          },
          "name": {
            "type": "string",
            "description": "The oauth client name",
            "example": "My client 7"
          },
          "type": {
            "type": "string",
            "description": "The oauth client type",
            "enum": [
              "public",
              "private",
              "personal",
              "personal_access_token"
            ]
          },
          "validated_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "The client is validated by sellsy"
          },
          "redirect_uri": {
            "type": "array",
            "description": "The redirect URIs",
            "items": {
              "type": "string"
            }
          },
          "user": {
            "description": "The linked user",
            "type": "object",
            "nullable": true,
            "properties": {
              "id": {
                "type": "integer",
                "description": "The user id",
                "example": 154
              },
              "type": {
                "type": "string",
                "description": "User type",
                "enum": [
                  "staff"
                ]
              }
            },
            "required": [
              "id",
              "type"
            ]
          },
          "scopes": {
            "type": "array",
            "description": "The allowed scopes",
            "minItems": 0,
            "example": [
              "companies.read",
              "companies.write"
            ],
            "items": {
              "type": "string",
              "description": "The scope"
            }
          }
        },
        "required": [
          "id",
          "name",
          "type",
          "user",
          "scopes",
          "redirect_uri",
          "validated_at"
        ]
      },
      "ClientCreate": {
        "title": "clientCreate",
        "type": "object",
        "description": "The client for api",
        "x-examples": {},
        "properties": {
          "name": {
            "type": "string",
            "description": "The oauth client name",
            "example": "MyToken"
          },
          "type": {
            "type": "string",
            "description": "The oauth client type",
            "enum": [
              "public",
              "private",
              "personal"
            ]
          },
          "redirect_uri": {
            "type": "array",
            "description": "The redirect URIs",
            "items": {
              "type": "string"
            }
          },
          "user_id": {
            "description": "The linked user. Required for the personal type.",
            "example": 1257,
            "nullable": true,
            "oneOf": [
              {
                "type": "integer",
                "description": "The staff id"
              },
              {
                "type": "string",
                "description": "The current staff",
                "enum": [
                  "me"
                ]
              }
            ]
          },
          "scopes": {
            "type": "array",
            "description": "The allowed scopes",
            "minItems": 1,
            "example": [
              "companies.read",
              "companies.write"
            ],
            "items": {
              "type": "string",
              "description": "The scope"
            }
          }
        },
        "required": [
          "name",
          "type",
          "scopes",
          "user_id",
          "redirect_uri"
        ]
      },
      "AccountingCode": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true,
            "description": "Id of accounting code",
            "example": 6657
          },
          "code": {
            "type": "string",
            "description": "accounting code",
            "example": 411000
          },
          "label": {
            "type": "string",
            "description": "Label of accounting code",
            "example": "Provision of services"
          },
          "views": {
            "type": "array",
            "description": "List of views where accounting code is usable",
            "items": {
              "type": "string",
              "enum": [
                "third",
                "purchase",
                "sell",
                "bank",
                "reconciliation"
              ]
            }
          }
        },
        "required": [
          "code",
          "label",
          "views"
        ]
      },
      "AccountingJournal": {
        "type": "object",
        "title": "Accounting Entry",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true,
            "description": "Id of accounting entry",
            "example": 6657
          },
          "related": {
            "description": "Objects linked to the accounting entry",
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "description": "Object type",
                  "enum": [
                    "company",
                    "individual",
                    "invoice",
                    "creditnote",
                    "purInvoice",
                    "purCreditNote",
                    "expense",
                    "bankDeposit"
                  ]
                },
                "id": {
                  "type": "integer",
                  "description": "Object ID"
                }
              }
            }
          },
          "analytic_code": {
            "type": "string",
            "description": "Analytic code",
            "nullable": true
          },
          "amount": {
            "type": "object",
            "description": "Amount of the accounting entry",
            "properties": {
              "direction": {
                "description": "Direction of the accounting entry (debit or credit)",
                "type": "string",
                "enum": [
                  "debit",
                  "credit"
                ]
              },
              "value": {
                "description": "Amount value of the accounting entry",
                "type": "string",
                "example": "123.22"
              }
            }
          },
          "code": {
            "type": "object",
            "description": "Accounting code",
            "properties": {
              "label": {
                "type": "string",
                "description": "Label of accounting code",
                "example": "Sales Income"
              },
              "value": {
                "type": "string",
                "description": "Accounting code",
                "example": "4000"
              }
            }
          },
          "type": {
            "type": "string",
            "example": "SALES"
          },
          "date": {
            "type": "string",
            "description": "Date of accounting entry",
            "format": "date"
          },
          "label": {
            "type": "string",
            "description": "Label of accounting entry",
            "example": "Invoice n°FACT-20210811-00362 - Acme Corporation"
          },
          "recorded": {
            "type": "boolean",
            "description": "Accounting entry has ben exported or not"
          },
          "accounting_type": {
            "type": "integer",
            "description": "Type of accounting (for Sage export)",
            "enum": [
              1,
              2
            ]
          },
          "analytic_plan": {
            "type": "integer",
            "description": "Analytic plan number (for Sage export)",
            "enum": [
              1
            ]
          },
          "auxiliary_code": {
            "type": "string",
            "nullable": true,
            "description": "Auxiliary code",
            "example": "0EX11C"
          },
          "document": {
            "type": "object",
            "description": "Document linked to the accounting entry",
            "nullable": true,
            "properties": {
              "type": {
                "type": "string",
                "example": "invoice",
                "description": "Document type",
                "enum": [
                  "invoice",
                  "creditnote",
                  "purInvoice",
                  "purCreditNote"
                ]
              },
              "id": {
                "type": "integer",
                "description": "Unique ID",
                "example": 6657
              },
              "number": {
                "description": "Document number",
                "type": "string",
                "example": "INV-20210810-00331"
              },
              "due_date": {
                "type": "string",
                "example": "Due date of document",
                "format": "date"
              },
              "subject": {
                "type": "string",
                "description": "Document Subject",
                "example": null
              },
              "public_link": {
                "type": "string",
                "format": "uri",
                "description": "Public link of document",
                "nullable": true
              },
              "service_start_date": {
                "type": "string",
                "description": "Service start date of document",
                "format": "date",
                "nullable": true
              },
              "service_end_date": {
                "type": "string",
                "description": "Service end date of document",
                "format": "date",
                "nullable": true
              },
              "currency": {
                "type": "string",
                "description": "Currency of document",
                "example": "€"
              },
              "external_reference": {
                "type": "string",
                "description": "External reference of document",
                "nullable": true,
                "example": "EXT-INV-20210810-00331"
              }
            }
          },
          "companies": {
            "description": "Companies linked to the accounting entry",
            "nullable": true,
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Name of company",
                  "example": "Acme Corporation"
                },
                "reference": {
                  "type": "string",
                  "description": "Company reference"
                }
              }
            }
          },
          "individuals": {
            "description": "Individuals linked to the accounting entry",
            "nullable": true,
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Name of individual",
                  "example": "Acme Corporation"
                },
                "reference": {
                  "type": "string",
                  "description": "Individual reference"
                }
              }
            }
          }
        }
      },
      "Taxe": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true,
            "description": "Id of taxe",
            "example": 6657
          },
          "rate": {
            "type": "number",
            "format": "float",
            "description": "Rate of taxe",
            "example": 20
          },
          "label": {
            "type": "string",
            "description": "Label of taxe",
            "example": "Product TVA"
          }
        },
        "required": [
          "rate",
          "label"
        ]
      },
      "Ocr": {
        "title": "ocr",
        "type": "object",
        "description": "Represents an OCR document",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true,
            "example": 1,
            "minimum": 1
          },
          "staff_id": {
            "type": "integer",
            "description": "ID of staff who created ocr document",
            "readOnly": true,
            "example": 1,
            "minimum": 1
          },
          "file_name": {
            "type": "string",
            "description": "File name of uploaded OCR document",
            "example": "myfile.png",
            "minLength": 1
          },
          "linked_type": {
            "description": "Type of linked object",
            "type": "string",
            "enum": [
              "purInvoice"
            ],
            "example": "purInvoice"
          },
          "linked_id": {
            "type": "integer",
            "description": "Id of linked object",
            "nullable": true,
            "example": 123
          },
          "created_at": {
            "type": "string",
            "default": "Current datetime",
            "format": "date-time",
            "example": "1970-01-01T00:00:00+00:00",
            "description": "Creation date of OCR document (ISO 8601)"
          },
          "completed_at": {
            "type": "string",
            "format": "date-time",
            "example": "1970-01-01T00:00:00+00:00",
            "description": "Completion date of OCR process (ISO 8601)",
            "nullable": true
          },
          "state": {
            "type": "string",
            "description": "state of OCR process",
            "enum": [
              "pending",
              "processing",
              "completed",
              "error"
            ]
          },
          "error_code": {
            "type": "integer",
            "description": "Error code\n* `1` - Too many page error\n* `2` - Technical error\n* `3` - File error\n",
            "enum": [
              1,
              2,
              3,
              null
            ],
            "nullable": true
          }
        }
      },
      "OcrPurInvoiceMetas": {
        "title": "Metadata",
        "type": "object",
        "properties": {
          "user_can_validate_pur_invoice": {
            "type": "boolean",
            "description": "Use can validate a purchase invoice "
          }
        },
        "required": [
          "user_can_validate_pur_invoice"
        ]
      },
      "InvoicingConformityState": {
        "title": "conformityState",
        "type": "object",
        "description": "Invoice conformity state informations",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true,
            "description": "Unique ID",
            "example": 6657
          },
          "active": {
            "type": "boolean",
            "description": "Invoice conformity state",
            "readOnly": true
          },
          "activated_by": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Activity/properties/_embed/properties/author"
              }
            ],
            "readOnly": true
          },
          "activated_at": {
            "type": "string",
            "default": "Current datetime",
            "format": "date-time",
            "example": "1970-01-01T00:00:00+00:00",
            "description": "Activation date (ISO 8601)",
            "readOnly": true
          },
          "pdf": {
            "type": "string",
            "nullable": true,
            "description": "PDF url",
            "format": "uri",
            "readOnly": true
          }
        }
      },
      "OpportunityCreate": {
        "title": "Opportunity",
        "type": "object",
        "allOf": [
          {
            "title": "Opportunity",
            "type": "object",
            "description": "Describe input body to update an Opportunity",
            "properties": {
              "name": {
                "type": "string",
                "description": "Opportunity name",
                "example": "New website"
              },
              "owner_id": {
                "type": "integer",
                "description": "Owner of the opportunity (staff id). If not provided, the ID of the logged-in staff will be used by default."
              },
              "status": {
                "type": "string",
                "description": "Opportunity status",
                "example": "won",
                "enum": [
                  "open",
                  "won",
                  "lost",
                  "cancelled",
                  "closed",
                  "late"
                ],
                "default": "open"
              },
              "pipeline": {
                "type": "integer",
                "description": "Pipeline",
                "example": 9763
              },
              "step": {
                "type": "integer",
                "description": "Pipeline Step",
                "example": 299
              },
              "amount": {
                "type": "string",
                "description": "Potential Opportunity Amount (in the default currency selected for the account)",
                "example": "72000.99"
              },
              "probability": {
                "type": "integer",
                "description": "Opportunity probability",
                "example": 75,
                "maximum": 100,
                "minimum": 0
              },
              "source": {
                "type": "integer",
                "description": "Source of opportunity creation (null will use the default defined in account preferences)",
                "example": 1
              },
              "due_date": {
                "type": "string",
                "description": "Due date of the opportunity",
                "format": "date",
                "example": "2020-02-01"
              },
              "note": {
                "type": "string",
                "description": "Opportunity note"
              },
              "main_doc_id": {
                "type": "integer",
                "description": "Internal ID of the main opportunity document",
                "nullable": true,
                "example": 22
              },
              "assigned_staff_ids": {
                "type": "array",
                "description": "Staff(s) ID assigned to the opportunity",
                "example": [
                  133,
                  299
                ],
                "items": {
                  "type": "integer"
                },
                "nullable": true
              },
              "contact_ids": {
                "type": "array",
                "description": "Contact(s) ID responsible for the opportunity",
                "example": [
                  222,
                  876
                ],
                "items": {
                  "type": "integer"
                },
                "nullable": true
              },
              "related": {
                "$ref": "#/components/schemas/OpportunityUpdate/properties/related"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "number": {
                "type": "string",
                "description": "Opportunity number",
                "example": "OPP-1155"
              },
              "owner_id": {
                "type": "integer",
                "description": "Owner of the opportunity (staff id). If not provided, the ID of the logged-in staff will be used by default."
              },
              "created": {
                "description": "Date of creation of the opportunity",
                "type": "string",
                "format": "date-time"
              }
            },
            "required": [
              "name",
              "pipeline",
              "step",
              "related"
            ]
          }
        ]
      },
      "OpportunityUpdate": {
        "title": "Opportunity",
        "type": "object",
        "description": "Describe input body to update an Opportunity",
        "properties": {
          "name": {
            "type": "string",
            "description": "Opportunity name",
            "example": "New website"
          },
          "owner_id": {
            "type": "integer",
            "description": "Owner of the opportunity (staff id). If not provided, the ID of the logged-in staff will be used by default."
          },
          "status": {
            "type": "string",
            "description": "Opportunity status",
            "example": "won",
            "enum": [
              "open",
              "won",
              "lost",
              "cancelled",
              "closed",
              "late"
            ],
            "default": "open"
          },
          "pipeline": {
            "type": "integer",
            "description": "Pipeline",
            "example": 9763
          },
          "step": {
            "type": "integer",
            "description": "Pipeline Step",
            "example": 299
          },
          "amount": {
            "type": "string",
            "description": "Potential Opportunity Amount (in the default currency selected for the account)",
            "example": "72000.99"
          },
          "probability": {
            "type": "integer",
            "description": "Opportunity probability",
            "example": 75,
            "maximum": 100,
            "minimum": 0
          },
          "source": {
            "type": "integer",
            "description": "Source of opportunity creation (null will use the default defined in account preferences)",
            "example": 1
          },
          "due_date": {
            "type": "string",
            "description": "Due date of the opportunity",
            "format": "date",
            "example": "2020-02-01"
          },
          "note": {
            "type": "string",
            "description": "Opportunity note"
          },
          "main_doc_id": {
            "type": "integer",
            "description": "Internal ID of the main opportunity document",
            "nullable": true,
            "example": 22
          },
          "assigned_staff_ids": {
            "type": "array",
            "description": "Staff(s) ID assigned to the opportunity",
            "example": [
              133,
              299
            ],
            "items": {
              "type": "integer"
            },
            "nullable": true
          },
          "contact_ids": {
            "type": "array",
            "description": "Contact(s) ID responsible for the opportunity",
            "example": [
              222,
              876
            ],
            "items": {
              "type": "integer"
            },
            "nullable": true
          },
          "related": {
            "title": "Related",
            "type": "array",
            "minItems": 1,
            "description": "Related objects",
            "items": {
              "type": "object",
              "additionalProperties": false,
              "description": "Object related (required one company OR individual, optional one or more contact)",
              "properties": {
                "id": {
                  "type": "integer",
                  "example": 1
                },
                "type": {
                  "type": "string",
                  "example": "company",
                  "enum": [
                    "company",
                    "individual",
                    "contact"
                  ]
                }
              }
            }
          }
        }
      },
      "OpportunityItem": {
        "title": "Opportunity",
        "type": "object",
        "description": "Describe opportunity object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Internal Opportunity ID",
            "readOnly": true,
            "example": 1
          },
          "number": {
            "type": "string",
            "description": "External Opportunity ID",
            "example": "OPP-1155"
          },
          "name": {
            "type": "string",
            "description": "Opportunity name",
            "example": "New website"
          },
          "source": {
            "type": "object",
            "description": "Source of opportunity creation",
            "properties": {
              "id": {
                "type": "integer",
                "example": 1
              },
              "name": {
                "type": "string",
                "example": "Internal"
              }
            }
          },
          "due_date": {
            "type": "string",
            "description": "Due date of the opportunity",
            "format": "date",
            "example": "1970-01-01",
            "nullable": true
          },
          "created": {
            "type": "string",
            "description": "Creation date of the opportunity",
            "format": "date-time",
            "example": "1970-01-01T00:00:00+00:00"
          },
          "updated_status": {
            "type": "string",
            "description": "Date of last opportunity status update",
            "format": "date-time",
            "example": "1970-01-01T00:00:00+00:00",
            "nullable": true
          },
          "status": {
            "type": "string",
            "description": "Opportunity status",
            "example": "won",
            "enum": [
              "open",
              "won",
              "lost",
              "cancelled",
              "closed",
              "late"
            ]
          },
          "amount": {
            "type": "object",
            "description": "Potential amount of the opportunity with the currency",
            "properties": {
              "value": {
                "type": "string",
                "description": "Amount",
                "example": 72000.99
              },
              "currency": {
                "type": "string",
                "description": "Currency (ISO 4217)",
                "example": "EUR"
              }
            }
          },
          "pipeline": {
            "type": "object",
            "description": "Current pipeline",
            "properties": {
              "id": {
                "type": "integer",
                "example": 9763
              },
              "name": {
                "type": "string",
                "example": "Commercial North"
              }
            }
          },
          "step": {
            "type": "object",
            "description": "Current step",
            "properties": {
              "id": {
                "type": "integer",
                "example": 299
              },
              "name": {
                "type": "string",
                "example": "Prospection"
              }
            }
          },
          "probability": {
            "type": "integer",
            "description": "Opportunity probability",
            "example": 75,
            "maximum": 100,
            "minimum": 0
          },
          "note": {
            "type": "string",
            "description": "Opportunity note"
          },
          "owner": {
            "type": "object",
            "description": "Staff owning the opportunity",
            "properties": {
              "id": {
                "type": "integer",
                "example": 12
              },
              "type": {
                "type": "string",
                "example": "staff",
                "enum": [
                  "staff",
                  "thirdcontact"
                ]
              }
            }
          },
          "assigned_staff_ids": {
            "type": "array",
            "description": "Staff(s) ID assigned to the opportunity",
            "example": [
              133,
              299
            ],
            "items": {
              "type": "integer"
            },
            "nullable": true
          },
          "contact_ids": {
            "type": "array",
            "description": "Contact(s) ID responsible for the opportunity",
            "example": [
              222,
              876
            ],
            "items": {
              "type": "integer"
            },
            "nullable": true
          },
          "company_id": {
            "type": "integer",
            "description": "Company linked to the opportunity",
            "example": 1220,
            "nullable": true
          },
          "individual_id": {
            "type": "integer",
            "description": "Individual linked to the opportunity",
            "example": 299,
            "nullable": true
          },
          "main_doc_id": {
            "type": "integer",
            "description": "Internal ID of the main opportunity document",
            "nullable": true,
            "example": 22
          },
          "related": {
            "$ref": "#/components/schemas/OpportunityUpdate/properties/related"
          },
          "_embed": {
            "title": "Opportunity embed",
            "readOnly": true,
            "description": "Opportunity embed",
            "allOf": [
              {
                "type": "object",
                "properties": {
                  "assigned_staffs": {
                    "type": "array",
                    "description": "Staff(s) assigned to the opportunity",
                    "items": {
                      "$ref": "#/components/schemas/Activity/properties/_embed/properties/author"
                    }
                  },
                  "company": {
                    "nullable": true,
                    "description": "Company object related to opportunity",
                    "$ref": "#/components/schemas/SaleEmbed/properties/_embed/allOf/0/properties/company"
                  },
                  "contacts": {
                    "type": "array",
                    "description": "Contact(s) responsible for the opportunity",
                    "items": {
                      "$ref": "#/components/schemas/ContactCreateItem/allOf/0"
                    }
                  },
                  "estimates": {
                    "type": "integer",
                    "nullable": true,
                    "description": "Number of linked estimates",
                    "example": 2
                  },
                  "individual": {
                    "nullable": true,
                    "description": "Individual object related to opportunity object",
                    "$ref": "#/components/schemas/SaleEmbed/properties/_embed/allOf/0/properties/individual"
                  },
                  "invoices": {
                    "type": "integer",
                    "nullable": true,
                    "description": "Number of linked invoices",
                    "example": 1
                  },
                  "orders": {
                    "type": "integer",
                    "nullable": true,
                    "description": "Number of linked orders",
                    "example": 0
                  },
                  "deliveries": {
                    "type": "integer",
                    "nullable": true,
                    "description": "Number of linked deliveries",
                    "example": 8
                  },
                  "credit_notes": {
                    "type": "integer",
                    "nullable": true,
                    "description": "Number of linked credit notes",
                    "example": 1
                  },
                  "proforma": {
                    "type": "integer",
                    "nullable": true,
                    "description": "Number of linked proforma",
                    "example": 0
                  },
                  "currency": {
                    "nullable": true,
                    "description": "Currency object related to opportunity",
                    "$ref": "#/components/schemas/SaleEmbed/properties/_embed/allOf/0/properties/currency"
                  },
                  "acl": {
                    "nullable": true,
                    "description": "Opportunity ACL",
                    "$ref": "#/components/schemas/Activity/properties/_embed/properties/acl/oneOf/5"
                  },
                  "smart_tags": {
                    "nullable": true,
                    "description": "Smart-tags linked",
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/SaleEmbed/properties/_embed/allOf/0/properties/smart_tags/allOf/0"
                      }
                    ]
                  }
                }
              },
              {
                "$ref": "#/components/schemas/SaleEmbed/properties/_embed/allOf/1"
              }
            ]
          }
        }
      },
      "OpportunityFilters": {
        "title": "OpportunityFilters",
        "type": "object",
        "description": "The opportunity filters",
        "properties": {
          "filters": {
            "type": "object",
            "description": "Opportunity filters",
            "properties": {
              "created": {
                "title": "Created at",
                "type": "object",
                "description": "Filter the opportunity list by creation date",
                "properties": {
                  "start": {
                    "type": "string",
                    "format": "date-time",
                    "example": "2020-01-01T00:00:00+01:00"
                  },
                  "end": {
                    "type": "string",
                    "format": "date-time",
                    "example": "2020-02-01T00:00:00+01:00"
                  }
                }
              },
              "updated_status": {
                "title": "Updated status",
                "type": "object",
                "description": "Filter the opportunity list by updated status date",
                "properties": {
                  "start": {
                    "type": "string",
                    "format": "date-time",
                    "example": "2020-01-01T00:00:00+01:00"
                  },
                  "end": {
                    "type": "string",
                    "format": "date-time",
                    "example": "2020-02-01T00:00:00+01:00"
                  }
                }
              },
              "due_date": {
                "title": "Due Date",
                "type": "object",
                "description": "Filter the opportunity list by due date",
                "properties": {
                  "start": {
                    "type": "string",
                    "format": "date-time",
                    "example": "2020-01-01T00:00:00+01:00"
                  },
                  "end": {
                    "type": "string",
                    "format": "date-time",
                    "example": "2020-02-01T00:00:00+01:00"
                  }
                }
              },
              "name": {
                "title": "Name",
                "type": "string",
                "description": "Filter the opportunity list by name",
                "example": "Website"
              },
              "pipeline": {
                "title": "Pipeline",
                "type": "array",
                "items": {
                  "type": "integer"
                },
                "description": "Filter the opportunity list by pipeline ID",
                "example": [
                  12,
                  22
                ]
              },
              "step": {
                "title": "Step",
                "type": "array",
                "items": {
                  "type": "integer"
                },
                "description": "Filter the opportunity list by step ID",
                "example": [
                  2,
                  7
                ]
              },
              "amount": {
                "title": "Amount",
                "type": "object",
                "description": "Filter the opportunity list by amount",
                "properties": {
                  "min": {
                    "type": "number",
                    "example": 10.5
                  },
                  "max": {
                    "type": "number",
                    "example": 150
                  }
                }
              },
              "related_objects": {
                "description": "Filter the opportunity list by an array of related objects",
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "description": "Type of related object",
                      "enum": [
                        "company",
                        "individual"
                      ]
                    },
                    "id": {
                      "type": "integer",
                      "description": "Identifier of related object",
                      "example": 742
                    }
                  }
                }
              },
              "assigned_staffs": {
                "title": "Assigned staffs",
                "type": "array",
                "items": {
                  "type": "integer",
                  "example": 33
                },
                "description": "Filter by assigned staffs"
              },
              "statuses": {
                "title": "Filter the opportunity list by an array of statuses",
                "type": "array",
                "nullable": true,
                "minItems": 1,
                "items": {
                  "type": "string",
                  "description": "Opportunity status",
                  "example": "won",
                  "enum": [
                    "open",
                    "won",
                    "lost",
                    "cancelled",
                    "closed",
                    "late"
                  ]
                }
              }
            }
          }
        },
        "required": [
          "filters"
        ]
      },
      "OpportunitiesAggregations": {
        "title": "Opportunities aggregations",
        "type": "object",
        "properties": {
          "amount_sum_by_status": {
            "type": "object",
            "description": "Potential amount of opportunities by status",
            "properties": {
              "open": {
                "type": "object",
                "description": "Number and total amount of opportunities with status open",
                "properties": {
                  "number": {
                    "type": "integer",
                    "description": "number of opportunities"
                  },
                  "amount": {
                    "type": "object",
                    "description": "Total amount of opportunities",
                    "properties": {
                      "value": {
                        "type": "string",
                        "description": "Amount",
                        "example": "38446.90"
                      },
                      "currency": {
                        "type": "string",
                        "description": "Currency code",
                        "example": "EUR"
                      }
                    }
                  }
                }
              },
              "won": {
                "type": "object",
                "description": "Number and total amount of opportunities with status won",
                "properties": {
                  "number": {
                    "type": "integer",
                    "description": "number of opportunities"
                  },
                  "amount": {
                    "$ref": "#/components/schemas/OpportunitiesAggregations/properties/amount_sum_by_status/properties/open/properties/amount"
                  }
                }
              },
              "lost": {
                "type": "object",
                "description": "Number and total amount of opportunities with status lost",
                "properties": {
                  "number": {
                    "type": "integer",
                    "description": "number of opportunities"
                  },
                  "amount": {
                    "$ref": "#/components/schemas/OpportunitiesAggregations/properties/amount_sum_by_status/properties/open/properties/amount"
                  }
                }
              },
              "late": {
                "type": "object",
                "description": "Number and total amount of opportunities with status late",
                "properties": {
                  "number": {
                    "type": "integer",
                    "description": "number of opportunities"
                  },
                  "amount": {
                    "$ref": "#/components/schemas/OpportunitiesAggregations/properties/amount_sum_by_status/properties/open/properties/amount"
                  }
                }
              },
              "cancelled": {
                "type": "object",
                "description": "Number and total amount of opportunities with status cancelled",
                "properties": {
                  "number": {
                    "type": "integer",
                    "description": "number of opportunities"
                  },
                  "amount": {
                    "$ref": "#/components/schemas/OpportunitiesAggregations/properties/amount_sum_by_status/properties/open/properties/amount"
                  }
                }
              },
              "closed": {
                "type": "object",
                "description": "Number and total amount of opportunities with status closed",
                "properties": {
                  "number": {
                    "type": "integer",
                    "description": "number of opportunities"
                  },
                  "amount": {
                    "$ref": "#/components/schemas/OpportunitiesAggregations/properties/amount_sum_by_status/properties/open/properties/amount"
                  }
                }
              }
            },
            "example": {
              "open": {
                "number": 123,
                "amount": "14400.000000000"
              },
              "won": {
                "number": 89,
                "amount": "12300.000000000"
              },
              "lost": {
                "number": 78,
                "amount": "11200.000000000"
              },
              "late": {
                "number": 67,
                "amount": "9400.000000000"
              },
              "cancelled": {
                "number": 56,
                "amount": "8600.000000000"
              },
              "closed": {
                "number": 45,
                "amount": "7500.000000000"
              }
            }
          },
          "amount_sum_by_status_due_at_seven": {
            "type": "object",
            "description": "Potential amount of opportunities by status due this week",
            "properties": {
              "open": {
                "type": "object",
                "description": "Number and total amount of opportunities with status \"open\"",
                "properties": {
                  "number": {
                    "type": "integer",
                    "description": "number of opportunities"
                  },
                  "amount": {
                    "$ref": "#/components/schemas/OpportunitiesAggregations/properties/amount_sum_by_status/properties/open/properties/amount"
                  }
                }
              },
              "won": {
                "type": "object",
                "description": "Number and total amount of opportunities with status \"won\"",
                "properties": {
                  "number": {
                    "type": "integer",
                    "description": "number of opportunities"
                  },
                  "amount": {
                    "$ref": "#/components/schemas/OpportunitiesAggregations/properties/amount_sum_by_status/properties/open/properties/amount"
                  }
                }
              },
              "lost": {
                "type": "object",
                "description": "Number and total amount of opportunities with status \"lost\"",
                "properties": {
                  "number": {
                    "type": "integer",
                    "description": "number of opportunities"
                  },
                  "amount": {
                    "$ref": "#/components/schemas/OpportunitiesAggregations/properties/amount_sum_by_status/properties/open/properties/amount"
                  }
                }
              },
              "late": {
                "type": "object",
                "description": "Number and total amount of opportunities with status \"late\"",
                "properties": {
                  "number": {
                    "type": "integer",
                    "description": "number of opportunities"
                  },
                  "amount": {
                    "$ref": "#/components/schemas/OpportunitiesAggregations/properties/amount_sum_by_status/properties/open/properties/amount"
                  }
                }
              },
              "cancelled": {
                "type": "object",
                "description": "Number and total amount of opportunities with status \"cancelled\"",
                "properties": {
                  "number": {
                    "type": "integer",
                    "description": "number of opportunities"
                  },
                  "amount": {
                    "$ref": "#/components/schemas/OpportunitiesAggregations/properties/amount_sum_by_status/properties/open/properties/amount"
                  }
                }
              },
              "closed": {
                "type": "object",
                "description": "Number and total amount of opportunities with status \"closed\"",
                "properties": {
                  "number": {
                    "type": "integer",
                    "description": "number of opportunities"
                  },
                  "amount": {
                    "$ref": "#/components/schemas/OpportunitiesAggregations/properties/amount_sum_by_status/properties/open/properties/amount"
                  }
                }
              }
            },
            "example": {
              "open": {
                "number": 123,
                "amount": "14400.000000000"
              },
              "won": {
                "number": 89,
                "amount": "12300.000000000"
              },
              "lost": {
                "number": 78,
                "amount": "11200.000000000"
              },
              "late": {
                "number": 67,
                "amount": "9400.000000000"
              },
              "cancelled": {
                "number": 56,
                "amount": "8600.000000000"
              },
              "closed": {
                "number": 45,
                "amount": "7500.000000000"
              }
            }
          },
          "number_by_pipeline_and_step": {
            "type": "object",
            "description": "number of opportunities by pipeline and step",
            "additionalProperties": true,
            "example": {
              "7923": {
                "8": 12,
                "24": 25
              },
              "12344": {
                "7": 245,
                "12": 75
              }
            }
          },
          "amount_sum": {
            "type": "object",
            "description": "Potential amount of opportunities",
            "properties": {
              "number": {
                "type": "integer",
                "description": "number of opportunities"
              },
              "amount": {
                "$ref": "#/components/schemas/OpportunitiesAggregations/properties/amount_sum_by_status/properties/open/properties/amount"
              }
            },
            "example": {
              "number": 123,
              "amount": "14400.000000000"
            }
          }
        }
      },
      "OpportunitySourceCollectionItem": {
        "title": "OpportunitySourceCollectionItem",
        "type": "object",
        "description": "Represents an Opportunity Source",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Internal Opportunity Source ID",
            "readOnly": true,
            "example": 1
          },
          "name": {
            "type": "string",
            "description": "Opportunity Source name",
            "example": "Showroom 2020"
          },
          "is_default": {
            "type": "boolean",
            "nullable": false,
            "description": "Is default source",
            "example": true
          },
          "is_hidden": {
            "type": "boolean",
            "nullable": false,
            "description": "Is hidden source",
            "example": true
          },
          "category_id": {
            "nullable": false,
            "type": "integer",
            "description": "Source category",
            "example": 1,
            "minimum": 0
          },
          "rank": {
            "type": "integer",
            "description": "Source rank",
            "example": 2,
            "minimum": 0
          }
        }
      },
      "OpportunitySourceFilters": {
        "title": "OpportunitySourceFilters",
        "type": "object",
        "description": "The opportunity sources filters",
        "properties": {
          "filters": {
            "type": "object",
            "properties": {
              "category_id": {
                "title": "Category",
                "description": "Filter the opportunity sources list by category",
                "type": "array",
                "items": {
                  "type": "integer"
                },
                "example": [
                  10,
                  20
                ]
              }
            }
          }
        },
        "required": [
          "filters"
        ]
      },
      "OpportunityPipelineCollectionItem": {
        "title": "OpportunityPipelineCollectionItem",
        "type": "object",
        "description": "Represents an Opportunity Pipeline",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Internal Opportunity Pipeline ID",
            "readOnly": true,
            "example": 1
          },
          "name": {
            "type": "string",
            "description": "Opportunity Pipeline name",
            "example": "New website"
          },
          "is_default": {
            "type": "boolean",
            "nullable": false,
            "description": "Is default pipeline define for account",
            "example": true
          },
          "step": {
            "nullable": false,
            "type": "integer",
            "description": "Count of steps",
            "example": 2,
            "minimum": 0
          },
          "rank": {
            "type": "integer",
            "description": "Pipeline rank in preferences",
            "example": 2,
            "minimum": 0
          }
        }
      },
      "OpportunityPipelineFilters": {
        "title": "OpportunityPipelineFilters",
        "type": "object",
        "description": "The opportunity pipelines filters",
        "properties": {
          "filters": {
            "type": "object",
            "description": "Opportunity Pipelines filters",
            "properties": {
              "name": {
                "title": "Name",
                "type": "string",
                "description": "Filter the opportunity pipelines list by name",
                "example": "Website"
              },
              "is_default": {
                "title": "Is default opportunity pipeline",
                "type": "boolean",
                "description": "Filter the opportunity pipelines list by is_default",
                "example": false
              }
            }
          }
        },
        "required": [
          "filters"
        ]
      },
      "OpportunitiesCategoryItem": {
        "title": "Opportunity Category",
        "type": "object",
        "description": "Opportunities Category",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Opportunities category id",
            "readOnly": true,
            "example": 1
          },
          "label": {
            "type": "string",
            "description": "Opportunities category label",
            "example": "Event"
          },
          "color": {
            "type": "string",
            "description": "Opportunities category color",
            "example": "#000000"
          },
          "icon": {
            "type": "string",
            "description": "Opportunities category icon",
            "example": "fa-anchor"
          },
          "is_default": {
            "type": "boolean",
            "description": "True if this opportunity category contains the default source",
            "example": false
          },
          "_embed": {
            "type": "object",
            "properties": {
              "sources": {
                "type": "array",
                "description": "Sources of the category",
                "nullable": true,
                "items": {
                  "title": "OpportunitySourceCollectionItem",
                  "type": "object",
                  "description": "Represents an Opportunity Source",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "description": "Internal Opportunity Source ID",
                      "readOnly": true,
                      "example": 1
                    },
                    "name": {
                      "type": "string",
                      "description": "Opportunity Source name",
                      "example": "Showroom 2020"
                    },
                    "is_default": {
                      "type": "boolean",
                      "nullable": false,
                      "description": "Is default source",
                      "example": true
                    },
                    "is_hidden": {
                      "type": "boolean",
                      "nullable": false,
                      "description": "Is hidden source",
                      "example": true
                    },
                    "category_id": {
                      "nullable": false,
                      "type": "integer",
                      "description": "Source category",
                      "example": 1,
                      "minimum": 0
                    },
                    "rank": {
                      "type": "integer",
                      "description": "Source rank",
                      "example": 2,
                      "minimum": 0
                    }
                  }
                }
              }
            }
          }
        }
      },
      "OpportunityRankUpdate": {
        "title": "Opportunity rank update",
        "type": "object",
        "properties": {
          "before_sibling": {
            "type": "integer",
            "description": "ID of opportunity before which to place the opportunity specified in query parameters<br /> > if not specified, opportunity will be placed at the last rank of the step\n",
            "nullable": true,
            "example": 57
          },
          "step": {
            "type": "integer",
            "description": "Pipeline Step",
            "example": 299
          }
        },
        "required": [
          "step"
        ]
      },
      "PipelineStepFilters": {
        "title": "Step filters",
        "type": "object",
        "additionalProperties": false,
        "description": "The opportunity pipeline steps filters",
        "properties": {
          "filters": {
            "type": "object",
            "description": "Opportunity Pipeline Steps filters",
            "properties": {
              "name": {
                "title": "Name",
                "type": "string",
                "description": "Filter the opportunity pipeline steps list by name",
                "example": "Website"
              },
              "id": {
                "title": "Id",
                "type": "array",
                "description": "Filter the opportunity pipeline steps list by id",
                "example": [
                  45,
                  47
                ],
                "minItems": 1,
                "items": {
                  "type": "integer"
                }
              }
            }
          }
        },
        "required": [
          "filters"
        ]
      },
      "TaskItem": {
        "title": "Task Item",
        "allOf": [
          {
            "title": "Task",
            "type": "object",
            "description": "Task base object",
            "x-examples": {},
            "properties": {
              "id": {
                "type": "integer",
                "readOnly": true,
                "description": "Task ID",
                "example": 6657
              },
              "title": {
                "type": "string",
                "example": "Meeting",
                "description": "Task title",
                "nullable": true
              },
              "description": {
                "type": "string",
                "example": "Monthly meeting with consulting team",
                "description": "Task description",
                "nullable": true
              },
              "status": {
                "type": "string",
                "example": "todo",
                "description": "Task status",
                "readOnly": true,
                "enum": [
                  "todo",
                  "done"
                ]
              },
              "is_private": {
                "type": "boolean",
                "description": "Task is private or public",
                "default": false
              },
              "due_date": {
                "description": "due date and time of task",
                "type": "string",
                "format": "date-time",
                "example": "2020-01-01T00:00:00+01:00"
              },
              "assigned_staff_ids": {
                "type": "array",
                "nullable": true,
                "items": {
                  "type": "integer",
                  "description": "staffs assigned to the task",
                  "example": 1
                }
              },
              "label": {
                "$ref": "#/components/schemas/LabelBaseItem/properties/label"
              },
              "updated": {
                "description": "Updated date of task (system)",
                "type": "string",
                "format": "date-time",
                "example": "2020-01-01T00:00:00+01:00",
                "readOnly": true
              },
              "created": {
                "description": "Created date of task (system)",
                "type": "string",
                "format": "date-time",
                "example": "2020-01-01T00:00:00+01:00",
                "readOnly": true
              },
              "related": {
                "type": "array",
                "minItems": 0,
                "maxItems": 1,
                "nullable": false,
                "description": "Main object related to the task (limit to 1).",
                "items": {
                  "type": "object",
                  "additionalProperties": false,
                  "description": "Main object related to the task",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "example": 1
                    },
                    "type": {
                      "type": "string",
                      "example": "opportunity",
                      "enum": [
                        "opportunity",
                        "company",
                        "individual",
                        "contact",
                        "invoice",
                        "creditnote",
                        "estimate"
                      ]
                    }
                  }
                }
              },
              "owner": {
                "description": "Owner of the task",
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "description": "owner type",
                    "enum": [
                      "staff"
                    ]
                  },
                  "id": {
                    "type": "integer",
                    "description": "Owner id",
                    "example": 51
                  }
                }
              },
              "company_id": {
                "type": "integer",
                "description": "Company linked to the task",
                "example": 1,
                "readOnly": true,
                "nullable": true
              },
              "individual_id": {
                "type": "integer",
                "description": "Individual linked to the task",
                "example": 92,
                "readOnly": true,
                "nullable": true
              },
              "contact_id": {
                "type": "integer",
                "description": "Contact linked to the task",
                "example": 958,
                "readOnly": true,
                "nullable": true
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "_embed": {
                "allOf": [
                  {
                    "title": "TaskItemEmbed",
                    "type": "object",
                    "description": "Objects add to response. Use embed parameter",
                    "x-examples": {},
                    "readOnly": true,
                    "allOf": [
                      {
                        "title": "Embed for task",
                        "type": "object",
                        "description": "Objects add to response. Use embed parameter",
                        "x-examples": {},
                        "readOnly": true,
                        "properties": {
                          "owner": {
                            "$ref": "#/components/schemas/Activity/properties/_embed/properties/author",
                            "title": "Owner of the task"
                          },
                          "assigned_staffs": {
                            "title": "Staffs assigned to the task",
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/Activity/properties/_embed/properties/author"
                            },
                            "nullable": true
                          },
                          "related": {
                            "type": "array",
                            "minItems": 0,
                            "maxItems": 1,
                            "nullable": false,
                            "description": "Objects linked to the task",
                            "items": {
                              "anyOf": [
                                {
                                  "$ref": "#/components/schemas/SaleEmbed/properties/_embed/allOf/0/properties/company",
                                  "title": "Company"
                                },
                                {
                                  "$ref": "#/components/schemas/SaleEmbed/properties/_embed/allOf/0/properties/individual",
                                  "title": "Individual"
                                },
                                {
                                  "$ref": "#/components/schemas/ContactItem/allOf/0",
                                  "title": "Contact"
                                },
                                {
                                  "$ref": "#/components/schemas/Activity/properties/object/properties/model/oneOf/1",
                                  "title": "Opportunity"
                                },
                                {
                                  "$ref": "#/components/schemas/InvoiceOne/allOf/0",
                                  "title": "Invoice"
                                },
                                {
                                  "$ref": "#/components/schemas/CreditNoteOne/allOf/0",
                                  "title": "Credit note"
                                },
                                {
                                  "$ref": "#/components/schemas/EstimateOne/allOf/0",
                                  "title": "Estimate"
                                }
                              ]
                            }
                          },
                          "company": {
                            "$ref": "#/components/schemas/SaleEmbed/properties/_embed/allOf/0/properties/company",
                            "title": "Company linked to the task",
                            "nullable": true
                          },
                          "individual": {
                            "$ref": "#/components/schemas/SaleEmbed/properties/_embed/allOf/0/properties/individual",
                            "title": "Individual linked to the task",
                            "nullable": true
                          },
                          "contact": {
                            "$ref": "#/components/schemas/ContactItem/allOf/0",
                            "title": "Contact linked to the task",
                            "nullable": true
                          }
                        }
                      },
                      {
                        "type": "object",
                        "properties": {
                          "acl": {
                            "nullable": true,
                            "description": "Task ACL",
                            "allOf": [
                              {
                                "$ref": "#/components/schemas/Activity/properties/_embed/properties/acl/oneOf/3"
                              }
                            ]
                          }
                        }
                      }
                    ]
                  }
                ]
              }
            }
          }
        ]
      },
      "TaskCollectionItem": {
        "title": "Task Collection Item",
        "allOf": [
          {
            "$ref": "#/components/schemas/TaskItem/allOf/0"
          },
          {
            "type": "object",
            "properties": {
              "_embed": {
                "allOf": [
                  {
                    "title": "Embed for Task collection item",
                    "type": "object",
                    "description": "Objects add to response. Use embed parameter",
                    "x-examples": {},
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/TaskItem/allOf/1/properties/_embed/allOf/0/allOf/0"
                      }
                    ]
                  }
                ]
              }
            }
          }
        ]
      },
      "TaskCreateItem": {
        "title": "TaskCreateItem",
        "allOf": [
          {
            "type": "object",
            "description": "Task update object",
            "x-examples": {},
            "properties": {
              "title": {
                "type": "string",
                "example": "Meeting",
                "description": "Task title",
                "nullable": true
              },
              "description": {
                "type": "string",
                "example": "Monthly meeting with consulting team",
                "description": "Task description",
                "nullable": true
              },
              "is_private": {
                "type": "boolean",
                "description": "Task is private or public",
                "default": false
              },
              "due_date": {
                "description": "due date and time of task",
                "type": "string",
                "format": "date-time",
                "example": "2020-01-01T00:00:00+01:00"
              },
              "status": {
                "type": "string",
                "example": "todo",
                "description": "Task status",
                "enum": [
                  "todo",
                  "done"
                ]
              },
              "assigned_staff_ids": {
                "type": "array",
                "nullable": true,
                "items": {
                  "type": "integer",
                  "description": "staffs assigned to the task",
                  "example": 1
                }
              },
              "label_id": {
                "description": "Task label",
                "type": "integer"
              },
              "related": {
                "type": "array",
                "minItems": 0,
                "maxItems": 1,
                "nullable": false,
                "description": "Main object related to the task (limit to 1). If empty, the link with the existing related object will be removed.",
                "items": {
                  "type": "object",
                  "additionalProperties": false,
                  "description": "Main object related to the task",
                  "required": [
                    "type",
                    "id"
                  ],
                  "properties": {
                    "id": {
                      "type": "integer",
                      "example": 1
                    },
                    "type": {
                      "type": "string",
                      "example": "opportunity",
                      "enum": [
                        "opportunity",
                        "company",
                        "individual",
                        "contact",
                        "estimate",
                        "invoice",
                        "creditnote"
                      ]
                    }
                  }
                }
              },
              "owner_id": {
                "description": "Owner of the task (Staff id expected)",
                "type": "integer"
              }
            }
          },
          {
            "description": "Task create item"
          },
          {
            "type": "object",
            "required": [
              "label_id",
              "due_date"
            ],
            "properties": {
              "related": {
                "type": "array",
                "minItems": 0,
                "maxItems": 1,
                "nullable": false,
                "description": "Main object related to the task (limit to 1).",
                "items": {
                  "type": "object",
                  "additionalProperties": false,
                  "description": "Main object related to the task",
                  "required": [
                    "type",
                    "id"
                  ],
                  "properties": {
                    "id": {
                      "type": "integer",
                      "example": 1
                    },
                    "type": {
                      "type": "string",
                      "example": "opportunity",
                      "enum": [
                        "opportunity",
                        "company",
                        "individual",
                        "contact",
                        "estimate",
                        "invoice",
                        "creditnote"
                      ]
                    }
                  }
                }
              },
              "created": {
                "description": "Date of creation of the calendar event",
                "type": "string",
                "format": "date-time"
              }
            }
          }
        ]
      },
      "TaskUpdateItem": {
        "type": "object",
        "description": "Task update object",
        "x-examples": {},
        "properties": {
          "title": {
            "type": "string",
            "example": "Meeting",
            "description": "Task title",
            "nullable": true
          },
          "description": {
            "type": "string",
            "example": "Monthly meeting with consulting team",
            "description": "Task description",
            "nullable": true
          },
          "is_private": {
            "type": "boolean",
            "description": "Task is private or public",
            "default": false
          },
          "due_date": {
            "description": "due date and time of task",
            "type": "string",
            "format": "date-time",
            "example": "2020-01-01T00:00:00+01:00"
          },
          "status": {
            "type": "string",
            "example": "todo",
            "description": "Task status",
            "enum": [
              "todo",
              "done"
            ]
          },
          "assigned_staff_ids": {
            "type": "array",
            "nullable": true,
            "items": {
              "type": "integer",
              "description": "staffs assigned to the task",
              "example": 1
            }
          },
          "label_id": {
            "description": "Task label",
            "type": "integer"
          },
          "related": {
            "type": "array",
            "minItems": 0,
            "maxItems": 1,
            "nullable": false,
            "description": "Main object related to the task (limit to 1). If empty, the link with the existing related object will be removed.",
            "items": {
              "type": "object",
              "additionalProperties": false,
              "description": "Main object related to the task",
              "required": [
                "type",
                "id"
              ],
              "properties": {
                "id": {
                  "type": "integer",
                  "example": 1
                },
                "type": {
                  "type": "string",
                  "example": "opportunity",
                  "enum": [
                    "opportunity",
                    "company",
                    "individual",
                    "contact",
                    "estimate",
                    "invoice",
                    "creditnote"
                  ]
                }
              }
            }
          },
          "owner_id": {
            "description": "Owner of the task (Staff id expected)",
            "type": "integer"
          }
        }
      },
      "TaskFilter": {
        "title": "taskFilter",
        "type": "object",
        "description": "The task filters",
        "properties": {
          "filters": {
            "type": "object",
            "description": "task filters",
            "properties": {
              "created": {
                "title": "Created at",
                "type": "object",
                "description": "Filter the tasks list by creation date",
                "properties": {
                  "start": {
                    "type": "string",
                    "format": "date-time",
                    "example": "2020-01-01T00:00:00+01:00"
                  },
                  "end": {
                    "type": "string",
                    "format": "date-time",
                    "example": "2020-02-01T00:00:00+01:00"
                  }
                }
              },
              "due_date": {
                "title": "Due date",
                "type": "object",
                "description": "Filter the tasks list by due date",
                "properties": {
                  "start": {
                    "type": "string",
                    "format": "date-time",
                    "example": "2020-01-01T00:00:00+01:00"
                  },
                  "end": {
                    "type": "string",
                    "format": "date-time",
                    "example": "2020-02-01T00:00:00+01:00"
                  }
                }
              },
              "owners": {
                "title": "Owners",
                "type": "array",
                "items": {
                  "type": "integer",
                  "example": 77
                },
                "description": "Filter the tasks list by owners"
              },
              "assigned_staffs": {
                "title": "Assigned staffs",
                "type": "array",
                "items": {
                  "type": "integer",
                  "example": 33
                },
                "description": "Filter the tasks list by assigned staffs"
              },
              "statuses": {
                "title": "Statuses",
                "type": "array",
                "items": {
                  "type": "string",
                  "example": "todo",
                  "enum": [
                    "todo",
                    "done"
                  ]
                },
                "description": "Filter the tasks list by statuses"
              },
              "labels": {
                "title": "Labels",
                "type": "array",
                "items": {
                  "type": "integer",
                  "example": 47
                },
                "description": "Filter the tasks list by labels"
              },
              "related_objects": {
                "title": "Related Objects",
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "example": "company"
                    },
                    "id": {
                      "type": "integer",
                      "example": 22
                    }
                  }
                },
                "description": "Filter the tasks list by related objects"
              },
              "companies": {
                "title": "Companies",
                "type": "array",
                "description": "Filter the tasks list by companies",
                "items": {
                  "type": "integer"
                }
              },
              "individuals": {
                "title": "Individuals",
                "type": "array",
                "description": "Filter the tasks list by individuals",
                "items": {
                  "type": "integer"
                }
              },
              "contacts": {
                "title": "Contacts",
                "type": "array",
                "description": "Filter the tasks list by contacts",
                "items": {
                  "type": "integer"
                }
              }
            }
          }
        },
        "required": [
          "filters"
        ]
      },
      "Label": {
        "type": "object",
        "description": "Label",
        "x-examples": {},
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true,
            "description": "Label id",
            "example": 6657
          },
          "name": {
            "type": "string",
            "example": "Reminder",
            "description": "Label title"
          },
          "color": {
            "type": "string",
            "example": "#f7dcf5",
            "description": "Color of label",
            "nullable": true
          },
          "is_active": {
            "type": "boolean",
            "example": true,
            "description": "If label is active"
          },
          "rank": {
            "type": "integer",
            "example": 1,
            "description": "Label rank"
          }
        }
      },
      "LabelBaseItem": {
        "title": "Task",
        "type": "object",
        "description": "Task base object",
        "x-examples": {},
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true,
            "description": "Task ID",
            "example": 6657
          },
          "title": {
            "type": "string",
            "example": "Meeting",
            "description": "Task title",
            "nullable": true
          },
          "description": {
            "type": "string",
            "example": "Monthly meeting with consulting team",
            "description": "Task description",
            "nullable": true
          },
          "status": {
            "type": "string",
            "example": "todo",
            "description": "Task status",
            "readOnly": true,
            "enum": [
              "todo",
              "done"
            ]
          },
          "is_private": {
            "type": "boolean",
            "description": "Task is private or public",
            "default": false
          },
          "due_date": {
            "description": "due date and time of task",
            "type": "string",
            "format": "date-time",
            "example": "2020-01-01T00:00:00+01:00"
          },
          "assigned_staff_ids": {
            "type": "array",
            "nullable": true,
            "items": {
              "type": "integer",
              "description": "staffs assigned to the task",
              "example": 1
            }
          },
          "label": {
            "type": "object",
            "description": "Label",
            "x-examples": {},
            "properties": {
              "id": {
                "type": "integer",
                "readOnly": true,
                "description": "Label id",
                "example": 6657
              },
              "name": {
                "type": "string",
                "example": "Reminder",
                "description": "Label title"
              },
              "color": {
                "type": "string",
                "example": "#f7dcf5",
                "description": "Color of label",
                "nullable": true
              },
              "is_active": {
                "type": "boolean",
                "example": true,
                "description": "If label is active"
              },
              "rank": {
                "type": "integer",
                "example": 1,
                "description": "Label rank"
              }
            }
          },
          "updated": {
            "description": "Updated date of task (system)",
            "type": "string",
            "format": "date-time",
            "example": "2020-01-01T00:00:00+01:00",
            "readOnly": true
          },
          "created": {
            "description": "Created date of task (system)",
            "type": "string",
            "format": "date-time",
            "example": "2020-01-01T00:00:00+01:00",
            "readOnly": true
          },
          "related": {
            "type": "array",
            "minItems": 0,
            "maxItems": 1,
            "nullable": false,
            "description": "Main object related to the task (limit to 1).",
            "items": {
              "type": "object",
              "additionalProperties": false,
              "description": "Main object related to the task",
              "properties": {
                "id": {
                  "type": "integer",
                  "example": 1
                },
                "type": {
                  "type": "string",
                  "example": "opportunity",
                  "enum": [
                    "opportunity",
                    "company",
                    "individual",
                    "contact",
                    "invoice",
                    "creditnote",
                    "estimate"
                  ]
                }
              }
            }
          },
          "owner": {
            "description": "Owner of the task",
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "description": "owner type",
                "enum": [
                  "staff"
                ]
              },
              "id": {
                "type": "integer",
                "description": "Owner id",
                "example": 51
              }
            }
          },
          "company_id": {
            "type": "integer",
            "description": "Company linked to the task",
            "example": 1,
            "readOnly": true,
            "nullable": true
          },
          "individual_id": {
            "type": "integer",
            "description": "Individual linked to the task",
            "example": 92,
            "readOnly": true,
            "nullable": true
          },
          "contact_id": {
            "type": "integer",
            "description": "Contact linked to the task",
            "example": 958,
            "readOnly": true,
            "nullable": true
          }
        }
      },
      "SearchResult": {
        "type": "array",
        "description": "Search Result Object",
        "x-examples": {},
        "items": {
          "anyOf": [
            {
              "type": "object",
              "title": "Company search result",
              "description": "Company Search Result Object",
              "additionalProperties": false,
              "allOf": [
                {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "readOnly": true,
                      "description": "Unique ID",
                      "example": 6657
                    },
                    "object": {
                      "type": "object",
                      "description": "Main object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "enum": [
                            "contact",
                            "company",
                            "individual",
                            "opportunity",
                            "purchase",
                            "item",
                            "declination",
                            "document",
                            "staff"
                          ],
                          "nullable": false
                        },
                        "id": {
                          "type": "integer",
                          "example": 11,
                          "nullable": false
                        },
                        "sub_type": {
                          "type": "string",
                          "enum": [
                            "contact",
                            "opportunity",
                            "client",
                            "prospect",
                            "supplier",
                            "purInvoice",
                            "purDelivery",
                            "purOrder",
                            "purCreditNote",
                            "product",
                            "packaging",
                            "shipping",
                            "service",
                            "declination",
                            "invoice",
                            "estimate",
                            "creditnote",
                            "order",
                            "delivery",
                            "proforma",
                            "staff"
                          ],
                          "nullable": false
                        }
                      },
                      "nullable": false
                    },
                    "owner": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/StaffAutocompleteResultItem/properties/owner/allOf/0"
                        }
                      ],
                      "readOnly": true
                    },
                    "created": {
                      "type": "string",
                      "format": "datetime",
                      "nullable": false,
                      "description": "Created datetime of object",
                      "example": "2020-05-29T11:22:03+02:00",
                      "readOnly": true
                    },
                    "updated": {
                      "type": "string",
                      "format": "datetime",
                      "nullable": false,
                      "description": "updated datetime of object",
                      "example": "2020-05-29T11:22:03+02:00",
                      "readOnly": true
                    },
                    "is_archived": {
                      "type": "boolean",
                      "nullable": false,
                      "description": "Status archived or not",
                      "example": false
                    }
                  }
                },
                {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Company name",
                      "example": "My company"
                    },
                    "mobile_number": {
                      "type": "string",
                      "description": "Company mobile number",
                      "example": "+33600000000",
                      "nullable": true
                    },
                    "fax_number": {
                      "type": "string",
                      "description": "Company fax number",
                      "example": "+33400000000",
                      "nullable": true
                    },
                    "phone_number": {
                      "type": "string",
                      "description": "Company phone number",
                      "example": "+33500000000",
                      "nullable": true
                    },
                    "email": {
                      "type": "string",
                      "format": "email",
                      "example": "contact@my-company.com",
                      "nullable": true
                    },
                    "invoicing_address": {
                      "type": "object",
                      "title": "Address",
                      "additionalProperties": false,
                      "nullable": true,
                      "properties": {
                        "id": {
                          "type": "integer",
                          "readOnly": true,
                          "description": "Unique ID",
                          "example": 6657
                        },
                        "address_line_1": {
                          "type": "string",
                          "description": "Address line one",
                          "example": "30 Commercial Road",
                          "nullable": true
                        },
                        "address_line_2": {
                          "type": "string",
                          "description": "Address line two",
                          "example": "Finance and Accounting",
                          "nullable": true
                        },
                        "address_line_3": {
                          "type": "string",
                          "description": "Address line three",
                          "example": "Lighthouse Promotions",
                          "nullable": true
                        },
                        "address_line_4": {
                          "type": "string",
                          "description": "Address line four",
                          "example": "PO Box 215",
                          "nullable": true
                        },
                        "postal_code": {
                          "type": "string",
                          "nullable": true,
                          "description": "Address postal code",
                          "example": "75012",
                          "minLength": 2
                        },
                        "city": {
                          "type": "string",
                          "description": "Address city name",
                          "example": "Paris",
                          "minLength": 2
                        },
                        "country_code": {
                          "type": "string",
                          "description": "Address country code",
                          "example": "FR",
                          "minLength": 2,
                          "maxLength": 2
                        }
                      }
                    },
                    "delivery_address": {
                      "$ref": "#/components/schemas/SearchResult/items/anyOf/0/allOf/1/properties/invoicing_address"
                    },
                    "main_contact": {
                      "type": "object",
                      "nullable": true,
                      "description": "Company's main contact",
                      "properties": {
                        "id": {
                          "type": "integer",
                          "description": "contact identifier",
                          "example": 6830
                        },
                        "last_name": {
                          "type": "string",
                          "example": "Doe",
                          "description": "Contact last name"
                        },
                        "first_name": {
                          "type": "string",
                          "example": "John",
                          "description": "Contact first name"
                        },
                        "civility": {
                          "type": "string",
                          "description": "Civility of individual",
                          "example": "mrs",
                          "enum": [
                            "mr",
                            "mrs",
                            "ms"
                          ]
                        }
                      }
                    }
                  }
                }
              ]
            },
            {
              "type": "object",
              "title": "Individual search result",
              "additionalProperties": false,
              "allOf": [
                {
                  "$ref": "#/components/schemas/SearchResult/items/anyOf/0/allOf/0"
                },
                {
                  "type": "object",
                  "properties": {
                    "first_name": {
                      "type": "string",
                      "description": "Individual first name",
                      "example": "John",
                      "nullable": true
                    },
                    "last_name": {
                      "type": "string",
                      "example": "Doe",
                      "description": "Individual last name"
                    },
                    "civility": {
                      "type": "string",
                      "description": "Civility of individual",
                      "example": "mrs",
                      "enum": [
                        "mr",
                        "mrs",
                        "ms"
                      ]
                    },
                    "mobile_number": {
                      "type": "string",
                      "description": "Individual mobile number",
                      "example": "+33600000000",
                      "nullable": true
                    },
                    "fax_number": {
                      "type": "string",
                      "description": "Individual fax number",
                      "example": "+33400000000",
                      "nullable": true
                    },
                    "phone_number": {
                      "type": "string",
                      "description": "Individual phone number",
                      "example": "+33500000000",
                      "nullable": true
                    },
                    "email": {
                      "type": "string",
                      "format": "email",
                      "example": "jonh.doe@email.com",
                      "nullable": true
                    },
                    "invoicing_address": {
                      "$ref": "#/components/schemas/SearchResult/items/anyOf/0/allOf/1/properties/invoicing_address"
                    },
                    "delivery_address": {
                      "$ref": "#/components/schemas/SearchResult/items/anyOf/0/allOf/1/properties/invoicing_address"
                    }
                  }
                }
              ]
            },
            {
              "type": "object",
              "title": "Opportunity search result",
              "additionalProperties": false,
              "allOf": [
                {
                  "$ref": "#/components/schemas/SearchResult/items/anyOf/0/allOf/0"
                },
                {
                  "type": "object",
                  "properties": {
                    "number": {
                      "type": "string",
                      "description": "Opportunity ident",
                      "example": "OPP-001",
                      "nullable": false
                    },
                    "name": {
                      "type": "string",
                      "description": "Opportunity name",
                      "example": "Opportunity number one",
                      "nullable": false
                    },
                    "status": {
                      "type": "string",
                      "description": "Opportunity status",
                      "example": "won",
                      "enum": [
                        "open",
                        "won",
                        "lost",
                        "cancelled",
                        "closed",
                        "late"
                      ]
                    },
                    "amount": {
                      "type": "number",
                      "description": "potential amount non formatted",
                      "example": 1450.45
                    },
                    "related": {
                      "type": "object",
                      "allOf": [
                        {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "integer"
                            }
                          }
                        },
                        {
                          "oneOf": [
                            {
                              "type": "object",
                              "title": "Company",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "description": "company name"
                                },
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "company"
                                  ]
                                }
                              }
                            },
                            {
                              "type": "object",
                              "title": "Individual",
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "individual"
                                  ]
                                },
                                "first_name": {
                                  "type": "string",
                                  "description": "Individual first name",
                                  "example": "John"
                                },
                                "last_name": {
                                  "type": "string",
                                  "example": "Doe",
                                  "description": "Individual last name"
                                },
                                "civility": {
                                  "type": "string",
                                  "description": "Civility of linked contact",
                                  "example": "mrs",
                                  "enum": [
                                    "mr",
                                    "mrs",
                                    "ms"
                                  ]
                                }
                              }
                            }
                          ]
                        }
                      ]
                    }
                  }
                }
              ]
            },
            {
              "type": "object",
              "title": "Contact search result",
              "additionalProperties": false,
              "allOf": [
                {
                  "$ref": "#/components/schemas/SearchResult/items/anyOf/0/allOf/0"
                },
                {
                  "type": "object",
                  "properties": {
                    "first_name": {
                      "description": "Contact first name",
                      "type": "string",
                      "format": "text",
                      "example": "John",
                      "nullable": true
                    },
                    "last_name": {
                      "description": "Contact last name",
                      "type": "string",
                      "format": "text",
                      "example": "Doe",
                      "nullable": true
                    },
                    "civility": {
                      "type": "string",
                      "description": "Civility of contact",
                      "example": "mrs",
                      "enum": [
                        "mr",
                        "mrs",
                        "ms"
                      ]
                    },
                    "email": {
                      "description": "Contact email",
                      "type": "string",
                      "format": "email",
                      "example": "john.doe@example-company.com",
                      "nullable": true
                    },
                    "phone_number": {
                      "type": "string",
                      "description": "Contact phone number",
                      "example": "+33100000000",
                      "nullable": true
                    },
                    "mobile_number": {
                      "type": "string",
                      "description": "Contact mobile number",
                      "example": "+33100000000",
                      "nullable": true
                    },
                    "fax_number": {
                      "type": "string",
                      "description": "Contact fax number",
                      "example": "+33100000000",
                      "nullable": true
                    },
                    "position": {
                      "type": "string",
                      "nullable": true,
                      "description": "Contact job",
                      "example": "Financial"
                    },
                    "companies": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "format": "text",
                            "example": "This company",
                            "description": "Company name",
                            "nullable": false
                          },
                          "id": {
                            "type": "integer",
                            "example": 5456,
                            "description": "Company id",
                            "nullable": false,
                            "minimum": 1
                          }
                        }
                      }
                    },
                    "invoicing_address": {
                      "$ref": "#/components/schemas/SearchResult/items/anyOf/0/allOf/1/properties/invoicing_address"
                    },
                    "delivery_address": {
                      "$ref": "#/components/schemas/SearchResult/items/anyOf/0/allOf/1/properties/invoicing_address"
                    }
                  }
                }
              ]
            },
            {
              "type": "object",
              "title": "Purchase search result",
              "additionalProperties": false,
              "allOf": [
                {
                  "$ref": "#/components/schemas/SearchResult/items/anyOf/0/allOf/0"
                },
                {
                  "type": "object",
                  "properties": {
                    "status": {
                      "description": "Purchase status",
                      "type": "string",
                      "example": "read",
                      "enum": [
                        "draft",
                        "due",
                        "payinprogress",
                        "paid",
                        "late",
                        "cancelled",
                        "sent",
                        "read",
                        "accepted",
                        "expired",
                        "partialInvoiced",
                        "invoiced",
                        "stored",
                        "spent",
                        "partialspend"
                      ]
                    },
                    "number": {
                      "description": "Purchase number",
                      "type": "string",
                      "example": "F_INV-20210303-00001"
                    },
                    "external_number": {
                      "description": "Purchase external number",
                      "type": "string",
                      "example": "FACT-2020W3-00001"
                    },
                    "name": {
                      "type": "string",
                      "description": "Purchase subject",
                      "nullable": true
                    },
                    "amount": {
                      "type": "number",
                      "format": "float",
                      "description": "Total purchase amount, taxes included",
                      "example": 133.7
                    },
                    "currency": {
                      "type": "string",
                      "description": "Purchase currency",
                      "example": "€"
                    },
                    "related": {
                      "type": "object",
                      "allOf": [
                        {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "integer"
                            }
                          }
                        },
                        {
                          "oneOf": [
                            {
                              "type": "object",
                              "title": "Company",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "description": "company name"
                                },
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "company"
                                  ]
                                }
                              }
                            },
                            {
                              "type": "object",
                              "title": "Individual",
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "individual"
                                  ]
                                },
                                "first_name": {
                                  "type": "string",
                                  "description": "Individual first name",
                                  "example": "John"
                                },
                                "last_name": {
                                  "type": "string",
                                  "example": "Doe",
                                  "description": "Individual last name"
                                },
                                "civility": {
                                  "type": "string",
                                  "description": "Civility of linked contact",
                                  "example": "mrs",
                                  "enum": [
                                    "mr",
                                    "mrs",
                                    "ms"
                                  ]
                                }
                              }
                            }
                          ]
                        }
                      ]
                    }
                  }
                }
              ]
            },
            {
              "type": "object",
              "title": "Item search result",
              "additionalProperties": false,
              "description": "Item Search Result Object",
              "allOf": [
                {
                  "$ref": "#/components/schemas/SearchResult/items/anyOf/0/allOf/0"
                },
                {
                  "type": "object",
                  "properties": {
                    "number": {
                      "type": "string",
                      "description": "Item number",
                      "example": "REF_00001"
                    },
                    "name": {
                      "type": "string",
                      "description": "item name",
                      "example": "My product",
                      "nullable": true
                    },
                    "description": {
                      "type": "string",
                      "description": "Item description",
                      "example": "This is a product description",
                      "nullable": true
                    }
                  }
                }
              ]
            },
            {
              "type": "object",
              "title": "Item declination search result",
              "additionalProperties": false,
              "description": "Item declination search result object",
              "allOf": [
                {
                  "$ref": "#/components/schemas/SearchResult/items/anyOf/0/allOf/0"
                },
                {
                  "type": "object",
                  "properties": {
                    "number": {
                      "type": "string",
                      "description": "Item declination number",
                      "example": "REF_00001_RED"
                    },
                    "name": {
                      "type": "string",
                      "description": "item declination name",
                      "example": "My product Red",
                      "nullable": true
                    },
                    "description": {
                      "type": "string",
                      "description": "Item declination description",
                      "example": "This is a product description with red color",
                      "nullable": true
                    },
                    "related": {
                      "type": "object",
                      "description": "Original item related to this declination",
                      "properties": {
                        "id": {
                          "type": "integer"
                        },
                        "number": {
                          "type": "string"
                        },
                        "name": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              ]
            },
            {
              "type": "object",
              "title": "Document search result",
              "additionalProperties": false,
              "allOf": [
                {
                  "$ref": "#/components/schemas/SearchResult/items/anyOf/0/allOf/0"
                },
                {
                  "type": "object",
                  "properties": {
                    "status": {
                      "description": "Document status",
                      "type": "string",
                      "example": "read",
                      "enum": [
                        "draft",
                        "due",
                        "payinprogress",
                        "paid",
                        "late",
                        "cancelled",
                        "sent",
                        "read",
                        "accepted",
                        "refused",
                        "expired",
                        "advanced",
                        "partialinvoiced",
                        "invoiced",
                        "stored",
                        "partialspend",
                        "spent"
                      ]
                    },
                    "number": {
                      "description": "Document number",
                      "type": "string",
                      "example": "FACT-20210302-00001"
                    },
                    "name": {
                      "type": "string",
                      "description": "Document subject",
                      "nullable": true
                    },
                    "amount": {
                      "type": "number",
                      "format": "float",
                      "description": "Total amount of document, taxes include",
                      "example": 942.88
                    },
                    "currency": {
                      "type": "string",
                      "description": "Document currency",
                      "example": "€"
                    },
                    "related": {
                      "type": "object",
                      "allOf": [
                        {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "integer"
                            }
                          }
                        },
                        {
                          "oneOf": [
                            {
                              "type": "object",
                              "title": "Company",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "description": "company name"
                                },
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "company"
                                  ]
                                }
                              }
                            },
                            {
                              "type": "object",
                              "title": "Individual",
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "individual"
                                  ]
                                },
                                "first_name": {
                                  "type": "string",
                                  "description": "Individual first name",
                                  "example": "John"
                                },
                                "last_name": {
                                  "type": "string",
                                  "example": "Doe",
                                  "description": "Individual last name"
                                },
                                "civility": {
                                  "type": "string",
                                  "description": "Civility of linked contact",
                                  "example": "mrs",
                                  "enum": [
                                    "mr",
                                    "mrs",
                                    "ms"
                                  ]
                                }
                              }
                            }
                          ]
                        }
                      ]
                    }
                  }
                }
              ]
            },
            {
              "type": "object",
              "title": "Staff search result",
              "additionalProperties": false,
              "allOf": [
                {
                  "$ref": "#/components/schemas/SearchResult/items/anyOf/0/allOf/0"
                },
                {
                  "type": "object",
                  "properties": {
                    "first_name": {
                      "description": "Staff's first name",
                      "type": "string",
                      "format": "text",
                      "example": "John",
                      "nullable": true
                    },
                    "last_name": {
                      "description": "Staff's last name",
                      "type": "string",
                      "format": "text",
                      "example": "Doe",
                      "nullable": true
                    },
                    "phone_number": {
                      "type": "string",
                      "description": "Staff's phone number",
                      "example": "+33100000000",
                      "nullable": true
                    },
                    "mobile_number": {
                      "type": "string",
                      "description": "Staff's mobile number",
                      "example": "+33100000000",
                      "nullable": true
                    },
                    "blocked": {
                      "type": "boolean",
                      "description": "Staff's status"
                    },
                    "email": {
                      "description": "Staff's email",
                      "type": "string",
                      "format": "email",
                      "example": "john.doe@example-company.com",
                      "nullable": true
                    },
                    "position": {
                      "type": "string",
                      "nullable": true,
                      "description": "Staff's job",
                      "example": "Financial"
                    }
                  }
                }
              ]
            }
          ]
        }
      },
      "SearchResultBaseItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true,
            "description": "Unique ID",
            "example": 6657
          },
          "object": {
            "type": "object",
            "description": "Main object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "contact",
                  "company",
                  "individual",
                  "opportunity",
                  "purchase",
                  "item",
                  "declination",
                  "document",
                  "staff"
                ],
                "nullable": false
              },
              "id": {
                "type": "integer",
                "example": 11,
                "nullable": false
              },
              "sub_type": {
                "type": "string",
                "enum": [
                  "contact",
                  "opportunity",
                  "client",
                  "prospect",
                  "supplier",
                  "purInvoice",
                  "purDelivery",
                  "purOrder",
                  "purCreditNote",
                  "product",
                  "packaging",
                  "shipping",
                  "service",
                  "declination",
                  "invoice",
                  "estimate",
                  "creditnote",
                  "order",
                  "delivery",
                  "proforma",
                  "staff"
                ],
                "nullable": false
              }
            },
            "nullable": false
          },
          "owner": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StaffAutocompleteResultItem/properties/owner/allOf/0"
              }
            ],
            "readOnly": true
          },
          "created": {
            "type": "string",
            "format": "datetime",
            "nullable": false,
            "description": "Created datetime of object",
            "example": "2020-05-29T11:22:03+02:00",
            "readOnly": true
          },
          "updated": {
            "type": "string",
            "format": "datetime",
            "nullable": false,
            "description": "updated datetime of object",
            "example": "2020-05-29T11:22:03+02:00",
            "readOnly": true
          },
          "is_archived": {
            "type": "boolean",
            "nullable": false,
            "description": "Status archived or not",
            "example": false
          }
        }
      },
      "SearchResultAggregations": {
        "type": "object",
        "description": "Search Result Aggregations",
        "x-examples": {},
        "properties": {
          "count_by_type": {
            "type": "object",
            "description": "Count the number of objects by type",
            "properties": {
              "company": {
                "type": "array",
                "minItems": 1,
                "maxItems": 2,
                "description": "The 1st value corresponds to active objects, the 2nd to achived objects",
                "items": {
                  "type": "integer"
                }
              },
              "individual": {
                "$ref": "#/components/schemas/SearchResultAggregations/properties/count_by_type/properties/company"
              },
              "contact": {
                "$ref": "#/components/schemas/SearchResultAggregations/properties/count_by_type/properties/company"
              },
              "opportunity": {
                "$ref": "#/components/schemas/SearchResultAggregations/properties/count_by_type/properties/company"
              },
              "purchase": {
                "$ref": "#/components/schemas/SearchResultAggregations/properties/count_by_type/properties/company"
              },
              "item": {
                "$ref": "#/components/schemas/SearchResultAggregations/properties/count_by_type/properties/company"
              },
              "declination": {
                "$ref": "#/components/schemas/SearchResultAggregations/properties/count_by_type/properties/company"
              },
              "document": {
                "$ref": "#/components/schemas/SearchResultAggregations/properties/count_by_type/properties/company"
              },
              "staff": {
                "$ref": "#/components/schemas/SearchResultAggregations/properties/count_by_type/properties/company"
              }
            }
          }
        }
      },
      "PhoneCallItem": {
        "title": "PhoneCall",
        "allOf": [
          {
            "title": "PhoneCall",
            "allOf": [
              {
                "type": "object",
                "description": "The CRM phoneCall",
                "required": [
                  "related"
                ],
                "properties": {
                  "id": {
                    "type": "integer",
                    "readOnly": true
                  },
                  "source": {
                    "type": "string",
                    "description": "Incoming call or Outgoing call",
                    "enum": [
                      "incoming",
                      "outcoming"
                    ]
                  },
                  "description": {
                    "type": "string",
                    "description": "Description of the phone call",
                    "example": "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor",
                    "nullable": true
                  },
                  "updated": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Last update date / hour",
                    "example": "2020-01-01T00:00:00+01:00",
                    "readOnly": true
                  },
                  "created": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Creation date / hour",
                    "example": "2020-01-01T00:00:00+01:00",
                    "readOnly": true
                  },
                  "duration": {
                    "type": "integer",
                    "description": "Total duration of call (in seconds)",
                    "example": 12345
                  },
                  "date": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Date and hour of phonecall",
                    "example": "2020-01-01T00:00:00+01:00"
                  },
                  "company_id": {
                    "type": "integer",
                    "description": "Company linked to the phone call",
                    "nullable": true,
                    "readOnly": true
                  },
                  "individual_id": {
                    "type": "integer",
                    "description": "Individual linked to the phone call",
                    "nullable": true,
                    "readOnly": true
                  },
                  "contact_id": {
                    "type": "integer",
                    "description": "Contact linked to the phone call",
                    "nullable": true,
                    "readOnly": true
                  },
                  "related": {
                    "type": "array",
                    "minItems": 1,
                    "description": "List objects related to the phone call",
                    "items": {
                      "type": "object",
                      "additionalProperties": false,
                      "description": "Object related to the phone call",
                      "properties": {
                        "id": {
                          "type": "integer",
                          "example": 1
                        },
                        "type": {
                          "type": "string",
                          "example": "opportunity",
                          "enum": [
                            "opportunity",
                            "company",
                            "individual",
                            "contact"
                          ]
                        }
                      }
                    }
                  }
                }
              },
              {
                "type": "object",
                "properties": {
                  "owner": {
                    "$ref": "#/components/schemas/StaffAutocompleteResultItem/properties/owner/allOf/0",
                    "description": "Owner of the phone call"
                  },
                  "source": {
                    "type": "string",
                    "description": "Incoming call or Outgoing call",
                    "enum": [
                      "incoming",
                      "outcoming"
                    ]
                  },
                  "topic": {
                    "type": "object",
                    "description": "Phone call topic",
                    "properties": {
                      "id": {
                        "type": "integer",
                        "example": 2235
                      },
                      "name": {
                        "type": "string",
                        "example": "Support"
                      }
                    }
                  },
                  "result": {
                    "type": "object",
                    "description": "Phone call result",
                    "properties": {
                      "id": {
                        "type": "string",
                        "enum": [
                          "noanswer",
                          "busy",
                          "wrongnumber",
                          "msgdirect",
                          "msgvocal",
                          "connected",
                          "transfer",
                          "interrupt"
                        ]
                      },
                      "name": {
                        "type": "string",
                        "example": "No answer"
                      }
                    }
                  }
                }
              }
            ]
          },
          {
            "type": "object",
            "properties": {
              "_embed": {
                "title": "Embed for PhoneCall object",
                "type": "object",
                "readOnly": true,
                "allOf": [
                  {
                    "title": "Embed for PhoneCall object",
                    "type": "object",
                    "readOnly": true,
                    "properties": {
                      "owner": {
                        "$ref": "#/components/schemas/Activity/properties/_embed/properties/author",
                        "title": "Owner of the phone call"
                      },
                      "related": {
                        "type": "array",
                        "minItems": 1,
                        "maxItems": 3,
                        "nullable": false,
                        "description": "Objects linked to the phone call",
                        "items": {
                          "anyOf": [
                            {
                              "title": "Company",
                              "type": "object",
                              "readOnly": true,
                              "allOf": [
                                {
                                  "$ref": "#/components/schemas/SaleEmbed/properties/_embed/allOf/0/properties/company"
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "_type": {
                                      "nullable": false,
                                      "description": "type of related",
                                      "type": "string",
                                      "enum": [
                                        "company"
                                      ]
                                    }
                                  }
                                }
                              ]
                            },
                            {
                              "title": "Individual",
                              "type": "object",
                              "readOnly": true,
                              "allOf": [
                                {
                                  "$ref": "#/components/schemas/SaleEmbed/properties/_embed/allOf/0/properties/individual"
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "_type": {
                                      "nullable": false,
                                      "description": "type of related",
                                      "type": "string",
                                      "enum": [
                                        "individual"
                                      ]
                                    }
                                  }
                                }
                              ]
                            },
                            {
                              "title": "Contact",
                              "type": "object",
                              "readOnly": true,
                              "allOf": [
                                {
                                  "$ref": "#/components/schemas/ContactItem/allOf/0"
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "_type": {
                                      "nullable": false,
                                      "description": "type of related",
                                      "type": "string",
                                      "enum": [
                                        "contact"
                                      ]
                                    }
                                  }
                                }
                              ]
                            },
                            {
                              "title": "Opportunity",
                              "type": "object",
                              "readOnly": true,
                              "allOf": [
                                {
                                  "$ref": "#/components/schemas/Activity/properties/object/properties/model/oneOf/1"
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "_type": {
                                      "nullable": false,
                                      "description": "type of related",
                                      "type": "string",
                                      "enum": [
                                        "opportunity"
                                      ]
                                    }
                                  }
                                }
                              ]
                            }
                          ]
                        }
                      },
                      "company": {
                        "$ref": "#/components/schemas/SaleEmbed/properties/_embed/allOf/0/properties/company",
                        "title": "Company linked to the phone call",
                        "nullable": true
                      },
                      "individual": {
                        "$ref": "#/components/schemas/SaleEmbed/properties/_embed/allOf/0/properties/individual",
                        "title": "Individual linked to the phone call",
                        "nullable": true
                      },
                      "contact": {
                        "$ref": "#/components/schemas/ContactItem/allOf/0",
                        "title": "Contact linked to the phone call",
                        "nullable": true
                      }
                    }
                  },
                  {
                    "type": "object",
                    "properties": {
                      "acl": {
                        "title": "ACL for PhoneCall object",
                        "type": "object",
                        "description": "",
                        "x-examples": {},
                        "properties": {
                          "can_be_updated": {
                            "type": "boolean",
                            "nullable": false,
                            "description": "PhoneCall can be updated",
                            "example": true
                          },
                          "can_be_deleted": {
                            "type": "boolean",
                            "nullable": false,
                            "description": "PhoneCall can be deleted",
                            "example": true
                          }
                        }
                      }
                    }
                  }
                ]
              }
            }
          }
        ]
      },
      "PhoneCallCollectionItem": {
        "title": "PhoneCall",
        "allOf": [
          {
            "$ref": "#/components/schemas/PhoneCallItem/allOf/0"
          },
          {
            "type": "object",
            "properties": {
              "_embed": {
                "$ref": "#/components/schemas/PhoneCallItem/allOf/1/properties/_embed/allOf/0"
              }
            }
          }
        ]
      },
      "PhoneCallCreateItem": {
        "title": "PhoneCall",
        "allOf": [
          {
            "title": "PhoneCall",
            "type": "object",
            "description": "PhoneCall update request body",
            "properties": {
              "owner_id": {
                "type": "integer",
                "description": "Owner of the phone call (Staff id expected)"
              },
              "topic": {
                "type": "integer",
                "description": "Phone call topic"
              },
              "result": {
                "type": "string",
                "enum": [
                  "noanswer",
                  "busy",
                  "wrongnumber",
                  "msgdirect",
                  "msgvocal",
                  "connected",
                  "transfer",
                  "interrupt"
                ],
                "description": "Phone call result"
              },
              "source": {
                "type": "string",
                "description": "Incoming call or Outgoing call",
                "enum": [
                  "incoming",
                  "outcoming"
                ]
              },
              "description": {
                "type": "string",
                "description": "Description of the phone call",
                "example": "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor",
                "nullable": true
              },
              "duration": {
                "type": "integer",
                "description": "Total duration of call (in seconds)",
                "example": 12345
              },
              "date": {
                "type": "string",
                "format": "date-time",
                "description": "Date and hour of phonecall",
                "example": "2020-01-01T00:00:00+01:00"
              },
              "related": {
                "type": "array",
                "minItems": 1,
                "maxItems": 3,
                "description": "List objects related to the phone call (limit to 1 of each type)",
                "items": {
                  "type": "object",
                  "additionalProperties": false,
                  "description": "Object related to the phone call",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "example": 1
                    },
                    "type": {
                      "type": "string",
                      "example": "opportunity",
                      "enum": [
                        "opportunity",
                        "company",
                        "individual",
                        "contact"
                      ]
                    }
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "required": [
              "owner_id",
              "date",
              "result",
              "source",
              "related"
            ]
          },
          {
            "description": "PhoneCall create item"
          }
        ]
      },
      "PhoneCallUpdateItem": {
        "title": "PhoneCall",
        "type": "object",
        "description": "PhoneCall update request body",
        "properties": {
          "owner_id": {
            "type": "integer",
            "description": "Owner of the phone call (Staff id expected)"
          },
          "topic": {
            "type": "integer",
            "description": "Phone call topic"
          },
          "result": {
            "type": "string",
            "enum": [
              "noanswer",
              "busy",
              "wrongnumber",
              "msgdirect",
              "msgvocal",
              "connected",
              "transfer",
              "interrupt"
            ],
            "description": "Phone call result"
          },
          "source": {
            "type": "string",
            "description": "Incoming call or Outgoing call",
            "enum": [
              "incoming",
              "outcoming"
            ]
          },
          "description": {
            "type": "string",
            "description": "Description of the phone call",
            "example": "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor",
            "nullable": true
          },
          "duration": {
            "type": "integer",
            "description": "Total duration of call (in seconds)",
            "example": 12345
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "description": "Date and hour of phonecall",
            "example": "2020-01-01T00:00:00+01:00"
          },
          "related": {
            "type": "array",
            "minItems": 1,
            "maxItems": 3,
            "description": "List objects related to the phone call (limit to 1 of each type)",
            "items": {
              "type": "object",
              "additionalProperties": false,
              "description": "Object related to the phone call",
              "properties": {
                "id": {
                  "type": "integer",
                  "example": 1
                },
                "type": {
                  "type": "string",
                  "example": "opportunity",
                  "enum": [
                    "opportunity",
                    "company",
                    "individual",
                    "contact"
                  ]
                }
              }
            }
          }
        }
      },
      "PhoneCallFilter": {
        "title": "PhoneCall filters",
        "type": "object",
        "description": "Phonecall filters",
        "properties": {
          "filters": {
            "type": "object",
            "description": "Phonecall filters",
            "properties": {
              "created": {
                "title": "Created at",
                "type": "object",
                "description": "Filter the phonecalls list by creation date",
                "properties": {
                  "start": {
                    "type": "string",
                    "format": "date-time",
                    "example": "2020-01-01T00:00:00+01:00"
                  },
                  "end": {
                    "type": "string",
                    "format": "date-time",
                    "example": "2020-02-01T00:00:00+01:00"
                  }
                }
              },
              "owners": {
                "title": "Owners",
                "type": "array",
                "items": {
                  "type": "integer",
                  "example": 77
                },
                "description": "Filter the phonecalls list by owners"
              },
              "related_objects": {
                "title": "Related Objects",
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "example": "company"
                    },
                    "id": {
                      "type": "integer",
                      "example": 22
                    }
                  }
                },
                "description": "Filter the phonecalls list by related objects"
              },
              "companies": {
                "title": "Companies",
                "type": "array",
                "description": "Filter the phonecalls list by companies",
                "items": {
                  "type": "integer"
                }
              },
              "individuals": {
                "title": "Individuals",
                "type": "array",
                "description": "Filter the phonecalls list by individuals",
                "items": {
                  "type": "integer"
                }
              },
              "contacts": {
                "title": "Contacts",
                "type": "array",
                "description": "Filter the phonecalls list by contacts",
                "items": {
                  "type": "integer"
                }
              },
              "topic": {
                "title": "Topic",
                "type": "integer",
                "description": "Filter the phonecalls list by topic"
              },
              "result": {
                "title": "Result",
                "type": "string",
                "enum": [
                  "noanswer",
                  "busy",
                  "wrongnumber",
                  "msgdirect",
                  "msgvocal",
                  "connected",
                  "transfer",
                  "interrupt"
                ],
                "description": "Filter the phonecalls list by result"
              },
              "source": {
                "title": "Source",
                "description": "Filter the phonecalls list by source",
                "type": "string",
                "enum": [
                  "incoming",
                  "outcoming"
                ]
              },
              "due_date": {
                "title": "Due Date",
                "description": "Filter the phonecalls in which the due date is in that time frame",
                "type": "object",
                "properties": {
                  "start": {
                    "type": "string",
                    "format": "date-time",
                    "example": "2020-02-01T00:00:00+01:00"
                  },
                  "end": {
                    "type": "string",
                    "format": "date-time",
                    "example": "2020-02-01T00:00:00+01:00"
                  }
                }
              }
            }
          }
        },
        "required": [
          "filters"
        ]
      },
      "CalendarEventItem": {
        "title": "Calendar Event",
        "type": "object",
        "allOf": [
          {
            "title": "Calendar Event",
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "description": "Id of calendar event",
                "readOnly": true
              },
              "owner": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/StaffAutocompleteResultItem/properties/owner/allOf/0"
                  }
                ]
              },
              "title": {
                "type": "string",
                "description": "Title of calendar event"
              },
              "description": {
                "type": "string",
                "description": "Description for calendar event"
              },
              "is_private": {
                "type": "boolean",
                "description": "Calendar Event is private or public"
              },
              "all_day": {
                "type": "boolean",
                "description": "Calendar event is scheduled for the whole day",
                "default": false
              },
              "datetime_start": {
                "type": "string",
                "format": "date-time",
                "maxLength": 25,
                "description": "Calendar Event starting date / hour",
                "example": "2020-01-01T00:00:00+01:00"
              },
              "datetime_end": {
                "type": "string",
                "format": "date-time",
                "maxLength": 25,
                "description": "Calendar Event ending date / hour",
                "example": "2020-01-01T00:00:00+01:00"
              },
              "participants": {
                "type": "array",
                "description": "Participants (Staff, Contact or External Participants)",
                "items": {
                  "type": "object",
                  "description": "Participant linked",
                  "properties": {
                    "id": {
                      "oneOf": [
                        {
                          "type": "integer"
                        },
                        {
                          "type": "string"
                        }
                      ],
                      "description": "Id of participant"
                    },
                    "type": {
                      "type": "string",
                      "enum": [
                        "staff",
                        "contact",
                        "external"
                      ],
                      "description": "Type of participant"
                    }
                  }
                }
              },
              "label": {
                "$ref": "#/components/schemas/LabelBaseItem/properties/label"
              },
              "created": {
                "type": "string",
                "format": "date-time",
                "description": "Creation date / hour",
                "example": "2020-05-29T11:22:03+02:00",
                "readOnly": true
              },
              "updated": {
                "type": "string",
                "format": "date-time",
                "description": "Last update date / hour",
                "example": "2020-05-29T11:22:03+02:00",
                "readOnly": true
              },
              "provider_calendar": {
                "type": "object",
                "nullable": true,
                "description": "Calendar",
                "properties": {
                  "id": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  }
                }
              },
              "related": {
                "type": "array",
                "minItems": 0,
                "maxItems": 1,
                "nullable": false,
                "description": "Main object related to the calendar event (limit to 1).",
                "items": {
                  "type": "object",
                  "additionalProperties": false,
                  "description": "Main object related to the calendar event",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "example": 1
                    },
                    "type": {
                      "type": "string",
                      "example": "opportunity",
                      "enum": [
                        "opportunity",
                        "company",
                        "individual",
                        "contact"
                      ]
                    }
                  }
                }
              },
              "company_id": {
                "type": "integer",
                "nullable": true,
                "description": "Company linked to calendar event"
              },
              "individual_id": {
                "type": "integer",
                "nullable": true,
                "description": "Individual linked to calendar event"
              },
              "contact_id": {
                "type": "integer",
                "nullable": true,
                "description": "Contact linked to calendar event"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "_embed": {
                "allOf": [
                  {
                    "type": "object",
                    "readOnly": true,
                    "description": "Objects add to response. Use embed parameter",
                    "properties": {
                      "company": {
                        "$ref": "#/components/schemas/SaleEmbed/properties/_embed/allOf/0/properties/company"
                      },
                      "contact": {
                        "$ref": "#/components/schemas/ContactItem/allOf/0"
                      },
                      "individual": {
                        "$ref": "#/components/schemas/SaleEmbed/properties/_embed/allOf/0/properties/individual"
                      },
                      "owner": {
                        "$ref": "#/components/schemas/Activity/properties/_embed/properties/author"
                      },
                      "related": {
                        "type": "array",
                        "minItems": 0,
                        "maxItems": 1,
                        "nullable": false,
                        "description": "Objects linked to the event",
                        "items": {
                          "anyOf": [
                            {
                              "$ref": "#/components/schemas/SaleEmbed/properties/_embed/allOf/0/properties/company",
                              "title": "Company"
                            },
                            {
                              "$ref": "#/components/schemas/SaleEmbed/properties/_embed/allOf/0/properties/individual",
                              "title": "Individual"
                            },
                            {
                              "$ref": "#/components/schemas/ContactItem/allOf/0",
                              "title": "Contact"
                            },
                            {
                              "$ref": "#/components/schemas/Activity/properties/object/properties/model/oneOf/1",
                              "title": "Opportunity"
                            },
                            {
                              "$ref": "#/components/schemas/EstimateOne/allOf/0",
                              "title": "Estimate"
                            },
                            {
                              "$ref": "#/components/schemas/InvoiceOne/allOf/0",
                              "title": "Invoice"
                            },
                            {
                              "$ref": "#/components/schemas/CreditNoteOne/allOf/0",
                              "title": "Credit note"
                            }
                          ]
                        }
                      },
                      "participants": {
                        "type": "array",
                        "items": {
                          "oneOf": [
                            {
                              "$ref": "#/components/schemas/ContactItem/allOf/0"
                            },
                            {
                              "$ref": "#/components/schemas/Activity/properties/_embed/properties/author"
                            }
                          ]
                        }
                      },
                      "acl": {
                        "$ref": "#/components/schemas/Activity/properties/_embed/properties/acl/oneOf/6"
                      }
                    }
                  }
                ]
              }
            }
          }
        ]
      },
      "CalendarEventCreateItem": {
        "type": "object",
        "title": "Calendar event",
        "description": "Body for calendar event creation",
        "x-examples": {},
        "required": [
          "datetime_start",
          "datetime_end",
          "title",
          "label_id"
        ],
        "properties": {
          "title": {
            "type": "string",
            "example": "Meeting",
            "description": "Calendar event title"
          },
          "description": {
            "type": "string",
            "example": "Monthly meeting with consulting team",
            "description": "Calendar event description",
            "nullable": true
          },
          "datetime_start": {
            "description": "start date and time of calendar event",
            "type": "string",
            "format": "date-time",
            "maxLength": 25,
            "example": "2020-01-01T00:00:00+01:00"
          },
          "datetime_end": {
            "description": "end date and time of calendar event",
            "type": "string",
            "format": "date-time",
            "maxLength": 25,
            "example": "2020-01-01T00:00:00+01:00"
          },
          "is_private": {
            "type": "boolean",
            "description": "Calendar event is private or public",
            "default": false
          },
          "all_day": {
            "type": "boolean",
            "description": "Calendar event is scheduled for the whole day",
            "default": false
          },
          "label_id": {
            "type": "integer",
            "description": "Label id for event"
          },
          "provider_calendar": {
            "type": "string",
            "description": "Calendar id for event",
            "example": "myemail@gmail.com"
          },
          "participants": {
            "type": "array",
            "description": "Participants (Staff, Contact or External Participants)",
            "items": {
              "type": "object",
              "description": "Participant linked",
              "properties": {
                "id": {
                  "oneOf": [
                    {
                      "type": "integer"
                    },
                    {
                      "type": "string"
                    }
                  ],
                  "description": "Id of participant"
                },
                "type": {
                  "type": "string",
                  "enum": [
                    "staff",
                    "contact",
                    "external"
                  ],
                  "description": "Type of participant"
                }
              }
            }
          },
          "related": {
            "type": "array",
            "minItems": 0,
            "maxItems": 1,
            "nullable": false,
            "description": "Main object related to the calendar event (limit to 1).",
            "items": {
              "type": "object",
              "additionalProperties": false,
              "description": "Main object related to the calendar event",
              "required": [
                "type",
                "id"
              ],
              "properties": {
                "id": {
                  "type": "integer",
                  "example": 1
                },
                "type": {
                  "type": "string",
                  "example": "opportunity",
                  "enum": [
                    "opportunity",
                    "company",
                    "individual",
                    "contact",
                    "estimate",
                    "invoice",
                    "creditnote"
                  ]
                }
              }
            }
          },
          "created": {
            "description": "Date of creation of the calendar event",
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "CalendarEventUpdateItem": {
        "type": "object",
        "description": "Calendar event update object",
        "x-examples": {},
        "properties": {
          "title": {
            "type": "string",
            "example": "Meeting",
            "description": "Calendar event title"
          },
          "description": {
            "type": "string",
            "example": "Monthly meeting with consulting team",
            "description": "Calendar event description",
            "nullable": true
          },
          "datetime_start": {
            "description": "start date and time of calendar event",
            "type": "string",
            "format": "date-time",
            "maxLength": 25,
            "example": "2020-01-01T00:00:00+01:00"
          },
          "datetime_end": {
            "description": "end date and time of calendar event",
            "type": "string",
            "format": "date-time",
            "maxLength": 25,
            "example": "2020-01-01T00:00:00+01:00"
          },
          "is_private": {
            "type": "boolean",
            "description": "Calendar event is private or public",
            "default": false
          },
          "all_day": {
            "type": "boolean",
            "description": "Calendar event is scheduled for the whole day",
            "default": false
          },
          "label_id": {
            "type": "integer",
            "description": "Label id for event"
          },
          "provider_calendar": {
            "type": "string",
            "description": "Calendar id for event",
            "example": "myemail@gmail.com"
          },
          "participants": {
            "type": "array",
            "description": "Participants (Staff, Contact or External Participants)",
            "items": {
              "type": "object",
              "description": "Participant linked",
              "properties": {
                "id": {
                  "oneOf": [
                    {
                      "type": "integer"
                    },
                    {
                      "type": "string"
                    }
                  ],
                  "description": "Id of participant"
                },
                "type": {
                  "type": "string",
                  "enum": [
                    "staff",
                    "contact",
                    "external"
                  ],
                  "description": "Type of participant"
                }
              }
            }
          },
          "related": {
            "type": "array",
            "minItems": 0,
            "maxItems": 1,
            "nullable": false,
            "description": "Main object related to the calendar event (limit to 1). If empty, the link with the existing related object will be removed.",
            "items": {
              "type": "object",
              "additionalProperties": false,
              "description": "Main object related to the calendar event",
              "required": [
                "type",
                "id"
              ],
              "properties": {
                "id": {
                  "type": "integer",
                  "example": 1
                },
                "type": {
                  "type": "string",
                  "example": "opportunity",
                  "enum": [
                    "opportunity",
                    "company",
                    "individual",
                    "contact",
                    "estimate",
                    "invoice",
                    "creditnote"
                  ]
                }
              }
            }
          }
        }
      },
      "CalendarEventFilters": {
        "title": "CalendarEventFilters",
        "type": "object",
        "description": "Calendar event filters",
        "properties": {
          "filters": {
            "type": "object",
            "description": "calendar event filters",
            "additionalProperties": false,
            "properties": {
              "due_date": {
                "$ref": "#/components/schemas/CrmActivityFilters/properties/filters/properties/due_date"
              },
              "owners": {
                "type": "array",
                "description": "Owner(s) of event",
                "items": {
                  "type": "integer"
                }
              },
              "participants": {
                "type": "array",
                "description": "Staff, contact or external contact of event",
                "items": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": [
                        "staff",
                        "contact",
                        "external"
                      ]
                    },
                    "id": {
                      "oneOf": [
                        {
                          "type": "integer"
                        },
                        {
                          "type": "string"
                        }
                      ]
                    }
                  }
                }
              },
              "labels": {
                "type": "array",
                "description": "Event labels",
                "items": {
                  "type": "integer"
                }
              },
              "related_objects": {
                "type": "array",
                "description": "object(s) linked to event",
                "items": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string"
                    },
                    "id": {
                      "type": "integer"
                    }
                  }
                }
              },
              "companies": {
                "type": "array",
                "description": "Id(s) of company linked to event",
                "items": {
                  "type": "integer"
                }
              },
              "individuals": {
                "type": "array",
                "description": "Id(s) of individuals linked to event",
                "items": {
                  "type": "integer"
                }
              },
              "contacts": {
                "type": "array",
                "description": "Id(s) of contact linked to event",
                "items": {
                  "type": "integer"
                }
              }
            }
          }
        }
      },
      "Related": {
        "type": "object",
        "description": "Object linked",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Id of object"
          },
          "type": {
            "type": "string",
            "description": "Type of object"
          }
        }
      },
      "Activity": {
        "type": "object",
        "description": "The activity object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id of activity",
            "example": "2wto807ysxa"
          },
          "event": {
            "type": "string",
            "description": "Event type",
            "example": "task.created"
          },
          "author": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "staff"
                ],
                "example": "staff"
              },
              "id": {
                "type": "integer",
                "minimum": 1,
                "example": 1024
              }
            }
          },
          "event_date": {
            "type": "string",
            "description": "Date of activity",
            "format": "date-time"
          },
          "due_date": {
            "type": "string",
            "format": "date-time",
            "description": "Due date of activity"
          },
          "event_details": {
            "type": "object",
            "description": "Details of events",
            "additionalProperties": true
          },
          "event_more": {
            "type": "object",
            "description": "Additional informations",
            "example": {
              "old": "client",
              "new": "prospect"
            },
            "additionalProperties": true
          },
          "object": {
            "type": "object",
            "description": "Event object of activity",
            "required": [
              "type",
              "id"
            ],
            "properties": {
              "type": {
                "type": "string",
                "example": "task"
              },
              "id": {
                "oneOf": [
                  {
                    "type": "string",
                    "example": 1056,
                    "minLength": 1
                  },
                  {
                    "type": "integer",
                    "example": 1056,
                    "minimum": 1
                  }
                ]
              },
              "model": {
                "nullable": true,
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/SaleEmbed/properties/_embed/allOf/0/properties/company"
                  },
                  {
                    "title": "Opportunity",
                    "type": "object",
                    "description": "Describe opportunity object",
                    "properties": {
                      "id": {
                        "type": "integer",
                        "description": "Internal Opportunity ID",
                        "readOnly": true,
                        "example": 1
                      },
                      "number": {
                        "type": "string",
                        "description": "External Opportunity ID",
                        "example": "OPP-1155"
                      },
                      "name": {
                        "type": "string",
                        "description": "Opportunity name",
                        "example": "New website"
                      },
                      "source": {
                        "type": "object",
                        "description": "Source of opportunity creation",
                        "properties": {
                          "id": {
                            "type": "integer",
                            "example": 1
                          },
                          "name": {
                            "type": "string",
                            "example": "Internal"
                          }
                        }
                      },
                      "due_date": {
                        "type": "string",
                        "description": "Due date of the opportunity",
                        "format": "date",
                        "example": "1970-01-01",
                        "nullable": true
                      },
                      "created": {
                        "type": "string",
                        "description": "Creation date of the opportunity",
                        "format": "date-time",
                        "example": "1970-01-01T00:00:00+00:00"
                      },
                      "updated_status": {
                        "type": "string",
                        "description": "Date of last opportunity status update",
                        "format": "date-time",
                        "example": "1970-01-01T00:00:00+00:00",
                        "nullable": true
                      },
                      "status": {
                        "type": "string",
                        "description": "Opportunity status",
                        "example": "won",
                        "enum": [
                          "open",
                          "won",
                          "lost",
                          "cancelled",
                          "closed",
                          "late"
                        ]
                      },
                      "amount": {
                        "type": "object",
                        "description": "Potential amount of the opportunity with the currency",
                        "properties": {
                          "value": {
                            "type": "string",
                            "description": "Amount",
                            "example": 72000.99
                          },
                          "currency": {
                            "type": "string",
                            "description": "Currency (ISO 4217)",
                            "example": "EUR"
                          }
                        }
                      },
                      "pipeline": {
                        "type": "object",
                        "description": "Current pipeline",
                        "properties": {
                          "id": {
                            "type": "integer",
                            "example": 9763
                          },
                          "name": {
                            "type": "string",
                            "example": "Commercial North"
                          }
                        }
                      },
                      "step": {
                        "type": "object",
                        "description": "Current step",
                        "properties": {
                          "id": {
                            "type": "integer",
                            "example": 299
                          },
                          "name": {
                            "type": "string",
                            "example": "Prospection"
                          }
                        }
                      },
                      "probability": {
                        "type": "integer",
                        "description": "Opportunity probability",
                        "example": 75,
                        "maximum": 100,
                        "minimum": 0
                      },
                      "note": {
                        "type": "string",
                        "description": "Opportunity note"
                      },
                      "owner": {
                        "type": "object",
                        "description": "Staff owning the opportunity",
                        "properties": {
                          "id": {
                            "type": "integer",
                            "example": 12
                          },
                          "type": {
                            "type": "string",
                            "example": "staff",
                            "enum": [
                              "staff",
                              "thirdcontact"
                            ]
                          }
                        }
                      },
                      "assigned_staff_ids": {
                        "type": "array",
                        "description": "Staff(s) ID assigned to the opportunity",
                        "example": [
                          133,
                          299
                        ],
                        "items": {
                          "type": "integer"
                        },
                        "nullable": true
                      },
                      "contact_ids": {
                        "type": "array",
                        "description": "Contact(s) ID responsible for the opportunity",
                        "example": [
                          222,
                          876
                        ],
                        "items": {
                          "type": "integer"
                        },
                        "nullable": true
                      },
                      "company_id": {
                        "type": "integer",
                        "description": "Company linked to the opportunity",
                        "example": 1220,
                        "nullable": true
                      },
                      "individual_id": {
                        "type": "integer",
                        "description": "Individual linked to the opportunity",
                        "example": 299,
                        "nullable": true
                      },
                      "main_doc_id": {
                        "type": "integer",
                        "description": "Internal ID of the main opportunity document",
                        "nullable": true,
                        "example": 22
                      },
                      "related": {
                        "$ref": "#/components/schemas/OpportunityUpdate/properties/related"
                      },
                      "_embed": {
                        "$ref": "#/components/schemas/OpportunityItem/properties/_embed"
                      }
                    }
                  },
                  {
                    "$ref": "#/components/schemas/TaskItem/allOf/0"
                  },
                  {
                    "$ref": "#/components/schemas/ContactItem/allOf/0"
                  },
                  {
                    "$ref": "#/components/schemas/SaleEmbed/properties/_embed/allOf/0/properties/individual"
                  },
                  {
                    "$ref": "#/components/schemas/CommentItem/allOf/0"
                  },
                  {
                    "$ref": "#/components/schemas/CalendarEventItem/allOf/0"
                  },
                  {
                    "title": "Email",
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/EmailItem/allOf/0"
                      },
                      {
                        "type": "object",
                        "properties": {
                          "snippet": {
                            "type": "string",
                            "description": "Short description"
                          }
                        }
                      }
                    ]
                  }
                ]
              }
            }
          },
          "related": {
            "type": "array",
            "minItems": 0,
            "nullable": false,
            "description": "List all direct and indirect relations of the activity’s main object",
            "items": {
              "type": "object",
              "additionalProperties": false,
              "description": "Object related to the activity",
              "properties": {
                "id": {
                  "$ref": "#/components/schemas/Activity/properties/object/properties/id"
                },
                "type": {
                  "type": "string",
                  "example": "opportunity"
                }
              }
            }
          },
          "_embed": {
            "type": "object",
            "description": "Embed objects for activity logs",
            "readOnly": true,
            "properties": {
              "object_related": {
                "type": "array",
                "minItems": 0,
                "nullable": false,
                "description": "Add the direct relation of the activity’s main object to the response (partially described in object.model.related)",
                "items": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/SaleEmbed/properties/_embed/allOf/0/properties/company"
                    },
                    {
                      "$ref": "#/components/schemas/SaleEmbed/properties/_embed/allOf/0/properties/individual"
                    },
                    {
                      "$ref": "#/components/schemas/ContactItem/allOf/0"
                    },
                    {
                      "$ref": "#/components/schemas/Activity/properties/object/properties/model/oneOf/1"
                    },
                    {
                      "$ref": "#/components/schemas/TaskItem/allOf/0"
                    }
                  ]
                }
              },
              "individual": {
                "$ref": "#/components/schemas/SaleEmbed/properties/_embed/allOf/0/properties/individual"
              },
              "company": {
                "$ref": "#/components/schemas/SaleEmbed/properties/_embed/allOf/0/properties/company"
              },
              "author": {
                "title": "Staff Schemas",
                "description": "Staff schemas according of current user level of visibility on staffs",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Staff/allOf/0"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "phone_number": {
                        "type": "string",
                        "description": "Staff phone number",
                        "example": "+33100000000",
                        "nullable": true
                      },
                      "mobile_number": {
                        "type": "string",
                        "description": "Staff mobile number",
                        "example": "+33600000000",
                        "nullable": true
                      },
                      "fax_number": {
                        "type": "string",
                        "description": "Staff fax number",
                        "example": "+33500000000",
                        "nullable": true
                      },
                      "groups": {
                        "type": "array",
                        "nullable": true,
                        "description": "Staff groups",
                        "readOnly": true,
                        "items": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "integer",
                              "example": 1
                            },
                            "name": {
                              "type": "string",
                              "example": "Sales"
                            }
                          }
                        }
                      },
                      "civility": {
                        "type": "string",
                        "description": "Civility of staff",
                        "example": "mrs",
                        "nullable": true,
                        "enum": [
                          "mr",
                          "mrs",
                          "ms"
                        ]
                      },
                      "created": {
                        "type": "string",
                        "description": "Creation date of the staff",
                        "format": "date-time",
                        "example": "1970-01-01T00:00:00+00:00",
                        "readOnly": true
                      },
                      "profile": {
                        "type": "integer",
                        "description": "Staff privilège profile",
                        "example": 3443
                      },
                      "team": {
                        "nullable": true,
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "integer",
                            "example": -1
                          },
                          "name": {
                            "type": "string",
                            "example": "Commercial"
                          }
                        },
                        "description": "Staff team position"
                      },
                      "job": {
                        "nullable": true,
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "integer",
                            "example": -1
                          },
                          "name": {
                            "type": "string",
                            "example": "Office manager"
                          }
                        },
                        "description": "Staff job"
                      },
                      "timezone": {
                        "type": "string",
                        "description": "Staff time zone",
                        "example": "Europe/Paris"
                      },
                      "language": {
                        "type": "string",
                        "description": "Staff language",
                        "example": "fr"
                      }
                    }
                  }
                ]
              },
              "acl": {
                "nullable": true,
                "description": "Activity's main object's ACL",
                "oneOf": [
                  {
                    "title": "Company ACL",
                    "type": "object",
                    "additionalProperties": false,
                    "description": "",
                    "x-examples": {},
                    "properties": {
                      "can_be_updated": {
                        "type": "boolean",
                        "nullable": true,
                        "description": "Company can be updated",
                        "example": true
                      },
                      "can_be_deleted": {
                        "type": "boolean",
                        "nullable": true,
                        "description": "Company can be delete",
                        "example": true
                      },
                      "view_companies_addresses": {
                        "type": "boolean",
                        "nullable": true,
                        "description": "Company Addresses can be listed",
                        "example": true
                      },
                      "create_companies_addresses": {
                        "type": "boolean",
                        "nullable": true,
                        "description": "Company Addresses can be created",
                        "example": true
                      },
                      "update_companies_addresses": {
                        "type": "boolean",
                        "nullable": true,
                        "description": "Company Addresses can be updated",
                        "example": true
                      },
                      "delete_companies_addresses": {
                        "type": "boolean",
                        "nullable": true,
                        "description": "Company Addresses can be deleted",
                        "example": true
                      }
                    }
                  },
                  {
                    "title": "ContactAcl",
                    "type": "object",
                    "description": "",
                    "x-examples": {},
                    "properties": {
                      "can_be_updated": {
                        "type": "boolean",
                        "nullable": true,
                        "description": "Contact can be updated",
                        "example": true
                      },
                      "can_be_deleted": {
                        "type": "boolean",
                        "nullable": true,
                        "description": "Contact can be deleted",
                        "example": true
                      },
                      "view_contacts_addresses": {
                        "type": "boolean",
                        "nullable": true,
                        "description": "Contact Addresses can be listed",
                        "example": true
                      },
                      "create_contacts_addresses": {
                        "type": "boolean",
                        "nullable": true,
                        "description": "Contact Addresses can be created",
                        "example": true
                      },
                      "update_contacts_addresses": {
                        "type": "boolean",
                        "nullable": true,
                        "description": "Contact Addresses can be updated",
                        "example": true
                      },
                      "delete_contacts_addresses": {
                        "type": "boolean",
                        "nullable": true,
                        "description": "Contact Addresses can be deleted",
                        "example": true
                      }
                    }
                  },
                  {
                    "title": "Individual ACL",
                    "type": "object",
                    "additionalProperties": false,
                    "description": "",
                    "x-examples": {},
                    "properties": {
                      "can_be_updated": {
                        "type": "boolean",
                        "nullable": true,
                        "description": "Individual can be updated",
                        "example": true
                      },
                      "can_be_deleted": {
                        "type": "boolean",
                        "nullable": true,
                        "description": "Individual can be delete",
                        "example": true
                      },
                      "view_individuals_addresses": {
                        "type": "boolean",
                        "nullable": true,
                        "description": "Individual Addresses can be listed",
                        "example": true
                      },
                      "create_individuals_addresses": {
                        "type": "boolean",
                        "nullable": true,
                        "description": "Individual Addresses can be created",
                        "example": true
                      },
                      "update_individuals_addresses": {
                        "type": "boolean",
                        "nullable": true,
                        "description": "Individual Addresses can be updated",
                        "example": true
                      },
                      "delete_individuals_addresses": {
                        "type": "boolean",
                        "nullable": true,
                        "description": "Individual Addresses can be deleted",
                        "example": true
                      }
                    }
                  },
                  {
                    "title": "TaskAcl",
                    "type": "object",
                    "description": "",
                    "x-examples": {},
                    "properties": {
                      "can_be_updated": {
                        "type": "boolean",
                        "nullable": true,
                        "description": "Task can be updated",
                        "example": true
                      },
                      "can_be_deleted": {
                        "type": "boolean",
                        "nullable": true,
                        "description": "Task can be delete",
                        "example": true
                      }
                    }
                  },
                  {
                    "title": "Comment acl",
                    "type": "object",
                    "description": "",
                    "x-examples": {},
                    "properties": {
                      "can_be_updated": {
                        "type": "boolean",
                        "description": "Comment can be updated"
                      },
                      "can_be_deleted": {
                        "type": "boolean",
                        "description": "Comment can be deleted"
                      }
                    }
                  },
                  {
                    "title": "Opportunity ACL",
                    "type": "object",
                    "additionalProperties": false,
                    "description": "",
                    "x-examples": {},
                    "properties": {
                      "can_be_updated": {
                        "type": "boolean",
                        "nullable": false,
                        "description": "Opportunity can be updated",
                        "example": true
                      },
                      "can_be_deleted": {
                        "type": "boolean",
                        "nullable": false,
                        "description": "Opportunity can be deleted",
                        "example": true
                      },
                      "link_invoicing_docs": {
                        "type": "boolean",
                        "nullable": false,
                        "description": "Can link invoicing documents",
                        "example": true
                      }
                    }
                  },
                  {
                    "title": "ACL for Calendar Event object",
                    "type": "object",
                    "description": "",
                    "x-examples": {},
                    "properties": {
                      "can_be_updated": {
                        "type": "boolean",
                        "nullable": true,
                        "description": "Calendar Event can be updated",
                        "example": true
                      },
                      "can_be_deleted": {
                        "type": "boolean",
                        "nullable": true,
                        "description": "Calendar Event can be delete",
                        "example": true
                      }
                    }
                  }
                ]
              }
            }
          }
        }
      },
      "ActivityFilters": {
        "type": "object",
        "description": "The activity filters",
        "properties": {
          "filters": {
            "type": "object",
            "description": "Activity filters",
            "properties": {
              "entity": {
                "description": "Filter on a specific entity",
                "type": "object",
                "properties": {
                  "items": {
                    "description": "Entity type",
                    "type": "string",
                    "enum": [
                      "email",
                      "calendar_event",
                      "staff",
                      "task",
                      "comment",
                      "snippettracking",
                      "phonecall",
                      "contact",
                      "prospect",
                      "opportunity",
                      "campaign",
                      "client",
                      "supplier"
                    ]
                  },
                  "id": {
                    "type": "integer",
                    "description": "Entity id to filter on"
                  }
                }
              },
              "entities": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ActivityFilters/properties/filters/properties/entity/properties/items"
                }
              },
              "due_date": {
                "$ref": "#/components/schemas/CrmActivityFilters/properties/filters/properties/due_date"
              },
              "activity_level": {
                "description": "Filter activity by level. Get main activities/secondary activities or both by default.",
                "type": "array",
                "example": [
                  "main"
                ],
                "items": {
                  "type": "string",
                  "enum": [
                    "main",
                    "secondary"
                  ]
                },
                "default": [
                  "main",
                  "secondary"
                ]
              }
            }
          }
        }
      },
      "EmailItem": {
        "title": "Email",
        "allOf": [
          {
            "type": "object",
            "title": "Email",
            "description": "The email object",
            "properties": {
              "id": {
                "description": "Email Identifier",
                "type": "string"
              },
              "owner": {
                "$ref": "#/components/schemas/StaffAutocompleteResultItem/properties/owner/allOf/0",
                "description": "Owner of the email"
              },
              "subject": {
                "type": "string",
                "description": "Subject of email"
              },
              "is_open": {
                "type": "boolean",
                "description": "Has been open or not"
              },
              "is_scheduled": {
                "type": "boolean",
                "description": "Has been scheduled or immediate send"
              },
              "from": {
                "type": "string",
                "format": "email",
                "description": "From email"
              },
              "participants": {
                "type": "array",
                "description": "Email addresses of destinators",
                "items": {
                  "type": "string",
                  "format": "email"
                }
              },
              "is_private": {
                "type": "boolean",
                "description": "Private email or not"
              },
              "created": {
                "type": "string",
                "format": "date-time",
                "description": "Creation date / hour"
              },
              "updated": {
                "type": "string",
                "format": "date-time",
                "description": "Last update date / hour"
              },
              "related": {
                "type": "array",
                "minItems": 0,
                "maxItems": 1,
                "nullable": false,
                "description": "Main object related to the email (limit to 1).",
                "items": {
                  "type": "object",
                  "additionalProperties": false,
                  "description": "Main object related to the email",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "example": 1
                    },
                    "type": {
                      "type": "string",
                      "example": "opportunity"
                    }
                  }
                }
              },
              "company_id": {
                "type": "integer",
                "description": "Company linked to email",
                "readOnly": true
              },
              "individual_id": {
                "type": "integer",
                "description": "Individual linked to email",
                "readOnly": true
              },
              "contact_id": {
                "type": "integer",
                "description": "Contact linked to email",
                "readOnly": true
              },
              "thread_id": {
                "description": "Email thread identifier",
                "nullable": false,
                "oneOf": [
                  {
                    "type": "string",
                    "example": "axB8kdF092",
                    "minLength": 1
                  },
                  {
                    "type": "integer",
                    "example": 1056,
                    "minimum": 1
                  }
                ]
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "content": {
                "type": "string",
                "description": "Full email content"
              },
              "snippet": {
                "type": "string",
                "description": "Short description"
              }
            }
          }
        ]
      },
      "PartialEmailHeader": {
        "type": "object",
        "title": "Mail provider error",
        "description": "The error",
        "properties": {
          "error": {
            "description": "Error detail",
            "type": "object",
            "properties": {
              "code": {
                "type": "integer",
                "description": "HTTP status code"
              },
              "message": {
                "type": "string",
                "description": "Error message"
              }
            }
          }
        }
      },
      "EmailAuthenticationItem": {
        "title": "DNS authentication result",
        "type": "object",
        "properties": {
          "valid": {
            "type": "boolean",
            "description": "Indicates if this is a valid domain"
          },
          "domain": {
            "type": "string",
            "description": "Domain for which the DNS information is retrieved"
          },
          "dns": {
            "type": "object",
            "description": "DNS records",
            "properties": {
              "mail_cname": {
                "title": "cname.yaml",
                "type": "object",
                "description": "The CNAME for your sending domain",
                "properties": {
                  "valid": {
                    "type": "boolean",
                    "description": "Indicates if this is a valid CNAME"
                  },
                  "type": {
                    "type": "string",
                    "description": "The type of DNS record"
                  },
                  "host": {
                    "type": "string",
                    "description": "The domain that this CNAME is created for"
                  },
                  "data": {
                    "type": "string",
                    "description": "The CNAME record"
                  }
                }
              },
              "dkim1": {
                "title": "dns.yaml",
                "type": "object",
                "description": "DNS record",
                "properties": {
                  "valid": {
                    "type": "boolean",
                    "description": "Indicates if this is a valid DNS record"
                  },
                  "type": {
                    "type": "string",
                    "description": "The type of DNS record"
                  },
                  "host": {
                    "type": "string",
                    "description": "The domain that this DNS record was created for"
                  },
                  "data": {
                    "type": "string",
                    "description": "The DNS record"
                  }
                }
              },
              "dkim2": {
                "$ref": "#/components/schemas/EmailAuthenticationItem/properties/dns/properties/dkim1"
              }
            }
          }
        }
      },
      "EmailValidationItem": {
        "title": "DNS validation result",
        "type": "object",
        "properties": {
          "valid": {
            "type": "boolean",
            "description": "Indicates if this is a valid domain"
          },
          "domain": {
            "type": "string",
            "description": "Domain for which the DNS information is retrieved"
          },
          "validation_results": {
            "type": "object",
            "description": "DNS records",
            "properties": {
              "mail_cname": {
                "type": "object",
                "nullable": true,
                "properties": {
                  "valid": {
                    "type": "boolean",
                    "description": "If the check passed or not"
                  },
                  "reason": {
                    "type": "string",
                    "nullable": true,
                    "description": "The error message"
                  }
                }
              },
              "dkim1": {
                "$ref": "#/components/schemas/EmailValidationItem/properties/validation_results/properties/mail_cname"
              },
              "dkim2": {
                "$ref": "#/components/schemas/EmailValidationItem/properties/validation_results/properties/mail_cname"
              },
              "spf": {
                "$ref": "#/components/schemas/EmailValidationItem/properties/validation_results/properties/mail_cname"
              }
            }
          }
        }
      },
      "WebhookFilters": {
        "title": "WebhookFilters",
        "type": "object",
        "description": "Webhooks filters list",
        "properties": {
          "filters": {
            "type": "object",
            "description": "Opportunity filters",
            "properties": {
              "type": {
                "type": "string",
                "description": "Webhook type",
                "enum": [
                  "http",
                  "slack"
                ],
                "example": "slack"
              },
              "is_enabled": {
                "type": "boolean",
                "description": "Webhook status",
                "example": true
              },
              "endpoint": {
                "type": "string",
                "description": "Webhook endpoint (either url for http type, either slack url for slack type)",
                "example": "http://{host}/webhook"
              }
            }
          }
        },
        "required": [
          "filters"
        ]
      },
      "WebhookReadItem": {
        "anyOf": [
          {
            "title": "webhook.slack.read.item",
            "type": "object",
            "description": "Slack Webhook schema for read context",
            "allOf": [
              {
                "title": "webhook.common.read.item",
                "type": "object",
                "description": "Webhook common schema for read context",
                "allOf": [
                  {
                    "title": "webhook.common.item",
                    "type": "object",
                    "description": "Webhook common schema",
                    "properties": {
                      "is_enabled": {
                        "type": "boolean",
                        "description": "Webhook status",
                        "default": true
                      },
                      "endpoint": {
                        "type": "string",
                        "description": "Webhook endpoint (either url for http type, either slack url for slack type)",
                        "example": "http://{host}/webhook"
                      }
                    }
                  },
                  {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "integer"
                      },
                      "type": {
                        "type": "string",
                        "description": "Webhook type",
                        "enum": [
                          "http",
                          "slack"
                        ],
                        "example": "slack"
                      },
                      "created": {
                        "type": "string",
                        "format": "date-time",
                        "example": "1970-01-01T00:00:00+00:00"
                      },
                      "updated": {
                        "type": "string",
                        "format": "date-time",
                        "example": "1970-01-01T00:00:00+00:00",
                        "nullable": true
                      },
                      "last_succeeded": {
                        "type": "string",
                        "example": "1970-01-01T00:00:00+00:00",
                        "format": "date-time",
                        "nullable": true
                      },
                      "last_failed": {
                        "type": "string",
                        "format": "date-time",
                        "example": "1970-01-01T00:00:00+00:00",
                        "nullable": true
                      },
                      "nb_failures": {
                        "type": "integer",
                        "minimum": 0,
                        "example": 0
                      }
                    }
                  }
                ]
              },
              {
                "type": "object",
                "properties": {
                  "default_channel": {
                    "type": "string",
                    "nullable": true,
                    "example": "sales_notifs",
                    "description": "required for slack type webhook"
                  },
                  "configuration": {
                    "title": "webhookConfigurationSlackItems",
                    "type": "array",
                    "description": "Describe all events to enable as a key",
                    "additionalProperties": true,
                    "items": {
                      "allOf": [
                        {
                          "title": "webhook.slack.configuration.item",
                          "type": "object",
                          "description": "Slack Webhook configuration item schema",
                          "additionalProperties": false,
                          "properties": {
                            "id": {
                              "type": "string",
                              "description": "Event id (fetch from /webhooks/events)",
                              "example": "task.created"
                            },
                            "is_enabled": {
                              "type": "boolean",
                              "description": "Event enabled on webhook",
                              "example": true
                            },
                            "channel": {
                              "type": "string",
                              "nullable": true,
                              "description": "Slack channel"
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              }
            ]
          },
          {
            "title": "webhook.http.read.item",
            "type": "object",
            "description": "Http Webhook schema for read context",
            "allOf": [
              {
                "$ref": "#/components/schemas/WebhookReadItem/anyOf/0/allOf/0"
              },
              {
                "type": "object",
                "properties": {
                  "configuration": {
                    "title": "webhookConfigurationHttpItems",
                    "type": "array",
                    "description": "Describe all events to enable as a key",
                    "additionalProperties": true,
                    "items": {
                      "allOf": [
                        {
                          "title": "webhook.http.configuration.item",
                          "type": "object",
                          "description": "Http Webhook configuration item schema",
                          "additionalProperties": false,
                          "properties": {
                            "id": {
                              "type": "string",
                              "description": "Event id (fetch from /webhooks/events)",
                              "example": "task.created"
                            },
                            "is_enabled": {
                              "type": "boolean",
                              "description": "Event enabled on webhook",
                              "example": true
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              }
            ]
          }
        ]
      },
      "WebhookEditItem": {
        "anyOf": [
          {
            "title": "webhook.slack.edit.item",
            "type": "object",
            "description": "Slack Webhook schema for edit context",
            "additionalProperties": false,
            "properties": {
              "is_enabled": {
                "type": "boolean",
                "description": "Webhook status",
                "default": true
              },
              "endpoint": {
                "type": "string",
                "description": "Webhook endpoint (either url for http type, either slack url for slack type)",
                "example": "http://{host}/webhook"
              },
              "default_channel": {
                "type": "string",
                "nullable": true,
                "example": "sales_notifs",
                "description": "required for slack type webhook"
              },
              "configuration": {
                "$ref": "#/components/schemas/WebhookReadItem/anyOf/0/allOf/1/properties/configuration"
              }
            }
          },
          {
            "title": "webhook.http.edit.item",
            "type": "object",
            "description": "Http Webhook schema for edit context",
            "additionalProperties": false,
            "properties": {
              "is_enabled": {
                "type": "boolean",
                "description": "Webhook status",
                "default": true
              },
              "endpoint": {
                "type": "string",
                "description": "Webhook endpoint (either url for http type, either slack url for slack type)",
                "example": "http://{host}/webhook"
              },
              "configuration": {
                "$ref": "#/components/schemas/WebhookReadItem/anyOf/1/allOf/1/properties/configuration"
              }
            }
          }
        ]
      },
      "WebhookCreateItem": {
        "anyOf": [
          {
            "title": "webhook.slack.create.item",
            "type": "object",
            "description": "Slack Webhook schema for create context",
            "additionalProperties": false,
            "properties": {
              "is_enabled": {
                "type": "boolean",
                "description": "Webhook status",
                "default": true
              },
              "endpoint": {
                "type": "string",
                "description": "Webhook endpoint (either url for http type, either slack url for slack type)",
                "example": "http://{host}/webhook"
              },
              "default_channel": {
                "type": "string",
                "nullable": true,
                "example": "sales_notifs",
                "description": "required for slack type webhook"
              },
              "type": {
                "type": "string",
                "description": "Webhook type",
                "enum": [
                  "slack",
                  "http"
                ],
                "example": "slack"
              },
              "configuration": {
                "$ref": "#/components/schemas/WebhookReadItem/anyOf/0/allOf/1/properties/configuration"
              }
            }
          },
          {
            "title": "webhook.http.create.item",
            "type": "object",
            "description": "Http Webhook schema for create context",
            "additionalProperties": false,
            "properties": {
              "is_enabled": {
                "type": "boolean",
                "description": "Webhook status",
                "default": true
              },
              "endpoint": {
                "type": "string",
                "description": "Webhook endpoint (either url for http type, either slack url for slack type)",
                "example": "http://{host}/webhook"
              },
              "type": {
                "type": "string",
                "description": "Webhook type",
                "enum": [
                  "http",
                  "slack"
                ],
                "example": "http"
              },
              "configuration": {
                "$ref": "#/components/schemas/WebhookReadItem/anyOf/1/allOf/1/properties/configuration"
              }
            }
          }
        ]
      },
      "WebhookEventsList": {
        "title": "webhookEvents",
        "type": "array",
        "description": "List available webhook events",
        "items": {
          "anyOf": [
            {
              "title": "webhookEventItem",
              "type": "object",
              "description": "Describe a webhook event item",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Entity",
                  "example": "task"
                },
                "description": {
                  "type": "string",
                  "description": "Entity label",
                  "example": "Tasks"
                },
                "events": {
                  "type": "object",
                  "description": "List available events for current entity",
                  "additionalProperties": {
                    "type": "string",
                    "description": "Event label"
                  },
                  "example": {
                    "created": "Creation",
                    "deleted": "Deletion",
                    "addressadded": "Address added"
                  }
                }
              }
            },
            {
              "title": "webhookEventItemWithParent",
              "type": "object",
              "description": "Describe a webhook event item with a parent",
              "allOf": [
                {
                  "$ref": "#/components/schemas/WebhookEventsList/items/anyOf/0"
                },
                {
                  "type": "object",
                  "properties": {
                    "parent": {
                      "type": "string",
                      "description": "Entity",
                      "example": "task",
                      "nullable": true
                    }
                  }
                }
              ]
            }
          ]
        }
      },
      "PaymentMethod": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true,
            "description": "Unique ID",
            "example": 6657
          },
          "label": {
            "type": "string",
            "readOnly": true,
            "description": "Label of payment method",
            "example": "Paypal"
          }
        }
      },
      "Unit": {
        "type": "object",
        "title": "Unit object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true,
            "example": 9837
          },
          "label": {
            "type": "string",
            "example": "m²"
          }
        }
      },
      "Team": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true,
            "description": "Team id",
            "example": -1
          },
          "name": {
            "type": "string",
            "readOnly": true,
            "description": "Team name",
            "example": "Commercial"
          },
          "jobs": {
            "description": "List of Jobs",
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "description": "Label ID",
                "readOnly": true,
                "example": -3
              },
              "name": {
                "type": "string",
                "description": "Name of label",
                "readOnly": true,
                "example": "Office manager"
              }
            }
          }
        }
      },
      "Profiles": {
        "type": "object",
        "title": "Profile",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Profile id",
            "example": 6657
          },
          "name": {
            "type": "string",
            "description": "Profile name",
            "example": "Collaborator"
          },
          "is_administrator": {
            "type": "boolean",
            "description": "Indicates if this profile grants administrator privileges",
            "example": true
          }
        },
        "required": [
          "id",
          "name",
          "is_administrator"
        ]
      },
      "Currency": {
        "type": "object",
        "title": "Currency",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Currency Identifier",
            "readOnly": true,
            "example": 13
          },
          "code": {
            "type": "string",
            "description": "Currency code (EUR, USD..)",
            "readOnly": true,
            "example": "EUR"
          },
          "symbol": {
            "type": "string",
            "description": "Currency symbol (€, $)",
            "example": "€",
            "readOnly": true
          },
          "is_default": {
            "type": "boolean",
            "description": "Is default currency?",
            "example": true
          }
        }
      },
      "Country": {
        "type": "object",
        "title": "Country",
        "properties": {
          "code": {
            "type": "string",
            "description": "Internal code",
            "readOnly": true,
            "example": "IT"
          },
          "iso-alpha-2": {
            "type": "string",
            "description": "ISO alpha 2",
            "readOnly": true,
            "example": "IT"
          },
          "iso-alpha-3": {
            "type": "string",
            "description": "ISO alpha 3",
            "readOnly": true,
            "example": "ITA"
          },
          "name": {
            "type": "string",
            "description": "Country name",
            "readOnly": true,
            "example": "Italie"
          }
        }
      },
      "Subscription": {
        "title": "Subscription",
        "type": "object",
        "properties": {
          "licenses": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "License identifier",
                  "example": "9998a80a-7b75-4616-96d5-7ccff7ac08e8"
                },
                "code": {
                  "type": "string",
                  "description": "License code",
                  "enum": [
                    "pack_prospecting_sale",
                    "pack_invoicing_management",
                    "pack_all_included"
                  ]
                },
                "available": {
                  "type": "integer",
                  "description": "Number of licenses available",
                  "example": 5
                },
                "total": {
                  "type": "integer",
                  "description": "Total of licenses",
                  "example": 10
                }
              }
            }
          },
          "plugins": {
            "type": "object",
            "additionalProperties": {
              "type": "boolean"
            },
            "example": {
              "accounting": true,
              "bankreconciliation": true,
              "companySearch": true,
              "invoicing": true,
              "mailing": true,
              "massmailing": true,
              "phonecall": true,
              "proposal": true,
              "prospection": true,
              "purchases": true,
              "recurring": true,
              "saleestimate": true,
              "scheduler": true,
              "stock": false,
              "support": false,
              "yousign": true
            }
          },
          "billing_contact": {
            "type": "object",
            "properties": {
              "last_name": {
                "type": "string",
                "description": "User's lastname",
                "example": "Doe",
                "nullable": true
              },
              "first_name": {
                "type": "string",
                "description": "User's firstname",
                "example": "John",
                "nullable": true
              },
              "email": {
                "type": "string",
                "description": "User's email",
                "format": "email",
                "example": "contact@example-company.com",
                "nullable": true
              },
              "phone_number": {
                "type": "string",
                "description": "User's phone",
                "example": 33100000000,
                "nullable": true
              }
            }
          },
          "billing_settings": {
            "type": "object",
            "properties": {
              "service_start_date": {
                "type": "string",
                "description": "Date of start service",
                "format": "date-time",
                "nullable": true
              },
              "service_end_date": {
                "type": "string",
                "description": "Date of end service",
                "format": "date-time",
                "nullable": true
              },
              "payment_method": {
                "type": "string",
                "description": "Payment method of subscription",
                "enum": [
                  "card",
                  "transfer",
                  "sepa"
                ]
              },
              "plan": {
                "type": "string",
                "description": "Plan of subscription",
                "example": "ESSENTIAL_MONTHLY",
                "nullable": true
              },
              "amounts": {
                "type": "object",
                "properties": {
                  "monthly": {
                    "type": "object",
                    "properties": {
                      "total": {
                        "type": "integer",
                        "description": "Total of monthly amount",
                        "example": 32500
                      },
                      "total_discount": {
                        "type": "integer",
                        "description": "Total of discount for monthly amount",
                        "example": 100
                      },
                      "total_discounted": {
                        "type": "integer",
                        "description": "Total after discount of monthly amount",
                        "example": 32400
                      }
                    }
                  },
                  "yearly": {
                    "type": "object",
                    "properties": {
                      "total": {
                        "type": "integer",
                        "description": "Total of yearly amount",
                        "example": 390000
                      },
                      "total_discount": {
                        "type": "integer",
                        "description": "Total of discount for yearly amount",
                        "example": 10000
                      },
                      "total_discounted": {
                        "type": "integer",
                        "description": "Total after discount of yearly amount",
                        "example": 380000
                      }
                    }
                  }
                }
              }
            }
          },
          "billing_address": {
            "type": "object",
            "properties": {
              "client_name": {
                "type": "string",
                "description": "Corp name",
                "example": "Sellsy"
              },
              "address_line_1": {
                "type": "string",
                "description": "Address line one",
                "example": "30 Commercial Road",
                "nullable": true
              },
              "address_line_2": {
                "type": "string",
                "description": "Address line two",
                "example": "Finance and Accounting",
                "nullable": true
              },
              "postal_code": {
                "type": "string",
                "description": "Address postal code",
                "example": 75012,
                "nullable": true
              },
              "city": {
                "type": "string",
                "description": "Address city name",
                "example": "Paris",
                "nullable": true
              },
              "country": {
                "type": "string",
                "description": "Address country",
                "example": "France",
                "nullable": true
              },
              "country_code": {
                "type": "string",
                "description": "Address country code",
                "example": "FR",
                "nullable": true
              }
            }
          },
          "next_payment_date": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Date of the next subscription payment"
          },
          "renew_cart": {
            "type": "object",
            "nullable": true,
            "properties": {
              "id": {
                "type": "string",
                "description": "Cart id",
                "example": "f0173ec-1fb2-43ce-80c1-f972390b237e"
              },
              "period_appliance_start": {
                "type": "string",
                "description": "Date of the beginning of the cart",
                "example": "2022-02-17T00:00:00.000000Z"
              }
            }
          }
        }
      },
      "ItemReadItem": {
        "type": "object",
        "title": "Item",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Item id",
            "example": 6657
          },
          "type": {
            "type": "string",
            "description": "Item type",
            "enum": [
              "product",
              "service",
              "shipping",
              "packaging"
            ]
          },
          "name": {
            "type": "string",
            "description": "Item name",
            "example": "lorem ipsum"
          },
          "reference": {
            "type": "string",
            "description": "Item reference",
            "example": "ref0123"
          },
          "reference_price": {
            "deprecated": true,
            "type": "string",
            "description": "Item reference price <br/>>This field is deprecated, refer to `is_reference_price_taxes_free` to use either `reference_price_taxes_inc` or `reference_price_taxes_exc` instead",
            "example": "19.99"
          },
          "reference_price_taxes_exc": {
            "type": "string",
            "description": "Item's reference price excluding taxes",
            "example": "19.99"
          },
          "reference_price_taxes_inc": {
            "type": "string",
            "description": "Item's reference price including taxes",
            "example": "23.98"
          },
          "is_reference_price_taxes_free": {
            "type": "boolean",
            "description": "Item is reference price has taxes free",
            "example": true
          },
          "tax_id": {
            "type": "integer",
            "description": "Tax id",
            "example": 354,
            "nullable": true
          },
          "unit_id": {
            "type": "integer",
            "description": "Unit id",
            "example": 952,
            "nullable": true
          },
          "price_excl_tax": {
            "deprecated": true,
            "type": "string",
            "example": "500.00",
            "description": "Item's price excluding taxes <br/>>This field is deprecated, base on `is_reference_price_taxes_free` to use either `reference_price_taxes_inc` or `reference_price_taxes_exc` instead"
          },
          "currency": {
            "type": "string",
            "description": "Currency code",
            "example": "EUR",
            "nullable": true
          }
        },
        "required": [
          "id",
          "type",
          "name",
          "reference_price_taxes_exc",
          "reference_price_taxes_inc",
          "is_reference_price_taxes_free",
          "tax_id",
          "unit_id"
        ]
      },
      "LicenseRead": {
        "title": "License",
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "License identifier",
              "example": "9998a80a-7b75-4616-96d5-7ccff7ac08e8"
            },
            "code": {
              "type": "string",
              "description": "License code",
              "enum": [
                "pack_prospecting_sale",
                "pack_invoicing_management",
                "pack_all_included"
              ]
            },
            "enabled": {
              "type": "boolean",
              "description": "License enabled"
            }
          }
        }
      },
      "LicenseEdit": {
        "title": "License",
        "type": "array",
        "minItems": 0,
        "maxItems": 1,
        "items": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string",
              "description": "License identifier",
              "example": "9998a80a-7b75-4616-96d5-7ccff7ac08e8"
            }
          }
        }
      },
      "Quotas": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "email_marketing": {
            "type": "object",
            "description": "Quota of email marketing plugin",
            "properties": {
              "limit": {
                "type": "integer",
                "nullable": true,
                "description": "Limit of quota that can be used (null for unlimited quota).",
                "example": 10
              },
              "used": {
                "type": "integer",
                "description": "Quotas used",
                "example": 2
              }
            }
          },
          "firm_search": {
            "type": "object",
            "description": "Quota of company search plugin",
            "properties": {
              "limit": {
                "type": "integer",
                "nullable": true,
                "example": null,
                "description": "Limit of quota that can be used (null for unlimited quota)."
              },
              "used": {
                "type": "integer",
                "description": "Quotas used",
                "example": 100
              }
            }
          },
          "yousign": {
            "type": "object",
            "description": "Quota of esign plugin",
            "properties": {
              "limit": {
                "type": "integer",
                "nullable": true,
                "description": "Limit of quota that can be used (null for unlimited quota)."
              },
              "used": {
                "type": "integer",
                "description": "Quotas used"
              }
            }
          },
          "esker": {
            "type": "object",
            "description": "Quota of mailing plugin",
            "properties": {
              "limit": {
                "type": "integer",
                "nullable": true,
                "description": "Limit of quota that can be used (null for unlimited quota)."
              },
              "used": {
                "type": "integer",
                "description": "Quotas used"
              }
            }
          },
          "sms_marketing": {
            "type": "object",
            "description": "Quota of sms marketing plugin",
            "properties": {
              "limit": {
                "type": "integer",
                "nullable": true,
                "description": "Limit of quota that can be used (null for unlimited quota)."
              },
              "used": {
                "type": "integer",
                "description": "Quotas used"
              }
            }
          },
          "custom_fields": {
            "description": "Quota on the creation of customfields",
            "type": "object",
            "properties": {
              "limit": {
                "type": "integer",
                "nullable": true,
                "description": "Limit of quota that can be used (null for unlimited quota)."
              },
              "used": {
                "type": "integer",
                "description": "Quotas used"
              }
            }
          },
          "custom_field_groups": {
            "type": "object",
            "description": "Quota on the creation of customfield groups",
            "properties": {
              "limit": {
                "type": "integer",
                "nullable": true,
                "description": "Limit of quota that can be used (null for unlimited quota)."
              },
              "used": {
                "type": "integer",
                "description": "Quotas used"
              }
            }
          },
          "pipelines": {
            "type": "object",
            "description": "Quota on the creation of pipelines",
            "properties": {
              "limit": {
                "type": "integer",
                "nullable": true,
                "description": "Limit of quota that can be used (null for unlimited quota)."
              },
              "used": {
                "type": "integer",
                "description": "Quotas used"
              }
            }
          },
          "privilege_profiles": {
            "type": "object",
            "description": "Quota on the creation of privilege profiles",
            "properties": {
              "limit": {
                "type": "integer",
                "nullable": true,
                "description": "Limit of quota that can be used (null for unlimited quota)."
              },
              "used": {
                "type": "integer",
                "description": "Quotas used"
              }
            }
          },
          "api_rate_seconds": {
            "description": "API request quota by seconds",
            "type": "object",
            "properties": {
              "limit": {
                "type": "integer",
                "nullable": true,
                "description": "Limit of quota that can be used (null for unlimited quota)."
              },
              "used": {
                "type": "integer",
                "description": "Quotas used"
              }
            }
          },
          "api_rate_minutes": {
            "type": "object",
            "description": "API request quota by minutes",
            "properties": {
              "limit": {
                "type": "integer",
                "nullable": true,
                "description": "Limit of quota that can be used (null for unlimited quota)."
              },
              "used": {
                "type": "integer",
                "description": "Quotas used"
              }
            }
          },
          "api_rate_days": {
            "type": "object",
            "description": "API request quota by days",
            "properties": {
              "limit": {
                "type": "integer",
                "nullable": true,
                "description": "Limit of quota that can be used (null for unlimited quota)."
              },
              "used": {
                "type": "integer",
                "description": "Quotas used"
              }
            }
          },
          "api_rate_months": {
            "type": "object",
            "description": "API request quota by months",
            "properties": {
              "limit": {
                "type": "integer",
                "nullable": true,
                "description": "Limit of quota that can be used (null for unlimited quota)."
              },
              "used": {
                "type": "integer",
                "description": "Quotas used"
              }
            }
          },
          "estimate_dunning_plan": {
            "type": "object",
            "description": "Quota on the creation of dunning plans for estimate",
            "properties": {
              "limit": {
                "type": "integer",
                "nullable": true,
                "description": "Limit of quota that can be used (null for unlimited quota)."
              },
              "used": {
                "type": "integer",
                "description": "Quotas used"
              }
            }
          },
          "invoice_dunning_plan": {
            "type": "object",
            "description": "Quota on the creation of dunning plans for invoice",
            "properties": {
              "limit": {
                "type": "integer",
                "nullable": true,
                "description": "Limit of quota that can be used (null for unlimited quota)."
              },
              "used": {
                "type": "integer",
                "description": "Quotas used"
              }
            }
          },
          "proforma_dunning_plan": {
            "type": "object",
            "description": "Quota on the creation of dunning plans for proforma",
            "properties": {
              "limit": {
                "type": "integer",
                "nullable": true,
                "description": "Limit of quota that can be used (null for unlimited quota)."
              },
              "used": {
                "type": "integer",
                "description": "Quotas used"
              }
            }
          },
          "activity_report": {
            "type": "object",
            "description": "Quota on activity reporting",
            "properties": {
              "limit": {
                "type": "integer",
                "nullable": true,
                "description": "Limit of quota that can be used (null for unlimited quota)."
              },
              "used": {
                "type": "integer",
                "description": "Quotas used"
              }
            }
          }
        }
      },
      "Verify": {
        "description": "Validated"
      },
      "StaffFilters": {
        "title": "Staff filters",
        "type": "object",
        "description": "Filters for search staffs endpoint",
        "properties": {
          "filters": {
            "type": "object",
            "properties": {
              "status": {
                "type": "array",
                "description": "Filters on the status of staffs",
                "minItems": 1,
                "items": {
                  "type": "string",
                  "enum": [
                    "ok",
                    "blocked"
                  ]
                }
              }
            }
          }
        }
      },
      "InvoicingSearch": {
        "title": "Invoicing Search",
        "description": "Invoicing Search Object",
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true,
            "description": "Unique ID",
            "example": 6657
          },
          "number": {
            "type": "string",
            "example": "FACT-20211001-00003",
            "description": "Document number",
            "readOnly": true
          },
          "type": {
            "type": "string",
            "example": "invoice",
            "description": "Document type",
            "readOnly": true,
            "enum": [
              "model",
              "estimate",
              "invoice",
              "delivery",
              "order",
              "creditnote",
              "proforma"
            ]
          }
        }
      },
      "InvoicingSearchFilters": {
        "title": "Invoicing Search Filters",
        "description": "Invoicing Search Filters",
        "additionalProperties": false,
        "type": "object",
        "properties": {
          "filters": {
            "type": "object",
            "description": "Invoicing Search Filters",
            "properties": {
              "id": {
                "title": "Documents",
                "type": "array",
                "items": {
                  "type": "integer"
                },
                "description": "Filter the documents list by document ID",
                "example": [
                  12,
                  22
                ]
              }
            }
          }
        }
      },
      "AccountingMetas": {
        "title": "listingMeta",
        "type": "object",
        "description": "The listing meta",
        "properties": {
          "permissions": {
            "type": "object",
            "description": "The permissions",
            "required": [
              "favorite",
              "export"
            ],
            "properties": {
              "favorite": {
                "type": "boolean",
                "description": "Can access to export"
              },
              "export": {
                "type": "boolean",
                "description": "Can access to favorite"
              }
            }
          },
          "codes": {
            "type": "object",
            "description": "List of codes",
            "minItems": 1,
            "required": [
              "label",
              "value"
            ],
            "properties": {
              "label": {
                "type": "string",
                "description": "Label of code"
              },
              "value": {
                "type": "string",
                "description": "Id of code"
              }
            }
          },
          "currencies": {
            "type": "object",
            "description": "List of currencies",
            "minItems": 1,
            "required": [
              "label",
              "value"
            ],
            "properties": {
              "label": {
                "type": "string",
                "description": "Label of currency"
              },
              "value": {
                "type": "string",
                "description": "Id of currency"
              }
            }
          }
        },
        "required": [
          "permissions",
          "codes",
          "currencies"
        ]
      },
      "AccountingAggregations": {
        "title": "accountingAggregations",
        "type": "object",
        "description": "The accounting aggregations",
        "properties": {
          "credit_debit": {
            "type": "object",
            "description": "Count debit/credit",
            "properties": {
              "debit": {
                "type": "string",
                "example": "123.234"
              },
              "credit": {
                "type": "string",
                "example": "123.234"
              }
            },
            "additionalProperties": true
          }
        }
      },
      "EsignSettings": {
        "type": "object",
        "description": "The Esign Providers",
        "required": [
          "provider",
          "available_providers"
        ],
        "properties": {
          "provider": {
            "type": "object",
            "nullable": false,
            "additionalProperties": false,
            "required": [
              "id",
              "name"
            ],
            "properties": {
              "id": {
                "type": "string",
                "nullable": false
              },
              "name": {
                "type": "string",
                "nullable": false
              },
              "oauth_url": {
                "type": "string",
                "nullable": true
              },
              "is_connected": {
                "type": "boolean",
                "nullable": false
              }
            }
          },
          "available_providers": {
            "type": "array",
            "nullable": false,
            "items": {
              "type": "object",
              "nullable": false,
              "additionalProperties": false,
              "required": [
                "id",
                "name"
              ],
              "properties": {
                "id": {
                  "type": "string",
                  "nullable": false
                },
                "name": {
                  "type": "string",
                  "nullable": false
                }
              }
            }
          }
        }
      },
      "MarketingProviders": {
        "type": "object",
        "description": "The Marketing Providers",
        "required": [
          "provider",
          "available_providers"
        ],
        "properties": {
          "provider": {
            "type": "object",
            "nullable": true,
            "additionalProperties": false,
            "required": [
              "id",
              "name"
            ],
            "properties": {
              "id": {
                "type": "integer",
                "nullable": false
              },
              "name": {
                "type": "string",
                "nullable": false
              }
            }
          },
          "available_providers": {
            "type": "array",
            "nullable": false,
            "items": {
              "type": "object",
              "nullable": false,
              "additionalProperties": false,
              "required": [
                "id",
                "name"
              ],
              "properties": {
                "id": {
                  "type": "integer",
                  "nullable": false
                },
                "name": {
                  "type": "string",
                  "nullable": false
                }
              }
            }
          }
        }
      },
      "MailchimpSettings": {
        "title": "Mailchimp settings",
        "type": "object",
        "additionalProperties": false,
        "description": "",
        "x-examples": {},
        "properties": {
          "apikey": {
            "type": "string",
            "description": "API key of the mailchimp account to use",
            "example": "abcdefghijklmnopqrstuv0123456789-usX",
            "nullable": true
          },
          "audiences": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "id": {
                  "type": "string",
                  "nullable": false,
                  "description": "Audience's id",
                  "example": "abcdefghijklmnopqrstuv0123456789"
                },
                "name": {
                  "type": "string",
                  "nullable": false,
                  "description": "audience's name",
                  "example": "CRM List"
                }
              },
              "required": [
                "id",
                "name"
              ]
            }
          },
          "marketing": {
            "type": "object",
            "additionalProperties": false,
            "description": "Marketing settings",
            "properties": {
              "loaded": {
                "type": "boolean",
                "description": "Indicates if the Marketing module is loaded",
                "example": true,
                "nullable": false
              },
              "enabled": {
                "type": "boolean",
                "description": "Indicates if Mailchimp Marketing is enabled",
                "example": true,
                "nullable": false
              },
              "audience_id": {
                "description": "Mailchimp's audience list identifier to use",
                "type": "string",
                "example": "abcdefghijklmnopqrstuv0123456789",
                "nullable": true
              }
            },
            "required": [
              "loaded",
              "enabled",
              "audience_id"
            ]
          },
          "contacts_synchronization": {
            "type": "object",
            "additionalProperties": false,
            "description": "Contact Synchronization settings",
            "properties": {
              "enabled": {
                "type": "boolean",
                "description": "Indicates if the synchronization of contacts is enabled",
                "example": true,
                "nullable": false
              },
              "audience_id": {
                "description": "Mailchimp's audience list identifier to use",
                "type": "string",
                "example": "abcdefghijklmnopqrstuv0123456789",
                "nullable": true
              },
              "merge_fields": {
                "type": "array",
                "description": "Mailchimp's audience merge fields defined",
                "nullable": false,
                "items": {
                  "anyOf": [
                    {
                      "type": "object",
                      "description": "Text merge field",
                      "additionalProperties": false,
                      "nullable": false,
                      "properties": {
                        "merge_id": {
                          "type": "integer",
                          "nullable": false,
                          "description": "Merge field's Identifier"
                        },
                        "type": {
                          "type": "string",
                          "nullable": false,
                          "example": "text"
                        },
                        "name": {
                          "type": "string",
                          "nullable": false,
                          "description": "Merge field's Name"
                        },
                        "tag": {
                          "type": "string",
                          "nullable": false,
                          "description": "Merge field's template tag"
                        },
                        "default_value": {
                          "type": "string",
                          "nullable": true
                        }
                      }
                    },
                    {
                      "type": "object",
                      "description": "Dropdown merge field",
                      "additionalProperties": false,
                      "nullable": false,
                      "properties": {
                        "merge_id": {
                          "type": "integer",
                          "nullable": false,
                          "description": "Merge field's Identifier"
                        },
                        "type": {
                          "type": "string",
                          "nullable": false,
                          "example": "dropdown"
                        },
                        "name": {
                          "type": "string",
                          "nullable": false,
                          "description": "Merge field's Name"
                        },
                        "tag": {
                          "type": "string",
                          "nullable": false,
                          "description": "Merge field's template tag"
                        },
                        "default_value": {
                          "type": "string",
                          "nullable": true
                        },
                        "choices": {
                          "type": "array",
                          "nullable": false,
                          "description": "Merge field's value options",
                          "items": {
                            "type": "object",
                            "nullable": false,
                            "additionalProperties": false,
                            "properties": {
                              "label": {
                                "type": "string",
                                "nullable": false
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              },
              "filter": {
                "description": "Indicates which kind of contacts to synchronize",
                "type": "string",
                "enum": [
                  "all",
                  "clients",
                  "prospects",
                  "suppliers"
                ],
                "default": "all",
                "nullable": true
              }
            },
            "required": [
              "enabled",
              "audience_id",
              "filter"
            ]
          }
        },
        "required": [
          "apikey",
          "marketing",
          "contacts_synchronization"
        ]
      },
      "MailjetSettings": {
        "title": "Mailjet settings",
        "type": "object",
        "additionalProperties": false,
        "description": "",
        "x-examples": {},
        "properties": {
          "api_key": {
            "type": "string",
            "description": "API key of the Mailjet account to use",
            "example": "abcdefghijklmnopqrstuv0123456789",
            "nullable": true
          },
          "api_secret": {
            "type": "string",
            "description": "API secret of the Mailjet account to use",
            "example": "abcdefghijklmnopqrstuv0123456789",
            "nullable": false
          },
          "contacts_lists": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "id": {
                  "type": "integer",
                  "minimum": 0,
                  "exclusiveMinimum": true,
                  "nullable": false,
                  "description": "contact list's id",
                  "example": 42
                },
                "name": {
                  "type": "string",
                  "nullable": false,
                  "description": "contact list's name",
                  "example": "CRM List"
                }
              },
              "required": [
                "id",
                "name"
              ]
            }
          },
          "contacts_synchronization": {
            "type": "object",
            "additionalProperties": false,
            "description": "Contact Synchronization settings",
            "properties": {
              "enabled": {
                "type": "boolean",
                "description": "Indicates if the synchronization of contacts is enabled",
                "example": true,
                "nullable": false
              },
              "contacts_list_id": {
                "description": "Mailjet's contact list identifier to use",
                "type": "integer",
                "minimum": 0,
                "example": 42,
                "nullable": true
              },
              "filter": {
                "description": "Indicates which kind of contacts to synchronize",
                "type": "string",
                "enum": [
                  "all",
                  "clients",
                  "prospects",
                  "suppliers"
                ],
                "default": "all",
                "nullable": true
              }
            },
            "required": [
              "enabled",
              "contacts_list_id",
              "filter"
            ]
          }
        },
        "required": [
          "api_key",
          "api_secret",
          "contacts_synchronization"
        ]
      },
      "TwoFactorAuthenticationSettings": {
        "title": "Two factor authentication settings",
        "type": "object",
        "additionalProperties": false,
        "description": "",
        "x-examples": {},
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "Indicates if the two factor authentication is enabled",
            "example": true,
            "nullable": false
          }
        },
        "required": [
          "enabled"
        ]
      },
      "UserTwoFactorAuthenticationSettings": {
        "title": "Two factor authentication settings",
        "type": "object",
        "additionalProperties": false,
        "description": "",
        "x-examples": {},
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "Indicates if the two factor authentication is enabled",
            "example": true,
            "nullable": false
          },
          "corporation_enabled": {
            "type": "boolean",
            "description": "Indicates if the two factor authentication is enabled for the corporation",
            "example": true,
            "nullable": false
          },
          "available_providers": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "provider": {
                  "type": "string",
                  "description": "provider name",
                  "example": "google",
                  "nullable": false,
                  "enum": [
                    "google"
                  ]
                }
              },
              "required": [
                "provider"
              ]
            }
          },
          "providers": {
            "description": "List of registered provider for the user",
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "provider": {
                  "$ref": "#/components/schemas/UserTwoFactorAuthenticationSettings/properties/available_providers/items/properties/provider"
                },
                "primary": {
                  "type": "boolean",
                  "description": "is the primary provider",
                  "example": true,
                  "nullable": false
                },
                "configured_at": {
                  "type": "string",
                  "format": "date-time",
                  "example": "1970-01-01T00:00:00+00:00",
                  "description": "Configuration date time the of the provider",
                  "nullable": true
                }
              },
              "required": [
                "provider",
                "primary",
                "configured_at"
              ]
            }
          },
          "backup_codes": {
            "title": "Two factor authentication backup codes",
            "description": "List of user's backup codes",
            "type": "array",
            "maxItems": 10,
            "minItems": 0,
            "items": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "code": {
                  "type": "string",
                  "description": "Backup Code",
                  "example": "EB2F5E40",
                  "nullable": false
                },
                "created_at": {
                  "type": "string",
                  "format": "date-time",
                  "example": "1970-01-01T00:00:00+00:00",
                  "description": "Creation date of the backup code",
                  "nullable": false
                },
                "used_at": {
                  "type": "string",
                  "format": "date-time",
                  "example": "1970-01-01T00:00:00+00:00",
                  "description": "Usage date of the backup code",
                  "nullable": true
                }
              },
              "required": [
                "code",
                "created_at",
                "used_at"
              ]
            }
          },
          "trusted_devices": {
            "description": "List of registered trusted devices for the user",
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "id": {
                  "type": "integer"
                },
                "device": {
                  "type": "string",
                  "description": "Device type",
                  "example": "desktop",
                  "nullable": false
                },
                "created_at": {
                  "type": "string",
                  "format": "date-time",
                  "example": "1970-01-01T00:00:00+00:00",
                  "description": "Creation date time the of the device",
                  "nullable": false
                },
                "last_login_at": {
                  "type": "string",
                  "format": "date-time",
                  "example": "1970-01-01T00:00:00+00:00",
                  "description": "Last login date time using the device",
                  "nullable": false
                },
                "os": {
                  "type": "string",
                  "example": "GNU/Linux",
                  "description": "Operating system family of the device",
                  "nullable": true
                },
                "browser": {
                  "type": "string",
                  "example": "Chrome",
                  "description": "Browser family of the device",
                  "nullable": true
                }
              },
              "required": [
                "id",
                "device",
                "created_at",
                "last_login_at",
                "os",
                "browser"
              ]
            }
          }
        },
        "required": [
          "enabled",
          "corporation_enabled",
          "available_providers",
          "backup_codes",
          "providers",
          "trusted_devices"
        ]
      },
      "UserUpdateTwoFactorAuthenticationSettings": {
        "title": "Two factor authentication settings",
        "type": "object",
        "additionalProperties": false,
        "description": "",
        "x-examples": {},
        "properties": {
          "providers": {
            "description": "List of registered provider for the user",
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "provider": {
                  "$ref": "#/components/schemas/UserTwoFactorAuthenticationSettings/properties/available_providers/items/properties/provider"
                }
              },
              "required": [
                "provider"
              ]
            }
          }
        },
        "required": [
          "providers"
        ]
      },
      "UserUpdateTwoFactorAuthenticationSettingsResponse": {
        "title": "Two factor authentication settings",
        "type": "object",
        "additionalProperties": false,
        "description": "",
        "x-examples": {},
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "Indicates if the two factor authentication is enabled",
            "example": true,
            "nullable": false
          },
          "providers": {
            "description": "List of registered provider for the user",
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "provider": {
                  "$ref": "#/components/schemas/UserTwoFactorAuthenticationSettings/properties/available_providers/items/properties/provider"
                },
                "primary": {
                  "type": "boolean",
                  "description": "is the primary provider",
                  "example": true,
                  "nullable": false
                },
                "configured_at": {
                  "type": "string",
                  "format": "date-time",
                  "example": "1970-01-01T00:00:00+00:00",
                  "description": "Configuration date time the of the provider",
                  "nullable": true
                }
              },
              "required": [
                "provider",
                "primary",
                "configured_at"
              ]
            }
          }
        },
        "required": [
          "enabled",
          "providers"
        ]
      },
      "BackupCodes": {
        "title": "Two factor authentication backup codes",
        "description": "List of user's backup codes",
        "type": "array",
        "maxItems": 10,
        "minItems": 0,
        "items": {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "code": {
              "type": "string",
              "description": "Backup Code",
              "example": "EB2F5E40",
              "nullable": false
            },
            "created_at": {
              "type": "string",
              "format": "date-time",
              "example": "1970-01-01T00:00:00+00:00",
              "description": "Creation date of the backup code",
              "nullable": false
            },
            "used_at": {
              "type": "string",
              "format": "date-time",
              "example": "1970-01-01T00:00:00+00:00",
              "description": "Usage date of the backup code",
              "nullable": true
            }
          },
          "required": [
            "code",
            "created_at",
            "used_at"
          ]
        }
      },
      "ScanList": {
        "type": "array",
        "title": "Search results",
        "description": "List of results",
        "items": {
          "type": "object",
          "properties": {
            "name": {
              "description": "name of company",
              "type": "string",
              "example": "Sellsy"
            },
            "siret": {
              "description": "Siret of company",
              "type": "string",
              "example": "82993087400013",
              "nullable": true
            },
            "type": {
              "type": "string",
              "description": "type of company",
              "example": "SAS, société par actions simplifiée"
            },
            "id": {
              "type": "string",
              "description": "Identifier of the company. In case of French company, it corresponds to the SIREN Number",
              "example": "509961074"
            },
            "job_code": {
              "type": "string",
              "description": "job code of company",
              "example": "58.29C",
              "nullable": true
            },
            "address": {
              "type": "object",
              "properties": {
                "country": {
                  "type": "string",
                  "description": "Country of company",
                  "example": "France",
                  "nullable": true
                },
                "city": {
                  "type": "string",
                  "description": "City of company",
                  "example": "LA ROCHELLE,",
                  "nullable": true
                },
                "postal_code": {
                  "type": "string",
                  "description": "Postal_code of company",
                  "example": "17000",
                  "nullable": true
                },
                "address_line_1": {
                  "type": "string",
                  "description": "first part of address of company",
                  "example": "Avenue DU LAZARET,",
                  "nullable": true
                },
                "address_line_2": {
                  "type": "string",
                  "description": "Second part of address of company",
                  "nullable": true
                }
              }
            }
          }
        }
      },
      "ScanFetch": {
        "type": "object",
        "title": "Search results",
        "description": "Detailed answer for a company returned via the scan route",
        "properties": {
          "name": {
            "description": "name of company",
            "type": "string",
            "example": "Sellsy"
          },
          "siret": {
            "description": "Siret of company",
            "type": "string",
            "example": "82993087400013",
            "nullable": true
          },
          "type": {
            "type": "string",
            "description": "type of company",
            "example": "SAS, société par actions simplifiée"
          },
          "id": {
            "type": "string",
            "description": "Identifier of the company. In case of French company, it corresponds to the SIREN Number",
            "example": "509961074"
          },
          "job_code": {
            "type": "string",
            "description": "job code of company",
            "example": "58.29C",
            "nullable": true
          },
          "address": {
            "type": "object",
            "properties": {
              "country": {
                "type": "string",
                "description": "Country of company",
                "example": "France",
                "nullable": true
              },
              "city": {
                "type": "string",
                "description": "City of company",
                "example": "LA ROCHELLE,",
                "nullable": true
              },
              "postal_code": {
                "type": "string",
                "description": "Postal_code of company",
                "example": "17000",
                "nullable": true
              },
              "address_line_1": {
                "type": "string",
                "description": "first part of address of company",
                "example": "Avenue DU LAZARET,",
                "nullable": true
              },
              "address_line_2": {
                "type": "string",
                "description": "Second part of address of company",
                "nullable": true
              }
            }
          },
          "officers": {
            "type": "array",
            "nullable": true,
            "items": {
              "type": "object",
              "properties": {
                "lastname": {
                  "type": "string",
                  "description": "Lastname of officier"
                },
                "firstname": {
                  "type": "string",
                  "description": "Firstname of officier"
                },
                "role": {
                  "type": "string",
                  "description": "Role of officier",
                  "nullable": true
                }
              }
            }
          },
          "capital": {
            "type": "integer",
            "description": "Capital of company",
            "nullable": true
          },
          "financial_activity": {
            "type": "array",
            "nullable": true,
            "items": {
              "type": "object",
              "properties": {
                "turnover": {
                  "type": "integer",
                  "description": "Turnover in this year"
                },
                "publication_year": {
                  "type": "string",
                  "description": "Year of publication"
                },
                "publication_date": {
                  "type": "string",
                  "description": "Date of publication"
                },
                "income": {
                  "type": "integer",
                  "description": "Diff with last year"
                },
                "workforce_count": {
                  "type": "integer",
                  "description": "Number of emplyees",
                  "nullable": true
                }
              }
            }
          },
          "rcs": {
            "type": "string",
            "description": "RCS of compnay",
            "nullable": true
          },
          "vat": {
            "type": "string",
            "description": "VAT of compnay",
            "nullable": true
          },
          "company_sign": {
            "type": "string",
            "description": "Sign of company",
            "nullable": true
          }
        }
      },
      "Notification": {
        "title": "Notification",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true,
            "description": "Unique ID",
            "example": 6657
          },
          "event": {
            "type": "string",
            "description": "Event name",
            "example": "mention.staff"
          },
          "transport": {
            "type": "string",
            "description": "Event transport",
            "enum": [
              "inapp",
              "push",
              "mail",
              "webhook"
            ],
            "readOnly": true
          },
          "recipient": {
            "title": "Recipient",
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "readOnly": true,
                "description": "Recipient id",
                "example": 6657
              },
              "type": {
                "type": "string",
                "description": "Recipient type",
                "example": "staff"
              },
              "firstname": {
                "type": "string",
                "description": "Recipient first name",
                "example": "John"
              },
              "lastname": {
                "type": "string",
                "description": "Recipient last name",
                "example": "Smith"
              },
              "subtype": {
                "type": "string",
                "description": "Sender type",
                "example": "regular"
              }
            }
          },
          "related": {
            "type": "array",
            "items": {
              "title": "Related",
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "readOnly": true,
                  "description": "Related object id",
                  "example": 6657
                },
                "type": {
                  "type": "string",
                  "description": "Related object type",
                  "example": "opportunity"
                },
                "name": {
                  "type": "string",
                  "description": "Related object name",
                  "example": "New website",
                  "nullable": true
                }
              }
            }
          },
          "sender": {
            "title": "Sender",
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "readOnly": true,
                "description": "Sender id",
                "example": 6657
              },
              "type": {
                "type": "string",
                "description": "Sender type",
                "example": "staff"
              },
              "firstname": {
                "type": "string",
                "description": "Sender first name",
                "example": "John"
              },
              "lastname": {
                "type": "string",
                "description": "Sender last name",
                "example": "Smith"
              },
              "subtype": {
                "type": "string",
                "description": "Sender type",
                "example": "regular"
              },
              "avatar": {
                "type": "object",
                "nullable": true,
                "readOnly": true,
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "initials",
                      "picture",
                      "twitteruserpic"
                    ]
                  },
                  "value": {
                    "type": "string",
                    "description": "initials or avatar url"
                  },
                  "class": {
                    "type": "integer"
                  }
                }
              }
            }
          },
          "created": {
            "type": "string",
            "description": "Creation date of event",
            "format": "date-time",
            "example": "1970-01-01T00:00:00+00:00",
            "readOnly": true
          },
          "read": {
            "type": "string",
            "description": "Read date of event",
            "format": "date-time",
            "example": "1970-01-01T00:00:00+00:00",
            "nullable": true,
            "readOnly": true
          },
          "status": {
            "type": "string",
            "description": "Event dispatch status",
            "enum": [
              "ongoing",
              "sent",
              "failed",
              "retry"
            ],
            "readOnly": true
          },
          "status_updated": {
            "type": "string",
            "description": "Update date of event's status",
            "format": "date-time",
            "example": "1970-01-01T00:00:00+00:00",
            "readOnly": true,
            "nullable": true
          }
        }
      },
      "NotificationFilters": {
        "title": "NotificationFilters",
        "type": "object",
        "description": "Notification filters",
        "properties": {
          "filters": {
            "type": "object",
            "description": "Notification filters",
            "properties": {
              "is_read": {
                "title": "Is read",
                "type": "boolean",
                "description": "Filter on read/unread notifications",
                "example": false
              }
            }
          }
        },
        "required": [
          "filters"
        ]
      },
      "NotificationMarkAsRead": {
        "title": "Mark as read",
        "type": "object",
        "description": "Mark as read",
        "properties": {
          "read": {
            "title": "Is read",
            "type": "boolean",
            "description": "The notification has been read",
            "example": true
          }
        },
        "required": [
          "read"
        ]
      },
      "NotificationSettingsOutput": {
        "title": "Notifications Settings Output",
        "type": "object",
        "properties": {
          "subscriptions": {
            "title": "Notifications subscription",
            "type": "array",
            "description": "array of notifications to subscribe, with enabled transports by notification",
            "items": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "name": {
                  "type": "string",
                  "description": "notification name",
                  "example": "mention.staff"
                },
                "transports": {
                  "type": "array",
                  "description": "list of transports to enable for notification",
                  "items": {
                    "type": "string",
                    "enum": [
                      "inapp",
                      "push",
                      "mail",
                      "webhook"
                    ]
                  },
                  "uniqueItems": true
                }
              },
              "required": [
                "name",
                "transports"
              ]
            }
          },
          "do_not_disturb": {
            "title": "Notification do-not-disturb setting",
            "type": "object",
            "properties": {
              "enabled": {
                "description": "Do not disturb mode is enabled",
                "type": "boolean"
              }
            },
            "required": [
              "enabled"
            ]
          }
        }
      },
      "NotificationSettingsInput": {
        "title": "Notifications Settings Input",
        "type": "object",
        "properties": {
          "subscriptions": {
            "title": "Notifications subscription",
            "type": "array",
            "description": "array of notifications to subscribe, with enabled transports by notification",
            "minItems": 1,
            "maxItems": 100,
            "items": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "name": {
                  "type": "string",
                  "description": "notification name",
                  "example": "mention.staff"
                },
                "transports": {
                  "type": "array",
                  "description": "list of transports to enable for notification",
                  "items": {
                    "type": "string",
                    "enum": [
                      "inapp",
                      "push",
                      "mail",
                      "webhook"
                    ]
                  },
                  "uniqueItems": true
                }
              },
              "required": [
                "name",
                "transports"
              ]
            }
          },
          "do_not_disturb": {
            "title": "Notification do-not-disturb setting",
            "type": "object",
            "properties": {
              "enabled": {
                "description": "Do not disturb mode is enabled",
                "type": "boolean"
              }
            },
            "required": [
              "enabled"
            ]
          }
        }
      },
      "NotificationMetadata": {
        "title": "Notifications Metadata Object",
        "type": "object",
        "properties": {
          "events": {
            "type": "array",
            "items": {
              "title": "Notification events metadata",
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "notification name",
                  "example": "mention.staff"
                },
                "transports": {
                  "type": "array",
                  "description": "list of transports available for notification",
                  "minItems": 1,
                  "items": {
                    "type": "string",
                    "enum": [
                      "inapp",
                      "push",
                      "mail",
                      "webhook"
                    ]
                  }
                }
              }
            }
          }
        },
        "required": [
          "events"
        ]
      },
      "corporationStaffAggregation": {
        "title": "Count licenses Aggregations",
        "type": "object",
        "x-examples": {},
        "properties": {
          "count_licenses": {
            "type": "array",
            "items": {
              "title": "Count licenses",
              "type": "object",
              "properties": {
                "count": {
                  "readOnly": true,
                  "type": "integer",
                  "description": "Number of licenses",
                  "example": 10
                },
                "product_id": {
                  "readOnly": true,
                  "type": "string",
                  "description": "Product id",
                  "example": "e6acc4c7-4b7d-4b64-bda0-6e53eb1a00fb"
                },
                "product_code": {
                  "readOnly": true,
                  "type": "string",
                  "description": "Product code",
                  "example": "pack_all_included"
                }
              }
            }
          }
        }
      },
      "Report": {
        "title": "Report",
        "type": "object",
        "additionalProperties": false,
        "description": "",
        "x-examples": {},
        "properties": {
          "name": {
            "type": "string",
            "description": "The report name",
            "example": "Business report",
            "nullable": false
          },
          "type": {
            "type": "string",
            "enum": [
              "cumulio",
              "legacy"
            ],
            "default": "legacy",
            "description": "The report provider",
            "nullable": false
          },
          "dashboard_id": {
            "type": "string",
            "description": "Dashboard id",
            "example": "b5e2cf01-8bb6-4fcd-ad88-0efb611195da",
            "nullable": true
          },
          "path": {
            "type": "string",
            "description": "The path of the report",
            "example": "/report/business",
            "nullable": true
          },
          "updated": {
            "type": "string",
            "nullable": true,
            "description": "Datetime of updating the report",
            "example": "2020-05-29T11:22:03+02:00",
            "readOnly": true
          }
        },
        "required": [
          "name",
          "type",
          "dashboard_id",
          "path",
          "updated"
        ]
      },
      "ReportAggregation": {
        "title": "Reports aggregations",
        "type": "object",
        "properties": {
          "cumulio": {
            "type": "object",
            "description": "cumulio token",
            "properties": {
              "key": {
                "type": "string",
                "description": "Cumulio key"
              },
              "token": {
                "type": "string",
                "description": "Cumulio token"
              }
            },
            "example": {
              "key": "some_key",
              "token": "some_token"
            }
          }
        }
      },
      "Invoice": {
        "title": "Invoice",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true,
            "description": "Invoice ID",
            "example": 3875
          },
          "number": {
            "type": "string",
            "description": "Invoice number",
            "example": "INV-2022-01-02-002",
            "readOnly": true
          },
          "status": {
            "type": "string",
            "readOnly": true,
            "description": "Status of the invoice",
            "example": "paid",
            "enum": [
              "draft",
              "due",
              "payinprogress",
              "paid",
              "late",
              "cancelled"
            ]
          },
          "date": {
            "type": "string",
            "format": "date",
            "description": "date of the invoice",
            "example": "2022-01-02"
          },
          "subject": {
            "type": "string",
            "description": "Subject of the invoice"
          },
          "amounts": {
            "type": "object",
            "readOnly": true,
            "description": "Amounts of invoice, with and without taxes",
            "properties": {
              "total_raw_excl_tax": {
                "type": "string",
                "description": "Total amount without taxes and discounts. Does not include transport and packaging costs.",
                "example": "60"
              },
              "total_after_discount_excl_tax": {
                "type": "string",
                "description": "Total discounted without tax. Does not include transport and packaging costs",
                "example": "50"
              },
              "total_packaging": {
                "type": "string",
                "description": "Total amount of packaging costs.",
                "example": "15.96"
              },
              "total_shipping": {
                "type": "string",
                "description": "Total amount of shipping costs.",
                "example": "13.90"
              },
              "total_excl_tax": {
                "type": "string",
                "description": "Total net without tax. Including transport and packaging costs. Discount is applied if any.",
                "example": "79.86"
              },
              "total_incl_tax": {
                "type": "string",
                "description": "Total with tax",
                "example": "95.83"
              },
              "total_remaining_due_incl_tax": {
                "type": "string",
                "description": "Remaining amount to be paid",
                "example": "50.00"
              }
            }
          },
          "currency": {
            "type": "string",
            "description": "Currency code of the invoice",
            "example": "EUR"
          },
          "taxes": {
            "description": "List of taxes used on the invoice",
            "type": "array",
            "readOnly": true,
            "items": {
              "type": "object",
              "description": "Tax used",
              "properties": {
                "label": {
                  "type": "string"
                },
                "id": {
                  "type": "integer"
                },
                "rate": {
                  "type": "string"
                },
                "amount": {
                  "type": "string"
                }
              },
              "required": [
                "label",
                "id",
                "rate",
                "amount"
              ]
            }
          },
          "discount": {
            "readOnly": true,
            "description": "Global discount applied on the invoice",
            "nullable": true,
            "type": "object",
            "properties": {
              "percent": {
                "type": "string",
                "description": "Percentage of the discount",
                "example": "12.00"
              },
              "amount": {
                "type": "string",
                "description": "Amount of the discount",
                "example": "111.97"
              },
              "type": {
                "type": "string",
                "description": "Type of the global discount as defined on the document",
                "enum": [
                  "amount",
                  "percent"
                ]
              }
            }
          },
          "related": {
            "description": "Objects linked to the invoice : \n  - There can be only one company or one individual at a time (required)\n  - For Company & Individual, only `client`, `prospect` type are allowed\n  - Contact is the contact of company linked to the invoice. There may be no or one contact.\n  - Opportunity is the opportunity linked to the invoice. There may be zero or more opportunities linked to invoice\n",
            "type": "array",
            "minItems": 1,
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "description": "ID of related",
                  "example": 234
                },
                "type": {
                  "type": "string",
                  "description": "Type of related",
                  "example": "company",
                  "enum": [
                    "company",
                    "individual",
                    "contact",
                    "opportunity"
                  ]
                }
              }
            }
          },
          "public_link": {
            "description": "Public link of the invoice",
            "type": "object",
            "properties": {
              "enabled": {
                "type": "boolean",
                "description": "Public link is enabled"
              },
              "url": {
                "readOnly": true,
                "type": "string",
                "description": "Url to public link"
              }
            }
          },
          "payment_conditions_acceptance": {
            "type": "object",
            "readOnly": true,
            "description": "Acceptance of terms and conditions",
            "properties": {
              "enabled": {
                "type": "boolean",
                "description": "Acceptance is required to pay or sign the document"
              }
            }
          },
          "owner": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StaffAutocompleteResultItem/properties/owner/allOf/0"
              },
              {
                "type": "object",
                "description": "Invoice's owner",
                "readOnly": true
              }
            ]
          },
          "fiscal_year_id": {
            "type": "integer",
            "nullable": true,
            "description": "ID of the invoice's fiscal year",
            "readOnly": true
          },
          "pdf_link": {
            "type": "string",
            "format": "uri",
            "readOnly": true,
            "description": "Link to the pdf of document. /!\\ Link is regenerate after an update of document",
            "nullable": true
          },
          "_embed": {
            "allOf": [
              {
                "title": "Invoice Embed",
                "allOf": [
                  {
                    "type": "object",
                    "properties": {
                      "related": {
                        "type": "array",
                        "items": {
                          "anyOf": [
                            {
                              "$ref": "#/components/schemas/SaleEmbed/properties/_embed/allOf/0/properties/company",
                              "title": "Company"
                            },
                            {
                              "$ref": "#/components/schemas/SaleEmbed/properties/_embed/allOf/0/properties/individual",
                              "title": "Individual"
                            },
                            {
                              "$ref": "#/components/schemas/ContactItem/allOf/0",
                              "title": "Contact"
                            }
                          ]
                        }
                      },
                      "contact": {
                        "$ref": "#/components/schemas/ContactItem/allOf/0",
                        "title": "Contact",
                        "nullable": true
                      },
                      "individual": {
                        "$ref": "#/components/schemas/SaleEmbed/properties/_embed/allOf/0/properties/individual",
                        "title": "Individual",
                        "nullable": true
                      },
                      "company": {
                        "$ref": "#/components/schemas/SaleEmbed/properties/_embed/allOf/0/properties/company",
                        "title": "Company",
                        "nullable": true
                      }
                    }
                  },
                  {
                    "$ref": "#/components/schemas/SaleEmbed/properties/_embed/allOf/1"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "acl": {
                        "title": "Invoice ACL",
                        "type": "object",
                        "description": "",
                        "x-examples": {},
                        "properties": {
                          "can_be_updated": {
                            "type": "boolean",
                            "nullable": true,
                            "description": "Invoice can be updated",
                            "example": true
                          },
                          "can_be_deleted": {
                            "type": "boolean",
                            "nullable": true,
                            "description": "Invoice can be deleted",
                            "example": true
                          }
                        }
                      },
                      "owner": {
                        "$ref": "#/components/schemas/Activity/properties/_embed/properties/author"
                      },
                      "fiscal_year": {
                        "$ref": "#/components/schemas/SaleEmbed/properties/_embed/allOf/0/properties/fiscal_year"
                      },
                      "currency": {},
                      "smart_tags": {
                        "nullable": true,
                        "description": "Smart-tags linked",
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/SaleEmbed/properties/_embed/allOf/0/properties/smart_tags/allOf/0"
                          }
                        ]
                      }
                    }
                  }
                ]
              },
              {
                "type": "object",
                "readOnly": true
              }
            ]
          }
        }
      },
      "InvoiceOne": {
        "allOf": [
          {
            "title": "Invoice",
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "readOnly": true,
                "description": "Invoice ID",
                "example": 3875
              },
              "number": {
                "type": "string",
                "description": "Invoice number",
                "example": "INV-2022-01-02-002",
                "readOnly": true
              },
              "status": {
                "type": "string",
                "readOnly": true,
                "description": "Status of the invoice",
                "example": "paid",
                "enum": [
                  "draft",
                  "due",
                  "payinprogress",
                  "paid",
                  "late",
                  "cancelled"
                ]
              },
              "date": {
                "type": "string",
                "format": "date",
                "description": "date of the invoice",
                "example": "2022-01-02"
              },
              "subject": {
                "type": "string",
                "description": "Subject of the invoice"
              },
              "amounts": {
                "type": "object",
                "readOnly": true,
                "description": "Amounts of invoice, with and without taxes",
                "properties": {
                  "total_raw_excl_tax": {
                    "type": "string",
                    "description": "Total amount without taxes and discounts. Does not include transport and packaging costs.",
                    "example": "60"
                  },
                  "total_after_discount_excl_tax": {
                    "type": "string",
                    "description": "Total discounted without tax. Does not include transport and packaging costs",
                    "example": "50"
                  },
                  "total_packaging": {
                    "type": "string",
                    "description": "Total amount of packaging costs.",
                    "example": "15.96"
                  },
                  "total_shipping": {
                    "type": "string",
                    "description": "Total amount of shipping costs.",
                    "example": "13.90"
                  },
                  "total_excl_tax": {
                    "type": "string",
                    "description": "Total net without tax. Including transport and packaging costs. Discount is applied if any.",
                    "example": "79.86"
                  },
                  "total_incl_tax": {
                    "type": "string",
                    "description": "Total with tax",
                    "example": "95.83"
                  },
                  "total_remaining_due_incl_tax": {
                    "type": "string",
                    "description": "Remaining amount to be paid",
                    "example": "50.00"
                  }
                }
              },
              "currency": {
                "type": "string",
                "description": "Currency code of the invoice",
                "example": "EUR"
              },
              "taxes": {
                "description": "List of taxes used on the invoice",
                "type": "array",
                "readOnly": true,
                "items": {
                  "type": "object",
                  "description": "Tax used",
                  "properties": {
                    "label": {
                      "type": "string"
                    },
                    "id": {
                      "type": "integer"
                    },
                    "rate": {
                      "type": "string"
                    },
                    "amount": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "label",
                    "id",
                    "rate",
                    "amount"
                  ]
                }
              },
              "discount": {
                "readOnly": true,
                "description": "Global discount applied on the invoice",
                "nullable": true,
                "type": "object",
                "properties": {
                  "percent": {
                    "type": "string",
                    "description": "Percentage of the discount",
                    "example": "12.00"
                  },
                  "amount": {
                    "type": "string",
                    "description": "Amount of the discount",
                    "example": "111.97"
                  },
                  "type": {
                    "type": "string",
                    "description": "Type of the global discount as defined on the document",
                    "enum": [
                      "amount",
                      "percent"
                    ]
                  }
                }
              },
              "related": {
                "description": "Objects linked to the invoice : \n  - There can be only one company or one individual at a time (required)\n  - For Company & Individual, only `client`, `prospect` type are allowed\n  - Contact is the contact of company linked to the invoice. There may be no or one contact.\n  - Opportunity is the opportunity linked to the invoice. There may be zero or more opportunities linked to invoice\n",
                "type": "array",
                "minItems": 1,
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "description": "ID of related",
                      "example": 234
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of related",
                      "example": "company",
                      "enum": [
                        "company",
                        "individual",
                        "contact",
                        "opportunity"
                      ]
                    }
                  }
                }
              },
              "public_link": {
                "description": "Public link of the invoice",
                "type": "object",
                "properties": {
                  "enabled": {
                    "type": "boolean",
                    "description": "Public link is enabled"
                  },
                  "url": {
                    "readOnly": true,
                    "type": "string",
                    "description": "Url to public link"
                  }
                }
              },
              "payment_conditions_acceptance": {
                "type": "object",
                "readOnly": true,
                "description": "Acceptance of terms and conditions",
                "properties": {
                  "enabled": {
                    "type": "boolean",
                    "description": "Acceptance is required to pay or sign the document"
                  }
                }
              },
              "owner": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/StaffAutocompleteResultItem/properties/owner/allOf/0"
                  },
                  {
                    "type": "object",
                    "description": "Invoice's owner",
                    "readOnly": true
                  }
                ]
              },
              "fiscal_year_id": {
                "type": "integer",
                "nullable": true,
                "description": "ID of the invoice's fiscal year",
                "readOnly": true
              },
              "pdf_link": {
                "type": "string",
                "format": "uri",
                "readOnly": true,
                "description": "Link to the pdf of document. /!\\ Link is regenerate after an update of document",
                "nullable": true
              },
              "_embed": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Invoice/properties/_embed/allOf/0"
                  },
                  {
                    "type": "object",
                    "readOnly": true
                  }
                ]
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "rows": {
                "type": "array",
                "nullable": true,
                "maxItems": 100,
                "items": {
                  "$ref": "#/components/schemas/EstimateCreate/allOf/1/properties/rows/items"
                }
              },
              "_embed": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Invoice/properties/_embed/allOf/0"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "payment_terms": {
                        "description": "Terms of payment of document",
                        "type": "object",
                        "properties": {
                          "settings": {
                            "type": "object",
                            "description": "Payment terms configuration",
                            "properties": {
                              "type": {
                                "description": "Type of payment terms generation method",
                                "type": "string",
                                "enum": [
                                  "settings"
                                ]
                              },
                              "value": {
                                "type": "object",
                                "description": "Parameters of payment terms",
                                "properties": {
                                  "id": {
                                    "type": "integer",
                                    "description": "Id of payment terms setting"
                                  },
                                  "label": {
                                    "type": "string",
                                    "description": "label of payment terms setting",
                                    "example": "Deadlines"
                                  },
                                  "x_days": {
                                    "type": "integer",
                                    "description": "Number of days added to document date for determine the due date"
                                  },
                                  "end_of_month": {
                                    "type": "boolean",
                                    "description": "Does the due date have to be fixed to the end of the month? (After the addition of x_days)"
                                  },
                                  "override_date": {
                                    "type": "boolean",
                                    "description": "Can the due date be overwritten in addition to the parameters ?"
                                  }
                                },
                                "required": [
                                  "id",
                                  "label"
                                ]
                              }
                            }
                          },
                          "computed_instalment_plan": {
                            "type": "array",
                            "description": "List of deadlines computed with the payment terms settings",
                            "items": {
                              "type": "object",
                              "properties": {
                                "date": {
                                  "type": "string",
                                  "description": "due date",
                                  "format": "date"
                                },
                                "amount": {
                                  "type": "string",
                                  "description": "Total amount"
                                },
                                "due_amount": {
                                  "type": "string",
                                  "description": "Remaining due amount"
                                },
                                "status": {
                                  "description": "Status of deadline",
                                  "type": "string",
                                  "enum": [
                                    "due",
                                    "payinprogress",
                                    "paid"
                                  ]
                                },
                                "late": {
                                  "description": "Is the deadline late?",
                                  "type": "boolean"
                                }
                              }
                            }
                          }
                        }
                      },
                      "automatic_dunning": {
                        "type": "object",
                        "title": "Automatic Dunning",
                        "properties": {
                          "is_enabled": {
                            "type": "boolean",
                            "description": "Automatic dunning is enabled on document",
                            "example": true
                          },
                          "is_valid": {
                            "type": "boolean",
                            "description": "Automatic dunning configuration is valid for document",
                            "example": true
                          },
                          "sent": {
                            "type": "array",
                            "description": "List of the last 10 dunning notices sent on this invoice",
                            "items": {
                              "description": "Sent dunning object",
                              "type": "object",
                              "properties": {
                                "reminder_name": {
                                  "type": "string",
                                  "example": "Dunning D+1"
                                },
                                "sent_at": {
                                  "type": "string",
                                  "description": "Dunning email date of sent",
                                  "format": "date-time",
                                  "example": "1970-01-01T00:00:00+00:00"
                                },
                                "sender": {
                                  "type": "object",
                                  "properties": {
                                    "type": {
                                      "type": "string",
                                      "description": "Sender's type",
                                      "enum": [
                                        "company",
                                        "individual",
                                        "contact",
                                        "staff"
                                      ]
                                    },
                                    "id": {
                                      "type": "integer",
                                      "description": "Sender's id"
                                    },
                                    "email": {
                                      "type": "string",
                                      "description": "Sender's email",
                                      "format": "email",
                                      "example": "contact@example-company.com"
                                    }
                                  }
                                },
                                "recipient": {
                                  "type": "object",
                                  "properties": {
                                    "type": {
                                      "type": "string",
                                      "description": "Recipient's type",
                                      "enum": [
                                        "company",
                                        "individual",
                                        "contact",
                                        "staff"
                                      ]
                                    },
                                    "id": {
                                      "type": "integer",
                                      "description": "Recipient's id"
                                    },
                                    "email": {
                                      "type": "string",
                                      "description": "Recipient's email",
                                      "format": "email",
                                      "example": "contact@example-company.com"
                                    }
                                  }
                                },
                                "deadline_id": {
                                  "type": "integer",
                                  "nullable": true,
                                  "description": "Related payment deadline id"
                                }
                              },
                              "required": [
                                "id",
                                "reminder_name",
                                "sent_at",
                                "due_at",
                                "sender",
                                "recipient",
                                "deadline_id"
                              ]
                            }
                          },
                          "upcoming": {
                            "type": "array",
                            "description": "List of the next 10 dunning notices to come on this invoice",
                            "items": {
                              "description": "Upcoming dunning object",
                              "type": "object",
                              "properties": {
                                "reminder_name": {
                                  "type": "string",
                                  "example": "Dunning D+1"
                                },
                                "due_at": {
                                  "type": "string",
                                  "description": "Dunning email estimated date of sent",
                                  "format": "date-time",
                                  "example": "1970-01-01T00:00:00+00:00"
                                },
                                "sender": {
                                  "type": "object",
                                  "properties": {
                                    "type": {
                                      "type": "string",
                                      "description": "Sender's type",
                                      "enum": [
                                        "company",
                                        "individual",
                                        "contact",
                                        "staff"
                                      ],
                                      "nullable": true
                                    },
                                    "id": {
                                      "type": "integer",
                                      "description": "Sender's id",
                                      "nullable": true
                                    },
                                    "email": {
                                      "type": "string",
                                      "description": "Sender's email",
                                      "format": "email",
                                      "example": "contact@example-company.com",
                                      "nullable": true
                                    }
                                  }
                                },
                                "recipient": {
                                  "type": "object",
                                  "nullable": true,
                                  "properties": {
                                    "type": {
                                      "type": "string",
                                      "description": "Recipient's type",
                                      "enum": [
                                        "company",
                                        "individual",
                                        "contact",
                                        "staff"
                                      ],
                                      "nullable": true
                                    },
                                    "id": {
                                      "type": "integer",
                                      "description": "Recipient's id",
                                      "nullable": true
                                    },
                                    "email": {
                                      "type": "string",
                                      "description": "Recipient's email",
                                      "format": "email",
                                      "example": "contact@example-company.com",
                                      "nullable": true
                                    }
                                  }
                                },
                                "deadline_id": {
                                  "type": "integer",
                                  "nullable": true,
                                  "description": "Related payment deadline id"
                                }
                              },
                              "required": [
                                "id",
                                "reminder_name",
                                "sent_at",
                                "due_at",
                                "sender",
                                "recipient",
                                "deadline_id"
                              ]
                            }
                          }
                        }
                      }
                    }
                  }
                ]
              }
            }
          }
        ]
      },
      "InvoiceCompute": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "readOnly": true,
            "description": "Status of the invoice",
            "example": "paid",
            "enum": [
              "draft",
              "due",
              "payinprogress",
              "paid",
              "late",
              "cancelled"
            ]
          },
          "date": {
            "type": "string",
            "format": "date",
            "description": "date of the invoice",
            "example": "2022-01-02"
          },
          "subject": {
            "nullable": true,
            "type": "string",
            "description": "Subject of the invoice"
          },
          "amounts": {
            "type": "object",
            "readOnly": true,
            "description": "Amounts of invoice, with and without taxes",
            "properties": {
              "total_raw_excl_tax": {
                "type": "string",
                "description": "Total amount without taxes and discounts. Does not include transport and packaging costs.",
                "example": "60"
              },
              "total_after_discount_excl_tax": {
                "type": "string",
                "description": "Total discounted without tax. Does not include transport and packaging costs",
                "example": "50"
              },
              "total_packaging": {
                "type": "string",
                "description": "Total amount of packaging costs.",
                "example": "15.96"
              },
              "total_shipping": {
                "type": "string",
                "description": "Total amount of shipping costs.",
                "example": "13.90"
              },
              "total_excl_tax": {
                "type": "string",
                "description": "Total net without tax. Including transport and packaging costs. Discount is applied if any.",
                "example": "79.86"
              },
              "total_incl_tax": {
                "type": "string",
                "description": "Total with tax",
                "example": "95.83"
              }
            }
          },
          "currency": {
            "type": "string",
            "description": "Currency code of the invoice",
            "example": "EUR"
          },
          "taxes": {
            "description": "List of taxes used on the invoice",
            "type": "array",
            "readOnly": true,
            "items": {
              "type": "object",
              "description": "Tax used",
              "properties": {
                "label": {
                  "type": "string"
                },
                "id": {
                  "type": "integer"
                },
                "rate": {
                  "type": "string"
                },
                "amount": {
                  "type": "string"
                }
              },
              "required": [
                "label",
                "id",
                "rate",
                "amount"
              ]
            }
          },
          "discount": {
            "readOnly": true,
            "description": "Global discount applied on the invoice",
            "nullable": true,
            "type": "object",
            "properties": {
              "percent": {
                "type": "string",
                "description": "Percentage of the discount",
                "example": "12.00"
              },
              "amount": {
                "type": "string",
                "description": "Amount of the discount",
                "example": "111.97"
              },
              "type": {
                "type": "string",
                "description": "Type of the global discount as defined on the document",
                "enum": [
                  "amount",
                  "percent"
                ]
              }
            }
          },
          "related": {
            "description": "Objects linked to the invoice : \n  - There can be only one company or one individual at a time (required)\n  - For Company & Individual, only `client`, `prospect` type are allowed\n  - Contact is the contact of company linked to the invoice. There may be no or one contact.\n  - Opportunity is the opportunity linked to the invoice. There may be zero or more opportunities linked to invoice\n",
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "description": "ID of related",
                  "example": 234
                },
                "type": {
                  "type": "string",
                  "description": "Type of related",
                  "example": "company",
                  "enum": [
                    "company",
                    "individual",
                    "contact",
                    "opportunity"
                  ]
                }
              }
            }
          },
          "owner": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StaffAutocompleteResultItem/properties/owner/allOf/0"
              },
              {
                "type": "object",
                "description": "Invoice's owner",
                "readOnly": true
              }
            ]
          },
          "rows": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/EstimateCompute/properties/rows/items"
            }
          }
        }
      },
      "InvoiceFilters": {
        "title": "Invoices filters",
        "type": "object",
        "description": "Invoices filters",
        "properties": {
          "filters": {
            "type": "object",
            "description": "Invoices filters",
            "properties": {
              "status": {
                "title": "Status",
                "description": "Filter the invoice list by status",
                "example": "due",
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "draft",
                    "due",
                    "payinprogress",
                    "paid",
                    "late",
                    "cancelled"
                  ]
                }
              },
              "related_objects": {
                "title": "Related Objects",
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": [
                        "company",
                        "individual",
                        "opportunity"
                      ],
                      "example": "company"
                    },
                    "id": {
                      "type": "integer",
                      "example": 22
                    }
                  }
                }
              }
            }
          }
        },
        "required": [
          "filters"
        ]
      },
      "InvoiceCreate": {
        "allOf": [
          {
            "allOf": [
              {
                "$ref": "#/components/schemas/InvoiceOne/allOf/0"
              },
              {
                "type": "object",
                "properties": {
                  "rows": {
                    "type": "array",
                    "nullable": true,
                    "maxItems": 100,
                    "items": {
                      "$ref": "#/components/schemas/EstimateCreate/allOf/1/properties/rows/items"
                    }
                  },
                  "_embed": {
                    "$ref": "#/components/schemas/InvoiceOne/allOf/1/properties/_embed",
                    "readOnly": true
                  }
                }
              }
            ]
          },
          {
            "type": "object",
            "properties": {
              "discount": {
                "type": "object",
                "description": "Global discount applied on the invoice",
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "percent",
                      "amount"
                    ],
                    "example": "amount"
                  },
                  "value": {
                    "type": "string",
                    "description": "value of discount",
                    "example": "25.20"
                  }
                }
              },
              "owner_id": {
                "type": "integer",
                "description": "Invoice's owner (staff id)"
              }
            },
            "required": [
              "related"
            ]
          }
        ]
      },
      "InvoiceUpdate": {
        "allOf": [
          {
            "$ref": "#/components/schemas/InvoiceOne/allOf/0"
          },
          {
            "type": "object",
            "properties": {
              "rows": {
                "type": "array",
                "nullable": true,
                "maxItems": 100,
                "items": {
                  "$ref": "#/components/schemas/EstimateUpdate/allOf/1/properties/rows/items"
                }
              },
              "discount": {
                "type": "object",
                "description": "Global discount applied on the invoice",
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "percent",
                      "amount"
                    ],
                    "example": "amount"
                  },
                  "value": {
                    "type": "string",
                    "description": "value of discount",
                    "example": "25.20"
                  }
                }
              },
              "owner_id": {
                "type": "integer",
                "description": "Invoice's owner (staff id)"
              }
            }
          }
        ]
      },
      "ValidateInvoice": {
        "type": "object",
        "properties": {
          "date": {
            "type": "string",
            "format": "date",
            "description": "Date of document. Depending on your conformity settings, the date may not be greater than the current date."
          }
        }
      },
      "CreditNote": {
        "title": "Credit Note",
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true,
            "description": "Credit Note ID",
            "example": 3875
          },
          "number": {
            "type": "string",
            "description": "Credit Note number",
            "example": "CRED-2022-01-02-002"
          },
          "status": {
            "type": "string",
            "description": "Status of the credit note",
            "example": "spent",
            "enum": [
              "draft",
              "stored",
              "partialspend",
              "spent",
              "cancelled"
            ]
          },
          "date": {
            "type": "string",
            "format": "date",
            "description": "date of the credit note",
            "example": "2022-01-02"
          },
          "amounts": {
            "type": "object",
            "description": "Amounts of credit note, with and without taxes",
            "properties": {
              "total_raw_excl_tax": {
                "type": "string",
                "description": "Total amount without taxes and discounts. Does not include transport and packaging costs.",
                "example": "60"
              },
              "total_after_discount_excl_tax": {
                "type": "string",
                "description": "Total discounted without tax. Does not include transport and packaging costs",
                "example": "50"
              },
              "total_packaging": {
                "type": "string",
                "description": "Total amount of packaging costs.",
                "example": "15.96"
              },
              "total_shipping": {
                "type": "string",
                "description": "Total amount of shipping costs.",
                "example": "13.90"
              },
              "total_excl_tax": {
                "type": "string",
                "description": "Total net without tax. Including transport and packaging costs. Discount is applied if any.",
                "example": "79.86"
              },
              "total_incl_tax": {
                "type": "string",
                "description": "Total with tax",
                "example": "95.83"
              },
              "total_remaining_due_incl_tax": {
                "type": "string",
                "description": "Remaining amount to be paid",
                "example": "50.00"
              }
            }
          },
          "currency": {
            "type": "string",
            "description": "Currency code of the credit note",
            "example": "EUR"
          },
          "taxes": {
            "description": "List of taxes used on the credit note",
            "type": "array",
            "items": {
              "type": "object",
              "description": "Tax used",
              "properties": {
                "label": {
                  "type": "string"
                },
                "id": {
                  "type": "integer"
                },
                "rate": {
                  "type": "string"
                },
                "amount": {
                  "type": "string"
                }
              },
              "required": [
                "label",
                "id",
                "rate",
                "amount"
              ]
            }
          },
          "discount": {
            "description": "Global discount applied on the credit note",
            "nullable": true,
            "type": "object",
            "properties": {
              "percent": {
                "type": "string",
                "description": "Percentage of the discount",
                "example": "12.00"
              },
              "amount": {
                "type": "string",
                "description": "Amount of the discount",
                "example": "111.97"
              },
              "type": {
                "type": "string",
                "description": "Type of the global discount as defined on the document",
                "enum": [
                  "amount",
                  "percent"
                ]
              }
            }
          },
          "related": {
            "description": "Objects linked to the credit note : \n  - There can be only one company or one individual at a time\n  - Contact is the contact of company linked to the credit note. There may be no or one contact.\n",
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "description": "ID of related",
                  "example": 234
                },
                "type": {
                  "type": "string",
                  "description": "Type of related",
                  "example": "company",
                  "enum": [
                    "company",
                    "individual",
                    "contact",
                    "opportunity"
                  ]
                }
              }
            }
          },
          "public_link": {
            "description": "Public link of the credit note",
            "type": "object",
            "properties": {
              "enabled": {
                "type": "boolean",
                "description": "Public link is enabled"
              },
              "url": {
                "type": "string",
                "description": "Url to public link"
              }
            }
          },
          "owner": {
            "$ref": "#/components/schemas/StaffAutocompleteResultItem/properties/owner/allOf/0"
          },
          "fiscal_year_id": {
            "type": "integer",
            "nullable": true,
            "description": "ID of the credit note's fiscal year"
          },
          "pdf_link": {
            "type": "string",
            "format": "uri",
            "readOnly": true,
            "description": "Link to the pdf of document. /!\\ Link is regenerate after an update of document",
            "nullable": true
          },
          "_embed": {
            "title": "Credit Note Embed",
            "allOf": [
              {
                "$ref": "#/components/schemas/Invoice/properties/_embed/allOf/0/allOf/0"
              },
              {
                "$ref": "#/components/schemas/SaleEmbed/properties/_embed/allOf/1"
              },
              {
                "type": "object",
                "properties": {
                  "fiscal_year": {
                    "$ref": "#/components/schemas/SaleEmbed/properties/_embed/allOf/0/properties/fiscal_year"
                  },
                  "currency": {
                    "$ref": "#/components/schemas/Invoice/properties/_embed/allOf/0/allOf/2/properties/currency"
                  },
                  "owner": {
                    "$ref": "#/components/schemas/Activity/properties/_embed/properties/author"
                  },
                  "acl": {
                    "title": "Credit Note ACL",
                    "type": "object",
                    "description": "",
                    "x-examples": {},
                    "properties": {
                      "can_be_updated": {
                        "type": "boolean",
                        "nullable": true,
                        "description": "Credit note can be updated",
                        "example": true
                      },
                      "can_be_deleted": {
                        "type": "boolean",
                        "nullable": true,
                        "description": "Credit note can be deleted",
                        "example": true
                      },
                      "can_be_validated": {
                        "type": "boolean",
                        "nullable": true,
                        "description": "Credit note can be validated",
                        "example": true
                      }
                    }
                  },
                  "smart_tags": {
                    "nullable": true,
                    "description": "Smart-tags linked",
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/SaleEmbed/properties/_embed/allOf/0/properties/smart_tags/allOf/0"
                      }
                    ]
                  }
                }
              }
            ]
          }
        }
      },
      "CreditNoteOne": {
        "allOf": [
          {
            "title": "Credit Note",
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "readOnly": true,
                "description": "Credit Note ID",
                "example": 3875
              },
              "number": {
                "type": "string",
                "description": "Credit Note number",
                "example": "CRED-2022-01-02-002"
              },
              "status": {
                "type": "string",
                "description": "Status of the credit note",
                "example": "spent",
                "enum": [
                  "draft",
                  "stored",
                  "partialspend",
                  "spent",
                  "cancelled"
                ]
              },
              "date": {
                "type": "string",
                "format": "date",
                "description": "date of the credit note",
                "example": "2022-01-02"
              },
              "amounts": {
                "type": "object",
                "description": "Amounts of credit note, with and without taxes",
                "properties": {
                  "total_raw_excl_tax": {
                    "type": "string",
                    "description": "Total amount without taxes and discounts. Does not include transport and packaging costs.",
                    "example": "60"
                  },
                  "total_after_discount_excl_tax": {
                    "type": "string",
                    "description": "Total discounted without tax. Does not include transport and packaging costs",
                    "example": "50"
                  },
                  "total_packaging": {
                    "type": "string",
                    "description": "Total amount of packaging costs.",
                    "example": "15.96"
                  },
                  "total_shipping": {
                    "type": "string",
                    "description": "Total amount of shipping costs.",
                    "example": "13.90"
                  },
                  "total_excl_tax": {
                    "type": "string",
                    "description": "Total net without tax. Including transport and packaging costs. Discount is applied if any.",
                    "example": "79.86"
                  },
                  "total_incl_tax": {
                    "type": "string",
                    "description": "Total with tax",
                    "example": "95.83"
                  },
                  "total_remaining_due_incl_tax": {
                    "type": "string",
                    "description": "Remaining amount to be paid",
                    "example": "50.00"
                  }
                }
              },
              "currency": {
                "type": "string",
                "description": "Currency code of the credit note",
                "example": "EUR"
              },
              "taxes": {
                "description": "List of taxes used on the credit note",
                "type": "array",
                "items": {
                  "type": "object",
                  "description": "Tax used",
                  "properties": {
                    "label": {
                      "type": "string"
                    },
                    "id": {
                      "type": "integer"
                    },
                    "rate": {
                      "type": "string"
                    },
                    "amount": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "label",
                    "id",
                    "rate",
                    "amount"
                  ]
                }
              },
              "discount": {
                "description": "Global discount applied on the credit note",
                "nullable": true,
                "type": "object",
                "properties": {
                  "percent": {
                    "type": "string",
                    "description": "Percentage of the discount",
                    "example": "12.00"
                  },
                  "amount": {
                    "type": "string",
                    "description": "Amount of the discount",
                    "example": "111.97"
                  },
                  "type": {
                    "type": "string",
                    "description": "Type of the global discount as defined on the document",
                    "enum": [
                      "amount",
                      "percent"
                    ]
                  }
                }
              },
              "related": {
                "description": "Objects linked to the credit note : \n  - There can be only one company or one individual at a time\n  - Contact is the contact of company linked to the credit note. There may be no or one contact.\n",
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "description": "ID of related",
                      "example": 234
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of related",
                      "example": "company",
                      "enum": [
                        "company",
                        "individual",
                        "contact",
                        "opportunity"
                      ]
                    }
                  }
                }
              },
              "public_link": {
                "description": "Public link of the credit note",
                "type": "object",
                "properties": {
                  "enabled": {
                    "type": "boolean",
                    "description": "Public link is enabled"
                  },
                  "url": {
                    "type": "string",
                    "description": "Url to public link"
                  }
                }
              },
              "owner": {
                "description": "Credit note's owner",
                "$ref": "#/components/schemas/StaffAutocompleteResultItem/properties/owner/allOf/0"
              },
              "fiscal_year_id": {
                "type": "integer",
                "nullable": true,
                "description": "ID of the credit note's fiscal year"
              },
              "pdf_link": {
                "type": "string",
                "format": "uri",
                "readOnly": true,
                "description": "Link to the pdf of document. /!\\ Link is regenerate after an update of document",
                "nullable": true
              },
              "_embed": {
                "$ref": "#/components/schemas/CreditNote/properties/_embed"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "rows": {
                "type": "array",
                "nullable": true,
                "maxItems": 100,
                "items": {
                  "$ref": "#/components/schemas/EstimateCreate/allOf/1/properties/rows/items"
                }
              },
              "_embed": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CreditNote/properties/_embed"
                  }
                ]
              }
            }
          }
        ]
      },
      "CreditNoteFilters": {
        "title": "Credit notes filters",
        "type": "object",
        "description": "Filters on credit notes",
        "properties": {
          "filters": {
            "type": "object",
            "description": "Filters on credit notes",
            "properties": {
              "status": {
                "title": "Status",
                "description": "Filter credit notes list by status",
                "example": "stored",
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": [
                    "draft",
                    "stored",
                    "partialspend",
                    "spent",
                    "cancelled"
                  ]
                }
              },
              "related_objects": {
                "title": "Related Objects",
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": [
                        "company",
                        "individual",
                        "opportunity"
                      ],
                      "example": "company"
                    },
                    "id": {
                      "type": "integer",
                      "example": 22
                    }
                  }
                }
              }
            }
          }
        },
        "required": [
          "filters"
        ]
      },
      "EmailSettings": {
        "title": "Email Settings",
        "type": "object",
        "properties": {
          "signature": {
            "title": "Email Signature",
            "description": "The email signature object",
            "type": "object",
            "properties": {
              "mode": {
                "description": "Email signature mode",
                "type": "string",
                "enum": [
                  "auto",
                  "manual"
                ]
              },
              "html_content": {
                "nullable": true,
                "description": "HTML manual signature content",
                "type": "string",
                "minLength": 0,
                "maxLength": 65535
              }
            },
            "required": [
              "mode",
              "html_content"
            ]
          }
        }
      },
      "EmailSettingsInput": {
        "title": "Email Settings",
        "type": "object",
        "properties": {
          "signature": {
            "oneOf": [
              {
                "type": "object",
                "title": "Signature in auto mode",
                "properties": {
                  "mode": {
                    "description": "Email signature mode",
                    "type": "string",
                    "enum": [
                      "auto"
                    ]
                  }
                },
                "required": [
                  "mode"
                ]
              },
              {
                "type": "object",
                "title": "Signature in manual mode",
                "properties": {
                  "mode": {
                    "description": "Email signature mode",
                    "type": "string",
                    "enum": [
                      "manual"
                    ]
                  },
                  "html_content": {
                    "nullable": true,
                    "description": "HTML manual signature content (required when mode is manual)",
                    "type": "string",
                    "minLength": 0,
                    "maxLength": 65535
                  }
                },
                "required": [
                  "mode",
                  "html_content"
                ]
              }
            ]
          }
        },
        "required": [
          "signature"
        ]
      },
      "EmailSignatureAvailableTags": {
        "title": "List of email tags",
        "description": "List of availables email tags to insert in email signature content",
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "key": {
              "type": "string",
              "description": "Tag identifier to insert in your email signature",
              "example": "%{account.name}%"
            },
            "description": {
              "type": "string",
              "description": "Tag's meaning",
              "example": "Current account's name"
            }
          }
        }
      },
      "FiscalYear": {
        "type": "object",
        "title": "Fiscal year",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Id of the fiscal year"
          },
          "name": {
            "type": "string",
            "description": "Name of the fiscal year. Naming follow the current scheme:  N for the current fiscal year, N-1 for the last fiscal year, N-2, ..."
          },
          "start_at": {
            "type": "string",
            "format": "date",
            "description": "Start date of the fiscal year"
          },
          "end_at": {
            "type": "string",
            "format": "date",
            "description": "End date of the fiscal year"
          }
        }
      }
    },
    "parameters": {
      "commentOrder": {
        "in": "query",
        "name": "order",
        "description": "The order field",
        "schema": {
          "type": "string",
          "example": "id",
          "enum": [
            "id",
            "updated",
            "created"
          ]
        }
      },
      "commentItemEmbed": {
        "in": "query",
        "name": "embed",
        "description": "Additional object included in the result.<br /><br /> Each embed object may require different oauth2 scopes than the main endpoint:<br /> - company: `companies.read`<br /> - individual: `individuals.read`<br /> - owner: `staffs.read`<br /> - contact: `contacts.read`<br /> - related: by object type. Check the entire documentation to verify the usual scopes requested for the types returned\n",
        "schema": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "owner",
              "related",
              "company",
              "individual",
              "contact",
              "acl"
            ]
          }
        }
      },
      "contactEmbed": {
        "in": "query",
        "name": "embed",
        "description": "Example : `embed[]=delivery_address&embed[]=cf.1542&embed[]=acl` <br /> Additional object included in the result.<br /><br /> Each embed object may require different oauth2 scopes than the main endpoint:<br /> - opportunities: `opportunities.read`<br /> - estimates,invoices,orders,deliveries: `invoicing.read`<br /> - cf.{custom_field_id} : `custom-fields.read` <br /> - smart_tags: `smart-tags.read`<br /> Additionnally, the smart_tags embed is limited to the 20 first results sorted in alphabetical order. <br />\n",
        "schema": {
          "type": "array",
          "items": {
            "oneOf": [
              {
                "type": "string",
                "title": "standards",
                "description": "The standards embeds",
                "enum": [
                  "invoicing_address",
                  "delivery_address",
                  "opportunities",
                  "estimates",
                  "invoices",
                  "orders",
                  "deliveries",
                  "acl",
                  "smart_tags"
                ]
              },
              {
                "type": "string",
                "title": "custom-fields",
                "description": "Each custom field value could be requested as an embed object by specifiying it identifier in the query, prefixed by \"cf.\" string. _(example: `embed[]=cf.123` for the value of the custom field of identifier `123`)<br/>`custom-fields.read` oauth2 scope is required_",
                "pattern": "^cf.[\\d]+$"
              }
            ]
          }
        }
      },
      "crmActivityOrder": {
        "in": "query",
        "name": "order",
        "description": "The order field",
        "schema": {
          "type": "string",
          "example": "date",
          "enum": [
            "date",
            "due_date",
            "event",
            "author",
            "more.label"
          ]
        }
      },
      "accountDocumentOrder": {
        "in": "query",
        "name": "order",
        "description": "The order field",
        "schema": {
          "type": "string",
          "example": "date",
          "enum": [
            "date"
          ]
        }
      },
      "crmActivityEmbed": {
        "in": "query",
        "name": "embed",
        "description": "Additional object included in the result. <br/> <strong>Aggregations by date only works with due_date filter : </strong> <br/> - For aggregations.by_day_and_event, maximum interval of due_date is 90 days <br/> - For aggregations.by_month_and_event, maximum interval of due_date is 365 days",
        "schema": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "aggregations",
              "aggregations.by_event",
              "aggregations.by_month_and_event",
              "aggregations.by_day_and_event",
              "aggregations.by_week_and_event",
              "aggregations.by_author_and_event",
              "aggregations.by_author_and_label"
            ]
          }
        }
      },
      "opportunityEmbed": {
        "in": "query",
        "name": "embed",
        "description": "Example : `embed[]=assigned_staffs&embed[]=cf.1542&embed[]=acl` <br /> Additional object included in the result.<br /><br /> Each embed object may require different oauth2 scopes than the main endpoint:<br /> - company: `companies.read`<br /> - individual: `individuals.read`<br /> - assigned_staffs: `staffs.read`<br /> - contacts: `contacts.read`<br /> - estimates, invoices, orders, deliveries, proformas, creditnotes: `invoicing.read`<br /> - cf.{custom_field_id} : `custom-fields.read` <br /> - smart_tags: `smart-tags.read`<br /> Additionnally, the smart_tags embed is limited to the 20 first results sorted in alphabetical order. <br />\n",
        "schema": {
          "type": "array",
          "items": {
            "oneOf": [
              {
                "type": "string",
                "title": "standards",
                "description": "The standards embeds",
                "enum": [
                  "estimates",
                  "individual",
                  "invoices",
                  "orders",
                  "deliveries",
                  "proformas",
                  "creditnotes",
                  "assigned_staffs",
                  "company",
                  "contacts",
                  "acl",
                  "currency",
                  "smart_tags"
                ]
              },
              {
                "$ref": "#/components/parameters/contactEmbed/schema/items/oneOf/1"
              }
            ]
          }
        }
      },
      "opportunityEmbedWithAggregations": {
        "in": "query",
        "name": "embed",
        "description": "Additional object included in the result.<br /><br /> Each embed object may require different oauth2 scopes than the main endpoint:<br /> - company: `companies.read`<br /> - individual: `individuals.read`<br /> - assigned_staffs: `staffs.read`<br /> - contacts: `contacts.read`<br /> - estimates, invoices, orders, deliveries, proformas, creditnotes: `invoicing.read`<br /> - cf.{custom_field_id} : `custom-fields.read` <br /> - smart_tags: `smart-tags.read`<br /> Additionnally, the smart_tags embed is limited to the 20 first results sorted in alphabetical order. <br />\n",
        "schema": {
          "type": "array",
          "items": {
            "oneOf": [
              {
                "type": "string",
                "title": "standards",
                "description": "The standards embeds",
                "enum": [
                  "estimates",
                  "individual",
                  "invoices",
                  "orders",
                  "deliveries",
                  "proformas",
                  "creditnotes",
                  "assigned_staffs",
                  "company",
                  "contacts",
                  "acl",
                  "currency",
                  "aggregations",
                  "aggregations.amount_sum",
                  "aggregations.amount_sum_by_status",
                  "aggregations.amount_sum_by_status_due_at_seven",
                  "aggregations.number_by_pipeline_and_step",
                  "smart_tags"
                ]
              },
              {
                "$ref": "#/components/parameters/contactEmbed/schema/items/oneOf/1"
              }
            ]
          }
        }
      },
      "opportunityOrder": {
        "in": "query",
        "name": "order",
        "description": "The order field",
        "schema": {
          "type": "string",
          "example": "id",
          "enum": [
            "id",
            "created",
            "step_rank",
            "due_date"
          ]
        }
      },
      "staffEmbed": {
        "in": "query",
        "name": "embed",
        "description": "Additional object included in the result.<br /><br /> If current user visibility on staffs is restricted, embed will not be available.<br /><br /> Each embed object may require different oauth2 scopes than the main endpoint:<br /> - licenses: `accounts.read`\n",
        "schema": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "preferences",
              "acl",
              "licenses",
              "preferences_calendar"
            ]
          }
        }
      },
      "staffItemEmbed": {
        "in": "query",
        "name": "embed",
        "description": "Additional object included in the result.<br /><br /> If current user visibility on staffs is restricted, embed will not be available.<br /><br /> Each embed object may require different oauth2 scopes than the main endpoint:<br /> - licenses: `accounts.read`<br /> - profile: `staffs.read`<br /> - account: `staffs.read`<br /> - user: `staffs.read`<br /> - subscriptions: `accounts.read`\n",
        "schema": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "preferences",
              "acl",
              "licenses",
              "preferences_calendar",
              "intercom_hash",
              "profile",
              "account",
              "user",
              "subscriptions"
            ]
          }
        }
      },
      "opportunitySourceOrder": {
        "in": "query",
        "name": "order",
        "description": "The order field",
        "schema": {
          "type": "string",
          "example": "id",
          "enum": [
            "id",
            "rank"
          ],
          "default": "rank"
        }
      },
      "opportunityPipelineOrder": {
        "in": "query",
        "name": "order",
        "description": "The order field",
        "schema": {
          "type": "string",
          "example": "id",
          "enum": [
            "id",
            "rank"
          ],
          "default": "rank"
        }
      },
      "pipelineStepOrder": {
        "in": "query",
        "name": "order",
        "description": "The order field",
        "schema": {
          "type": "string",
          "example": "id",
          "enum": [
            "id",
            "rank",
            "probability"
          ],
          "default": "rank"
        }
      },
      "pipelineStepEmbed": {
        "in": "query",
        "name": "embed",
        "description": "Additional object included in the result.<br /><br /> Each embed object may require different oauth2 scopes than the main endpoint:<br /> - opportunities_number: `opportunities.read`\n",
        "schema": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "opportunities_number"
            ]
          }
        }
      },
      "fields": {
        "in": "query",
        "name": "field",
        "description": "Filters the fields returned in the response <br /><br /> Example:<br /> - `field[]=id`: Return the `id` field<br /> - `field[]=address.id`: Return the `id` field of the `address` object<br /> - `field[]=addresses[].id`: Return the `id` field of the `address` objects<br />\n",
        "schema": {
          "type": "array",
          "items": {
            "type": "string",
            "pattern": "^[A-Za-z0-9\\.\\[\\]_-]+$"
          }
        }
      },
      "SaleEmbed": {
        "in": "query",
        "name": "embed",
        "description": "Example : `embed[]=payment_method_ids&embed[]=cf.1542&embed[]=acl` <br /> Additional object included in the result.<br /><br /> Each embed object may require different oauth2 scopes than the main endpoint:<br /> - payment_method_ids: `payments.read`<br /> - company: `companies.read`<br /> - individual: `individuals.read`<br /> - owner: `staffs.read`<br /> - contact: `contacts.read`<br /> - cf.{custom_field_id} : `custom-fields.read` <br /> - smart_tags: `smart-tags.read`<br /> Additionnally, the smart_tags embed is limited to the 20 first results sorted in alphabetical order. <br /> - related: by object type. Check the entire documentation to verify the usual scopes requested for the types returned <br/><br /> <strong>Aggregations on amounts only works in addition with the currency filter</strong>\n",
        "schema": {
          "type": "array",
          "items": {
            "oneOf": [
              {
                "type": "string",
                "title": "standards",
                "description": "The standards embeds",
                "enum": [
                  "company",
                  "individual",
                  "contact",
                  "invoicing_address",
                  "delivery_address",
                  "currency",
                  "acl",
                  "payment_method_ids",
                  "aggregations",
                  "aggregations.amount_sum_by_status",
                  "fiscal_year",
                  "smart_tags"
                ]
              },
              {
                "$ref": "#/components/parameters/contactEmbed/schema/items/oneOf/1"
              }
            ]
          }
        }
      },
      "SaleOrder": {
        "in": "query",
        "name": "order",
        "description": "The order field\n> Value `numero` is deprecated and will be deleted on the July 1st 2022. Use `number` instead.",
        "schema": {
          "type": "string",
          "example": "id",
          "enum": [
            "id",
            "numero",
            "created",
            "date",
            "expiry_date",
            "number"
          ]
        }
      },
      "taskEmbed": {
        "in": "query",
        "name": "embed",
        "description": "Additional object included in the result.<br /><br /> Each embed object may require different oauth2 scopes than the main endpoint:<br /> - company: `companies.read`<br /> - individual: `individuals.read`<br /> - owner, assigned_staffs: `staffs.read`<br /> - contact: `contacts.read`<br /> - related: by object type. Check the entire documentation to verify the usual scopes requested for the types returned\n",
        "schema": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "owner",
              "assigned_staffs",
              "related",
              "company",
              "individual",
              "contact",
              "acl"
            ]
          }
        }
      },
      "taskOrder": {
        "in": "query",
        "name": "order",
        "description": "The order field",
        "schema": {
          "type": "string",
          "example": "id",
          "enum": [
            "id",
            "due_date"
          ]
        }
      },
      "labelOrder": {
        "in": "query",
        "name": "order",
        "description": "The order field",
        "schema": {
          "type": "string",
          "example": "rank",
          "enum": [
            "rank",
            "id"
          ]
        }
      },
      "autocomplete": {
        "in": "query",
        "name": "q",
        "description": "The search field",
        "schema": {
          "type": "string",
          "example": "John"
        },
        "required": true
      },
      "searchType": {
        "in": "query",
        "name": "type",
        "explode": true,
        "description": "Filter search by object type or subtype.\n- `ex with types: type[]=contact&type[]=company`\n- `ex with subtypes: type[]=company.client&type[]=item.product`\n- `ex with both: type[]=company&type[]=item.product`\n",
        "schema": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "company",
              "company.client",
              "company.prospect",
              "company.supplier",
              "individual",
              "individual.client",
              "individual.prospect",
              "individual.supplier",
              "contact",
              "opportunity",
              "purchase",
              "purchase.purInvoice",
              "purchase.purDelivery",
              "purchase.purOrder",
              "purchase.purCreditNote",
              "item",
              "item.product",
              "item.packaging",
              "item.shipping",
              "item.service",
              "declination",
              "declination.product",
              "declination.declination",
              "document",
              "document.estimate",
              "document.invoice",
              "document.delivery",
              "document.order",
              "document.proforma",
              "document.creditnote",
              "staff"
            ]
          }
        }
      },
      "activityOrder": {
        "in": "query",
        "name": "order",
        "description": "The order field",
        "schema": {
          "type": "string",
          "example": "due_date",
          "enum": [
            "due_date"
          ]
        }
      },
      "activityEmbed": {
        "in": "query",
        "name": "embed",
        "description": "Additional object included in the result.<br /><br /> Each embed object may require different oauth2 scopes than the main endpoint:<br /> - company: `companies.read`<br /> - individual: `individuals.read`<br /> - author: `staffs.read`<br /> - object_related: by object type. Check the entire documentation to verify the usual scopes requested for the types returned\n",
        "schema": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "object_related",
              "author",
              "individual",
              "company",
              "acl"
            ]
          }
        }
      },
      "phoneCallEmbed": {
        "in": "query",
        "name": "embed",
        "description": "Additional object included in the result.<br /><br /> Each embed object may require different oauth2 scopes than the main endpoint:<br /> - company: `companies.read`<br /> - individual: `individuals.read`<br /> - owner: `staffs.read`<br /> - contact: `contacts.read`<br /> - related: by object type. Check the entire documentation to verify the usual scopes requested for the types returned\n",
        "schema": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "company",
              "individual",
              "contact",
              "related",
              "owner",
              "acl"
            ]
          }
        }
      },
      "reportEmbed": {
        "in": "query",
        "name": "embed",
        "description": "Additional object included in the result.",
        "schema": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "aggregations",
              "aggregations.cumulio"
            ]
          }
        }
      },
      "contactOrders": {
        "in": "query",
        "name": "order",
        "description": "The order field",
        "schema": {
          "type": "string",
          "example": "id",
          "enum": [
            "id",
            "name",
            "created_at"
          ]
        }
      },
      "direction": {
        "in": "query",
        "name": "direction",
        "description": "The order direction",
        "schema": {
          "type": "string",
          "enum": [
            "asc",
            "desc"
          ],
          "default": "asc"
        }
      },
      "order": {
        "in": "query",
        "name": "order",
        "description": "The order field",
        "schema": {
          "type": "string",
          "example": "id"
        }
      },
      "limit": {
        "in": "query",
        "name": "limit",
        "description": "The pagination limit",
        "schema": {
          "type": "integer",
          "description": "Pagination limit",
          "default": 25,
          "maximum": 100,
          "minimum": 0
        }
      },
      "offset": {
        "in": "query",
        "name": "offset",
        "description": "The pagination offset",
        "schema": {
          "oneOf": [
            {
              "type": "integer",
              "minimum": 0,
              "example": 25
            },
            {
              "type": "string",
              "example": "WzIwMTQtMDEtMDEsNTk4XQ=="
            }
          ]
        }
      },
      "language": {
        "in": "query",
        "name": "language",
        "description": "translation of the country name",
        "schema": {
          "type": "string",
          "enum": [
            "fr",
            "en"
          ],
          "default": "fr",
          "description": "language code"
        }
      },
      "customActivityOrder": {
        "in": "query",
        "name": "order",
        "description": "The order field",
        "schema": {
          "type": "string",
          "example": "date",
          "enum": [
            "date"
          ]
        }
      },
      "ocrOrder": {
        "in": "query",
        "name": "order",
        "description": "The order field",
        "schema": {
          "type": "string",
          "example": "completed_at",
          "enum": [
            "created_at",
            "completed_at"
          ]
        }
      },
      "paymentMethodOrder": {
        "in": "query",
        "name": "order",
        "description": "The order field",
        "schema": {
          "type": "string",
          "example": "rank",
          "enum": [
            "id",
            "rank"
          ]
        }
      },
      "accountingOrder": {
        "in": "query",
        "name": "order",
        "description": "The order field",
        "schema": {
          "type": "string",
          "example": "code",
          "enum": [
            "code"
          ]
        }
      },
      "calendarEventEmbed": {
        "in": "query",
        "name": "embed",
        "description": "Additional object included in the result.<br /><br /> Each embed object may require different oauth2 scopes than the main endpoint:<br /> - company: `companies.read`<br /> - individual: `individuals.read`<br /> - owner: `staffs.read`<br /> - contact: `contacts.read`<br /> - related, participants: by object type. Check the entire documentation to verify the usual scopes requested for the types returned\n",
        "schema": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "company",
              "contact",
              "individual",
              "owner",
              "related",
              "participants",
              "acl"
            ]
          }
        }
      },
      "calendarEventOrder": {
        "in": "query",
        "name": "order",
        "description": "The order field",
        "schema": {
          "type": "string",
          "example": "id",
          "enum": [
            "id",
            "due_date"
          ]
        }
      },
      "profileOrder": {
        "in": "query",
        "name": "order",
        "description": "The order field",
        "schema": {
          "type": "string",
          "example": "id",
          "enum": [
            "name",
            "id"
          ]
        }
      },
      "verify": {
        "in": "query",
        "name": "verify",
        "description": "Switch the method called for get the validator only",
        "schema": {
          "type": "boolean"
        },
        "allowEmptyValue": true
      },
      "accountingEmbed": {
        "in": "query",
        "name": "embed",
        "description": "Additional object included in the result. <br/> <strong>Aggregations by date only works with due_date filter : </strong> <br/> - For aggregations.by_day_and_event, maximum interval of due_date is 90 days <br/> - For aggregations.by_month_and_event, maximum interval of due_date is 365 days",
        "schema": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "aggregations",
              "aggregations.credit_debit"
            ]
          }
        }
      },
      "opportuntiyCategoryEmbed": {
        "in": "query",
        "name": "embed",
        "description": "Additional object included in the result",
        "schema": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "sources"
            ]
          }
        }
      },
      "corporationStaffEmbed": {
        "in": "query",
        "name": "embed",
        "description": "Additional object included in the result",
        "schema": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "predicted_licenses",
              "aggregations.count_licenses"
            ]
          }
        }
      },
      "invoiceEmbed": {
        "in": "query",
        "name": "embed",
        "description": "Additional object included in the result",
        "schema": {
          "type": "array",
          "items": {
            "oneOf": [
              {
                "type": "string",
                "enum": [
                  "acl",
                  "owner",
                  "related",
                  "contact",
                  "individual",
                  "company",
                  "fiscal_year",
                  "currency",
                  "smart_tags"
                ]
              },
              {
                "$ref": "#/components/parameters/contactEmbed/schema/items/oneOf/1"
              }
            ]
          }
        }
      },
      "invoiceOneEmbed": {
        "in": "query",
        "name": "embed",
        "description": "Additional object included in the result",
        "schema": {
          "type": "array",
          "items": {
            "oneOf": [
              {
                "type": "string",
                "title": "standards",
                "description": "The standards embeds",
                "enum": [
                  "acl",
                  "payment_terms",
                  "owner",
                  "related",
                  "contact",
                  "individual",
                  "company",
                  "fiscal_year",
                  "currency",
                  "automatic_dunning",
                  "smart_tags"
                ]
              },
              {
                "$ref": "#/components/parameters/contactEmbed/schema/items/oneOf/1"
              }
            ]
          }
        }
      },
      "invoiceOrder": {
        "in": "query",
        "name": "order",
        "description": "Order field",
        "schema": {
          "type": "string",
          "example": "id",
          "enum": [
            "id",
            "number",
            "created",
            "date"
          ]
        }
      },
      "creditNoteEmbed": {
        "in": "query",
        "name": "embed",
        "description": "Additional object included in the result",
        "schema": {
          "type": "array",
          "items": {
            "oneOf": [
              {
                "type": "string",
                "enum": [
                  "fiscal_year",
                  "related",
                  "contact",
                  "company",
                  "individual",
                  "currency",
                  "owner",
                  "acl",
                  "smart_tags"
                ]
              },
              {
                "$ref": "#/components/parameters/contactEmbed/schema/items/oneOf/1"
              }
            ]
          }
        }
      },
      "creditNoteOneEmbed": {
        "in": "query",
        "name": "embed",
        "description": "Additional object included in the result",
        "schema": {
          "type": "array",
          "items": {
            "oneOf": [
              {
                "type": "string",
                "title": "standards",
                "description": "The standards embeds",
                "enum": [
                  "fiscal_year",
                  "related",
                  "contact",
                  "company",
                  "individual",
                  "currency",
                  "owner",
                  "acl",
                  "smart_tags"
                ]
              },
              {
                "$ref": "#/components/parameters/contactEmbed/schema/items/oneOf/1"
              }
            ]
          }
        }
      },
      "creditNoteOrder": {
        "in": "query",
        "name": "order",
        "description": "Order field",
        "schema": {
          "type": "string",
          "example": "id",
          "enum": [
            "id",
            "number",
            "created",
            "date"
          ]
        }
      },
      "itemOrder": {
        "in": "query",
        "name": "order",
        "description": "Order field",
        "schema": {
          "type": "string",
          "example": "id",
          "enum": [
            "id",
            "created_at"
          ]
        }
      }
    },
    "securitySchemes": {
      "oauth2": {
        "type": "oauth2",
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "https://login.sellsy.com/oauth2/authorization",
            "tokenUrl": "https://login.sellsy.com/oauth2/access-tokens",
            "refreshUrl": "https://login.sellsy.com/oauth2/access-tokens",
            "scopes": {
              "comments.read": "Grand read access to comments",
              "comments.write": "Grand write access to comments",
              "contacts.read": "Grants read access to contacts",
              "contacts.write": "Grants read access to contacts",
              "individuals.read": "Grants read access to individuals",
              "companies.read": "Grants read access to companies",
              "companies.write": "Grants write access to companies",
              "estimates.read": "Grants read access to estimates",
              "estimates.write": "Grants write access to estimates",
              "activities.write": "Grants write access to activities",
              "activities.read": "Grants read access to activities",
              "listings.read": "Grants read access to listings",
              "listings.write": "Grants write access to listings",
              "custom-fields.read": "Grand read access to custom fields",
              "custom-fields.write": "Grand write access to custom fields",
              "smart-tags.read": "Grand read access to smart tags",
              "smart-tags.write": "Grand write access to smart tags",
              "custom-activities.read": "Grand read access to custom activities",
              "custom-activities.write": "Grand write access to custom activities",
              "scopes.read": "Grants read access to scopes",
              "access-tokens.read": "Grants read access to access tokens",
              "access-tokens.write": "Grants write access to access tokens",
              "clients.read": "Grants read access to oauth clients",
              "clients.write": "Grants write access to oauth clients",
              "accounting-codes.read": "Grant read access to accounting codes",
              "taxes.read": "Grant read access to taxes",
              "ocr.read": "Grant read access to ocr",
              "individuals.write": "Grants write access to individuals",
              "accounts.read": "Grant read access to accounts",
              "accounts.write": "Grant write access to accounts",
              "opportunities.read": "Grand read access to opportunities",
              "opportunities.write": "Grant write access to opportunities",
              "tasks.read": "Grant read access to tasks",
              "tasks.write": "Grant write access to tasks",
              "staffs.read": "Grand read access to staffs",
              "staffs.write": "Grant write access to staffs",
              "search.read": "Grant access to search",
              "phonecalls.read": "Grand read access to phonecall",
              "phonecalls.write": "Grand write access to phonecall",
              "calendars.read": "Grant read access to calendar",
              "calendars.write": "Grant write access to calendar",
              "emails.read": "Grant read access to email",
              "emails.settings": "Grant access to email settings",
              "webhooks.read": "Grants read access to webhooks",
              "webhooks.write": "Grants write access to webhooks",
              "payments.read": "Grand read access to payments",
              "items.read": "Grand read acces to items",
              "items.write": "Grand write acces to items",
              "invoicing.read": "Grant read access to invoicing",
              "notifications.read": "Grant read access to notifications",
              "notifications.write": "Grant write access to notifications",
              "accounting-entry.read": "Grant read access to accounting entries",
              "accounting-entry.write": "Grant write access to accounting entries",
              "invoices.read": "Grant read access to invoices",
              "invoices.write": "Grant write access to invoices",
              "api-v1": "Grant full access to API v1 with API v2 access tokens. Caution, this scope gives access to all sellsy functionality",
              "credit-notes.read": "Grant read access to credit-notes",
              "credit-notes.write": "Grant write access to credit-notes"
            }
          },
          "clientCredentials": {
            "tokenUrl": "https://login.sellsy.com/oauth2/access-tokens",
            "scopes": {}
          }
        },
        "description": "### Client OAuth\nYou can generate a new OAuth 2 client for the V2 API, from the developer page of your Sellsy account (https://www.sellsy.fr/developer/api-v2).\n\nSeveral types of clients are available:\n\n- **Private:** API access limited to staffs of your SELLSY account.\n  A flow by authorization code will be required\n- **Personal**:   API access linked to an staff.\n   The use of client credentials flow is possible.\n- **Public**:  API access to connect to all SELLSY accounts.\n   A validation of SELLSY and a flow by authorization code will be required.\n\n### Authorization Code Flow\nSee  https://www.oauth.com/oauth2-servers/server-side-apps/authorization-code/\n\n**PKCE** is required when using the authorization code flow. https://www.oauth.com/oauth2-servers/pkce/\n\n- **Authorization URL:** https://login.sellsy.com/oauth2/authorization\n- **Token URL:** https://login.sellsy.com/oauth2/access-tokens\n- **Refresh URL:** https://login.sellsy.com/oauth2/access-tokens\n\n\n#### Example:\nCall `https://login.sellsy.com/oauth2/authorization?response_type=code&client_id=YOUR_CLIENT_ID&redirect_uri=YOUR_REDIRECT_URI&code_challenge=YOUR_PKCE_CODE_CHALENGE&code_challenge_method=S256`\n\nAfter authentication, a redirection will be performed on the redirection uri. The authaurization code will be retrieved in the query parameter `code` .\n\nThis code can now be exchanged for an access token:\n```bash\ncurl -X POST \\\n  https://login.sellsy.com/oauth2/access-tokens \\\n  -d '{\n\t\"grant_type\": \"authorization_code\",\n\t\"client_id\": \"YOUR_CLIENT_ID\",\n\t\"redirect_uri\": \"YOUR_REDIRECT_URI\",\n\t\"code_verifier\": \"YOUR_PKCE_CODE_VERIFIER\",\n\t\"code\": \"THE_CODE\"\n}'\n# Response\n{\n    \"token_type\": \"Bearer\",\n    \"expires_in\": 3600,\n    \"access_token\": \"YOUR_ACCESS_TOKEN\",\n    \"refresh_token\": \"YOUR_REFRESH_TOKEN\"\n}\n# Use API\ncurl  -X GET \\\n  'https://api.sellsy.com/v2/teams' \\\n   --header 'Authorization: Bearer YOUR_ACCESS_TOKEN'\n```\n\nYou can request a new access token, from the refresh token previously retrieved:\n```bash\ncurl -X POST \\\n  https://login.sellsy.com/oauth2/access-tokens \\\n  -d '{\n\t\"grant_type\": \"refresh_token\",\n\t\"client_id\": \"YOUR_CLIENT_ID\",\n\t\"client_secret\": \"YOUR_CLIENT_SECRET\"\n\t\"refresh_token\": \"YOUR_REFRESH_TOKEN\"\n}'\n# Response\n{\n    \"token_type\": \"Bearer\",\n    \"expires_in\": 3600,\n    \"access_token\": \"YOUR_NEW_ACCESS_TOKEN\",\n    \"refresh_token\": \"YOUR_NEW_REFRESH_TOKEN\"\n}\n```\n\n### Client Credential Flow\nSee  https://www.oauth.com/oauth2-servers/access-tokens/client-credentials/\n\nOnly personal clients can use this authentication flow.\n\n**Token URL:** https://login.sellsy.com/oauth2/access-tokens\n\n#### Example:\n```bash\ncurl -X POST \\\n  https://login.sellsy.com/oauth2/access-tokens \\\n  -d '{\n\t\"grant_type\": \"client_credentials\",\n\t\"client_id\": \"YOUR_CLIENT_ID\",\n\t\"client_secret\": \"YOUR_CLIENT_SECRET\"\n}'\n# Response\n{\n    \"token_type\": \"Bearer\",\n    \"expires_in\": 3600,\n    \"access_token\": \"YOUR_ACCESS_TOKEN\"\n}\n# Use API\ncurl  -X GET \\\n  'https://api.sellsy.com/v2/teams' \\\n   --header 'Authorization: Bearer YOUR_ACCESS_TOKEN'\n```\n### Tokens expiration\n- **Authorization Code:** 10 min\n- **Access Token:** 24 hours\n- **Refresh Token:** 60 days"
      }
    }
  },
  "security": [
    {
      "oauth2": []
    }
  ]
}