{
  "openapi": "3.0.0",
  "servers": [
    {
      "url": "https://api.apaleo.com",
      "description": "productoin server"
    }
  ],
  "info": {
    "title": "apaleo Finance API",
    "description": "Everything around the Folio, Invoices and Accounting.",
    "version": "v1"
  },
  "paths": {
    "/finance/v1/folios": {
      "get": {
        "tags": [
          "Folio"
        ],
        "summary": "Returns a list of all folios.",
        "description": "Allowed actions are only returned, when the list is filtered by reservation ID.<br>You must have at least one of these scopes: 'folios.read, folios.manage'.",
        "operationId": "FinanceFoliosGet",
        "parameters": [
          {
            "in": "query",
            "name": "propertyIds",
            "description": "Filter folio list by property IDs",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "in": "query",
            "name": "companyIds",
            "description": "Filter folio list by company IDs",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "in": "query",
            "name": "reservationIds",
            "description": "Filter folio list by reservation IDs",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "in": "query",
            "name": "bookingIds",
            "description": "Filter folio list by booking IDs",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "in": "query",
            "name": "isEmpty",
            "description": "If set to {true}, only return empty folios (no unmoved [transitory] charges, no unmoved payments, no allowances).\r\nIf set to {false}, only return non-empty folios",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "checkedOutOnAccountsReceivable",
            "description": "If set to {true}, only return folios that have been checked out on accounts receivables\r\nOtherwise, returns all.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "excludeClosed",
            "description": "If set to {true}, closed folios are filtered out from the result collection",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "hasInvoices",
            "description": "If set to {true}, only return folios that been invoices",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "createdFrom",
            "description": "The inclusive start time of the date of creation. Mostly useful for external folios<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "in": "query",
            "name": "createdTo",
            "description": "The exclusive end time of the date of creation. Mostly useful for external folios<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "in": "query",
            "name": "onlyMain",
            "description": "If set to {true}, only main folios are returned, otherwise all.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "type",
            "description": "The type of the folio",
            "schema": {
              "type": "string",
              "enum": [
                "House",
                "Guest",
                "External"
              ]
            }
          },
          {
            "in": "query",
            "name": "externalFolioCode",
            "description": "Allows filtering external folios by code.\r\nUseful when you use external folios with custom codes.\r\nSpecifying this parameter will ignore the <b>Type</b> parameter and treat as if it would be set to \"External\" instead.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "textSearch",
            "description": "This will filter all folios where the provided text is contained in: debitor first name or last name or email or company name,\r\nfolio id. The search is case insensitive.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "pageNumber",
            "description": "Page number, starting from 1 and defaulting to 1. Results in 204 if there are no items on that page.",
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "description": "Page size. If this is not set, the pageNumber will be ignored and all values returned.",
            "schema": {
              "type": "integer",
              "default": 100
            }
          },
          {
            "in": "query",
            "name": "expand",
            "description": "List of all embedded resources that should be expanded in the response. Possible values are: charges, allowances, transitoryCharges, payments, allowedActions, company, warnings. All other values will be silently ignored.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "enum": [
                  "charges",
                  "allowances",
                  "transitoryCharges",
                  "payments",
                  "allowedActions",
                  "company",
                  "warnings"
                ],
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FolioListModel"
                }
              }
            }
          },
          "204": {
            "description": "No folios found."
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "You are unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "The Request-URI could not be found."
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred."
          },
          "503": {
            "description": "The server is currently unavailable. Please try later."
          }
        },
        "security": [
          {
            "oauth2": [
              "folios.read",
              "folios.manage",
              "admin"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Folio"
        ],
        "summary": "Create additional folios for a reservation, or new external folios",
        "description": "Use this call to create a new folio.<br>You must have at least one of these scopes: 'reservations.create, reservations.manage, folios.manage'.",
        "operationId": "FinanceFoliosPost",
        "parameters": [
          {
            "in": "header",
            "name": "Idempotency-Key",
            "description": "Unique key for safely retrying requests without accidentally performing the same operation twice. \nWe'll always send back the same response for requests made with the same key, \nand keys can't be reused with different request parameters. Keys expire after 24 hours.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateFolioModel"
              }
            }
          },
          "description": "The definition of the folio.",
          "required": true
        },
        "responses": {
          "201": {
            "description": "Success",
            "headers": {
              "Location": {
                "description": "The location of the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FolioCreatedModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "You are unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "The Request-URI could not be found."
          },
          "415": {
            "description": "Unsupported media type."
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred."
          },
          "503": {
            "description": "The server is currently unavailable. Please try later."
          }
        },
        "security": [
          {
            "oauth2": [
              "reservations.create",
              "reservations.manage",
              "folios.manage",
              "admin"
            ]
          }
        ]
      }
    },
    "/finance/v1/folios/$count": {
      "get": {
        "tags": [
          "Folio"
        ],
        "summary": "Returns number of folios.",
        "description": "Returns number of folios matching the filter criteria.<br>You must have at least one of these scopes: 'folios.read, folios.manage'.",
        "operationId": "FinanceFolios$countGet",
        "parameters": [
          {
            "in": "query",
            "name": "propertyIds",
            "description": "Filter folio list by property IDs",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "in": "query",
            "name": "companyIds",
            "description": "Filter folio list by company IDs",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "in": "query",
            "name": "reservationIds",
            "description": "Filter folio list by reservation IDs",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "in": "query",
            "name": "bookingIds",
            "description": "Filter folio list by booking IDs",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "in": "query",
            "name": "isEmpty",
            "description": "If set to {true}, only return empty folios (no unmoved [transitory] charges, no unmoved payments, no allowances).\r\nIf set to {false}, only return non-empty folios",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "checkedOutOnAccountsReceivable",
            "description": "If set to {true}, only return folios that have been checked out on accounts receivables\r\nOtherwise, returns all.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "excludeClosed",
            "description": "If set to {true}, closed folios are filtered out from the result collection",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "hasInvoices",
            "description": "If set to {true}, only return folios that been invoices",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "createdFrom",
            "description": "The inclusive start time of the date of creation. Mostly useful for external folios<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "in": "query",
            "name": "createdTo",
            "description": "The exclusive end time of the date of creation. Mostly useful for external folios<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "in": "query",
            "name": "onlyMain",
            "description": "If set to {true}, only main folios are returned, otherwise all.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "type",
            "description": "The type of the folio",
            "schema": {
              "type": "string",
              "enum": [
                "House",
                "Guest",
                "External"
              ]
            }
          },
          {
            "in": "query",
            "name": "externalFolioCode",
            "description": "Allows filtering external folios by code.\r\nUseful when you use external folios with custom codes.\r\nSpecifying this parameter will ignore the <b>Type</b> parameter and treat as if it would be set to \"External\" instead.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "textSearch",
            "description": "This will filter all folios where the provided text is contained in: debitor first name or last name or email or company name,\r\nfolio id. The search is case insensitive.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CountModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "You are unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "The Request-URI could not be found."
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred."
          },
          "503": {
            "description": "The server is currently unavailable. Please try later."
          }
        },
        "security": [
          {
            "oauth2": [
              "folios.read",
              "folios.manage",
              "admin"
            ]
          }
        ]
      }
    },
    "/finance/v1/folios/{id}": {
      "get": {
        "tags": [
          "Folio"
        ],
        "summary": "Returns one folio.",
        "description": "Get a folio by ID.<br>You must have at least one of these scopes: 'folios.read, folios.manage'.",
        "operationId": "FinanceFoliosByIdGet",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The ID of the folio.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "expand",
            "description": "List of all embedded resources that should be expanded in the response. Possible values are: folios. All other values will be silently ignored.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "enum": [
                  "folios"
                ],
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FolioModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "You are unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "The Request-URI could not be found."
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred."
          },
          "503": {
            "description": "The server is currently unavailable. Please try later."
          }
        },
        "security": [
          {
            "oauth2": [
              "folios.read",
              "folios.manage",
              "admin"
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "Folio"
        ],
        "summary": "Allows to modify certain properties of a folio",
        "description": "Here is the list of operations that are currently allowed:\r\n- Replace debitor (for guest folios only)\r\n- Add a company (not for house folios)\r\n- Replace/remove a company (not for house folios)<br>You must have this scope: 'folios.manage'.",
        "operationId": "FinanceFoliosByIdPatch",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The folio ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            }
          },
          "description": "Define the list of operations to be applied to the resource. Learn more about JSON Patch here: http://jsonpatch.com/.\r\n            See the FolioDebitorModel in GET for values that can be changed.",
          "required": true
        },
        "responses": {
          "204": {
            "description": "The folio was successfully modified."
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "You are unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "The Request-URI could not be found."
          },
          "415": {
            "description": "Unsupported media type."
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred."
          },
          "503": {
            "description": "The server is currently unavailable. Please try later."
          }
        },
        "security": [
          {
            "oauth2": [
              "folios.manage",
              "admin"
            ]
          }
        ]
      },
      "head": {
        "tags": [
          "Folio"
        ],
        "summary": "Check if the folio exists.",
        "description": "Check if the folio exists.<br>You must have at least one of these scopes: 'folios.read, folios.manage'.",
        "operationId": "FinanceFoliosByIdHead",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The folio exists."
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "You are unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "The Request-URI could not be found."
          },
          "500": {
            "description": "An unexpected error occurred."
          },
          "503": {
            "description": "The server is currently unavailable. Please try later."
          }
        },
        "security": [
          {
            "oauth2": [
              "folios.read",
              "folios.manage",
              "admin"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Folio"
        ],
        "summary": "Deletes a folio.",
        "description": "Deletes a folio. This cannot be undone.\r\nYou can delete a folio only if it's not a main folio,\r\nand the folio is empty (it has no charges, allowance, payments or pending payments).\r\n<br />\r\nRequires 'allowed action': Delete.<br>You must have this scope: 'folios.manage'.",
        "operationId": "FinanceFoliosByIdDelete",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The folio ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success."
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "You are unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "The Request-URI could not be found."
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred."
          },
          "503": {
            "description": "The server is currently unavailable. Please try later."
          }
        },
        "security": [
          {
            "oauth2": [
              "folios.manage",
              "admin"
            ]
          }
        ]
      }
    },
    "/finance/v1/folio-actions/{folioId}/charges": {
      "post": {
        "tags": [
          "FolioActions"
        ],
        "summary": "Adds and directly posts a charge to the folio.\r\nIf there are any fees configured for the property, an additional charge for each configured fee will be added.",
        "description": "Adds a charge for any good or service, and directly posts it. Can be used to charge items that are not part of the reservation,\r\nbut should appear on the invoice.\r\n<br />\r\nRequires 'allowed action': AddCharge.<br>You must have at least one of these scopes: 'charges.create, folios.manage'.",
        "operationId": "FinanceFolio-actionsByFolioIdChargesPost",
        "parameters": [
          {
            "in": "path",
            "name": "folioId",
            "description": "The folio ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "Idempotency-Key",
            "description": "Unique key for safely retrying requests without accidentally performing the same operation twice. \nWe'll always send back the same response for requests made with the same key, \nand keys can't be reused with different request parameters. Keys expire after 24 hours.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateChargeModel"
              }
            }
          },
          "description": "The charge to be added",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddedChargeModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "You are unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "The Request-URI could not be found."
          },
          "415": {
            "description": "Unsupported media type."
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred."
          },
          "503": {
            "description": "The server is currently unavailable. Please try later."
          }
        },
        "security": [
          {
            "oauth2": [
              "charges.create",
              "folios.manage",
              "admin"
            ]
          }
        ]
      }
    },
    "/finance/v1/folio-actions/{folioId}/transitory-charges": {
      "post": {
        "tags": [
          "FolioActions"
        ],
        "summary": "Adds and directly posts a transitory charge to the folio.\r\nIf there are any fees configured for the property, an additional charge for each configured fee will be added.",
        "description": "Adds a transitory item for any good or service, and directly posts it. To be used for sales that are not revenue of the property,\r\nbut should appear on te guest's invoice.\r\n<br />\r\nRequires 'allowed action': AddCharge.<br>You must have at least one of these scopes: 'charges.create, folios.manage'.",
        "operationId": "FinanceFolio-actionsByFolioIdTransitory-chargesPost",
        "parameters": [
          {
            "in": "path",
            "name": "folioId",
            "description": "The folio ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "Idempotency-Key",
            "description": "Unique key for safely retrying requests without accidentally performing the same operation twice. \nWe'll always send back the same response for requests made with the same key, \nand keys can't be reused with different request parameters. Keys expire after 24 hours.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTransitoryChargeModel"
              }
            }
          },
          "description": "The transitory charge to be added",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreatedSubResourceIdModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "You are unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "The Request-URI could not be found."
          },
          "415": {
            "description": "Unsupported media type."
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred."
          },
          "503": {
            "description": "The server is currently unavailable. Please try later."
          }
        },
        "security": [
          {
            "oauth2": [
              "charges.create",
              "folios.manage",
              "admin"
            ]
          }
        ]
      }
    },
    "/finance/v1/folio-actions/{folioId}/cancellation-fee": {
      "post": {
        "tags": [
          "FolioActions"
        ],
        "summary": "Adds and directly posts a cancellation fee to the folio.\r\nIf there are any fees configured for the property, an additional charge for each configured fee will be added.",
        "description": "Adds a cancellation fee, and directly posts it. Cancellation fees can only be posted on guest folios.\r\n<br />\r\nRequires 'allowed action': AddCancellationFee.<br>You must have at least one of these scopes: 'charges.create, folios.manage'.",
        "operationId": "FinanceFolio-actionsByFolioIdCancellation-feePost",
        "parameters": [
          {
            "in": "path",
            "name": "folioId",
            "description": "The folio ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "Idempotency-Key",
            "description": "Unique key for safely retrying requests without accidentally performing the same operation twice. \nWe'll always send back the same response for requests made with the same key, \nand keys can't be reused with different request parameters. Keys expire after 24 hours.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MonetaryValueModel"
              }
            }
          },
          "description": "The cancellation fee to be added",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddedChargeModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "You are unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "The Request-URI could not be found."
          },
          "415": {
            "description": "Unsupported media type."
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred."
          },
          "503": {
            "description": "The server is currently unavailable. Please try later."
          }
        },
        "security": [
          {
            "oauth2": [
              "charges.create",
              "folios.manage",
              "admin"
            ]
          }
        ]
      }
    },
    "/finance/v1/folio-actions/{folioId}/no-show-fee": {
      "post": {
        "tags": [
          "FolioActions"
        ],
        "summary": "Adds and directly posts a no-show fee to the folio.\r\nIf there are any fees configured for the property, an additional charge for each configured fee will be added.",
        "description": "Adds a no-show fee, and directly posts it. No-show fees can only be posted on guest folios.\r\n<br />\r\nRequires 'allowed action': AddNoShowFee.<br>You must have at least one of these scopes: 'charges.create, folios.manage'.",
        "operationId": "FinanceFolio-actionsByFolioIdNo-show-feePost",
        "parameters": [
          {
            "in": "path",
            "name": "folioId",
            "description": "The folio ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "Idempotency-Key",
            "description": "Unique key for safely retrying requests without accidentally performing the same operation twice. \nWe'll always send back the same response for requests made with the same key, \nand keys can't be reused with different request parameters. Keys expire after 24 hours.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MonetaryValueModel"
              }
            }
          },
          "description": "The no-show fee to be added",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddedChargeModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "You are unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "The Request-URI could not be found."
          },
          "415": {
            "description": "Unsupported media type."
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred."
          },
          "503": {
            "description": "The server is currently unavailable. Please try later."
          }
        },
        "security": [
          {
            "oauth2": [
              "charges.create",
              "folios.manage",
              "admin"
            ]
          }
        ]
      }
    },
    "/finance/v1/folio-actions/{folioId}/close": {
      "put": {
        "tags": [
          "FolioActions"
        ],
        "summary": "Closes a folio.",
        "description": "Mark a folio as closed to prevent adding charges and payments. This action cannot be undone,\r\nand is only possible if the balance is 0.\r\n<br />\r\nRequires 'allowed action': Close.<br>You must have this scope: 'folios.manage'.",
        "operationId": "FinanceFolio-actionsByFolioIdClosePut",
        "parameters": [
          {
            "in": "path",
            "name": "folioId",
            "description": "The folio ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success."
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "You are unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "The Request-URI could not be found."
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred."
          },
          "503": {
            "description": "The server is currently unavailable. Please try later."
          }
        },
        "security": [
          {
            "oauth2": [
              "folios.manage",
              "admin"
            ]
          }
        ]
      }
    },
    "/finance/v1/folio-actions/{folioId}/reopen": {
      "put": {
        "tags": [
          "FolioActions"
        ],
        "summary": "Reopens a folio.",
        "description": "Reopens a closed folio.\r\nYou can only reopen a folio if no invoice has been created for the folio.\r\nOtherwise, use `invoice-actions/{invoiceId}/cancel` endpoint to cancel an invoice and reopen the folio.\r\n<br />\r\nRequires 'allowed action': Reopen.<br>You must have this scope: 'folios.manage'.",
        "operationId": "FinanceFolio-actionsByFolioIdReopenPut",
        "parameters": [
          {
            "in": "path",
            "name": "folioId",
            "description": "The folio ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success."
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "You are unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "The Request-URI could not be found."
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred."
          },
          "503": {
            "description": "The server is currently unavailable. Please try later."
          }
        },
        "security": [
          {
            "oauth2": [
              "folios.manage",
              "admin"
            ]
          }
        ]
      }
    },
    "/finance/v1/folio-actions/{folioId}/move-charges": {
      "put": {
        "tags": [
          "FolioActions"
        ],
        "summary": "Move multiple charges, allowances and transitory charges from one folio to another.",
        "description": "If one of the folios is closed, this action cannot be performed.<br /><br />\r\nIf any of the specified charges does not exist, this action cannot be performed.<br /><br />\r\nMoving negative charges to a house folio is not supported. Create additional folios instead, and move the charges there.<br>You must have at least one of these scopes: 'charges.move, folios.manage'.",
        "operationId": "FinanceFolio-actionsByFolioIdMove-chargesPut",
        "parameters": [
          {
            "in": "path",
            "name": "folioId",
            "description": "The ID of the source folio from where the charges should be moved away.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MoveChargesRequest"
              }
            }
          },
          "description": "See class.",
          "required": true
        },
        "responses": {
          "204": {
            "description": "Success."
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "You are unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "The Request-URI could not be found."
          },
          "415": {
            "description": "Unsupported media type."
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred."
          },
          "503": {
            "description": "The server is currently unavailable. Please try later."
          }
        },
        "security": [
          {
            "oauth2": [
              "charges.move",
              "folios.manage",
              "admin"
            ]
          }
        ]
      }
    },
    "/finance/v1/folio-actions/bulk-move": {
      "put": {
        "tags": [
          "FolioActions"
        ],
        "summary": "Move multiple charges from one folio to another. Multiple source folios and multiple target folios can be specified.",
        "description": "If one of the folios is closed, this action cannot be performed.<br /><br />\r\nIf any of the specified charges does not exist, this action cannot be performed.<br /><br />\r\nMoving negative charges to a house folio is not supported. Create additional folios instead, and move the charges there.<br>You must have this scope: 'folios.manage'.",
        "operationId": "FinanceFolio-actionsBulk-movePut",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkMoveRequest"
              }
            }
          },
          "description": "See class.",
          "required": true
        },
        "responses": {
          "204": {
            "description": "Success."
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "You are unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "The Request-URI could not be found."
          },
          "415": {
            "description": "Unsupported media type."
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred."
          },
          "503": {
            "description": "The server is currently unavailable. Please try later."
          }
        },
        "security": [
          {
            "oauth2": [
              "folios.manage",
              "admin"
            ]
          }
        ]
      }
    },
    "/finance/v1/folio-actions/{folioId}/move-all-charges": {
      "put": {
        "tags": [
          "FolioActions"
        ],
        "summary": "Move all charges and transitory charges from one folio to another.",
        "description": "If one of the folios is closed, this action cannot be performed.<br /><br />\r\nOnly charges that can be moved will be moved.<br /><br /><br>You must have at least one of these scopes: 'charges.move, folios.manage'.",
        "operationId": "FinanceFolio-actionsByFolioIdMove-all-chargesPut",
        "parameters": [
          {
            "in": "path",
            "name": "folioId",
            "description": "The ID of the source folio from where the charges should be moved away.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MoveAllChargesRequest"
              }
            }
          },
          "description": "See class.",
          "required": true
        },
        "responses": {
          "204": {
            "description": "Success."
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "You are unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "The Request-URI could not be found."
          },
          "415": {
            "description": "Unsupported media type."
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred."
          },
          "503": {
            "description": "The server is currently unavailable. Please try later."
          }
        },
        "security": [
          {
            "oauth2": [
              "charges.move",
              "folios.manage",
              "admin"
            ]
          }
        ]
      }
    },
    "/finance/v1/folio-actions/{folioId}/charges/{chargeId}/allowances": {
      "post": {
        "tags": [
          "FolioActions"
        ],
        "summary": "Posts an allowance for a charge",
        "description": "Allowance value posted must not exceed source charge minus allowances posted for this charge<br>You must have at least one of these scopes: 'allowances.post, folios.manage'.",
        "operationId": "FinanceFolio-actionsByFolioIdChargesByChargeIdAllowancesPost",
        "parameters": [
          {
            "in": "path",
            "name": "folioId",
            "description": "The ID of the folio.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "chargeId",
            "description": "The ID of the charge allowance posted for",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "Idempotency-Key",
            "description": "Unique key for safely retrying requests without accidentally performing the same operation twice. \nWe'll always send back the same response for requests made with the same key, \nand keys can't be reused with different request parameters. Keys expire after 24 hours.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAllowanceForChargeModel"
              }
            }
          },
          "description": "Allowance data",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreatedSubResourceIdModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "You are unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "The Request-URI could not be found."
          },
          "415": {
            "description": "Unsupported media type."
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred."
          },
          "503": {
            "description": "The server is currently unavailable. Please try later."
          }
        },
        "security": [
          {
            "oauth2": [
              "allowances.post",
              "folios.manage",
              "admin"
            ]
          }
        ]
      }
    },
    "/finance/v1/folio-actions/{folioId}/allowances": {
      "post": {
        "tags": [
          "FolioActions"
        ],
        "summary": "Posts an allowance for a folio",
        "description": "Allowance value posted must not exceed sum of charges minus existing allowances<br>You must have at least one of these scopes: 'allowances.post, folios.manage'.",
        "operationId": "FinanceFolio-actionsByFolioIdAllowancesPost",
        "parameters": [
          {
            "in": "path",
            "name": "folioId",
            "description": "The ID of the folio.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "Idempotency-Key",
            "description": "Unique key for safely retrying requests without accidentally performing the same operation twice. \nWe'll always send back the same response for requests made with the same key, \nand keys can't be reused with different request parameters. Keys expire after 24 hours.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAllowanceForFolioModel"
              }
            }
          },
          "description": "Allowance amount and post reason",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreatedSubResourceIdModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "You are unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "The Request-URI could not be found."
          },
          "415": {
            "description": "Unsupported media type."
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred."
          },
          "503": {
            "description": "The server is currently unavailable. Please try later."
          }
        },
        "security": [
          {
            "oauth2": [
              "allowances.post",
              "folios.manage",
              "admin"
            ]
          }
        ]
      }
    },
    "/finance/v1/folio-actions/{folioId}/bulk-allowances": {
      "post": {
        "tags": [
          "FolioActions"
        ],
        "summary": "Posts allowances for a folio",
        "description": "Allowance value posted must not exceed sum of charges minus existing allowances<br>You must have at least one of these scopes: 'allowances.post, folios.manage'.",
        "operationId": "FinanceFolio-actionsByFolioIdBulk-allowancesPost",
        "parameters": [
          {
            "in": "path",
            "name": "folioId",
            "description": "The ID of the folio.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "Idempotency-Key",
            "description": "Unique key for safely retrying requests without accidentally performing the same operation twice. \nWe'll always send back the same response for requests made with the same key, \nand keys can't be reused with different request parameters. Keys expire after 24 hours.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAllowanceBulkModel"
              }
            }
          },
          "description": "Allowance amount and post reason",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkAllowanceCreatedModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "You are unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "The Request-URI could not be found."
          },
          "415": {
            "description": "Unsupported media type."
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred."
          },
          "503": {
            "description": "The server is currently unavailable. Please try later."
          }
        },
        "security": [
          {
            "oauth2": [
              "allowances.post",
              "folios.manage",
              "admin"
            ]
          }
        ]
      }
    },
    "/finance/v1/folio-actions/{folioId}/post-charges": {
      "put": {
        "tags": [
          "FolioActions"
        ],
        "summary": "Posts all unposted charges for the whole length of stay.",
        "description": "Use this call for cases when the folio should be closed early. For example, when a guest wants to get the invoice right after the check-in\r\nAs posting charges before the service is delivered is potentially risky, this operation will fail if there are any unposted charges\r\nfurther in the future than 7 days.\r\nPosting open charges is only possible for fully prepaid folios.\r\n<br />\r\nRequires 'allowed action': PostOpenCharges.<br>You must have this scope: 'folios.manage'.",
        "operationId": "FinanceFolio-actionsByFolioIdPost-chargesPut",
        "parameters": [
          {
            "in": "path",
            "name": "folioId",
            "description": "The ID of the folio.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success."
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "You are unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "The Request-URI could not be found."
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred."
          },
          "503": {
            "description": "The server is currently unavailable. Please try later."
          }
        },
        "security": [
          {
            "oauth2": [
              "folios.manage",
              "admin"
            ]
          }
        ]
      }
    },
    "/finance/v1/folio-actions/{folioId}/move-payments": {
      "put": {
        "tags": [
          "FolioActions"
        ],
        "summary": "Move multiple payments from one folio of a reservation to another.",
        "description": "Move payments from one folio of a reservation to another - moving between different reservations is not supported,\r\nand will lead to an error. If one of the folios is closed, this action cannot be performed.<br />\r\nThe PSP reference, if present, will be removed when moving and only be persisted on the original payment.<br>You must have at least one of these scopes: 'charges.move, folios.manage'.",
        "operationId": "FinanceFolio-actionsByFolioIdMove-paymentsPut",
        "parameters": [
          {
            "in": "path",
            "name": "folioId",
            "description": "The ID of the source folio from where the payments should be moved away.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MovePaymentsRequest"
              }
            }
          },
          "description": "See class.",
          "required": true
        },
        "responses": {
          "204": {
            "description": "Success."
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "You are unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "The Request-URI could not be found."
          },
          "415": {
            "description": "Unsupported media type."
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred."
          },
          "503": {
            "description": "The server is currently unavailable. Please try later."
          }
        },
        "security": [
          {
            "oauth2": [
              "charges.move",
              "folios.manage",
              "admin"
            ]
          }
        ]
      }
    },
    "/finance/v1/folio-actions/{folioId}/correct": {
      "post": {
        "tags": [
          "FolioActions"
        ],
        "summary": "Corrects a folio by moving some charges.\r\nThis operation creates a new folio with the charges from the request.\r\nThe payment, equal to the sum of charges, is also split to this new folio so that both folios will have 0 balance.",
        "description": "Allowance value posted must not exceed sum of charges minus existing allowances<br>You must have this scope: 'folios.manage'.",
        "operationId": "FinanceFolio-actionsByFolioIdCorrectPost",
        "parameters": [
          {
            "in": "path",
            "name": "folioId",
            "description": "The ID of the folio.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "Idempotency-Key",
            "description": "Unique key for safely retrying requests without accidentally performing the same operation twice. \nWe'll always send back the same response for requests made with the same key, \nand keys can't be reused with different request parameters. Keys expire after 24 hours.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CorrectFolioRequest"
              }
            }
          },
          "description": "Array of chargeIds to move and reason",
          "required": true
        },
        "responses": {
          "201": {
            "description": "Folio correction was successful. Correction folio created.",
            "headers": {
              "Location": {
                "description": "The location of the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FolioCreatedModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "You are unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "The Request-URI could not be found."
          },
          "415": {
            "description": "Unsupported media type."
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred."
          },
          "503": {
            "description": "The server is currently unavailable. Please try later."
          }
        },
        "security": [
          {
            "oauth2": [
              "folios.manage",
              "admin"
            ]
          }
        ]
      }
    },
    "/finance/v1/folio-actions/{folioId}/charges/{chargeId}/split": {
      "post": {
        "tags": [
          "FolioActions"
        ],
        "summary": "Splits a charge into two using the percent or amount provided\r\nCreates an allowance and two new charges.",
        "description": "<br>You must have at least one of these scopes: 'allowances.post, charges.create, folios.manage'.",
        "operationId": "FinanceFolio-actionsByFolioIdChargesByChargeIdSplitPost",
        "parameters": [
          {
            "in": "path",
            "name": "folioId",
            "description": "The ID of the folio",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "chargeId",
            "description": "The ID of the charge",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "Idempotency-Key",
            "description": "Unique key for safely retrying requests without accidentally performing the same operation twice. \nWe'll always send back the same response for requests made with the same key, \nand keys can't be reused with different request parameters. Keys expire after 24 hours.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SplitChargeRequest"
              }
            }
          },
          "description": "See class",
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "You are unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "The Request-URI could not be found."
          },
          "415": {
            "description": "Unsupported media type."
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred."
          },
          "503": {
            "description": "The server is currently unavailable. Please try later."
          }
        },
        "security": [
          {
            "oauth2": [
              "allowances.post",
              "charges.create",
              "folios.manage",
              "admin"
            ]
          }
        ]
      }
    },
    "/finance/v1/folio-actions/{folioId}/payments/{paymentId}/split": {
      "post": {
        "tags": [
          "FolioActions"
        ],
        "summary": "Splits a payment into two using the percent or amount provided\r\nCreates a refund and two new payments.",
        "description": "<br>You must have at least one of these scopes: 'payments.create, refunds.create, folios.manage'.",
        "operationId": "FinanceFolio-actionsByFolioIdPaymentsByPaymentIdSplitPost",
        "parameters": [
          {
            "in": "path",
            "name": "folioId",
            "description": "The ID of the folio",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "paymentId",
            "description": "The ID of the payment",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "Idempotency-Key",
            "description": "Unique key for safely retrying requests without accidentally performing the same operation twice. \nWe'll always send back the same response for requests made with the same key, \nand keys can't be reused with different request parameters. Keys expire after 24 hours.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SplitPaymentRequest"
              }
            }
          },
          "description": "See class",
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "You are unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "The Request-URI could not be found."
          },
          "415": {
            "description": "Unsupported media type."
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred."
          },
          "503": {
            "description": "The server is currently unavailable. Please try later."
          }
        },
        "security": [
          {
            "oauth2": [
              "payments.create",
              "refunds.create",
              "folios.manage",
              "admin"
            ]
          }
        ]
      }
    },
    "/finance/v1/folios/{folioId}/payments": {
      "get": {
        "tags": [
          "FolioPayments"
        ],
        "summary": "Get a list of payments.",
        "description": "Returns a list of all payments for this folio ordered by creation date, newest first<br>You must have at least one of these scopes: 'folios.read, folios.manage'.",
        "operationId": "FinanceFoliosByFolioIdPaymentsGet",
        "parameters": [
          {
            "in": "path",
            "name": "folioId",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "statusCodes",
            "description": "Filter payments by one or more status.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "enum": [
                  "Pending",
                  "Success",
                  "Failure",
                  "Canceled"
                ],
                "type": "string"
              }
            }
          },
          {
            "in": "query",
            "name": "pageNumber",
            "description": "Page number, starting from 1 and defaulting to 1. Results in 204 if there are no items on that page.",
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "description": "Page size. If this is not set, the pageNumber will be ignored and all values returned.",
            "schema": {
              "type": "integer",
              "default": 100
            }
          },
          {
            "in": "query",
            "name": "expand",
            "description": "List of all embedded resources that should be expanded in the response. Possible values are: actions. All other values will be silently ignored.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "enum": [
                  "actions"
                ],
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentListModel"
                }
              }
            }
          },
          "204": {
            "description": "No payments could be found."
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "You are unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "The Request-URI could not be found."
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred."
          },
          "503": {
            "description": "The server is currently unavailable. Please try later."
          }
        },
        "security": [
          {
            "oauth2": [
              "folios.read",
              "folios.manage",
              "admin"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "FolioPayments"
        ],
        "summary": "Trigger a custom payment for the folio.",
        "description": "A custom payment will not involve any automatic processing. This is best to be used for cash, cheque or voucher payments or payments that have\r\nbeen processed by an external system and it should just be recorded in apaleo for accounting purposes.<br>You must have this scope: 'folios.manage'.",
        "operationId": "FinanceFoliosByFolioIdPaymentsPost",
        "parameters": [
          {
            "in": "path",
            "name": "folioId",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "Idempotency-Key",
            "description": "Unique key for safely retrying requests without accidentally performing the same operation twice. \nWe'll always send back the same response for requests made with the same key, \nand keys can't be reused with different request parameters. Keys expire after 24 hours.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCustomPaymentRequest"
              }
            }
          },
          "description": "The definition of the payment.",
          "required": true
        },
        "responses": {
          "201": {
            "description": "Payment was created and accounting was performed.",
            "headers": {
              "Location": {
                "description": "The location of the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentCreatedModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "You are unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "The Request-URI could not be found."
          },
          "415": {
            "description": "Unsupported media type."
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred."
          },
          "503": {
            "description": "The server is currently unavailable. Please try later."
          }
        },
        "security": [
          {
            "oauth2": [
              "folios.manage",
              "admin"
            ]
          }
        ]
      }
    },
    "/finance/v1/folios/{folioId}/payments/{paymentId}": {
      "get": {
        "tags": [
          "FolioPayments"
        ],
        "summary": "Get a payment by ID.",
        "description": "Get a payment by its ID<br>You must have at least one of these scopes: 'folios.read, folios.manage'.",
        "operationId": "FinanceFoliosByFolioIdPaymentsByPaymentIdGet",
        "parameters": [
          {
            "in": "path",
            "name": "folioId",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "paymentId",
            "description": "The payment ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "expand",
            "description": "List of all embedded resources that should be expanded in the response. Possible values are: actions. All other values will be silently ignored.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "enum": [
                  "actions"
                ],
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FolioPaymentModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "You are unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "The Request-URI could not be found."
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred."
          },
          "503": {
            "description": "The server is currently unavailable. Please try later."
          }
        },
        "security": [
          {
            "oauth2": [
              "folios.read",
              "folios.manage",
              "admin"
            ]
          }
        ]
      }
    },
    "/finance/v1/folios/{folioId}/payments/by-terminal": {
      "post": {
        "tags": [
          "FolioPayments"
        ],
        "summary": "Trigger a payment on a card terminal for the folio.",
        "description": "Trigger a terminal payment for the folio. The payment will be processed asynchronously. Use the location header to poll for the status of the payment.\r\nAs long as a payment is pending it reduces the amount of allowed payments for the folio. The payment times out after 60 minutes automatically<br>You must have this scope: 'folios.manage'.",
        "operationId": "FinanceFoliosByFolioIdPaymentsBy-terminalPost",
        "parameters": [
          {
            "in": "path",
            "name": "folioId",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "Idempotency-Key",
            "description": "Unique key for safely retrying requests without accidentally performing the same operation twice. \nWe'll always send back the same response for requests made with the same key, \nand keys can't be reused with different request parameters. Keys expire after 24 hours.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTerminalPaymentRequest"
              }
            }
          },
          "description": "The definition of the payment.",
          "required": true
        },
        "responses": {
          "201": {
            "description": "Payment was created and will be processed via the specified terminal.",
            "headers": {
              "Location": {
                "description": "The location of the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentCreatedModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "You are unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "The Request-URI could not be found."
          },
          "415": {
            "description": "Unsupported media type."
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred."
          },
          "503": {
            "description": "The server is currently unavailable. Please try later."
          }
        },
        "security": [
          {
            "oauth2": [
              "folios.manage",
              "admin"
            ]
          }
        ]
      }
    },
    "/finance/v1/folios/{folioId}/payments/by-authorization": {
      "post": {
        "tags": [
          "FolioPayments"
        ],
        "summary": "Captures a specific amount from a pre-authorization and posts it to the folio.",
        "description": "Captures a specific amount from a pre-authorization and posts it to the folio. For the pre-authorization please ensure to set the respective metadata in the original payment\r\ntransaction. The flow type has to be set to <i>CaptureOnly</i>. For more information please refer to the documentation of <a href=\"https://apaleo.dev/guides/business-cases/ibe/getting-the-money\" target=\"_blank\">how to do a pre-authorization on a booking engine</a>.\r\nThe payment will be processed asynchronously. Use the location header to poll for the status of the payment. As long as a payment is pending it reduces the amount of allowed\r\npayments for the folio. The payment times out after 60 minutes automatically<br>You must have this scope: 'folios.manage'.",
        "operationId": "FinanceFoliosByFolioIdPaymentsBy-authorizationPost",
        "parameters": [
          {
            "in": "path",
            "name": "folioId",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "Idempotency-Key",
            "description": "Unique key for safely retrying requests without accidentally performing the same operation twice. \nWe'll always send back the same response for requests made with the same key, \nand keys can't be reused with different request parameters. Keys expire after 24 hours.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAuthorizationPaymentRequest"
              }
            }
          },
          "description": "The definition of the payment.",
          "required": true
        },
        "responses": {
          "201": {
            "description": "Payment was created and will be processed.",
            "headers": {
              "Location": {
                "description": "The location of the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentCreatedModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "You are unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "The Request-URI could not be found."
          },
          "415": {
            "description": "Unsupported media type."
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred."
          },
          "503": {
            "description": "The server is currently unavailable. Please try later."
          }
        },
        "security": [
          {
            "oauth2": [
              "folios.manage",
              "admin"
            ]
          }
        ]
      }
    },
    "/finance/v1/folios/{folioId}/payments/by-payment-account": {
      "post": {
        "tags": [
          "FolioPayments"
        ],
        "summary": "Trigger a payment using the payment account stored on the reservation.",
        "description": "Trigger a payment for the folio using the payment account stored on the reservation. The payment will be processed asynchronously. Use the location header to poll\r\nfor the status of the payment. As long as a payment is pending it reduces the amount of allowed payments for the folio. The payment times out after 60 minutes\r\nautomatically<br>You must have this scope: 'folios.manage'.",
        "operationId": "FinanceFoliosByFolioIdPaymentsBy-payment-accountPost",
        "parameters": [
          {
            "in": "path",
            "name": "folioId",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "Idempotency-Key",
            "description": "Unique key for safely retrying requests without accidentally performing the same operation twice. \nWe'll always send back the same response for requests made with the same key, \nand keys can't be reused with different request parameters. Keys expire after 24 hours.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAccountPaymentRequest"
              }
            }
          },
          "description": "The definition of the payment.",
          "required": true
        },
        "responses": {
          "201": {
            "description": "Payment was created and will be processed.",
            "headers": {
              "Location": {
                "description": "The location of the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentCreatedModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "You are unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "The Request-URI could not be found."
          },
          "415": {
            "description": "Unsupported media type."
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred."
          },
          "503": {
            "description": "The server is currently unavailable. Please try later."
          }
        },
        "security": [
          {
            "oauth2": [
              "folios.manage",
              "admin"
            ]
          }
        ]
      }
    },
    "/finance/v1/folios/{folioId}/payments/by-link": {
      "post": {
        "tags": [
          "FolioPayments"
        ],
        "summary": "Creates a link to a payment form where guests can pay.",
        "description": "Creates a link to a payment form where guests can pay. To enable open invoice payment methods you need to provide at\r\nleast the paid charges with the request. For some open invoice payment methods you also need to ensure that the full\r\nbilling address of the folio is set, before you create the payment link. The payment will be processed asynchronously.\r\nUse the location header to poll for the status of the payment. As long as a payment is pending it reduces the amount\r\nof allowed payments for the folio.<br>You must have this scope: 'folios.manage'.",
        "operationId": "FinanceFoliosByFolioIdPaymentsBy-linkPost",
        "parameters": [
          {
            "in": "path",
            "name": "folioId",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "Idempotency-Key",
            "description": "Unique key for safely retrying requests without accidentally performing the same operation twice. \nWe'll always send back the same response for requests made with the same key, \nand keys can't be reused with different request parameters. Keys expire after 24 hours.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePaymentLinkRequest"
              }
            }
          },
          "description": "The definition of the payment link.",
          "required": true
        },
        "responses": {
          "201": {
            "description": "Payment was created and will be processed.",
            "headers": {
              "Location": {
                "description": "The location of the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentCreatedModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "You are unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "The Request-URI could not be found."
          },
          "415": {
            "description": "Unsupported media type."
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred."
          },
          "503": {
            "description": "The server is currently unavailable. Please try later."
          }
        },
        "security": [
          {
            "oauth2": [
              "folios.manage",
              "admin"
            ]
          }
        ]
      }
    },
    "/finance/v1/folios/{folioId}/payments/{paymentId}/cancel": {
      "put": {
        "tags": [
          "FolioPayments"
        ],
        "summary": "Cancels a payment.",
        "description": "Sets a payment to cancelled and triggers the cancellation.<br>You must have this scope: 'folios.manage'.",
        "operationId": "FinanceFoliosByFolioIdPaymentsByPaymentIdCancelPut",
        "parameters": [
          {
            "in": "path",
            "name": "folioId",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "paymentId",
            "description": "The id of the payment.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "You are unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "The Request-URI could not be found."
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred."
          },
          "503": {
            "description": "The server is currently unavailable. Please try later."
          }
        },
        "security": [
          {
            "oauth2": [
              "folios.manage",
              "admin"
            ]
          }
        ]
      }
    },
    "/finance/v1/folios/{folioId}/refunds": {
      "get": {
        "tags": [
          "FolioPayments"
        ],
        "summary": "Get a list of refunds.",
        "description": "Returns a list of all refunds for this folio ordered by creation date, newest first<br>You must have at least one of these scopes: 'folios.read, folios.manage'.",
        "operationId": "FinanceFoliosByFolioIdRefundsGet",
        "parameters": [
          {
            "in": "path",
            "name": "folioId",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "statusCodes",
            "description": "Filter refunds by one or more status",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "enum": [
                  "Pending",
                  "Success",
                  "Failure",
                  "Canceled"
                ],
                "type": "string"
              }
            }
          },
          {
            "in": "query",
            "name": "pageNumber",
            "description": "Page number, starting from 1 and defaulting to 1. Results in 204 if there are no items on that page.",
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "description": "Page size. If this is not set, the pageNumber will be ignored and all values returned.",
            "schema": {
              "type": "integer",
              "default": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RefundListModel"
                }
              }
            }
          },
          "204": {
            "description": "No refunds could be found."
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "You are unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "The Request-URI could not be found."
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred."
          },
          "503": {
            "description": "The server is currently unavailable. Please try later."
          }
        },
        "security": [
          {
            "oauth2": [
              "folios.read",
              "folios.manage",
              "admin"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "FolioPayments"
        ],
        "summary": "Trigger a refund for the folio.",
        "description": "Trigger a generic refund for the folio. The refund will be processed asynchronously. Use the location header to poll for the status of the refund.\r\nAs long as a refund is pending it reduces the amount of allowed refunds for the folio. The refund times out after 60 minutes automatically<br>You must have this scope: 'folios.manage'.",
        "operationId": "FinanceFoliosByFolioIdRefundsPost",
        "parameters": [
          {
            "in": "path",
            "name": "folioId",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "Idempotency-Key",
            "description": "Unique key for safely retrying requests without accidentally performing the same operation twice. \nWe'll always send back the same response for requests made with the same key, \nand keys can't be reused with different request parameters. Keys expire after 24 hours.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateFolioRefundRequest"
              }
            }
          },
          "description": "The definition of the refund.",
          "required": true
        },
        "responses": {
          "201": {
            "description": "Refund was created and will be processed.",
            "headers": {
              "Location": {
                "description": "The location of the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RefundCreatedModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "You are unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "The Request-URI could not be found."
          },
          "415": {
            "description": "Unsupported media type."
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred."
          },
          "503": {
            "description": "The server is currently unavailable. Please try later."
          }
        },
        "security": [
          {
            "oauth2": [
              "folios.manage",
              "admin"
            ]
          }
        ]
      }
    },
    "/finance/v1/folios/{folioId}/refunds/{refundId}": {
      "get": {
        "tags": [
          "FolioPayments"
        ],
        "summary": "Get a refund by ID.",
        "description": "Get a refund by its ID<br>You must have at least one of these scopes: 'folios.read, folios.manage'.",
        "operationId": "FinanceFoliosByFolioIdRefundsByRefundIdGet",
        "parameters": [
          {
            "in": "path",
            "name": "folioId",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "refundId",
            "description": "The refund ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RefundModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "You are unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "The Request-URI could not be found."
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred."
          },
          "503": {
            "description": "The server is currently unavailable. Please try later."
          }
        },
        "security": [
          {
            "oauth2": [
              "folios.read",
              "folios.manage",
              "admin"
            ]
          }
        ]
      }
    },
    "/finance/v1/folios/{folioId}/payments/{paymentId}/refunds": {
      "post": {
        "tags": [
          "FolioPayments"
        ],
        "summary": "Trigger a refund for a specific payment.",
        "description": "Trigger a refund for a specific payment on this folio. The refund will be processed asynchronously. Use the location header to poll for\r\nthe status of the refund. As long as a refund is pending the allowed refund amount for this payment will be reduced by the amount. The refund\r\ntimes out after 10 minutes automatically<br>You must have this scope: 'folios.manage'.",
        "operationId": "FinanceFoliosByFolioIdPaymentsByPaymentIdRefundsPost",
        "parameters": [
          {
            "in": "path",
            "name": "folioId",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "paymentId",
            "description": "The payment Id.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "Idempotency-Key",
            "description": "Unique key for safely retrying requests without accidentally performing the same operation twice. \nWe'll always send back the same response for requests made with the same key, \nand keys can't be reused with different request parameters. Keys expire after 24 hours.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePaymentRefundRequest"
              }
            }
          },
          "description": "The definition of the refund.",
          "required": true
        },
        "responses": {
          "201": {
            "description": "Refund was created and will be processed.",
            "headers": {
              "Location": {
                "description": "The location of the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RefundCreatedModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "You are unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "The Request-URI could not be found."
          },
          "415": {
            "description": "Unsupported media type."
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred."
          },
          "503": {
            "description": "The server is currently unavailable. Please try later."
          }
        },
        "security": [
          {
            "oauth2": [
              "folios.manage",
              "admin"
            ]
          }
        ]
      }
    },
    "/finance/v1/invoices/preview-pdf": {
      "get": {
        "tags": [
          "Invoice"
        ],
        "summary": "Gets a preview invoice PDF for one specific folio.",
        "description": "Gets a preview invoice PDF for one specific folio.<br>You must have this scope: 'invoices.read'.",
        "operationId": "FinanceInvoicesPreview-pdfGet",
        "parameters": [
          {
            "in": "query",
            "name": "languageCode",
            "description": "The language in which the invoice should be produced.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "folioId",
            "description": "The ID of the folio for which the invoice should be created.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/pdf": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "You are unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "The Request-URI could not be found."
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "content": {
              "application/pdf": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred."
          },
          "503": {
            "description": "The server is currently unavailable. Please try later."
          }
        },
        "security": [
          {
            "oauth2": [
              "invoices.read",
              "admin"
            ]
          }
        ]
      }
    },
    "/finance/v1/invoices/preview": {
      "get": {
        "tags": [
          "Invoice"
        ],
        "summary": "Gets an invoice preview for one specific folio.",
        "description": "To see if the invoice creation would be successful, check the warnings.<br>You must have this scope: 'invoices.read'.",
        "operationId": "FinanceInvoicesPreviewGet",
        "parameters": [
          {
            "in": "query",
            "name": "folioId",
            "description": "The ID of the folio for which the invoice should be created.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "expand",
            "description": "List of all embedded resources that should be expanded in the response. Possible values are: company. All other values will be silently ignored.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "enum": [
                  "company"
                ],
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PreviewInvoiceModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "You are unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "The Request-URI could not be found."
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred."
          },
          "503": {
            "description": "The server is currently unavailable. Please try later."
          }
        },
        "security": [
          {
            "oauth2": [
              "invoices.read",
              "admin"
            ]
          }
        ]
      }
    },
    "/finance/v1/invoices": {
      "get": {
        "tags": [
          "Invoice"
        ],
        "summary": "Gets the list of all invoices (the metadata only, not the files).",
        "description": "Gets the list of all invoices (the metadata only, not the files).<br>You must have this scope: 'invoices.read'.",
        "operationId": "FinanceInvoicesGet",
        "parameters": [
          {
            "in": "query",
            "name": "number",
            "description": "The invoice number",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "status",
            "description": "Filter by invoice status",
            "schema": {
              "type": "string",
              "enum": [
                "FullyPaid",
                "Unpaid",
                "WrittenOff"
              ]
            }
          },
          {
            "in": "query",
            "name": "checkedOutOnAccountsReceivable",
            "description": "If set to {true}, only return invoices with an open balance (AR)\r\nOtherwise, returns all.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "outstandingPaymentFilter",
            "description": "Filter for the outstanding balance for invoices<br />You can provide an array of string expressions which all need to apply.<br />Each expression has the form of 'OPERATION_VALUE' where VALUE needs to be of the valid format of the property type and OPERATION can be:<br />'eq' for equals<br />'neq' for not equals<br />'lt' for less than<br />'gt' for greater than<br />'lte' for less than or equals<br />'gte' for greater than or equals<br />For instance<br />'eq_5' would mean the value should equal 5<br />'lte_7' would mean the value should be less than or equal to 7",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "in": "query",
            "name": "dateFilter",
            "description": "Filter by invoice date<br />You can provide an array of string expressions which all need to apply.<br />Each expression has the form of 'OPERATION_VALUE' where VALUE needs to be of the valid format of the property type and OPERATION can be:<br />'eq' for equals<br />'neq' for not equals<br />'lt' for less than<br />'gt' for greater than<br />'lte' for less than or equals<br />'gte' for greater than or equals<br />For instance<br />'eq_5' would mean the value should equal 5<br />'lte_7' would mean the value should be less than or equal to 7",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "in": "query",
            "name": "propertyIds",
            "description": "Filter by property IDs",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "in": "query",
            "name": "reservationIds",
            "description": "Filter by reservation IDs",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "in": "query",
            "name": "folioIds",
            "description": "Filter by folio IDs",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "in": "query",
            "name": "nameSearch",
            "description": "Find invoices for a recipient name or company. Provide at least three characters.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "paymentSettled",
            "description": "If set to {true}, returns only invoices having no outstanding payments or marked as settled.\r\nIf set to {false}, returns only invoices with outstanding payment and not marked as settled.\r\nIf not set, returns all invoices. - <b>DEPRECATED: This field will be removed at 25.06.2022. Use filtering by `Status` instead</b>",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "companyIds",
            "description": "Filter by company IDs",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "in": "query",
            "name": "pageNumber",
            "description": "Page number, starting from 1 and defaulting to 1. Results in 204 if there are no items on that page.",
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "description": "Page size. If this is not set, the pageNumber will be ignored and all values returned.",
            "schema": {
              "type": "integer",
              "default": 100
            }
          },
          {
            "in": "query",
            "name": "expand",
            "description": "List of all embedded resources that should be expanded in the response. Possible values are: allowedActions, company. All other values will be silently ignored.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "enum": [
                  "allowedActions",
                  "company"
                ],
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceListModel"
                }
              }
            }
          },
          "204": {
            "description": "No invoices found."
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "You are unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "The Request-URI could not be found."
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred."
          },
          "503": {
            "description": "The server is currently unavailable. Please try later."
          }
        },
        "security": [
          {
            "oauth2": [
              "invoices.read",
              "admin"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "Invoice"
        ],
        "summary": "Creates an invoice for one specific folio.",
        "description": "Creates an invoice for one specific folio. The invoice can only be created once.\r\nThe debitor needs to have name, city, postal code and country code, as these are required for invoices.\r\nIf the folio is not fully paid, this will check out the reservation on AR and create an invoice with outstanding payments.<br>You must have at least one of these scopes: 'invoices.create, invoices.manage'.",
        "operationId": "FinanceInvoicesPost",
        "parameters": [
          {
            "in": "header",
            "name": "Idempotency-Key",
            "description": "Unique key for safely retrying requests without accidentally performing the same operation twice. \nWe'll always send back the same response for requests made with the same key, \nand keys can't be reused with different request parameters. Keys expire after 24 hours.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateInvoicePdfRequest"
              }
            }
          },
          "description": "The folio ID to create the invoice for.",
          "required": true
        },
        "responses": {
          "201": {
            "description": "The invoice was created successfully.",
            "headers": {
              "Location": {
                "description": "The location of the created resource.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceCreatedModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "You are unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "The Request-URI could not be found."
          },
          "415": {
            "description": "Unsupported media type."
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred."
          },
          "503": {
            "description": "The server is currently unavailable. Please try later."
          }
        },
        "security": [
          {
            "oauth2": [
              "invoices.create",
              "invoices.manage",
              "admin"
            ]
          }
        ]
      }
    },
    "/finance/v1/invoices/{id}/pdf": {
      "get": {
        "tags": [
          "Invoice"
        ],
        "summary": "Gets an invoice PDF file.",
        "description": "Gets an invoice PDF file by its ID. Only works for invoices that have already been created using POST /invoices.<br>You must have this scope: 'invoices.read'.",
        "operationId": "FinanceInvoicesByIdPdfGet",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The invoice ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/pdf": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "You are unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "The Request-URI could not be found."
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "content": {
              "application/pdf": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred."
          },
          "503": {
            "description": "The server is currently unavailable. Please try later."
          }
        },
        "security": [
          {
            "oauth2": [
              "invoices.read",
              "admin"
            ]
          }
        ]
      }
    },
    "/finance/v1/invoices/{id}": {
      "get": {
        "tags": [
          "Invoice"
        ],
        "summary": "Gets invoice data.",
        "description": "Gets invoice data by its ID. Only works for invoices that have already been created using POST /invoices.<br>You must have this scope: 'invoices.read'.",
        "operationId": "FinanceInvoicesByIdGet",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The invoice ID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "expand",
            "description": "List of all embedded resources that should be expanded in the response. Possible values are: company. All other values will be silently ignored.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "enum": [
                  "company"
                ],
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "You are unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "The Request-URI could not be found."
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred."
          },
          "503": {
            "description": "The server is currently unavailable. Please try later."
          }
        },
        "security": [
          {
            "oauth2": [
              "invoices.read",
              "admin"
            ]
          }
        ]
      }
    },
    "/finance/v1/invoice-actions/{id}/pay": {
      "put": {
        "tags": [
          "InvoiceAction"
        ],
        "summary": "Marks an invoice as paid.",
        "description": "Settles the invoice, if the invoice has an amount to be paid (total != 0).<br>You must have this scope: 'invoices.manage'.",
        "operationId": "FinanceInvoice-actionsByIdPayPut",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The invoice ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PayInvoiceRequest"
              }
            }
          },
          "description": "see class",
          "required": true
        },
        "responses": {
          "204": {
            "description": "Invoice marked as paid."
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "You are unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "The Request-URI could not be found."
          },
          "415": {
            "description": "Unsupported media type."
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred."
          },
          "503": {
            "description": "The server is currently unavailable. Please try later."
          }
        },
        "security": [
          {
            "oauth2": [
              "invoices.manage",
              "admin"
            ]
          }
        ]
      }
    },
    "/finance/v1/invoice-actions/{id}/cancel": {
      "put": {
        "tags": [
          "InvoiceAction"
        ],
        "summary": "Cancels an invoice",
        "description": "For regular invoices and AR invoices that haven't been paid yet, creates a new cancellation invoice and opens the folio again.\r\nFor advance invoices, creates a new cancellation invoice.<br>You must have this scope: 'invoices.manage'.",
        "operationId": "FinanceInvoice-actionsByIdCancelPut",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The invoice ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Invoice canceled."
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "You are unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "The Request-URI could not be found."
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred."
          },
          "503": {
            "description": "The server is currently unavailable. Please try later."
          }
        },
        "security": [
          {
            "oauth2": [
              "invoices.manage",
              "admin"
            ]
          }
        ]
      }
    },
    "/finance/v1/accounts/aggregate-pairs-daily": {
      "post": {
        "tags": [
          "SubLedger"
        ],
        "summary": "Aggregates transactions pairs by date (business day) for all accounts and a given period.",
        "description": "Returns total amount credited from one account to another<br>You must have at least one of these scopes: 'subledger.read, accounting.read'.",
        "operationId": "FinanceAccountsAggregate-pairs-dailyPost",
        "parameters": [
          {
            "in": "query",
            "name": "propertyId",
            "description": "Specifies the property transactions will be aggregated for.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "from",
            "description": "The inclusive start date of the interval",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "to",
            "description": "The exclusive end date of the interval",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "reference",
            "description": "Filter transactions by reference (reservation id/external folio id/property id for house folio).",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "accountNumber",
            "description": "Filter transactions by account number",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "accountType",
            "description": "Filter transactions by type",
            "schema": {
              "type": "string",
              "enum": [
                "Revenues",
                "Payments",
                "Liabilities",
                "Receivables",
                "Vat",
                "House",
                "AccountsReceivable",
                "CityTaxes",
                "TransitoryItems",
                "VatOnLiabilities",
                "LossOfAccountsReceivable"
              ]
            }
          },
          {
            "in": "query",
            "name": "accountingSchema",
            "description": "Allows to override the default accounting schema. Only specify this, when you know what you are doing.",
            "schema": {
              "type": "string",
              "enum": [
                "Simple",
                "Extended"
              ]
            }
          },
          {
            "in": "query",
            "name": "languageCode",
            "description": "The language for the the report (2-letter ISO code)",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "Idempotency-Key",
            "description": "Unique key for safely retrying requests without accidentally performing the same operation twice. \nWe'll always send back the same response for requests made with the same key, \nand keys can't be reused with different request parameters. Keys expire after 24 hours.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountingTransactionPairListModel"
                }
              }
            }
          },
          "204": {
            "description": "No transactions found."
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "You are unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "The Request-URI could not be found."
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred."
          },
          "503": {
            "description": "The server is currently unavailable. Please try later."
          }
        },
        "security": [
          {
            "oauth2": [
              "subledger.read",
              "accounting.read",
              "admin"
            ]
          }
        ]
      }
    },
    "/finance/v1/accounts/aggregate-daily": {
      "post": {
        "tags": [
          "SubLedger"
        ],
        "summary": "Aggregates transactions by date (business day) for all accounts and a given period.",
        "description": "Returns credited and debited amounts aggregated by transactions' date (business day) for all accounts and a given period.\r\nStores an entry in the export audit log.<br>You must have at least one of these scopes: 'subledger.read, accounting.read'.",
        "operationId": "FinanceAccountsAggregate-dailyPost",
        "parameters": [
          {
            "in": "query",
            "name": "propertyId",
            "description": "Specifies the property transactions will be aggregated for.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "from",
            "description": "The inclusive start date of the interval",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "to",
            "description": "The exclusive end date of the interval",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "reference",
            "description": "Filter transactions by reference (reservation id/external folio id/property id for house folio).",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "accountNumber",
            "description": "Filter transactions by account number",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "accountType",
            "description": "Filter transactions by type",
            "schema": {
              "type": "string",
              "enum": [
                "Revenues",
                "Payments",
                "Liabilities",
                "Receivables",
                "Vat",
                "House",
                "AccountsReceivable",
                "CityTaxes",
                "TransitoryItems",
                "VatOnLiabilities",
                "LossOfAccountsReceivable"
              ]
            }
          },
          {
            "in": "query",
            "name": "accountingSchema",
            "description": "Allows to override the default accounting schema. Only specify this, when you know what you are doing.",
            "schema": {
              "type": "string",
              "enum": [
                "Simple",
                "Extended"
              ]
            }
          },
          {
            "in": "query",
            "name": "languageCode",
            "description": "The language for the the report (2-letter ISO code)",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "Idempotency-Key",
            "description": "Unique key for safely retrying requests without accidentally performing the same operation twice. \nWe'll always send back the same response for requests made with the same key, \nand keys can't be reused with different request parameters. Keys expire after 24 hours.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AggregateTransactionListModel"
                }
              }
            }
          },
          "204": {
            "description": "No transactions found."
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "You are unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "The Request-URI could not be found."
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred."
          },
          "503": {
            "description": "The server is currently unavailable. Please try later."
          }
        },
        "security": [
          {
            "oauth2": [
              "subledger.read",
              "accounting.read",
              "admin"
            ]
          }
        ]
      }
    },
    "/finance/v1/accounts/aggregate": {
      "post": {
        "tags": [
          "SubLedger"
        ],
        "summary": "Aggregates transactions by timestamp for all accounts and a given period.",
        "description": "Returns credited and debited amounts aggregated by transactions' timestamp for all accounts and a given period.\r\nStores an entry in the export audit log.<br>You must have at least one of these scopes: 'subledger.read, accounting.read'.",
        "operationId": "FinanceAccountsAggregatePost",
        "parameters": [
          {
            "in": "query",
            "name": "propertyId",
            "description": "Specifies the property for which transactions will be exported",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "from",
            "description": "The inclusive start time of the posting date.\r\nEither posting date or business date interval should be specified.<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "in": "query",
            "name": "to",
            "description": "The exclusive end time of the posting date.\r\nEither posting date or business date interval should be specified.<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "in": "query",
            "name": "accountNumber",
            "description": "Filter transactions by account number",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "accountType",
            "description": "Filter transactions by type",
            "schema": {
              "type": "string",
              "enum": [
                "Revenues",
                "Payments",
                "Liabilities",
                "Receivables",
                "Vat",
                "House",
                "AccountsReceivable",
                "CityTaxes",
                "TransitoryItems",
                "VatOnLiabilities",
                "LossOfAccountsReceivable"
              ]
            }
          },
          {
            "in": "query",
            "name": "accountingSchema",
            "description": "Allows to override the default accounting schema. Only specify this, when you know what you are doing.",
            "schema": {
              "type": "string",
              "enum": [
                "Simple",
                "Extended"
              ]
            }
          },
          {
            "in": "query",
            "name": "languageCode",
            "description": "The language for the the report",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "Idempotency-Key",
            "description": "Unique key for safely retrying requests without accidentally performing the same operation twice. \nWe'll always send back the same response for requests made with the same key, \nand keys can't be reused with different request parameters. Keys expire after 24 hours.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AggregateTransactionListModel"
                }
              }
            }
          },
          "204": {
            "description": "No transactions found."
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "You are unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "The Request-URI could not be found."
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred."
          },
          "503": {
            "description": "The server is currently unavailable. Please try later."
          }
        },
        "security": [
          {
            "oauth2": [
              "subledger.read",
              "accounting.read",
              "admin"
            ]
          }
        ]
      }
    },
    "/finance/v1/accounts/export": {
      "post": {
        "tags": [
          "SubLedger"
        ],
        "summary": "Returns transactions filtered by timestamp for a property for a given period.",
        "description": "Returns the raw transaction data for a given property and time period.\r\nStores an entry in the export audit log.<br>You must have at least one of these scopes: 'transactions.export, accounting.read'.",
        "operationId": "FinanceAccountsExportPost",
        "parameters": [
          {
            "in": "query",
            "name": "propertyId",
            "description": "Specifies the property for which transactions will be exported",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "from",
            "description": "The inclusive start time of the posting date.\r\nEither posting date or business date interval should be specified.<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "in": "query",
            "name": "to",
            "description": "The exclusive end time of the posting date.\r\nEither posting date or business date interval should be specified.<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "in": "query",
            "name": "accountNumber",
            "description": "Filter transactions by account number",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "accountType",
            "description": "Filter transactions by type",
            "schema": {
              "type": "string",
              "enum": [
                "Revenues",
                "Payments",
                "Liabilities",
                "Receivables",
                "Vat",
                "House",
                "AccountsReceivable",
                "CityTaxes",
                "TransitoryItems",
                "VatOnLiabilities",
                "LossOfAccountsReceivable"
              ]
            }
          },
          {
            "in": "query",
            "name": "accountingSchema",
            "description": "Allows to override the default accounting schema. Only specify this, when you know what you are doing.",
            "schema": {
              "type": "string",
              "enum": [
                "Simple",
                "Extended"
              ]
            }
          },
          {
            "in": "query",
            "name": "languageCode",
            "description": "The language for the the report",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "Idempotency-Key",
            "description": "Unique key for safely retrying requests without accidentally performing the same operation twice. \nWe'll always send back the same response for requests made with the same key, \nand keys can't be reused with different request parameters. Keys expire after 24 hours.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountingTransactionListModel"
                }
              }
            }
          },
          "204": {
            "description": "No transactions found."
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "You are unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "The Request-URI could not be found."
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred."
          },
          "503": {
            "description": "The server is currently unavailable. Please try later."
          }
        },
        "security": [
          {
            "oauth2": [
              "transactions.export",
              "accounting.read",
              "admin"
            ]
          }
        ]
      }
    },
    "/finance/v1/accounts/export-daily": {
      "post": {
        "tags": [
          "SubLedger"
        ],
        "summary": "Returns transactions filtered by date (business day) for a property for a given period.",
        "description": "Returns the raw transaction data for a given property and time period.\r\nStores an entry in the export audit log.<br>You must have at least one of these scopes: 'transactions.export, accounting.read'.",
        "operationId": "FinanceAccountsExport-dailyPost",
        "parameters": [
          {
            "in": "query",
            "name": "propertyId",
            "description": "Specifies the property transactions will be aggregated for.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "from",
            "description": "The inclusive start date of the interval",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "to",
            "description": "The exclusive end date of the interval",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "reference",
            "description": "Filter transactions by reference (reservation id/external folio id/property id for house folio).",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "accountNumber",
            "description": "Filter transactions by account number",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "accountType",
            "description": "Filter transactions by type",
            "schema": {
              "type": "string",
              "enum": [
                "Revenues",
                "Payments",
                "Liabilities",
                "Receivables",
                "Vat",
                "House",
                "AccountsReceivable",
                "CityTaxes",
                "TransitoryItems",
                "VatOnLiabilities",
                "LossOfAccountsReceivable"
              ]
            }
          },
          {
            "in": "query",
            "name": "accountingSchema",
            "description": "Allows to override the default accounting schema. Only specify this, when you know what you are doing.",
            "schema": {
              "type": "string",
              "enum": [
                "Simple",
                "Extended"
              ]
            }
          },
          {
            "in": "query",
            "name": "languageCode",
            "description": "The language for the the report (2-letter ISO code)",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "header",
            "name": "Idempotency-Key",
            "description": "Unique key for safely retrying requests without accidentally performing the same operation twice. \nWe'll always send back the same response for requests made with the same key, \nand keys can't be reused with different request parameters. Keys expire after 24 hours.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountingTransactionListModel"
                }
              }
            }
          },
          "204": {
            "description": "No transactions found."
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "You are unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "The Request-URI could not be found."
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred."
          },
          "503": {
            "description": "The server is currently unavailable. Please try later."
          }
        },
        "security": [
          {
            "oauth2": [
              "transactions.export",
              "accounting.read",
              "admin"
            ]
          }
        ]
      }
    },
    "/finance/v1/accounts/export-gross-daily": {
      "post": {
        "tags": [
          "SubLedger"
        ],
        "summary": "Returns gross transactions filtered by date (business day) for a property for a given period.",
        "description": "Returns the raw transaction data for a given property and time period.\r\nStores an entry in the export audit log.<br>You must have at least one of these scopes: 'transactions.export, accounting.read'.",
        "operationId": "FinanceAccountsExport-gross-dailyPost",
        "parameters": [
          {
            "in": "query",
            "name": "propertyId",
            "description": "Specifies the property transactions will be aggregated for.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "from",
            "description": "The inclusive start date of the interval",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "to",
            "description": "The exclusive end date of the interval",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "query",
            "name": "reference",
            "description": "Filter transactions by reference (reservation id/external folio id/property id for house folio).",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "accountingSchema",
            "description": "Allows to override the default accounting schema. Only specify this, when you know what you are doing.",
            "schema": {
              "type": "string",
              "enum": [
                "Simple",
                "Extended"
              ]
            }
          },
          {
            "in": "header",
            "name": "Idempotency-Key",
            "description": "Unique key for safely retrying requests without accidentally performing the same operation twice. \nWe'll always send back the same response for requests made with the same key, \nand keys can't be reused with different request parameters. Keys expire after 24 hours.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExportGrossTransactionListModel"
                }
              }
            }
          },
          "204": {
            "description": "No transactions found."
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "You are unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "The Request-URI could not be found."
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred."
          },
          "503": {
            "description": "The server is currently unavailable. Please try later."
          }
        },
        "security": [
          {
            "oauth2": [
              "transactions.export",
              "accounting.read",
              "admin"
            ]
          }
        ]
      }
    },
    "/finance/v1/accounts/schema": {
      "get": {
        "tags": [
          "SubLedger"
        ],
        "summary": "Returns the chart of accounts of the subledger.",
        "description": "Returns the schema of subledger, split into global and guest ledger.<br>You must have at least one of these scopes: 'subledger.read, accounting.read'.",
        "operationId": "FinanceAccountsSchemaGet",
        "parameters": [
          {
            "in": "query",
            "name": "propertyId",
            "description": "Filter account list by property ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "depth",
            "description": "How many hierarchy levels to include (between 1 and 4, default is 1).",
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 1,
              "maximum": 2147483647
            }
          },
          {
            "in": "query",
            "name": "includeArchived",
            "description": "If set to true, also includes archived accounts. If not set, or set to false, it only returns non-archived accounts",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "accountingSchema",
            "description": "Allows to override the default accounting schema. Only specify this, when you know what you are doing.",
            "schema": {
              "type": "string",
              "enum": [
                "Simple",
                "Extended"
              ]
            }
          },
          {
            "in": "query",
            "name": "languageCode",
            "description": "The language for the the report. If not specified, language code from \"Accept-Language\" will be used.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChartOfAccountsModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "You are unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "The Request-URI could not be found."
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred."
          },
          "503": {
            "description": "The server is currently unavailable. Please try later."
          }
        },
        "security": [
          {
            "oauth2": [
              "subledger.read",
              "accounting.read",
              "admin"
            ]
          }
        ]
      }
    },
    "/finance/v1/global-accounts": {
      "get": {
        "tags": [
          "SubLedger"
        ],
        "summary": "Returns a list of global accounts.",
        "description": "Returns a list of accounts in one property, having the same global account as parent.<br>You must have at least one of these scopes: 'subledger.read, accounting.read'.",
        "operationId": "FinanceGlobal-accountsGet",
        "parameters": [
          {
            "in": "query",
            "name": "propertyId",
            "description": "Filter account list by property ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "parent",
            "description": "Filter account list by the parent account's number.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeArchived",
            "description": "If set to true, also includes archived accounts. If not set, or set to false, it only returns non-archived accounts",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "accountingSchema",
            "description": "Allows to override the default accounting schema",
            "schema": {
              "type": "string",
              "enum": [
                "Simple",
                "Extended"
              ]
            }
          },
          {
            "in": "query",
            "name": "languageCode",
            "description": "The language for the the report",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "pageNumber",
            "description": "Page number, starting from 1 and defaulting to 1. Results in 204 if there are no items on that page.",
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "description": "Page size. If this is not set, the pageNumber will be ignored and all values returned.",
            "schema": {
              "type": "integer",
              "default": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FinanceAccountListModel"
                }
              }
            }
          },
          "204": {
            "description": "No accounts found."
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "You are unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "The Request-URI could not be found."
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred."
          },
          "503": {
            "description": "The server is currently unavailable. Please try later."
          }
        },
        "security": [
          {
            "oauth2": [
              "subledger.read",
              "accounting.read",
              "admin"
            ]
          }
        ]
      }
    },
    "/finance/v1/guest-accounts": {
      "get": {
        "tags": [
          "SubLedger"
        ],
        "summary": "Returns a list of guest accounts.",
        "description": "Returns a list of accounts in one property for a reservation.<br>You must have at least one of these scopes: 'subledger.read, accounting.read'.",
        "operationId": "FinanceGuest-accountsGet",
        "parameters": [
          {
            "in": "query",
            "name": "propertyId",
            "description": "Filter account list by property id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "reservationId",
            "description": "Filter account list by reservation id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "parent",
            "description": "Filter account list by the parent account's number.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "languageCode",
            "description": "The language for the the report",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "pageNumber",
            "description": "Page number, starting from 1 and defaulting to 1. Results in 204 if there are no items on that page.",
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "description": "Page size. If this is not set, the pageNumber will be ignored and all values returned.",
            "schema": {
              "type": "integer",
              "default": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FinanceAccountListModel"
                }
              }
            }
          },
          "204": {
            "description": "No accounts found."
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "You are unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "The Request-URI could not be found."
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred."
          },
          "503": {
            "description": "The server is currently unavailable. Please try later."
          }
        },
        "security": [
          {
            "oauth2": [
              "subledger.read",
              "accounting.read",
              "admin"
            ]
          }
        ]
      }
    },
    "/finance/v1/external-accounts": {
      "get": {
        "tags": [
          "SubLedger"
        ],
        "summary": "Returns a list of external accounts.",
        "description": "Returns a list of accounts in one property for a folio.<br>You must have at least one of these scopes: 'subledger.read, accounting.read'.",
        "operationId": "FinanceExternal-accountsGet",
        "parameters": [
          {
            "in": "query",
            "name": "propertyId",
            "description": "Filter account list by property id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "folioId",
            "description": "Filter account list by folio id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "parent",
            "description": "Filter account list by the parent account's number.",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "languageCode",
            "description": "The language for the the report",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "pageNumber",
            "description": "Page number, starting from 1 and defaulting to 1. Results in 204 if there are no items on that page.",
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "description": "Page size. If this is not set, the pageNumber will be ignored and all values returned.",
            "schema": {
              "type": "integer",
              "default": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FinanceAccountListModel"
                }
              }
            }
          },
          "204": {
            "description": "No accounts found."
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "You are unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "The Request-URI could not be found."
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred."
          },
          "503": {
            "description": "The server is currently unavailable. Please try later."
          }
        },
        "security": [
          {
            "oauth2": [
              "subledger.read",
              "accounting.read",
              "admin"
            ]
          }
        ]
      }
    },
    "/finance/v1/accounts/{number}": {
      "get": {
        "tags": [
          "SubLedger"
        ],
        "summary": "Returns one account.",
        "description": "Returns one account, as specified by its number and the property.<br>You must have at least one of these scopes: 'subledger.read, accounting.read'.",
        "operationId": "FinanceAccountsByNumberGet",
        "parameters": [
          {
            "in": "path",
            "name": "number",
            "description": "The account number",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "propertyId",
            "description": "Specifies the property the account is in.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "transactionLimit",
            "description": "Limit how many transactions should be included in the view (between 0 and 50, defaults to 0).",
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0,
              "maximum": 100
            }
          },
          {
            "in": "query",
            "name": "includeArchived",
            "description": "If set to true, also includes archived accounts. If not set, or set to false, it only returns non-archived accounts",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "accountingSchema",
            "description": "Allows to override the default accounting schema. Only specify this, when you know what you are doing.",
            "schema": {
              "type": "string",
              "enum": [
                "Simple",
                "Extended"
              ]
            }
          },
          {
            "in": "query",
            "name": "languageCode",
            "description": "The language for the the report",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FinanceAccountModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "You are unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "The Request-URI could not be found."
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred."
          },
          "503": {
            "description": "The server is currently unavailable. Please try later."
          }
        },
        "security": [
          {
            "oauth2": [
              "subledger.read",
              "accounting.read",
              "admin"
            ]
          }
        ]
      }
    },
    "/finance/v1/accounts/child-accounts": {
      "get": {
        "tags": [
          "SubLedger"
        ],
        "summary": "Returns a list of child accounts for a specified parent account.",
        "description": "<br>You must have at least one of these scopes: 'subledger.read, accounting.read'.",
        "operationId": "FinanceAccountsChild-accountsGet",
        "parameters": [
          {
            "in": "query",
            "name": "propertyId",
            "description": "Filter account list by property id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "parent",
            "description": "Filter account list by the parent account's number.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "languageCode",
            "description": "The language for the the report",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "accountingSchema",
            "description": "Allows to override the default accounting schema",
            "schema": {
              "type": "string",
              "enum": [
                "Simple",
                "Extended"
              ]
            }
          },
          {
            "in": "query",
            "name": "includeArchived",
            "description": "If set to true, also includes archived accounts. If not set, or set to false, it only returns non-archived accounts",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "pageNumber",
            "description": "Page number, starting from 1 and defaulting to 1. Results in 204 if there are no items on that page.",
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "description": "Page size. If this is not set, the pageNumber will be ignored and all values returned.",
            "schema": {
              "type": "integer",
              "default": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FinanceAccountListModel"
                }
              }
            }
          },
          "204": {
            "description": "No accounts found."
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "You are unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "The Request-URI could not be found."
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred."
          },
          "503": {
            "description": "The server is currently unavailable. Please try later."
          }
        },
        "security": [
          {
            "oauth2": [
              "subledger.read",
              "accounting.read",
              "admin"
            ]
          }
        ]
      }
    },
    "/finance/v1/types/currencies": {
      "get": {
        "tags": [
          "Types"
        ],
        "summary": "Returns a list of all currencies.",
        "description": "Returns a list of all currencies.",
        "operationId": "FinanceTypesCurrenciesGet",
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CurrencyListModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "You are unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "The Request-URI could not be found."
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred."
          },
          "503": {
            "description": "The server is currently unavailable. Please try later."
          }
        }
      }
    },
    "/finance/v1/types/payment-methods": {
      "get": {
        "tags": [
          "Types"
        ],
        "summary": "Returns a list of all supported payment methods.",
        "description": "Returns a list of all supported payment methods.",
        "operationId": "FinanceTypesPayment-methodsGet",
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentMethodListModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "You are unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "The Request-URI could not be found."
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred."
          },
          "503": {
            "description": "The server is currently unavailable. Please try later."
          }
        }
      }
    },
    "/finance/v1/types/service-types": {
      "get": {
        "tags": [
          "Types"
        ],
        "summary": "Returns a list of all supported service types.",
        "description": "Returns a list of all supported service types.",
        "operationId": "FinanceTypesService-typesGet",
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceTypeListModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "You are unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "The Request-URI could not be found."
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred."
          },
          "503": {
            "description": "The server is currently unavailable. Please try later."
          }
        }
      }
    },
    "/finance/v1/types/vat": {
      "get": {
        "tags": [
          "Types"
        ],
        "summary": "Returns a list of all VAT types.",
        "description": "Returns a list of all VAT types and percents for a country. Supported:<br />\r\n- Belgium (BE)<br />\r\n- Botswana (BW)<br />\r\n- Cape Verde (CV)<br />\r\n- Croatia (HR)<br />\r\n- Czech Republic (CZ)<br />\r\n- Denmark (DK)<br />\r\n- Finland (FI)<br />\r\n- France (FR) - without the super-reduced 2.1% VAT<br />\r\n- French Polynesia (PF)<br />\r\n- Germany (DE)<br />\r\n- Morocco (MA)<br />\r\n- Netherlands (NL)<br />\r\n- Norway (NO) - without the VAT for raw fish supplies<br />\r\n- Spain (ES)<br />\r\n- South Africa (ZA)<br />\r\n- Sweden (SE)<br />\r\n- Switzerland (CH)<br />\r\n- United Kingdom (GB)",
        "operationId": "FinanceTypesVatGet",
        "parameters": [
          {
            "in": "query",
            "name": "isoCountryCode",
            "description": "The 2-letter ISO country code",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "atDate",
            "description": "If specified, returns only the VAT types that are in place for this specific date.\r\nIf nothing specified, returns all VAT types that existed and will exist for the country.",
            "schema": {
              "type": "string",
              "format": "date"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VatListModel"
                }
              }
            }
          },
          "204": {
            "description": "No VAT setup for the specified country."
          },
          "400": {
            "description": "Bad request."
          },
          "401": {
            "description": "You are unauthorized."
          },
          "403": {
            "description": "Forbidden."
          },
          "404": {
            "description": "The Request-URI could not be found."
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred."
          },
          "503": {
            "description": "The server is currently unavailable. Please try later."
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "oauth2": {
        "type": "oauth2",
        "flows": {
          "clientCredentials": {
            "tokenUrl": "https://identity.apaleo.com/connect/token",
            "scopes": {
              "openid": "OpenID",
              "profile": "Profile",
              "account.manage": "Update the current account",
              "account.suspend": "Suspend the current account",
              "accounting.read": "Read accounting details",
              "availability.manage": "This scope allows to modify the availability",
              "availability.read": "Retrieve availabiltiy information",
              "companies.manage": "Modify companies",
              "companies.read": "Read companies",
              "folios.manage": "Perform actions on folios",
              "folios.payment-with-charges": "Requires you to provide a list of charges being covered by the payment",
              "folios.read": "Read folios, including charges and payments",
              "invoices.manage": "Mark invoices as paid",
              "invoices.create": "Create invoices",
              "invoices.read": "Retrieve invoices and preview invoices as data or PDF",
              "logs.read": "Read logs",
              "maintenances.manage": "Change maintenacne windows",
              "maintenances.read": "Read maintenance information",
              "offer-index.read": "Request offer index",
              "offers.read": "Request offers",
              "operations.change-room-state": "Change room state",
              "operations.trigger-night-audit": "Trigger night audit",
              "prepayment-notices.read": "Creates prepayment notices as PDF",
              "rateplans.read-corporate": "Read corporate rate plans",
              "rateplans.read-negotiated": "Read negotiated rate plans",
              "rates.manage": "Update rates and restrictions",
              "rates.read": "Read rates and restrictions",
              "reports.read": "Retrieve report data",
              "reservations.force-manage": "Modify stay dates regardless of availability or restrictions",
              "reservations.manage": "Modify, check in/out, cancel reservations",
              "reservations.read": "Read reservations",
              "routings.create": "Create routings",
              "routings.manage": "Modify routings",
              "routings.read": "Read routings",
              "setup.manage": "This scope allows the app to modify settings and configurations for the whole account and all properties, including creating, modifying and deleting units, unit groups, rate plans and properties.",
              "setup.read": "This scope allows the app to read settings and configurations for the whole account and all properties, including reading units, unit groups, and rate plans.",
              "payment:configuration.read": "Read payment configuration",
              "payment:invoices.read": "Read invoices",
              "payment:reports.read": "Read settlement reports",
              "payment:transactions.read": "Read payment transactions",
              "distribution:reservations.manage": "Create and modify bookings and reservations",
              "distribution:subscriptions.manage": "Manage ARI notification configuration",
              "identity:account-users.manage": "Manage users",
              "identity:account-users.read": "Read users",
              "integration:ui-integrations.manage": "Include apaleo One content",
              "profile:manage": "Manage profiles",
              "profile:read": "Read profiles"
            }
          }
        }
      }
    },
    "schemas": {
      "AccountingTransactionListModel": {
        "required": [
          "transactions"
        ],
        "type": "object",
        "properties": {
          "transactions": {
            "description": "The list of transactions",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccountingTransactionModel"
            }
          }
        },
        "example": "{\n  \"transactions\": [\n    {\n      \"timestamp\": \"2022-06-09T09:41:20.2889225Z\",\n      \"date\": \"2022-06-09\",\n      \"debitedAccount\": {\n        \"name\": \"Receivables for Reservation KFEMSDED-1\",\n        \"number\": \"KFEMSDED-1_Receivables\",\n        \"parentNumber\": \"1200\",\n        \"type\": \"Receivables\"\n      },\n      \"creditedAccount\": {\n        \"name\": \"Revenue Accommodation Other\",\n        \"number\": \"RevenueAccommodation_Other:19\",\n        \"parentNumber\": \"5000\",\n        \"type\": \"Revenues\"\n      },\n      \"command\": \"PostCharge\",\n      \"amount\": {\n        \"amount\": 1234.56,\n        \"currency\": \"EUR\"\n      },\n      \"receipt\": {\n        \"type\": \"Custom\",\n        \"number\": \"custom receipt\"\n      },\n      \"entryNumber\": \"00000321\",\n      \"reference\": \"IDDQD-EXT-1\",\n      \"referenceType\": \"House\",\n      \"entryGroupNumber\": \"0000321\"\n    }\n  ]\n}"
      },
      "AccountingTransactionModel": {
        "required": [
          "amount",
          "command",
          "creditedAccount",
          "date",
          "debitedAccount",
          "entryGroupNumber",
          "entryNumber",
          "reference",
          "referenceType",
          "timestamp"
        ],
        "type": "object",
        "properties": {
          "timestamp": {
            "format": "date-time",
            "description": "Timestamp with time zone information, when the booking was done<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
            "type": "string"
          },
          "date": {
            "format": "date",
            "description": "The business date when the booking was done",
            "type": "string",
            "example": "2020-10-10"
          },
          "debitedAccount": {
            "$ref": "#/components/schemas/ExportAccountModel"
          },
          "creditedAccount": {
            "$ref": "#/components/schemas/ExportAccountModel"
          },
          "command": {
            "description": "The type of business transaction which triggered the booking",
            "enum": [
              "PostCharge",
              "PostPayment",
              "MoveLineItem",
              "PostPrepayment",
              "PostToAccountsReceivables",
              "PostPrepaymentVat",
              "PostToLossOfAccountsReceivables",
              "System"
            ],
            "type": "string"
          },
          "amount": {
            "$ref": "#/components/schemas/PreciseMonetaryValueModel"
          },
          "receipt": {
            "$ref": "#/components/schemas/ReceiptModel"
          },
          "entryNumber": {
            "description": "All transactions having the same number form one booking",
            "type": "string"
          },
          "reference": {
            "description": "The reference for the transactions, reservation id for guest folios, folio id for external folios, property code for the house folio",
            "type": "string"
          },
          "referenceType": {
            "description": "Does this transaction belong to a reservation, a house or an external folio",
            "enum": [
              "House",
              "Guest",
              "External"
            ],
            "type": "string"
          },
          "entryGroupNumber": {
            "description": "All transactions triggered by the same business transaction share one group number",
            "type": "string"
          }
        }
      },
      "AccountingTransactionPairListModel": {
        "required": [
          "accountTransactionPairs"
        ],
        "type": "object",
        "properties": {
          "accountTransactionPairs": {
            "description": "The list of aggregated transaction pairs",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccountingTransactionPairModel"
            }
          }
        },
        "example": "{\n  \"accountTransactionPairs\": [\n    {\n      \"debitedAccount\": {\n        \"name\": \"Liabilities\",\n        \"number\": \"3000\",\n        \"type\": \"Liabilities\"\n      },\n      \"creditedAccount\": {\n        \"name\": \"Receivables\",\n        \"number\": \"1200\",\n        \"type\": \"Receivables\"\n      },\n      \"amount\": {\n        \"amount\": 100.0,\n        \"currency\": \"EUR\"\n      }\n    }\n  ]\n}"
      },
      "AccountingTransactionPairModel": {
        "required": [
          "amount",
          "creditedAccount",
          "debitedAccount"
        ],
        "type": "object",
        "properties": {
          "debitedAccount": {
            "$ref": "#/components/schemas/ExportAccountModel"
          },
          "creditedAccount": {
            "$ref": "#/components/schemas/ExportAccountModel"
          },
          "amount": {
            "$ref": "#/components/schemas/PreciseMonetaryValueModel"
          }
        }
      },
      "AddedChargeModel": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "The id of the added charge",
            "type": "string"
          },
          "feeChargeIds": {
            "description": "The fee charges ids",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "example": "{\n  \"id\": \"XT347518-1-1\",\n  \"feeChargeIds\": [\n    \"XT347518-1-SERVICE-1\"\n  ]\n}"
      },
      "AddressModel": {
        "required": [
          "addressLine1",
          "city",
          "countryCode",
          "postalCode"
        ],
        "type": "object",
        "properties": {
          "addressLine1": {
            "type": "string"
          },
          "addressLine2": {
            "type": "string"
          },
          "postalCode": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "regionCode": {
            "type": "string"
          },
          "countryCode": {
            "type": "string"
          }
        }
      },
      "AggregatesTotalModel": {
        "required": [
          "balance",
          "creditedAmount",
          "debitedAmount"
        ],
        "type": "object",
        "properties": {
          "creditedAmount": {
            "$ref": "#/components/schemas/PreciseMonetaryValueModel"
          },
          "debitedAmount": {
            "$ref": "#/components/schemas/PreciseMonetaryValueModel"
          },
          "balance": {
            "$ref": "#/components/schemas/PreciseMonetaryValueModel"
          }
        }
      },
      "AggregateTransactionItemModel": {
        "required": [
          "account",
          "balance",
          "creditedAmount",
          "debitedAmount"
        ],
        "type": "object",
        "properties": {
          "account": {
            "$ref": "#/components/schemas/ExportAccountModel"
          },
          "creditedAmount": {
            "$ref": "#/components/schemas/PreciseMonetaryValueModel"
          },
          "debitedAmount": {
            "$ref": "#/components/schemas/PreciseMonetaryValueModel"
          },
          "balance": {
            "$ref": "#/components/schemas/PreciseMonetaryValueModel"
          }
        }
      },
      "AggregateTransactionListModel": {
        "required": [
          "aggregations",
          "total"
        ],
        "type": "object",
        "properties": {
          "aggregations": {
            "description": "Aggregated data for the main accounts.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AggregateTransactionItemModel"
            }
          },
          "total": {
            "$ref": "#/components/schemas/AggregatesTotalModel"
          }
        },
        "example": "{\n  \"aggregations\": [\n    {\n      \"account\": {\n        \"name\": \"Payments\",\n        \"number\": \"1000\",\n        \"type\": \"Payments\"\n      },\n      \"creditedAmount\": {\n        \"amount\": 202.0,\n        \"currency\": \"EUR\"\n      },\n      \"debitedAmount\": {\n        \"amount\": 170.0,\n        \"currency\": \"EUR\"\n      },\n      \"balance\": {\n        \"amount\": -32.0,\n        \"currency\": \"EUR\"\n      }\n    },\n    {\n      \"account\": {\n        \"name\": \"Revenues\",\n        \"number\": \"5000\",\n        \"type\": \"Revenues\"\n      },\n      \"creditedAmount\": {\n        \"amount\": 233.0,\n        \"currency\": \"EUR\"\n      },\n      \"debitedAmount\": {\n        \"amount\": 265.0,\n        \"currency\": \"EUR\"\n      },\n      \"balance\": {\n        \"amount\": 32.0,\n        \"currency\": \"EUR\"\n      }\n    }\n  ],\n  \"total\": {\n    \"creditedAmount\": {\n      \"amount\": 435.0,\n      \"currency\": \"EUR\"\n    },\n    \"debitedAmount\": {\n      \"amount\": 435.0,\n      \"currency\": \"EUR\"\n    },\n    \"balance\": {\n      \"amount\": 0.0,\n      \"currency\": \"EUR\"\n    }\n  }\n}"
      },
      "AllowanceModel": {
        "required": [
          "amount",
          "created",
          "id",
          "reason",
          "serviceDate",
          "serviceType"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "ID for allowances. This is unique within one folio.",
            "type": "string"
          },
          "amount": {
            "$ref": "#/components/schemas/AmountModel"
          },
          "reason": {
            "description": "Reason why this allowance was posted",
            "type": "string"
          },
          "serviceType": {
            "enum": [
              "Other",
              "Accommodation",
              "FoodAndBeverages",
              "CancellationFees",
              "NoShow",
              "CityTax"
            ],
            "type": "string"
          },
          "serviceDate": {
            "format": "date",
            "type": "string",
            "example": "2020-10-10"
          },
          "created": {
            "format": "date-time",
            "description": "Date of creation<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
            "type": "string"
          },
          "movedFrom": {
            "$ref": "#/components/schemas/EmbeddedFolioModel"
          },
          "movedTo": {
            "$ref": "#/components/schemas/EmbeddedFolioModel"
          },
          "movedReason": {
            "description": "A reason why move operation was performed",
            "type": "string"
          },
          "sourceChargeId": {
            "description": "ID of a charge allowance posted for. `Null` if posted for folio",
            "type": "string"
          },
          "subAccountId": {
            "description": "ID of the custom sub-account the allowance has been posted to",
            "type": "string"
          }
        }
      },
      "AmountModel": {
        "required": [
          "currency",
          "grossAmount",
          "netAmount",
          "vatPercent",
          "vatType"
        ],
        "type": "object",
        "properties": {
          "grossAmount": {
            "format": "double",
            "type": "number"
          },
          "netAmount": {
            "format": "double",
            "type": "number"
          },
          "vatType": {
            "enum": [
              "Null",
              "VeryReduced",
              "Reduced",
              "Normal",
              "Without",
              "Special",
              "ReducedCovid19",
              "NormalCovid19"
            ],
            "type": "string"
          },
          "vatPercent": {
            "format": "double",
            "type": "number"
          },
          "currency": {
            "type": "string"
          }
        },
        "example": "{\n  \"grossAmount\": 107.0,\n  \"netAmount\": 100.0,\n  \"vatType\": \"Reduced\",\n  \"vatPercent\": 7.0,\n  \"currency\": \"USD\"\n}"
      },
      "BankAccountModel": {
        "type": "object",
        "properties": {
          "iban": {
            "type": "string"
          },
          "bic": {
            "type": "string"
          },
          "bank": {
            "type": "string"
          }
        }
      },
      "BulkAllowanceCreatedItemModel": {
        "required": [
          "id",
          "sourceChargeId"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "The id of the created allowance",
            "type": "string"
          },
          "sourceChargeId": {
            "description": "The id of the charge the allowance has been added to",
            "type": "string"
          }
        }
      },
      "BulkAllowanceCreatedModel": {
        "required": [
          "items"
        ],
        "type": "object",
        "properties": {
          "items": {
            "description": "Allowances that have been created",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BulkAllowanceCreatedItemModel"
            }
          }
        },
        "example": "{\n  \"items\": [\n    {\n      \"id\": \"IDFKA-1-1-A-1\",\n      \"sourceChargeId\": \"IDKFA-1-1-TS-1\"\n    },\n    {\n      \"id\": \"IDFKA-1-1-A-2\",\n      \"sourceChargeId\": \"IDKFA-1-1-ES-2\"\n    }\n  ]\n}"
      },
      "BulkMoveItemRequest": {
        "required": [
          "sourceFolioId",
          "targetFolioId"
        ],
        "type": "object",
        "properties": {
          "sourceFolioId": {
            "description": "ID of the source folio",
            "type": "string"
          },
          "targetFolioId": {
            "description": "ID of the target folio",
            "type": "string"
          },
          "chargeIds": {
            "description": "The IDs of the charges that should be moved",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "BulkMoveRequest": {
        "required": [
          "items",
          "reason"
        ],
        "type": "object",
        "properties": {
          "items": {
            "description": "The list of actions to perform",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BulkMoveItemRequest"
            }
          },
          "reason": {
            "description": "Description of why the move is performed",
            "type": "string"
          }
        },
        "example": "{\n  \"items\": [\n    {\n      \"sourceFolioId\": \"SPRJDQNU-1\",\n      \"targetFolioId\": \"KFCSQUID-1\",\n      \"chargeIds\": [\n        \"SPRJDQNU-1-C-1\",\n        \"SPRJDQNU-1-C-5\"\n      ]\n    },\n    {\n      \"sourceFolioId\": \"TTDKOWNC-1\",\n      \"targetFolioId\": \"YXPZMQAS-1\",\n      \"chargeIds\": [\n        \"TTDKOWNC-1-C-2\",\n        \"TTDKOWNC-1-C-3\"\n      ]\n    }\n  ],\n  \"reason\": \"Test\"\n}"
      },
      "ChargeModel": {
        "required": [
          "amount",
          "created",
          "id",
          "isPosted",
          "name",
          "quantity",
          "serviceDate",
          "serviceType"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "ID for charges. This is unique within one folio.",
            "type": "string"
          },
          "serviceType": {
            "description": "The type of the service or good",
            "enum": [
              "Other",
              "Accommodation",
              "FoodAndBeverages",
              "CancellationFees",
              "NoShow",
              "CityTax"
            ],
            "type": "string"
          },
          "name": {
            "description": "The name, article number, or other description of this charge",
            "type": "string"
          },
          "translatedNames": {
            "description": "The name, article number, or other description of this charge\r\ntranslated in different languages",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "isPosted": {
            "description": "Status: is this already posted?",
            "type": "boolean"
          },
          "serviceDate": {
            "format": "date",
            "description": "The day when the line item is (or was) due to be charged.",
            "type": "string",
            "example": "2020-10-10"
          },
          "created": {
            "format": "date-time",
            "description": "Date of creation<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
            "type": "string"
          },
          "movedFrom": {
            "$ref": "#/components/schemas/EmbeddedFolioModel"
          },
          "movedTo": {
            "$ref": "#/components/schemas/EmbeddedFolioModel"
          },
          "movedReason": {
            "description": "A reason why move operation was performed",
            "type": "string"
          },
          "routedFrom": {
            "$ref": "#/components/schemas/EmbeddedFolioModel"
          },
          "routedTo": {
            "$ref": "#/components/schemas/EmbeddedFolioModel"
          },
          "amount": {
            "$ref": "#/components/schemas/AmountModel"
          },
          "receipt": {
            "description": "Receipt for this transaction",
            "type": "string"
          },
          "groupId": {
            "description": "Identifier used for grouping related charges together",
            "type": "string"
          },
          "subAccountId": {
            "description": "ID of the custom sub-account the charge has been posted to",
            "type": "string"
          },
          "quantity": {
            "format": "int32",
            "description": "The count of services provided",
            "type": "integer"
          }
        }
      },
      "ChartOfAccountsModel": {
        "required": [
          "externalAccounts",
          "globalAccounts",
          "guestAccounts"
        ],
        "type": "object",
        "properties": {
          "globalAccounts": {
            "description": "The predefined list of global accounts of a property's subledger",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SlimFinanceAccountModel"
            }
          },
          "guestAccounts": {
            "description": "The predefined list of guest specific accounts of a property's subledger.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SlimFinanceAccountModel"
            }
          },
          "externalAccounts": {
            "description": "The predefined list of external accounts of a property's subledger.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SlimFinanceAccountModel"
            }
          }
        },
        "example": "{\n  \"globalAccounts\": [\n    {\n      \"accountNumber\": \"9000\",\n      \"name\": \"House\",\n      \"type\": \"House\",\n      \"hasChildren\": false,\n      \"isArchived\": true\n    },\n    {\n      \"accountNumber\": \"1000\",\n      \"name\": \"Payments\",\n      \"type\": \"Payments\",\n      \"hasChildren\": true,\n      \"isArchived\": false\n    },\n    {\n      \"accountNumber\": \"5000\",\n      \"name\": \"Revenues\",\n      \"type\": \"Revenues\",\n      \"hasChildren\": true,\n      \"isArchived\": false\n    }\n  ],\n  \"guestAccounts\": [\n    {\n      \"accountNumber\": \"3000\",\n      \"name\": \"Guest Liabilities\",\n      \"type\": \"Liabilities\",\n      \"hasChildren\": true,\n      \"isArchived\": false\n    },\n    {\n      \"accountNumber\": \"1200\",\n      \"name\": \"Guest Receivables\",\n      \"type\": \"Receivables\",\n      \"hasChildren\": true,\n      \"isArchived\": false\n    }\n  ],\n  \"externalAccounts\": [\n    {\n      \"accountNumber\": \"1200\",\n      \"name\": \"External Receivables\",\n      \"type\": \"Receivables\",\n      \"hasChildren\": true,\n      \"isArchived\": false\n    }\n  ]\n}"
      },
      "CommercialInfoModel": {
        "required": [
          "registerEntry",
          "taxId"
        ],
        "type": "object",
        "properties": {
          "registerEntry": {
            "type": "string"
          },
          "taxId": {
            "type": "string"
          },
          "managingDirectors": {
            "type": "string"
          }
        }
      },
      "CompanyInfoModel": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "description": "Name of the company",
            "type": "string"
          },
          "taxId": {
            "description": "Tax or Vat ID of the company",
            "type": "string"
          }
        }
      },
      "CorrectFolioRequest": {
        "required": [
          "reason"
        ],
        "type": "object",
        "properties": {
          "reason": {
            "description": "Description of why the correction is performed",
            "type": "string"
          },
          "chargeIds": {
            "description": "The IDs of the charges that should be moved",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "allowanceIds": {
            "description": "The IDs of the allowances that should be moved\r\nOnly moving global allowances is supported",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "transitoryChargeIds": {
            "description": "The IDs of the transitory charges that should be moved",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "example": "{\n  \"reason\": \"Minibar is not paid by the company\",\n  \"chargeIds\": [\n    \"IDDQD-1-C-1\",\n    \"IDDQD-1-C-5\"\n  ],\n  \"allowanceIds\": [\n    \"IDDQD-1-A-1\",\n    \"IDDQD-1-A-5\"\n  ],\n  \"transitoryChargeIds\": [\n    \"IDDQD-1-TC-1\",\n    \"IDDQD-1-TC-5\"\n  ]\n}"
      },
      "CountModel": {
        "required": [
          "count"
        ],
        "type": "object",
        "properties": {
          "count": {
            "format": "int64",
            "type": "integer"
          }
        },
        "example": "{\n  \"count\": 50\n}"
      },
      "CreateAccountPaymentRequest": {
        "required": [
          "amount"
        ],
        "type": "object",
        "properties": {
          "accountOwner": {
            "description": "Account owner of the payment account, default is `Guest`",
            "enum": [
              "Guest",
              "Booker"
            ],
            "type": "string"
          },
          "amount": {
            "$ref": "#/components/schemas/MonetaryValueModel"
          },
          "paidCharges": {
            "description": "List of charges and amount being covered by this payment.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentPaidChargesRequest"
            }
          }
        },
        "example": "{\n  \"amount\": {\n    \"amount\": 230.0,\n    \"currency\": \"EUR\"\n  },\n  \"paidCharges\": [\n    {\n      \"chargeId\": \"BLIPKWXP-1-1-1\",\n      \"amount\": 200.0\n    }\n  ]\n}"
      },
      "CreateAllowanceBulkItemModel": {
        "required": [
          "amount",
          "chargeId"
        ],
        "type": "object",
        "properties": {
          "chargeId": {
            "description": "The ID of the charge",
            "type": "string"
          },
          "amount": {
            "$ref": "#/components/schemas/MonetaryValueModel"
          }
        }
      },
      "CreateAllowanceBulkModel": {
        "required": [
          "items",
          "reason"
        ],
        "type": "object",
        "properties": {
          "items": {
            "description": "The list of actions to perform",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateAllowanceBulkItemModel"
            }
          },
          "reason": {
            "description": "Description of why allowances are added",
            "type": "string"
          },
          "businessDate": {
            "format": "date",
            "description": "The business date of the allowance. Defaults to the current date.\r\nIn some cases you might want to post the allowances to the previous business date, this is only possible until 6 AM of the current day.",
            "type": "string",
            "example": "2020-10-10"
          }
        },
        "example": "{\n  \"items\": [\n    {\n      \"chargeId\": \"IDDQD-1-1-TS-1\",\n      \"amount\": {\n        \"amount\": 13.0,\n        \"currency\": \"EUR\"\n      }\n    },\n    {\n      \"chargeId\": \"IDDQD-1-1-ES-2\",\n      \"amount\": {\n        \"amount\": 37.0,\n        \"currency\": \"EUR\"\n      }\n    }\n  ],\n  \"reason\": \"discount\"\n}"
      },
      "CreateAllowanceForChargeModel": {
        "required": [
          "amount",
          "reason"
        ],
        "type": "object",
        "properties": {
          "reason": {
            "description": "Reason why this allowance is posted",
            "type": "string"
          },
          "amount": {
            "$ref": "#/components/schemas/MonetaryValueModel"
          },
          "businessDate": {
            "format": "date",
            "description": "The business date of the allowance. Defaults to the current date.\r\nIn some cases you might want to post the allowances to the previous business date, this is only possible until 6 AM of the current day.",
            "type": "string",
            "example": "2020-10-10"
          }
        },
        "example": "{\n  \"reason\": \"Reason\",\n  \"amount\": {\n    \"amount\": 1.0,\n    \"currency\": \"EUR\"\n  }\n}"
      },
      "CreateAllowanceForFolioModel": {
        "required": [
          "amount",
          "reason",
          "serviceType",
          "vatType"
        ],
        "type": "object",
        "properties": {
          "serviceType": {
            "description": "The service type, used by accounting to determine the correct revenue account",
            "enum": [
              "Other",
              "Accommodation",
              "FoodAndBeverages",
              "CityTax"
            ],
            "type": "string"
          },
          "vatType": {
            "description": "The VAT type, used by accounting to determine the correct vat amount and account",
            "enum": [
              "Null",
              "VeryReduced",
              "Reduced",
              "Normal",
              "Without",
              "Special",
              "ReducedCovid19",
              "NormalCovid19"
            ],
            "type": "string"
          },
          "subAccountId": {
            "description": "ID of the custom sub-account to post the allowance to, used by accounting to determine the correct revenue account",
            "type": "string"
          },
          "reason": {
            "description": "Reason why this allowance is posted",
            "type": "string"
          },
          "amount": {
            "$ref": "#/components/schemas/MonetaryValueModel"
          },
          "businessDate": {
            "format": "date",
            "description": "The business date of the allowance. Defaults to the current date.\r\nIn some cases you might want to post the allowances to the previous business date, this is only possible until 6 AM of the current day.",
            "type": "string",
            "example": "2020-10-10"
          }
        },
        "example": "{\n  \"serviceType\": \"Other\",\n  \"vatType\": \"Normal\",\n  \"subAccountId\": \"MUC-REST\",\n  \"reason\": \"Good guy discount\",\n  \"amount\": {\n    \"amount\": 22.0,\n    \"currency\": \"EUR\"\n  }\n}"
      },
      "CreateAuthorizationPaymentRequest": {
        "required": [
          "amount",
          "transactionReference"
        ],
        "type": "object",
        "properties": {
          "transactionReference": {
            "description": "Reference to the original authorization transaction",
            "type": "string"
          },
          "amount": {
            "$ref": "#/components/schemas/MonetaryValueModel"
          },
          "paidCharges": {
            "description": "List of charges and amount being covered by this payment.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentPaidChargesRequest"
            }
          }
        },
        "example": "{\n  \"transactionReference\": \"564578124534890J\",\n  \"amount\": {\n    \"amount\": 330.0,\n    \"currency\": \"EUR\"\n  },\n  \"paidCharges\": [\n    {\n      \"chargeId\": \"BLIPKWXP-1-1-1\",\n      \"amount\": 230.0\n    }\n  ]\n}"
      },
      "CreateChargeModel": {
        "required": [
          "amount",
          "name",
          "serviceType",
          "vatType"
        ],
        "type": "object",
        "properties": {
          "serviceType": {
            "description": "The service type, used by accounting to determine the correct revenue account",
            "enum": [
              "Other",
              "Accommodation",
              "FoodAndBeverages",
              "CityTax"
            ],
            "type": "string"
          },
          "vatType": {
            "description": "The VAT type, used by accounting to determine the correct vat amount and account",
            "enum": [
              "Null",
              "VeryReduced",
              "Reduced",
              "Normal",
              "Without",
              "Special",
              "ReducedCovid19",
              "NormalCovid19"
            ],
            "type": "string"
          },
          "subAccountId": {
            "description": "ID of the custom sub-account to post the charge to, used by accounting to determine the correct revenue account",
            "type": "string"
          },
          "name": {
            "description": "The name, article number, or other description of this charge",
            "type": "string"
          },
          "amount": {
            "$ref": "#/components/schemas/MonetaryValueModel"
          },
          "receipt": {
            "description": "Receipt for this transaction",
            "type": "string"
          },
          "quantity": {
            "format": "int32",
            "description": "The count of services provided. Defaults to 1.\r\nNOTE: this field will become required 07.05.2020.",
            "type": "integer"
          },
          "businessDate": {
            "format": "date",
            "description": "The business date of the charge. Defaults to the current date.\r\nIn some cases you might want to post the charges to the previous business date, this is only possible until 6 AM of the current day.",
            "type": "string",
            "example": "2020-10-10"
          }
        },
        "example": "{\n  \"serviceType\": \"FoodAndBeverages\",\n  \"vatType\": \"Normal\",\n  \"subAccountId\": \"MUC-BEER\",\n  \"name\": \"Restaurant\",\n  \"amount\": {\n    \"amount\": 23.0,\n    \"currency\": \"EUR\"\n  },\n  \"receipt\": \"R23412\"\n}"
      },
      "CreateCustomPaymentRequest": {
        "required": [
          "amount",
          "method"
        ],
        "type": "object",
        "properties": {
          "method": {
            "description": "The payment method. Use 'CreditCard', if none of the specific credit cards types matches. 'Booking.com' only makes sense, if\r\nthe property (hotel) configured Booking.com > Finance to be 'Payments by Booking.com'",
            "enum": [
              "Cash",
              "BankTransfer",
              "CreditCard",
              "Amex",
              "VisaCredit",
              "VisaDebit",
              "MasterCard",
              "MasterCardDebit",
              "Maestro",
              "GiroCard",
              "DiscoverCard",
              "Diners",
              "Jcb",
              "BookingCom",
              "VPay",
              "PayPal",
              "Postcard",
              "Reka",
              "Twint",
              "Lunchcheck",
              "Voucher",
              "ChinaUnionPay",
              "Other",
              "Cheque",
              "Airbnb",
              "HolidayCheck"
            ],
            "type": "string"
          },
          "receipt": {
            "description": "The optional receipt you want to store for the payment. It defaults to the reservation or external folio id.\r\nThis field is required if you are adding payment to the house account",
            "type": "string"
          },
          "businessDate": {
            "format": "date",
            "description": "The business date of the payment. Defaults to the current date.\r\nIn some cases you might want to post the payments to the previous business date, this is only possible until 6 AM of the current day.",
            "type": "string",
            "example": "2020-10-10"
          },
          "amount": {
            "$ref": "#/components/schemas/MonetaryValueModel"
          },
          "paidCharges": {
            "description": "List of charges and amount being covered by this payment.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentPaidChargesRequest"
            }
          }
        },
        "example": "{\n  \"method\": \"Cash\",\n  \"receipt\": \"BLIPKWXP-1\",\n  \"amount\": {\n    \"amount\": 230.0,\n    \"currency\": \"EUR\"\n  },\n  \"paidCharges\": [\n    {\n      \"chargeId\": \"BLIPKWXP-1-1-1\",\n      \"amount\": 230.0\n    }\n  ]\n}"
      },
      "CreatedSubResourceIdModel": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          }
        },
        "example": "{\n  \"id\": \"XT347518-1-1\"\n}"
      },
      "CreateFolioModel": {
        "required": [
          "debitor"
        ],
        "type": "object",
        "properties": {
          "reservationId": {
            "description": "The ID of the reservation for which a guest folio should be created",
            "type": "string"
          },
          "companyId": {
            "description": "The ID of the company for which a folio should be created",
            "type": "string"
          },
          "debitor": {
            "$ref": "#/components/schemas/FolioDebitorModel"
          },
          "type": {
            "description": "The type of the folio to create. Default is the guest folio.\r\nThis field will become required 01.11.2019.",
            "enum": [
              "Guest",
              "External"
            ],
            "type": "string"
          },
          "propertyId": {
            "description": "The ID of the property for which an external folio should be created.",
            "type": "string"
          },
          "code": {
            "description": "Optional code for external folios.\r\nIf present, the id of the folio will be propertyId-code (MUC-SOMETHING);\r\nIf no code is provided, the id of the folio will be propertyId-ext-number (MUC-EXT-282).",
            "type": "string"
          }
        },
        "example": "{\n  \"reservationId\": \"TS23XF\",\n  \"debitor\": {\n    \"title\": \"Dr\",\n    \"firstName\": \"Jon\",\n    \"name\": \"Doe\",\n    \"address\": {\n      \"addressLine1\": \"My Street 1\",\n      \"postalCode\": \"12453\",\n      \"city\": \"MyCity\",\n      \"countryCode\": \"GB\"\n    },\n    \"company\": {\n      \"name\": \"Horns & Hooves Inc\",\n      \"taxId\": \"TAX-12345\"\n    },\n    \"reference\": \"SRC-1232\"\n  },\n  \"type\": \"Guest\"\n}"
      },
      "CreateFolioRefundRequest": {
        "required": [
          "amount",
          "method"
        ],
        "type": "object",
        "properties": {
          "method": {
            "description": "The payment method the refund will be accounted to",
            "enum": [
              "Cash",
              "BankTransfer",
              "CreditCard",
              "Amex",
              "VisaCredit",
              "VisaDebit",
              "MasterCard",
              "MasterCardDebit",
              "Maestro",
              "GiroCard",
              "DiscoverCard",
              "Diners",
              "Jcb",
              "BookingCom",
              "VPay",
              "PayPal",
              "Postcard",
              "Reka",
              "Twint",
              "Lunchcheck",
              "Voucher",
              "ChinaUnionPay",
              "Other",
              "Cheque",
              "Airbnb",
              "HolidayCheck"
            ],
            "type": "string"
          },
          "amount": {
            "$ref": "#/components/schemas/MonetaryValueModel"
          },
          "receipt": {
            "description": "The receipt for the refund",
            "type": "string"
          },
          "businessDate": {
            "format": "date",
            "description": "The business date of the refund. Defaults to the current date.\r\nIn some cases you might want to post the refunds to the previous business date, this is only possible until 6 AM of the current day.",
            "type": "string",
            "example": "2020-10-10"
          }
        },
        "example": "{\n  \"method\": \"Cash\",\n  \"amount\": {\n    \"amount\": 10.0,\n    \"currency\": \"EUR\"\n  },\n  \"receipt\": \"CSH-201824120003\"\n}"
      },
      "CreateInvoicePdfRequest": {
        "required": [
          "folioId",
          "languageCode"
        ],
        "type": "object",
        "properties": {
          "languageCode": {
            "description": "The language in which the invoice should be produced.",
            "type": "string"
          },
          "folioId": {
            "description": "The ID of the folio for which the invoice should be created.",
            "type": "string"
          }
        },
        "example": "{\n  \"languageCode\": \"en\",\n  \"folioId\": \"HBCXQZ-1\"\n}"
      },
      "CreateInvoiceWarningModel": {
        "description": "A warning about what would fail if you would try to create an invoice with the current folio.",
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "description": "The general classification of the warning, why an invoice would not be created if you would try to create it for the current folio.",
            "enum": [
              "InvoiceAlreadyExists",
              "NotAllChargesPosted",
              "DebitorDetailsMissing",
              "InvoiceHasPendingPayments",
              "NoCompanyFound",
              "CompanyCannotCheckOutOnAr",
              "IsHouseFolio",
              "CannotCreateCompanyInvoiceForExternal",
              "CheckOutOnArIsNotAllowed"
            ],
            "type": "string"
          },
          "message": {
            "description": "Optionally, additional information about the warning",
            "type": "string"
          }
        }
      },
      "CreatePaymentLinkRequest": {
        "required": [
          "amount",
          "countryCode",
          "expiresAt"
        ],
        "type": "object",
        "properties": {
          "expiresAt": {
            "format": "date-time",
            "description": "The date that the link expires<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
            "type": "string"
          },
          "countryCode": {
            "description": "The payer's country code. Used to provide suitable for the payer payment methods and use default country language",
            "type": "string"
          },
          "description": {
            "description": "Payment description. It will be shown on the payment form of the link",
            "maxLength": 280,
            "type": "string"
          },
          "payerEmail": {
            "description": "The email address of the payer or cardholder. It can be used to verify the identity of the payer and\r\nallow to catch a fraudulent usage of the payment account if the email address does not match the one\r\non file at the bank",
            "type": "string"
          },
          "amount": {
            "$ref": "#/components/schemas/MonetaryValueModel"
          },
          "paidCharges": {
            "description": "List of charges and amount being covered by this payment.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentPaidChargesRequest"
            }
          }
        },
        "example": "{\n  \"expiresAt\": \"2022-06-11T09:41:19.8606418Z\",\n  \"countryCode\": \"de\",\n  \"description\": \"Prepayment for the group booking apaleo Summer party\",\n  \"payerEmail\": \"0chai@hemenal5.space\",\n  \"amount\": {\n    \"amount\": 150.0,\n    \"currency\": \"EUR\"\n  },\n  \"paidCharges\": [\n    {\n      \"chargeId\": \"BLIPKWXP-1-1-1\",\n      \"amount\": 230.0\n    }\n  ]\n}"
      },
      "CreatePaymentRefundRequest": {
        "required": [
          "amount"
        ],
        "type": "object",
        "properties": {
          "amount": {
            "$ref": "#/components/schemas/MonetaryValueModel"
          },
          "businessDate": {
            "format": "date",
            "description": "The business date of the refund. Defaults to the current date.\r\nIn some cases you might want to post the refunds to the previous business date, this is only possible until 6 AM of the current day.",
            "type": "string",
            "example": "2020-10-10"
          }
        },
        "example": "{\n  \"amount\": {\n    \"amount\": 10.0,\n    \"currency\": \"EUR\"\n  }\n}"
      },
      "CreateTerminalPaymentRequest": {
        "required": [
          "amount",
          "terminalId"
        ],
        "type": "object",
        "properties": {
          "terminalId": {
            "description": "Terminal to be used for the payment",
            "type": "string"
          },
          "amount": {
            "$ref": "#/components/schemas/MonetaryValueModel"
          },
          "paidCharges": {
            "description": "List of charges and amount being covered by this payment.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentPaidChargesRequest"
            }
          }
        },
        "example": "{\n  \"terminalId\": \"V400m-324689704\",\n  \"amount\": {\n    \"amount\": 230.0,\n    \"currency\": \"EUR\"\n  },\n  \"paidCharges\": [\n    {\n      \"chargeId\": \"BLIPKWXP-1-1-1\",\n      \"amount\": 230.0\n    }\n  ]\n}"
      },
      "CreateTransitoryChargeModel": {
        "required": [
          "amount",
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "description": "The name, article number, or other description of this item",
            "type": "string"
          },
          "amount": {
            "$ref": "#/components/schemas/MonetaryValueModel"
          },
          "receipt": {
            "description": "Receipt for this transaction",
            "type": "string"
          },
          "groupId": {
            "description": "Identifier used for grouping related charges together",
            "type": "string"
          },
          "serviceType": {
            "description": "The service type. This is not used by accounting, but can be entered and stored on the charge.",
            "enum": [
              "Other",
              "Accommodation",
              "FoodAndBeverages",
              "CityTax"
            ],
            "type": "string"
          },
          "quantity": {
            "format": "int32",
            "description": "The count of services provided. Defaults to 1.\r\nNOTE: this field will become required 07.05.2020.",
            "type": "integer"
          },
          "businessDate": {
            "format": "date",
            "description": "The business date of the charge. Defaults to the current date.\r\nIn some cases you might want to post the charges to the previous business date, this is only possible until 6 AM of the current day.",
            "type": "string",
            "example": "2020-10-10"
          }
        },
        "example": "{\n  \"name\": \"Restaurant\",\n  \"amount\": {\n    \"amount\": 23.0,\n    \"currency\": \"EUR\"\n  },\n  \"receipt\": \"R23412\"\n}"
      },
      "CurrencyListModel": {
        "required": [
          "isoCurrencies"
        ],
        "type": "object",
        "properties": {
          "isoCurrencies": {
            "description": "List of ISO currencies.",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "example": "{\n  \"isoCurrencies\": [\n    \"AED\",\n    \"AUD\",\n    \"EUR\",\n    \"USD\",\n    \"XCD\"\n  ]\n}"
      },
      "EmbeddedCompanyModel": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "The company ID",
            "type": "string"
          },
          "code": {
            "description": "The code of the company",
            "type": "string"
          },
          "name": {
            "description": "The name of the company",
            "type": "string"
          },
          "canCheckOutOnAr": {
            "description": "Whether or not the company can check out on AR",
            "type": "boolean"
          }
        }
      },
      "EmbeddedFolioModel": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Folio ID",
            "type": "string"
          },
          "debitor": {
            "description": "Name of the debitor - the one who will pay the bill",
            "type": "string"
          }
        }
      },
      "EmbeddedInvoiceModel": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Invoice id",
            "type": "string"
          }
        }
      },
      "EmbeddedPropertyModel": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "The property id",
            "type": "string"
          },
          "code": {
            "description": "The code for the property that can be shown in reports and table views",
            "type": "string"
          },
          "name": {
            "description": "The name for the property",
            "type": "string"
          },
          "description": {
            "description": "The description for the property",
            "type": "string",
            "readOnly": true
          }
        }
      },
      "EmbeddedReservationModel": {
        "required": [
          "bookingId",
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Reservation id",
            "type": "string"
          },
          "bookingId": {
            "description": "Booking id",
            "type": "string"
          }
        }
      },
      "ExportAccountModel": {
        "required": [
          "name",
          "number",
          "type"
        ],
        "type": "object",
        "properties": {
          "name": {
            "description": "The account name",
            "type": "string"
          },
          "number": {
            "description": "The account number",
            "type": "string"
          },
          "parentNumber": {
            "description": "The number of the parent account",
            "type": "string"
          },
          "type": {
            "description": "The account type",
            "enum": [
              "Revenues",
              "Payments",
              "Liabilities",
              "Receivables",
              "Vat",
              "House",
              "AccountsReceivable",
              "CityTaxes",
              "TransitoryItems",
              "VatOnLiabilities",
              "LossOfAccountsReceivable"
            ],
            "type": "string"
          }
        }
      },
      "ExportGrossTransactionItemModel": {
        "required": [
          "command",
          "creditedAccount",
          "currency",
          "date",
          "debitedAccount",
          "grossAmount",
          "netAmount",
          "receipt",
          "reference",
          "referenceType",
          "sourceEntryNumber",
          "timestamp"
        ],
        "type": "object",
        "properties": {
          "timestamp": {
            "format": "date-time",
            "description": "Timestamp with time zone information, when the booking was done<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
            "type": "string"
          },
          "date": {
            "format": "date",
            "description": "The business date when the booking was done",
            "type": "string",
            "example": "2020-10-10"
          },
          "debitedAccount": {
            "$ref": "#/components/schemas/ExportAccountModel"
          },
          "creditedAccount": {
            "$ref": "#/components/schemas/ExportAccountModel"
          },
          "command": {
            "description": "The type of business transaction which triggered the booking",
            "enum": [
              "PostCharge",
              "PostPayment",
              "MoveLineItem",
              "PostPrepayment",
              "PostToAccountsReceivables",
              "PostPrepaymentVat",
              "PostToLossOfAccountsReceivables",
              "System"
            ],
            "type": "string"
          },
          "currency": {
            "description": "The currency of the transaction",
            "type": "string"
          },
          "grossAmount": {
            "format": "double",
            "description": "The gross amount being booked",
            "type": "number"
          },
          "netAmount": {
            "format": "double",
            "description": "The net amount being booked",
            "type": "number"
          },
          "taxes": {
            "description": "The taxes which make up the difference between net and gross amount",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TaxAmountModel"
            }
          },
          "receipt": {
            "$ref": "#/components/schemas/ReceiptModel"
          },
          "sourceEntryNumber": {
            "description": "The original raw transaction entry number which got converted to these one or 2 lines.",
            "type": "string"
          },
          "reference": {
            "description": "The reference for the transactions, reservation id for guest folios, folio id for external folios, property code for the house folio",
            "type": "string"
          },
          "referenceType": {
            "description": "Does this transaction belong to a reservation, a house or an external folio",
            "enum": [
              "House",
              "Guest",
              "External"
            ],
            "type": "string"
          }
        }
      },
      "ExportGrossTransactionListModel": {
        "required": [
          "transactions"
        ],
        "type": "object",
        "properties": {
          "transactions": {
            "description": "List of transactions with all details.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExportGrossTransactionItemModel"
            }
          }
        },
        "example": "{\n  \"transactions\": [\n    {\n      \"timestamp\": \"2022-06-09T09:41:20.3485703Z\",\n      \"date\": \"2022-06-09\",\n      \"debitedAccount\": {\n        \"name\": \"Cash Payment\",\n        \"number\": \"1600\",\n        \"type\": \"Revenues\"\n      },\n      \"creditedAccount\": {\n        \"name\": \"Receivables for Reservation QPMZZTUK-1\",\n        \"number\": \"QPMZZTUK-1_Receivables\",\n        \"type\": \"Revenues\"\n      },\n      \"command\": \"PostCharge\",\n      \"currency\": \"EUR\",\n      \"grossAmount\": 100.0,\n      \"netAmount\": 100.0,\n      \"taxes\": [],\n      \"receipt\": {\n        \"type\": \"Reservation\",\n        \"number\": \"QPMZZTUK-1-V3\"\n      },\n      \"referenceType\": \"House\"\n    },\n    {\n      \"timestamp\": \"2022-06-09T09:41:20.3493408Z\",\n      \"date\": \"2022-06-09\",\n      \"debitedAccount\": {\n        \"name\": \"Revenues Accommodation\",\n        \"number\": \"5001\",\n        \"type\": \"Revenues\"\n      },\n      \"creditedAccount\": {\n        \"name\": \"House Account\",\n        \"number\": \"HOUSE_HCF\",\n        \"type\": \"Revenues\"\n      },\n      \"command\": \"PostCharge\",\n      \"currency\": \"EUR\",\n      \"grossAmount\": 214.0,\n      \"netAmount\": 200.0,\n      \"taxes\": [\n        {\n          \"type\": \"Reduced\",\n          \"percent\": 7.0,\n          \"amount\": 14.0\n        }\n      ],\n      \"receipt\": {\n        \"type\": \"Reservation\",\n        \"number\": \"QPMZZTUK-1-V3\"\n      },\n      \"referenceType\": \"House\"\n    }\n  ]\n}"
      },
      "ExternalReference": {
        "required": [
          "merchantReference",
          "pspReference"
        ],
        "type": "object",
        "properties": {
          "merchantReference": {
            "description": "The merchant reference ('order number')",
            "type": "string"
          },
          "pspReference": {
            "description": "The globally unique identifier of this payment in the reports of the payment service",
            "type": "string"
          }
        }
      },
      "FinanceAccountListModel": {
        "required": [
          "accounts",
          "count"
        ],
        "type": "object",
        "properties": {
          "accounts": {
            "description": "List of accounts in a property, having one specific parent.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SlimFinanceAccountModel"
            }
          },
          "count": {
            "format": "int64",
            "description": "Total count of items",
            "type": "integer"
          }
        },
        "example": "{\n  \"accounts\": [\n    {\n      \"accountNumber\": \"1100\",\n      \"name\": \"Credit Card Payment\",\n      \"type\": \"Payments\",\n      \"hasChildren\": true,\n      \"isArchived\": false\n    },\n    {\n      \"accountNumber\": \"1100\",\n      \"name\": \"Bank Transfer\",\n      \"type\": \"Payments\",\n      \"hasChildren\": false,\n      \"isArchived\": true\n    }\n  ],\n  \"count\": 0\n}"
      },
      "FinanceAccountModel": {
        "required": [
          "accountNumber",
          "hasChildren",
          "isArchived",
          "name",
          "type"
        ],
        "type": "object",
        "properties": {
          "accountNumber": {
            "description": "The account number. Unique identifier within one property.",
            "type": "string"
          },
          "name": {
            "description": "The name of the account.",
            "type": "string"
          },
          "type": {
            "description": "The type of account.",
            "enum": [
              "Revenues",
              "Payments",
              "Liabilities",
              "Receivables",
              "Vat",
              "House",
              "AccountsReceivable",
              "CityTaxes",
              "TransitoryItems",
              "VatOnLiabilities",
              "LossOfAccountsReceivable"
            ],
            "type": "string"
          },
          "hasChildren": {
            "description": "Indicates whether this account has children / sub accounts or not. The children can be retrieved via GET /accounts and querying\r\nby parent.",
            "type": "boolean"
          },
          "parentNumber": {
            "description": "Parent account number. Null for top-level accounts.",
            "type": "string"
          },
          "isArchived": {
            "description": "Indicates whether this account is archived ot not.",
            "type": "boolean"
          },
          "transactions": {
            "description": "All transactions / bookings involving this account.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccountingTransactionModel"
            }
          }
        },
        "example": "{\n  \"name\": \"Other Revenues\",\n  \"type\": \"Revenues\",\n  \"hasChildren\": false,\n  \"parentNumber\": \"5000\",\n  \"isArchived\": false,\n  \"transactions\": [\n    {\n      \"timestamp\": \"2022-06-09T09:41:19.3534281+02:00\",\n      \"date\": \"2022-06-09\",\n      \"command\": \"PostCharge\",\n      \"amount\": {\n        \"amount\": 180.0,\n        \"currency\": \"EUR\"\n      },\n      \"entryNumber\": \"2017122500000001\",\n      \"referenceType\": \"House\",\n      \"entryGroupNumber\": \"2017122500000001\"\n    },\n    {\n      \"timestamp\": \"2022-06-09T10:41:19.3534281+02:00\",\n      \"date\": \"2022-06-09\",\n      \"command\": \"PostCharge\",\n      \"amount\": {\n        \"amount\": 210.0,\n        \"currency\": \"EUR\"\n      },\n      \"entryNumber\": \"2017122500000002\",\n      \"referenceType\": \"House\",\n      \"entryGroupNumber\": \"2017122500000002\"\n    }\n  ]\n}"
      },
      "FolioCreatedModel": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "The folio id",
            "type": "string"
          }
        },
        "example": "{\n  \"id\": \"XKCD-17\"\n}"
      },
      "FolioDebitorModel": {
        "type": "object",
        "properties": {
          "type": {
            "description": "Whether the debitor is the booker, the primary guest, an additional guest, or the company.\r\nWhen the folio has a company, the only possible value is 'Company'. 'Property' is a reserved type for the house folio.",
            "enum": [
              "Booker",
              "PrimaryGuest",
              "Company",
              "AdditionalGuest",
              "Property"
            ],
            "type": "string"
          },
          "title": {
            "description": "Title",
            "enum": [
              "Mr",
              "Ms",
              "Dr",
              "Prof",
              "Mrs",
              "Other"
            ],
            "type": "string"
          },
          "firstName": {
            "description": "First name",
            "type": "string"
          },
          "name": {
            "description": "Last name",
            "type": "string"
          },
          "address": {
            "$ref": "#/components/schemas/NonStrictAddressModel"
          },
          "company": {
            "$ref": "#/components/schemas/CompanyInfoModel"
          },
          "reference": {
            "description": "Any additional information about the debitor that should be present on the invoice",
            "maxLength": 80,
            "type": "string"
          },
          "email": {
            "description": "Debitor's email",
            "type": "string"
          }
        }
      },
      "FolioItemModel": {
        "required": [
          "balance",
          "created",
          "id",
          "status",
          "updated"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "The id of the folio",
            "type": "string"
          },
          "created": {
            "format": "date-time",
            "description": "Date of creation<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
            "type": "string"
          },
          "updated": {
            "format": "date-time",
            "description": "Date of update<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
            "type": "string"
          },
          "type": {
            "description": "The folio type",
            "enum": [
              "House",
              "Guest",
              "External"
            ],
            "type": "string"
          },
          "debitor": {
            "$ref": "#/components/schemas/FolioDebitorModel"
          },
          "closingDate": {
            "format": "date",
            "description": "The date when the folio has been closed",
            "type": "string",
            "example": "2020-10-10"
          },
          "isMainFolio": {
            "description": "Set to {true} if this is the main folio for the reservation",
            "type": "boolean"
          },
          "isEmpty": {
            "description": "Set to {true} if the folio has no unmoved [transitory] charges, unmoved payments, and allowances.",
            "type": "boolean"
          },
          "reservation": {
            "$ref": "#/components/schemas/EmbeddedReservationModel"
          },
          "company": {
            "$ref": "#/components/schemas/EmbeddedCompanyModel"
          },
          "balance": {
            "$ref": "#/components/schemas/MonetaryValueModel"
          },
          "checkedOutOnAccountsReceivable": {
            "description": "Set to true, if the folio has been checked out on accounts receivable",
            "type": "boolean"
          },
          "folioWarnings": {
            "description": "Depending on the state of the folio, certain warnings are shown.\r\nThis list includes all folio warnings.",
            "type": "array",
            "items": {
              "enum": [
                "IncompleteBillingAddress"
              ],
              "type": "string"
            }
          },
          "allowedActions": {
            "description": "Depending on the state of the folio, certain actions are allowed or not.\r\nThis list includes all actions you can perform on this folio.",
            "type": "array",
            "items": {
              "enum": [
                "AddCharge",
                "AddAllowance",
                "AddCancellationFee",
                "AddNoShowFee",
                "AddPayment",
                "AddRefund",
                "CheckoutOnAr",
                "Close",
                "PostOpenCharges",
                "CorrectFolio",
                "ChangeAddress",
                "ChangeAddressWithSimpleDebitor",
                "Delete",
                "Reopen",
                "CreateInvoice",
                "CreateAdvanceInvoice",
                "CancelLastInvoice",
                "CreateInvoiceWithSimpleDebitor",
                "CreatePrepaymentNotice"
              ],
              "type": "string"
            }
          },
          "relatedInvoices": {
            "description": "All invoices that have been created for this folio. This is only set on folios of type 'guest'",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EmbeddedInvoiceModel"
            }
          },
          "status": {
            "description": "Status of the folio",
            "enum": [
              "Open",
              "Closed",
              "ClosedWithInvoice"
            ],
            "type": "string"
          },
          "charges": {
            "description": "The list of charges",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChargeModel"
            }
          },
          "allowances": {
            "description": "The list of allowances",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AllowanceModel"
            }
          },
          "transitoryCharges": {
            "description": "The list of transitory charges",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransitoryChargeModel"
            }
          },
          "payments": {
            "description": "The list of payments",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentModel"
            }
          }
        }
      },
      "FolioListModel": {
        "required": [
          "count",
          "folios"
        ],
        "type": "object",
        "properties": {
          "folios": {
            "description": "List of folios.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FolioItemModel"
            }
          },
          "count": {
            "format": "int64",
            "description": "Total count of items",
            "type": "integer"
          }
        },
        "example": "{\n  \"folios\": [\n    {\n      \"id\": \"XKCD-17\",\n      \"created\": \"0001-01-01T00:00:00Z\",\n      \"updated\": \"0001-01-01T00:00:00Z\",\n      \"type\": \"Guest\",\n      \"debitor\": {\n        \"title\": \"Mr\",\n        \"name\": \"Fisher\"\n      },\n      \"isMainFolio\": true,\n      \"isEmpty\": false,\n      \"reservation\": {\n        \"id\": \"XKCD-17\",\n        \"bookingId\": \"XKCD-17\"\n      },\n      \"balance\": {\n        \"amount\": 223.59,\n        \"currency\": \"EUR\"\n      },\n      \"checkedOutOnAccountsReceivable\": false,\n      \"allowedActions\": [\n        \"AddCharge\",\n        \"AddPayment\",\n        \"Close\"\n      ],\n      \"relatedInvoices\": [\n        {\n          \"id\": \"00010675\"\n        }\n      ],\n      \"status\": \"Open\"\n    },\n    {\n      \"id\": \"BRC-231\",\n      \"created\": \"0001-01-01T00:00:00Z\",\n      \"updated\": \"0001-01-01T00:00:00Z\",\n      \"type\": \"House\",\n      \"debitor\": {\n        \"title\": \"Mr\",\n        \"name\": \"Lee\"\n      },\n      \"isMainFolio\": true,\n      \"isEmpty\": false,\n      \"reservation\": {\n        \"id\": \"BRC-231\",\n        \"bookingId\": \"BRC-231\"\n      },\n      \"balance\": {\n        \"amount\": 364.83,\n        \"currency\": \"EUR\"\n      },\n      \"checkedOutOnAccountsReceivable\": false,\n      \"allowedActions\": [\n        \"AddCharge\",\n        \"AddPayment\",\n        \"Close\"\n      ],\n      \"relatedInvoices\": [\n        {\n          \"id\": \"00010672\"\n        }\n      ],\n      \"status\": \"Open\"\n    },\n    {\n      \"id\": \"XKCD-5-1\",\n      \"created\": \"0001-01-01T00:00:00Z\",\n      \"updated\": \"0001-01-01T00:00:00Z\",\n      \"type\": \"Guest\",\n      \"debitor\": {\n        \"title\": \"Ms\",\n        \"name\": \"Ms Jackson\"\n      },\n      \"closingDate\": \"2022-05-10\",\n      \"isMainFolio\": false,\n      \"isEmpty\": false,\n      \"reservation\": {\n        \"id\": \"XKCD-5\",\n        \"bookingId\": \"XKCD\"\n      },\n      \"balance\": {\n        \"amount\": 0.0,\n        \"currency\": \"EUR\"\n      },\n      \"checkedOutOnAccountsReceivable\": true,\n      \"allowedActions\": [\n        \"AddCharge\",\n        \"AddPayment\",\n        \"Close\"\n      ],\n      \"relatedInvoices\": [\n        {\n          \"id\": \"00010687\"\n        }\n      ],\n      \"status\": \"Open\"\n    }\n  ],\n  \"count\": 3\n}"
      },
      "FolioModel": {
        "required": [
          "balance",
          "created",
          "id",
          "property",
          "status",
          "updated"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "The id of the folio",
            "type": "string"
          },
          "created": {
            "format": "date-time",
            "description": "Date of creation<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
            "type": "string"
          },
          "updated": {
            "format": "date-time",
            "description": "Date of update<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
            "type": "string"
          },
          "type": {
            "description": "The folio type",
            "enum": [
              "House",
              "Guest",
              "External"
            ],
            "type": "string"
          },
          "debitor": {
            "$ref": "#/components/schemas/FolioDebitorModel"
          },
          "closingDate": {
            "format": "date",
            "description": "The date when the folio has been closed",
            "type": "string",
            "example": "2020-10-10"
          },
          "reservation": {
            "$ref": "#/components/schemas/EmbeddedReservationModel"
          },
          "company": {
            "$ref": "#/components/schemas/EmbeddedCompanyModel"
          },
          "property": {
            "$ref": "#/components/schemas/EmbeddedPropertyModel"
          },
          "charges": {
            "description": "The list of charges",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChargeModel"
            }
          },
          "transitoryCharges": {
            "description": "The list of charges",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransitoryChargeModel"
            }
          },
          "payments": {
            "description": "The list of payments - <b>DEPRECATED: This field will be removed on July 3rd 2020. Use GET /finance/v1/folios/{folioId}/payments or GET /finance/v1/folios/{folioId}/refunds instead.</b>",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentModel"
            }
          },
          "pendingPayments": {
            "description": "The list of pending payments - <b>DEPRECATED: This field will be removed on July 3rd 2020. Use GET /finance/v1/folios/{folioId}/payments instead.</b>",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PendingPaymentModel"
            }
          },
          "allowances": {
            "description": "The list of allowances",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AllowanceModel"
            }
          },
          "balance": {
            "$ref": "#/components/schemas/MonetaryValueModel"
          },
          "checkedOutOnAccountsReceivable": {
            "description": "Set to {true}, if the folio has been checked out on accounts receivable.\r\nIf you create an invoice from this folio, it will display the outstanding payments",
            "type": "boolean"
          },
          "isMainFolio": {
            "description": "Set to {true} if this is a main folio for the reservation",
            "type": "boolean"
          },
          "isEmpty": {
            "description": "Set to {true} if the folio has no unmoved [transitory] charges, unmoved payments, and allowances.",
            "type": "boolean"
          },
          "relatedFolios": {
            "description": "All folios that are related to this folio. Either because they belong to the same reservation, or because charges where moved\r\nbetween them. This is only set on folios of type 'guest'",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EmbeddedFolioModel"
            }
          },
          "relatedInvoices": {
            "description": "All invoices that have been created for this folio. This is only set on folios of type 'guest'",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EmbeddedInvoiceModel"
            }
          },
          "folioWarnings": {
            "description": "Depending on the state of the folio, certain warnings are shown.\r\nThis list includes all folio warnings.",
            "type": "array",
            "items": {
              "enum": [
                "IncompleteBillingAddress"
              ],
              "type": "string"
            }
          },
          "allowedActions": {
            "description": "Depending on the state of the folio, certain actions are allowed or not.\r\nThis list includes all actions you can perform on this folio.",
            "type": "array",
            "items": {
              "enum": [
                "AddCharge",
                "AddAllowance",
                "AddCancellationFee",
                "AddNoShowFee",
                "AddPayment",
                "AddRefund",
                "CheckoutOnAr",
                "Close",
                "PostOpenCharges",
                "CorrectFolio",
                "ChangeAddress",
                "ChangeAddressWithSimpleDebitor",
                "Delete",
                "Reopen",
                "CreateInvoice",
                "CreateAdvanceInvoice",
                "CancelLastInvoice",
                "CreateInvoiceWithSimpleDebitor",
                "CreatePrepaymentNotice"
              ],
              "type": "string"
            }
          },
          "allowedPayment": {
            "format": "double",
            "description": "The maximum payment that can be posted on this folio",
            "type": "number"
          },
          "maximumAllowance": {
            "format": "double",
            "description": "The maximum allowance (gross) that can be posted on this folio",
            "type": "number"
          },
          "status": {
            "description": "Status of the folio",
            "enum": [
              "Open",
              "Closed",
              "ClosedWithInvoice"
            ],
            "type": "string"
          }
        },
        "example": "{\n  \"id\": \"XKCD17-1\",\n  \"created\": \"0001-01-01T00:00:00Z\",\n  \"updated\": \"0001-01-01T00:00:00Z\",\n  \"type\": \"Guest\",\n  \"debitor\": {\n    \"title\": \"Dr\",\n    \"firstName\": \"Jon\",\n    \"name\": \"Doe\",\n    \"address\": {\n      \"addressLine1\": \"My Street 1\",\n      \"postalCode\": \"12453\",\n      \"city\": \"MyCity\",\n      \"countryCode\": \"GB\"\n    },\n    \"company\": {\n      \"name\": \"Horns & Hooves Inc\",\n      \"taxId\": \"TAX-12345\"\n    },\n    \"reference\": \"SRC-1232\"\n  },\n  \"reservation\": {\n    \"id\": \"XKCD17\",\n    \"bookingId\": \"XKCD\"\n  },\n  \"property\": {\n    \"id\": \"MUC\"\n  },\n  \"charges\": [\n    {\n      \"id\": \"RND123\",\n      \"serviceType\": \"Accommodation\",\n      \"name\": \"Charge\",\n      \"isPosted\": true,\n      \"serviceDate\": \"2018-05-08\",\n      \"created\": \"0001-01-01T00:00:00Z\",\n      \"movedFrom\": {\n        \"id\": \"XKCD23-2\"\n      },\n      \"movedTo\": {\n        \"id\": \"XKCD23-3\"\n      },\n      \"amount\": {\n        \"grossAmount\": 107.0,\n        \"netAmount\": 100.0,\n        \"vatType\": \"Reduced\",\n        \"vatPercent\": 7.0,\n        \"currency\": \"EUR\"\n      },\n      \"quantity\": 0\n    },\n    {\n      \"id\": \"RND125\",\n      \"serviceType\": \"Other\",\n      \"name\": \"The Daily Planet, Newspaper\",\n      \"isPosted\": true,\n      \"serviceDate\": \"2018-05-07\",\n      \"created\": \"0001-01-01T00:00:00Z\",\n      \"amount\": {\n        \"grossAmount\": 2.14,\n        \"netAmount\": 2.0,\n        \"vatType\": \"Reduced\",\n        \"vatPercent\": 7.0,\n        \"currency\": \"EUR\"\n      },\n      \"quantity\": 0\n    },\n    {\n      \"id\": \"REST2018243\",\n      \"serviceType\": \"Other\",\n      \"name\": \"Restaurant\",\n      \"isPosted\": true,\n      \"serviceDate\": \"2018-05-07\",\n      \"created\": \"0001-01-01T00:00:00Z\",\n      \"amount\": {\n        \"grossAmount\": 59.0,\n        \"netAmount\": 59.0,\n        \"vatType\": \"Without\",\n        \"vatPercent\": 0.0,\n        \"currency\": \"EUR\"\n      },\n      \"subAccountId\": \"MUC-REST\",\n      \"quantity\": 0\n    }\n  ],\n  \"transitoryCharges\": [\n    {\n      \"id\": \"RND3221-1\",\n      \"name\": \"Transitory charge\",\n      \"amount\": {\n        \"amount\": 20.0,\n        \"currency\": \"EUR\"\n      },\n      \"serviceDate\": \"0001-01-01\",\n      \"created\": \"0001-01-01T00:00:00Z\",\n      \"quantity\": 0\n    }\n  ],\n  \"payments\": [\n    {\n      \"id\": \"PAY-1\",\n      \"method\": \"BankTransfer\",\n      \"amount\": {\n        \"amount\": 50.0,\n        \"currency\": \"EUR\"\n      },\n      \"receipt\": \"CA-147-339\",\n      \"paymentDate\": \"0001-01-01T00:00:00Z\",\n      \"businessDate\": \"0001-01-01\"\n    },\n    {\n      \"id\": \"PAY-2\",\n      \"method\": \"Cash\",\n      \"amount\": {\n        \"amount\": 2.14,\n        \"currency\": \"EUR\"\n      },\n      \"paymentDate\": \"0001-01-01T00:00:00Z\",\n      \"businessDate\": \"0001-01-01\"\n    }\n  ],\n  \"pendingPayments\": [\n    {\n      \"id\": \"IDDQD-1\",\n      \"amount\": {\n        \"amount\": 50.0,\n        \"currency\": \"EUR\"\n      }\n    },\n    {\n      \"id\": \"IDKFA-2\",\n      \"amount\": {\n        \"amount\": 2.14,\n        \"currency\": \"EUR\"\n      }\n    }\n  ],\n  \"allowances\": [\n    {\n      \"id\": \"RND3221-1\",\n      \"amount\": {\n        \"grossAmount\": 11.9,\n        \"netAmount\": 10.0,\n        \"vatType\": \"Normal\",\n        \"vatPercent\": 19.0,\n        \"currency\": \"EUR\"\n      },\n      \"reason\": \"example\",\n      \"serviceType\": \"Other\",\n      \"serviceDate\": \"2018-05-10\",\n      \"created\": \"0001-01-01T00:00:00Z\",\n      \"movedFrom\": {\n        \"id\": \"XKCD23-2\"\n      },\n      \"movedTo\": {\n        \"id\": \"XKCD23-3\"\n      },\n      \"sourceChargeId\": \"REST2018243\"\n    }\n  ],\n  \"balance\": {\n    \"amount\": 57.0,\n    \"currency\": \"EUR\"\n  },\n  \"checkedOutOnAccountsReceivable\": false,\n  \"isMainFolio\": true,\n  \"isEmpty\": false,\n  \"allowedActions\": [\n    \"AddCharge\",\n    \"AddPayment\",\n    \"Close\"\n  ],\n  \"allowedPayment\": 45.1,\n  \"maximumAllowance\": 20.0,\n  \"status\": \"Open\"\n}"
      },
      "FolioPaymentModel": {
        "required": [
          "amount",
          "businessDate",
          "id",
          "paymentDate",
          "status",
          "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Id of the payment. This is unique within one folio",
            "type": "string"
          },
          "method": {
            "description": "The payment method",
            "enum": [
              "Cash",
              "BankTransfer",
              "CreditCard",
              "Invoice",
              "Amex",
              "VisaCredit",
              "VisaDebit",
              "MasterCard",
              "MasterCardDebit",
              "Maestro",
              "GiroCard",
              "DiscoverCard",
              "Diners",
              "Jcb",
              "BookingCom",
              "VPay",
              "PayPal",
              "Postcard",
              "Reka",
              "Twint",
              "Lunchcheck",
              "Voucher",
              "ChinaUnionPay",
              "Other",
              "Cheque",
              "Airbnb",
              "HolidayCheck",
              "PspCash",
              "PspDebit",
              "PspBanking",
              "PspOpenInvoice",
              "PspWallet"
            ],
            "type": "string"
          },
          "amount": {
            "$ref": "#/components/schemas/MonetaryValueModel"
          },
          "externalReference": {
            "$ref": "#/components/schemas/ExternalReference"
          },
          "receipt": {
            "description": "Receipt for the payment",
            "type": "string"
          },
          "paymentDate": {
            "format": "date-time",
            "description": "The date and time when the payment was created<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
            "type": "string"
          },
          "movedFrom": {
            "$ref": "#/components/schemas/EmbeddedFolioModel"
          },
          "movedTo": {
            "$ref": "#/components/schemas/EmbeddedFolioModel"
          },
          "movedReason": {
            "description": "A reason why the move operation was performed",
            "type": "string"
          },
          "sourcePaymentId": {
            "description": "A link to the original payment in case of splitting payments",
            "type": "string"
          },
          "status": {
            "description": "Status of the payment",
            "enum": [
              "Pending",
              "Success",
              "Failure",
              "Canceled"
            ],
            "type": "string"
          },
          "failureReason": {
            "description": "Human readable failure reason",
            "type": "string"
          },
          "failureCode": {
            "description": "Machine-readable failure code",
            "enum": [
              "Failed",
              "TimedOut"
            ],
            "type": "string"
          },
          "type": {
            "description": "Type of the payment",
            "enum": [
              "Custom",
              "Terminal",
              "PaymentAccount",
              "Authorization",
              "PaymentLink"
            ],
            "type": "string"
          },
          "expiresAt": {
            "format": "date-time",
            "description": "The date and time a payment link expires<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
            "type": "string"
          },
          "description": {
            "description": "Payment link description",
            "type": "string"
          },
          "url": {
            "description": "Payment link url",
            "type": "string"
          },
          "actions": {
            "description": "The list of actions for this payment",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ActionModel_PaymentAction_NotAllowedPaymentActionReason_"
            }
          },
          "businessDate": {
            "format": "date",
            "description": "The business date of the payment",
            "type": "string",
            "example": "2020-10-10"
          }
        },
        "example": "{\n  \"id\": \"C3Q890XZ\",\n  \"method\": \"Cash\",\n  \"amount\": {\n    \"amount\": 230.0,\n    \"currency\": \"EUR\"\n  },\n  \"externalReference\": {\n    \"merchantReference\": \"BLIPKWXP-1\",\n    \"pspReference\": \"8535063621298633\"\n  },\n  \"paymentDate\": \"0001-01-01T00:00:00Z\",\n  \"status\": \"Success\",\n  \"type\": \"Custom\",\n  \"businessDate\": \"1845-01-12\"\n}"
      },
      "IncludedLineItemModel": {
        "required": [
          "price"
        ],
        "type": "object",
        "properties": {
          "description": {
            "description": "The description of the item or service",
            "type": "string"
          },
          "price": {
            "$ref": "#/components/schemas/MonetaryValueModel"
          },
          "vatType": {
            "description": "The applied VAT type.",
            "enum": [
              "Null",
              "VeryReduced",
              "Reduced",
              "Normal",
              "Without",
              "Special",
              "ReducedCovid19",
              "NormalCovid19"
            ],
            "type": "string"
          },
          "vatPercent": {
            "format": "double",
            "description": "The applied VAT percent",
            "type": "number"
          }
        }
      },
      "InvoiceCreatedModel": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "The invoice id",
            "type": "string"
          }
        },
        "example": "{\n  \"id\": \"MUC_201705070000012\"\n}"
      },
      "InvoiceItemModel": {
        "required": [
          "created",
          "folioId",
          "id",
          "languageCode",
          "number",
          "paymentSettled",
          "propertyId",
          "status",
          "subTotal",
          "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Invoice identifier",
            "type": "string"
          },
          "number": {
            "description": "Invoice number",
            "type": "string"
          },
          "type": {
            "description": "Invoice type",
            "enum": [
              "Initial",
              "Cancellation",
              "Correction",
              "Advance",
              "AdvanceCancellation",
              "AdvanceCorrection"
            ],
            "type": "string"
          },
          "languageCode": {
            "description": "Language which was used to create the invoice",
            "type": "string"
          },
          "folioId": {
            "description": "The folio for this invoice",
            "type": "string"
          },
          "reservationId": {
            "description": "The reservation for this invoice",
            "type": "string"
          },
          "propertyId": {
            "description": "The ID of the property",
            "type": "string"
          },
          "relatedInvoiceNumber": {
            "description": "If the invoice is related to another invoice, this field contains related invoice number\r\nFor example, if the invoice has Cancellation type,\r\nthis field contains the number of invoice which is being cancelled",
            "type": "string"
          },
          "writeOffReason": {
            "description": "If the invoice was written-off, this field contains the reason why it was written-off",
            "type": "string"
          },
          "subTotal": {
            "$ref": "#/components/schemas/MonetaryValueModel"
          },
          "outstandingPayment": {
            "$ref": "#/components/schemas/MonetaryValueModel"
          },
          "paymentSettled": {
            "description": "True, if this invoice had no outstanding payments or was settled.",
            "type": "boolean"
          },
          "status": {
            "description": "Status of the invoice",
            "enum": [
              "FullyPaid",
              "Unpaid",
              "WrittenOff"
            ],
            "type": "string"
          },
          "created": {
            "format": "date-time",
            "description": "Date of creation<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
            "type": "string"
          },
          "guestName": {
            "description": "Name of the guest",
            "type": "string"
          },
          "guestCompany": {
            "description": "Company the guest specified",
            "type": "string"
          },
          "allowedActions": {
            "description": "Depending on the state of the invoice, certain actions are allowed or not.\r\nThis list includes all actions you can perform on this invoice.",
            "type": "array",
            "items": {
              "enum": [
                "CorrectAddress",
                "CorrectCharges",
                "MarkAsPaid",
                "Cancel",
                "WriteOff"
              ],
              "type": "string"
            }
          },
          "company": {
            "$ref": "#/components/schemas/EmbeddedCompanyModel"
          }
        }
      },
      "InvoiceLineItemModel": {
        "required": [
          "date",
          "description",
          "isNoShowFee",
          "price"
        ],
        "type": "object",
        "properties": {
          "date": {
            "format": "date",
            "description": "The date on which this item or service is delivered",
            "type": "string",
            "example": "2020-10-10"
          },
          "description": {
            "description": "The description of the item or service",
            "type": "string"
          },
          "price": {
            "$ref": "#/components/schemas/MonetaryValueModel"
          },
          "vatType": {
            "description": "The applied VAT type.",
            "enum": [
              "Null",
              "VeryReduced",
              "Reduced",
              "Normal",
              "Without",
              "Special",
              "ReducedCovid19",
              "NormalCovid19"
            ],
            "type": "string"
          },
          "vatPercent": {
            "format": "double",
            "description": "The applied VAT percent",
            "type": "number"
          },
          "isNoShowFee": {
            "description": "Whether this line item represents a no-show fee",
            "type": "boolean"
          },
          "includedLineItems": {
            "description": "Items which are included in the package, if there are any",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IncludedLineItemModel"
            }
          },
          "guest": {
            "description": "Guest who the service has been provided to. Is defined only when the invoice has charges from multiple folios with different guests.",
            "type": "string"
          },
          "quantity": {
            "format": "int32",
            "description": "The count of services provided",
            "type": "integer"
          }
        }
      },
      "InvoiceLineItemsModel": {
        "required": [
          "subTotal"
        ],
        "type": "object",
        "properties": {
          "lineItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InvoiceLineItemModel"
            }
          },
          "subTotal": {
            "$ref": "#/components/schemas/MonetaryValueModel"
          }
        }
      },
      "InvoiceListModel": {
        "required": [
          "count",
          "invoices"
        ],
        "type": "object",
        "properties": {
          "invoices": {
            "description": "List of invoices.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InvoiceItemModel"
            }
          },
          "count": {
            "format": "int64",
            "description": "Total count of items",
            "type": "integer"
          }
        },
        "example": "{\n  \"invoices\": [\n    {\n      \"id\": \"MUC-20171200000002\",\n      \"number\": \"20171200000002\",\n      \"type\": \"Initial\",\n      \"languageCode\": \"de\",\n      \"folioId\": \"DHNSHFK-1-1\",\n      \"reservationId\": \"DHNSHFK-1\",\n      \"propertyId\": \"MUC\",\n      \"subTotal\": {\n        \"amount\": 100.0,\n        \"currency\": \"EUR\"\n      },\n      \"paymentSettled\": true,\n      \"status\": \"FullyPaid\",\n      \"created\": \"2022-06-08T11:41:19.3534281+02:00\",\n      \"guestName\": \"Alan Turing\",\n      \"guestCompany\": \"GCHQ\",\n      \"company\": {\n        \"id\": \"MUC-ACME\",\n        \"code\": \"ACME\",\n        \"name\": \"ACME Inc.\"\n      }\n    },\n    {\n      \"id\": \"MUC-20181200000002\",\n      \"number\": \"20181200000002\",\n      \"type\": \"Initial\",\n      \"languageCode\": \"de\",\n      \"folioId\": \"HGZGDNAK-1-1\",\n      \"reservationId\": \"HGZGDNAK-1\",\n      \"propertyId\": \"MUC\",\n      \"subTotal\": {\n        \"amount\": 100.0,\n        \"currency\": \"EUR\"\n      },\n      \"outstandingPayment\": {\n        \"amount\": 95.0,\n        \"currency\": \"EUR\"\n      },\n      \"paymentSettled\": false,\n      \"status\": \"Unpaid\",\n      \"created\": \"2022-06-08T11:41:19.3534281+02:00\",\n      \"guestName\": \"Bertrand Russell\",\n      \"allowedActions\": [\n        \"CorrectAddress\",\n        \"CorrectCharges\"\n      ]\n    },\n    {\n      \"id\": \"MUC-20171200000018\",\n      \"number\": \"20171200000018\",\n      \"type\": \"Cancellation\",\n      \"languageCode\": \"de\",\n      \"folioId\": \"DHNSHFK-1-2\",\n      \"reservationId\": \"DHNSHFK-1\",\n      \"propertyId\": \"MUC\",\n      \"relatedInvoiceNumber\": \"20171200000002\",\n      \"subTotal\": {\n        \"amount\": 100.0,\n        \"currency\": \"EUR\"\n      },\n      \"paymentSettled\": true,\n      \"status\": \"FullyPaid\",\n      \"created\": \"2022-06-09T09:41:19.3534281+02:00\",\n      \"guestName\": \"Ludwig Wittgenstein\"\n    },\n    {\n      \"id\": \"MUC-20171200000022\",\n      \"number\": \"20171200000022\",\n      \"type\": \"Correction\",\n      \"languageCode\": \"de\",\n      \"folioId\": \"DHNSHFK-1-3\",\n      \"reservationId\": \"DHNSHFK-1\",\n      \"propertyId\": \"MUC\",\n      \"subTotal\": {\n        \"amount\": 100.0,\n        \"currency\": \"EUR\"\n      },\n      \"paymentSettled\": true,\n      \"status\": \"FullyPaid\",\n      \"created\": \"2022-06-09T09:41:19.3534281+02:00\",\n      \"guestName\": \"Rudolf Carnap\",\n      \"allowedActions\": [\n        \"CorrectAddress\",\n        \"CorrectCharges\"\n      ]\n    },\n    {\n      \"id\": \"MUC-20171200000023\",\n      \"number\": \"20171200000023\",\n      \"type\": \"Initial\",\n      \"languageCode\": \"de\",\n      \"folioId\": \"DHNSHFL-1-5\",\n      \"reservationId\": \"DHNSHFL-1\",\n      \"propertyId\": \"MUC\",\n      \"writeOffReason\": \"Some weighty reason\",\n      \"subTotal\": {\n        \"amount\": 100.0,\n        \"currency\": \"EUR\"\n      },\n      \"paymentSettled\": false,\n      \"status\": \"WrittenOff\",\n      \"created\": \"2022-06-09T08:41:19.3534281+02:00\",\n      \"guestName\": \"Yury Vlasov\"\n    }\n  ],\n  \"count\": 5\n}"
      },
      "InvoiceModel": {
        "required": [
          "commercialInformation",
          "created",
          "folioId",
          "from",
          "id",
          "invoiceDate",
          "languageCode",
          "lineItems",
          "number",
          "paymentSettled",
          "propertyCountryCode",
          "propertyId",
          "status",
          "to",
          "total",
          "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Invoice identifier",
            "type": "string"
          },
          "number": {
            "description": "Invoice number",
            "type": "string"
          },
          "type": {
            "description": "Invoice type",
            "enum": [
              "Initial",
              "Cancellation",
              "Correction",
              "Advance",
              "AdvanceCancellation",
              "AdvanceCorrection"
            ],
            "type": "string"
          },
          "to": {
            "$ref": "#/components/schemas/InvoiceRecipientModel"
          },
          "paymentSettled": {
            "description": "True, if this invoice had no outstanding payments or was settled.",
            "type": "boolean"
          },
          "status": {
            "description": "Status of the invoice",
            "enum": [
              "FullyPaid",
              "Unpaid",
              "WrittenOff"
            ],
            "type": "string"
          },
          "created": {
            "format": "date-time",
            "description": "Date of creation<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
            "type": "string"
          },
          "relatedInvoiceNumber": {
            "description": "If the invoice is related to another invoice, this field contains related invoice number\r\nFor example, if the invoice has Cancellation type,\r\nthis field contains the number of invoice which is being cancelled",
            "type": "string"
          },
          "writeOffReason": {
            "description": "If the invoice was written-off, this field contains the reason why it was written-off",
            "type": "string"
          },
          "allowedActions": {
            "description": "Depending on the state of the invoice, certain actions are allowed or not.\r\nThis list includes all actions you can perform on this invoice.",
            "type": "array",
            "items": {
              "enum": [
                "CorrectAddress",
                "CorrectCharges",
                "MarkAsPaid",
                "Cancel",
                "WriteOff"
              ],
              "type": "string"
            }
          },
          "invoiceDate": {
            "format": "date",
            "description": "Date the invoice has been created",
            "type": "string",
            "example": "2020-10-10"
          },
          "folioId": {
            "description": "The folio this invoice was requested for",
            "type": "string"
          },
          "from": {
            "$ref": "#/components/schemas/InvoiceSenderModel"
          },
          "commercialInformation": {
            "$ref": "#/components/schemas/CommercialInfoModel"
          },
          "bankAccount": {
            "$ref": "#/components/schemas/BankAccountModel"
          },
          "paymentTerms": {
            "description": "Specification of the payment terms, as defined in the property",
            "type": "string"
          },
          "lineItems": {
            "$ref": "#/components/schemas/InvoiceLineItemsModel"
          },
          "payments": {
            "description": "A list of all payments",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InvoicePaymentModel"
            }
          },
          "outstandingPayment": {
            "$ref": "#/components/schemas/MonetaryValueModel"
          },
          "taxDetails": {
            "description": "The subtotal, displaying net and tax amount for each VAT type",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TaxDetailModel"
            }
          },
          "total": {
            "$ref": "#/components/schemas/MonetaryValueModel"
          },
          "stayInfo": {
            "$ref": "#/components/schemas/StayInfoModel"
          },
          "propertyId": {
            "description": "The ID of the property",
            "type": "string"
          },
          "propertyCountryCode": {
            "description": "The country code of the property",
            "type": "string"
          },
          "languageCode": {
            "description": "Language which was used to create the invoice",
            "type": "string"
          },
          "company": {
            "$ref": "#/components/schemas/EmbeddedCompanyModel"
          }
        },
        "example": "{\n  \"id\": \"INVOICE-SGZLTBJC-1\",\n  \"number\": \"MUC_20190328000000228\",\n  \"type\": \"Initial\",\n  \"to\": {\n    \"name\": \"John D. Doe\",\n    \"address\": {\n      \"addressLine1\": \"Baker Street 7\",\n      \"postalCode\": \"10005\",\n      \"city\": \"London\",\n      \"countryCode\": \"GB\"\n    },\n    \"companyName\": \"Investigators Inc.\",\n    \"companyTaxId\": \"GB-3358791\",\n    \"reference\": \"REF-111\"\n  },\n  \"paymentSettled\": true,\n  \"status\": \"FullyPaid\",\n  \"created\": \"0001-01-01T00:00:00Z\",\n  \"writeOffReason\": \"Weighty reason\",\n  \"allowedActions\": [\n    \"CorrectAddress\",\n    \"CorrectCharges\"\n  ],\n  \"invoiceDate\": \"2022-06-09\",\n  \"folioId\": \"SGZLTBJC-1\",\n  \"from\": {\n    \"name\": \"The Bay Hotel\",\n    \"address\": {\n      \"addressLine1\": \"Ocean Drive 44\",\n      \"postalCode\": \"55511\",\n      \"city\": \"Santa Cruz\",\n      \"countryCode\": \"US\"\n    }\n  },\n  \"commercialInformation\": {\n    \"registerEntry\": \"200417510087, California\",\n    \"taxId\": \"775-43-2106\"\n  },\n  \"bankAccount\": {\n    \"iban\": \"DE44 5001 0517 5407 3249 31\",\n    \"bic\": \"SSKMDEMMXXX\",\n    \"bank\": \"Stadtsparkasse München\"\n  },\n  \"paymentTerms\": \"Pay within 7 days\",\n  \"lineItems\": {\n    \"lineItems\": [\n      {\n        \"date\": \"2022-06-09\",\n        \"description\": \"Double Room\",\n        \"price\": {\n          \"amount\": 130.0,\n          \"currency\": \"EUR\"\n        },\n        \"vatType\": \"Reduced\",\n        \"vatPercent\": 7.0,\n        \"isNoShowFee\": false,\n        \"guest\": \"John Doe\"\n      },\n      {\n        \"date\": \"2022-06-09\",\n        \"description\": \"Service Package\",\n        \"price\": {\n          \"amount\": 20.0,\n          \"currency\": \"EUR\"\n        },\n        \"vatType\": \"Normal\",\n        \"vatPercent\": 19.0,\n        \"isNoShowFee\": false,\n        \"guest\": \"Jane Air\"\n      },\n      {\n        \"date\": \"2022-06-09\",\n        \"description\": \"Business Lounge Access\",\n        \"price\": {\n          \"amount\": 40.0,\n          \"currency\": \"EUR\"\n        },\n        \"vatType\": \"Normal\",\n        \"vatPercent\": 19.0,\n        \"isNoShowFee\": false,\n        \"guest\": \"John Doe\"\n      }\n    ],\n    \"subTotal\": {\n      \"amount\": 190.0,\n      \"currency\": \"EUR\"\n    }\n  },\n  \"payments\": [\n    {\n      \"id\": \"PAY-1\",\n      \"method\": \"BankTransfer\",\n      \"methodName\": \"Banküberweisung\",\n      \"amount\": {\n        \"amount\": 130.0,\n        \"currency\": \"EUR\"\n      },\n      \"paymentDate\": \"2022-06-09T11:41:19.3534281+02:00\",\n      \"businessDate\": \"0001-01-01\"\n    },\n    {\n      \"id\": \"PAY-2\",\n      \"method\": \"Cash\",\n      \"methodName\": \"Bar\",\n      \"amount\": {\n        \"amount\": 30.0,\n        \"currency\": \"EUR\"\n      },\n      \"paymentDate\": \"2022-06-09T11:41:19.3534281+02:00\",\n      \"businessDate\": \"0001-01-01\"\n    }\n  ],\n  \"taxDetails\": [\n    {\n      \"vatType\": \"Reduced\",\n      \"vatPercent\": 7.0,\n      \"net\": {\n        \"amount\": 120.0,\n        \"currency\": \"EUR\"\n      },\n      \"tax\": {\n        \"amount\": 10.0,\n        \"currency\": \"EUR\"\n      }\n    },\n    {\n      \"vatType\": \"Normal\",\n      \"vatPercent\": 19.0,\n      \"net\": {\n        \"amount\": 49.0,\n        \"currency\": \"EUR\"\n      },\n      \"tax\": {\n        \"amount\": 11.0,\n        \"currency\": \"EUR\"\n      }\n    }\n  ],\n  \"total\": {\n    \"amount\": -30.0,\n    \"currency\": \"EUR\"\n  },\n  \"stayInfo\": {\n    \"guestName\": \"John Doe\",\n    \"arrivalDate\": \"2022-06-06\",\n    \"departureDate\": \"2022-06-09\",\n    \"reservationId\": \"ASTUBXVZ-1\"\n  },\n  \"propertyId\": \"MUC\",\n  \"propertyCountryCode\": \"DE\",\n  \"languageCode\": \"EN\",\n  \"company\": {\n    \"id\": \"MUC-ACME\",\n    \"code\": \"ACME\",\n    \"name\": \"ACME Inc.\"\n  }\n}"
      },
      "InvoicePaymentModel": {
        "required": [
          "amount",
          "id",
          "method",
          "methodName"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Id of the payment. This is unique within one folio.",
            "type": "string"
          },
          "method": {
            "description": "The Payment Method type.",
            "enum": [
              "Cash",
              "BankTransfer",
              "CreditCard",
              "Invoice",
              "Amex",
              "VisaCredit",
              "VisaDebit",
              "MasterCard",
              "MasterCardDebit",
              "Maestro",
              "GiroCard",
              "DiscoverCard",
              "Diners",
              "Jcb",
              "BookingCom",
              "VPay",
              "PayPal",
              "Postcard",
              "Reka",
              "Twint",
              "Lunchcheck",
              "Voucher",
              "ChinaUnionPay",
              "Other",
              "Cheque",
              "Airbnb",
              "HolidayCheck",
              "PspCash",
              "PspDebit",
              "PspBanking",
              "PspOpenInvoice",
              "PspWallet"
            ],
            "type": "string"
          },
          "methodName": {
            "description": "The Payment Method name translated in the requested language of the invoice",
            "type": "string"
          },
          "amount": {
            "$ref": "#/components/schemas/MonetaryValueModel"
          },
          "paymentDate": {
            "format": "date-time",
            "description": "The date when the payment was done<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
            "type": "string"
          },
          "businessDate": {
            "format": "date",
            "description": "The business date of the payment, can be different from the payment date for some payments posted after midnight and before 6AM.",
            "type": "string",
            "example": "2020-10-10"
          }
        },
        "example": "{\n  \"id\": \"C3Q890XZ\",\n  \"method\": \"BankTransfer\",\n  \"methodName\": \"Banküberweisung\",\n  \"amount\": {\n    \"amount\": 230.0,\n    \"currency\": \"EUR\"\n  },\n  \"paymentDate\": \"2022-06-09T10:41:19.3534281+02:00\",\n  \"businessDate\": \"1984-06-07\"\n}"
      },
      "InvoiceRecipientModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "address": {
            "$ref": "#/components/schemas/NonStrictAddressModel"
          },
          "companyName": {
            "type": "string"
          },
          "companyTaxId": {
            "type": "string"
          },
          "reference": {
            "type": "string"
          }
        }
      },
      "InvoiceSenderModel": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "address": {
            "$ref": "#/components/schemas/AddressModel"
          }
        }
      },
      "MessageItemCollection": {
        "type": "object",
        "properties": {
          "messages": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "readOnly": true
          }
        }
      },
      "MonetaryValueModel": {
        "required": [
          "amount",
          "currency"
        ],
        "type": "object",
        "properties": {
          "amount": {
            "format": "double",
            "type": "number"
          },
          "currency": {
            "type": "string"
          }
        }
      },
      "MoveAllChargesRequest": {
        "required": [
          "reason",
          "targetFolioId"
        ],
        "type": "object",
        "properties": {
          "targetFolioId": {
            "description": "ID of the target folio",
            "type": "string"
          },
          "reason": {
            "description": "Description of why the move is performed",
            "type": "string"
          }
        },
        "example": "{\n  \"targetFolioId\": \"KFCSQUID-1\",\n  \"reason\": \"Test\"\n}"
      },
      "MoveChargesRequest": {
        "required": [
          "reason",
          "targetFolioId"
        ],
        "type": "object",
        "properties": {
          "targetFolioId": {
            "description": "ID of the target folio",
            "type": "string"
          },
          "reason": {
            "description": "Description of why the move is performed",
            "type": "string"
          },
          "chargeIds": {
            "description": "The IDs of the charges that should be moved",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "allowanceIds": {
            "description": "The IDs of the allowances that should be moved.\r\nOnly moving global allowances is supported",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "transitoryChargeIds": {
            "description": "The IDs of the transitory charges that should be moved",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "example": "{\n  \"targetFolioId\": \"KFCSQUID-1\",\n  \"reason\": \"Test\",\n  \"chargeIds\": [\n    \"KFCSQUID-1-C-1\",\n    \"KFCSQUID-1-C-5\"\n  ],\n  \"allowanceIds\": [\n    \"KFCSQUID-1-A-1\",\n    \"KFCSQUID-1-A-2\"\n  ],\n  \"transitoryChargeIds\": [\n    \"KFCSQUID-1-TC-1\",\n    \"KFCSQUID-1-TC-2\"\n  ]\n}"
      },
      "MovePaymentsRequest": {
        "required": [
          "paymentIds",
          "reason",
          "targetFolioId"
        ],
        "type": "object",
        "properties": {
          "targetFolioId": {
            "description": "ID of the target folio",
            "type": "string"
          },
          "reason": {
            "description": "Description of why the move is performed",
            "type": "string"
          },
          "paymentIds": {
            "description": "The IDs of the payments that should be moved",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "example": "{\n  \"targetFolioId\": \"KFCSQUID-1\",\n  \"reason\": \"Test\",\n  \"paymentIds\": [\n    \"KFCSQUID-1-C-1\",\n    \"KFCSQUID-1-C-5\"\n  ]\n}"
      },
      "NonStrictAddressModel": {
        "type": "object",
        "properties": {
          "addressLine1": {
            "type": "string"
          },
          "addressLine2": {
            "type": "string"
          },
          "postalCode": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "regionCode": {
            "type": "string"
          },
          "countryCode": {
            "type": "string"
          }
        }
      },
      "Operation": {
        "type": "object",
        "properties": {
          "value": {},
          "path": {
            "type": "string"
          },
          "op": {
            "type": "string"
          },
          "from": {
            "type": "string"
          }
        }
      },
      "PayInvoiceRequest": {
        "required": [
          "paymentMethod",
          "receipt"
        ],
        "type": "object",
        "properties": {
          "paymentMethod": {
            "description": "The payment method used for paying the invoice. Used for accounting.",
            "enum": [
              "Cash",
              "BankTransfer",
              "CreditCard",
              "Amex",
              "VisaCredit",
              "VisaDebit",
              "MasterCard",
              "MasterCardDebit",
              "Maestro",
              "GiroCard",
              "DiscoverCard",
              "Diners",
              "Jcb",
              "BookingCom",
              "VPay",
              "PayPal",
              "Postcard",
              "Reka",
              "Twint",
              "Lunchcheck",
              "Voucher",
              "ChinaUnionPay",
              "Other",
              "Cheque",
              "Airbnb",
              "HolidayCheck"
            ],
            "type": "string"
          },
          "receipt": {
            "description": "The receipt for the payment. Each transaction in accounting has a receipt set.",
            "type": "string"
          }
        },
        "example": "{\n  \"paymentMethod\": \"BankTransfer\",\n  \"receipt\": \"BANK-123456\"\n}"
      },
      "PaymentCreatedModel": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          }
        }
      },
      "PaymentListModel": {
        "required": [
          "count",
          "payments"
        ],
        "type": "object",
        "properties": {
          "payments": {
            "description": "List of payments",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FolioPaymentModel"
            }
          },
          "count": {
            "format": "int64",
            "description": "Total count of items",
            "type": "integer"
          }
        },
        "example": "{\n  \"payments\": [\n    {\n      \"id\": \"PAY-1\",\n      \"method\": \"BankTransfer\",\n      \"amount\": {\n        \"amount\": 50.0,\n        \"currency\": \"EUR\"\n      },\n      \"receipt\": \"CA-147-339\",\n      \"paymentDate\": \"0001-01-01T00:00:00Z\",\n      \"status\": \"Success\",\n      \"type\": \"Custom\",\n      \"businessDate\": \"0001-01-01\"\n    },\n    {\n      \"id\": \"PAY-2\",\n      \"amount\": {\n        \"amount\": 2.14,\n        \"currency\": \"EUR\"\n      },\n      \"receipt\": \"HSKJCNDR-1\",\n      \"paymentDate\": \"0001-01-01T00:00:00Z\",\n      \"status\": \"Pending\",\n      \"type\": \"Custom\",\n      \"businessDate\": \"0001-01-01\"\n    }\n  ],\n  \"count\": 2\n}"
      },
      "PaymentMethodListModel": {
        "required": [
          "paymentMethods"
        ],
        "type": "object",
        "properties": {
          "paymentMethods": {
            "description": "List of supported payment methods.",
            "type": "array",
            "items": {
              "enum": [
                "Cash",
                "BankTransfer",
                "CreditCard",
                "Amex",
                "VisaCredit",
                "VisaDebit",
                "MasterCard",
                "MasterCardDebit",
                "Maestro",
                "GiroCard",
                "DiscoverCard",
                "Diners",
                "Jcb",
                "BookingCom",
                "VPay",
                "PayPal",
                "Postcard",
                "Reka",
                "Twint",
                "Lunchcheck",
                "Voucher",
                "ChinaUnionPay",
                "Other",
                "Cheque",
                "Airbnb",
                "HolidayCheck"
              ],
              "type": "string"
            }
          }
        },
        "example": "{\n  \"paymentMethods\": [\n    \"Cash\",\n    \"BankTransfer\",\n    \"CreditCard\",\n    \"Amex\",\n    \"VisaCredit\",\n    \"VisaDebit\",\n    \"MasterCard\",\n    \"MasterCardDebit\",\n    \"Maestro\",\n    \"GiroCard\",\n    \"DiscoverCard\",\n    \"Diners\",\n    \"Jcb\",\n    \"BookingCom\",\n    \"VPay\",\n    \"PayPal\",\n    \"Postcard\",\n    \"Reka\",\n    \"Twint\",\n    \"Lunchcheck\",\n    \"Voucher\",\n    \"ChinaUnionPay\",\n    \"Other\",\n    \"Cheque\",\n    \"Airbnb\",\n    \"HolidayCheck\"\n  ]\n}"
      },
      "PaymentModel": {
        "required": [
          "amount",
          "businessDate",
          "id",
          "method"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Id of the payment. This is unique within one folio.",
            "type": "string"
          },
          "method": {
            "description": "The Payment Method.",
            "enum": [
              "Cash",
              "BankTransfer",
              "CreditCard",
              "Invoice",
              "Amex",
              "VisaCredit",
              "VisaDebit",
              "MasterCard",
              "MasterCardDebit",
              "Maestro",
              "GiroCard",
              "DiscoverCard",
              "Diners",
              "Jcb",
              "BookingCom",
              "VPay",
              "PayPal",
              "Postcard",
              "Reka",
              "Twint",
              "Lunchcheck",
              "Voucher",
              "ChinaUnionPay",
              "Other",
              "Cheque",
              "Airbnb",
              "HolidayCheck",
              "PspCash",
              "PspDebit",
              "PspBanking",
              "PspOpenInvoice",
              "PspWallet"
            ],
            "type": "string"
          },
          "amount": {
            "$ref": "#/components/schemas/MonetaryValueModel"
          },
          "externalReference": {
            "$ref": "#/components/schemas/ExternalReference"
          },
          "receipt": {
            "description": "Receipt for the payment. For payments done by the payment service provider integration, this is the same as the pspReference.",
            "type": "string"
          },
          "paymentDate": {
            "format": "date-time",
            "description": "The date when the payment was done<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
            "type": "string"
          },
          "movedFrom": {
            "$ref": "#/components/schemas/EmbeddedFolioModel"
          },
          "movedTo": {
            "$ref": "#/components/schemas/EmbeddedFolioModel"
          },
          "movedReason": {
            "description": "A reason why move operation was performed",
            "type": "string"
          },
          "sourcePaymentId": {
            "description": "A link to the original payment in case of splitting payments",
            "type": "string"
          },
          "businessDate": {
            "format": "date",
            "description": "The business date of the payment",
            "type": "string",
            "example": "2020-10-10"
          }
        },
        "example": "{\n  \"id\": \"C3Q890XZ\",\n  \"method\": \"Cash\",\n  \"amount\": {\n    \"amount\": 230.0,\n    \"currency\": \"EUR\"\n  },\n  \"externalReference\": {\n    \"merchantReference\": \"BLIPKWXP-1\",\n    \"pspReference\": \"8535063621298633\"\n  },\n  \"paymentDate\": \"0001-01-01T00:00:00Z\",\n  \"businessDate\": \"2021-05-22\"\n}"
      },
      "PaymentPaidChargesRequest": {
        "required": [
          "amount",
          "chargeId"
        ],
        "type": "object",
        "properties": {
          "chargeId": {
            "description": "The ID of the charge being paid",
            "type": "string"
          },
          "amount": {
            "format": "double",
            "description": "The amount being covered with the payment. If not provided it is assumed that the payment is covering the full amount of the charge",
            "type": "number"
          }
        }
      },
      "PendingPaymentModel": {
        "required": [
          "amount",
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Id of the payment task.",
            "type": "string"
          },
          "amount": {
            "$ref": "#/components/schemas/MonetaryValueModel"
          },
          "terminalId": {
            "description": "The terminal used for the payment.",
            "type": "string"
          }
        },
        "example": "{\n  \"id\": \"HESOYAM\",\n  \"amount\": {\n    \"amount\": 228.0,\n    \"currency\": \"EUR\"\n  },\n  \"terminalId\": \"T400\"\n}"
      },
      "PreciseMonetaryValueModel": {
        "description": "Use this model in all accounting reports",
        "required": [
          "amount",
          "currency"
        ],
        "type": "object",
        "properties": {
          "amount": {
            "format": "double",
            "type": "number"
          },
          "currency": {
            "type": "string"
          }
        }
      },
      "PreviewInvoiceModel": {
        "required": [
          "commercialInformation",
          "createInvoiceAction",
          "folioId",
          "from",
          "invoiceDate",
          "languageCode",
          "lineItems",
          "propertyCountryCode",
          "propertyId",
          "total"
        ],
        "type": "object",
        "properties": {
          "to": {
            "$ref": "#/components/schemas/InvoiceRecipientModel"
          },
          "createInvoiceAction": {
            "description": "Describes what will happen, when you try to create an invoice with the folio in the state it is in now.",
            "enum": [
              "CannotCreateInvoice",
              "CreatesInvoice",
              "CreatesInvoiceAndClosesFolio",
              "CreatesArInvoiceAndClosesFolio"
            ],
            "type": "string"
          },
          "createInvoiceWarning": {
            "$ref": "#/components/schemas/CreateInvoiceWarningModel"
          },
          "invoiceDate": {
            "format": "date",
            "description": "Date the invoice has been created",
            "type": "string",
            "example": "2020-10-10"
          },
          "folioId": {
            "description": "The folio this invoice was requested for",
            "type": "string"
          },
          "from": {
            "$ref": "#/components/schemas/InvoiceSenderModel"
          },
          "commercialInformation": {
            "$ref": "#/components/schemas/CommercialInfoModel"
          },
          "bankAccount": {
            "$ref": "#/components/schemas/BankAccountModel"
          },
          "paymentTerms": {
            "description": "Specification of the payment terms, as defined in the property",
            "type": "string"
          },
          "lineItems": {
            "$ref": "#/components/schemas/InvoiceLineItemsModel"
          },
          "payments": {
            "description": "A list of all payments",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InvoicePaymentModel"
            }
          },
          "outstandingPayment": {
            "$ref": "#/components/schemas/MonetaryValueModel"
          },
          "taxDetails": {
            "description": "The subtotal, displaying net and tax amount for each VAT type",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TaxDetailModel"
            }
          },
          "total": {
            "$ref": "#/components/schemas/MonetaryValueModel"
          },
          "stayInfo": {
            "$ref": "#/components/schemas/StayInfoModel"
          },
          "propertyId": {
            "description": "The ID of the property",
            "type": "string"
          },
          "propertyCountryCode": {
            "description": "The country code of the property",
            "type": "string"
          },
          "languageCode": {
            "description": "Language which was used to create the invoice",
            "type": "string"
          },
          "company": {
            "$ref": "#/components/schemas/EmbeddedCompanyModel"
          }
        },
        "example": "{\n  \"to\": {\n    \"name\": \"John D. Doe\",\n    \"address\": {\n      \"addressLine1\": \"Baker Street 7\",\n      \"postalCode\": \"10005\",\n      \"city\": \"London\",\n      \"countryCode\": \"GB\"\n    },\n    \"companyName\": \"Investigators Inc.\",\n    \"companyTaxId\": \"GB-3358791\",\n    \"reference\": \"REF-11\"\n  },\n  \"createInvoiceAction\": \"CreatesInvoice\",\n  \"invoiceDate\": \"2022-06-09\",\n  \"folioId\": \"SGZLTBJC-1\",\n  \"from\": {\n    \"name\": \"The Bay Hotel\",\n    \"address\": {\n      \"addressLine1\": \"Ocean Drive 44\",\n      \"postalCode\": \"55511\",\n      \"city\": \"Santa Cruz\",\n      \"countryCode\": \"US\"\n    }\n  },\n  \"commercialInformation\": {\n    \"registerEntry\": \"200417510087, California\",\n    \"taxId\": \"775-43-2106\"\n  },\n  \"bankAccount\": {\n    \"iban\": \"DE44 5001 0517 5407 3249 31\",\n    \"bic\": \"SSKMDEMMXXX\",\n    \"bank\": \"Stadtsparkasse München\"\n  },\n  \"paymentTerms\": \"Pay within 7 days\",\n  \"lineItems\": {\n    \"lineItems\": [\n      {\n        \"date\": \"2022-06-09\",\n        \"description\": \"Double Room\",\n        \"price\": {\n          \"amount\": 130.0,\n          \"currency\": \"EUR\"\n        },\n        \"vatType\": \"Reduced\",\n        \"vatPercent\": 7.0,\n        \"isNoShowFee\": false\n      },\n      {\n        \"date\": \"2022-06-09\",\n        \"description\": \"Service Package\",\n        \"price\": {\n          \"amount\": 20.0,\n          \"currency\": \"EUR\"\n        },\n        \"vatType\": \"Normal\",\n        \"vatPercent\": 19.0,\n        \"isNoShowFee\": false\n      },\n      {\n        \"date\": \"2022-06-09\",\n        \"description\": \"Business Lounge Access\",\n        \"price\": {\n          \"amount\": 40.0,\n          \"currency\": \"EUR\"\n        },\n        \"vatType\": \"Normal\",\n        \"vatPercent\": 19.0,\n        \"isNoShowFee\": false\n      }\n    ],\n    \"subTotal\": {\n      \"amount\": 190.0,\n      \"currency\": \"EUR\"\n    }\n  },\n  \"payments\": [\n    {\n      \"id\": \"PAY-1\",\n      \"method\": \"BankTransfer\",\n      \"methodName\": \"Banküberweisung\",\n      \"amount\": {\n        \"amount\": 130.0,\n        \"currency\": \"EUR\"\n      },\n      \"paymentDate\": \"2022-06-09T11:41:19.3534281+02:00\",\n      \"businessDate\": \"0001-01-01\"\n    },\n    {\n      \"id\": \"PAY-2\",\n      \"method\": \"Cash\",\n      \"methodName\": \"Bar\",\n      \"amount\": {\n        \"amount\": 30.0,\n        \"currency\": \"EUR\"\n      },\n      \"paymentDate\": \"2022-06-09T11:41:19.3534281+02:00\",\n      \"businessDate\": \"0001-01-01\"\n    }\n  ],\n  \"taxDetails\": [\n    {\n      \"vatType\": \"Reduced\",\n      \"vatPercent\": 7.0,\n      \"net\": {\n        \"amount\": 120.0,\n        \"currency\": \"EUR\"\n      },\n      \"tax\": {\n        \"amount\": 10.0,\n        \"currency\": \"EUR\"\n      }\n    },\n    {\n      \"vatType\": \"Normal\",\n      \"vatPercent\": 19.0,\n      \"net\": {\n        \"amount\": 49.0,\n        \"currency\": \"EUR\"\n      },\n      \"tax\": {\n        \"amount\": 11.0,\n        \"currency\": \"EUR\"\n      }\n    }\n  ],\n  \"total\": {\n    \"amount\": -30.0,\n    \"currency\": \"EUR\"\n  },\n  \"stayInfo\": {\n    \"guestName\": \"John Doe\",\n    \"arrivalDate\": \"2022-06-06\",\n    \"departureDate\": \"2022-06-09\",\n    \"reservationId\": \"ASTUBXVZ-1\"\n  },\n  \"propertyId\": \"ID\",\n  \"propertyCountryCode\": \"BY\",\n  \"languageCode\": \"en\"\n}"
      },
      "ReceiptModel": {
        "required": [
          "number"
        ],
        "type": "object",
        "properties": {
          "type": {
            "description": "The type of receipt.",
            "enum": [
              "Custom",
              "Reservation",
              "Invoice",
              "PspReference"
            ],
            "type": "string"
          },
          "number": {
            "description": "The receipt number.",
            "type": "string"
          }
        }
      },
      "RefundCreatedModel": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          }
        }
      },
      "RefundListModel": {
        "required": [
          "count",
          "refunds"
        ],
        "type": "object",
        "properties": {
          "refunds": {
            "description": "List of refunds",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RefundModel"
            }
          },
          "count": {
            "format": "int64",
            "description": "Total count of items",
            "type": "integer"
          }
        },
        "example": "{\n  \"refunds\": [\n    {\n      \"id\": \"MUC-12454\",\n      \"method\": \"Cash\",\n      \"amount\": {\n        \"amount\": 100.0,\n        \"currency\": \"EUR\"\n      },\n      \"refundDate\": \"2022-06-09T11:41:19.3534281+02:00\",\n      \"sourcePaymentId\": \"MUC-KSJHDF\",\n      \"status\": \"Failure\",\n      \"failureReason\": \"Can't refund more than original payment.\",\n      \"failureCode\": \"Failed\",\n      \"businessDate\": \"2022-06-09\"\n    },\n    {\n      \"id\": \"BER-12454\",\n      \"method\": \"CreditCard\",\n      \"amount\": {\n        \"amount\": 220.0,\n        \"currency\": \"EUR\"\n      },\n      \"refundDate\": \"2022-06-09T11:41:19.3534281+02:00\",\n      \"sourcePaymentId\": \"BER-UWNWFD\",\n      \"status\": \"Pending\",\n      \"businessDate\": \"2022-06-09\"\n    }\n  ],\n  \"count\": 2\n}"
      },
      "RefundModel": {
        "required": [
          "amount",
          "businessDate",
          "id",
          "method",
          "refundDate",
          "status"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Id of the refund",
            "type": "string"
          },
          "method": {
            "description": "The payment method",
            "enum": [
              "Cash",
              "BankTransfer",
              "CreditCard",
              "Invoice",
              "Amex",
              "VisaCredit",
              "VisaDebit",
              "MasterCard",
              "MasterCardDebit",
              "Maestro",
              "GiroCard",
              "DiscoverCard",
              "Diners",
              "Jcb",
              "BookingCom",
              "VPay",
              "PayPal",
              "Postcard",
              "Reka",
              "Twint",
              "Lunchcheck",
              "Voucher",
              "ChinaUnionPay",
              "Other",
              "Cheque",
              "Airbnb",
              "HolidayCheck",
              "PspCash",
              "PspDebit",
              "PspBanking",
              "PspOpenInvoice",
              "PspWallet"
            ],
            "type": "string"
          },
          "amount": {
            "$ref": "#/components/schemas/MonetaryValueModel"
          },
          "externalReference": {
            "$ref": "#/components/schemas/ExternalReference"
          },
          "receipt": {
            "description": "Receipt for the payment. For payments run through the apaleo payment services it is set to the pspReference",
            "type": "string"
          },
          "refundDate": {
            "format": "date-time",
            "description": "The date when the refund was done<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
            "type": "string"
          },
          "sourcePaymentId": {
            "description": "A link to the payment that the refund was done for",
            "type": "string"
          },
          "status": {
            "description": "Status of the refund",
            "enum": [
              "Pending",
              "Success",
              "Failure",
              "Canceled"
            ],
            "type": "string"
          },
          "failureReason": {
            "type": "string"
          },
          "failureCode": {
            "enum": [
              "Failed",
              "TimedOut"
            ],
            "type": "string"
          },
          "movedFrom": {
            "$ref": "#/components/schemas/EmbeddedFolioModel"
          },
          "movedTo": {
            "$ref": "#/components/schemas/EmbeddedFolioModel"
          },
          "movedReason": {
            "description": "A reason why the move operation was performed",
            "type": "string"
          },
          "businessDate": {
            "format": "date",
            "description": "The business date of the refund",
            "type": "string",
            "example": "2020-10-10"
          }
        },
        "example": "{\n  \"id\": \"KDSF86SF\",\n  \"method\": \"CreditCard\",\n  \"amount\": {\n    \"amount\": 150.0,\n    \"currency\": \"EUR\"\n  },\n  \"externalReference\": {\n    \"merchantReference\": \"JDKLKDS-1\",\n    \"pspReference\": \"091283918312\"\n  },\n  \"refundDate\": \"2022-06-09T11:41:19.3534281+02:00\",\n  \"status\": \"Pending\",\n  \"businessDate\": \"2022-06-09\"\n}"
      },
      "ServiceTypeListModel": {
        "required": [
          "serviceTypes"
        ],
        "type": "object",
        "properties": {
          "serviceTypes": {
            "description": "List of supported payment methods.",
            "type": "array",
            "items": {
              "enum": [
                "Other",
                "Accommodation",
                "FoodAndBeverages",
                "CancellationFees",
                "NoShow",
                "CityTax"
              ],
              "type": "string"
            }
          }
        },
        "example": "{\n  \"serviceTypes\": [\n    \"Other\",\n    \"Accommodation\",\n    \"FoodAndBeverages\",\n    \"CancellationFees\",\n    \"NoShow\",\n    \"CityTax\"\n  ]\n}"
      },
      "SlimFinanceAccountModel": {
        "required": [
          "accountNumber",
          "hasChildren",
          "isArchived",
          "name",
          "type"
        ],
        "type": "object",
        "properties": {
          "accountNumber": {
            "description": "The account number. Unique identifier within one property.",
            "type": "string"
          },
          "name": {
            "description": "The name of the account.",
            "type": "string"
          },
          "type": {
            "description": "The type of account.",
            "enum": [
              "Revenues",
              "Payments",
              "Liabilities",
              "Receivables",
              "Vat",
              "House",
              "AccountsReceivable",
              "CityTaxes",
              "TransitoryItems",
              "VatOnLiabilities",
              "LossOfAccountsReceivable"
            ],
            "type": "string"
          },
          "parentNumber": {
            "description": "Parent account number. Null for top-level accounts.",
            "type": "string"
          },
          "hasChildren": {
            "description": "Indicates whether this account has children / sub accounts or not.",
            "type": "boolean"
          },
          "isArchived": {
            "description": "Indicates whether this account is archived ot not.",
            "type": "boolean"
          },
          "vat": {
            "$ref": "#/components/schemas/VatItemModel"
          },
          "subAccounts": {
            "description": "Sub accounts for this accounts.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SlimFinanceAccountModel"
            }
          }
        },
        "example": "{\n  \"name\": \"Other Revenues\",\n  \"type\": \"Revenues\",\n  \"parentNumber\": \"5000\",\n  \"hasChildren\": true,\n  \"isArchived\": false,\n  \"subAccounts\": [\n    {\n      \"name\": \"Other Revenues (7%)\",\n      \"type\": \"Revenues\",\n      \"parentNumber\": \"RevenueOther\",\n      \"hasChildren\": false,\n      \"isArchived\": true\n    }\n  ]\n}"
      },
      "SplitChargeRequest": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "percent": {
            "format": "double",
            "description": "The percent to split charge (between 0 and 100)",
            "type": "number"
          },
          "amount": {
            "$ref": "#/components/schemas/MonetaryValueModel"
          },
          "type": {
            "description": "How to split the charge: by percent value, or by absolute amount",
            "enum": [
              "ByPercent",
              "ByAmount"
            ],
            "type": "string"
          }
        },
        "example": "{\n  \"percent\": 51.0,\n  \"type\": \"ByPercent\"\n}"
      },
      "SplitChargeResult": {
        "type": "object",
        "properties": {
          "allowanceId": {
            "type": "string"
          },
          "firstChargeId": {
            "type": "string"
          },
          "secondChargeId": {
            "type": "string"
          }
        },
        "example": "{\n  \"allowanceId\": \"ABCDEF-1-1\",\n  \"firstChargeId\": \"ABCDEF-1-2\",\n  \"secondChargeId\": \"ABCDEF-1-2\"\n}"
      },
      "SplitPaymentRequest": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "percent": {
            "format": "double",
            "description": "The percent to split payment (between 0 and 100)",
            "type": "number"
          },
          "amount": {
            "$ref": "#/components/schemas/MonetaryValueModel"
          },
          "type": {
            "description": "How to split the payment: by percent value, or by absolute amount",
            "enum": [
              "ByPercent",
              "ByAmount"
            ],
            "type": "string"
          }
        },
        "example": "{\n  \"percent\": 51.0,\n  \"type\": \"ByPercent\"\n}"
      },
      "SplitPaymentResult": {
        "type": "object",
        "properties": {
          "refundId": {
            "type": "string"
          },
          "firstPaymentId": {
            "type": "string"
          },
          "secondPaymentId": {
            "type": "string"
          }
        },
        "example": "{\n  \"refundId\": \"ABCDEF-1-1\",\n  \"firstPaymentId\": \"ABCDEF-1-2\",\n  \"secondPaymentId\": \"ABCDEF-1-3\"\n}"
      },
      "StayInfoModel": {
        "required": [
          "arrivalDate",
          "departureDate",
          "guestName",
          "reservationId"
        ],
        "type": "object",
        "properties": {
          "guestName": {
            "description": "Name of the primary guest",
            "type": "string"
          },
          "arrivalDate": {
            "format": "date",
            "description": "The arrival date",
            "type": "string",
            "example": "2020-10-10"
          },
          "departureDate": {
            "format": "date",
            "description": "The departure date",
            "type": "string",
            "example": "2020-10-10"
          },
          "reservationId": {
            "description": "ID of the reservation this invoice is for, if any.",
            "type": "string"
          },
          "roomNumber": {
            "description": "The last room number",
            "type": "string"
          }
        }
      },
      "TaxAmountModel": {
        "required": [
          "amount",
          "percent",
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "description": "The VAT type",
            "enum": [
              "Null",
              "VeryReduced",
              "Reduced",
              "Normal",
              "Without",
              "Special",
              "ReducedCovid19",
              "NormalCovid19"
            ],
            "type": "string"
          },
          "percent": {
            "format": "double",
            "description": "The currently valid percent to calculate the VAT",
            "type": "number"
          },
          "amount": {
            "format": "double",
            "description": "The tax amount",
            "type": "number"
          }
        }
      },
      "TaxDetailModel": {
        "required": [
          "net",
          "tax",
          "vatPercent",
          "vatType"
        ],
        "type": "object",
        "properties": {
          "vatType": {
            "enum": [
              "Null",
              "VeryReduced",
              "Reduced",
              "Normal",
              "Without",
              "Special",
              "ReducedCovid19",
              "NormalCovid19"
            ],
            "type": "string"
          },
          "vatPercent": {
            "format": "double",
            "type": "number"
          },
          "net": {
            "$ref": "#/components/schemas/MonetaryValueModel"
          },
          "tax": {
            "$ref": "#/components/schemas/MonetaryValueModel"
          }
        }
      },
      "TransitoryChargeModel": {
        "required": [
          "amount",
          "created",
          "id",
          "name",
          "quantity",
          "serviceDate"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "ID for transitory charge. This is unique within one folio.",
            "type": "string"
          },
          "name": {
            "description": "The name, article number, or other description of this item",
            "type": "string"
          },
          "amount": {
            "$ref": "#/components/schemas/MonetaryValueModel"
          },
          "serviceType": {
            "description": "The service type of this transitory charge. As revenue and VAT of transitory charges are not recorded for the hotel, this is just FYI.",
            "enum": [
              "Other",
              "Accommodation",
              "FoodAndBeverages",
              "CancellationFees",
              "NoShow",
              "CityTax"
            ],
            "type": "string"
          },
          "serviceDate": {
            "format": "date",
            "description": "The date when this charge was added.",
            "type": "string",
            "example": "2020-10-10"
          },
          "created": {
            "format": "date-time",
            "description": "Date of creation<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
            "type": "string"
          },
          "receipt": {
            "description": "Receipt for this transaction",
            "type": "string"
          },
          "movedFrom": {
            "$ref": "#/components/schemas/EmbeddedFolioModel"
          },
          "movedTo": {
            "$ref": "#/components/schemas/EmbeddedFolioModel"
          },
          "movedReason": {
            "description": "A reason why move operation was performed",
            "type": "string"
          },
          "quantity": {
            "format": "int32",
            "description": "The count of services provided",
            "type": "integer"
          }
        }
      },
      "VatItemModel": {
        "required": [
          "percent",
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "description": "The VAT type",
            "enum": [
              "Null",
              "VeryReduced",
              "Reduced",
              "Normal",
              "Without",
              "Special",
              "ReducedCovid19",
              "NormalCovid19"
            ],
            "type": "string"
          },
          "percent": {
            "format": "double",
            "description": "The currently valid percent to calculate the VAT",
            "type": "number"
          }
        }
      },
      "VatListModel": {
        "type": "object",
        "properties": {
          "vatTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VatItemModel"
            }
          }
        },
        "example": "{\n  \"vatTypes\": [\n    {\n      \"type\": \"Null\",\n      \"percent\": 0.0\n    },\n    {\n      \"type\": \"Reduced\",\n      \"percent\": 7.0\n    },\n    {\n      \"type\": \"Normal\",\n      \"percent\": 19.0\n    }\n  ]\n}"
      },
      "ActionModel_PaymentAction_NotAllowedPaymentActionReason_": {
        "required": [
          "action",
          "isAllowed"
        ],
        "type": "object",
        "properties": {
          "action": {
            "enum": [
              "Cancel",
              "OnlineRefund",
              "ManualRefund"
            ],
            "type": "string"
          },
          "isAllowed": {
            "type": "boolean"
          },
          "reasons": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ActionReasonModel_NotAllowedPaymentActionReason_"
            }
          }
        }
      },
      "ActionReasonModel_NotAllowedPaymentActionReason_": {
        "required": [
          "code",
          "message"
        ],
        "type": "object",
        "properties": {
          "code": {
            "enum": [
              "CancelNotAllowedForPaymentNotInStatusPending",
              "CancelNotAllowedForPaymentNotOfPaymentLinkType",
              "OnlineRefundNotAllowedForRestrictedPaymentMethodOrAcquirer",
              "ManualRefundNotAllowedWhenOnlineRefundIsPossible"
            ],
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        }
      }
    }
  }
}