{
  "openapi": "3.0.0",
  "info": {
    "title": "DigitalOcean API",
    "version": "2.0",
    "description": "# Introduction\n\nThe DigitalOcean API allows you to manage Droplets and resources within the\nDigitalOcean cloud in a simple, programmatic way using conventional HTTP requests.\n\nAll of the functionality that you are familiar with in the DigitalOcean\ncontrol panel is also available through the API, allowing you to script the\ncomplex actions that your situation requires.\n\nThe API documentation will start with a general overview about the design\nand technology that has been implemented, followed by reference information\nabout specific endpoints.\n\n## Requests\n\nAny tool that is fluent in HTTP can communicate with the API simply by\nrequesting the correct URI. Requests should be made using the HTTPS protocol\nso that traffic is encrypted. The interface responds to different methods\ndepending on the action required.\n\n|Method|Usage|\n|--- |--- |\n|GET|For simple retrieval of information about your account, Droplets, or environment, you should use the GET method.  The information you request will be returned to you as a JSON object. The attributes defined by the JSON object can be used to form additional requests.  Any request using the GET method is read-only and will not affect any of the objects you are querying.|\n|DELETE|To destroy a resource and remove it from your account and environment, the DELETE method should be used.  This will remove the specified object if it is found.  If it is not found, the operation will return a response indicating that the object was not found. This idempotency means that you do not have to check for a resource's availability prior to issuing a delete command, the final state will be the same regardless of its existence.|\n|PUT|To update the information about a resource in your account, the PUT method is available. Like the DELETE Method, the PUT method is idempotent.  It sets the state of the target using the provided values, regardless of their current values. Requests using the PUT method do not need to check the current attributes of the object.|\n|PATCH|Some resources support partial modification. In these cases, the PATCH method is available. Unlike PUT which generally requires a complete representation of a resource, a PATCH request is is a set of instructions on how to modify a resource updating only specific attributes.|\n|POST|To create a new object, your request should specify the POST method. The POST request includes all of the attributes necessary to create a new object.  When you wish to create a new object, send a POST request to the target endpoint.|\n|HEAD|Finally, to retrieve metadata information, you should use the HEAD method to get the headers.  This returns only the header of what would be returned with an associated GET request. Response headers contain some useful information about your API access and the results that are available for your request. For instance, the headers contain your current rate-limit value and the amount of time available until the limit resets. It also contains metrics about the total number of objects found, pagination information, and the total content length.|\n\n\n## HTTP Statuses\n\nAlong with the HTTP methods that the API responds to, it will also return\nstandard HTTP statuses, including error codes.\n\nIn the event of a problem, the status will contain the error code, while the\nbody of the response will usually contain additional information about the\nproblem that was encountered.\n\nIn general, if the status returned is in the 200 range, it indicates that\nthe request was fulfilled successfully and that no error was encountered.\n\nReturn codes in the 400 range typically indicate that there was an issue\nwith the request that was sent. Among other things, this could mean that you\ndid not authenticate correctly, that you are requesting an action that you\ndo not have authorization for, that the object you are requesting does not\nexist, or that your request is malformed.\n\nIf you receive a status in the 500 range, this generally indicates a\nserver-side problem. This means that we are having an issue on our end and\ncannot fulfill your request currently.\n\n400 and 500 level error responses will include a JSON object in their body,\nincluding the following attributes:\n\n|Name|Type|Description|\n|--- |--- |--- |\n|id|string|A short identifier corresponding to the HTTP status code returned. For example, the ID for a response returning a 404 status code would be \"not_found.\"|\n|message|string|A message providing additional information about the error, including details to help resolve it when possible.|\n|request_id|string|Optionally, some endpoints may include a request ID that should be provided when reporting bugs or opening support tickets to help identify the issue.|\n\n### Example Error Response\n\n```    HTTP/1.1 403 Forbidden\n    {\n      \"id\":       \"forbidden\",\n      \"message\":  \"You do not have access for the attempted action.\"\n    }\n```\n\n## Responses\n\nWhen a request is successful, a response body will typically be sent back in\nthe form of a JSON object. An exception to this is when a DELETE request is\nprocessed, which will result in a successful HTTP 204 status and an empty\nresponse body.\n\nInside of this JSON object, the resource root that was the target of the\nrequest will be set as the key. This will be the singular form of the word\nif the request operated on a single object, and the plural form of the word\nif a collection was processed.\n\nFor example, if you send a GET request to `/v2/droplets/$DROPLET_ID` you\nwill get back an object with a key called \"`droplet`\". However, if you send\nthe GET request to the general collection at `/v2/droplets`, you will get\nback an object with a key called \"`droplets`\".\n\nThe value of these keys will generally be a JSON object for a request on a\nsingle object and an array of objects for a request on a collection of\nobjects.\n\n### Response for a Single Object\n\n```    {\n        \"droplet\": {\n            \"name\": \"example.com\"\n            . . .\n        }\n    }\n```\n\n### Response for an Object Collection\n\n```    {\n        \"droplets\": [\n            {\n                \"name\": \"example.com\"\n                . . .\n            },\n            {\n                \"name\": \"second.com\"\n                . . .\n            }\n        ]\n    }\n```\n\n## Meta\n\nIn addition to the main resource root, the response may also contain a\n`meta` object. This object contains information about the response itself.\n\nThe `meta` object contains a `total` key that is set to the total number of\nobjects returned by the request. This has implications on the `links` object\nand pagination.\n\nThe `meta` object will only be displayed when it has a value. Currently, the\n`meta` object will have a value when a request is made on a collection (like\n`droplets` or `domains`).\n\n\n### Sample Meta Object\n\n```    {\n        . . .\n        \"meta\": {\n            \"total\": 43\n        }\n        . . .\n    }\n```\n\n## Links & Pagination\n\nThe `links` object is returned as part of the response body when pagination\nis enabled. By default, 20 objects are returned per page. If the response\ncontains 20 objects or fewer, no `links` object will be returned. If the\nresponse contains more than 20 objects, the first 20 will be returned along\nwith the `links` object.\n\nYou can request a different pagination limit or force pagination by\nappending `?per_page=` to the request with the number of items you would\nlike per page. For instance, to show only two results per page, you could\nadd `?per_page=2` to the end of your query. The maximum number of results\nper page is 200.\n\nThe `links` object contains a `pages` object. The `pages` object, in turn,\ncontains keys indicating the relationship of additional pages. The values of\nthese are the URLs of the associated pages. The keys will be one of the\nfollowing:\n\n*   **first**: The URI of the first page of results.\n*   **prev**: The URI of the previous sequential page of results.\n*   **next**: The URI of the next sequential page of results.\n*   **last**: The URI of the last page of results.\n\nThe `pages` object will only include the links that make sense. So for the\nfirst page of results, no `first` or `prev` links will ever be set. This\nconvention holds true in other situations where a link would not make sense.\n\n### Sample Links Object\n\n```    {\n        . . .\n        \"links\": {\n            \"pages\": {\n                \"last\": \"https://api.digitalocean.com/v2/images?page=2\",\n                \"next\": \"https://api.digitalocean.com/v2/images?page=2\"\n            }\n        }\n        . . .\n    }\n```\n\n## Rate Limit\n\nRequests through the API are rate limited per OAuth token. Current rate limits:\n\n*   5,000 requests per hour\n*   250 requests per minute (5% of the hourly total)\n\nOnce you exceed either limit, you will be rate limited until the next cycle\nstarts. Space out any requests that you would otherwise issue in bursts for\nthe best results.\n\nThe rate limiting information is contained within the response headers of\neach request. The relevant headers are:\n\n*   **RateLimit-Limit**: The number of requests that can be made per hour.\n*   **RateLimit-Remaining**: The number of requests that remain before you hit your request limit. See the information below for how the request limits expire.\n*   **RateLimit-Reset**: This represents the time when the oldest request will expire. The value is given in [Unix epoch time](http://en.wikipedia.org/wiki/Unix_time). See below for more information about how request limits expire.\n\nAs long as the `RateLimit-Remaining` count is above zero, you will be able\nto make additional requests.\n\nThe way that a request expires and is removed from the current limit count\nis important to understand. Rather than counting all of the requests for an\nhour and resetting the `RateLimit-Remaining` value at the end of the hour,\neach request instead has its own timer.\n\nThis means that each request contributes toward the `RateLimit-Remaining`\ncount for one complete hour after the request is made. When that request's\ntimer runs out, it is no longer counted towards the request limit.\n\nThis has implications on the meaning of the `RateLimit-Reset` header as\nwell. Because the entire rate limit is not reset at one time, the value of\nthis header is set to the time when the _oldest_ request will expire.\n\nKeep this in mind if you see your `RateLimit-Reset` value change, but not\nmove an entire hour into the future.\n\nIf the `RateLimit-Remaining` reaches zero, subsequent requests will receive\na 429 error code until the request reset has been reached. You can see the\nformat of the response in the examples.\n\n**Note:** The following endpoints have special rate limit requirements that\nare independent of the limits defined above.\n\n*   Only 12 `POST` requests to the `/v2/floating_ips` endpoint to create Floating IPs can be made per 60 seconds.\n*   Only 10 `GET` requests to the `/v2/account/keys` endpoint to list SSH keys can be made per 60 seconds.\n\n### Sample Rate Limit Headers\n\n```    . . .\n    RateLimit-Limit: 1200\n    RateLimit-Remaining: 1193\n    RateLimit-Reset: 1402425459\n    . . .\n```\n\n### Sample Rate Exceeded Response\n\n```    429 Too Many Requests\n    {\n            id: \"too_many_requests\",\n            message: \"API Rate limit exceeded.\"\n    }\n```\n\n## Curl Examples\n\nThroughout this document, some example API requests will be given using the\n`curl` command. This will allow us to demonstrate the various endpoints in a\nsimple, textual format.\n\nThe names of account-specific references (like Droplet IDs, for instance)\nwill be represented by variables. For instance, a Droplet ID may be\nrepresented by a variable called `$DROPLET_ID`. You can set the associated\nvariables in your environment if you wish to use the examples without\nmodification.\n\nThe first variable that you should set to get started is your OAuth\nauthorization token. The next section will go over the details of this, but\nyou can set an environmental variable for it now.\n\nGenerate a token by going to the [Apps & API](https://cloud.digitalocean.com/settings/applications)\nsection of the DigitalOcean control panel. Use an existing token if you have\nsaved one, or generate a new token with the \"Generate new token\" button.\nCopy the generated token and use it to set and export the TOKEN variable in\nyour environment as the example shows.\n\nYou may also wish to set some other variables now or as you go along. For\nexample, you may wish to set the `DROPLET_ID` variable to one of your\nDroplet IDs since this will be used frequently in the API.\n\nIf you are following along, make sure you use a Droplet ID that you control\nso that your commands will execute correctly.\n\nIf you need access to the headers of a response through `curl`, you can pass\nthe `-i` flag to display the header information along with the body. If you\nare only interested in the header, you can instead pass the `-I` flag, which\nwill exclude the response body entirely.\n\n### Set and Export your OAuth Token\n\n```\nexport DIGITALOCEAN_TOKEN=your_token_here\n```\n\n### Set and Export a Variable\n\n```\nexport DROPLET_ID=1111111\n```\n\n## Parameters\n\nThere are two different ways to pass parameters in a request with the API.\n\nWhen passing parameters to create or update an object, parameters should be\npassed as a JSON object containing the appropriate attribute names and\nvalues as key-value pairs. When you use this format, you should specify that\nyou are sending a JSON object in the header. This is done by setting the\n`Content-Type` header to `application/json`. This ensures that your request\nis interpreted correctly.\n\nWhen passing parameters to filter a response on GET requests, parameters can\nbe passed using standard query attributes. In this case, the parameters\nwould be embedded into the URI itself by appending a `?` to the end of the\nURI and then setting each attribute with an equal sign. Attributes can be\nseparated with a `&`. Tools like `curl` can create the appropriate URI when\ngiven parameters and values; this can also be done using the `-F` flag and\nthen passing the key and value as an argument. The argument should take the\nform of a quoted string with the attribute being set to a value with an\nequal sign.\n\n### Pass Parameters as a JSON Object\n\n```    curl -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n        -H \"Content-Type: application/json\" \\\n        -d '{\"name\": \"example.com\", \"ip_address\": \"127.0.0.1\"}' \\\n        -X POST \"https://api.digitalocean.com/v2/domains\"\n```\n\n### Pass Filter Parameters as a Query String\n\n```     curl -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n         -X GET \\\n         \"https://api.digitalocean.com/v2/images?private=true\"\n```\n\n## Cross Origin Resource Sharing\n\nIn order to make requests to the API from other domains, the API implements\nCross Origin Resource Sharing (CORS) support.\n\nCORS support is generally used to create AJAX requests outside of the domain\nthat the request originated from. This is necessary to implement projects\nlike control panels utilizing the API. This tells the browser that it can\nsend requests to an outside domain.\n\nThe procedure that the browser initiates in order to perform these actions\n(other than GET requests) begins by sending a \"preflight\" request. This sets\nthe `Origin` header and uses the `OPTIONS` method. The server will reply\nback with the methods it allows and some of the limits it imposes. The\nclient then sends the actual request if it falls within the allowed\nconstraints.\n\nThis process is usually done in the background by the browser, but you can\nuse curl to emulate this process using the example provided. The headers\nthat will be set to show the constraints are:\n\n*   **Access-Control-Allow-Origin**: This is the domain that is sent by the client or browser as the origin of the request. It is set through an `Origin` header.\n*   **Access-Control-Allow-Methods**: This specifies the allowed options for requests from that domain. This will generally be all available methods.\n*   **Access-Control-Expose-Headers**: This will contain the headers that will be available to requests from the origin domain.\n*   **Access-Control-Max-Age**: This is the length of time that the access is considered valid. After this expires, a new preflight should be sent.\n*   **Access-Control-Allow-Credentials**: This will be set to `true`. It basically allows you to send your OAuth token for authentication.\n\nYou should not need to be concerned with the details of these headers,\nbecause the browser will typically do all of the work for you.\n",
    "license": {
      "name": "Apache 2.0",
      "url": "https://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "contact": {
      "name": "DigitalOcean API Team",
      "email": "api-engineering@digitalocean.com"
    },
    "termsOfService": "https://www.digitalocean.com/legal/terms-of-service-agreement/",
    "x-logo": {
      "url": "https://logo.clearbit.com/digitalocean.com"
    }
  },
  "servers": [
    {
      "url": "https://api.digitalocean.com",
      "description": "production"
    }
  ],
  "tags": [
    {
      "name": "1-Click Applications",
      "description": "1-Click applications are pre-built Droplet images or Kubernetes apps with software, features, and configuration details already set up for you. They can be found in the [DigitalOcean Marketplace](https://www.digitalocean.com/docs/marketplace)."
    },
    {
      "name": "Account",
      "description": "Provides information about your current account."
    },
    {
      "name": "Actions",
      "description": "Actions are records of events that have occurred on the resources in your account. These can be things like rebooting a Droplet, or transferring an image to a new region.\nAn action object is created every time one of these actions is initiated. The action object contains information about the current status of the action, start and complete timestamps, and the associated resource type and ID.\nEvery action that creates an action object is available through this endpoint. Completed actions are not removed from this list and are always available for querying."
    },
    {
      "name": "Apps",
      "description": "App Platform is a Platform-as-a-Service (PaaS) offering from DigitalOcean that allows developers to publish code directly to DigitalOcean servers without worrying about the underlying infrastructure.\nMost API operations are centered around a few core object types. Following are the definitions of these types. These definitions will be omitted from the operation-specific documentation.\nFor documentation on app specifications (`AppSpec` objects), please refer to the [product documentation](https://www.digitalocean.com/docs/app-platform/references/app-specification-reference/)."
    },
    {
      "name": "Billing",
      "description": "The billing endpoints allow you to retrieve your account balance, invoices and billing history.\n\n**Balance:** By sending requests to the `/v2/customers/my/balance` endpoint, you can retrieve the balance information for the requested customer account.\n\n**Invoices:** [Invoices](https://www.digitalocean.com/docs/accounts/billing/invoices/) are generated on the first of each month for every DigitalOcean customer. An invoice preview is generated daily, which can be accessed with the `preview` keyword in place of `$INVOICE_UUID`. To interact with invoices, you will generally send requests to the invoices endpoint at `/v2/customers/my/invoices`.\n\n**Billing History:** Billing history is a record of billing events for your account. For example, entries may include events like payments made, invoices issued, or credits granted. To interact with invoices, you will generally send requests to the invoices endpoint at `/v2/customers/my/billing_history`."
    },
    {
      "name": "Block Storage",
      "description": "[DigitalOcean Block Storage Volumes](https://www.digitalocean.com/docs/volumes/) provide expanded storage capacity for your Droplets and can be moved between Droplets within a specific region.\nVolumes function as raw block devices, meaning they appear to the operating system as locally attached storage which can be formatted using any file system supported by the OS. They may be created in sizes from 1GiB to 16TiB.\nBy sending requests to the /v2/volumes endpoint, you can list, create, or delete volumes as well as attach and detach them from Droplets"
    },
    {
      "name": "Block Storage Actions",
      "description": "Block storage actions are commands that can be given to a DigitalOcean Block Storage Volume. An example would be detaching or attaching a volume from a Droplet. These requests are made on the `/v2/volumes/$VOLUME_ID/actions` endpoint.\nAn action object is returned. These objects hold the current status of the requested action."
    },
    {
      "name": "CDN Endpoints",
      "description": "Content hosted in DigitalOcean's object storage solution, [Spaces](https://www.digitalocean.com/docs/spaces/overview/), can optionally be served by our globally distributed Content Delivery Network (CDN). By sending requests to `/v2/cdn/endpoints`, you can list, create, or delete CDN Endpoints as well as purge cached content. To use a custom subdomain to access the CDN Endpoint, provide the ID of a DigitalOcean managed TLS certificate and the fully qualified domain name for the custom subdomain."
    },
    {
      "name": "Certificates",
      "description": "In order to perform SSL termination on load balancers, DigitalOcean offers two types of [SSL certificate management](https://www.digitalocean.com/docs/accounts/security/#certificates):\n* **Custom**: User-generated certificates may be uploaded to DigitalOcean where they will be placed in a fully encrypted and isolated storage system.\n* **Let's Encrypt**: Certificates may be automatically generated by DigitalOcean utilizing an integration with Let's Encrypt, the free and open certificate authority. These certificates will also be automatically renewed as required."
    },
    {
      "name": "Container Registry",
      "description": "DigitalOcean offers the ability for you to create a [private container registry](https://www.digitalocean.com/docs/images/container-registry/quickstart/) to store your Docker images for use with your Kubernetes clusters. This container registry runs inside the same datacenters as your cluster, ensuring reliable and performant rollout of image deployments.\nYou can only create one registry per DigitalOcean account, but you can use that registry to create as many repositories as you wish."
    },
    {
      "name": "Databases",
      "description": "DigitalOcean's [managed database service](https://www.digitalocean.com/docs/databases)\nsimplifies the creation and management of highly available database clusters. Currently, it\noffers support for [PostgreSQL](http://www.digitalocean.com/docs/databases/postgresql/),\n[Redis](https://www.digitalocean.com/docs/databases/redis/),\n[MySQL](https://www.digitalocean.com/docs/databases/mysql/), and\n[MongoDB](https://www.digitalocean.com/docs/databases/mongodb/).\n\nBy sending requests to the `/v2/databases` endpoint, you can list, create, or delete\ndatabase clusters as well as scale the size of a cluster, add or remove read-only replicas,\nand manage other configuration details.\n\nThe size of individual nodes in a database cluster is represented by a human-readable slug.\nThese slugs denote the underlying Droplet class, amount of RAM, and CPU count for the node.\nDatabase clusters may be deployed in a multi-node, highly available configuration. In\naddition to the primary node, up to two standby nodes may be added to a cluster with one\nexception. High availability configurations are not available when using the smallest node\nsize. The currently available sizes and their corresponding slugs are:\n\nSize Slug        | RAM   | CPU     | Storage | High Availability Plans\n-----------------|-------|---------|---------|------------------------\ndb-s-1vcpu-1gb   | 1 GB  | 1 vCPU  | 10 GB   | False\ndb-s-1vcpu-2gb   | 2 GB  | 1 vCPU  | 25 GB   | True\ndb-s-2vcpu-4gb   | 4 GB  | 2 vCPU  | 38 GB   | True\ndb-s-4vcpu-8gb   | 8 GB  | 4 vCPU  | 115 GB  | True\ndb-s-6vcpu-16gb  | 16 GB | 6 vCPU  | 270 GB  | True\ndb-s-8vcpu-32gb  | 32 GB | 8 vCPU  | 580 GB  | True\ndb-s-16vcpu-64gb | 64 GB | 16 vCPU | 1.12 TB | True\n"
    },
    {
      "name": "Domain Records",
      "description": "Domain record resources are used to set or retrieve information about the\nindividual DNS records configured for a domain. This allows you to build\nand manage DNS zone files by adding and modifying individual records for a\ndomain.\n\nThe [DigitalOcean DNS management interface](https://www.digitalocean.com/docs/networking/dns/)\nallows you to configure the following DNS records:\n\nName  | Description                                                                                                                                        |\n------|----------------------------------------------------------------------------------------------------------------------------------------------------|\nA     | This record type is used to map an IPv4 address to a hostname.                                                                                     |\nAAAA  | This record type is used to map an IPv6 address to a hostname.                                                                                     |\nCAA   | As specified in RFC-6844, this record type can be used to restrict which certificate authorities are permitted to issue certificates for a domain. |\nCNAME | This record type defines an alias for your canonical hostname (the one defined by an A or AAAA record).                                            |\nMX    | This record type is used to define the mail exchanges used for the domain.                                                                         |\nNS    | This record type defines the name servers that are used for this zone.                                                                             |\nTXT   | This record type is used to associate a string of text with a hostname, primarily used for verification.                                           |\nSRV   | This record type specifies the location (hostname and port number) of servers for specific services.                                               |\nSOA   | This record type defines administrative information about the zone. Can only have ttl changed, cannot be deleted                                   |\n"
    },
    {
      "name": "Domains",
      "description": "Domain resources are domain names that you have purchased from a domain name registrar that you are managing through the [DigitalOcean DNS interface](https://www.digitalocean.com/docs/networking/dns/).\nThis resource establishes top-level control over each domain. Actions that affect individual domain records should be taken on the [Domain Records](#tag/Domain-Records) resource."
    },
    {
      "name": "Droplet Actions",
      "description": "Droplet actions are tasks that can be executed on a Droplet. These can be things like rebooting, resizing, snapshotting, etc.\nDroplet action requests are generally targeted at one of the \"actions\" endpoints for a specific Droplet. The specific actions are usually initiated by sending a POST request with the action and arguments as parameters.\nDroplet action requests create a Droplet actions object, which can be used to get information about the status of an action. Creating a Droplet action is asynchronous: the HTTP call will return the action object before the action has finished processing on the Droplet. The current status of an action can be retrieved from either the Droplet actions endpoint or the global actions endpoint. If a Droplet action is uncompleted it may block the creation of a subsequent action for that Droplet, the locked attribute of the Droplet will be true and attempts to create a Droplet action will fail with a status of 422."
    },
    {
      "name": "Droplets",
      "description": "A [Droplet](https://www.digitalocean.com/docs/droplets/) is a DigitalOcean virtual machine. By sending requests to the Droplet endpoint, you can list, create, or delete Droplets.\nSome of the attributes will have an object value. The `region` and `image` objects will all contain the standard attributes of their associated types. Find more information about each of these objects in their respective sections."
    },
    {
      "name": "Firewalls",
      "description": "[DigitalOcean Cloud Firewalls](https://www.digitalocean.com/docs/networking/firewalls/) provide the ability to restrict network access to and from a Droplet allowing you to define which ports will accept inbound or outbound connections. By sending requests to the `/v2/firewalls` endpoint, you can list, create, or delete firewalls as well as modify access rules."
    },
    {
      "name": "Floating IP Actions",
      "description": "Floating IP actions are commands that can be given to a DigitalOcean floating IP. These requests are made on the actions endpoint of a specific floating IP.\nAn action object is returned. These objects hold the current status of the requested action."
    },
    {
      "name": "Floating IPs",
      "description": "[DigitalOcean Floating IPs](https://www.digitalocean.com/docs/networking/floating-ips/) are publicly-accessible static IP addresses that can be mapped to one of your Droplets. They can be used to create highly available setups or other configurations requiring movable addresses.\nFloating IPs are bound to a specific region."
    },
    {
      "name": "Image Actions",
      "description": "Image actions are commands that can be given to a DigitalOcean image. In general, these requests are made on the actions endpoint of a specific image.\nAn image action object is returned. These objects hold the current status of the requested action.\n"
    },
    {
      "name": "Images",
      "description": "A DigitalOcean [image](https://www.digitalocean.com/docs/images/) can be used to create a Droplet and may come in a number of flavors. Currently, there are five types of images: snapshots, backups, applications, distributions, and custom images.\n* [Snapshots](https://www.digitalocean.com/docs/images/snapshots/) provide a full copy of an existing Droplet instance taken on demand.\n* [Backups](https://www.digitalocean.com/docs/images/backups/) are similar to snapshots but are created automatically at regular intervals when enabled for a Droplet.\n* [Custom images](https://www.digitalocean.com/docs/images/custom-images/) are Linux-based virtual machine images (raw, qcow2, vhdx, vdi, and vmdk formats are supported) that you may upload for use on DigitalOcean.\n* Distributions are the public Linux distributions that are available to be used as a base to create Droplets.\n* Applications, or [1-Click Apps](https://www.digitalocean.com/docs/one-clicks/), are distributions pre-configured with additional software.\nTo interact with images, you will generally send requests to the images endpoint at /v2/images."
    },
    {
      "name": "Kubernetes",
      "description": "[DigitalOcean Kubernetes](https://www.digitalocean.com/docs/kubernetes/) allows you to quickly deploy scalable and secure Kubernetes clusters. By sending requests to the `/v2/kubernetes/clusters` endpoint, you can list, create, or delete clusters as well as scale node pools up and down, recycle individual nodes, and retrieve the kubeconfig file for use with a cluster."
    },
    {
      "name": "Load Balancers",
      "description": "[DigitalOcean Load Balancers](https://www.digitalocean.com/docs/networking/load-balancers/) provide a way to distribute traffic across multiple Droplets. By sending requests to the `/v2/load_balancers` endpoint, you can list, create, or delete load balancers as well as add or remove Droplets, forwarding rules, and other configuration details."
    },
    {
      "name": "Monitoring",
      "description": "The DigitalOcean Monitoring API makes it possible to programmatically retrieve metrics as well as configure alert policies based on these metrics. The Monitoring API can help you gain insight into how your apps are performing and consuming resources."
    },
    {
      "name": "Project Resources",
      "description": "Project Resources are resources that can be grouped into your projects.\nYou can group resources (like Droplets, Spaces, load balancers, domains,\nand floating IPs) in ways that align with the applications you host on\nDigitalOcean.\n\n\n\nProjects resources are identified by uniform resource names or URNs. A\nvalid URN has the following format: `do:resource_type:resource_id`. The\nfollowing resource types are supported:\n\nResource Type | Example URN\n--------------|------------\nDatabase      | `do:dbaas:83c7a55f-0d84-4760-9245-aba076ec2fb2`\nDomain        | `do:domain:example.com`\nDroplet       | `do:droplet:4126873`\nFloating IP   | `do:floatingip:192.168.99.100`\nLoad Balancer | `do:loadbalancer:39052d89-8dd4-4d49-8d5a-3c3b6b365b5b`\nSpace         | `do:space:my-website-assets`\nVolume        | `do:volume:6fc4c277-ea5c-448a-93cd-dd496cfef71f`\n\n\n\nWhen assigning and retrieving resources in projects, a `status` attribute\nis returned that indicates if a resource was successfully retrieved or\nassigned. The status codes can be one of the following:\n\nStatus Code | Explanation\n------------|------------\n`ok`          | There was no problem retrieving or assigning a resource.\n`not_found`   | The resource was not found.\n`assigned`    | The resource was successfully assigned.\n`already_assigned` | The resource was already assigned.\n`service_down`     | There was a problem retrieving or assigning a resource. Please try again."
    },
    {
      "name": "Projects",
      "description": "Projects allow you to organize your resources into groups that fit the way you work. You can group resources (like Droplets, Spaces, load balancers, domains, and floating IPs) in ways that align with the applications you host on DigitalOcean."
    },
    {
      "name": "Regions",
      "description": "Provides information about DigitalOcean data center regions."
    },
    {
      "name": "Sizes",
      "description": "The sizes objects represent different packages of hardware resources that can be used for Droplets. When a Droplet is created, a size must be selected so that the correct resources can be allocated.\nEach size represents a plan that bundles together specific sets of resources. This includes the amount of RAM, the number of virtual CPUs, disk space, and transfer. The size object also includes the pricing details and the regions that the size is available in."
    },
    {
      "name": "Snapshots",
      "description": "[Snapshots](https://www.digitalocean.com/docs/images/snapshots/) are saved instances of a Droplet or a block storage volume, which is reflected in the `resource_type` attribute. In order to avoid problems with compressing filesystems, each defines a `min_disk_size` attribute which is the minimum size of the Droplet or volume disk when creating a new resource from the saved snapshot.\nTo interact with snapshots, you will generally send requests to the snapshots endpoint at `/v2/snapshots`."
    },
    {
      "name": "SSH Keys",
      "description": "Manage SSH keys available on your account."
    },
    {
      "name": "Tags",
      "description": "A tag is a label that can be applied to a resource (currently Droplets, Images, Volumes, Volume Snapshots, and Database clusters) in order to better organize or facilitate the lookups and actions on it.\nTags have two attributes: a user defined `name` attribute and an embedded `resources` attribute with information about resources that have been tagged."
    },
    {
      "name": "VPCs",
      "description": "[VPCs (virtual private clouds)](https://www.digitalocean.com/docs/networking/vpc/) allow you to create virtual networks containing resources that can communicate with each other in full isolation using private IP addresses.\nBy sending requests to the `/v2/vpcs` endpoint, you can create, configure, list, and delete custom VPCs as well as retrieve information about the resources assigned to them."
    }
  ],
  "paths": {
    "/v2/1-clicks": {
      "get": {
        "operationId": "list",
        "summary": "List 1-Click Applications",
        "description": "To list all available 1-Click applications, send a GET request to `/v2/1-clicks`. The `type` may\nbe provided as query paramater in order to restrict results to a certain type of 1-Click, for\nexample: `/v2/1-clicks?type=droplet`. Current supported types are `kubernetes` and `droplet`.\n\nThe response will be a JSON object with a key called `1_clicks`. This will be set to an array of\n1-Click application data, each of which will contain the the slug and type for the 1-Click.\n",
        "tags": [
          "1-Click Applications"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/1_click_type"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/all_1_clicks"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X GET \\\n  -H \"Content-Type: application/json\"  \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  \"https://api.digitalocean.com/v2/1-clicks\""
          }
        ]
      }
    },
    "/v2/1-clicks/kubernetes": {
      "post": {
        "operationId": "install_kubernetes",
        "summary": "Install Kubernetes 1-Click Applications",
        "description": "To install a Kubernetes 1-Click application on a cluster, send a POST request to\n`/v2/1-clicks/kubernetes`. The `addon_slugs` and `cluster_uuid` must be provided as body\nparameter in order to specify which 1-Click application(s) to install. To list all available\n1-Click Kubernetes applications, send a request to `/v2/1-clicks?type=kubernetes`.\n",
        "tags": [
          "1-Click Applications"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/1_click_create"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/1_click_create"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  -d '{\"addon_slugs\": [\"kube-state-metrics\", \"loki\"], \"cluster_uuid\": \"50a994b6-c303-438f-9495-7e896cfe6b08\"}'' \\\n  \"https://api.digitalocean.com/v2/1-clicks/kubernetes\""
          }
        ]
      }
    },
    "/v2/account": {
      "get": {
        "operationId": "get_user_information",
        "summary": "Get User Information",
        "description": "To show information about the current user account, send a GET request to `/v2/account`.",
        "tags": [
          "Account"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/account"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  \"https://api.digitalocean.com/v2/account\""
          }
        ]
      }
    },
    "/v2/account/keys": {
      "get": {
        "operationId": "list_all_keys",
        "summary": "List All SSH Keys",
        "description": "To list all of the keys in your account, send a GET request to `/v2/account/keys`. The response will be a JSON object with a key set to `ssh_keys`. The value of this will be an array of ssh_key objects, each of which contains the standard ssh_key attributes.",
        "tags": [
          "SSH Keys"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/all_keys"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  \"https://api.digitalocean.com/v2/account/keys\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"os\"\n\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n    client := godo.NewFromToken(token)\n    ctx := context.TODO()\n\n    opt := &godo.ListOptions{\n        Page:    1,\n        PerPage: 200,\n    }\n\n    keys, _, err := client.Keys.List(ctx, opt)\n}"
          },
          {
            "lang": "Ruby",
            "source": "require 'droplet_kit'\ntoken = ENV['DIGITALOCEAN_TOKEN']\nclient = DropletKit::Client.new(access_token: token)\n\nssh_keys = client.ssh_keys.all\nssh_keys.each"
          }
        ]
      },
      "post": {
        "operationId": "create_ssh_key",
        "summary": "Create a New SSH Key",
        "description": "To add a new SSH public key to your DigitalOcean account, send a POST request to `/v2/account/keys`. Set the `name` attribute to the name you wish to use and the `public_key` attribute to the full public key you are adding.",
        "tags": [
          "SSH Keys"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ssh_key"
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/key_created"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  -d '{\"name\":\"My SSH Public Key\",\"public_key\":\"ssh-rsa AEXAMPLEaC1yc2EAAAADAQABAAAAQQDDHr/jh2Jy4yALcK4JyWbVkPRaWmhck3IgCoeOO3z1e2dBowLh64QAM+Qb72pxekALga2oi4GvT+TlWNhzPH4V example\"}' \\\n  \"https://api.digitalocean.com/v2/account/keys\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"os\"\n\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n    client := godo.NewFromToken(token)\n    ctx := context.TODO()\n\n    createRequest := &godo.KeyCreateRequest{\n        Name:      \"My SSH Public Key\",\n        PublicKey: \"ssh-rsa AEXAMPLEaC1yc2EAAAADAQABAAAAQQDDHr/jh2Jy4yALcK4JyWbVkPRaWmhck3IgCoeOO3z1e2dBowLh64QAM+Qb72pxekALga2oi4GvT+TlWNhzPH4V example\",\n    }\n\n    transfer, _, err := client.Keys.Create(ctx, createRequest)\n}"
          },
          {
            "lang": "Ruby",
            "source": "require 'droplet_kit'\ntoken = ENV['DIGITALOCEAN_TOKEN']\nclient = DropletKit::Client.new(access_token: token)\n\nssh_key = DropletKit::SSHKey.new(\n  name: 'My SSH Public Key',\n  public_key: 'ssh-rsa AEXAMPLEaC1yc2EAAAADAQABAAAAQQDDHr/jh2Jy4yALcK4JyWbVkPRaWmhck3IgCoeOO3z1e2dBowLh64QAM+Qb72pxekALga2oi4GvT+TlWNhzPH4V example'\n)\nclient.ssh_keys.create(ssh_key)"
          }
        ]
      }
    },
    "/v2/account/keys/{ssh_key_identifier}": {
      "get": {
        "operationId": "get_ssh_key",
        "summary": "Retrieve an Existing SSH Key",
        "description": "To get information about a key, send a GET request to `/v2/account/keys/$KEY_ID` or `/v2/account/keys/$KEY_FINGERPRINT`.\nThe response will be a JSON object with the key `ssh_key` and value an ssh_key object which contains the standard ssh_key attributes.",
        "tags": [
          "SSH Keys"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ssh_key_identifier"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/existing_key"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  \"https://api.digitalocean.com/v2/account/keys/512190\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"os\"\n\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n    client := godo.NewFromToken(token)\n    ctx := context.TODO()\n\n    key, _, err := client.Keys.GetByID(ctx, 512190)\n}"
          },
          {
            "lang": "Ruby",
            "source": "require 'droplet_kit'\ntoken = ENV['DIGITALOCEAN_TOKEN']\nclient = DropletKit::Client.new(access_token: token)\n\nclient.ssh_keys.find(id: 512190)"
          }
        ]
      },
      "put": {
        "operationId": "update_ssh_key",
        "summary": "Update an SSH Key's Name",
        "description": "To update the name of an SSH key, send a PUT request to either `/v2/account/keys/$SSH_KEY_ID` or `/v2/account/keys/$SSH_KEY_FINGERPRINT`. Set the `name` attribute to the new name you want to use.",
        "tags": [
          "SSH Keys"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ssh_key_identifier"
          }
        ],
        "requestBody": {
          "description": "Set the `name` attribute to the new name you want to use.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "$ref": "#/components/schemas/ssh_key_name"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/existing_key"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X PUT \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  -d '{\"name\":\"Renamed SSH Key\"}' \\\n  \"https://api.digitalocean.com/v2/account/keys/512190\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"os\"\n\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n    client := godo.NewFromToken(token)\n    ctx := context.TODO()\n\n    updateRequest := &godo.KeyUpdateRequest{\n        Name:      \"Renamed SSH Key\",\n    }\n\n    key, _, err := client.Keys.UpdateByID(ctx, 512190, updateRequest)\n}"
          },
          {
            "lang": "Ruby",
            "source": "require 'droplet_kit'\ntoken = ENV['DIGITALOCEAN_TOKEN']\nclient = DropletKit::Client.new(access_token: token)\n\nssh_key = DropletKit::SSHKey.new(name: 'Renamed SSH Key')\nclient.ssh_keys.update(ssh_key, id: 512190)"
          }
        ]
      },
      "delete": {
        "operationId": "destroy_ssh_key",
        "summary": "Delete an SSH Key",
        "description": "To destroy a public SSH key that you have in your account, send a DELETE request to `/v2/account/keys/$KEY_ID` or `/v2/account/keys/$KEY_FINGERPRINT`.\nA 204 status will be returned, indicating that the action was successful and that the response body is empty.",
        "tags": [
          "SSH Keys"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ssh_key_identifier"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/no_content"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X DELETE \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  \"https://api.digitalocean.com/v2/account/keys/512190\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"os\"\n\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n    client := godo.NewFromToken(token)\n    ctx := context.TODO()\n\n    _, err := client.Keys.DeleteByID(ctx, 512190)\n}"
          },
          {
            "lang": "Ruby",
            "source": "require 'droplet_kit'\ntoken = ENV['DIGITALOCEAN_TOKEN']\nclient = DropletKit::Client.new(access_token: token)\n\nclient.ssh_keys.delete(id: 512190)"
          }
        ]
      }
    },
    "/v2/actions": {
      "get": {
        "operationId": "list_all_actions",
        "summary": "List All Actions",
        "description": "This will be the entire list of actions taken on your account, so it will be quite large. As with any large collection returned by the API, the results will be paginated with only 20 on each page by default.",
        "tags": [
          "Actions"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/all_actions"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  \"https://api.digitalocean.com/v2/actions?page=1&per_page=1\""
          },
          {
            "lang": "Go",
            "source": "import (\n  \"context\"\n    \"os\"\n\n  \"github.com/digitalocean/godo\"\n  )\n\nfunc main() {\n  token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n  client := godo.NewFromToken(token)\n  ctx := context.TODO()\n\n  opt := &godo.ListOptions{\n      Page:    1,\n      PerPage: 200,\n  }\n  actions, _, err := client.Actions.List(ctx, opt)\n  }"
          },
          {
            "lang": "Ruby",
            "source": "require 'droplet_kit'\ntoken = ENV['DIGITALOCEAN_TOKEN']\nclient = DropletKit::Client.new(access_token: token)\n\nactions = client.actions.all\nactions.each"
          }
        ]
      }
    },
    "/v2/actions/{action_id}": {
      "get": {
        "operationId": "get_action",
        "summary": "Retrieve an Existing Action",
        "description": "To retrieve a specific action object, send a GET request to `/v2/actions/$ACTION_ID`.",
        "tags": [
          "Actions"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/action_id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/existing_action"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  \"https://api.digitalocean.com/v2/actions/36804636\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"os\"\n\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n    client := godo.NewFromToken(token)\n    ctx := context.TODO()\n\n    action, _, err := client.Actions.Get(ctx, 36804636)\n}"
          },
          {
            "lang": "Ruby",
            "source": "require 'droplet_kit'\ntoken = ENV['DIGITALOCEAN_TOKEN']\nclient = DropletKit::Client.new(access_token: token)\n\nclient.actions.find(id: 36804636)"
          }
        ]
      }
    },
    "/v2/apps": {
      "get": {
        "operationId": "list_apps",
        "summary": "List All Apps",
        "description": "List all apps on your account. Information about the current active deployment as well as any in progress ones will also be included for each app.",
        "tags": [
          "Apps"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/per_page"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/list_apps"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  \"https://api.digitalocean.com/v2/apps\""
          }
        ]
      },
      "post": {
        "operationId": "create_app",
        "summary": "Create a New App",
        "description": "Create a new app by submitting an app specification. For documentation on app specifications (`AppSpec` objects), please refer to [the product documentation](https://www.digitalocean.com/docs/app-platform/references/app-specification-reference/).",
        "tags": [
          "Apps"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/apps_create_app_request"
              },
              "example": {
                "spec": {
                  "name": "web-app",
                  "region": "nyc",
                  "services": [
                    {
                      "name": "api",
                      "github": {
                        "branch": "main",
                        "deploy_on_push": true,
                        "repo": "digitalocean/sample-golang"
                      },
                      "run_command": "bin/api",
                      "environment_slug": "node-js",
                      "instance_count": 2,
                      "instance_size_slug": "basic-xxs",
                      "routes": [
                        {
                          "path": "/api"
                        }
                      ]
                    }
                  ]
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/new_app"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  \"https://api.digitalocean.com/v2/apps\""
          }
        ]
      }
    },
    "/v2/apps/{id}": {
      "delete": {
        "operationId": "delete_app",
        "summary": "Delete an App",
        "description": "Delete an existing app. Once deleted, all active deployments will be permanently shut down and the app deleted. If needed, be sure to back up your app specification so that you may re-create it at a later time.",
        "tags": [
          "Apps"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/id_app"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/delete_app"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X DELETE \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  \"https://api.digitalocean.com/v2/apps/{id}\""
          }
        ]
      },
      "get": {
        "operationId": "get_app",
        "summary": "Retrieve an Existing App",
        "description": "Retrieve details about an existing app by either its ID or name. To retrieve an app by its name, do not include an ID in the request path. Information about the current active deployment as well as any in progress ones will also be included in the response.",
        "tags": [
          "Apps"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/id_app"
          },
          {
            "$ref": "#/components/parameters/app_name"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/get_app"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  \"https://api.digitalocean.com/v2/apps/{id}\""
          }
        ]
      },
      "put": {
        "operationId": "update_app",
        "summary": "Update an App",
        "description": "Update an existing app by submitting a new app specification. For documentation on app specifications (`AppSpec` objects), please refer to [the product documentation](https://www.digitalocean.com/docs/app-platform/references/app-specification-reference/).",
        "tags": [
          "Apps"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/id_app"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/apps_update_app_request"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/update_app"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X PUT \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  \"https://api.digitalocean.com/v2/apps/{id}\""
          }
        ]
      }
    },
    "/v2/apps/{app_id}/deployments": {
      "get": {
        "operationId": "list_deployments",
        "summary": "List App Deployments",
        "description": "List all deployments of an app.",
        "tags": [
          "Apps"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/app_id"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/per_page"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/existing_deployments"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  \"https://api.digitalocean.com/v2/apps/{app_id}/deployments\""
          }
        ]
      },
      "post": {
        "operationId": "create_deployment",
        "summary": "Create an App Deployment",
        "description": "Creating an app deployment will pull the latest changes from your repository and schedule a new deployment for your app.",
        "tags": [
          "Apps"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/app_id"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/apps_create_deployment_request"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/new_app_deployment"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  \"https://api.digitalocean.com/v2/apps/{app_id}/deployments\""
          }
        ]
      }
    },
    "/v2/apps/{app_id}/deployments/{deployment_id}": {
      "get": {
        "operationId": "get_deployment",
        "summary": "Retrieve an App Deployment",
        "description": "Retrieve information about an app deployment.",
        "tags": [
          "Apps"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/app_id"
          },
          {
            "$ref": "#/components/parameters/deployment_id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/list_deployment"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  \"https://api.digitalocean.com/v2/apps/{app_id}/deployments/{deployment_id}\""
          }
        ]
      }
    },
    "/v2/apps/{app_id}/deployments/{deployment_id}/cancel": {
      "post": {
        "operationId": "post_cancel_deployment",
        "summary": "Cancel a Deployment",
        "description": "Immediately cancel an in-progress deployment.",
        "tags": [
          "Apps"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/app_id"
          },
          {
            "$ref": "#/components/parameters/deployment_id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/cancel_deployment"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  \"https://api.digitalocean.com/v2/apps/{app_id}/deployments/{deployment_id}/cancel\""
          }
        ]
      }
    },
    "/v2/apps/{app_id}/deployments/{deployment_id}/components/{component_name}/logs": {
      "get": {
        "operationId": "get_logs",
        "summary": "Retrieve Deployment Logs",
        "description": "Retrieve the logs of a past, in-progress, or active deployment. If a component name is specified, the logs will be limited to only that component. The response will include links to either real-time logs of an in-progress or active deployment or archived logs of a past deployment.",
        "tags": [
          "Apps"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/app_id"
          },
          {
            "$ref": "#/components/parameters/deployment_id"
          },
          {
            "$ref": "#/components/parameters/component"
          },
          {
            "$ref": "#/components/parameters/live_updates"
          },
          {
            "$ref": "#/components/parameters/log_type"
          },
          {
            "$ref": "#/components/parameters/time_wait"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/list_logs"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  \"https://api.digitalocean.com/v2/apps/{app_id}/deployments/{deployment_id}/components/{component_name}/logs\""
          }
        ]
      }
    },
    "/v2/apps/{app_id}/deployments/{deployment_id}/logs": {
      "get": {
        "operationId": "get_logs_aggregate",
        "summary": "Retrieve Aggregate Deployment Logs",
        "description": "Retrieve the logs of a past, in-progress, or active deployment. If a component name is specified, the logs will be limited to only that component. The response will include links to either real-time logs of an in-progress or active deployment or archived logs of a past deployment.",
        "tags": [
          "Apps"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/app_id"
          },
          {
            "$ref": "#/components/parameters/deployment_id"
          },
          {
            "$ref": "#/components/parameters/live_updates"
          },
          {
            "$ref": "#/components/parameters/log_type"
          },
          {
            "$ref": "#/components/parameters/time_wait"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/list_logs_aggregate"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  \"https://api.digitalocean.com/v2/apps/{app_id}/deployments/{deployment_id}/logs\""
          }
        ]
      }
    },
    "/v2/apps/tiers": {
      "get": {
        "operationId": "list_tiers",
        "summary": "List App Tiers",
        "description": "List all app tiers.",
        "tags": [
          "Apps"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/all_tiers"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  \"https://api.digitalocean.com/v2/apps/tiers\""
          }
        ]
      }
    },
    "/v2/apps/tiers/{slug}": {
      "get": {
        "operationId": "get_tier",
        "summary": "Retrieve an App Tier",
        "description": "Retrieve information about a specific app tier.",
        "tags": [
          "Apps"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/slug_tier"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/get_tier"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  \"https://api.digitalocean.com/v2/apps/tiers/{slug}\""
          }
        ]
      }
    },
    "/v2/apps/tiers/instance_sizes": {
      "get": {
        "operationId": "list_instance_sizes",
        "summary": "List Instance Sizes",
        "description": "List all instance sizes for `service`, `worker`, and `job` components.",
        "tags": [
          "Apps"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/list_instance"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  \"https://api.digitalocean.com/v2/apps/tiers/instance_sizes\""
          }
        ]
      }
    },
    "/v2/apps/tiers/instance_sizes/{slug}": {
      "get": {
        "operationId": "get_instance_size",
        "summary": "Retrieve an Instance Size",
        "description": "Retrieve information about a specific instance size for `service`, `worker`, and `job` components.",
        "tags": [
          "Apps"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/slug_size"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/get_instance"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  \"https://api.digitalocean.com/v2/apps/tiers/instance_sizes/{slug}\""
          }
        ]
      }
    },
    "/v2/apps/regions": {
      "get": {
        "operationId": "list_regions",
        "summary": "List App Regions",
        "description": "List all regions supported by App Platform.",
        "tags": [
          "Apps"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/list_regions"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  \"https://api.digitalocean.com/v2/apps/regions\""
          }
        ]
      }
    },
    "/v2/apps/propose": {
      "post": {
        "operationId": "validate_app_spec",
        "summary": "Propose an App Spec",
        "description": "To propose and validate a spec for a new or existing app, send a PUT request to the `/v2/apps/propose` endpoint. The request returns some information about the proposed app, including app cost and upgrade cost. If an existing app ID is specified, the app spec is treated as a proposed update to the existing app.",
        "tags": [
          "Apps"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/app_propose"
              },
              "example": {
                "spec": {
                  "name": "web-app",
                  "region": "nyc",
                  "services": [
                    {
                      "name": "api",
                      "github": {
                        "branch": "main",
                        "deploy_on_push": true,
                        "repo": "digitalocean/sample-golang"
                      },
                      "run_command": "bin/api",
                      "environment_slug": "node-js",
                      "instance_count": 2,
                      "instance_size_slug": "basic-xxs",
                      "routes": [
                        {
                          "path": "/api"
                        }
                      ]
                    }
                  ]
                },
                "app_id": "b6bdf840-2854-4f87-a36c-5f231c617c84"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/propose_app"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        }
      }
    },
    "/v2/apps/{app_id}/alerts": {
      "get": {
        "operationId": "list_alerts",
        "summary": "List all app alerts",
        "description": "List alerts associated to the app and any components. This includes configuration information about the alerts including emails, slack webhooks, and triggering events or conditions.",
        "tags": [
          "Apps"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/app_id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/list_alerts"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  \"https://api.digitalocean.com/v2/apps/{app_id}/alerts\""
          }
        ]
      }
    },
    "/v2/apps/{app_id}/alerts/{alert_id}/destinations": {
      "post": {
        "operationId": "assign_alert_destinations",
        "summary": "Update destinations for alerts",
        "description": "Updates the emails and slack webhook destinations for app alerts. Emails must be associated to a user with access to the app.",
        "tags": [
          "Apps"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/app_id"
          },
          {
            "$ref": "#/components/parameters/alert_id"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/apps_assign_app_alert_destinations_request"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/assign_alert_destinations"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X PUT \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  \"https://api.digitalocean.com/v2/apps/{id}/alerts/{alert_id}/destinations\""
          }
        ]
      }
    },
    "/v2/cdn/endpoints": {
      "get": {
        "operationId": "list_cdn_endpoints",
        "summary": "List All CDN Endpoints",
        "description": "To list all of the CDN endpoints available on your account, send a GET request to `/v2/cdn/endpoints`.",
        "tags": [
          "CDN Endpoints"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/all_cdn_endpoints"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  \"https://api.digitalocean.com/v2/cdn/endpoints\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"os\"\n\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n    client := godo.NewFromToken(token)\n    ctx := context.TODO()\n\n    opt := &godo.ListOptions{\n        Page:    1,\n        PerPage: 200,\n    }\n\n    cdns, _, err := client.CDNs.List(ctx, opt)\n}"
          },
          {
            "lang": "Ruby",
            "source": "require 'droplet_kit'\ntoken = ENV['DIGITALOCEAN_TOKEN']\nclient = DropletKit::Client.new(access_token: token)\n\ncdns = client.cdns.all\ncdns.each"
          }
        ]
      },
      "post": {
        "operationId": "create_cdn_endpoint",
        "summary": "Create a New CDN Endpoint",
        "description": "To create a new CDN endpoint, send a POST request to `/v2/cdn/endpoints`. The\norigin attribute must be set to the fully qualified domain name (FQDN) of a\nDigitalOcean Space. Optionally, the TTL may be configured by setting the `ttl`\nattribute.\n\nA custom subdomain may be configured by specifying the `custom_domain` and\n`certificate_id` attributes.\n",
        "tags": [
          "CDN Endpoints"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/cdn_endpoint"
              },
              "examples": {
                "CDN Endpoint": {
                  "value": {
                    "origin": "static-images.nyc3.digitaloceanspaces.com",
                    "ttl": 3600
                  }
                },
                "CDN Endpoint With Custom Domain": {
                  "value": {
                    "origin": "static-images.nyc3.digitaloceanspaces.com",
                    "certificate_id": "892071a0-bb95-49bc-8021-3afd67a210bf",
                    "custom_domain": "static.example.com",
                    "ttl": 3600
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/existing_endpoint"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  -d '{\"origin\": \"static-images.nyc3.digitaloceanspaces.com\",\"certificate_id\": \"892071a0-bb95-49bc-8021-3afd67a210bf\",\"custom_domain\": \"static.example.com\",\"ttl\": 3600}' \\\n  \"https://api.digitalocean.com/v2/cdn/endpoints\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"os\"\n\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n    client := godo.NewFromToken(token)\n    ctx := context.TODO()\n\n    createRequest := &godo.CDNCreateRequest{\n        Origin:        \"static-images.nyc3.digitaloceanspaces.com\",\n        TTL:           3600,\n        CustomDomain:  \"static.example.com\",\n        CertificateID: \"892071a0-bb95-49bc-8021-3afd67a210b\",\n    }\n\n    cdn, _, err := client.CDNs.Create(ctx, createRequest)\n}"
          },
          {
            "lang": "Ruby",
            "source": "require 'droplet_kit'\ntoken = ENV['DIGITALOCEAN_TOKEN']\nclient = DropletKit::Client.new(access_token: token)\n\ncdn = DropletKit::CDN.new(\n  origin: 'static-images.nyc3.digitaloceanspaces.com',\n  custom_domain: 'static.example.com',\n  certificate_id: '892071a0-bb95-49bc-8021-3afd67a210bf',\n  ttl: 3600\n)\n\nclient.cdns.create(cdn)"
          }
        ]
      }
    },
    "/v2/cdn/endpoints/{cdn_id}": {
      "get": {
        "operationId": "get_cdn_endpoint",
        "summary": "Retrieve an Existing CDN Endpoint",
        "description": "To show information about an existing CDN endpoint, send a GET request to `/v2/cdn/endpoints/$ENDPOINT_ID`.",
        "tags": [
          "CDN Endpoints"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/cdn_endpoint_id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/existing_endpoint"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  \"https://api.digitalocean.com/v2/cdn/endpoints/19f06b6a-3ace-4315-b086-499a0e521b76\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"os\"\n\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n    client := godo.NewFromToken(token)\n    ctx := context.TODO()\n\n    cdn, _, err := client.CDNs.Get(ctx, \"19f06b6a-3ace-4315-b086-499a0e521b76\")\n}"
          },
          {
            "lang": "Ruby",
            "source": "require 'droplet_kit'\ntoken = ENV['DIGITALOCEAN_TOKEN']\nclient = DropletKit::Client.new(access_token: token)\n\nclient.cdns.find(id: '19f06b6a-3ace-4315-b086-499a0e521b76')"
          }
        ]
      },
      "put": {
        "operationId": "update_cdn_endpoint",
        "summary": "Update a CDN Endpoint",
        "description": "To update the TTL, certificate ID, or the FQDN of the custom subdomain for\nan existing CDN endpoint, send a PUT request to\n`/v2/cdn/endpoints/$ENDPOINT_ID`.\n",
        "tags": [
          "CDN Endpoints"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/cdn_endpoint_id"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_endpoint"
              }
            }
          }
        },
        "responses": {
          "202": {
            "$ref": "#/components/responses/existing_endpoint"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X PUT \\\n-H \"Content-Type: application/json\" \\\n-H \"Authorization: Bearer b7d03a6947b217efb6f3ec3bd3504582\" \\\n-d '{\"ttl\": 1800}' \\\n\"https://api.digitalocean.com/v2/cdn/endpoints/19f06b6a-3ace-4315-b086-499a0e521b76\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    pat := \"mytoken\"\n\n    client := godo.NewFromToken(pat)\n    ctx := context.TODO()\n\n    updateRequest := &godo.CDNUpdateTTLRequest{TTL: 1800}\n    cdn, _, err := client.CDNs.UpdateTTL(ctx, \"19f06b6a-3ace-4315-b086-499a0e521b76\", updateRequest)\n}"
          },
          {
            "lang": "Ruby",
            "source": "require 'droplet_kit'\ntoken = '16f79fc8cd5adcfe528a0994311fa63cc877737b385b6ff7d12ed6684ba4fef5'\nclient = DropletKit::Client.new(access_token: token)\n\nclient.cdns.update_ttl(id: '19f06b6a-3ace-4315-b086-499a0e521b76', ttl: 1800)"
          }
        ]
      },
      "delete": {
        "operationId": "delete_cdn_endpoint",
        "summary": "Delete a CDN Endpoint",
        "description": "To delete a specific CDN endpoint, send a DELETE request to\n`/v2/cdn/endpoints/$ENDPOINT_ID`.\n\nA status of 204 will be given. This indicates that the request was processed\nsuccessfully, but that no response body is needed.\n",
        "tags": [
          "CDN Endpoints"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/cdn_endpoint_id"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/no_content"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X DELETE \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  \"https://api.digitalocean.com/v2/cdn/endpoints/19f06b6a-3ace-4315-b086-499a0e521b76\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"os\"\n\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n    client := godo.NewFromToken(token)\n    ctx := context.TODO()\n\n    _, err := client.CDNs.Delete(ctx, \"19f06b6a-3ace-4315-b086-499a0e521b76\")\n}"
          },
          {
            "lang": "Ruby",
            "source": "require 'droplet_kit'\ntoken = ENV['DIGITALOCEAN_TOKEN']\nclient = DropletKit::Client.new(access_token: token)\n\nclient.cdns.delete(id: '19f06b6a-3ace-4315-b086-499a0e521b76')"
          }
        ]
      }
    },
    "/v2/cdn/endpoints/{cdn_id}/cache": {
      "delete": {
        "operationId": "purge_cdn_cache",
        "summary": "Purge the Cache for an Existing CDN Endpoint",
        "description": "To purge cached content from a CDN endpoint, send a DELETE request to\n`/v2/cdn/endpoints/$ENDPOINT_ID/cache`. The body of the request should include\na `files` attribute containing a list of cached file paths to be purged. A\npath may be for a single file or may contain a wildcard (`*`) to recursively\npurge all files under a directory. When only a wildcard is provided, all\ncached files will be purged.\n",
        "tags": [
          "CDN Endpoints"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/cdn_endpoint_id"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/purge_cache"
              }
            }
          }
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/no_content"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X DELETE \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  -d '{\"files\": [\"assets/img/hero.png\",\"assets/css/*\"]}' \\\n  \"https://api.digitalocean.com/v2/cdn/endpoints/19f06b6a-3ace-4315-b086-499a0e521b76/cache\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"os\"\n\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n    client := godo.NewFromToken(token)\n    ctx := context.TODO()\n\n    flushRequest := &godo.CDNFlushCacheRequest{\n        Files: []string{\"assets/img/hero.png\",\"assets/css/*\"},\n    }\n\n    _, err := client.CDNs.FlushCache(ctx, \"19f06b6a-3ace-4315-b086-499a0e521b76\", flushRequest)\n}"
          },
          {
            "lang": "Ruby",
            "source": "require 'droplet_kit'\ntoken = ENV['DIGITALOCEAN_TOKEN']\nclient = DropletKit::Client.new(access_token: token)\n\nclient.cdns.flush_cache(\n  id: '19f06b6a-3ace-4315-b086-499a0e521b76',\n  files: ['assets/img/hero.png','assets/css/*']\n)"
          }
        ]
      }
    },
    "/v2/certificates": {
      "get": {
        "operationId": "list_certificates",
        "summary": "List All Certificates",
        "description": "To list all of the certificates available on your account, send a GET request to `/v2/certificates`.",
        "parameters": [
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "tags": [
          "Certificates"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/all_certificates"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  \"https://api.digitalocean.com/v2/certificates\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"os\"\n\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n    client := godo.NewFromToken(token)\n    ctx := context.TODO()\n\n    opt := &godo.ListOptions{\n        Page:    1,\n        PerPage: 200,\n    }\n\n    certs, _, err := client.Certificates.List(ctx, opt)\n}"
          },
          {
            "lang": "Ruby",
            "source": "require 'droplet_kit'\ntoken = ENV['DIGITALOCEAN_TOKEN']\nclient = DropletKit::Client.new(access_token: token)\n\ncertificates = client.certificates.all\ncertificates.each"
          }
        ]
      },
      "post": {
        "operationId": "create_certificates",
        "summary": "Create a New Certificate",
        "description": "To upload new SSL certificate which you have previously generated, send a POST\nrequest to `/v2/certificates`.\n\nWhen uploading a user-generated certificate, the `private_key`,\n`leaf_certificate`, and optionally the `certificate_chain` attributes should\nbe provided. The type must be set to `custom`.\n\nWhen using Let's Encrypt to create a certificate, the `dns_names` attribute\nmust be provided, and the type must be set to `lets_encrypt`.\n",
        "tags": [
          "Certificates"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/certificate_request_lets_encrypt"
                  },
                  {
                    "$ref": "#/components/schemas/certificate_request_custom"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/new_certificate"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  -d '{\"name\": \"web-cert-01\", \"type\": \"custom\", \"private_key\": \"'\"$(</path/to/privkey1.pem)\"'\",\"leaf_certificate\": \"'\"$(</path/to/cert1.pem)\"'\",\"certificate_chain\": \"'\"$(</path/to/fullchain1.pem)\"'\"}' \\\n  \"https://api.digitalocean.com/v2/certificates\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"os\"\n\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n    client := godo.NewFromToken(token)\n    ctx := context.TODO()\n\n    key, err := ioutil.ReadFile(\"/path/to/privkey1.pem\")\n    if err != nil {\n        fmt.Print(err)\n    }\n\n    cert, err := ioutil.ReadFile(\"/path/to/cert1.pem\")\n    if err != nil {\n        fmt.Print(err)\n    }\n\n    chain, err := ioutil.ReadFile(\"/path/to/fullchain1.pem\")\n    if err != nil {\n        fmt.Print(err)\n    }\n\n    createRequest := &godo.CertificateRequest{\n        Name:             \"web-cert-01\",\n        PrivateKey:       string(key),\n        LeafCertificate:  string(cert),\n        CertificateChain: string(chain),\n        Type:             \"custom\",\n    }\n\n    certObj, _, err := client.Certificates.Create(ctx, createRequest)\n}"
          },
          {
            "lang": "Ruby",
            "source": "require 'droplet_kit'\ntoken = ENV['DIGITALOCEAN_TOKEN']\nclient = DropletKit::Client.new(access_token: token)\n\nkey = File.open('/path/to/privkey1.pem', 'r'){ |file| file.read }\ncert = File.open('/path/to/cert1.pem', 'r'){ |file| file.read }\nchain = File.open('/path/to/fullchain1.pem', 'r'){ |file| file.read }\n\ncertificate = DropletKit::Certificate.new(    name: 'web-cert-01',\n    private_key: key,\n    leaf_certificate: cert,\n    certificate_chain: chain,\n    type: 'custom'\n)\n\nclient.certificates.create(certificate)"
          }
        ]
      }
    },
    "/v2/certificates/{certificate_id}": {
      "get": {
        "operationId": "get_certificate",
        "summary": "Retrieve an Existing Certificate",
        "description": "To show information about an existing certificate, send a GET request to `/v2/certificates/$CERTIFICATE_ID`.",
        "tags": [
          "Certificates"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/certificate_id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/existing_certificate"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  \"https://api.digitalocean.com/v2/certificates/892071a0-bb95-49bc-8021-3afd67a210bf\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"os\"\n\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n    client := godo.NewFromToken(token)\n    ctx := context.TODO()\n\n    cert, _, err := client.Certificates.Get(ctx, \"892071a0-bb95-49bc-8021-3afd67a210bf\")\n}"
          },
          {
            "lang": "Ruby",
            "source": "require 'droplet_kit'\ntoken = ENV['DIGITALOCEAN_TOKEN']\nclient = DropletKit::Client.new(access_token: token)\n\nclient.certificates.find(id: '892071a0-bb95-49bc-8021-3afd67a210bf')"
          }
        ]
      },
      "delete": {
        "operationId": "delete_certificate",
        "summary": "Delete a Certificate",
        "description": "To delete a specific certificate, send a DELETE request to\n`/v2/certificates/$CERTIFICATE_ID`.\n",
        "tags": [
          "Certificates"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/certificate_id"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/no_content"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X DELETE \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  \"https://api.digitalocean.com/v2/certificates/892071a0-bb95-49bc-8021-3afd67a210bf\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"os\"\n\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n    client := godo.NewFromToken(token)\n    ctx := context.TODO()\n\n    _, err := client.Certificates.Delete(ctx, \"892071a0-bb95-49bc-8021-3afd67a210bf\")\n}"
          },
          {
            "lang": "Ruby",
            "source": "require 'droplet_kit'\ntoken = ENV['DIGITALOCEAN_TOKEN']\nclient = DropletKit::Client.new(access_token: token)\n\nclient.certificates.delete(id: '892071a0-bb95-49bc-8021-3afd67a210bf')"
          }
        ]
      }
    },
    "/v2/customers/my/balance": {
      "get": {
        "operationId": "get_customer_balance",
        "summary": "Get Customer Balance",
        "description": "To retrieve the balances on a customer's account, send a GET request to `/v2/customers/my/balance`.",
        "tags": [
          "Billing"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/balance"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  \"https://api.digitalocean.com/v2/customers/my/balance\""
          }
        ]
      }
    },
    "/v2/customers/my/billing_history": {
      "get": {
        "operationId": "list_billing_history",
        "summary": "List Billing History",
        "description": "To retrieve a list of all billing history entries, send a GET request to `/v2/customers/my/billing_history`.",
        "tags": [
          "Billing"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/billing_history"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  \"https://api.digitalocean.com/v2/customers/my/billing_history\""
          }
        ]
      }
    },
    "/v2/customers/my/invoices": {
      "get": {
        "operationId": "list_invoices",
        "summary": "List All Invoices",
        "description": "To retrieve a list of all invoices, send a GET request to `/v2/customers/my/invoices`.",
        "tags": [
          "Billing"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/invoices"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  \"https://api.digitalocean.com/v2/customers/my/invoices\""
          }
        ]
      }
    },
    "/v2/customers/my/invoices/{invoice_uuid}": {
      "get": {
        "operationId": "get_invoice_by_uuid",
        "summary": "Retrieve an Invoice by UUID",
        "description": "To retrieve the invoice items for an invoice, send a GET request to `/v2/customers/my/invoices/$INVOICE_UUID`.",
        "tags": [
          "Billing"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/invoice_uuid"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/invoice"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  \"https://api.digitalocean.com/v2/customers/my/invoices/22737513-0ea7-4206-8ceb-98a575af7681\""
          }
        ]
      }
    },
    "/v2/customers/my/invoices/{invoice_uuid}/csv": {
      "get": {
        "operationId": "get_invoice_csv_by_uuid",
        "summary": "Retrieve an Invoice CSV by UUID",
        "description": "To retrieve a CSV for an invoice, send a GET request to `/v2/customers/my/invoices/$INVOICE_UUID/csv`.",
        "tags": [
          "Billing"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/invoice_uuid"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/invoice_csv"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X GET \\\n  -H \"Content-Type: text/csv\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  \"https://api.digitalocean.com/v2/customers/my/invoices/22737513-0ea7-4206-8ceb-98a575af7681/csv\" --output invoice.csv"
          }
        ]
      }
    },
    "/v2/customers/my/invoices/{invoice_uuid}/pdf": {
      "get": {
        "operationId": "get_invoice_pdf_by_uuid",
        "summary": "Retrieve an Invoice PDF by UUID",
        "description": "To retrieve a PDF for an invoice, send a GET request to `/v2/customers/my/invoices/$INVOICE_UUID/pdf`.",
        "tags": [
          "Billing"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/invoice_uuid"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/invoice_pdf"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X GET \\\n  -H \"Content-Type: application/pdf\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  \"https://api.digitalocean.com/v2/customers/my/invoices/22737513-0ea7-4206-8ceb-98a575af7681/pdf\" --output invoice.pdf"
          }
        ]
      }
    },
    "/v2/customers/my/invoices/{invoice_uuid}/summary": {
      "get": {
        "operationId": "get_invoice_summary_by_uuid",
        "summary": "Retrieve an Invoice Summary by UUID",
        "description": "To retrieve a summary for an invoice, send a GET request to `/v2/customers/my/invoices/$INVOICE_UUID/summary`.",
        "tags": [
          "Billing"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/invoice_uuid"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/invoice_summary"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  \"https://api.digitalocean.com/v2/customers/my/invoices/22737513-0ea7-4206-8ceb-98a575af7681/summary\""
          }
        ]
      }
    },
    "/v2/databases": {
      "get": {
        "operationId": "list_database_clusters",
        "summary": "List All Database Clusters",
        "description": "To list all of the database clusters available on your account, send a GET request to `/v2/databases`. To limit the results to database clusters with a specific tag, include the `tag_name` query parameter set to the name of the tag. For example, `/v2/databases?tag_name=$TAG_NAME`.\nThe result will be a JSON object with a `databases` key. This will be set to an array of database objects, each of which will contain the standard database attributes.\nThe embedded `connection` and `private_connection` objects will contain the information needed to access the database cluster:\nThe embedded `maintenance_window` object will contain information about any scheduled maintenance for the database cluster.",
        "tags": [
          "Databases"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/tag_name"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/database_clusters"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  \"https://api.digitalocean.com/v2/databases\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"os\"\n\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n    client := godo.NewFromToken(token)\n    ctx := context.TODO()\n\n    opt := &godo.ListOptions{\n        Page:    1,\n        PerPage: 200,\n    }\n\n    clusters, _, err := client.Databases.List(ctx, opt)\n}"
          }
        ]
      },
      "post": {
        "operationId": "create_database_cluster",
        "summary": "Create a New Database Cluster",
        "description": "To create a database cluster, send a POST request to `/v2/databases`.\nThe response will be a JSON object with a key called `database`. The value of this will be an object that contains the standard attributes associated with a database cluster. The initial value of the database cluster's `status` attribute will be `creating`. When the cluster is ready to receive traffic, this will transition to `online`.\nThe embedded `connection` and `private_connection` objects will contain the information needed to access the database cluster.\nDigitalOcean managed PostgreSQL and MySQL database clusters take automated daily backups. To create a new database cluster based on a backup of an exising cluster, send a POST request to `/v2/databases`. In addition to the standard database cluster attributes, the JSON body must include a key named `backup_restore` with the name of the original database cluster and the timestamp of the backup to be restored.\nNote: Backups are not supported for Redis clusters.",
        "tags": [
          "Databases"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/database_cluster"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "backup_restore": {
                        "$ref": "#/components/schemas/database_backup"
                      }
                    }
                  }
                ]
              },
              "examples": {
                "Create a New Database Cluster": {
                  "value": {
                    "name": "backend",
                    "engine": "pg",
                    "version": "10",
                    "region": "nyc3",
                    "size": "db-s-2vcpu-4gb",
                    "num_nodes": 2,
                    "tags": [
                      "production"
                    ]
                  }
                },
                "Restore from a Database Cluster Backup": {
                  "value": {
                    "name": "backend-restored",
                    "backup_restore": {
                      "database_name": "backend",
                      "backup_created_at": "2019-01-31T19:25:22Z"
                    },
                    "engine": "pg",
                    "version": "10",
                    "region": "nyc3",
                    "size": "db-s-2vcpu-4gb",
                    "num_nodes": 2
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/database_cluster"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  -d '{\"name\": \"backend\", \"engine\": \"pg\", \"version\": \"10\", \"region\": \"nyc3\", \"size\": \"db-s-2vcpu-4gb\", \"num_nodes\": 2, \"tags\": [\"production\"]}' \\\n  \"https://api.digitalocean.com/v2/databases\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"os\"\n\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n    client := godo.NewFromToken(token)\n    ctx := context.TODO()\n\n    createRequest := &godo.DatabaseCreateRequest{\n        Name:       \"backend\",\n        EngineSlug: \"pg\",\n        Version:    \"10\",\n        Region:     \"nyc3\",\n        SizeSlug:   \"db-s-2vcpu-4gb\",\n        NumNodes:   2,\n    }\n\n    cluster, _, err := client.Databases.Create(ctx, createRequest)\n}"
          }
        ]
      }
    },
    "/v2/databases/{database_cluster_uuid}": {
      "get": {
        "operationId": "get_database_cluster",
        "summary": "Retrieve an Existing Database Cluster",
        "description": "To show information about an existing database cluster, send a GET request to `/v2/databases/$DATABASE_ID`.\nThe response will be a JSON object with a database key. This will be set to an object containing the standard database cluster attributes.\nThe embedded connection and private_connection objects will contain the information needed to access the database cluster.\nThe embedded maintenance_window object will contain information about any scheduled maintenance for the database cluster.",
        "tags": [
          "Databases"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/database_cluster_uuid"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/database_cluster"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  \"https://api.digitalocean.com/v2/databases/9cc10173-e9ea-4176-9dbc-a4cee4c4ff30\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"os\"\n\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n    client := godo.NewFromToken(token)\n    ctx := context.TODO()\n\n    cluster, _, err := client.Databases.Get(ctx, \"9cc10173-e9ea-4176-9dbc-a4cee4c4ff30\")\n}"
          }
        ]
      },
      "delete": {
        "operationId": "destroy_cluster",
        "summary": "Destroy a Database Cluster",
        "description": "To destroy a specific database, send a DELETE request to `/v2/databases/$DATABASE_ID`.\nA status of 204 will be given. This indicates that the request was processed successfully, but that no response body is needed.",
        "tags": [
          "Databases"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/database_cluster_uuid"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/no_content"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X DELETE \\\n-H \"Content-Type: application/json\" \\\n-H \"Authorization: Bearer b7d03a6947b217efb6f3ec3bd3504582\" \\\n\"https://api.digitalocean.com/v2/databases/9cc10173-e9ea-4176-9dbc-a4cee4c4ff30\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    pat := \"mytoken\"\n\n    client := godo.NewFromToken(pat)\n    ctx := context.TODO()\n\n    _, err := client.Databases.Delete(ctx, \"9cc10173-e9ea-4176-9dbc-a4cee4c4ff30\")\n}"
          }
        ]
      }
    },
    "/v2/databases/{database_cluster_uuid}/ca": {
      "get": {
        "operationId": "get_ca",
        "summary": "Retrieve the Public Certificate",
        "description": "To retrieve the public certificate used to secure the connection to the database cluster send a GET request to\n`/v2/databases/$DATABASE_ID/ca`.\n\nThe response will be a JSON object with a `ca` key. This will be set to an object\ncontaining the base64 encoding of the public key certificate.\n",
        "tags": [
          "Databases"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/database_cluster_uuid"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ca"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  \"https://api.digitalocean.com/v2/databases/9cc10173-e9ea-4176-9dbc-a4cee4c4ff30/ca\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"os\"\n\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n    client := godo.NewFromToken(token)\n    ctx := context.TODO()\n\n    ca, _, err := client.Databases.GetCA(ctx, \"9cc10173-e9ea-4176-9dbc-a4cee4c4ff30\")\n}"
          }
        ]
      }
    },
    "/v2/databases/{database_cluster_uuid}/online-migration": {
      "get": {
        "operationId": "get_migration_status",
        "summary": "Retrieve the Status of an Online Migration",
        "description": "To retrieve the status of an online migration, send a GET request to `/v2/databases/$DATABASE_ID/online-migration`. If a migration has completed, a 200 OK status is returned with no response body.",
        "tags": [
          "Databases"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/database_cluster_uuid"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/online_migration"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X PUT \\\n-H \"Content-Type: application/json\" \\\n-H \"Authorization: Bearer b7d03a6947b217efb6f3ec3bd3504582\" \\\n-d '{\"source\":{\"host\":\"source-do-user-6607903-0.b.db.ondigitalocean.com\",\"dbname\":\"defaultdb\",\"port\":25060,\"username\":\"doadmin\",\"password\":\"paakjnfe10rsrsmf\"},\"disable_ssl\":false}' \\\n\"https://api.digitalocean.com/v2/databases/9cc10173-e9ea-4176-9dbc-a4cee4c4ff30/online-migration\""
          }
        ]
      },
      "put": {
        "operationId": "update_online_migration",
        "summary": "Start an Online Migration",
        "description": "To start an online migration, send a PUT request to `/v2/databases/$DATABASE_ID/online-migration` endpoint. Migrating a cluster establishes a connection with an existing cluster and replicates its contents to the target cluster. Online migration is only available for PostgreSQL and Redis clusters.",
        "tags": [
          "Databases"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/database_cluster_uuid"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/source_database"
              },
              "example": {
                "source": {
                  "host": "source-do-user-6607903-0.b.db.ondigitalocean.com",
                  "dbname": "defaultdb",
                  "port": 25060,
                  "username": "doadmin",
                  "password": "paakjnfe10rsrsmf"
                },
                "disable_ssl": false
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/online_migration"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X PUT \\\n-H \"Content-Type: application/json\" \\\n-H \"Authorization: Bearer b7d03a6947b217efb6f3ec3bd3504582\" \\\n-d '{\"source\":{\"host\":\"source-do-user-6607903-0.b.db.ondigitalocean.com\",\"dbname\":\"defaultdb\",\"port\":25060,\"username\":\"doadmin\",\"password\":\"paakjnfe10rsrsmf\"},\"disable_ssl\":false}' \\\n\"https://api.digitalocean.com/v2/databases/9cc10173-e9ea-4176-9dbc-a4cee4c4ff30/online-migration\""
          }
        ]
      }
    },
    "/v2/databases/{database_cluster_uuid}/online-migration/{migration_id}": {
      "delete": {
        "operationId": "delete_online_migration",
        "summary": "Stop an Online Migration",
        "description": "To stop an online migration, send a DELETE request to `/v2/databases/$DATABASE_ID/online-migration/$MIGRATION_ID`.\n\nA status of 204 will be given. This indicates that the request was processed successfully, but that no response body is needed.\n",
        "tags": [
          "Databases"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/database_cluster_uuid"
          },
          {
            "$ref": "#/components/parameters/migration_id"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/no_content"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X DELETE \\\n-H \"Content-Type: application/json\" \\\n-H \"Authorization: Bearer b7d03a6947b217efb6f3ec3bd3504582\" \\\n\"https://api.digitalocean.com/v2/databases/9cc10173-e9ea-4176-9dbc-a4cee4c4ff30/online-migration/77b28fc8-19ff-11eb-8c9c-c68e24557488\""
          }
        ]
      }
    },
    "/v2/databases/{database_cluster_uuid}/migrate": {
      "put": {
        "operationId": "update_database_cluster",
        "summary": "Migrate a Database Cluster to a New Region",
        "description": "To migrate a database cluster to a new region, send a `PUT` request to\n`/v2/databases/$DATABASE_ID/migrate`. The body of the request must specify a\n`region` attribute.\n\nA successful request will receive a 202 Accepted status code with no body in\nresponse. Querying the database cluster will show that its `status` attribute\nwill now be set to `migrating`. This will transition back to `online` when the\nmigration has completed.\n",
        "tags": [
          "Databases"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/database_cluster_uuid"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "region": {
                    "type": "string",
                    "example": "lon1",
                    "description": "A slug identifier for the region to which the database cluster will be migrated."
                  }
                },
                "required": [
                  "region"
                ],
                "example": {
                  "region": "lon1"
                }
              }
            }
          }
        },
        "responses": {
          "202": {
            "$ref": "#/components/responses/accepted"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X PUT \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  -d '{\"region\":\"lon1\"}' \\\n  \"https://api.digitalocean.com/v2/databases/9cc10173-e9ea-4176-9dbc-a4cee4c4ff30/migrate\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"os\"\n\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n    client := godo.NewFromToken(token)\n    ctx := context.TODO()\n\n    migrateRequest := &godo.DatabaseMigrateRequest{\n        Region: \"lon1\",\n    }\n\n    _, err := client.Databases.Migrate(ctx, \"9cc10173-e9ea-4176-9dbc-a4cee4c4ff30\", migrateRequest)\n}"
          }
        ]
      }
    },
    "/v2/databases/{database_cluster_uuid}/resize": {
      "put": {
        "operationId": "update_database_cluster_size",
        "summary": "Resize a Database Cluster",
        "description": "To resize a database cluster, send a PUT request to `/v2/databases/$DATABASE_ID/resize`. The body of the request must specify both the size and num_nodes attributes.\nA successful request will receive a 202 Accepted status code with no body in response. Querying the database cluster will show that its status attribute will now be set to resizing. This will transition back to online when the resize operation has completed.",
        "tags": [
          "Databases"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/database_cluster_uuid"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/database_cluster_resize"
              },
              "example": {
                "size": "db-s-4vcpu-8gb",
                "num_nodes": 3
              }
            }
          }
        },
        "responses": {
          "202": {
            "$ref": "#/components/responses/no_content"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X PUT \\\n-H \"Content-Type: application/json\" \\\n-H \"Authorization: Bearer b7d03a6947b217efb6f3ec3bd3504582\" \\\n-d '{\"size\":\"db-s-4vcpu-8gb\", \"num_nodes\":3}' \\\n\"https://api.digitalocean.com/v2/databases/9cc10173-e9ea-4176-9dbc-a4cee4c4ff30/resize\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    pat := \"mytoken\"\n\n    client := godo.NewFromToken(pat)\n    ctx := context.TODO()\n\n    resizeRequest := &godo.DatabaseResizeRequest{\n        SizeSlug: \"db-s-4vcpu-8gb\",\n        NumNodes: 3,\n    }\n}"
          }
        ]
      }
    },
    "/v2/databases/{database_cluster_uuid}/firewall": {
      "get": {
        "operationId": "list_database_firewalls",
        "summary": "List Firewall Rules (Trusted Sources) for a Database Cluster",
        "description": "To list all of a database cluster's firewall rules (known as \"trusted sources\" in the control panel), send a GET request to `/v2/databases/$DATABASE_ID/firewall`.\nThe result will be a JSON object with a `rules` key.",
        "tags": [
          "Databases"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/database_cluster_uuid"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/firewall_rules"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  \"https://api.digitalocean.com/v2/databases/9cc10173-e9ea-4176-9dbc-a4cee4c4ff30/firewall\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"os\"\n\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n    client := godo.NewFromToken(token)\n    ctx := context.TODO()\n\n    rules, _, err := client.Databases.GetFirewallRules(ctx, \"9cc10173-e9ea-4176-9dbc-a4cee4c4ff30\")\n}"
          }
        ]
      },
      "put": {
        "operationId": "update_database_firewall",
        "summary": "Update Firewall Rules (Trusted Sources) for a Database",
        "description": "To update a database cluster's firewall rules (known as \"trusted sources\" in the control panel), send a PUT request to `/v2/databases/$DATABASE_ID/firewall` specifying which resources should be able to open connections to the database. You may limit connections to specific Droplets, Kubernetes clusters, or IP addresses. When a tag is provided, any Droplet or Kubernetes node with that tag applied to it will have access. The firewall is limited to 100 rules (or trusted sources). When possible, we recommend [placing your databases into a VPC network](https://www.digitalocean.com/docs/networking/vpc/) to limit access to them instead of using a firewall.\nA successful",
        "tags": [
          "Databases"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "rules": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/firewall_rule"
                    }
                  }
                }
              },
              "example": {
                "rules": [
                  {
                    "type": "ip_addr",
                    "value": "192.168.1.1"
                  },
                  {
                    "type": "k8s",
                    "value": "ff2a6c52-5a44-4b63-b99c-0e98e7a63d61"
                  },
                  {
                    "type": "droplet",
                    "value": "163973392"
                  },
                  {
                    "type": "tag",
                    "value": "backend"
                  }
                ]
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/database_cluster_uuid"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/no_content"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X PUT \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  -d '{\"rules\": [{\"type\": \"ip_addr\",\"value\": \"192.168.1.1\"},{\"type\": \"droplet\",\"value\": \"163973392\"},{\"type\": \"k8s\",\"value\": \"ff2a6c52-5a44-4b63-b99c-0e98e7a63d61\"},{\"type\": \"tag\",\"value\": \"backend\"]}' \\\n  \"https://api.digitalocean.com/v2/databases/9cc10173-e9ea-4176-9dbc-a4cee4c4ff30/firewall\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"os\"\n\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n    client := godo.NewFromToken(token)\n    ctx := context.TODO()\n\n    req := godo.DatabaseUpdateFirewallRulesRequest{\n      Rules: []*godo.DatabaseFirewallRule{\n        {\n         Type:  \"ip_addr\",\n         Value: \"192.168.1.1\",\n       },\n        {\n         Type:  \"droplet\",\n         Value: \"163973392\",\n       },\n        {\n         Type:  \"k8s\",\n         Value: \"ff2a6c52-5a44-4b63-b99c-0e98e7a63d61\",\n        },\n      },\n    }\n    _, err := client.Databases.UpdateFirewallRules(ctx, dbID, &req)\n}"
          }
        ]
      }
    },
    "/v2/databases/{database_cluster_uuid}/maintenance": {
      "put": {
        "operationId": "update_maintenance_window",
        "summary": "Configure a Database Cluster's Maintenance Window",
        "description": "To configure the window when automatic maintenance should be performed for a database cluster, send a PUT request to `/v2/databases/$DATABASE_ID/maintenance`.\nA successful request will receive a 204 No Content status code with no body in response.",
        "tags": [
          "Databases"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/database_cluster_uuid"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/database_maintenance_window"
              },
              "example": {
                "day": "tuesday",
                "hour": "14:00"
              }
            }
          }
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/no_content"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X PUT \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  -d '{\"day\": \"tuesday\", \"hour\": \"14:00\"}' \\\n  \"https://api.digitalocean.com/v2/databases/9cc10173-e9ea-4176-9dbc-a4cee4c4ff30/maintenance\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"os\"\n\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n    client := godo.NewFromToken(token)\n    ctx := context.TODO()\n\n    maintenanceRequest := &godo.DatabaseUpdateMaintenanceRequest{\n        Day:  \"thursday\",\n        Hour: \"16:00\",\n    }\n\n    _, err := client.Databases.UpdateMaintenance(ctx, \"88055188-9e54-4f21-ab11-8a918ed79ee2\", maintenanceRequest)\n}"
          }
        ]
      }
    },
    "/v2/databases/{database_cluster_uuid}/backups": {
      "get": {
        "operationId": "list_database_backups",
        "summary": "List Backups for a Database Cluster",
        "description": "To list all of the available backups of a PostgreSQL or MySQL database cluster, send a GET request to `/v2/databases/$DATABASE_ID/backups`.\n**Note**: Backups are not supported for Redis clusters.\nThe result will be a JSON object with a `backups key`. This will be set to an array of backup objects, each of which will contain the size of the backup and the timestamp at which it was created.",
        "tags": [
          "Databases"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/database_cluster_uuid"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/database_backups"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  \"https://api.digitalocean.com/v2/databases/9cc10173-e9ea-4176-9dbc-a4cee4c4ff30/backups\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"os\"\n\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n    client := godo.NewFromToken(token)\n    ctx := context.TODO()\n\n    backups, _, err := client.Databases.ListBackups(ctx, \"9cc10173-e9ea-4176-9dbc-a4cee4c4ff30\", nil)\n}"
          }
        ]
      }
    },
    "/v2/databases/{database_cluster_uuid}/replicas": {
      "get": {
        "operationId": "list_replicas",
        "summary": "List All Read-only Replicas",
        "description": "To list all of the read-only replicas associated with a database cluster, send a GET request to `/v2/databases/$DATABASE_ID/replicas`.\n**Note**: Read-only replicas are not supported for Redis clusters.\nThe result will be a JSON object with a `replicas` key. This will be set to an array of database replica objects, each of which will contain the standard database replica attributes.",
        "tags": [
          "Databases"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/database_cluster_uuid"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/database_replicas"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  \"https://api.digitalocean.com/v2/databases/9cc10173-e9ea-4176-9dbc-a4cee4c4ff30/replicas\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"os\"\n\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n    client := godo.NewFromToken(token)\n    ctx := context.TODO()\n\n    replicas, _, err := client.Databases.ListReplicas(ctx, \"9cc10173-e9ea-4176-9dbc-a4cee4c4ff30\", nil)\n}"
          }
        ]
      },
      "post": {
        "operationId": "create_replica",
        "summary": "Create a Read-only Replica",
        "description": "To create a read-only replica for a PostgreSQL or MySQL database cluster, send a POST request to `/v2/databases/$DATABASE_ID/replicas` specifying the name it should be given, the size of the node to be used, and the region where it will be located.\n**Note**: Read-only replicas are not supported for Redis clusters.\nThe response will be a JSON object with a key called `replica`. The value of this will be an object that contains the standard attributes associated with a database replica. The initial value of the read-only replica's `status` attribute will be `forking`. When the replica is ready to receive traffic, this will transition to `active`.",
        "tags": [
          "Databases"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/database_cluster_uuid"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/database_replica"
                  }
                ],
                "required": [
                  "name",
                  "size"
                ]
              },
              "example": {
                "name": "read-nyc3-01",
                "region": "nyc3",
                "size": "db-s-2vcpu-4gb"
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/database_replica"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  -d '{\"name\":\"read-nyc3-01\", \"region\":\"nyc3\", \"size\": \"db-s-2vcpu-4gb\"}' \\\n  \"https://api.digitalocean.com/v2/databases/9cc10173-e9ea-4176-9dbc-a4cee4c4ff30/replicas\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"os\"\n\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n    client := godo.NewFromToken(token)\n    ctx := context.TODO()\n\n    replicaRequest := &godo.DatabaseCreateReplicaRequest{\n\n        Name:   \"read-nyc3-01\",\n        Region: \"nyc3\",\n        Size:   \"db-s-2vcpu-4gb\",\n    }\n\n    replica, _, err := client.Databases.CreateReplica(ctx, \"9cc10173-e9ea-4176-9dbc-a4cee4c4ff30\", replicaRequest)\n}"
          }
        ]
      }
    },
    "/v2/databases/{database_cluster_uuid}/replicas/{replica_name}": {
      "get": {
        "operationId": "get_replica",
        "summary": "Retrieve an Existing Read-only Replica",
        "description": "To show information about an existing database replica, send a GET request to `/v2/databases/$DATABASE_ID/replicas/$REPLICA_NAME`.\n**Note**: Read-only replicas are not supported for Redis clusters.\nThe response will be a JSON object with a `replica key`. This will be set to an object containing the standard database replica attributes.",
        "tags": [
          "Databases"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/database_cluster_uuid"
          },
          {
            "$ref": "#/components/parameters/replica_name"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/database_replica"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  \"https://api.digitalocean.com/v2/databases/9cc10173-e9ea-4176-9dbc-a4cee4c4ff30/replicas/read-nyc3-01\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"os\"\n\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n    client := godo.NewFromToken(token)\n    ctx := context.TODO()\n\n    replica, _, err := client.Databases.GetReplica(ctx, \"9cc10173-e9ea-4176-9dbc-a4cee4c4ff30\", \"read-nyc3-01\")\n}"
          }
        ]
      },
      "delete": {
        "operationId": "destroy_replica",
        "summary": "Destroy a Read-only Replica",
        "description": "To destroy a specific read-only replica, send a DELETE request to `/v2/databases/$DATABASE_ID/replicas/$REPLICA_NAME`.\n**Note**: Read-only replicas are not supported for Redis clusters.\nA status of 204 will be given. This indicates that the request was processed successfully, but that no response body is needed.",
        "tags": [
          "Databases"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/database_cluster_uuid"
          },
          {
            "$ref": "#/components/parameters/replica_name"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/no_content"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X DELETE \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  \"https://api.digitalocean.com/v2/databases/9cc10173-e9ea-4176-9dbc-a4cee4c4ff30/replicas/read-nyc3-01\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"os\"\n\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n    client := godo.NewFromToken(token)\n    ctx := context.TODO()\n\n    _, err := client.Databases.DeleteReplica(ctx, \"9cc10173-e9ea-4176-9dbc-a4cee4c4ff30\", \"read-nyc3-01\")\n}"
          }
        ]
      }
    },
    "/v2/databases/{database_cluster_uuid}/users": {
      "get": {
        "operationId": "list_users",
        "summary": "List all Database Users",
        "description": "To list all of the users for your database cluster, send a GET request to\n`/v2/databases/$DATABASE_ID/users`.\n\nNote: User management is not supported for Redis clusters.\n\nThe result will be a JSON object with a `users` key. This will be set to an array\nof database user objects, each of which will contain the standard database user attributes.\n\nFor MySQL clusters, additional options will be contained in the mysql_settings object.\n",
        "tags": [
          "Databases"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/database_cluster_uuid"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/users"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  \"https://api.digitalocean.com/v2/databases/9cc10173-e9ea-4176-9dbc-a4cee4c4ff30/users\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"os\"\n\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n    client := godo.NewFromToken(token)\n    ctx := context.TODO()\n\n    users, _, err := client.Databases.ListUsers(ctx, \"88055188-9e54-4f21-ab11-8a918ed79ee2\", nil)\n}"
          }
        ]
      },
      "post": {
        "operationId": "add_user",
        "summary": "Add a Database User",
        "description": "To add a new database user, send a POST request to `/v2/databases/$DATABASE_ID/users`\nwith the desired username.\n\nNote: User management is not supported for Redis clusters.\n\nWhen adding a user to a MySQL cluster, additional options can be configured in the\n`mysql_settings` object.\n\nThe response will be a JSON object with a key called `user`. The value of this will be an\nobject that contains the standard attributes associated with a database user including\nits randomly generated password.\n",
        "tags": [
          "Databases"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/database_cluster_uuid"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/database_user"
              },
              "examples": {
                "Add New User": {
                  "value": {
                    "name": "app-01"
                  }
                },
                "Add New User with MySQL Auth Plugin": {
                  "value": {
                    "name": "app-02",
                    "mysql_settings": {
                      "auth_plugin": "mysql_native_password"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/user"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  -d '{\"name\": \"app-01\"}' \\\n  \"https://api.digitalocean.com/v2/databases/9cc10173-e9ea-4176-9dbc-a4cee4c4ff30/users\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"os\"\n\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n    client := godo.NewFromToken(token)\n    ctx := context.TODO()\n\n    addUserRequest := &godo.DatabaseCreateUserRequest{\n        Name: \"app-01\",\n    }\n\n    user, _, err := client.Databases.CreateUser(ctx, \"88055188-9e54-4f21-ab11-8a918ed79ee2\", addUserRequest)\n\n}"
          }
        ]
      }
    },
    "/v2/databases/{database_cluster_uuid}/users/{username}": {
      "get": {
        "operationId": "get_user",
        "summary": "Retrieve an Existing Database User",
        "description": "To show information about an existing database user, send a GET request to\n`/v2/databases/$DATABASE_ID/users/$USERNAME`.\n\nNote: User management is not supported for Redis clusters.\n\nThe response will be a JSON object with a `user` key. This will be set to an object\ncontaining the standard database user attributes.\n\nFor MySQL clusters, additional options will be contained in the mysql_settings\nobject.\n",
        "tags": [
          "Databases"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/database_cluster_uuid"
          },
          {
            "$ref": "#/components/parameters/username"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/user"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  \"https://api.digitalocean.com/v2/databases/9cc10173-e9ea-4176-9dbc-a4cee4c4ff30/users/app-01\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"os\"\n\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n    client := godo.NewFromToken(token)\n    ctx := context.TODO()\n\n    user, _, err := client.Databases.GetUser(ctx, \"9cc10173-e9ea-4176-9dbc-a4cee4c4ff30\", \"app-01\")\n}"
          }
        ]
      },
      "delete": {
        "operationId": "delete_user",
        "summary": "Remove a Database User",
        "description": "To remove a specific database user, send a DELETE request to\n`/v2/databases/$DATABASE_ID/users/$USERNAME`.\n\nA status of 204 will be given. This indicates that the request was processed\nsuccessfully, but that no response body is needed.\n\nNote: User management is not supported for Redis clusters.\n",
        "tags": [
          "Databases"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/database_cluster_uuid"
          },
          {
            "$ref": "#/components/parameters/username"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/no_content"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X DELETE \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  \"https://api.digitalocean.com/v2/databases/9cc10173-e9ea-4176-9dbc-a4cee4c4ff30/users/app-01\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"os\"\n\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n    client := godo.NewFromToken(token)\n    ctx := context.TODO()\n\n    _, err := client.Databases.DeleteUser(ctx, \"9cc10173-e9ea-4176-9dbc-a4cee4c4ff30\", \"app-01\")\n}"
          }
        ]
      }
    },
    "/v2/databases/{database_cluster_uuid}/users/{username}/reset_auth": {
      "post": {
        "operationId": "reset_auth",
        "summary": "Reset a Database User's Password or Authentication Method",
        "description": "To reset the password for a database user, send a POST request to\n`/v2/databases/$DATABASE_ID/users/$USERNAME/reset_auth`.\n\nFor `mysql` databases, the authentication method can be specifying by\nincluding a key in the JSON body called `mysql_settings` with the `auth_plugin`\nvalue specified.\n\nThe response will be a JSON object with a `user` key. This will be set to an\nobject containing the standard database user attributes.\n",
        "tags": [
          "Databases"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/database_cluster_uuid"
          },
          {
            "$ref": "#/components/parameters/username"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "mysql_settings": {
                    "$ref": "#/components/schemas/mysql_settings"
                  }
                }
              },
              "example": {
                "mysql_settings": {
                  "auth_plugin": "caching_sha2_password"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/user"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  -d '{\"mysql_settings\":{\"auth_plugin\": \"caching_sha2_password\"}}' \\\n  \"https://api.digitalocean.com/v2/databases/9cc10173-e9ea-4176-9dbc-a4cee4c4ff30/users/app-01/reset_auth\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"os\"\n\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n    client := godo.NewFromToken(token)\n    ctx := context.TODO()\n\n    resetUserAuthRequest := &godo.DatabaseResetUserAuthRequest{\n        MySQLSettings: &DatabaseMySQLUserSettings{\n            AuthPlugin: \"caching_sha2_password\",\n         },\n    }\n    user, _, err := client.Databases.ResetUserAuth(ctx, \"88055188-9e54-4f21-ab11-8a918ed79ee2\", \"app-01\", resetuserAuthRequest)\n}"
          }
        ]
      }
    },
    "/v2/databases/{database_cluster_uuid}/dbs": {
      "get": {
        "operationId": "list_databases",
        "summary": "List All Databases",
        "description": "To list all of the databases in a clusters, send a GET request to\n`/v2/databases/$DATABASE_ID/dbs`.\n\nThe result will be a JSON object with a `dbs` key. This will be set to an array\nof database objects, each of which will contain the standard database attributes.\n\nNote: Database management is not supported for Redis clusters.\n",
        "tags": [
          "Databases"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/database_cluster_uuid"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/databases"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  \"https://api.digitalocean.com/v2/databases/9cc10173-e9ea-4176-9dbc-a4cee4c4ff30/dbs\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"os\"\n\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n    client := godo.NewFromToken(token)\n    ctx := context.TODO()\n\n    dbs, _, err := client.Databases.ListDBs(ctx, \"9cc10173-e9ea-4176-9dbc-a4cee4c4ff30\", nil)\n}"
          }
        ]
      },
      "post": {
        "operationId": "add_database",
        "summary": "Add a New Database",
        "description": "To add a new database to an existing cluster, send a POST request to\n`/v2/databases/$DATABASE_ID/dbs`.\n\nNote: Database management is not supported for Redis clusters.\n\nThe response will be a JSON object with a key called `db`. The value of this will be\nan object that contains the standard attributes associated with a database.\n",
        "tags": [
          "Databases"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/database_cluster_uuid"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/database"
              },
              "example": {
                "name": "alpha"
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/database"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  -d '{\"name\": \"alpha\"}' \\\n  \"https://api.digitalocean.com/v2/databases/9cc10173-e9ea-4176-9dbc-a4cee4c4ff30/dbs\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"os\"\n\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n    client := godo.NewFromToken(token)\n    ctx := context.TODO()\n\n    createDBReq := &godo.DatabaseCreateDBRequest{\n        Name: \"alpha\",\n    }\n\n    db, _, err := client.Databases.CreateDB(ctx, \"9cc10173-e9ea-4176-9dbc-a4cee4c4ff30\", createDBReq)\n}"
          }
        ]
      }
    },
    "/v2/databases/{database_cluster_uuid}/dbs/{database_name}": {
      "get": {
        "operationId": "get_database",
        "summary": "Retrieve an Existing Database",
        "description": "To show information about an existing database cluster, send a GET request to\n`/v2/databases/$DATABASE_ID/dbs/$DB_NAME`.\n\nNote: Database management is not supported for Redis clusters.\n\nThe response will be a JSON object with a `db` key. This will be set to an object\ncontaining the standard database attributes.\n",
        "tags": [
          "Databases"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/database_cluster_uuid"
          },
          {
            "$ref": "#/components/parameters/database_name"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/database"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  \"https://api.digitalocean.com/v2/databases/9cc10173-e9ea-4176-9dbc-a4cee4c4ff30/dbs/alpha\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"os\"\n\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n    client := godo.NewFromToken(token)\n    ctx := context.TODO()\n\n    db, _, err := client.Databases.GetDB(ctx, \"9cc10173-e9ea-4176-9dbc-a4cee4c4ff30\", \"alpha\")\n}"
          }
        ]
      },
      "delete": {
        "operationId": "delete_database",
        "summary": "Delete a Database",
        "description": "To delete a specific database, send a DELETE request to\n`/v2/databases/$DATABASE_ID/dbs/$DB_NAME`.\n\nA status of 204 will be given. This indicates that the request was processed\nsuccessfully, but that no response body is needed.\n\nNote: Database management is not supported for Redis clusters.\n",
        "tags": [
          "Databases"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/database_cluster_uuid"
          },
          {
            "$ref": "#/components/parameters/database_name"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/no_content"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X DELETE \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  \"https://api.digitalocean.com/v2/databases/9cc10173-e9ea-4176-9dbc-a4cee4c4ff30/dbs/alpha\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"os\"\n\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n    client := godo.NewFromToken(token)\n    ctx := context.TODO()\n\n    _, err := client.Databases.DeleteDB(ctx, \"9cc10173-e9ea-4176-9dbc-a4cee4c4ff30\", \"alpha\")\n}"
          }
        ]
      }
    },
    "/v2/databases/{database_cluster_uuid}/pools": {
      "get": {
        "operationId": "list_connection_pools",
        "summary": "List Connection Pools (PostgreSQL)",
        "description": "To list all of the connection pools available to a PostgreSQL database cluster, send a GET request to `/v2/databases/$DATABASE_ID/pools`.\nThe result will be a JSON object with a `pools` key. This will be set to an array of connection pool objects.",
        "tags": [
          "Databases"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/database_cluster_uuid"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/connection_pools"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X GET /\n-H \"Content-Type: application/json\" /\n-H \"Authorization: Bearer b7d03a6947b217efb6f3ec3bd3504582\" /\n\"https://api.digitalocean.com/v2/databases/9cc10173-e9ea-4176-9dbc-a4cee4c4ff30/pools\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    pat := \"mytoken\"\n\n    client := godo.NewFromToken(pat)\n    ctx := context.TODO()\n\n    pools, _, err := client.Databases.ListPools(ctx, \"9cc10173-e9ea-4176-9dbc-a4cee4c4ff30\", nil)\n}"
          }
        ]
      },
      "post": {
        "operationId": "add_connection_pool",
        "summary": "Add a New Connection Pool (PostgreSQL)",
        "description": "For PostgreSQL database clusters, connection pools can be used to allow a\ndatabase to share its idle connections. The popular PostgreSQL connection\npooling utility PgBouncer is used to provide this service. [See here for more information](https://www.digitalocean.com/docs/databases/postgresql/how-to/manage-connection-pools/)\nabout how and why to use PgBouncer connection pooling including\ndetails about the available transaction modes.\n\nTo add a new connection pool to a PostgreSQL database cluster, send a POST\nrequest to `/v2/databases/$DATABASE_ID/pools` specifying a name for the pool,\nthe user to connect with, the database to connect to, as well as its desired\nsize and transaction mode.\n",
        "tags": [
          "Databases"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/database_cluster_uuid"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/connection_pool"
              },
              "example": {
                "name": "backend-pool",
                "mode": "transaction",
                "size": 10,
                "db": "defaultdb",
                "user": "doadmin"
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/connection_pool"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Authorization: Bearer b7d03a6947b217efb6f3ec3bd3504582\" \\\n-d '{\"name\": \"backend-pool\",\"mode\": \"transaction\",\"size\": 10,\"db\": \"defaultdb\",\"user\": \"doadmin\"}' \\\n\"https://api.digitalocean.com/v2/databases/9cc10173-e9ea-4176-9dbc-a4cee4c4ff30/pools\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    pat := \"mytoken\"\n\n    client := godo.NewFromToken(pat)\n    ctx := context.TODO()\n\n    createPoolReq := &godo.DatabaseCreatePoolRequest{\n        Name:     \"backend-pool\",\n        Database: \"defaultdb\",\n        Size:     10,\n        User:     \"doadmin\",\n        Mode:     \"transaction\",\n    }\n\n    pool, _, err := client.Databases.CreatePool(ctx, \"9cc10173-e9ea-4176-9dbc-a4cee4c4ff30\", createPoolReq)\n}"
          }
        ]
      }
    },
    "/v2/databases/{database_cluster_uuid}/pools/{pool_name}": {
      "get": {
        "operationId": "get_connection_pool",
        "summary": "Retrieve Existing Connection Pool (PostgreSQL)",
        "description": "To show information about an existing connection pool for a PostgreSQL database cluster, send a GET request to `/v2/databases/$DATABASE_ID/pools/$POOL_NAME`.\nThe response will be a JSON object with a `pool` key.",
        "tags": [
          "Databases"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/database_cluster_uuid"
          },
          {
            "$ref": "#/components/parameters/pool_name"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/connection_pool"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X GET /\n-H \"Content-Type: application/json\" /\n-H \"Authorization: Bearer b7d03a6947b217efb6f3ec3bd3504582\" /\n\"https://api.digitalocean.com/v2/databases/9cc10173-e9ea-4176-9dbc-a4cee4c4ff30/pools/backend-pool\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    pat := \"mytoken\"\n\n    client := godo.NewFromToken(pat)\n    ctx := context.TODO()\n\n    pool, _, err := client.Databases.GetPool(ctx, \"9cc10173-e9ea-4176-9dbc-a4cee4c4ff30\", \"backend-pool\")\n}"
          }
        ]
      },
      "delete": {
        "operationId": "delete_connection_pool",
        "summary": "Delete a Connection Pool (PostgreSQL)",
        "description": "To delete a specific connection pool for a PostgreSQL database cluster, send\na DELETE request to `/v2/databases/$DATABASE_ID/pools/$POOL_NAME`.\n\nA status of 204 will be given. This indicates that the request was processed\nsuccessfully, but that no response body is needed.\n",
        "tags": [
          "Databases"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/database_cluster_uuid"
          },
          {
            "$ref": "#/components/parameters/pool_name"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/no_content"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X GET \\\n-H \"Content-Type: application/json\" \\\n-H \"Authorization: Bearer b7d03a6947b217efb6f3ec3bd3504582\" \\\n\"https://api.digitalocean.com/v2/databases/9cc10173-e9ea-4176-9dbc-a4cee4c4ff30/pools/backend-pool\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    pat := \"mytoken\"\n\n    client := godo.NewFromToken(pat)\n    ctx := context.TODO()\n\n    _, err := client.Databases.DeletePool(ctx, \"9cc10173-e9ea-4176-9dbc-a4cee4c4ff30\", \"backend-pool\")\n}"
          }
        ]
      }
    },
    "/v2/databases/{database_cluster_uuid}/eviction_policy": {
      "get": {
        "operationId": "get_eviction_policy",
        "summary": "Retrieve the Eviction Policy for a Redis Cluster",
        "description": "To retrieve the configured eviction policy for an existing Redis cluster, send a GET request to `/v2/databases/$DATABASE_ID/eviction_policy`.\nThe response will be a JSON object with an `eviction_policy` key. This will be set to a string representing the eviction policy.",
        "tags": [
          "Databases"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/database_cluster_uuid"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/eviction_policy"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  \"https://api.digitalocean.com/v2/databases/9cdb64e5-61e4-4b30-b711-11ef66d84558/eviction_policy\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"os\"\n\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n    client := godo.NewFromToken(token)\n    ctx := context.TODO()\n\n    db, _, err := client.Databases.GetEvictionPolicy(ctx, \"9cc10173-e9ea-4176-9dbc-a4cee4c4ff30\")\n}"
          }
        ]
      },
      "put": {
        "operationId": "update_eviction_policy",
        "summary": "Configure the Eviction Policy for a Redis Cluster",
        "description": "To configure an eviction policy for an existing Redis cluster, send a PUT request to `/v2/databases/$DATABASE_ID/eviction_policy` specifying the desired policy.",
        "tags": [
          "Databases"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/database_cluster_uuid"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/eviction_policy"
              },
              "example": {
                "eviction_policy": "allkeys_lru"
              }
            }
          }
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/no_content"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X PUT \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  -d '{\"eviction_policy\":\"allkeys_lru\"}' \\\n  \"https://api.digitalocean.com/v2/databases/9cdb64e5-61e4-4b30-b711-11ef66d84558/eviction_policy\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"os\"\n\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n    client := godo.NewFromToken(token)\n    ctx := context.TODO()\n\n    db, _, err := client.Databases.SetEvictionPolicy(ctx, \"9cc10173-e9ea-4176-9dbc-a4cee4c4ff30\", \"allkeys_lru\")\n}"
          }
        ]
      }
    },
    "/v2/databases/{database_cluster_uuid}/sql_mode": {
      "get": {
        "operationId": "get_sql_mode",
        "summary": "Retrieve the SQL Modes for a MySQL Cluster",
        "description": "To retrieve the configured SQL modes for an existing MySQL cluster, send a GET request to `/v2/databases/$DATABASE_ID/sql_mode`.\nThe response will be a JSON object with a `sql_mode` key. This will be set to a string representing the configured SQL modes.",
        "tags": [
          "Databases"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/database_cluster_uuid"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/sql_mode"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  \"https://api.digitalocean.com/v2/databases/9cdb64e5-61e4-4b30-b711-11ef66d84558/sql_mode\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"os\"\n\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n    client := godo.NewFromToken(token)\n    ctx := context.TODO()\n\n    sqlMode, _, err := client.Databases.GetSQLMode(ctx, \"9cc10173-e9ea-4176-9dbc-a4cee4c4ff30\")\n}"
          }
        ]
      },
      "put": {
        "operationId": "update_sql_mode",
        "summary": "Update SQL Mode for a Cluster",
        "description": "To configure the SQL modes for an existing MySQL cluster, send a PUT request to `/v2/databases/$DATABASE_ID/sql_mode` specifying the desired modes. See the official MySQL 8 documentation for a [full list of supported SQL modes](https://dev.mysql.com/doc/refman/8.0/en/sql-mode.html#sql-mode-full).\nA successful request will receive a 204 No Content status code with no body in response.",
        "tags": [
          "Databases"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/database_cluster_uuid"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/sql_mode"
              },
              "example": {
                "sql_mode": "ANSI,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION,NO_ZERO_DATE,NO_ZERO_IN_DATE"
              }
            }
          }
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/no_content"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X PUT \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  -d '{\"sql_mode\":\"ANSI,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION,NO_ZERO_DATE,NO_ZERO_IN_DATE\"}' \\\n  \"https://api.digitalocean.com/v2/databases/9cdb64e5-61e4-4b30-b711-11ef66d84558/sql_mode\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"os\"\n\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n    client := godo.NewFromToken(token)\n    ctx := context.TODO()\n\n    sqlMode := \"ANSI,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION,NO_ZERO_DATE,NO_ZERO_IN_DATE\"\n    _, err := client.Databases.SetSQLMode(ctx, \"9cc10173-e9ea-4176-9dbc-a4cee4c4ff30\", sqlMode)\n}"
          }
        ]
      }
    },
    "/v2/domains": {
      "get": {
        "operationId": "list_all_domains",
        "summary": "List All Domains",
        "description": "To retrieve a list of all of the domains in your account, send a GET request to `/v2/domains`.",
        "tags": [
          "Domains"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/all_domains_response"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  \"https://api.digitalocean.com/v2/domains\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"os\"\n\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n    client := godo.NewFromToken(token)\n    ctx := context.TODO()\n\n    opt := &godo.ListOptions{\n      Page:    1,\n      PerPage: 200,\n    }\n\ndomains, _, err := client.Domains.List(ctx, opt)\n}"
          },
          {
            "lang": "Ruby",
            "source": "require 'droplet_kit'\ntoken = ENV['DIGITALOCEAN_TOKEN']\nclient = DropletKit::Client.new(access_token: token)\n\ndomains = client.domains.all\ndomains.each"
          }
        ]
      },
      "post": {
        "operationId": "create_domain",
        "summary": "Create a New Domain",
        "description": "To create a new domain, send a POST request to `/v2/domains`. Set the \"name\"\nattribute to the domain name you are adding. Optionally, you may set the\n\"ip_address\" attribute, and an A record will be automatically created pointing\nto the apex domain.\n",
        "tags": [
          "Domains"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domain"
              },
              "example": {
                "name": "example.com"
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/create_domain_response"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  -d '{\"name\":\"example.com\",\"ip_address\":\"1.2.3.4\"}' \\\n  \"https://api.digitalocean.com/v2/domains\""
          },
          {
            "lang": "Go",
            "source": "import (\n  \"context\"\n  \"os\"\n\n  \"github.com/digitalocean/godo\"\n  )\n\nfunc main() {\n  token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n  client := godo.NewFromToken(token)\n  ctx := context.TODO()\n\n  createRequest := &godo.DomainCreateRequest{\n    Name:      \"example.com\",\n    IPAddress: \"1.2.3.4\",\n  }\n\n  domain, _, err := client.Domains.Create(ctx, createRequest)\n\n}"
          },
          {
            "lang": "Ruby",
            "source": "require 'droplet_kit'\ntoken = ENV['DIGITALOCEAN_TOKEN']\nclient = DropletKit::Client.new(access_token: token)\n\ndomain = DropletKit::Domain.new(\n  name: 'example.com',\n  ip_address: '1.2.3.4'\n)\nclient.domains.create(domain)"
          }
        ]
      }
    },
    "/v2/domains/{domain_name}": {
      "get": {
        "operationId": "get_domain",
        "summary": "Retrieve an Existing Domain",
        "description": "To get details about a specific domain, send a GET request to `/v2/domains/$DOMAIN_NAME`.",
        "tags": [
          "Domains"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/domain_name"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/existing_domain"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  \"https://api.digitalocean.com/v2/domains/example.com\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"os\"\n\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n    client := godo.NewFromToken(token)\n    ctx := context.TODO()\n\n    domain, _, err := client.Domains.Get(ctx, \"example.com\")\n}"
          },
          {
            "lang": "Ruby",
            "source": "require 'droplet_kit'\ntoken = ENV['DIGITALOCEAN_TOKEN']\nclient = DropletKit::Client.new(access_token: token)\n\nclient.domains.find(name: 'example.com')"
          }
        ]
      },
      "delete": {
        "operationId": "delete_domain",
        "summary": "Delete a Domain",
        "description": "To delete a domain, send a DELETE request to `/v2/domains/$DOMAIN_NAME`.\n",
        "tags": [
          "Domains"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/domain_name"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/no_content"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X DELETE \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  \"https://api.digitalocean.com/v2/domains/example.com\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"os\"\n\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n    client := godo.NewFromToken(token)\n    ctx := context.TODO()\n\n    _, err := client.Domains.Delete(ctx, \"example.com\")\n}"
          },
          {
            "lang": "Ruby",
            "source": "require 'droplet_kit'\ntoken = ENV['DIGITALOCEAN_TOKEN']\nclient = DropletKit::Client.new(access_token: token)\n\nclient.domains.delete(name: 'example.com')"
          }
        ]
      }
    },
    "/v2/domains/{domain_name}/records": {
      "get": {
        "operationId": "list_all_domain_records",
        "summary": "List All Domain Records",
        "description": "To get a listing of all records configured for a domain, send a GET request to `/v2/domains/$DOMAIN_NAME/records`.\nThe list of records returned can be filtered by using the `name` and `type` query parameters. For example, to only include A records for a domain, send a GET request to `/v2/domains/$DOMAIN_NAME/records?type=A`. `name` must be a fully qualified record name. For example, to only include records matching `sub.example.com`, send a GET request to `/v2/domains/$DOMAIN_NAME/records?name=sub.example.com`. Both name and type may be used together.\n\n",
        "tags": [
          "Domain Records"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/domain_name"
          },
          {
            "$ref": "#/components/parameters/domain_name_query"
          },
          {
            "$ref": "#/components/parameters/domain_type_query"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/all_domain_records_response"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  \"https://api.digitalocean.com/v2/domains/example.com/records\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"os\"\n\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n    client := godo.NewFromToken(token)\n    ctx := context.TODO()\n\n    opt := &godo.ListOptions{\n      Page:    1,\n      PerPage: 200,\n    }\n\ndomains, _, err := client.Domains.List(ctx, opt)\n}"
          },
          {
            "lang": "Ruby",
            "source": "require 'droplet_kit'\ntoken = ENV['DIGITALOCEAN_TOKEN']\nclient = DropletKit::Client.new(access_token: token)\n\nrecords = client.domain_records.all(for_domain: 'example.com')\nrecords.each"
          }
        ]
      },
      "post": {
        "operationId": "create_domain_record",
        "summary": "Create a New Domain Record",
        "description": "To create a new record to a domain, send a POST request to\n`/v2/domains/$DOMAIN_NAME/records`.\n\nThe request must include all of the required fields for the domain record type\nbeing added.\n\nSee the [attribute table](#tag/Domain-Records) for details regarding record\ntypes and their respective required attributes.\n",
        "tags": [
          "Domain Records"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/domain_name"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/domain_record_a"
                  },
                  {
                    "$ref": "#/components/schemas/domain_record_aaaa"
                  },
                  {
                    "$ref": "#/components/schemas/domain_record_caa"
                  },
                  {
                    "$ref": "#/components/schemas/domain_record_cname"
                  },
                  {
                    "$ref": "#/components/schemas/domain_record_mx"
                  },
                  {
                    "$ref": "#/components/schemas/domain_record_ns"
                  },
                  {
                    "$ref": "#/components/schemas/domain_record_soa"
                  },
                  {
                    "$ref": "#/components/schemas/domain_record_srv"
                  },
                  {
                    "$ref": "#/components/schemas/domain_record_txt"
                  }
                ],
                "discriminator": {
                  "propertyName": "type",
                  "mapping": {
                    "A": "#/components/schemas/domain_record_a",
                    "AAAA": "#/components/schemas/domain_record_aaaa",
                    "CAA": "#/components/schemas/domain_record_caa",
                    "CNAME": "#/components/schemas/domain_record_cname",
                    "MX": "#/components/schemas/domain_record_mx",
                    "NS": "#/components/schemas/domain_record_ns",
                    "SOA": "#/components/schemas/domain_record_soa",
                    "SRV": "#/components/schemas/domain_record_srv",
                    "TXT": "#/components/schemas/domain_record_txt"
                  }
                }
              },
              "example": {
                "type": "A",
                "name": "www",
                "data": "162.10.66.0",
                "priority": null,
                "port": null,
                "ttl": 1800,
                "weight": null,
                "flags": null,
                "tag": null
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/created_domain_record"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  -d '{\"type\":\"A\",\"name\":\"www\",\"data\":\"162.10.66.0\",\"priority\":null,\"port\":null,\"ttl\":1800,\"weight\":null,\"flags\":null,\"tag\":null}' \\\n  \"https://api.digitalocean.com/v2/domains/example.com/records\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"os\"\n\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n    client := godo.NewFromToken(token)\n    ctx := context.TODO()\n\n    createRequest := &godo.DomainRecordEditRequest{\n      Type: \"A\",\n      Name: \"www\",\n      Data: \"1.2.3.4\",\n    }\n\n    domainRecord, _, err := client.Domains.CreateRecord(ctx, \"example.com\", createRequest)\n}"
          },
          {
            "lang": "Ruby",
            "source": "require 'droplet_kit'\ntoken = ENV['DIGITALOCEAN_TOKEN']\nclient = DropletKit::Client.new(access_token: token)\n\nrecord = DropletKit::DomainRecord.new(\n  type: 'A',\n  name: 'www',\n  data: '162.10.66.0'\n)\nclient.domain_records.create(record, for_domain: 'example.com')"
          }
        ]
      }
    },
    "/v2/domains/{domain_name}/records/{domain_record_id}": {
      "get": {
        "operationId": "get_domain_record",
        "summary": "Retrieve an Existing Domain Record",
        "description": "To retrieve a specific domain record, send a GET request to `/v2/domains/$DOMAIN_NAME/records/$RECORD_ID`.",
        "tags": [
          "Domain Records"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/domain_name"
          },
          {
            "$ref": "#/components/parameters/domain_record_id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/domain_record"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  \"https://api.digitalocean.com/v2/domains/example.com/records/3352896\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"os\"\n\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n    client := godo.NewFromToken(token)\n    ctx := context.TODO()\n\n    record, _, err := client.Domains.Record(ctx, \"example.com\", 3352896)\n}"
          },
          {
            "lang": "Ruby",
            "source": "require 'droplet_kit'\ntoken = ENV['DIGITALOCEAN_TOKEN']\nclient = DropletKit::Client.new(access_token: token)\n\nclient.domain_records.find(for_domain: 'example.com', id: 3352896)"
          }
        ]
      },
      "patch": {
        "operationId": "patch_update_domain_record",
        "summary": "Update a Domain Record",
        "description": "To update an existing record, send a PATCH request to\n`/v2/domains/$DOMAIN_NAME/records/$DOMAIN_RECORD_ID`. Any attribute valid for\nthe record type can be set to a new value for the record.\n\nSee the [attribute table](#tag/Domain-Records) for details regarding record\ntypes and their respective attributes.\n",
        "tags": [
          "Domain Records"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/domain_name"
          },
          {
            "$ref": "#/components/parameters/domain_record_id"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domain_record"
              },
              "example": {
                "name": "blog",
                "type": "A"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/domain_record"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        }
      },
      "put": {
        "operationId": "update_domain_record",
        "summary": "Update a Domain Record",
        "description": "To update an existing record, send a PUT request to\n`/v2/domains/$DOMAIN_NAME/records/$DOMAIN_RECORD_ID`. Any attribute valid for\nthe record type can be set to a new value for the record.\n\nSee the [attribute table](#tag/Domain-Records) for details regarding record\ntypes and their respective attributes.\n",
        "tags": [
          "Domain Records"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/domain_name"
          },
          {
            "$ref": "#/components/parameters/domain_record_id"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domain_record"
              },
              "example": {
                "name": "blog",
                "type": "CNAME"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/domain_record"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X PUT \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  -d '{\"name\":\"blog\"}' \\\n  \"https://api.digitalocean.com/v2/domains/example.com/records/3352896\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"os\"\n\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n    client := godo.NewFromToken(token)\n    ctx := context.TODO()\n\n    editRequest := &godo.DomainRecordEditRequest{\n      Type: \"A\",\n      Name: \"blog\",\n    }\n\n    domainRecord, _, err := client.Domains.EditRecord(ctx, \"example.com\", 3352896, editRequest)\n}"
          },
          {
            "lang": "Ruby",
            "source": "require 'droplet_kit'\ntoken = ENV['DIGITALOCEAN_TOKEN']\nclient = DropletKit::Client.new(access_token: token)\n\nrecord = DropletKit::DomainRecord.new(name: 'blog')\nclient.domain_records.update(record, for_domain: 'example.com', id: 3352896)"
          }
        ]
      },
      "delete": {
        "operationId": "delete_domain_record",
        "summary": "Delete a Domain Record",
        "description": "To delete a record for a domain, send a DELETE request to\n`/v2/domains/$DOMAIN_NAME/records/$DOMAIN_RECORD_ID`.\n\nThe record will be deleted and the response status will be a 204. This\nindicates a successful request with no body returned.\n",
        "tags": [
          "Domain Records"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/domain_name"
          },
          {
            "$ref": "#/components/parameters/domain_record_id"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/no_content"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X DELETE \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  \"https://api.digitalocean.com/v2/domains/example.com/records/3352896\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"os\"\n\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n    client := godo.NewFromToken(token)\n    ctx := context.TODO()\n\n    _, err := client.Domains.DeleteRecord(ctx, \"example.com\", 3352896)\n}"
          },
          {
            "lang": "Ruby",
            "source": "require 'droplet_kit'\ntoken = ENV['DIGITALOCEAN_TOKEN']\nclient = DropletKit::Client.new(access_token: token)\n\nclient.domain_records.delete(for_domain: 'example.com', id: 3352896)"
          }
        ]
      }
    },
    "/v2/droplets": {
      "get": {
        "operationId": "list_all_droplets",
        "summary": "List All Droplets",
        "description": "To list all Droplets in your account, send a GET request to `/v2/droplets`.\n\nThe response body will be a JSON object with a key of `droplets`. This will be\nset to an array containing objects each representing a Droplet. These will\ncontain the standard Droplet attributes.\n\n\n\nIt's possible to request filtered results by including certain query parameters.\nTo only list Droplets assigned to a specific tag, include the `tag_name` query\nparameter set to the name of the tag in your GET request. For example,\n`/v2/droplets?tag_name=$TAG_NAME`.\n",
        "tags": [
          "Droplets"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/droplet_tag_name"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/all_droplets"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  \"https://api.digitalocean.com/v2/droplets?page=1&per_page=1\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"os\"\n\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n    client := godo.NewFromToken(token)\n    ctx := context.TODO()\n\n    opt := &godo.ListOptions{\n        Page:    1,\n        PerPage: 200,\n    }\n\n    droplets, _, err := client.Droplets.List(ctx, opt)\n}"
          },
          {
            "lang": "Ruby",
            "source": "require 'droplet_kit'\ntoken = ENV['DIGITALOCEAN_TOKEN']\nclient = DropletKit::Client.new(access_token: token)\n\ndroplets = client.droplets.all\ndroplets.each"
          }
        ]
      },
      "post": {
        "operationId": "create_droplet",
        "summary": "Create a New Droplet",
        "description": "To create a new Droplet, send a POST request to `/v2/droplets` setting the\nrequired attributes.\n\nA Droplet will be created using the provided information. The response body\nwill contain a JSON object with a key called `droplet`. The value will be an\nobject containing the standard attributes for your new Droplet. The response\ncode, 202 Accepted, does not indicate the success or failure of the operation,\njust that the request has been accepted for processing. The `actions` returned\nas part of the response's `links` object can be used to check the status\nof the Droplet create event.\n\n\n\nCreating multiple Droplets is very similar to creating a single Droplet.\nInstead of sending `name` as a string, send `names` as an array of strings. A\nDroplet will be created for each name you send using the associated\ninformation. Up to ten Droplets may be created this way at a time.\n\nRather than returning a single Droplet, the response body will contain a JSON\narray with a key called `droplets`. This will be set to an array of JSON\nobjects, each of which will contain the standard Droplet attributes. The\nresponse code, 202 Accepted, does not indicate the success or failure of any\noperation, just that the request has been accepted for processing. The array\nof `actions` returned as part of the response's `links` object can be used to\ncheck the status of each individual Droplet create event.\n",
        "tags": [
          "Droplets"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/droplet_single_create"
                  },
                  {
                    "$ref": "#/components/schemas/droplet_multi_create"
                  }
                ]
              },
              "examples": {
                "Single Droplet Create Request": {
                  "$ref": "#/components/examples/droplet_create_request"
                },
                "Multiple Droplet Create Request": {
                  "$ref": "#/components/examples/droplet_multi_create_request"
                }
              }
            }
          }
        },
        "responses": {
          "202": {
            "$ref": "#/components/responses/droplet_create"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  -d '{\"name\":\"example.com\",\"region\":\"nyc3\",\"size\":\"s-1vcpu-1gb\",\"image\":\"ubuntu-16-04-x64\",\"ssh_keys\":[107149],\"backups\":false,\"ipv6\":true,\"user_data\":null,\"private_networking\":null,\"volumes\": null,\"tags\":[\"web\"]}' \\\n  \"https://api.digitalocean.com/v2/droplets\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"os\"\n\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n    client := godo.NewFromToken(token)\n    ctx := context.TODO()\n\n    createRequest := &godo.DropletCreateRequest{\n        Name:   \"example.com\",\n        Region: \"nyc3\",\n        Size:   \"s-1vcpu-1gb\",\n        Image: godo.DropletCreateImage{\n            Slug: \"ubuntu-16-04-x64\",\n        },\n        SSHKeys: []godo.DropletCreateSSHKey{\n            godo.DropletCreateSSHKey{ID: 107149},\n        },\n        IPv6: true,\n        Tags: []string{\"web\"},\n    }\n}"
          },
          {
            "lang": "Ruby",
            "source": "require 'droplet_kit'\ntoken = ENV['DIGITALOCEAN_TOKEN']\nclient = DropletKit::Client.new(access_token: token)\n\ndroplet = DropletKit::Droplet.new(\n  name: 'example.com',\n  region: 'nyc3',\n  size: 's-1vcpu-1gb',\n  image: 'ubuntu-16-04-x64',\n  ssh_keys: [107149],\n  ipv6: true,\n  tags: [\"web\"]\n)\nclient.droplets.create(droplet)"
          }
        ]
      },
      "delete": {
        "operationId": "destroy_droplets_by_tag",
        "summary": "Deleting Droplets by Tag",
        "description": "To delete **all** Droplets assigned to a specific tag, include the `tag_name`\nquery parameter set to the name of the tag in your DELETE request. For\nexample,  `/v2/droplets?tag_name=$TAG_NAME`.\n\nA successful request will receive a 204 status code with no body in response.\nThis indicates that the request was processed successfully.\n",
        "tags": [
          "Droplets"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/droplet_delete_tag_name"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/no_content"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X DELETE \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  \"https://api.digitalocean.com/v2/droplets?tag_name=awesome\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"os\"\n\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n    client := godo.NewFromToken(token)\n    ctx := context.TODO()\n\n    client.Droplets.DeleteByTag(ctx, \"awesome\") \n}"
          },
          {
            "lang": "Ruby",
            "source": "require 'droplet_kit'\ntoken = ENV['DIGITALOCEAN_TOKEN']\nclient = DropletKit::Client.new(access_token: token)\n\nclient.droplets.delete_for_tag(tag_name: awesome)"
          }
        ]
      }
    },
    "/v2/droplets/{droplet_id}": {
      "get": {
        "operationId": "get_droplet",
        "summary": "Retrieve an Existing Droplet",
        "description": "To show information about an individual Droplet, send a GET request to\n`/v2/droplets/$DROPLET_ID`.\n",
        "tags": [
          "Droplets"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/droplet_id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/existing_droplet"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  \"https://api.digitalocean.com/v2/droplets/3164494\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"os\"\n\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n    client := godo.NewFromToken(token)\n    ctx := context.TODO()\n\n    droplet, _, err := client.Droplets.Get(ctx, 3164494)\n}"
          },
          {
            "lang": "Ruby",
            "source": "require 'droplet_kit'\ntoken = ENV['DIGITALOCEAN_TOKEN']\nclient = DropletKit::Client.new(access_token: token)\n\nclient.droplets.find(id: 3164494)"
          }
        ]
      },
      "delete": {
        "operationId": "destroy_droplet",
        "summary": "Delete an Existing Droplet",
        "description": "To delete a Droplet, send a DELETE request to `/v2/droplets/$DROPLET_ID`.\n\nA successful request will receive a 204 status code with no body in response.\nThis indicates that the request was processed successfully.\n",
        "tags": [
          "Droplets"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/droplet_id"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/no_content"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X DELETE \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  \"https://api.digitalocean.com/v2/droplets/3164494\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"os\"\n\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n    client := godo.NewFromToken(token)\n    ctx := context.TODO()\n\n    _, err := client.Droplets.Delete(ctx, 3164494)\n}"
          },
          {
            "lang": "Ruby",
            "source": "require 'droplet_kit'\ntoken = ENV['DIGITALOCEAN_TOKEN']\nclient = DropletKit::Client.new(access_token: token)\n\nclient.droplets.delete(id: 3164494)"
          }
        ]
      }
    },
    "/v2/droplets/{droplet_id}/backups": {
      "get": {
        "operationId": "list_droplet_backups",
        "summary": "List Backups for a Droplet",
        "description": "To retrieve any backups associated with a Droplet, send a GET request to\n`/v2/droplets/$DROPLET_ID/backups`.\n\nYou will get back a JSON object that has a `backups` key. This will be set to\nan array of backup objects, each of which contain the standard\nDroplet backup attributes.\n",
        "tags": [
          "Droplets"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/droplet_id"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/all_droplet_backups"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  \"https://api.digitalocean.com/v2/droplets/3067509/backups\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"os\"\n\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n    client := godo.NewFromToken(token)\n    ctx := context.TODO()\n\n    opt := &godo.ListOptions{\n        Page:    1,\n        PerPage: 200,\n    }\n\n    backups, _, err := client.Droplets.Backups(ctx, 3164494, opt)\n}"
          },
          {
            "lang": "Ruby",
            "source": "require 'droplet_kit'\ntoken = ENV['DIGITALOCEAN_TOKEN']\nclient = DropletKit::Client.new(access_token: token)\n\nbackups = client.droplets.backups(id: 3164494)\nbackups.each"
          }
        ]
      }
    },
    "/v2/droplets/{droplet_id}/snapshots": {
      "get": {
        "operationId": "list_droplet_snapshots",
        "summary": "List Snapshots for a Droplet",
        "description": "To retrieve the snapshots that have been created from a Droplet, send a GET\nrequest to `/v2/droplets/$DROPLET_ID/snapshots`.\n\nYou will get back a JSON object that has a `snapshots` key. This will be set\nto an array of snapshot objects, each of which contain the standard Droplet\nsnapshot attributes.\n",
        "tags": [
          "Droplets"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/droplet_id"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/all_droplet_snapshots"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  \"https://api.digitalocean.com/v2/droplets/3164494/snapshots?page=1&per_page=1\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"os\"\n\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n    client := godo.NewFromToken(token)\n    ctx := context.TODO()\n\n    opt := &godo.ListOptions{\n        Page:    1,\n        PerPage: 200,\n    }\n\n    snapshots, _, err := client.Droplets.Snapshots(ctx, 3164494, opt)\n}"
          },
          {
            "lang": "Ruby",
            "source": "require 'droplet_kit'\ntoken = ENV['DIGITALOCEAN_TOKEN']\nclient = DropletKit::Client.new(access_token: token)\n\nsnapshots = client.droplets.snapshots(id: 3164494)\nsnapshots.each"
          }
        ]
      }
    },
    "/v2/droplets/{droplet_id}/actions": {
      "get": {
        "operationId": "list_droplet_actions",
        "summary": "List Actions for a Droplet",
        "description": "To retrieve a list of all actions that have been executed for a Droplet, send\na GET request to `/v2/droplets/$DROPLET_ID/actions`.\n\nThe results will be returned as a JSON object with an `actions` key. This will\nbe set to an array filled with `action` objects containing the standard\n`action` attributes.\n",
        "tags": [
          "Droplet Actions"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/droplet_id"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/all_droplet_actions"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  \"https://api.digitalocean.com/v2/droplets/3164494/actions?page=1&per_page=1\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"os\"\n\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n    client := godo.NewFromToken(token)\n    ctx := context.TODO()\n\n    opt := &godo.ListOptions{\n        Page:    1,\n        PerPage: 200,\n    }\n\n    actions, _, err := client.Droplets.Actions(ctx, 3164494, opt)\n}"
          },
          {
            "lang": "Ruby",
            "source": "require 'droplet_kit'\ntoken = ENV['DIGITALOCEAN_TOKEN']\nclient = DropletKit::Client.new(access_token: token)\n\nactions = client.droplets.actions(id: 3164494)\nactions.each"
          }
        ]
      },
      "post": {
        "operationId": "post_droplet_action",
        "summary": "Initiate a Droplet Action",
        "description": "To initiate an action on a Droplet send a POST request to\n`/v2/droplets/$DROPLET_ID/actions`. In the JSON body to the request,\nset the `type` attribute to on of the supported action types:\n\n| Action                                   | Details |\n| ---------------------------------------- | ----------- |\n| <nobr>`enable_backups`</nobr>            | Enables backups for a Droplet |\n| <nobr>`disable_backups`</nobr>           | Disables backups for a Droplet |\n| <nobr>`reboot`</nobr>                    | Reboots a Droplet. A `reboot` action is an attempt to reboot the Droplet in a graceful way, similar to using the `reboot` command from the console. |\n| <nobr>`power_cycle`</nobr>               | Power cycles a Droplet. A `powercycle` action is similar to pushing the reset button on a physical machine, it's similar to booting from scratch. |\n| <nobr>`shutdown`</nobr>                  | Shutsdown a Droplet. A shutdown action is an attempt to shutdown the Droplet in a graceful way, similar to using the `shutdown` command from the console. Since a `shutdown` command can fail, this action guarantees that the command is issued, not that it succeeds. The preferred way to turn off a Droplet is to attempt a shutdown, with a reasonable timeout, followed by a `power_off` action to ensure the Droplet is off. |\n| <nobr>`power_off`</nobr>                 | Powers off a Droplet. A `power_off` event is a hard shutdown and should only be used if the `shutdown` action is not successful. It is similar to cutting the power on a server and could lead to complications. |\n| <nobr>`power_on`</nobr>                  | Powers on a Droplet. |\n| <nobr>`restore`</nobr>                   | Restore a Droplet using a backup image. The image ID that is passed in must be a backup of the current Droplet instance. The operation will leave any embedded SSH keys intact. |\n| <nobr>`password_reset`</nobr>            | Resets the root password for a Droplet. A new password will be provided via email. It must be changed after first use. |\n| <nobr>`resize`</nobr>                    | Resizes a Droplet. Set the `size` attribute to a size slug. If a permanent resize with disk changes included is desired, set the `disk` attribute to `true`. |\n| <nobr>`rebuild`</nobr>                   | Rebuilds a Droplet from a new base image. Set the `image` attribute to an image ID or slug. |\n| <nobr>`rename`</nobr>                    | Renames a Droplet. |\n| <nobr>`change_kernel`</nobr>             | Changes a Droplet's kernel. Only applies to Droplets with externally managed kernels. All Droplets created after March 2017 use internal kernels by default. |\n| <nobr>`enable_ipv6`</nobr>               | Enables IPv6 for a Droplet. |\n| <nobr>`snapshot`</nobr>                  | Takes a snapshot of a Droplet. |\n",
        "tags": [
          "Droplet Actions"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/droplet_id"
          }
        ],
        "requestBody": {
          "description": "The `type` attribute set in the request body will specify the  action that\nwill be taken on the Droplet. Some actions will require additional\nattributes to be set as well.\n",
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/droplet_action_type"
                  },
                  {
                    "$ref": "#/components/schemas/droplet_action_restore"
                  },
                  {
                    "$ref": "#/components/schemas/droplet_action_resize"
                  },
                  {
                    "$ref": "#/components/schemas/droplet_action_rebuild"
                  },
                  {
                    "$ref": "#/components/schemas/droplet_action_rename"
                  },
                  {
                    "$ref": "#/components/schemas/droplet_action_change_kernel"
                  },
                  {
                    "$ref": "#/components/schemas/droplet_action_snapshot"
                  }
                ],
                "discriminator": {
                  "propertyName": "type",
                  "mapping": {
                    "enable_backups": "#/components/schemas/droplet_action_type",
                    "disable_backups": "#/components/schemas/droplet_action_type",
                    "reboot": "#/components/schemas/droplet_action_type",
                    "power_cycle": "#/components/schemas/droplet_action_type",
                    "shutdown": "#/components/schemas/droplet_action_type",
                    "power_off": "#/components/schemas/droplet_action_type",
                    "power_on": "#/components/schemas/droplet_action_type",
                    "password_reset": "#/components/schemas/droplet_action_type",
                    "restore": "#/components/schemas/droplet_action_restore",
                    "resize": "#/components/schemas/droplet_action_resize",
                    "rebuild": "#/components/schemas/droplet_action_rebuild",
                    "rename": "#/components/schemas/droplet_action_rename",
                    "change_kernel": "#/components/schemas/droplet_action_change_kernel",
                    "enable_ipv6": "#/components/schemas/droplet_action_type",
                    "snapshot": "#/components/schemas/droplet_action_snapshot"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/droplet_action"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  -d '{\"type\":\"enable_backups\"}' \\\n  \"https://api.digitalocean.com/v2/droplets/3164450/actions\"\n\ncurl -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  -d '{\"type\":\"disable_backups\"}' \\\n  \"https://api.digitalocean.com/v2/droplets/3164450/actions\"\n\ncurl -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  -d '{\"type\":\"reboot\"}' \\\n  \"https://api.digitalocean.com/v2/droplets/3164450/actions\"\n\ncurl -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  -d '{\"type\":\"power_cycle\"}' \\\n  \"https://api.digitalocean.com/v2/droplets/3164450/actions\"\n\ncurl -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  -d '{\"type\":\"shutdown\"}' \\\n  \"https://api.digitalocean.com/v2/droplets/3067649/actions\"\n\ncurl -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  -d '{\"type\":\"power_off\"}' \\\n  \"https://api.digitalocean.com/v2/droplets/3164450/actions\"\n\ncurl -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  -d '{\"type\":\"power_on\"}' \\\n  \"https://api.digitalocean.com/v2/droplets/3164450/actions\"\n\ncurl -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  -d '{\"type\":\"restore\", \"image\": 12389723 }' \\\n  \"https://api.digitalocean.com/v2/droplets/3067649/actions\"\n\ncurl -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  -d '{\"type\":\"password_reset\"}' \\\n  \"https://api.digitalocean.com/v2/droplets/3164450/actions\"\n\ncurl -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  -d '{\"type\":\"resize\",\"size\":\"1gb\"}' \\\n  \"https://api.digitalocean.com/v2/droplets/3164450/actions\"\n\ncurl -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  -d '{\"type\":\"rebuild\",\"image\":\"ubuntu-16-04-x64\"}' \\\n  \"https://api.digitalocean.com/v2/droplets/3164450/actions\"\n\ncurl -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  -d '{\"type\":\"rename\",\"name\":\"nifty-new-name\"}' \\\n  \"https://api.digitalocean.com/v2/droplets/3164450/actions\"\n\ncurl -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  -d '{\"type\":\"change_kernel\",\"kernel\":991}' \\\n  \"https://api.digitalocean.com/v2/droplets/3164450/actions\"\n\ncurl -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  -d '{\"type\":\"enable_ipv6\"}' \\\n  \"https://api.digitalocean.com/v2/droplets/3164450/actions\"\n\ncurl -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  -d '{\"type\":\"enable_private_networking\"}' \\\n  \"https://api.digitalocean.com/v2/droplets/3164450/actions\"\n\ncurl -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  -d '{\"type\":\"snapshot\",\"name\":\"Nifty New Snapshot\"}' \\\n  \"https://api.digitalocean.com/v2/droplets/3164450/actions\"\n\ncurl -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  -d '{\"type\":\"enable_backups\"}' \\\n  \"https://api.digitalocean.com/v2/droplets/actions?tag_name=awesome\"\n\ncurl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  \"https://api.digitalocean.com/v2/droplets/3164444/actions/36804807\""
          },
          {
            "lang": "Go",
            "source": "import (    \"context\"\n    \"os\"\n\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {    token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n    client := godo.NewFromToken(token)\n    ctx := context.TODO()\n// Enable Backups    action, _, err := client.DropletActions.EnableBackups(ctx, 3164450)\n\n// Disable Backups\n//  action, _, err := client.DropletActions.DisableBackups(ctx, 3164450)\n\n// Reboot a Droplet\n//  action, _, err := client.DropletActions.Reboot(ctx, 3164450)\n\n// Power Cycle a Droplet\n//  action, _, err := client.DropletActions.PowerCycle(ctx, 3164450)\n\n// Shutdown a Droplet\n//  action, _, err := client.DropletActions.Shutdown(ctx, 3067649)\n\n// Power Off a Droplet\n//  action, _, err := client.DropletActions.PowerOff(ctx, 3164450)\n\n// Power On a Droplet\n//  action, _, err := client.DropletActions.PowerOn(ctx, 3164450)\n\n// Restore a Droplet\n//  action, _, err := client.DropletActions.Restore(ctx, 3164449, 12389723)\n\n// Password Reset a Droplet\n//  action, _, err := client.DropletActions.PasswordReset(ctx, 3164450)\n\n// Resize a Droplet\n//  action, _, err := client.DropletActions.Resize(ctx, 3164450, \"1gb\", true)\n\n// Rebuild a Droplet\n//  action, _, err := client.DropletActions.RebuildByImageSlug(ctx, 3164450, \"ubuntu-16-04-x64\")\n\n// Rename a Droplet\n//  action, _, err := client.DropletActions.Rename(ctx, 3164450, \"nifty-new-name\")\n\n// Change the Kernel\n//  action, _, err := client.DropletActions.ChangeKernel(ctx, 3164450, 991)\n\n// Enable IPv6\n//  action, _, err := client.DropletActions.EnableIPv6(ctx, 3164450)\n\n// Enable Private Networking\n//  action, _, err := client.DropletActions.EnablePrivateNetworking(ctx, 3164450)\n\n// Snapshot a Droplet\n//  action, _, err := client.DropletActions.Snapshot(ctx, 3164450, \"Nifty New Snapshot\")\n\n// Retrieve a Droplet Action\n//  action, _, err := client.DropletActions.Get(ctx, 3164450, 36804807)\n\n}"
          },
          {
            "lang": "Ruby",
            "source": "require 'droplet_kit'\ntoken = ENV['DIGITALOCEAN_TOKEN']\nclient = DropletKit::Client.new(access_token: token)\n\n\nclient.droplet_actions.enable_backups(droplet_id: 3164450)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n12389723)\n\n\n\n\n\n\n\n\n'ubuntu-16-04-x64')\n\n\n'nifty-new-name')\n\n\n991)\n\n\n\n\n\n3164450)\n\n\nNew Snapshot')"
          }
        ]
      }
    },
    "/v2/droplets/actions": {
      "post": {
        "operationId": "post_droplet_action_by_tag",
        "summary": "Acting on Tagged Droplets",
        "description": "Some actions can be performed in bulk on tagged Droplets. The actions can be\ninitiated by sending a POST to `/v2/droplets/actions?tag_name=$TAG_NAME` with\nthe action arguments.\n\nOnly a sub-set of action types are supported:\n\n- `power_cycle`\n- `power_on`\n- `power_off`\n- `shutdown`\n- `enable_ipv6`\n- `enable_backups`\n- `disable_backups`\n- `snapshot`\n",
        "tags": [
          "Droplet Actions"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/droplet_tag_name"
          }
        ],
        "requestBody": {
          "description": "The `type` attribute set in the request body will specify the  action that\nwill be taken on the Droplet. Some actions will require additional\nattributes to be set as well.\n",
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/droplet_action_type"
                  },
                  {
                    "$ref": "#/components/schemas/droplet_action_snapshot"
                  }
                ],
                "discriminator": {
                  "propertyName": "type",
                  "mapping": {
                    "enable_backups": "#/components/schemas/droplet_action_type",
                    "disable_backups": "#/components/schemas/droplet_action_type",
                    "power_cycle": "#/components/schemas/droplet_action_type",
                    "shutdown": "#/components/schemas/droplet_action_type",
                    "power_off": "#/components/schemas/droplet_action_type",
                    "power_on": "#/components/schemas/droplet_action_type",
                    "enable_ipv6": "#/components/schemas/droplet_action_type",
                    "snapshot": "#/components/schemas/droplet_action_snapshot"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/droplet_actions"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  -d '{\"type\":\"enable_backups\"}' \\\n  \"https://api.digitalocean.com/v2/droplets/actions?tag_name=awesome\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"os\"\n\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n    client := godo.NewFromToken(token)\n    ctx := context.TODO()\n\n    action, _, err := client.DropletActions.PowerOffByTag(ctx, \"awesome\")\n}"
          },
          {
            "lang": "Ruby",
            "source": "require 'droplet_kit'\ntoken = ENV['DIGITALOCEAN_TOKEN']\nclient = DropletKit::Client.new(access_token: token)\n\nclient.droplet_actions.power_off_for_tag(tag: 'awesome')"
          }
        ]
      }
    },
    "/v2/droplets/{droplet_id}/actions/{action_id}": {
      "get": {
        "operationId": "get_droplet_action",
        "summary": "Retrieve a Droplet Action",
        "description": "To retrieve a Droplet action, send a GET request to\n`/v2/droplets/$DROPLET_ID/actions/$ACTION_ID`.\n\nThe response will be a JSON object with a key called `action`. The value will\nbe a Droplet action object.\n",
        "tags": [
          "Droplet Actions"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/droplet_id"
          },
          {
            "$ref": "#/components/parameters/action_id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/existing_action"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  \"https://api.digitalocean.com/v2/droplets/3164444/actions/36804807\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"os\"\n\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n    client := godo.NewFromToken(token)\n    ctx := context.TODO()\n\n    action, _, err := client.DropletActions.Get(ctx, 3164450, 36804807)\n}"
          },
          {
            "lang": "Ruby",
            "source": "require 'droplet_kit'\ntoken = ENV['DIGITALOCEAN_TOKEN']\nclient = DropletKit::Client.new(access_token: token)\n\nclient.droplet_actions.find(droplet_id: 3164444, id: 36804807)"
          }
        ]
      }
    },
    "/v2/droplets/{droplet_id}/kernels": {
      "get": {
        "operationId": "list_droplet_kernels",
        "summary": "List All Available Kernels for a Droplet",
        "description": "To retrieve a list of all kernels available to a Droplet, send a GET request\nto `/v2/droplets/$DROPLET_ID/kernels`\n\nThe response will be a JSON object that has a key called `kernels`. This will\nbe set to an array of `kernel` objects, each of which contain the standard\n`kernel` attributes.\n",
        "tags": [
          "Droplets"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/droplet_id"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/all_kernels"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  \"https://api.digitalocean.com/v2/droplets/3164494/kernels?page=1&per_page=1\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"os\"\n\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n    client := godo.NewFromToken(token)\n    ctx := context.TODO()\n\n    opt := &godo.ListOptions{\n        Page:    1,\n        PerPage: 200,\n    }\n\n    kernels, _, err := client.Droplets.Kernels(ctx, 3164494, opt) \n}"
          },
          {
            "lang": "Ruby",
            "source": "require 'droplet_kit'\ntoken = ENV['DIGITALOCEAN_TOKEN']\nclient = DropletKit::Client.new(access_token: token)\n\nkernels = client.droplets.kernels(id: 3164494)\nkernels.each"
          }
        ]
      }
    },
    "/v2/droplets/{droplet_id}/firewalls": {
      "get": {
        "operationId": "list_droplet_firewalls",
        "summary": "List all Firewalls Applied to a Droplet",
        "description": "To retrieve a list of all firewalls available to a Droplet, send a GET request\nto `/v2/droplets/$DROPLET_ID/firewalls`\n\nThe response will be a JSON object that has a key called `firewalls`. This will\nbe set to an array of `firewall` objects, each of which contain the standard\n`firewall` attributes.\n",
        "tags": [
          "Droplets"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/droplet_id"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/all_firewalls"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        }
      }
    },
    "/v2/droplets/{droplet_id}/neighbors": {
      "get": {
        "operationId": "list_droplet_neighbors",
        "summary": "List Neighbors for a Droplet",
        "description": "To retrieve a list of any \"neighbors\" (i.e. Droplets that are co-located on\nthe same physical hardware) for a specific Droplet, send a GET request to\n`/v2/droplets/$DROPLET_ID/neighbors`.\n\nThe results will be returned as a JSON object with a key of `droplets`. This\nwill be set to an array containing objects representing any other Droplets\nthat share the same physical hardware. An empty array indicates that the\nDroplet is not co-located any other Droplets associated with your account.\n",
        "tags": [
          "Droplets"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/droplet_id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/neighbor_droplets"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  \"https://api.digitalocean.com/v2/droplets/3164494/neighbors\""
          }
        ]
      }
    },
    "/v2/droplets/{droplet_id}/destroy_with_associated_resources": {
      "get": {
        "operationId": "list_droplet_associated_resources",
        "summary": "List Associated Resources for a Droplet",
        "description": "To list the associated billable resources that can be destroyed along with a\nDroplet, send a GET request to the\n`/v2/droplets/$DROPLET_ID/destroy_with_associated_resources` endpoint.\n\nThe response will be a JSON object containing `snapshots`, `volumes`, and\n`volume_snapshots` keys. Each will be set to an array of objects containing\ninformation about the associated resources.\n",
        "tags": [
          "Droplets"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/droplet_id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/associated_resources_list"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  \"https://api.digitalocean.com/v2/droplets/3164494/destroy_with_associated_resources\""
          }
        ]
      }
    },
    "/v2/droplets/{droplet_id}/destroy_with_associated_resources/selective": {
      "delete": {
        "operationId": "destroy_with_associated_resources_selective",
        "summary": "Selectively Destroy a Droplet and its Associated Resources",
        "description": "To destroy a Droplet along with a sub-set of its associated resources, send a\nDELETE request to the `/v2/droplets/$DROPLET_ID/destroy_with_associated_resources/selective`\nendpoint. The JSON body of the request should include `snapshots`, `volumes`,\nor `volume_snapshots` keys each set to an array of IDs for the associated\nresources to be destroyed. The IDs can be found by querying the Droplet's\nassociated resources. Any associated resource not included in the request\nwill remain and continue to accrue changes on your account.\n\nA successful response will include a 202 response code and no content. Use\nthe status endpoint to check on the success or failure of the destruction of\nthe individual resources.\n",
        "tags": [
          "Droplets"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/droplet_id"
          }
        ],
        "responses": {
          "202": {
            "$ref": "#/components/responses/accepted"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X DELETE \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  -d '{\"snapshots\": [\"61486916\"],\"volumes\": [\"ba49449a-7435-11ea-b89e-0a58ac14480f\"],\"volume_snapshots\": [\"edb0478d-7436-11ea-86e6-0a58ac144b91\"]}' \\\n  \"https://api.digitalocean.com/v2/droplets/187000742/destroy_with_associated_resources/selective\""
          }
        ]
      }
    },
    "/v2/droplets/{droplet_id}/destroy_with_associated_resources/dangerous": {
      "delete": {
        "operationId": "destroy_with_associated_resources_dangerous",
        "summary": "Destroy a Droplet and All of its Associated Resources (Dangerous)",
        "description": "To destroy a Droplet along with all of its associated resources, send a DELETE\nrequest to the `/v2/droplets/$DROPLET_ID/destroy_with_associated_resources/dangerous`\nendpoint. The headers of this request must include an `X-Dangerous` key set to\n`true`. To preview which resources will be destroyed, first query the\nDroplet's associated resources. This operation _can not_ be reverse and should\nbe used with caution.\n\nA successful response will include a 202 response code and no content. Use the\nstatus endpoint to check on the success or failure of the destruction of the\nindividual resources.\n",
        "tags": [
          "Droplets"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/droplet_id"
          },
          {
            "$ref": "#/components/parameters/x_dangerous"
          }
        ],
        "responses": {
          "202": {
            "$ref": "#/components/responses/accepted"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X DELETE -H \"X-Dangerous: true\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  \"https://api.digitalocean.com/v2/droplets/187000742/destroy_with_associated_resources/dangerous\""
          }
        ]
      }
    },
    "/v2/droplets/{droplet_id}/destroy_with_associated_resources/status": {
      "get": {
        "operationId": "get_destroy_with_associated_resources_status",
        "summary": "Check Status of a Droplet Destroy with Associated Resources Request",
        "description": "To check on the status of a request to destroy a Droplet with its associated\nresources, send a GET request to the\n`/v2/droplets/$DROPLET_ID/destroy_with_associated_resources/status` endpoint.\n",
        "tags": [
          "Droplets"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/droplet_id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/associated_resources_status"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  \"https://api.digitalocean.com/v2/droplets/3164494/destroy_with_associated_resources/status\""
          }
        ]
      }
    },
    "/v2/droplets/{droplet_id}/destroy_with_associated_resources/retry": {
      "post": {
        "operationId": "retry_destroy_with_associated_resource",
        "summary": "Retry a Droplet Destroy with Associated Resources Request",
        "description": "If the status of a request to destroy a Droplet with its associated resources\nreported any errors, it can be retried by sending a POST request to the\n`/v2/droplets/$DROPLET_ID/destroy_with_associated_resources/retry` endpoint.\n\nOnly one destroy can be active at a time per Droplet. If a retry is issued\nwhile another destroy is in progress for the Droplet a 409 status code will\nbe returned. A successful response will include a 202 response code and no\ncontent.\n",
        "tags": [
          "Droplets"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/droplet_id"
          }
        ],
        "responses": {
          "202": {
            "$ref": "#/components/responses/accepted"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  \"https://api.digitalocean.com/v2/droplets/3164494/destroy_with_associated_resources/retry\""
          }
        ]
      }
    },
    "/v2/firewalls": {
      "get": {
        "operationId": "list_firewalls",
        "summary": "List All Firewalls",
        "description": "To list all of the firewalls available on your account, send a GET request to `/v2/firewalls`.",
        "tags": [
          "Firewalls"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/list_firewalls_response"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  \"https://api.digitalocean.com/v2/firewalls\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"os\"\n\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n    client := godo.NewFromToken(token)\n    ctx := context.TODO()\n\n    opt := &godo.ListOptions{\n        Page:    1,\n        PerPage: 200,\n    }\n\n    firewalls, _, err := client.Firewalls.List(ctx, opt)\n}"
          },
          {
            "lang": "Ruby",
            "source": "require 'droplet_kit'\ntoken = ENV['DIGITALOCEAN_TOKEN']\nclient = DropletKit::Client.new(access_token: token)\n\nfirewalls = client.firewalls.all\nfirewalls.each"
          }
        ]
      },
      "post": {
        "operationId": "create_firewall",
        "summary": "Create a New Firewall",
        "description": "To create a new firewall, send a POST request to `/v2/firewalls`. The request\nmust contain at least one inbound or outbound access rule.\n",
        "tags": [
          "Firewalls"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/firewall"
                  },
                  {
                    "required": [
                      "name"
                    ]
                  },
                  {
                    "anyOf": [
                      {
                        "title": "Inbound Rules",
                        "required": [
                          "inbound_rules"
                        ]
                      },
                      {
                        "title": "Outbound Rules",
                        "required": [
                          "outbound_rules"
                        ]
                      }
                    ]
                  }
                ]
              },
              "example": {
                "name": "firewall",
                "inbound_rules": [
                  {
                    "protocol": "tcp",
                    "ports": "80",
                    "sources": {
                      "load_balancer_uids": [
                        "4de7ac8b-495b-4884-9a69-1050c6793cd6"
                      ]
                    }
                  },
                  {
                    "protocol": "tcp",
                    "ports": "22",
                    "sources": {
                      "tags": [
                        "gateway"
                      ],
                      "addresses": [
                        "18.0.0.0/8"
                      ]
                    }
                  }
                ],
                "outbound_rules": [
                  {
                    "protocol": "tcp",
                    "ports": "80",
                    "destinations": {
                      "addresses": [
                        "0.0.0.0/0",
                        "::/0"
                      ]
                    }
                  }
                ],
                "droplet_ids": [
                  8043964
                ]
              }
            }
          }
        },
        "responses": {
          "202": {
            "$ref": "#/components/responses/create_firewall_response"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  -d '{\"name\":\"firewall\",\"inbound_rules\":[{\"protocol\":\"tcp\",\"ports\":\"80\",\"sources\":{\"load_balancer_uids\": [\"4de7ac8b-495b-4884-9a69-1050c6793cd6\"]}},{\"protocol\": \"tcp\",\"ports\": \"22\",\"sources\":{\"tags\": [\"gateway\"],\"addresses\": [\"18.0.0.0/8\"]}}],\"outbound_rules\":[{\"protocol\":\"tcp\",\"ports\":\"80\",\"destinations\":{\"addresses\":[\"0.0.0.0/0\",\"::/0\"]}}],\"droplet_ids\":[8043964]}' \\\n  \"https://api.digitalocean.com/v2/firewalls\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"os\"\n\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n    client := godo.NewFromToken(token)\n    ctx := context.TODO()\n\n    createRequest := &godo.FirewallRequest{\n        Name: 'firewall',\n        InboundRules: []godo.InboundRule{\n            {\n                Protocol: 'tcp',\n                PortRange: '80',\n                Sources: &godo.Sources{\n                    LoadBalancerUIDs: []string{'4de7ac8b-495b-4884-9a69-1050c6793cd6'},\n                },\n            },\n            {\n                Protocol:  'tcp',\n                PortRange: '22',\n                Sources: &godo.Sources{\n                    Addresses: []string{'18.0.0.0/8'},\n                    Tags: []string{'gateway'},\n                },\n            },\n        },\n        OutboundRules: []godo.OutboundRule{\n            {\n                Protocol: 'tcp',\n                PortRange: '80',\n                Destinations: &godo.Destinations{\n                    Addresses: []string{'0.0.0.0/0', '::/0'},\n                },\n            },\n        },\n        DropletIDs: []int{8043964},\n    }\n\n    firewall, req, err := client.Firewalls.Create(ctx, createRequest)\n}"
          },
          {
            "lang": "Ruby",
            "source": "require 'droplet_kit'\ntoken = ENV['DIGITALOCEAN_TOKEN']\nclient = DropletKit::Client.new(access_token: token)\n\nfirewall = DropletKit::Firewall.new(\n  name: 'firewall',\n  inbound_rules: [\n    DropletKit::FirewallInboundRule.new(\n      protocol: 'tcp',\n      ports: '80',\n      sources: {\n        load_balancer_uids: ['4de7ac8b-495b-4884-9a69-1050c6793cd6']\n      }\n    ),\n    DropletKit::FirewallInboundRule.new(\n      protocol: 'tcp',\n      ports: '22',\n      sources: {\n        tags: ['gateway'],\n        addresses: ['18.0.0.0/8']\n      }\n    )\n  ],\n  outbound_rules: [\n    DropletKit::FirewallOutboundRule.new(\n      protocol: 'tcp',\n      ports: '80',\n      destinations: {\n        addresses: ['0.0.0.0/0', '::/0'],\n      }\n    )\n  ],\n  droplet_ids: [8043964]\n)\n\nclient.firewalls.create(firewall)"
          }
        ]
      }
    },
    "/v2/firewalls/{firewall_id}": {
      "get": {
        "operationId": "get_firewall",
        "summary": "Retrieve an Existing Firewall",
        "description": "To show information about an existing firewall, send a GET request to `/v2/firewalls/$FIREWALL_ID`.",
        "tags": [
          "Firewalls"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/firewall_id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/get_firewall_response"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  \"https://api.digitalocean.com/v2/firewalls/bb4b2611-3d72-467b-8602-280330ecd65c\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"os\"\n\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n    client := godo.NewFromToken(token)\n    ctx := context.TODO()\n\n    firewall, _, err := client.Firewalls.Get(ctx, 'bb4b2611-3d72-467b-8602-280330ecd65c')\n}"
          },
          {
            "lang": "Ruby",
            "source": "require 'droplet_kit'\ntoken = ENV['DIGITALOCEAN_TOKEN']\nclient = DropletKit::Client.new(access_token: token)\n\nclient.firewalls.find(id: 'bb4b2611-3d72-467b-8602-280330ecd65c')"
          }
        ]
      },
      "put": {
        "operationId": "update_firewall",
        "summary": "Update a Firewall",
        "description": "To update the configuration of an existing firewall, send a PUT request to\n`/v2/firewalls/$FIREWALL_ID`. The request should contain a full representation\nof the firewall including existing attributes. **Note that any attributes that\nare not provided will be reset to their default values.**\n",
        "tags": [
          "Firewalls"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/firewall_id"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/firewall"
                  },
                  {
                    "anyOf": [
                      {
                        "title": "Inbound Rules",
                        "required": [
                          "inbound_rules"
                        ]
                      },
                      {
                        "title": "Outbound Rules",
                        "required": [
                          "outbound_rules"
                        ]
                      }
                    ]
                  }
                ]
              },
              "example": {
                "name": "frontend-firewall",
                "inbound_rules": [
                  {
                    "protocol": "tcp",
                    "ports": "8080",
                    "sources": {
                      "load_balancer_uids": [
                        "4de7ac8b-495b-4884-9a69-1050c6793cd6"
                      ]
                    }
                  },
                  {
                    "protocol": "tcp",
                    "ports": "22",
                    "sources": {
                      "tags": [
                        "gateway"
                      ],
                      "addresses": [
                        "18.0.0.0/8"
                      ]
                    }
                  }
                ],
                "outbound_rules": [
                  {
                    "protocol": "tcp",
                    "ports": "8080",
                    "destinations": {
                      "addresses": [
                        "0.0.0.0/0",
                        "::/0"
                      ]
                    }
                  }
                ],
                "droplet_ids": [
                  8043964
                ],
                "tags": [
                  "frontend"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/put_firewall_response"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X PUT \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  -d '{\"name\":\"firewall\",\"inbound_rules\":[{\"protocol\":\"tcp\",\"ports\":\"8080\",\"sources\":{\"load_balancer_uids\": [\"4de7ac8b-495b-4884-9a69-1050c6793cd6\"]}},{\"protocol\": \"tcp\",\"ports\": \"22\",\"sources\":{\"tags\": [\"gateway\"],\"addresses\": [\"18.0.0.0/8\"]}}],\"outbound_rules\":[{\"protocol\":\"tcp\",\"ports\":\"8080\",\"destinations\":{\"addresses\":[\"0.0.0.0/0\",\"::/0\"]}}],\"droplet_ids\":[8043964],\"tags\":[\"frontend\"]}' \\\n  \"https://api.digitalocean.com/v2/firewalls/bb4b2611-3d72-467b-8602-280330ecd65c\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"os\"\n\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n    client := godo.NewFromToken(token)\n    ctx := context.TODO()\n\n    updateRequest := &godo.FirewallRequest{\n        Name: 'firewall',\n        InboundRules: []godo.InboundRule{\n            {\n                Protocol: 'tcp',\n                PortRange: '8080',\n                Sources: &godo.Sources{\n                    LoadBalancerUIDs: []string{'4de7ac8b-495b-4884-9a69-1050c6793cd6'},\n                },\n            },\n            {\n                Protocol:  'tcp',\n                PortRange: '22',\n                Sources: &godo.Sources{\n                    Addresses: []string{'18.0.0.0/8'},\n                    Tags: []string{'gateway'},\n                },\n            },\n        },\n        OutboundRules: []godo.OutboundRule{\n            {\n                Protocol: 'tcp',\n                PortRange: '8080',\n                Destinations: &godo.Destinations{\n                    Addresses: []string{'0.0.0.0/0', '::/0'},\n                },\n            },\n        },\n        DropletIDs: []int{8043964},\n        Tags: []string{'frontend'}\n    }\n\n    firewall, req, err := client.Firewalls.Create(ctx, 'bb4b2611-3d72-467b-8602-280330ecd65c', updateRequest)\n}"
          },
          {
            "lang": "Ruby",
            "source": "require 'droplet_kit'\ntoken = ENV['DIGITALOCEAN_TOKEN']\nclient = DropletKit::Client.new(access_token: token)\n\nfirewall = DropletKit::Firewall.new(  name: 'firewall',\n  inbound_rules: [\n    DropletKit::FirewallInboundRule.new(\n      protocol: 'tcp',\n      ports: '8080',\n      sources: {\n        load_balancer_uids: ['4de7ac8b-495b-4884-9a69-1050c6793cd6']\n      }\n    ),\n    DropletKit::FirewallInboundRule.new(\n      protocol: 'tcp',\n      ports: '22',\n      sources: {\n        tags: ['gateway'],\n        addresses: ['18.0.0.0/8']\n      }\n    )\n  ],\n  outbound_rules: [\n    DropletKit::FirewallOutboundRule.new(\n      protocol: 'tcp',\n      ports: '8080',\n      destinations: {\n        addresses: ['0.0.0.0/0', '::/0'],\n      }\n    )\n  ],\n  droplet_ids: [8043964],\n  tags: ['frontend']\n)\n\nclient.firewalls.update(firewall, id: 'bb4b2611-3d72-467b-8602-280330ecd65c')"
          }
        ]
      },
      "delete": {
        "operationId": "delete_firewall",
        "summary": "Delete a Firewall",
        "description": "To delete a firewall send a DELETE request to `/v2/firewalls/$FIREWALL_ID`.\n\nNo response body will be sent back, but the response code will indicate\nsuccess. Specifically, the response code will be a 204, which means that the\naction was successful with no returned body data.\n",
        "tags": [
          "Firewalls"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/firewall_id"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/no_content"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X DELETE \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  \"https://api.digitalocean.com/v2/firewalls/bb4b2611-3d72-467b-8602-280330ecd65c\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"os\"\n\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n    client := godo.NewFromToken(token)\n    ctx := context.TODO()\n\n    _, err := client.Firewalls.Delete(ctx, 'bb4b2611-3d72-467b-8602-280330ecd65c')\n}"
          },
          {
            "lang": "Ruby",
            "source": "require 'droplet_kit'\ntoken = ENV['DIGITALOCEAN_TOKEN']\nclient = DropletKit::Client.new(access_token: token)\n\nclient.firewalls.delete(id: 'bb4b2611-3d72-467b-8602-280330ecd65c')"
          }
        ]
      }
    },
    "/v2/firewalls/{firewall_id}/droplets": {
      "post": {
        "operationId": "add_firewall_droplets",
        "summary": "Add Droplets to a Firewall",
        "description": "To assign a Droplet to a firewall, send a POST request to\n`/v2/firewalls/$FIREWALL_ID/droplets`. In the body of the request, there\nshould be a `droplet_ids` attribute containing a list of Droplet IDs.\n\nNo response body will be sent back, but the response code will indicate\nsuccess. Specifically, the response code will be a 204, which means that the\naction was successful with no returned body data.\n",
        "tags": [
          "Firewalls"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/firewall_id"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "droplet_ids": {
                    "type": "array",
                    "description": "An array containing the IDs of the Droplets to be assigned to the firewall.",
                    "items": {
                      "type": "integer"
                    },
                    "example": [
                      49696269
                    ]
                  }
                },
                "required": [
                  "droplet_ids"
                ]
              },
              "example": {
                "droplet_ids": [
                  49696269
                ]
              }
            }
          }
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/no_content"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  -d '{\"droplet_ids\":[49696269]}' \\\n  \"https://api.digitalocean.com/v2/firewalls/bb4b2611-3d72-467b-8602-280330ecd65c/droplets\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"os\"\n\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n    client := godo.NewFromToken(token)\n    ctx := context.TODO()\n\n    _, err := client.Firewalls.AddDroplets(ctx, 'bb4b2611-3d72-467b-8602-280330ecd65c', 49696269) \n}"
          },
          {
            "lang": "Ruby",
            "source": "require 'droplet_kit'\ntoken = ENV['DIGITALOCEAN_TOKEN']\nclient = DropletKit::Client.new(access_token: token)\n\nclient.firewalls.add_droplets([49696269], id: 'bb4b2611-3d72-467b-8602-280330ecd65c')"
          }
        ]
      },
      "delete": {
        "operationId": "delete_firewall_droplets",
        "summary": "Remove Droplets from a Firewall",
        "description": "To remove a Droplet from a firewall, send a DELETE request to\n`/v2/firewalls/$FIREWALL_ID/droplets`. In the body of the request, there should\nbe a `droplet_ids` attribute containing a list of Droplet IDs.\n\nNo response body will be sent back, but the response code will indicate\nsuccess. Specifically, the response code will be a 204, which means that the\naction was successful with no returned body data.\n",
        "tags": [
          "Firewalls"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/firewall_id"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "droplet_ids": {
                    "type": "array",
                    "description": "An array containing the IDs of the Droplets to be removed from the firewall.",
                    "items": {
                      "type": "integer"
                    },
                    "example": [
                      49696269
                    ]
                  }
                },
                "required": [
                  "droplet_ids"
                ]
              },
              "example": {
                "droplet_ids": [
                  49696269
                ]
              }
            }
          }
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/no_content"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X DELETE \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  -d '{\"droplet_ids\":[49696269]}' \\\n  \"https://api.digitalocean.com/v2/firewalls/bb4b2611-3d72-467b-8602-280330ecd65c/droplets\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"os\"\n\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n    client := godo.NewFromToken(token)\n    ctx := context.TODO()\n\n    _, err := client.Firewalls.RemoveDroplets(ctx, 'bb4b2611-3d72-467b-8602-280330ecd65c', 49696269)\n}"
          },
          {
            "lang": "Ruby",
            "source": "require 'droplet_kit'\ntoken = ENV['DIGITALOCEAN_TOKEN']\nclient = DropletKit::Client.new(access_token: token)\n\nclient.firewalls.remove_droplets([49696269], id: 'bb4b2611-3d72-467b-8602-280330ecd65c')"
          }
        ]
      }
    },
    "/v2/firewalls/{firewall_id}/tags": {
      "post": {
        "operationId": "add_firewall_tags",
        "summary": "Add Tags to a Firewall",
        "description": "To assign a tag representing a group of Droplets to a firewall, send a POST\nrequest to `/v2/firewalls/$FIREWALL_ID/tags`. In the body of the request,\nthere should be a `tags` attribute containing a list of tag names.\n\nNo response body will be sent back, but the response code will indicate\nsuccess. Specifically, the response code will be a 204, which means that the\naction was successful with no returned body data.\n",
        "tags": [
          "Firewalls"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/firewall_id"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "tags": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/tags_array"
                      },
                      {
                        "description": "An array containing the names of the Tags to be assigned to the firewall."
                      }
                    ]
                  }
                },
                "required": [
                  "tags"
                ]
              },
              "example": {
                "tags": [
                  "frontend"
                ]
              }
            }
          }
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/no_content"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  -d '{\"tags\":[\"frontend\"]}' \\\n  \"https://api.digitalocean.com/v2/firewalls/bb4b2611-3d72-467b-8602-280330ecd65c/tags\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"os\"\n\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n    client := godo.NewFromToken(token)\n    ctx := context.TODO()\n\n    _, err := client.Firewalls.AddTags(ctx, 'bb4b2611-3d72-467b-8602-280330ecd65c', 'frontend') \n}"
          },
          {
            "lang": "Ruby",
            "source": "require 'droplet_kit'\ntoken = ENV['DIGITALOCEAN_TOKEN']\nclient = DropletKit::Client.new(access_token: token)\n\nclient.firewalls.add_tags(['frontend'], id: 'bb4b2611-3d72-467b-8602-280330ecd65c')"
          }
        ]
      },
      "delete": {
        "operationId": "delete_firewall_tags",
        "summary": "Remove Tags from a Firewall",
        "description": "To remove a tag representing a group of Droplets from a firewall, send a\nDELETE request to `/v2/firewalls/$FIREWALL_ID/tags`. In the body of the\nrequest, there should be a `tags` attribute containing a list of tag names.\n\nNo response body will be sent back, but the response code will indicate\nsuccess. Specifically, the response code will be a 204, which means that the\naction was successful with no returned body data.\n",
        "tags": [
          "Firewalls"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/firewall_id"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "tags": {
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/tags_array"
                      },
                      {
                        "description": "An array containing the names of the Tags to be removed from the firewall."
                      }
                    ]
                  }
                },
                "required": [
                  "tags"
                ]
              },
              "example": {
                "tags": [
                  "frontend"
                ]
              }
            }
          }
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/no_content"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X DELETE \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  -d '{\"tags\":[\"frontend\"]}' \\\n  \"https://api.digitalocean.com/v2/firewalls/bb4b2611-3d72-467b-8602-280330ecd65c/tags\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"os\"\n\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n    client := godo.NewFromToken(token)\n    ctx := context.TODO()\n\n    _, err := client.Firewalls.RemoveTags(ctx, 'bb4b2611-3d72-467b-8602-280330ecd65c', 'frontend')\n}"
          },
          {
            "lang": "Ruby",
            "source": "require 'droplet_kit'\ntoken = ENV['DIGITALOCEAN_TOKEN']\nclient = DropletKit::Client.new(access_token: token)\n\nclient.firewalls.remove_tags(['frontend'], id: 'bb4b2611-3d72-467b-8602-280330ecd65c')"
          }
        ]
      }
    },
    "/v2/firewalls/{firewall_id}/rules": {
      "post": {
        "operationId": "add_firewall_rules",
        "summary": "Add Rules to a Firewall",
        "description": "To add additional access rules to a firewall, send a POST request to\n`/v2/firewalls/$FIREWALL_ID/rules`. The body of the request may include an\ninbound_rules and/or outbound_rules attribute containing an array of rules to\nbe added.\n\nNo response body will be sent back, but the response code will indicate\nsuccess. Specifically, the response code will be a 204, which means that the\naction was successful with no returned body data.\n",
        "tags": [
          "Firewalls"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/firewall_id"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/firewall_rules"
                  },
                  {
                    "anyOf": [
                      {
                        "title": "Inbound Rules",
                        "required": [
                          "inbound_rules"
                        ]
                      },
                      {
                        "title": "Outbound Rules",
                        "required": [
                          "outbound_rules"
                        ]
                      }
                    ]
                  }
                ]
              },
              "example": {
                "inbound_rules": [
                  {
                    "protocol": "tcp",
                    "ports": "3306",
                    "sources": {
                      "droplet_ids": [
                        49696269
                      ]
                    }
                  }
                ],
                "outbound_rules": [
                  {
                    "protocol": "tcp",
                    "ports": "3306",
                    "destinations": {
                      "droplet_ids": [
                        49696269
                      ]
                    }
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/no_content"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  -d '{\"inbound_rules\":[{\"protocol\":\"tcp\",\"ports\":\"3306\",\"sources\":{\"droplet_ids\":[49696269]}}],\"outbound_rules\":[{\"protocol\":\"tcp\",\"ports\":\"3306\",\"destinations\":{\"droplet_ids\":[49696269]}}]}' \\\n  \"https://api.digitalocean.com/v2/firewalls/bb4b2611-3d72-467b-8602-280330ecd65c/rules\""
          },
          {
            "lang": "Go",
            "source": "import (    \"context\"\n    \"os\"\n\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {    token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n    client := godo.NewFromToken(token)\n    ctx := context.TODO()\n\nruleRequest := &godo.FirewallRulesRequest{    InboundRules: []godo.InboundRule{\n        {\n            Protocol:      'tcp',\n            PortRange:     '3306',\n            Sources: &godo.Sources{\n                DropletIDs: []int{49696269},\n            },\n        },\n    },\n    OutboundRules: []godo.OutboundRule{\n        {\n            Protocol:      'tcp',\n            PortRange:     '3306',\n            Destinations: &godo.Destinations{\n                DropletIDs: []int{49696269},\n            },\n        },\n    },\n}\n\n_, err := c.Firewalls.AddRules(ctx, 'bb4b2611-3d72-467b-8602-280330ecd65c', ruleRequest)\n}"
          },
          {
            "lang": "Ruby",
            "source": "require 'droplet_kit'\ntoken = ENV['DIGITALOCEAN_TOKEN']\nclient = DropletKit::Client.new(access_token: token)\n\ninbound_rule = DropletKit::FirewallInboundRule.new(  protocol: 'tcp',\n  ports: '3306',\n  sources: {\n    droplet_ids: [49696269]\n  }\n)\n\noutbound_rule = DropletKit::FirewallOutboundRule.new(  protocol: 'tcp',\n  ports: '3306',\n  destinations: {\n    droplet_ids: [49696269]\n  }\n)\n\nclient.firewalls.add_rules(inbound_rules: [inbound_rule], outbound_rules: [outbound_rule], id: 'bb4b2611-3d72-467b-8602-280330ecd65c')"
          }
        ]
      },
      "delete": {
        "operationId": "delete_firewall_rules",
        "summary": "Remove Rules from a Firewall",
        "description": "To remove access rules from a firewall, send a DELETE request to\n`/v2/firewalls/$FIREWALL_ID/rules`. The body of the request may include an\n`inbound_rules` and/or `outbound_rules` attribute containing an array of rules\nto be removed.\n\nNo response body will be sent back, but the response code will indicate\nsuccess. Specifically, the response code will be a 204, which means that the\naction was successful with no returned body data.\n",
        "tags": [
          "Firewalls"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/firewall_id"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/firewall_rules"
                  },
                  {
                    "anyOf": [
                      {
                        "title": "Inbound Rules",
                        "required": [
                          "inbound_rules"
                        ]
                      },
                      {
                        "title": "Outbound Rules",
                        "required": [
                          "outbound_rules"
                        ]
                      }
                    ]
                  }
                ]
              },
              "example": {
                "inbound_rules": [
                  {
                    "protocol": "tcp",
                    "ports": "3306",
                    "sources": {
                      "droplet_ids": [
                        49696269
                      ]
                    }
                  }
                ],
                "outbound_rules": [
                  {
                    "protocol": "tcp",
                    "ports": "3306",
                    "destinations": {
                      "droplet_ids": [
                        49696269
                      ]
                    }
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/no_content"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X DELETE \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  -d '{\"inbound_rules\":[{\"protocol\":\"tcp\",\"ports\":\"3306\",\"sources\":{\"droplet_ids\":[49696269]}}],\"outbound_rules\":[{\"protocol\":\"tcp\",\"ports\":\"3306\",\"destinations\":{\"droplet_ids\":[49696269]}}]}' \\\n  \"https://api.digitalocean.com/v2/firewalls/bb4b2611-3d72-467b-8602-280330ecd65c/rules\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"os\"\n\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n    client := godo.NewFromToken(token)\n    ctx := context.TODO()\n\n    ruleRequest := &godo.FirewallRulesRequest{\n        InboundRules: []godo.InboundRule{\n            {\n                Protocol:      'tcp',\n                PortRange:     '3306',\n                Sources: &godo.Sources{\n                    DropletIDs: []int{49696269},\n                },\n            },\n        },\n        OutboundRules: []godo.OutboundRule{\n            {\n                Protocol:      'tcp',\n                PortRange:     '3306',\n                Destinations: &godo.Destinations{\n                    DropletIDs: []int{49696269},\n                },\n            },\n        },\n    }\n\n    _, err := c.Firewalls.RemoveRules(ctx, 'bb4b2611-3d72-467b-8602-280330ecd65c', ruleRequest)\n\n}"
          },
          {
            "lang": "Ruby",
            "source": "require 'droplet_kit'\ntoken = ENV['DIGITALOCEAN_TOKEN']\nclient = DropletKit::Client.new(access_token: token)\n\ninbound_rule = DropletKit::FirewallInboundRule.new(  protocol: 'tcp',\n  ports: '3306',\n  sources: {\n    droplet_ids: [49696269]\n  }\n)\n\noutbound_rule = DropletKit::FirewallOutboundRule.new(  protocol: 'tcp',\n  ports: '3306',\n  destinations: {\n    droplet_ids: [49696269]\n  }\n)\n\nclient.firewalls.remove_rules(inbound_rules: [inbound_rule], outbound_rules: [outbound_rule], id: 'bb4b2611-3d72-467b-8602-280330ecd65c')"
          }
        ]
      }
    },
    "/v2/floating_ips": {
      "get": {
        "operationId": "list_floating_ips",
        "summary": "List All Floating IPs",
        "description": "To list all of the floating IPs available on your account, send a GET request to `/v2/floating_ips`.",
        "tags": [
          "Floating IPs"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/floating_ip_list"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  \"https://api.digitalocean.com/v2/floating_ips?page=1&per_page=20\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"os\"\n\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n    client := godo.NewFromToken(token)\n    ctx := context.TODO()\n\n    opt := &godo.ListOptions{\n        Page:    1,\n        PerPage: 200,\n    }\n\n    floatingIPs, _, err := client.FloatingIPs.List(ctx, opt)\n}"
          },
          {
            "lang": "Ruby",
            "source": "require 'droplet_kit'\ntoken = ENV['DIGITALOCEAN_TOKEN']\nclient = DropletKit::Client.new(access_token: token)\n\nfloating_ips = client.floating_ips.all\nfloating_ips.each"
          }
        ]
      },
      "post": {
        "operationId": "create_floating_ip",
        "summary": "Create a New Floating IP",
        "description": "On creation, a floating IP must be either assigned to a Droplet or reserved to a region.\n* To create a new floating IP assigned to a Droplet, send a POST  request to `/v2/floating_ips` with the `droplet_id` attribute.\n\n* To create a new floating IP reserved to a region, send a POST request to  `/v2/floating_ips` with the `region` attribute.\n\n**Note**:  In addition to the standard rate limiting, only 12 floating IPs may be created per 60 seconds.",
        "tags": [
          "Floating IPs"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/floating_ip_create"
              }
            }
          }
        },
        "responses": {
          "202": {
            "$ref": "#/components/responses/floating_ip_created"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  -d '{\"droplet_id\": 123456}' \\\n  \"https://api.digitalocean.com/v2/floating_ips\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"os\"\n\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n    client := godo.NewFromToken(token)\n    ctx := context.TODO()\n\n    createRequest := &godo.FloatingIPCreateRequest{\n        DropletID: 123456,\n\n    }\n}"
          },
          {
            "lang": "Ruby",
            "source": "require 'droplet_kit'\ntoken = ENV['DIGITALOCEAN_TOKEN']\nclient = DropletKit::Client.new(access_token: token)\n\nfloating_ip = DropletKit::FloatingIp.new(droplet_id: 123456)\nclient.floating_ips.create(floating_ip)"
          }
        ]
      }
    },
    "/v2/floating_ips/{floating_ip}": {
      "get": {
        "operationId": "get_floating_ip",
        "summary": "Retrieve an Existing Floating IP",
        "description": "To show information about a floating IP, send a GET request to `/v2/floating_ips/$FLOATING_IP_ADDR`.",
        "tags": [
          "Floating IPs"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/floating_ip"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/floating_ip"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  \"https://api.digitalocean.com/v2/floating_ips/45.55.96.47\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"os\"\n\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n    client := godo.NewFromToken(token)\n    ctx := context.TODO()\n\n    floatingIP, _, err := client.FloatingIPs.Get(ctx, \"45.55.96.47\")\n}"
          },
          {
            "lang": "Ruby",
            "source": "require 'droplet_kit'\ntoken = ENV['DIGITALOCEAN_TOKEN']\nclient = DropletKit::Client.new(access_token: token)\n\nclient.floating_ips.find(ip: '45.55.96.47')"
          }
        ]
      },
      "delete": {
        "operationId": "delete_floating_ip",
        "summary": "Delete a Floating IPs",
        "description": "To delete a floating IP and remove it from your account, send a DELETE request\nto `/v2/floating_ips/$FLOATING_IP_ADDR`.\n\nA successful request will receive a 204 status code with no body in response.\nThis indicates that the request was processed successfully.\n",
        "tags": [
          "Floating IPs"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/floating_ip"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/no_content"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X DELETE \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  \"https://api.digitalocean.com/v2/floating_ips/45.55.96.47\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"os\"\n\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n    client := godo.NewFromToken(token)\n    ctx := context.TODO()\n\n    _, err := client.FloatingIPs.Delete(ctx, \"45.55.96.34\")\n}"
          },
          {
            "lang": "Ruby",
            "source": "require 'droplet_kit'\ntoken = ENV['DIGITALOCEAN_TOKEN']\nclient = DropletKit::Client.new(access_token: token)\n\nclient.floating_ips.delete(ip: '45.55.96.47')"
          }
        ]
      }
    },
    "/v2/floating_ips/{floating_ip}/actions": {
      "get": {
        "operationId": "list_floating_ip_actions",
        "summary": "List All Actions for a Floating IP",
        "description": "To retrieve all actions that have been executed on a floating IP, send a GET request to `/v2/floating_ips/$FLOATING_IP/actions`.",
        "tags": [
          "Floating IP Actions"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/floating_ip"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/floating_ip_actions"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  \"https://api.digitalocean.com/v2/floating_ips/45.55.96.47/actions?page=1&per_page=1\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"os\"\n\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n    client := godo.NewFromToken(token)\n    ctx := context.TODO()\n\n    opt := &godo.ListOptions{\n        Page:    1,\n        PerPage: 200,\n    }\n\n    actions, _, err := client.FloatingIPActions.List(ctx, '45.55.96.47', opt)\n}"
          },
          {
            "lang": "Ruby",
            "source": "require 'droplet_kit'\ntoken = ENV['DIGITALOCEAN_TOKEN']\nclient = DropletKit::Client.new(access_token: token)\n\nactions = client.floating_ip_actions.all(ip: '45.55.96.47')\nactions.each"
          }
        ]
      },
      "post": {
        "operationId": "post_floating_ip_action",
        "summary": "Initiate a Floating IP Action",
        "description": "To initiate an action on a floating IP send a POST request to\n`/v2/floating_ips/$FLOATING_IP/actions`. In the JSON body to the request,\nset the `type` attribute to on of the supported action types:\n\n| Action     | Details\n|------------|--------\n| `assign`   | Assigns a floating IP to a Droplet\n| `unassign` | Unassign a floating IP from a Droplet\n",
        "tags": [
          "Floating IP Actions"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/floating_ip"
          }
        ],
        "requestBody": {
          "description": "The `type` attribute set in the request body will specify the action that\nwill be taken on the floating IP.\n",
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/floating_ip_action_unassign"
                  },
                  {
                    "$ref": "#/components/schemas/floating_ip_action_assign"
                  }
                ],
                "discriminator": {
                  "propertyName": "type",
                  "mapping": {
                    "unassign": "#/components/schemas/floating_ip_action_unassign",
                    "assign": "#/components/schemas/floating_ip_action_assign"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/floating_ip_action"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  -d '{\"type\":\"assign\",\"droplet_id\":8219222}' \\\n  \"https://api.digitalocean.com/v2/floating_ips/45.55.96.47/actions\"\n\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  -d '{\"type\":\"unassign\"}' \\\n  \"https://api.digitalocean.com/v2/floating_ips/45.55.96.47/actions\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"os\"\n\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n    client := godo.NewFromToken(token)\n    ctx := context.TODO()\n\n  // Assign a Floating IP to a Droplet\n    action, _, err := client.FloatingIPActions.Assign(ctx, \"45.55.96.47\", 8219222)\n\n  // Unassign a Floating IP\n  // action, _, err := client.FloatingIPActions.Unassign(ctx, \"45.55.96.47\")  \n}"
          },
          {
            "lang": "Ruby",
            "source": "require 'droplet_kit'\ntoken = ENV['DIGITALOCEAN_TOKEN']\nclient = DropletKit::Client.new(access_token: token)\n\n\nclient.floating_ip_actions.assign(ip: '45.55.96.47', droplet_id: 8219222)"
          }
        ]
      }
    },
    "/v2/floating_ips/{floating_ip}/actions/{action_id}": {
      "get": {
        "operationId": "get_floating_ip_action",
        "summary": "Retrieve an Existing Floating IP Action",
        "description": "To retrieve the status of a floating IP action, send a GET request to `/v2/floating_ips/$FLOATING_IP/actions/$ACTION_ID`.",
        "tags": [
          "Floating IP Actions"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/floating_ip"
          },
          {
            "$ref": "#/components/parameters/action_id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/floating_ip_action"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  \"https://api.digitalocean.com/v2/floating_ips/45.55.96.47/actions/72531856\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"os\"\n\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n    client := godo.NewFromToken(token)\n    ctx := context.TODO()\n\n    action, _, err := client.FloatingIPActions.Get(ctx, \"45.55.96.47\", 72531856)\n}"
          },
          {
            "lang": "Ruby",
            "source": "require 'droplet_kit'\ntoken = ENV['DIGITALOCEAN_TOKEN']\nclient = DropletKit::Client.new(access_token: token)\n\nclient.floating_ip_actions.find(ip: '45.55.96.47', id: 72531856)"
          }
        ]
      }
    },
    "/v2/images": {
      "get": {
        "operationId": "get_images_list",
        "summary": "List All Images",
        "description": "To list all of the images available on your account, send a GET request to /v2/images.\n\n\n-----\n\nIt's possible to request filtered results by including certain query parameters.\n\n**Image Type**\n\nEither 1-Click Application or OS Distribution images can be filtered by using the `type` query parameter.\n\n> Important: The `type` query parameter does not directly relate to the `type` attribute.\n\nTo retrieve only ***distribution*** images, include the `type` query parameter set to distribution, `/v2/images?type=distribution`.\n\nTo retrieve only ***application*** images, include the `type` query parameter set to application, `/v2/images?type=application`.\n\n**User Images**\n\nTo retrieve only the private images of a user, include the `private` query parameter set to true, `/v2/images?private=true`.\n\n**Tags**\n\nTo list all images assigned to a specific tag, include the `tag_name` query parameter set to the name of the tag in your GET request. For example, `/v2/images?tag_name=$TAG_NAME`.\n",
        "tags": [
          "Images"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/type"
          },
          {
            "$ref": "#/components/parameters/private"
          },
          {
            "$ref": "#/components/parameters/tag"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/all_images"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  \"https://api.digitalocean.com/v2/images?page=1&per_page=1\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"os\"\n\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n    client := godo.NewFromToken(token)\n    ctx := context.TODO()\n\n    opt := &godo.ListOptions{\n        Page:    1,\n        PerPage: 200,\n    }\n\n    // List all images\n    images, _, err := client.Images.List(ctx, opt)\n\n    // List all application images\n    opt := &godo.ListOptions{\n        Page:    1,\n        PerPage: 200,\n    }\n\n    images, _, err := client.Images.ListApplication(ctx, opt) \n}"
          },
          {
            "lang": "Ruby",
            "source": "require 'droplet_kit'\ntoken = ENV['DIGITALOCEAN_TOKEN']\nclient = DropletKit::Client.new(access_token: token)\n\nimages = client.images.all\nimages.each\n\nimages = client.images.all(type: 'application')\nimages.each"
          }
        ]
      },
      "post": {
        "operationId": "create_custom_image",
        "summary": "Create a Custom Image",
        "description": "To create a new custom image, send a POST request to /v2/images.\nThe body must contain a url attribute pointing to a Linux virtual machine\nimage to be imported into DigitalOcean.\nThe image must be in the raw, qcow2, vhdx, vdi, or vmdk format.\nIt may be compressed using gzip or bzip2 and must be smaller than 100 GB after being decompressed.\n",
        "tags": [
          "Images"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/image_new_custom"
              }
            }
          }
        },
        "responses": {
          "202": {
            "$ref": "#/components/responses/new_custom_image"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  -d '{\"name\": \"ubuntu-18.04-minimal\", \"url\": \"http://cloud-images.ubuntu.com/minimal/releases/bionic/release/ubuntu-18.04-minimal-cloudimg-amd64.img\", \"distribution\": \"Ubuntu\", \"region\": \"nyc3\", \"description\": \"Cloud-optimized image w/ small footprint\", \"tags\":[\"base-image\", \"prod\"]}' \\\n  \"https://api.digitalocean.com/v2/images\""
          }
        ]
      }
    },
    "/v2/images/{image_id}": {
      "get": {
        "operationId": "get_image",
        "summary": "Retrieve an Existing Image",
        "description": "To retrieve information about an image, send a `GET` request to\n`/v2/images/$IDENTIFIER`.\n",
        "tags": [
          "Images"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "image_id",
            "description": "A unique number (id) or string (slug) used to identify and reference a\nspecific image.\n\n**Public** images can be identified by image `id` or `slug`.\n\n**Private** images *must* be identified by image `id`.\n",
            "required": true,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "string"
                }
              ]
            },
            "examples": {
              "byId": {
                "summary": "Retrieve a public or private image by id",
                "value": 62137902
              },
              "bySlug": {
                "summary": "Retrieve a public image by slug",
                "value": "ubuntu-16-04-x64"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/existing_image"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  \"https://api.digitalocean.com/v2/images/7555620\"\n\ncurl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  \"https://api.digitalocean.com/v2/images/ubuntu-16-04-x64\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"os\"\n\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n    client := godo.NewFromToken(token)\n    ctx := context.TODO()\n\n    // Get existing image by ID\n    image, _, err := client.Images.GetByID(ctx, 7555620)\n\n    // Get existing image by slug\n    // image, _, err := client.Images.GetBySlug(ctx, \"ubuntu-16-04-x64\") \n}"
          },
          {
            "lang": "Ruby",
            "source": "require 'droplet_kit'\ntoken = ENV['DIGITALOCEAN_TOKEN']\nclient = DropletKit::Client.new(access_token: token)\n\nclient.images.find(id: '7555620')\n\nclient.images.find(id: 'ubuntu-16-04-x64')"
          }
        ]
      },
      "put": {
        "operationId": "update_image",
        "summary": "Update an Image",
        "description": "To update an image, send a `PUT` request to `/v2/images/$IMAGE_ID`.\nSet the `name` attribute to the new value you would like to use.\nFor custom images, the `description` and `distribution` attributes may also be updated.\n",
        "tags": [
          "Images"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/image_id"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/image_update"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/updated_image"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X PUT \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  -d '{\"name\":\"new-image-name\"}' \\\n  \"https://api.digitalocean.com/v2/images/7938391\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"os\"\n\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n    client := godo.NewFromToken(token)\n    ctx := context.TODO()\n\n    updateRequest := &godo.ImageUpdateRequest{\n        Name: \"new-image-name\",\n    }\n\n    image, _, err := client.Images.Update(ctx, id, updateRequest)\n}"
          },
          {
            "lang": "Ruby",
            "source": "require 'droplet_kit'\ntoken = ENV['DIGITALOCEAN_TOKEN']\nclient = DropletKit::Client.new(access_token: token)\n\nimage = DropletKit::Image.new(name: 'new-image-name')\nclient.images.update(image, id: 7938391)"
          }
        ]
      },
      "delete": {
        "operationId": "delete_image",
        "summary": "Delete an Image",
        "description": "To delete a snapshot or custom image, send a `DELETE` request to `/v2/images/$IMAGE_ID`.\n",
        "tags": [
          "Images"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/image_id"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/no_content"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X DELETE \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  \"https://api.digitalocean.com/v2/images/7938391\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"os\"\n\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n    client := godo.NewFromToken(token)\n    ctx := context.TODO()\n\n    _, err := client.Images.Delete(ctx, 7938391)\n}"
          },
          {
            "lang": "Ruby",
            "source": "require 'droplet_kit'\ntoken = ENV['DIGITALOCEAN_TOKEN']\nclient = DropletKit::Client.new(access_token: token)\n\nclient.images.delete(id: 7938391)"
          }
        ]
      }
    },
    "/v2/images/{image_id}/actions": {
      "get": {
        "operationId": "list_image_actions",
        "summary": "List All Actions for an Image",
        "description": "To retrieve all actions that have been executed on an image, send a GET request to `/v2/images/$IMAGE_ID/actions`.",
        "tags": [
          "Image Actions"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/image_id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/get_image_actions_response"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  \"https://api.digitalocean.com/v2/images/7555620/actions?page=1&per_page=1\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"os\"\n\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n    client := godo.NewFromToken(token)\n    ctx := context.TODO()\n\n    \n}"
          }
        ]
      },
      "post": {
        "operationId": "post_image_action",
        "summary": "Initiate an Image Action",
        "description": "The following actions are available on an Image.\n\n\n\nTo convert an image, for example, a backup to a snapshot, send a POST request\nto `/v2/images/$IMAGE_ID/actions`. Set the `type` attribute to `convert`.\n\n\n\nTo transfer an image to another region, send a POST request to\n`/v2/images/$IMAGE_ID/actions`. Set the `type` attribute to `transfer` and set\n`region` attribute to the slug identifier of the region you wish to transfer\nto.\n",
        "tags": [
          "Image Actions"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/image_id"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/image_action_base"
                  },
                  {
                    "$ref": "#/components/schemas/image_action_transfer"
                  }
                ],
                "discriminator": {
                  "propertyName": "type",
                  "mapping": {
                    "convert": "#/components/schemas/image_action_base",
                    "transfer": "#/components/schemas/image_action_transfer"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/post_image_action_response"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  -d '{\"type\":\"transfer\",\"region\":\"nyc2\"}' \\\n  \"https://api.digitalocean.com/v2/images/7938269/actions\"\n\ncurl -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  -d '{\"type\":\"convert\"}' \\\n  \"https://api.digitalocean.com/v2/images/7938291/actions\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"os\"\n\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n    client := godo.NewFromToken(token)\n    ctx := context.TODO()\n\n    // Transfer an existing image\n    transferRequest := &godo.ActionRequest{\n        \"type\":   \"transfer\",\n        \"region\": \"nyc2\",\n    }\n    transfer, _, err := client.ImageActions.Transfer(ctx, 7938269, transferRequest)\n\n\n}"
          },
          {
            "lang": "Ruby",
            "source": "require 'droplet_kit'\ntoken = ENV['DIGITALOCEAN_TOKEN']\nclient = DropletKit::Client.new(access_token: token)\n\nclient.image_actions.transfer(image_id: 7938269, region: 'nyc2')"
          }
        ]
      }
    },
    "/v2/images/{image_id}/actions/{action_id}": {
      "get": {
        "operationId": "get_image_action",
        "summary": "Retrieve an Existing Action",
        "description": "To retrieve the status of an image action, send a GET request to `/v2/images/$IMAGE_ID/actions/$IMAGE_ACTION_ID`.",
        "tags": [
          "Image Actions"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/image_id"
          },
          {
            "$ref": "#/components/parameters/action_id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/get_image_action_response"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  \"https://api.digitalocean.com/v2/images/7938269/actions/36805527\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"os\"\n\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n    client := godo.NewFromToken(token)\n    ctx := context.TODO()\n\n    action, _, err := client.ImageActions.Get(ctx, 7938269, 36805527)\n}"
          },
          {
            "lang": "Ruby",
            "source": "require 'droplet_kit'\ntoken = ENV['DIGITALOCEAN_TOKEN']\nclient = DropletKit::Client.new(access_token: token)\n\nclient.image_actions.find(image_id: 7938269, id: 36805527)"
          }
        ]
      }
    },
    "/v2/kubernetes/clusters": {
      "get": {
        "operationId": "list_all_kubernetes_clusters",
        "summary": "List All Kubernetes Clusters",
        "description": "To list all of the Kubernetes clusters on your account, send a GET request\nto `/v2/kubernetes/clusters`.\n",
        "tags": [
          "Kubernetes"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/all_clusters"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  \"https://api.digitalocean.com/v2/kubernetes/clusters\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"os\"\n\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n    client := godo.NewFromToken(token)\n    ctx := context.TODO()\n\n    opt := &godo.ListOptions{\n        Page:    1,\n        PerPage: 200,\n    }\n\n    clusters, _, err := client.Kubernetes.List(ctx, opt)\n}"
          },
          {
            "lang": "Ruby",
            "source": "require 'droplet_kit'\ntoken = ENV['DIGITALOCEAN_TOKEN']\nclient = DropletKit::Client.new(access_token: token)\n\nclusters = client.kubernetes_clusters.all\nclusters.each"
          }
        ]
      },
      "post": {
        "operationId": "create_kubernetes_cluster",
        "summary": "Create a New Kubernetes Cluster",
        "description": "To create a new Kubernetes cluster, send a POST request to\n`/v2/kubernetes/clusters`. The request must contain at least one node pool\nwith at least one worker.\n\nThe request may contain a maintenance window policy describing a time period\nwhen disruptive maintenance tasks may be carried out. Omitting the policy\nimplies that a window will be chosen automatically. See\n[here](https://www.digitalocean.com/docs/kubernetes/how-to/upgrade-cluster/)\nfor details.\n",
        "tags": [
          "Kubernetes"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/cluster"
              },
              "examples": {
                "Kubernetes Cluster Request": {
                  "$ref": "#/components/examples/kubernetes_clusters_basic_request"
                },
                "Kubernetes Cluster with Multiple Node Pools Request": {
                  "$ref": "#/components/examples/kubernetes_clusters_multi_pool_request"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/cluster_create"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  -d '{\"name\": \"prod-cluster-01\",\"region\": \"nyc1\",\"version\": \"1.14.1\\\n  -do.4\",\"tags\": [\"production\",\"web-team\"],\"node_pools\": [{\"size\": \"s-1vcpu-2gb\",\"count\": 3,\"name\": \"frontend-pool\",\"tags\": [\"frontend\"],\"labels\": {\"service\": \"frontend\", \"priority\": \"high\"}},{\"size\": \"c-4\",\"count\": 2,\"name\": \"backend-pool\"}]}' \\\n  \"https://api.digitalocean.com/v2/kubernetes/clusters\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"os\"\n\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n    client := godo.NewFromToken(token)\n    ctx := context.TODO()\n\n    createRequest := &godo.KubernetesClusterCreateRequest{\n        Name:        \"prod-cluster-01\",\n        RegionSlug:  \"nyc1\",\n        VersionSlug: \"1.14.1-do.4\",\n        Tags:        []string{\"production\", \"web-team\"},\n        NodePools: []*godo.KubernetesNodePoolCreateRequest{\n            &godo.KubernetesNodePoolCreateRequest{\n                Name:  \"frontend-pool\",\n                Size:  \"s-2vcpu-2gb\",\n                Count: 3,\n                Tags:  []string{\"frontend\"},\n                Labels:  map[string]string{\"service\": \"frontend\", \"priority\": \"high\"},\n            },\n            &godo.KubernetesNodePoolCreateRequest{\n                Name:  \"backend-pool\",\n                Size:  \"c-4\",\n                Count: 2,\n            },\n        },\n    }\n\n    cluster, _, err := client.Kubernetes.Create(ctx, createRequest)\n}"
          },
          {
            "lang": "Ruby",
            "source": "require 'droplet_kit'\ntoken = ENV['DIGITALOCEAN_TOKEN']\nclient = DropletKit::Client.new(access_token: token)\n\ncluster = DropletKit::KubernetesCluster.new(\n  name: 'prod-cluster-01',\n  region: 'nyc1',\n  version: '1.14.1-do.4',\n  tags: ['production', 'web-team'],\n  node_pools: [\n    {\n      name: 'frontend-pool',\n      size: 's-2vcpu-2gb',\n      count: 3,\n      tags: ['frontend'],\n      labels: {service: 'frontend', priority: 'high'}\n    },\n    {\n      name: 'backend-pool',\n      size: 'c-4',\n      count: 2\n    }\n  ]\n)\n\nclient.kubernetes_clusters.create(cluster)"
          }
        ]
      }
    },
    "/v2/kubernetes/clusters/{cluster_id}": {
      "get": {
        "operationId": "get_kubernetes_cluster",
        "summary": "Retrieve an Existing Kubernetes Cluster",
        "description": "To show information about an existing Kubernetes cluster, send a GET request\nto `/v2/kubernetes/clusters/$K8S_CLUSTER_ID`.\n",
        "tags": [
          "Kubernetes"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/kubernetes_cluster_id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/existing_cluster"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  \"https://api.digitalocean.com/v2/kubernetes/clusters/bd5f5959-5e1e-4205-a714-a914373942af\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"os\"\n\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n    client := godo.NewFromToken(token)\n    ctx := context.TODO()\n\n    cluster, _, err := client.Kubernetes.Get(ctx, \"bd5f5959-5e1e-4205-a714-a914373942af\")\n}"
          },
          {
            "lang": "Ruby",
            "source": "require 'droplet_kit'\ntoken = ENV['DIGITALOCEAN_TOKEN']\nclient = DropletKit::Client.new(access_token: token)\n\nclient.kubernetes_clusters.find(id: 'bd5f5959-5e1e-4205-a714-a914373942af')"
          }
        ]
      },
      "put": {
        "operationId": "update_kubernetes_cluster",
        "summary": "Update a Kubernetes Cluster",
        "description": "To update a Kubernetes cluster, send a PUT request to\n`/v2/kubernetes/clusters/$K8S_CLUSTER_ID` and specify one or more of the\nattributes below.\n",
        "tags": [
          "Kubernetes"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/kubernetes_cluster_id"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/cluster_update"
              }
            }
          }
        },
        "responses": {
          "202": {
            "$ref": "#/components/responses/updated_cluster"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X PUT \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  -d '{\"name\": \"stage-cluster-01\", \"tags\":[\"staging\", \"web-team\"]}' \\\n  \"https://api.digitalocean.com/v2/kubernetes/clusters/bd5f5959-5e1e-4205-a714-a914373942af\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"os\"\n\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n    client := godo.NewFromToken(token)\n    ctx := context.TODO()\n\n    updateRequest := &godo.KubernetesClusterUpdateRequest{\n        Name: \"stage-cluster-01\",\n        Tags: []string{\"staging\", \"web-team\"},\n    }\n\n    cluster, _, err := client.Kubernetes.Update(ctx, \"bd5f5959-5e1e-4205-a714-a914373942af\", updateRequest)\n}"
          },
          {
            "lang": "Ruby",
            "source": "require 'droplet_kit'\ntoken = ENV['DIGITALOCEAN_TOKEN']\nclient = DropletKit::Client.new(access_token: token)\n\ncluster = DropletKit::KubernetesCluster.new(  name: 'foo',\n  tags: ['staging', 'web-team']\n)\n\nclient.kubernetes_clusters.update(cluster, id: 'bd5f5959-5e1e-4205-a714-a914373942af')"
          }
        ]
      },
      "delete": {
        "operationId": "delete_kubernetes_cluster",
        "summary": "Delete a Kubernetes Cluster",
        "description": "To delete a Kubernetes cluster and all services deployed to it, send a DELETE\nrequest to `/v2/kubernetes/clusters/$K8S_CLUSTER_ID`.\n\nA 204 status code with no body will be returned in response to a successful\nrequest.\n",
        "tags": [
          "Kubernetes"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/kubernetes_cluster_id"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/no_content"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X DELETE \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  \"https://api.digitalocean.com/v2/kubernetes/clusters/bd5f5959-5e1e-4205-a714-a914373942af\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"os\"\n\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n    client := godo.NewFromToken(token)\n    ctx := context.TODO()\n\n    _, err := client.Kubernetes.Delete(ctx, \"bd5f5959-5e1e-4205-a714-a914373942af\")\n}"
          },
          {
            "lang": "Ruby",
            "source": "require 'droplet_kit'\ntoken = ENV['DIGITALOCEAN_TOKEN']\nclient = DropletKit::Client.new(access_token: token)\n\nclient.kubernetes_clusters.delete(id: 'bd5f5959-5e1e-4205-a714-a914373942af')"
          }
        ]
      }
    },
    "/v2/kubernetes/clusters/{cluster_id}/destroy_with_associated_resources": {
      "get": {
        "operationId": "list_kubernetes_associated_resources",
        "summary": "List Associated Resources for Cluster Deletion",
        "description": "To list the associated billable resources that can be destroyed along with a cluster, send a GET request to the `/v2/kubernetes/clusters/$K8S_CLUSTER_ID/destroy_with_associated_resources` endpoint.",
        "tags": [
          "Kubernetes"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/kubernetes_cluster_id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/associated_kubernetes_resources_list"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X DELETE \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  \"https://api.digitalocean.com/v2/kubernetes/clusters/bd5f5959-5e1e-4205-a714-a914373942af/destroy_with_associated_resources\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"os\"\n\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n    client := godo.NewFromToken(token)\n    ctx := context.TODO()\n\n    _, err := client.Kubernetes.ListAssociatedResourcesForDeletion(ctx, \"bd5f5959-5e1e-4205-a714-a914373942af\")\n\n}"
          }
        ]
      }
    },
    "/v2/kubernetes/clusters/{cluster_id}/destroy_with_associated_resources/selective": {
      "delete": {
        "operationId": "destroy_kubernetes_associated_resources_selective",
        "summary": "Selectively Delete a Cluster and its Associated Resources",
        "description": "To delete a Kubernetes cluster along with a subset of its associated resources,\nsend a DELETE request to `/v2/kubernetes/clusters/$K8S_CLUSTER_ID/destroy_with_associated_resources/selective`.\n\nThe JSON body of the request should include `load_balancers`, `volumes`, or\n`volume_snapshots` keys each set to an array of IDs for the associated\nresources to be destroyed.\n\nThe IDs can be found by querying the cluster's associated resources endpoint.\nAny associated resource not included in the request will remain and continue\nto accrue changes on your account.\n",
        "tags": [
          "Kubernetes"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/kubernetes_cluster_id"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/destroy_associated_kubernetes_resources"
              }
            }
          }
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/no_content"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X DELETE \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  -d '{\"load_balancers\": [\"4de7ac8b-495b-4884-9a69-1050c6793cd6\"],\"volumes\": [\"ba49449a-7435-11ea-b89e-0a58ac14480f\"],\"volume_snapshots\": [\"edb0478d-7436-11ea-86e6-0a58ac144b91\"]}' \\\n  \"https://api.digitalocean.com/v2/kubernetes/clusters/bd5f5959-5e1e-4205-a714-a914373942af/destroy_with_associated_resources/selective\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"os\"\n\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n    client := godo.NewFromToken(token)\n    ctx := context.TODO()\n\n    deleteReq := &godo.KubernetesClusterDeleteSelectiveRequest{Volumes: []string{\"ba49449a-7435-11ea-b89e-0a58ac14480f\"}}, _, err := client.Kubernetes.DeleteSelective(ctx, \"bd5f5959-5e1e-4205-a714-a914373942af\", deleteReq)\n}"
          }
        ]
      }
    },
    "/v2/kubernetes/clusters/{cluster_id}/destroy_with_associated_resources/dangerous": {
      "delete": {
        "operationId": "destroy_kubernetes_associated_resources_dangerous",
        "summary": "Delete a Cluster and All of its Associated Resources (Dangerous)",
        "description": "To delete a Kubernetes cluster with all of its associated resources, send a\nDELETE request to `/v2/kubernetes/clusters/$K8S_CLUSTER_ID/destroy_with_associated_resources/dangerous`.\nA 204 status code with no body will be returned in response to a successful request.\n",
        "tags": [
          "Kubernetes"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/kubernetes_cluster_id"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/no_content"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X DELETE \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  \"https://api.digitalocean.com/v2/kubernetes/clusters/bd5f5959-5e1e-4205-a714-a914373942af/destroy_with_associated_resources/dangerous\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"os\"\n\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n    client := godo.NewFromToken(token)\n    ctx := context.TODO()\n\n    _, err := client.Kubernetes.DeleteDangerous(ctx, \"bd5f5959-5e1e-4205-a714-a914373942af\")\n}"
          }
        ]
      }
    },
    "/v2/kubernetes/clusters/{cluster_id}/kubeconfig": {
      "get": {
        "operationId": "get_kubeconfig",
        "summary": "Retrieve the kubeconfig for a Kubernetes Cluster",
        "description": "This endpoint returns a kubeconfig file in YAML format. It can be used to\nconnect to and administer the cluster using the Kubernetes command line tool,\n`kubectl`, or other programs supporting kubeconfig files (e.g., client libraries).\n\nThe resulting kubeconfig file uses token-based authentication for clusters\nsupporting it, and certificate-based authentication otherwise. For a list of\nsupported versions and more information, see \"[How to Connect to a DigitalOcean\nKubernetes Cluster with kubectl](https://www.digitalocean.com/docs/kubernetes/how-to/connect-with-kubectl/)\".\n\nTo retrieve a kubeconfig file for use with a Kubernetes cluster, send a GET\nrequest to `/v2/kubernetes/clusters/$K8S_CLUSTER_ID/kubeconfig`.\n\nClusters supporting token-based authentication may define an expiration by\npassing a duration in seconds as a query parameter to\n`/v2/kubernetes/clusters/$K8S_CLUSTER_ID/kubeconfig?expiry_seconds=$DURATION_IN_SECONDS`.\nIf not set or 0, then the token will have a 7 day expiry. The query parameter\nhas no impact in certificate-based authentication.\n",
        "tags": [
          "Kubernetes"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/kubernetes_cluster_id"
          },
          {
            "$ref": "#/components/parameters/kubernetes_expiry_seconds"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/kubeconfig"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  \"https://api.digitalocean.com/v2/kubernetes/clusters/bd5f5959-5e1e-4205-a714-a914373942af/kubeconfig\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"os\"\n\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n    client := godo.NewFromToken(token)\n    ctx := context.TODO()\n\n    config, _, err := client.Kubernetes.GetKubeConfig(ctx, \"bd5f5959-5e1e-4205-a714-a914373942af\")\n\n    kubeConfigFile := string(config.KubeconfigYAML)\n}"
          },
          {
            "lang": "Ruby",
            "source": "require 'droplet_kit'\ntoken = ENV['DIGITALOCEAN_TOKEN']\nclient = DropletKit::Client.new(access_token: token)\n\nclient.kubernetes_clusters.kubeconfig(id: 'bd5f5959-5e1e-4205-a714-a914373942af')"
          }
        ]
      }
    },
    "/v2/kubernetes/clusters/{cluster_id}/credentials": {
      "get": {
        "operationId": "get_credentials",
        "summary": "Retrieve Credentials for a Kubernetes Cluster",
        "description": "This endpoint returns a JSON object . It can be used to programmatically\nconstruct Kubernetes clients which cannot parse kubeconfig files.\n\nThe resulting JSON object contains token-based authentication for clusters\nsupporting it, and certificate-based authentication otherwise. For a list of\nsupported versions and more information, see \"[How to Connect to a DigitalOcean\nKubernetes Cluster with kubectl](https://www.digitalocean.com/docs/kubernetes/how-to/connect-with-kubectl/)\".\n\nTo retrieve credentials for accessing a Kubernetes cluster, send a GET\nrequest to `/v2/kubernetes/clusters/$K8S_CLUSTER_ID/credentials`.\n\nClusters supporting token-based authentication may define an expiration by\npassing a duration in seconds as a query parameter to\n`/v2/kubernetes/clusters/$K8S_CLUSTER_ID/kubeconfig?expiry_seconds=$DURATION_IN_SECONDS`.\nIf not set or 0, then the token will have a 7 day expiry. The query parameter\nhas no impact in certificate-based authentication.\n",
        "tags": [
          "Kubernetes"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/kubernetes_cluster_id"
          },
          {
            "$ref": "#/components/parameters/kubernetes_expiry_seconds"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/credentials"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  \"https://api.digitalocean.com/v2/kubernetes/clusters/bd5f5959-5e1e-4205-a714-a914373942af/credentials\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"os\"\n\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n    client := godo.NewFromToken(token)\n    ctx := context.TODO()\n\n    credentials, _, err := client.Kubernetes.GetCredentials(ctx, \"bd5f5959-5e1e-4205-a714-a914373942af\")\n}"
          },
          {
            "lang": "Ruby",
            "source": "require 'droplet_kit'\ntoken = ENV['DIGITALOCEAN_TOKEN']\nclient = DropletKit::Client.new(access_token: token)\n\nclient.kubernetes_clusters.credentials(id: 'bd5f5959-5e1e-4205-a714-a914373942af')"
          }
        ]
      }
    },
    "/v2/kubernetes/clusters/{cluster_id}/upgrades": {
      "get": {
        "operationId": "get_available_upgrades",
        "summary": "Retrieve Available Upgrades for an Existing Kubernetes Cluster",
        "description": "To determine whether a cluster can be upgraded, and the versions to which it\ncan be upgraded, send a GET request to\n`/v2/kubernetes/clusters/$K8S_CLUSTER_ID/upgrades`.\n",
        "tags": [
          "Kubernetes"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/kubernetes_cluster_id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/available_upgrades"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  \"https://api.digitalocean.com/v2/kubernetes/clusters/bd5f5959-5e1e-4205-a714-a914373942af/upgrades\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"os\"\n\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n    client := godo.NewFromToken(token)\n    ctx := context.TODO()\n\n    upgrades, _, err := client.Kubernetes.GetUpgrades(ctx, \"bd5f5959-5e1e-4205-a714-a914373942af\")\n}"
          }
        ]
      }
    },
    "/v2/kubernetes/clusters/{cluster_id}/upgrade": {
      "post": {
        "operationId": "upgrade_kubernetes_cluster",
        "summary": "Upgrade a Kubernetes Cluster",
        "description": "To immediately upgrade a Kubernetes cluster to a newer patch release of\nKubernetes, send a POST request to `/v2/kubernetes/clusters/$K8S_CLUSTER_ID/upgrade`.\nThe body of the request must specify a version attribute.\n\nAvailable upgrade versions for a cluster can be fetched from\n`/v2/kubernetes/clusters/$K8S_CLUSTER_ID/upgrades`.\n",
        "tags": [
          "Kubernetes"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/kubernetes_cluster_id"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "version": {
                    "type": "string",
                    "example": "1.16.13-do.0",
                    "description": "The slug identifier for the version of Kubernetes that the cluster will be upgraded to."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "202": {
            "$ref": "#/components/responses/accepted"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  \"https://api.digitalocean.com/v2/kubernetes/clusters/bd5f5959-5e1e-4205-a714-a914373942af/upgrades\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"os\"\n\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n    client := godo.NewFromToken(token)\n    ctx := context.TODO()\n\n    upgradeRequest := &godo.KubernetesClusterUpgradeRequest{\n    \tVersionSlug: \"1.12.3-do.1\",\n    }\n}"
          }
        ]
      }
    },
    "/v2/kubernetes/clusters/{cluster_id}/node_pools": {
      "get": {
        "operationId": "list_node_pools",
        "summary": "List All Node Pools in a Kubernetes Clusters",
        "description": "To list all of the node pools in a Kubernetes clusters, send a GET request to\n`/v2/kubernetes/clusters/$K8S_CLUSTER_ID/node_pools`.\n",
        "tags": [
          "Kubernetes"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/kubernetes_cluster_id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/all_node_pools"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  \"https://api.digitalocean.com/v2/kubernetes/clusters/bd5f5959-5e1e-4205-a714-a914373942af/node_pools\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"os\"\n\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n    client := godo.NewFromToken(token)\n    ctx := context.TODO()\n\n    opt := &godo.ListOptions{\n        Page:    1,\n        PerPage: 200,\n    }\n\n    nodePools, _, err := client.Kubernetes.ListNodePools(ctx, \"9b729d1c-730c-42e1-b136-59326fb1b3bb\", opt)\n}"
          },
          {
            "lang": "Ruby",
            "source": "require 'droplet_kit'\ntoken = ENV['DIGITALOCEAN_TOKEN']\nclient = DropletKit::Client.new(access_token: token)\n\nnode_pools = client.kubernetes_clusters.node_pools(id: 'bd5f5959-5e1e-4205-a714-a914373942af')\nnode_pools.each"
          }
        ]
      },
      "post": {
        "operationId": "add_kubernetes_node_pool",
        "summary": "Add a Node Pool to a Kubernetes Cluster",
        "description": "To add an additional node pool to a Kubernetes clusters, send a POST request\nto `/v2/kubernetes/clusters/$K8S_CLUSTER_ID/node_pools` with the following\nattributes.\n",
        "tags": [
          "Kubernetes"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/kubernetes_cluster_id"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/kubernetes_node_pool"
              },
              "example": {
                "size": "s-1vcpu-2gb",
                "count": 3,
                "name": "new-pool",
                "tags": [
                  "frontend"
                ],
                "auto_scale": true,
                "min_nodes": 3,
                "max_nodes": 6
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/node_pool_create"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  -d '{\"size\": \"s-2vcpu-4gb\",\"count\": 1,\"name\": \"pool-02\",\"tags\": [\"web\"], \"labels\": {\"service\": \"web\", \"priority\": \"high\"}}' \\\n  \"https://api.digitalocean.com/v2/kubernetes/clusters/bd5f5959-5e1e-4205-a714-a914373942af/node_pools\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"os\"\n\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n    client := godo.NewFromToken(token)\n    ctx := context.TODO()\n\n    createRequest := &godo.KubernetesNodePoolCreateRequest{\n        Name:  \"pool-02\",\n        Size:  \"s-2vcpu-4gb\",\n        Count: 1,\n        Tags:  []string{\"web\"},\n        Labels:  map[string]string{\"service\": \"web\", \"priority\": \"high\"},\n    }\n\n    nodePool, _, err := client.Kubernetes.CreateNodePool(ctx, \"bd5f5959-5e1e-4205-a714-a914373942af\", createRequest)\n}"
          },
          {
            "lang": "Ruby",
            "source": "require 'droplet_kit'\ntoken = ENV['DIGITALOCEAN_TOKEN']\nclient = DropletKit::Client.new(access_token: token)\n\nnode_pool = DropletKit::KubernetesNodePool.new(  name: 'pool-02',\n  size: 's-2vcpu-4gb',\n  count: 1,\n  tags: ['web']\n  labels: {service: 'web', priority: 'high'}\n)\n\nclient.kubernetes_clusters.create_node_pool(node_pool, id: 'bd5f5959-5e1e-4205-a714-a914373942af')"
          }
        ]
      }
    },
    "/v2/kubernetes/clusters/{cluster_id}/node_pools/{node_pool_id}": {
      "get": {
        "operationId": "get_node_pool",
        "summary": "Retrieve a Node Pool for a Kubernetes Cluster",
        "description": "To show information about a specific node pool in a Kubernetes cluster, send\na GET request to `/v2/kubernetes/clusters/$K8S_CLUSTER_ID/node_pools/$NODE_POOL_ID`.\n",
        "tags": [
          "Kubernetes"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/kubernetes_cluster_id"
          },
          {
            "$ref": "#/components/parameters/kubernetes_node_pool_id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/existing_node_pool"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  \"https://api.digitalocean.com/v2/kubernetes/clusters/bd5f5959-5e1e-4205-a714-a914373942af/credentials\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"os\"\n\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n    client := godo.NewFromToken(token)\n    ctx := context.TODO()\n\n    nodePool, _, err := client.Kubernetes.GetNodePool(ctx, \"bd5f5959-5e1e-4205-a714-a914373942af\", \"cdda885e-7663-40c8-bc74-3a036c66545d\")\n}"
          },
          {
            "lang": "Ruby",
            "source": "require 'droplet_kit'\ntoken = ENV['DIGITALOCEAN_TOKEN']\nclient = DropletKit::Client.new(access_token: token)\n\nclient.kubernetes_clusters.find_node_pool(id: 'bd5f5959-5e1e-4205-a714-a914373942af', pool_id: 'cdda885e-7663-40c8-bc74-3a036c66545d')"
          }
        ]
      },
      "put": {
        "operationId": "update_kubernetes_node_pool",
        "summary": "Update a Node Pool in a Kubernetes Cluster",
        "description": "To update the name of a node pool, edit the tags applied to it, or adjust its\nnumber of nodes, send a PUT request to\n`/v2/kubernetes/clusters/$K8S_CLUSTER_ID/node_pools/$NODE_POOL_ID` with the\nfollowing attributes.\n",
        "tags": [
          "Kubernetes"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/kubernetes_cluster_id"
          },
          {
            "$ref": "#/components/parameters/kubernetes_node_pool_id"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/kubernetes_node_pool_update"
              }
            }
          }
        },
        "responses": {
          "202": {
            "$ref": "#/components/responses/node_pool_update"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X PUT \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  -d '{\"name\": \"frontend\",\"count\": 1, \"tags\":[\"frontend\"], \"labels\": {\"service\": \"frontend\", \"priority\": \"high\"}}' \\\n  \"https://api.digitalocean.com/v2/kubernetes/clusters/bd5f5959-5e1e-4205-a714-a914373942af/node_pools/86c9bc8c-b2c3-4d40-8000-b0c7bee27305\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"os\"\n\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n    client := godo.NewFromToken(token)\n    ctx := context.TODO()\n\n    updateRequest := &godo.KubernetesNodePoolUpdateRequest{\n            Name:  \"frontend\",\n            Count: 1,\n            Tags:  []string{\"frontend\"},\n        Labels:  map[string]string{\"service\": \"frontend\", \"priority\": \"high\"},\n        }\n\n    nodePool, _, err := client.Kubernetes.UpdateNodePool(ctx, \"9b729d1c-730c-42e1-b136-59326fb1b3bb\", \"e7ed8f7c-6c1e-472f-adfb-4a9a1688b999\", updateRequest)\n}"
          },
          {
            "lang": "Ruby",
            "source": "require 'droplet_kit'\ntoken = ENV['DIGITALOCEAN_TOKEN']\nclient = DropletKit::Client.new(access_token: token)\n\nnode_pool = DropletKit::KubernetesNodePool.new(  name: 'frontend',\n  count: 1,\n  tags: ['frontend']\n  labels: {service: 'frontend', priority: 'high'}\n)\n\nclient.kubernetes_clusters.update_node_pool(node_pool, id: 'bd5f5959-5e1e-4205-a714-a914373942af', pool_id: '86c9bc8c-b2c3-4d40-8000-b0c7bee27305')"
          }
        ]
      },
      "delete": {
        "operationId": "delete_kubernetes_node_pool",
        "summary": "Delete a Node Pool in a Kubernetes Cluster",
        "description": "To delete a node pool, send a DELETE request to\n`/v2/kubernetes/clusters/$K8S_CLUSTER_ID/node_pools/$NODE_POOL_ID`.\n\nA 204 status code with no body will be returned in response to a successful\nrequest. Nodes in the pool will subsequently be drained and deleted.\n",
        "tags": [
          "Kubernetes"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/kubernetes_cluster_id"
          },
          {
            "$ref": "#/components/parameters/kubernetes_node_pool_id"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/no_content"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X DELETE \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  \"https://api.digitalocean.com/v2/kubernetes/clusters/bd5f5959-5e1e-4205-a714-a914373942af/node_pools/86c9bc8c-b2c3-4d40-8000-b0c7bee27305\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"os\"\n\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n    client := godo.NewFromToken(token)\n    ctx := context.TODO()\n\n    _, err := client.Kubernetes.DeleteNodePool(ctx, \"bd5f5959-5e1e-4205-a714-a914373942af\", \"86c9bc8c-b2c3-4d40-8000-b0c7bee27305\")\n}"
          },
          {
            "lang": "Ruby",
            "source": "require 'droplet_kit'\ntoken = ENV['DIGITALOCEAN_TOKEN']\nclient = DropletKit::Client.new(access_token: token)\n\nclient.kubernetes_clusters.delete_node_pool(id: 'bd5f5959-5e1e-4205-a714-a914373942af', pool_id: '86c9bc8c-b2c3-4d40-8000-b0c7bee27305')"
          }
        ]
      }
    },
    "/v2/kubernetes/clusters/{cluster_id}/node_pools/{node_pool_id}/nodes/{node_id}": {
      "delete": {
        "operationId": "delete_kubernetes_node",
        "summary": "Delete a Node in a Kubernetes Cluster",
        "description": "To delete a single node in a pool, send a DELETE request to\n`/v2/kubernetes/clusters/$K8S_CLUSTER_ID/node_pools/$NODE_POOL_ID/nodes/$NODE_ID`.\n\nAppending the `skip_drain=1` query parameter to the request causes node\ndraining to be skipped. Omitting the query parameter or setting its value to\n`0` carries out draining prior to deletion.\n\nAppending the `replace=1` query parameter to the request causes the node to\nbe replaced by a new one after deletion. Omitting the query parameter or\nsetting its value to `0` deletes without replacement.\n",
        "tags": [
          "Kubernetes"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/kubernetes_cluster_id"
          },
          {
            "$ref": "#/components/parameters/kubernetes_node_pool_id"
          },
          {
            "$ref": "#/components/parameters/kubernetes_node_id"
          },
          {
            "$ref": "#/components/parameters/kubernetes_node_skip_drain"
          },
          {
            "$ref": "#/components/parameters/kubernetes_node_replace"
          }
        ],
        "responses": {
          "202": {
            "$ref": "#/components/responses/accepted"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X DELETE \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  \"https://api.digitalocean.com/v2/kubernetes/clusters/bd5f5959-5e1e-4205-a714-a914373942af/node_pools/86c9bc8c-b2c3-4d40-8000-b0c7bee27305/nodes/478247f8-b1bb-4f7a-8db9-2a5f8d4b8f8f?skip_drain=0&replace=1\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"os\"\n\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n    client := godo.NewFromToken(token)\n    ctx := context.TODO()\n\n    recycleRequest := &godo.KubernetesNodePoolRecycleNodesRequest{\n        Nodes: []string{\"3385619f-8ec3-42ba-bb23-8d21b8ba7518\", \"4b8f60ff-ba06-4523-a6a4-b8148244c7e6\"},\n    }\n\n    _, err := client.Kubernetes.RecycleNodePoolNodes(ctx, \"bd5f5959-5e1e-4205-a714-a914373942af\", \"86c9bc8c-b2c3-4d40-8000-b0c7bee27305\", recycleRequest)\n}"
          }
        ]
      }
    },
    "/v2/kubernetes/clusters/{cluster_id}/node_pools/{node_pool_id}/recycle": {
      "post": {
        "operationId": "recycle_kubernetes_node_pool",
        "deprecated": true,
        "summary": "Recycle a Kubernetes Node Pool",
        "description": "The endpoint has been deprecated. Please use the DELETE\n`/v2/kubernetes/clusters/$K8S_CLUSTER_ID/node_pools/$NODE_POOL_ID/nodes/$NODE_ID`\nmethod instead.\n",
        "tags": [
          "Kubernetes"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/kubernetes_cluster_id"
          },
          {
            "$ref": "#/components/parameters/kubernetes_node_pool_id"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "nodes": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "example": [
                      "d8db5e1a-6103-43b5-a7b3-8a948210a9fc"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "202": {
            "$ref": "#/components/responses/accepted"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        }
      }
    },
    "/v2/kubernetes/clusters/{cluster_id}/user": {
      "get": {
        "operationId": "get_cluster_user",
        "summary": "Retrieve User Information for a Kubernetes Cluster",
        "description": "To show information the user associated with a Kubernetes cluster, send a GET\nrequest to `/v2/kubernetes/clusters/$K8S_CLUSTER_ID/user`.\n",
        "tags": [
          "Kubernetes"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/kubernetes_cluster_id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/cluster_user"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        }
      }
    },
    "/v2/kubernetes/options": {
      "get": {
        "operationId": "list_kubernetes_options",
        "summary": "List Available Regions, Node Sizes, and Versions of Kubernetes",
        "description": "To list the versions of Kubernetes available for use, the regions that support Kubernetes, and the available node sizes, send a GET request to `/v2/kubernetes/options`.",
        "tags": [
          "Kubernetes"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/all_options"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  \"https://api.digitalocean.com/v2/kubernetes/options\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"os\"\n\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n    client := godo.NewFromToken(token)\n    ctx := context.TODO()\n\n    options, _, err := client.Kubernetes.GetOptions(ctx)\n}"
          },
          {
            "lang": "Ruby",
            "source": "require 'droplet_kit'\ntoken = ENV['DIGITALOCEAN_TOKEN']\nclient = DropletKit::Client.new(access_token: token)\n\nclient.kubernetes_options.all"
          }
        ]
      }
    },
    "/v2/kubernetes/clusters/{cluster_id}/clusterlint": {
      "post": {
        "operationId": "run_clusterlint",
        "summary": "Run Clusterlint Checks on a Kubernetes Cluster",
        "description": "Clusterlint helps operators conform to Kubernetes best practices around\nresources, security and reliability to avoid common problems while operating\nor upgrading the clusters.\n\nTo request a clusterlint run on your cluster, send a POST request to\n`/v2/kubernetes/clusters/$K8S_CLUSTER_ID/clusterlint`. This will run all\nchecks present in the `doks` group by default, if a request body is not\nspecified. Optionally specify the below attributes.\n\nFor information about the available checks, please refer to\n[the clusterlint check documentation](https://github.com/digitalocean/clusterlint/blob/master/checks.md).\n",
        "tags": [
          "Kubernetes"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/kubernetes_cluster_id"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/clusterlint_request"
              }
            }
          }
        },
        "responses": {
          "202": {
            "$ref": "#/components/responses/clusterlint_run"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  -d '{\"include_groups\": [\"basic\"], \"include_checks\": [\"bare-pods\"]}' \\\n  \"https://api.digitalocean.com/v2/kubernetes/clusters/bd5f5959-5e1e-4205-a714-a914373942af/clusterlint\""
          }
        ]
      },
      "get": {
        "operationId": "get_clusterlint_results",
        "summary": "Fetch Clusterlint Diagnostics for a Kubernetes Cluster",
        "description": "To request clusterlint diagnostics for your cluster, send a GET request to\n`/v2/kubernetes/clusters/$K8S_CLUSTER_ID/clusterlint`. If the `run_id` query\nparameter is provided, then the diagnostics for the specific run is fetched.\nBy default, the latest results are shown.\n\nTo find out how to address clusterlint feedback, please refer to\n[the clusterlint check documentation](https://github.com/digitalocean/clusterlint/blob/master/checks.md).\n",
        "tags": [
          "Kubernetes"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/kubernetes_cluster_id"
          },
          {
            "$ref": "#/components/parameters/clusterlint_run_id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/clusterlint_results"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  \"https://api.digitalocean.com/v2/kubernetes/clusters/bd5f5959-5e1e-4205-a714-a914373942af/clusterlint\""
          }
        ]
      }
    },
    "/v2/kubernetes/registry": {
      "post": {
        "operationId": "add_registry",
        "summary": "Add Container Registry to Kubernetes Clusters",
        "description": "To integrate the container registry with Kubernetes clusters, send a POST request to `/v2/kubernetes/registry`.",
        "tags": [
          "Kubernetes"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/cluster_registries"
              }
            }
          }
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/no_content"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  -d '{\"cluster_uuids\": [\"bd5f5959-5e1e-4205-a714-a914373942af\", \"50c2f44c-011d-493e-aee5-361a4a0d1844\"]}' \\\n  \"https://api.digitalocean.com/v2/kubernetes/registry\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"os\"\n\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n    client := godo.NewFromToken(token)\n    ctx := context.TODO()\n\n    _, err := client.Kubernetes.AddRegistry(ctx, &godo.KubernetesClusterRegistryRequest{ClusterUUIDs: []string{\"bd5f5959-5e1e-4205-a714-a914373942af\"}})\n}"
          }
        ]
      },
      "delete": {
        "operationId": "remove_registry",
        "summary": "Remove Container Registry from Kubernetes Clusters",
        "description": "To remove the container registry from Kubernetes clusters, send a DELETE request to `/v2/kubernetes/registry`.",
        "tags": [
          "Kubernetes"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/cluster_registries"
              }
            }
          }
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/no_content"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X DELETE \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  -d '{\"cluster_uuids\": [\"bd5f5959-5e1e-4205-a714-a914373942af\", \"50c2f44c-011d-493e-aee5-361a4a0d1844\"]}' \\\n  \"https://api.digitalocean.com/v2/kubernetes/registry\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"os\"\n\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n    client := godo.NewFromToken(token)\n    ctx := context.TODO()\n\n    _, err := client.Kubernetes.RemoveRegistry(ctx, &godo.KubernetesClusterRegistryRequest{ClusterUUIDs: []string{\"bd5f5959-5e1e-4205-a714-a914373942af\"}})\n}"
          }
        ]
      }
    },
    "/v2/load_balancers": {
      "post": {
        "operationId": "create_load_balancer",
        "summary": "Create a New Load Balancer",
        "description": "To create a new load balancer instance, send a POST request to\n`/v2/load_balancers`.\n\nYou can specify the Droplets that will sit behind the load balancer using one\nof two methods:\n\n* Set `droplet_ids` to a list of specific Droplet IDs.\n* Set `tag` to the name of a tag. All Droplets with this tag applied will be  assigned to the load balancer. Additional Droplets will be automatically\n  assigned as they are tagged.\n\nThese methods are mutually exclusive.\n",
        "tags": [
          "Load Balancers"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/load_balancer_create"
              },
              "examples": {
                "Basic Create Request": {
                  "$ref": "#/components/examples/load_balancer_basic_create_request"
                },
                "SSL Termination Create Request": {
                  "$ref": ""
                },
                "Create Request Using Droplet Tag": {
                  "$ref": "#/components/examples/load_balancer_using_tag_create_request"
                },
                "Sticky Sessions and Custom Health Check": {
                  "$ref": ""
                }
              }
            }
          }
        },
        "responses": {
          "202": {
            "$ref": "#/components/responses/load_balancer_create"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  -d '{\"name\": \"example-lb-01\",\"size\": \"lb-small\",\"region\": \"nyc3\", \"forwarding_rules\":[{\"entry_protocol\":\"http\",\"entry_port\":80,\"target_protocol\":\"http\",\"target_port\":80,\"certificate_id\":\"\",\"tls_passthrough\":false}, {\"entry_protocol\": \"https\",\"entry_port\": 444,\"target_protocol\": \"https\",\"target_port\": 443,\"tls_passthrough\": true}], \"health_check\":{\"protocol\":\"http\",\"port\":80,\"path\":\"/\",\"check_interval_seconds\":10,\"response_timeout_seconds\":5,\"healthy_threshold\":5,\"unhealthy_threshold\":3}, \"sticky_sessions\":{\"type\":\"none\"}, \"droplet_ids\": [3164444, 3164445]}' \\\n  \"https://api.digitalocean.com/v2/load_balancers\"\n\ncurl -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  -d '{\"name\": \"example-lb-01\", \"region\": \"nyc3\", \"size\": \"lb-small\", \"forwarding_rules\":[{\"entry_protocol\":\"http\",\"entry_port\":80,\"target_protocol\":\"http\",\"target_port\":80,\"certificate_id\":\"\",\"tls_passthrough\":false}, {\"entry_protocol\": \"https\",\"entry_port\": 444,\"target_protocol\": \"https\",\"target_port\": 443,\"tls_passthrough\": true}], \"health_check\":{\"protocol\":\"http\",\"port\":80,\"path\":\"/\",\"check_interval_seconds\":10,\"response_timeout_seconds\":5,\"healthy_threshold\":5,\"unhealthy_threshold\":3}, \"sticky_sessions\":{\"type\":\"none\"}, \"tag\": \"web:prod\"}' \\\n  \"https://api.digitalocean.com/v2/load_balancers\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"os\"\n\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n    client := godo.NewFromToken(token)\n    ctx := context.TODO()\n\n    createRequest := &godo.LoadBalancerRequest{\n        Name:      \"example-01\",\n        Size:      \"lb-medium\",\n        Algorithm: \"round_robin\",\n        Region:    \"nyc3\",\n        ForwardingRules: []godo.ForwardingRule{\n            {\n                EntryProtocol:  \"http\",\n                EntryPort:      80,\n                TargetProtocol: \"http\",\n                TargetPort:     80,\n            },\n            {\n                EntryProtocol:  \"https\",\n                EntryPort:      443,\n                TargetProtocol: \"https\",\n                TargetPort:     443,\n                TlsPassthrough: true,\n            },\n        },\n        HealthCheck: &godo.HealthCheck{\n            Protocol:               \"http\",\n            Port:                   80,\n            Path:                   \"/\",\n            CheckIntervalSeconds:   10,\n            ResponseTimeoutSeconds: 5,\n            HealthyThreshold:       5,\n            UnhealthyThreshold:     3,\n        },\n        StickySessions: &godo.StickySessions{\n            Type: \"none\",\n        },\n        DropletIDs:          []int{3164444, 3164445},\n        RedirectHttpToHttps: false,\n  // Create new load balancer with Droplet tag\n  //     Tag:                 \"web:prod\",\n  //     RedirectHttpToHttps: false,\n    }\n\n    lb, _, err := client.LoadBalancers.Create(ctx, createRequest)"
          },
          {
            "lang": "Ruby",
            "source": "require 'droplet_kit'\ntoken = ENV['DIGITALOCEAN_TOKEN']\nclient = DropletKit::Client.new(access_token: token)\n\nload_balancer = DropletKit::LoadBalancer.new(\n  name: 'example-lb-01',\n  size: 'lb-medium',\n  algorithm: 'round_robin',\n  droplet_ids: [ 3164444, 3164445],\n  redirect_http_to_https: true,\n  region: 'nyc3',\n  forwarding_rules: [\n    DropletKit::ForwardingRule.new(\n      entry_protocol: 'http',\n      entry_port: 80,\n      target_protocol: 'http',\n      target_port: 80,\n      certificate_id: '',\n      tls_passthrough: false\n    ),\n    DropletKit::ForwardingRule.new(\n      entry_protocol: 'https',\n      entry_port: 443,\n      target_protocol: 'https',\n      target_port: 443,\n      certificate_id: '',\n      tls_passthrough: true\n    )\n  ],\n  sticky_sessions: DropletKit::StickySession.new(\n    type: 'cookies',\n    cookie_name: 'DO-LB',\n    cookie_ttl_seconds: 5\n  ),\n  health_check: DropletKit::HealthCheck.new(\n    protocol: 'http',\n    port: 80,\n    path: '/',\n    check_interval_seconds: 10,\n    response_timeout_seconds: 5,\n    healthy_threshold: 5,\n    unhealthy_threshold: 3\n  )\n)\nclient.load_balancers.create(load_balancer)"
          }
        ]
      },
      "get": {
        "operationId": "list_all_load_balancers",
        "summary": "List All Load Balancers",
        "description": "To list all of the load balancer instances on your account, send a GET request\nto `/v2/load_balancers`.\n",
        "tags": [
          "Load Balancers"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/all_load_balancers"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  \"https://api.digitalocean.com/v2/load_balancers\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"os\"\n\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n    client := godo.NewFromToken(token)\n    ctx := context.TODO()\n\n    opt := &godo.ListOptions{\n        Page:    1,\n        PerPage: 200,\n    }\n\n    lbs, _, err := c.LoadBalancers.List(ctx, opt)\n}"
          },
          {
            "lang": "Ruby",
            "source": "require 'droplet_kit'\ntoken = ENV['DIGITALOCEAN_TOKEN']\nclient = DropletKit::Client.new(access_token: token)\n\nload_balancers = client.load_balancers.all\nload_balancers.each"
          }
        ]
      }
    },
    "/v2/load_balancers/{lb_id}": {
      "get": {
        "operationId": "get_load_balancer",
        "summary": "Retrieve an Existing Load Balancer",
        "description": "To show information about a load balancer instance, send a GET request to\n`/v2/load_balancers/$LOAD_BALANCER_ID`.\n",
        "tags": [
          "Load Balancers"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/load_balancer_id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/existing_load_balancer"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  \"https://api.digitalocean.com/v2/load_balancers/4de7ac8b-495b-4884-9a69-1050c6793cd6\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"os\"\n\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n    client := godo.NewFromToken(token)\n    ctx := context.TODO()\n\n    lb, _, err := client.LoadBalancers.Get(ctx, \"4de7ac8b-495b-4884-9a69-1050c6793cd6\")\n}"
          },
          {
            "lang": "Ruby",
            "source": "require 'droplet_kit'\ntoken = ENV['DIGITALOCEAN_TOKEN']\nclient = DropletKit::Client.new(access_token: token)\n\nclient.load_balancers.find(id: '4de7ac8b-495b-4884-9a69-1050c6793cd6')"
          }
        ]
      },
      "put": {
        "operationId": "update_load_balancer",
        "summary": "Update a Load Balancer",
        "description": "To update a load balancer's settings, send a PUT request to\n`/v2/load_balancers/$LOAD_BALANCER_ID`. The request should contain a full\nrepresentation of the load balancer including existing attributes. It may\ncontain _one of_ the `droplets_ids` or `tag` attributes as they are mutually\nexclusive. **Note that any attribute that is not provided will be reset to its\ndefault value.**\n",
        "tags": [
          "Load Balancers"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/load_balancer_id"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/load_balancer_create"
              },
              "examples": {
                "load_balancer_update_request": {
                  "$ref": "#/components/examples/load_balancer_update_request"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/updated_load_balancer"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X PUT \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  -d '{\"name\":\"example-lb-01\",\"size\":\"lb-medium\",\"region\":\"nyc3\",\"algorithm\":\"least_connections\",\"forwarding_rules\":[{\"entry_protocol\":\"http\",\"entry_port\":80,\"target_protocol\":\"http\",\"target_port\":80},{\"entry_protocol\":\"https\",\"entry_port\":444,\"target_protocol\":\"https\",\"target_port\":443,\"tls_passthrough\":true}],\"health_check\":{\"protocol\":\"http\",\"port\":80,\"path\":\"/\",\"check_interval_seconds\":10,\"response_timeout_seconds\":5,\"healthy_threshold\":5,\"unhealthy_threshold\":3},\"sticky_sessions\":{\"type\":\"cookies\", \"cookie_name\": \"DO_LB\", \"cookie_ttl_seconds\": 300}, \"droplet_ids\": [3164444, 3164445]}' \\\n  \"https://api.digitalocean.com/v2/load_balancers/4de7ac8b-495b-4884-9a69-1050c6793cd6\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"os\"\n\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n    client := godo.NewFromToken(token)\n    ctx := context.TODO()\n\n    updateRequest := &godo.LoadBalancerRequest{\n        Name:      \"example-01\",\n        Size:      \"lb-medium\",\n        Algorithm: \"round_robin\",\n        Region:    \"nyc3\",\n        ForwardingRules: []godo.ForwardingRule{\n            {\n                EntryProtocol:  \"http\",\n                EntryPort:      80,\n                TargetProtocol: \"http\",\n                TargetPort:     80,\n            },\n            {\n                EntryProtocol:  \"https\",\n                EntryPort:      443,\n                TargetProtocol: \"https\",\n                TargetPort:     443,\n                TlsPassthrough: true,\n            },\n        },\n        HealthCheck: &godo.HealthCheck{\n            Protocol:               \"http\",\n            Port:                   80,\n            Path:                   \"/\",\n            CheckIntervalSeconds:   10,\n            ResponseTimeoutSeconds: 5,\n            HealthyThreshold:       5,\n            UnhealthyThreshold:     3,\n        },\n        StickySessions: &godo.StickySessions{\n            Type:             \"cookies\",\n            CookieName:       \"DO_LB\",\n            CookieTtlSeconds: 300,\n        },\n        DropletIDs:          []int{3164444, 3164445},\n        RedirectHttpToHttps: false,\n    }\n\n    lb, _, err := c.LoadBalancers.Update(ctx, \"c2c97ca7-6f63-4e23-8909-906fd86efb5e\", updateRequest)\n}"
          },
          {
            "lang": "Ruby",
            "source": "require 'droplet_kit'\ntoken = ENV['DIGITALOCEAN_TOKEN']\nclient = DropletKit::Client.new(access_token: token)\n\nload_balancer = DropletKit::LoadBalancer.new(  name: 'example-lb-01',\n  size: 'lb-medium',\n  algorithm: 'round_robin',\n  droplet_ids: [ 3164444, 3164445],\n  redirect_http_to_https: true,\n  region: 'nyc3',\n  forwarding_rules: [\n    DropletKit::ForwardingRule.new(\n      entry_protocol: 'http',\n      entry_port: 80,\n      target_protocol: 'http',\n      target_port: 80,\n      certificate_id: '',\n      tls_passthrough: false\n    ),\n    DropletKit::ForwardingRule.new(\n      entry_protocol: 'https',\n      entry_port: 443,\n      target_protocol: 'https',\n      target_port: 443,\n      certificate_id: '',\n      tls_passthrough: true\n    )\n  ],\n  sticky_sessions: DropletKit::StickySession.new(\n    type: 'cookies',\n    cookie_name: 'DO-LB-COOKIE',\n    cookie_ttl_seconds: 5\n  ),\n  health_check: DropletKit::HealthCheck.new(\n    protocol: 'http',\n    port: 80,\n    path: '/',\n    check_interval_seconds: 10,\n    response_timeout_seconds: 5,\n    healthy_threshold: 5,\n    unhealthy_threshold: 3\n  )\n)\nclient.load_balancers.update(load_balancer, id: '4de7ac8b-495b-4884-9a69-1050c6793cd6')"
          }
        ]
      },
      "delete": {
        "operationId": "delete_load_balancer",
        "summary": "Delete a Load Balancer",
        "description": "To delete a load balancer instance, disassociating any Droplets assigned to it\nand removing it from your account, send a DELETE request to\n`/v2/load_balancers/$LOAD_BALANCER_ID`.\n\nA successful request will receive a 204 status code with no body in response.\nThis indicates that the request was processed successfully.\n",
        "tags": [
          "Load Balancers"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/load_balancer_id"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/no_content"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X DELETE \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  \"https://api.digitalocean.com/v2/load_balancers/4de7ac8b-495b-4884-9a69-1050c6793cd6\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"os\"\n\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n    client := godo.NewFromToken(token)\n    ctx := context.TODO()\n\n    _, err := client.LoadBalancers.Delete(ctx, \"4de7ac8b-495b-4884-9a69-1050c6793cd6\")\n}"
          },
          {
            "lang": "Ruby",
            "source": "require 'droplet_kit'\ntoken = ENV['DIGITALOCEAN_TOKEN']\nclient = DropletKit::Client.new(access_token: token)\n\nclient.load_balancers.delete(id: '4de7ac8b-495b-4884-9a69-1050c6793cd6')"
          }
        ]
      }
    },
    "/v2/load_balancers/{lb_id}/droplets": {
      "post": {
        "operationId": "add_load_balancer_droplets",
        "summary": "Add Droplets to a Load Balancer",
        "description": "To assign a Droplet to a load balancer instance, send a POST request to\n`/v2/load_balancers/$LOAD_BALANCER_ID/droplets`. In the body of the request,\nthere should be a `droplet_ids` attribute containing a list of Droplet IDs.\nIndividual Droplets can not be added to a load balancer configured with a\nDroplet tag. Attempting to do so will result in a \"422 Unprocessable Entity\"\nresponse from the API.\n\nNo response body will be sent back, but the response code will indicate\nsuccess. Specifically, the response code will be a 204, which means that the\naction was successful with no returned body data.\n",
        "tags": [
          "Load Balancers"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/load_balancer_id"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "droplet_ids": {
                    "type": "array",
                    "items": {
                      "type": "integer"
                    },
                    "example": [
                      3164444,
                      3164445
                    ],
                    "description": "An array containing the IDs of the Droplets assigned to the load balancer."
                  }
                },
                "required": [
                  "droplet_ids"
                ]
              }
            }
          }
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/no_content"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  -d '{\"droplet_ids\": [3164446, 3164447]}' \\\n  \"https://api.digitalocean.com/v2/load_balancers/4de7ac8b-495b-4884-9a69-1050c6793cd6/droplets\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"os\"\n\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n    client := godo.NewFromToken(token)\n    ctx := context.TODO()\n\n    droplets := []int{3164446, 3164447}\n    _, err := client.LoadBalancers.AddDroplets(ctx, \"4de7ac8b-495b-4884-9a69-1050c6793cd6\", droplets...)\n}"
          },
          {
            "lang": "Ruby",
            "source": "require 'droplet_kit'\ntoken = ENV['DIGITALOCEAN_TOKEN']\nclient = DropletKit::Client.new(access_token: token)\n\nclient.load_balancers.add_droplets([3164446, 3164447], id: '4de7ac8b-495b-4884-9a69-1050c6793cd6')"
          }
        ]
      },
      "delete": {
        "operationId": "remove_load_balancer_droplets",
        "summary": "Remove Droplets from a Load Balancer",
        "description": "To remove a Droplet from a load balancer instance, send a DELETE request to\n`/v2/load_balancers/$LOAD_BALANCER_ID/droplets`. In the body of the request,\nthere should be a `droplet_ids` attribute containing a list of Droplet IDs.\n\nNo response body will be sent back, but the response code will indicate\nsuccess. Specifically, the response code will be a 204, which means that the\naction was successful with no returned body data.\n",
        "tags": [
          "Load Balancers"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/load_balancer_id"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "droplet_ids": {
                    "type": "array",
                    "items": {
                      "type": "integer"
                    },
                    "example": [
                      3164444,
                      3164445
                    ],
                    "description": "An array containing the IDs of the Droplets assigned to the load balancer."
                  }
                },
                "required": [
                  "droplet_ids"
                ]
              }
            }
          }
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/no_content"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X DELETE \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  -d '{\"droplet_ids\": [3164446, 3164447]}' \\\n  \"https://api.digitalocean.com/v2/load_balancers/4de7ac8b-495b-4884-9a69-1050c6793cd6/droplets\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"os\"\n\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n    client := godo.NewFromToken(token)\n    ctx := context.TODO()\n\n    droplets := []int{3164446, 3164447}\n    _, err := client.LoadBalancers.RemoveDroplets(ctx, \"4de7ac8b-495b-4884-9a69-1050c6793cd6\", droplets...)\n}"
          },
          {
            "lang": "Ruby",
            "source": "require 'droplet_kit'\ntoken = ENV['DIGITALOCEAN_TOKEN']\nclient = DropletKit::Client.new(access_token: token)\n\nclient.load_balancers.remove_droplets([3164446, 3164447], id: '4de7ac8b-495b-4884-9a69-1050c6793cd6')"
          }
        ]
      }
    },
    "/v2/load_balancers/{lb_id}/forwarding_rules": {
      "post": {
        "operationId": "add_load_balancer_forwarding_rules",
        "summary": "Add Forwarding Rules to a Load Balancer",
        "description": "To add an additional forwarding rule to a load balancer instance, send a POST\nrequest to `/v2/load_balancers/$LOAD_BALANCER_ID/forwarding_rules`. In the body\nof the request, there should be a `forwarding_rules` attribute containing an\narray of rules to be added.\n\nNo response body will be sent back, but the response code will indicate\nsuccess. Specifically, the response code will be a 204, which means that the\naction was successful with no returned body data.\n",
        "tags": [
          "Load Balancers"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/load_balancer_id"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "forwarding_rules": {
                    "type": "array",
                    "minimum": 1,
                    "items": {
                      "$ref": "#/components/schemas/forwarding_rule"
                    }
                  }
                },
                "required": [
                  "forwarding_rules"
                ]
              }
            }
          }
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/no_content"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  -d '{\"forwarding_rules\": [{\"entry_protocol\": \"tcp\",\"entry_port\": 3306,\"target_protocol\": \"tcp\",\"target_port\": 3306}]}' \\\n  \"https://api.digitalocean.com/v2/load_balancers/4de7ac8b-495b-4884-9a69-1050c6793cd6/forwarding_rules\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"os\"\n\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n    client := godo.NewFromToken(token)\n    ctx := context.TODO()\n\n    forwardingRule := []godo.ForwardingRule{\n        {\n            EntryProtocol:  \"tcp\",\n            EntryPort:      3306,\n            TargetProtocol: \"tcp\",\n            TargetPort:     3306,\n        },\n    }\n}"
          },
          {
            "lang": "Ruby",
            "source": "require 'droplet_kit'\ntoken = ENV['DIGITALOCEAN_TOKEN']\nclient = DropletKit::Client.new(access_token: token)\n\nrule = DropletKit::ForwardingRule.new(  entry_protocol: 'tcp',\n  entry_port: 3306,\n  target_protocol: 'tcp',\n  target_port: 3306,\n  certificate_id: '',\n  tls_passthrough: false\n)\nclient.load_balancers.add_forwarding_rules([rule], id: '4de7ac8b-495b-4884-9a69-1050c6793cd6')"
          }
        ]
      },
      "delete": {
        "operationId": "remove_load_balancer_forwarding_rules",
        "summary": "Remove Forwarding Rules from a Load Balancer",
        "description": "To remove forwarding rules from a load balancer instance, send a DELETE\nrequest to `/v2/load_balancers/$LOAD_BALANCER_ID/forwarding_rules`. In the\nbody of the request, there should be a `forwarding_rules` attribute containing\nan array of rules to be removed.\n\nNo response body will be sent back, but the response code will indicate\nsuccess. Specifically, the response code will be a 204, which means that the\naction was successful with no returned body data.\n",
        "tags": [
          "Load Balancers"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/load_balancer_id"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "forwarding_rules": {
                    "type": "array",
                    "minimum": 1,
                    "items": {
                      "$ref": "#/components/schemas/forwarding_rule"
                    }
                  }
                },
                "required": [
                  "forwarding_rules"
                ]
              }
            }
          }
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/no_content"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X DELETE \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  -d '{\"forwarding_rules\": [{\"entry_protocol\": \"tcp\",\"entry_port\": 3306,\"target_protocol\": \"tcp\",\"target_port\": 3306}]}' \\\n  \"https://api.digitalocean.com/v2/load_balancers/4de7ac8b-495b-4884-9a69-1050c6793cd6/forwarding_rules\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"os\"\n\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n    client := godo.NewFromToken(token)\n    ctx := context.TODO()\n\n    forwardingRule := []godo.ForwardingRule{\n        {\n            EntryProtocol:  \"tcp\",\n            EntryPort:      3306,\n            TargetProtocol: \"tcp\",\n            TargetPort:     3306,\n        },\n    }\n\n    _, err := client.LoadBalancers.RemoveForwardingRules(ctx, \"4de7ac8b-495b-4884-9a69-1050c6793cd6\", forwardingRule...)\n}"
          },
          {
            "lang": "Ruby",
            "source": "require 'droplet_kit'\ntoken = ENV['DIGITALOCEAN_TOKEN']\nclient = DropletKit::Client.new(access_token: token)\n\nrule = DropletKit::ForwardingRule.new(  entry_protocol: 'tcp',\n  entry_port: 3306,\n  target_protocol: 'tcp',\n  target_port: 3306,\n  certificate_id: '',\n  tls_passthrough: false\n)\nclient.load_balancers.remove_forwarding_rules([rule], id: '4de7ac8b-495b-4884-9a69-1050c6793cd6')"
          }
        ]
      }
    },
    "/v2/monitoring/alerts": {
      "get": {
        "operationId": "list_alert_policies",
        "summary": "List Alert Policies",
        "description": "Returns all alert policies that are configured for the given account. To List all alert policies, send a GET request to `/v2/monitoring/alerts`.",
        "tags": [
          "Monitoring"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/list_alert_policy_response"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        }
      },
      "post": {
        "operationId": "create_alert_policy",
        "summary": "Create Alert Policy",
        "description": "To create a new alert, send a POST request to `/v2/monitoring/alerts`.",
        "tags": [
          "Monitoring"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/alert_policy_response"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "requestBody": {
          "description": "The 'type' field dictates what type of entity that the alert policy applies to and hence what type of entity is passed in the 'entities' array. If both the 'tags' array and 'entities' array are empty the alert policy applies to all entities of the relevant type that are owned by the user account. Otherwise the following table shows the valid entity types for each type of alert policy: <table><thead><tr><td>Type</td><td>Description</td><td>Valid Entity Type</td></tr></thead><tr><td>v1/insights/droplet/memory_utilization_percent</td><td>alert on the percent of memory utilization</td><td>droplet ID</td></tr><tr><td>v1/insights/droplet/disk_read</td><td>alert on the rate of disk read I/O in MBps</td><td>droplet ID</td></tr><tr><td>v1/insights/droplet/load_5</td><td>alert on the 5 minute load average</td><td>droplet ID</td></tr><tr><td>v1/insights/droplet/load_15</td><td>alert on the 15 minute load average</td><td>droplet ID</td></tr><tr><td>v1/insights/droplet/disk_utilization_percent</td><td>alert on the percent of disk utilization</td><td>droplet ID</td></tr><tr><td>v1/insights/droplet/cpu</td><td>alert on the percent of CPU utilization</td><td>droplet ID</td></tr><tr><td>v1/insights/droplet/disk_write</td><td>alert on the rate of disk write I/O in MBps</td><td>droplet ID</td></tr><tr><td>v1/insights/droplet/public_outbound_bandwidth</td><td>alert on the rate of public outbound bandwidth in Mbps</td><td>droplet ID</td></tr><tr><td>v1/insights/droplet/public_inbound_bandwidth</td><td>alert on the rate of public inbound bandwidth in Mbps</td><td>droplet ID</td></tr><tr><td>v1/insights/droplet/private_outbound_bandwidth</td><td>alert on the rate of private outbound bandwidth in Mbps</td><td>droplet ID</td></tr><tr><td>v1/insights/droplet/private_inbound_bandwidth</td><td>alert on the rate of private inbound bandwidth in Mbps</td><td>droplet ID</td></tr><tr><td>v1/insights/droplet/load_1</td><td>alert on the 1 minute load average</td><td>droplet ID</td></tr></table>",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/alert_policy_request"
              }
            }
          }
        }
      }
    },
    "/v2/monitoring/alerts/{alert_uuid}": {
      "get": {
        "operationId": "get_alert_policy",
        "summary": "Retrieve an Existing Alert Policy",
        "description": "To retrieve a given alert policy, send a GET request to `/v2/monitoring/alerts/{alert_uuid}`",
        "tags": [
          "Monitoring"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/alert_policy_response"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/alert_uuid"
          }
        ]
      },
      "put": {
        "operationId": "update_alert_policy",
        "summary": "Update an Alert Policy",
        "description": "To update en existing policy, send a PUT request to `v2/monitoring/alerts/{alert_uuid}`.",
        "tags": [
          "Monitoring"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/alert_policy_response"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/alert_uuid"
          }
        ],
        "requestBody": {
          "description": "The 'type' field dictates what type of entity that the alert policy applies to and hence what type of entity is passed in the 'entities' array. If both the 'tags' array and 'entities' array are empty the alert policy applies to all entities of the relevant type that are owned by the user account. Otherwise the following table shows the valid entity types for each type of alert policy: <table><thead><tr><td>Type</td><td>Description</td><td>Valid Entity Type</td></tr></thead><tr><td>v1/insights/droplet/memory_utilization_percent</td><td>alert on the percent of memory utilization</td><td>droplet ID</td></tr><tr><td>v1/insights/droplet/disk_read</td><td>alert on the rate of disk read I/O in MBps</td><td>droplet ID</td></tr><tr><td>v1/insights/droplet/load_5</td><td>alert on the 5 minute load average</td><td>droplet ID</td></tr><tr><td>v1/insights/droplet/load_15</td><td>alert on the 15 minute load average</td><td>droplet ID</td></tr><tr><td>v1/insights/droplet/disk_utilization_percent</td><td>alert on the percent of disk utilization</td><td>droplet ID</td></tr><tr><td>v1/insights/droplet/cpu</td><td>alert on the percent of CPU utilization</td><td>droplet ID</td></tr><tr><td>v1/insights/droplet/disk_write</td><td>alert on the rate of disk write I/O in MBps</td><td>droplet ID</td></tr><tr><td>v1/insights/droplet/public_outbound_bandwidth</td><td>alert on the rate of public outbound bandwidth in Mbps</td><td>droplet ID</td></tr><tr><td>v1/insights/droplet/public_inbound_bandwidth</td><td>alert on the rate of public inbound bandwidth in Mbps</td><td>droplet ID</td></tr><tr><td>v1/insights/droplet/private_outbound_bandwidth</td><td>alert on the rate of private outbound bandwidth in Mbps</td><td>droplet ID</td></tr><tr><td>v1/insights/droplet/private_inbound_bandwidth</td><td>alert on the rate of private inbound bandwidth in Mbps</td><td>droplet ID</td></tr><tr><td>v1/insights/droplet/load_1</td><td>alert on the 1 minute load average</td><td>droplet ID</td></tr></table>",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/alert_policy_request"
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "delete_alert_policy",
        "summary": "Delete an Alert Policy",
        "description": "To delete an alert policy, send a DELETE request to `/v2/monitoring/alerts/{alert_uuid}`",
        "tags": [
          "Monitoring"
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/no_content"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/alert_uuid"
          }
        ]
      }
    },
    "/v2/monitoring/metrics/droplet/bandwidth": {
      "get": {
        "operationId": "get_droplet_bandwidth_metrics",
        "summary": "Get Droplet Bandwidth Metrics",
        "description": "To retrieve bandwidth metrics for a given droplet, send a GET request to `/v2/monitoring/metrics/droplet/bandwidth`.",
        "tags": [
          "Monitoring"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/metric_response"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/parameters_droplet_id"
          },
          {
            "$ref": "#/components/parameters/network_interface"
          },
          {
            "$ref": "#/components/parameters/network_direction"
          },
          {
            "$ref": "#/components/parameters/metric_timestamp_start"
          },
          {
            "$ref": "#/components/parameters/metric_timestamp_end"
          }
        ]
      }
    },
    "/v2/monitoring/metrics/droplet/cpu": {
      "get": {
        "operationId": "get_droplet_cpu_metrics",
        "summary": "Get Droplet CPU Metrics",
        "description": "To retrieve CPU metrics for a given droplet, send a GET request to `/v2/monitoring/metrics/droplet/cpu`.",
        "tags": [
          "Monitoring"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/metric_response"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/parameters_droplet_id"
          },
          {
            "$ref": "#/components/parameters/metric_timestamp_start"
          },
          {
            "$ref": "#/components/parameters/metric_timestamp_end"
          }
        ]
      }
    },
    "/v2/monitoring/metrics/droplet/filesystem_free": {
      "get": {
        "operationId": "get_droplet_filesystem_free_metrics",
        "summary": "Get Droplet Filesystem Free Metrics",
        "description": "To retrieve filesystem free metrics for a given droplet, send a GET request to `/v2/monitoring/metrics/droplet/filesystem_free`.",
        "tags": [
          "Monitoring"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/metric_response"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/parameters_droplet_id"
          },
          {
            "$ref": "#/components/parameters/metric_timestamp_start"
          },
          {
            "$ref": "#/components/parameters/metric_timestamp_end"
          }
        ]
      }
    },
    "/v2/monitoring/metrics/droplet/filesystem_size": {
      "get": {
        "operationId": "get_droplet_filesystem_size_metrics",
        "summary": "Get Droplet Filesystem Size Metrics",
        "description": "To retrieve filesystem size metrics for a given droplet, send a GET request to `/v2/monitoring/metrics/droplet/filesystem_size`.",
        "tags": [
          "Monitoring"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/metric_response"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/parameters_droplet_id"
          },
          {
            "$ref": "#/components/parameters/metric_timestamp_start"
          },
          {
            "$ref": "#/components/parameters/metric_timestamp_end"
          }
        ]
      }
    },
    "/v2/monitoring/metrics/droplet/load_1": {
      "get": {
        "operationId": "get_droplet_load1_metrics",
        "summary": "Get Droplet Load1 Metrics",
        "description": "To retrieve 1 minute load average metrics for a given droplet, send a GET request to `/v2/monitoring/metrics/droplet/load_1`.",
        "tags": [
          "Monitoring"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/metric_response"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/parameters_droplet_id"
          },
          {
            "$ref": "#/components/parameters/metric_timestamp_start"
          },
          {
            "$ref": "#/components/parameters/metric_timestamp_end"
          }
        ]
      }
    },
    "/v2/monitoring/metrics/droplet/load_5": {
      "get": {
        "operationId": "get_droplet_load5_metrics",
        "summary": "Get Droplet Load5 Metrics",
        "description": "To retrieve 5 minute load average metrics for a given droplet, send a GET request to `/v2/monitoring/metrics/droplet/load_5`.",
        "tags": [
          "Monitoring"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/metric_response"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/parameters_droplet_id"
          },
          {
            "$ref": "#/components/parameters/metric_timestamp_start"
          },
          {
            "$ref": "#/components/parameters/metric_timestamp_end"
          }
        ]
      }
    },
    "/v2/monitoring/metrics/droplet/load_15": {
      "get": {
        "operationId": "get_droplet_load15_metrics",
        "summary": "Get Droplet Load15 Metrics",
        "description": "To retrieve 15 minute load average metrics for a given droplet, send a GET request to `/v2/monitoring/metrics/droplet/load_15`.",
        "tags": [
          "Monitoring"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/metric_response"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/parameters_droplet_id"
          },
          {
            "$ref": "#/components/parameters/metric_timestamp_start"
          },
          {
            "$ref": "#/components/parameters/metric_timestamp_end"
          }
        ]
      }
    },
    "/v2/monitoring/metrics/droplet/memory_cached": {
      "get": {
        "operationId": "get_droplet_memory_cached_metrics",
        "summary": "Get Droplet Cached Memory Metrics",
        "description": "To retrieve cached memory metrics for a given droplet, send a GET request to `/v2/monitoring/metrics/droplet/memory_cached`.",
        "tags": [
          "Monitoring"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/metric_response"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/parameters_droplet_id"
          },
          {
            "$ref": "#/components/parameters/metric_timestamp_start"
          },
          {
            "$ref": "#/components/parameters/metric_timestamp_end"
          }
        ]
      }
    },
    "/v2/monitoring/metrics/droplet/memory_free": {
      "get": {
        "operationId": "get_droplet_memory_free_metrics",
        "summary": "Get Droplet Free Memory Metrics",
        "description": "To retrieve free memory metrics for a given droplet, send a GET request to `/v2/monitoring/metrics/droplet/memory_free`.",
        "tags": [
          "Monitoring"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/metric_response"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/parameters_droplet_id"
          },
          {
            "$ref": "#/components/parameters/metric_timestamp_start"
          },
          {
            "$ref": "#/components/parameters/metric_timestamp_end"
          }
        ]
      }
    },
    "/v2/monitoring/metrics/droplet/memory_total": {
      "get": {
        "operationId": "get_droplet_memory_total_metrics",
        "summary": "Get Droplet Total Memory Metrics",
        "description": "To retrieve total memory metrics for a given droplet, send a GET request to `/v2/monitoring/metrics/droplet/memory_total`.",
        "tags": [
          "Monitoring"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/metric_response"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/parameters_droplet_id"
          },
          {
            "$ref": "#/components/parameters/metric_timestamp_start"
          },
          {
            "$ref": "#/components/parameters/metric_timestamp_end"
          }
        ]
      }
    },
    "/v2/monitoring/metrics/droplet/memory_available": {
      "get": {
        "operationId": "get_droplet_memory_available_metrics",
        "summary": "Get Droplet Available Memory Metrics",
        "description": "To retrieve available memory metrics for a given droplet, send a GET request to `/v2/monitoring/metrics/droplet/memory_available`.",
        "tags": [
          "Monitoring"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/metric_response"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/parameters_droplet_id"
          },
          {
            "$ref": "#/components/parameters/metric_timestamp_start"
          },
          {
            "$ref": "#/components/parameters/metric_timestamp_end"
          }
        ]
      }
    },
    "/v2/projects": {
      "get": {
        "operationId": "list_projects",
        "summary": "List All Projects",
        "description": "To list all your projects, send a GET request to `/v2/projects`.",
        "tags": [
          "Projects"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/projects_list"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  \"https://api.digitalocean.com/v2/projects\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"os\"\n\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n    client := godo.NewFromToken(token)\n    ctx := context.TODO()\n\n    opt := &godo.ListOptions{\n      PerPage: 10,\n      Page:    1,\n    }\n\n    client.Projects.List(ctx, opt)\n}"
          },
          {
            "lang": "Ruby",
            "source": "require 'droplet_kit'\ntoken = ENV['DIGITALOCEAN_TOKEN']\nclient = DropletKit::Client.new(access_token: token)\n\nprojects = client.projects.all\nprojects.each"
          }
        ]
      },
      "post": {
        "operationId": "create_project",
        "summary": "Create a Project",
        "description": "To create a project, send a POST request to `/v2/projects`.",
        "tags": [
          "Projects"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/project_base"
                  }
                ],
                "required": [
                  "name",
                  "purpose"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/existing_project"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  -d '{\"name\":\"my-web-api\", \"description\": \"My website API\", \"purpose\": \"Service or API\", \"environment\": \"Production\"}' \\\n  \"https://api.digitalocean.com/v2/projects\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"os\"\n\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n    client := godo.NewFromToken(token)\n    ctx := context.TODO()\n\n    createReq := &godo.CreateProjectRequest{\n      Name:        \"my-web-api\",\n      Description: \"My website API\",\n      Purpose:     \"Service or API\",\n      Environment: \"Production\",\n    }\n\n    client.Projects.Create(ctx, createReq)\n}"
          },
          {
            "lang": "Ruby",
            "source": "require 'droplet_kit'\ntoken = ENV['DIGITALOCEAN_TOKEN']\nclient = DropletKit::Client.new(access_token: token)\n\nproject = DropletKit::Project.new(\n  name: 'my-api',\n  description: 'My website API',\n  purpose: 'Service or API',\n  environment: 'Production'\n)\nclient.projects.create(project)"
          }
        ]
      }
    },
    "/v2/projects/default": {
      "get": {
        "operationId": "get_default_project",
        "summary": "Retrieve the Default Project",
        "description": "To get your default project, send a GET request to `/v2/projects/default`.",
        "tags": [
          "Projects"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/default_project"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  \"https://api.digitalocean.com/v2/projects/default\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"os\"\n\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n    client := godo.NewFromToken(token)\n    ctx := context.TODO()\n\n    client.Projects.GetDefault(ctx)\n}"
          },
          {
            "lang": "Ruby",
            "source": "require 'droplet_kit'\ntoken = ENV['DIGITALOCEAN_TOKEN']\nclient = DropletKit::Client.new(access_token: token)\n\nclient.projects.find_default"
          }
        ]
      },
      "put": {
        "operationId": "update_default_project",
        "summary": "Update the Default Project",
        "description": "To update a project, send a PUT request to `/v2/projects/default`. All of the following attributes must be sent.",
        "tags": [
          "Projects"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/project"
                  }
                ],
                "required": [
                  "name",
                  "description",
                  "purpose",
                  "environment",
                  "is_default"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/existing_project"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X PUT \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  -d '{\"name\":\"my-web-api\", \"description\": \"My website API\", \"purpose\": \"Service or API\", \"environment\": \"Staging\", \"is_default\": false}' \\\n  \"https://api.digitalocean.com/v2/projects/default\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"os\"\n\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n    client := godo.NewFromToken(token)\n    ctx := context.TODO()\n\n    updateReq := &godo.UpdateProjectRequest{\n      Name:        \"my-web-api\",\n      Description: \"My website API\",\n      Purpose:     \"Service or API\",\n      Environment: \"Staging\",\n      IsDefault:   false,\n    }\n\n    client.Projects.Update(ctx, godo.DefaultProject, updateReq)\n}"
          },
          {
            "lang": "Ruby",
            "source": "require 'droplet_kit'\ntoken = ENV['DIGITALOCEAN_TOKEN']\nclient = DropletKit::Client.new(access_token: token)\n\nproject = client.projects.find_default\nproject.environment = 'Staging'\nclient.projects.update(project, id: 'default')"
          }
        ]
      },
      "patch": {
        "operationId": "patch_default_project",
        "summary": "Patch the Default Project",
        "description": "To update only specific attributes of a project, send a PATCH request to `/v2/projects/default`. At least one of the following attributes needs to be sent.",
        "tags": [
          "Projects"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/project"
              },
              "example": {
                "name": "my-web-api"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/existing_project"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X PATCH \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  -d '{\"environment\": \"Staging\"}' \\\n  \"https://api.digitalocean.com/v2/projects/default\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"os\"\n\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n    client := godo.NewFromToken(token)\n    ctx := context.TODO()\n\n    updateReq := &godo.UpdateProjectRequest{\n      Environment: \"Staging\",\n    }\n\n    client.Projects.Update(ctx, godo.DefaultProject, updateReq)\n}"
          },
          {
            "lang": "Ruby",
            "source": "require 'droplet_kit'\ntoken = ENV['DIGITALOCEAN_TOKEN']\nclient = DropletKit::Client.new(access_token: token)\n\nproject = client.projects.find_default\nproject.environment = 'Staging'\nclient.projects.update(project, id: 'default')"
          }
        ]
      }
    },
    "/v2/projects/{project_id}": {
      "get": {
        "operationId": "get_project",
        "summary": "Retrieve an Existing Project",
        "description": "To get a project, send a GET request to `/v2/projects/$PROJECT_ID`.",
        "tags": [
          "Projects"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/project_id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/existing_project"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  \"https://api.digitalocean.com/v2/projects/4e1bfbc3-dc3e-41f2-a18f-1b4d7ba71679\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"os\"\n\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n    client := godo.NewFromToken(token)\n    ctx := context.TODO()\n\n    client.Projects.Get(ctx, \"4e1bfbc3-dc3e-41f2-a18f-1b4d7ba71679\")\n}"
          },
          {
            "lang": "Ruby",
            "source": "require 'droplet_kit'\ntoken = ENV['DIGITALOCEAN_TOKEN']\nclient = DropletKit::Client.new(access_token: token)\n\nproject = client.projects.find(id: '4e1bfbc3-dc3e-41f2-a18f-1b4d7ba71679')"
          }
        ]
      },
      "put": {
        "operationId": "update_project",
        "summary": "Update a Project",
        "description": "To update a project, send a PUT request to `/v2/projects/$PROJECT_ID`. All of the following attributes must be sent.",
        "tags": [
          "Projects"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/project_id"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/project"
                  }
                ],
                "required": [
                  "name",
                  "description",
                  "purpose",
                  "environment",
                  "is_default"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/existing_project"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X PUT \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  -d '{\"name\":\"my-web-api\", \"description\": \"My website API\", \"purpose\": \"Service or API\", \"environment\": \"Staging\", \"is_default\": false}' \\\n  \"https://api.digitalocean.com/v2/projects/4e1bfbc3\\\n  -dc3e-41f2-a18f-1b4d7ba71679\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"os\"\n\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n    client := godo.NewFromToken(token)\n    ctx := context.TODO()\n\n    updateReq := &godo.UpdateProjectRequest{\n      Name:        \"my-web-api\",\n      Description: \"My website API\",\n      Purpose:     \"Service or API\",\n      Environment: \"Staging\",\n      IsDefault:   false,\n    }\n\n    client.Projects.Update(ctx, \"4e1bfbc3-dc3e-41f2-a18f-1b4d7ba71679\", updateReq)\n\n}"
          },
          {
            "lang": "Ruby",
            "source": "require 'droplet_kit'\ntoken = ENV['DIGITALOCEAN_TOKEN']\nclient = DropletKit::Client.new(access_token: token)\n\nproject = client.projects.find(id: '4e1bfbc3-dc3e-41f2-a18f-1b4d7ba71679')\nproject.environment = 'Staging'\nclient.projects.update(project, id: '4e1bfbc3-dc3e-41f2-a18f-1b4d7ba71679')"
          }
        ]
      },
      "patch": {
        "operationId": "patch_project",
        "summary": "Patch a Project",
        "description": "To update only specific attributes of a project, send a PATCH request to `/v2/projects/$PROJECT_ID`. At least one of the following attributes needs to be sent.",
        "tags": [
          "Projects"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/project_id"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/project"
              },
              "example": {
                "name": "my-web-api"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/existing_project"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X PATCH \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  -d '{\"environment\": \"Staging\"}' \\\n  \"https://api.digitalocean.com/v2/projects/4e1bfbc3\\\n  -dc3e-41f2-a18f-1b4d7ba71679\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"os\"\n\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n    client := godo.NewFromToken(token)\n    ctx := context.TODO()\n\n    updateReq := &godo.UpdateProjectRequest{\n      Environment: \"Staging\",\n    }\n\n    client.Projects.Update(ctx, \"4e1bfbc3-dc3e-41f2-a18f-1b4d7ba71679\", updateReq)\n}"
          },
          {
            "lang": "Ruby",
            "source": "require 'droplet_kit'\ntoken = ENV['DIGITALOCEAN_TOKEN']\nclient = DropletKit::Client.new(access_token: token)\n\nproject = client.projects.find(id: '4e1bfbc3-dc3e-41f2-a18f-1b4d7ba71679')\nproject.environment = 'Staging'\nclient.projects.update(project, id: '4e1bfbc3-dc3e-41f2-a18f-1b4d7ba71679')"
          }
        ]
      },
      "delete": {
        "operationId": "delete_project",
        "summary": "Delete an Existing Project",
        "description": "To delete a project, send a DELETE request to `/v2/projects/$PROJECT_ID`. To\nbe deleted, a project must not have any resources assigned to it. Any existing\nresources must first be reassigned or destroyed, or you will receive a 412 error.\n\nA successful request will receive a 204 status code with no body in response.\nThis indicates that the request was processed successfully.\n",
        "tags": [
          "Projects"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/project_id"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/no_content"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "412": {
            "$ref": "#/components/responses/precondition_failed"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X DELETE -H 'Content-Type: application/json' -H 'Authorization: Bearer $DIGITALOCEAN_TOKEN' \\  \"https://api.digitalocean.com/v2/projects/4e1bfbc3-dc3e-41f2-a18f-1b4d7ba71679\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"os\"\n\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n    client := godo.NewFromToken(token)\n    ctx := context.TODO()\n\n    _, err := client.Projects.Delete(ctx, '4e1bfbc3-dc3e-41f2-a18f-1b4d7ba71679')\n}"
          },
          {
            "lang": "Ruby",
            "source": "require 'droplet_kit'\ntoken = ENV['DIGITALOCEAN_TOKEN']\nclient = DropletKit::Client.new(access_token: token)\n\nclient.projects.delete(id: '4e1bfbc3-dc3e-41f2-a18f-1b4d7ba71679')"
          }
        ]
      }
    },
    "/v2/projects/{project_id}/resources": {
      "get": {
        "operationId": "list_project_resources",
        "summary": "List Project Resources",
        "description": "To list all your resources in a project, send a GET request to `/v2/projects/$PROJECT_ID/resources`.",
        "tags": [
          "Project Resources"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/project_id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/resources_list"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  \"https://api.digitalocean.com/v2/projects/4e1bfbc3-dc3e-41f2-a18f-1b4d7ba71679/resources\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"os\"\n\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n    client := godo.NewFromToken(token)\n    ctx := context.TODO()\n\n    opt := &godo.ListOptions{\n      PerPage: 10,\n      Page:    1,\n    }\n\n    client.Projects.ListResources(ctx, \"4e1bfbc3-dc3e-41f2-a18f-1b4d7ba71679\", opt)\n}"
          },
          {
            "lang": "Ruby",
            "source": "require 'droplet_kit'\ntoken = ENV['DIGITALOCEAN_TOKEN']\nclient = DropletKit::Client.new(access_token: token)\n\nclient.projects.list_resources(id: '4e1bfbc3-dc3e-41f2-a18f-1b4d7ba71679')"
          }
        ]
      },
      "post": {
        "operationId": "assign_project_resources",
        "summary": "Assign Resources to a Project",
        "description": "To assign resources to a project, send a POST request to `/v2/projects/$PROJECT_ID/resources`.",
        "tags": [
          "Project Resources"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/project_id"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/project_assignment"
              },
              "examples": {
                "assign_resources": {
                  "value": {
                    "resources": [
                      "do:droplet:13457723",
                      "do:domain:example.com"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/assigned_resources_list"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  -d '{\"resources\": [\"do:droplet:1\", \"do:floatingip:192.168.99.100\"]}' \\\n  \"https://api.digitalocean.com/v2/projects/4e1bfbc3\\\n  -dc3e-41f2-a18f-1b4d7ba71679/resources\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"os\"\n\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n    client := godo.NewFromToken(token)\n    ctx := context.TODO()\n\n    res := []interface{}{\n      &godo.Droplet{ID: 1},\n      \"do:droplet:42\",\n      &godo.FloatingIP{IP: \"192.168.99.100\"},\n    }\n\n    client.Projects.AssignResources(ctx, \"4e1bfbc3-dc3e-41f2-a18f-1b4d7ba71679\", res...)\n}"
          },
          {
            "lang": "Ruby",
            "source": "require 'droplet_kit'\ntoken = ENV['DIGITALOCEAN_TOKEN']\nclient = DropletKit::Client.new(access_token: token)\n\nresource = DropletKit::ProjectAssignment.new(urn: 'do:droplet:1')\nclient.projects.assign_resources([resource], id: '4e1bfbc3-dc3e-41f2-a18f-1b4d7ba71679')"
          }
        ]
      }
    },
    "/v2/projects/default/resources": {
      "get": {
        "operationId": "list_default_project_resources",
        "summary": "List Default Project Resources",
        "description": "To list all your resources in your default project, send a GET request to `/v2/projects/default/resources`.",
        "tags": [
          "Project Resources"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/resources_list"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  \"https://api.digitalocean.com/v2/projects/default/resources\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"os\"\n\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n    client := godo.NewFromToken(token)\n    ctx := context.TODO()\n\n    opt := &godo.ListOptions{\n      PerPage: 10,\n      Page:    1,\n    }\n\n    client.Projects.ListResources(ctx, godo.DefaultProject, opt)\n}"
          },
          {
            "lang": "Ruby",
            "source": "require 'droplet_kit'\ntoken = ENV['DIGITALOCEAN_TOKEN']\nclient = DropletKit::Client.new(access_token: token)\n\nclient.projects.list_resources(id: 'default')"
          }
        ]
      },
      "post": {
        "operationId": "assign_default_project_resources",
        "summary": "Assign Resources to Default Project",
        "description": "To assign resources to your default project, send a POST request to `/v2/projects/default/resources`.",
        "tags": [
          "Project Resources"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/project_assignment"
              },
              "examples": {
                "assign_resources": {
                  "value": {
                    "resources": [
                      "do:droplet:13457723",
                      "do:domain:example.com"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/assigned_resources_list"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  -d '{\"resources\": [\"do:droplet:1\", \"do:floatingip:192.168.99.100\"]}' \\\n  \"https://api.digitalocean.com/v2/projects/default/resources\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"os\"\n\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n    client := godo.NewFromToken(token)\n    ctx := context.TODO()\n\n    res := []interface{}{\n      &godo.Droplet{ID: 1},\n      \"do:droplet:42\",\n      &godo.FloatingIP{IP: \"192.168.99.100\"},\n    }\n\n    client.Projects.AssignResources(ctx, godo.DefaultProject, res...)\n}"
          },
          {
            "lang": "Ruby",
            "source": "require 'droplet_kit'\ntoken = ENV['DIGITALOCEAN_TOKEN']\nclient = DropletKit::Client.new(access_token: token)\n\nresource = DropletKit::ProjectAssignment.new(urn: 'do:droplet:1')\nclient.projects.assign_resources([resource], id: 'default')"
          }
        ]
      }
    },
    "/v2/regions": {
      "get": {
        "operationId": "list_all_regions",
        "summary": "List All Data Center Regions",
        "description": "To list all of the regions that are available, send a GET request to `/v2/regions`.\nThe response will be a JSON object with a key called `regions`. The value of this will be an array of `region` objects, each of which will contain the standard region attributes.",
        "tags": [
          "Regions"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/all_regions"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  \"https://api.digitalocean.com/v2/regions\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"os\"\n\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n    client := godo.NewFromToken(token)\n    ctx := context.TODO()\n\n    opt := &godo.ListOptions{\n        Page:    1,\n        PerPage: 200,\n    }\n\n    regions, _, err := client.Regions.List(ctx, opt)\n}"
          },
          {
            "lang": "Ruby",
            "source": "require 'droplet_kit'\ntoken = ENV['DIGITALOCEAN_TOKEN']\nclient = DropletKit::Client.new(access_token: token)\n\nregions = client.regions.all\nregions.each"
          }
        ]
      }
    },
    "/v2/registry": {
      "get": {
        "operationId": "get_registry",
        "summary": "Get Container Registry Information",
        "description": "To get information about your container registry, send a GET request to `/v2/registry`.",
        "tags": [
          "Container Registry"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/registry_info"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  \"https://api.digitalocean.com/v2/registry\""
          }
        ]
      },
      "post": {
        "operationId": "create_registry",
        "summary": "Create Container Registry",
        "description": "To create your container registry, send a POST request to `/v2/registry`.\n\nThe `name` becomes part of the URL for images stored in the registry. For\nexample, if your registry is called `example`, an image in it will have the\nURL `registry.digitalocean.com/example/image:tag`.\n",
        "tags": [
          "Container Registry"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/registry_create"
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/registry_info"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  -d '{\"name\": \"example\", \"subscription_tier_slug\": \"basic\"}' \\\n  \"https://api.digitalocean.com/v2/registry\""
          }
        ]
      },
      "delete": {
        "operationId": "delete_registry",
        "summary": "Delete Container Registry",
        "description": "To delete your container registry, destroying all container image data stored in it, send a DELETE request to `/v2/registry`.",
        "tags": [
          "Container Registry"
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/no_content"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X DELETE \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  \"https://api.digitalocean.com/v2/registry\""
          }
        ]
      }
    },
    "/v2/registry/subscription": {
      "get": {
        "operationId": "get_registry_subscription",
        "summary": "Get Subscription Information",
        "description": "A subscription is automatically created when you configure your container registry. To get information about your subscription, send a GET request to `/v2/registry/subscription`.",
        "tags": [
          "Container Registry"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/subscription_response"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  \"https://api.digitalocean.com/v2/registry/subscription\""
          }
        ]
      },
      "post": {
        "operationId": "post_registry_subscription",
        "summary": "Update Subscription Tier",
        "description": "After creating your registry, you can switch to a different subscription tier to better suit your needs. To do this, send a POST request to `/v2/registry/subscription`.",
        "tags": [
          "Container Registry"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "tier_slug": {
                    "type": "string",
                    "enum": [
                      "starter",
                      "basic",
                      "professional"
                    ],
                    "example": "basic",
                    "description": "The slug of the subscription tier to sign up for."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/subscription_response"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  -d '{\"tier_slug\": \"professional\"}' \\\n  \"https://api.digitalocean.com/v2/registry/subscription\""
          }
        ]
      }
    },
    "/v2/registry/docker-credentials": {
      "get": {
        "operationId": "get_docker_credentials",
        "summary": "Get Docker Credentials for Container Registry",
        "description": "In order to access your container registry with the Docker client or from a\nKubernetes cluster, you will need to configure authentication. The necessary\nJSON configuration can be retrieved by sending a GET request to\n`/v2/registry/docker-credentials`.\n\nThe response will be in the format of a Docker `config.json` file. To use the\nconfig in your Kubernetes cluster, create a Secret with:\n    kubectl create secret generic docr \\\n      --from-file=.dockerconfigjson=config.json \\\n      --type=kubernetes.io/dockerconfigjson\n\nBy default, the returned credentials have read-only access to your registry\nand cannot be used to push images. This is appropriate for most Kubernetes\nclusters. To retrieve read/write credentials, suitable for use with the Docker\nclient or in a CI system, read_write may be provided as query parameter. For\nexample: `/v2/registry/docker-credentials?read_write=true`\n\nBy default, the returned credentials will not expire. To retrieve credentials\nwith an expiry set, expiry_seconds may be provided as a query parameter. For\nexample: `/v2/registry/docker-credentials?expiry_seconds=3600` will return\ncredentials that expire after one hour.\n",
        "tags": [
          "Container Registry"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/registry_expiry_seconds"
          },
          {
            "$ref": "#/components/parameters/registry_read_write"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/docker_credentials"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  \"https://api.digitalocean.com/v2/registry/docker-credentials\""
          }
        ]
      }
    },
    "/v2/registry/validate-name": {
      "post": {
        "operationId": "validate_registry_name",
        "summary": "Validate a Container Registry Name",
        "description": "To validate that a container registry name is available for use, send a POST\nrequest to `/v2/registry/validate-name`.\n\nIf the name is both formatted correctly and available, the response code will\nbe 204 and contain no body. If the name is already in use, the response will\nbe a 409 Conflict.\n",
        "tags": [
          "Container Registry"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/validate_registry"
              }
            }
          }
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/no_content"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "409": {
            "$ref": "#/components/responses/conflict"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  -d '{\"name\": \"example\"}' \\\n  \"https://api.digitalocean.com/v2/registry/validate-name\""
          }
        ]
      }
    },
    "/v2/registry/{registry_name}": {
      "get": {
        "operationId": "list_registry_repositories",
        "summary": "List All Container Registry Repositories",
        "description": "To list all repositories in your container registry, send a GET request to `/v2/registry/$REGISTRY_NAME/repositories`.",
        "tags": [
          "Container Registry"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/registry_name"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/all_repositories"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  \"https://api.digitalocean.com/v2/registry/example/repositories\""
          }
        ]
      }
    },
    "/v2/registry/{registry_name}/{repository_name}/tags": {
      "get": {
        "operationId": "list_repository_tags",
        "summary": "List All Container Registry Repository Tags",
        "description": "To list all tags in your container registry repository, send a GET\nrequest to `/v2/registry/$REGISTRY_NAME/repositories/$REPOSITORY_NAME/tags`.\n\nNote that if your repository name contains `/` characters, it must be\nURL-encoded in the request URL. For example, to list tags for\n`registry.digitalocean.com/example/my/repo`, the path would be\n`/v2/registry/example/repositories/my%2Frepo/tags`.\n",
        "tags": [
          "Container Registry"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/registry_name"
          },
          {
            "$ref": "#/components/parameters/registry_repository_name"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/repository_tags"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  \"https://api.digitalocean.com/v2/registry/example/repositories/repo-1/tags\""
          }
        ]
      }
    },
    "/v2/registry/{registry_name}/{repository_name}/tags/{repository_tag}": {
      "delete": {
        "operationId": "delete_repository_tag",
        "summary": "Delete Container Registry Repository Tag",
        "description": "To delete a container repository tag, send a DELETE request to\n`/v2/registry/$REGISTRY_NAME/repositories/$REPOSITORY_NAME/tags/$TAG`.\n\nNote that if your repository name contains `/` characters, it must be\nURL-encoded in the request URL. For example, to delete\n`registry.digitalocean.com/example/my/repo:mytag`, the path would be\n`/v2/registry/example/repositories/my%2Frepo/tags/mytag`.\n\nA successful request will receive a 204 status code with no body in response.\nThis indicates that the request was processed successfully.\n",
        "tags": [
          "Container Registry"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/registry_name"
          },
          {
            "$ref": "#/components/parameters/registry_repository_name"
          },
          {
            "$ref": "#/components/parameters/registry_repository_tag"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/no_content"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X DELETE \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  \"https://api.digitalocean.com/v2/registry/example/repositories/repo-1/tags/mytag\""
          }
        ]
      }
    },
    "/v2/registry/{registry_name}/{repository_name}/digests/{manifest_digest}": {
      "delete": {
        "operationId": "delete_repository_manifest",
        "summary": "Delete Container Registry Repository Manifest",
        "description": "To delete a container repository manifest by digest, send a DELETE request to\n`/v2/registry/$REGISTRY_NAME/repositories/$REPOSITORY_NAME/digests/$MANIFEST_DIGEST`.\n\nNote that if your repository name contains `/` characters, it must be\nURL-encoded in the request URL. For example, to delete\n`registry.digitalocean.com/example/my/repo@sha256:abcd`, the path would be\n`/v2/registry/example/repositories/my%2Frepo/digests/sha256:abcd`.\n\nA successful request will receive a 204 status code with no body in response.\nThis indicates that the request was processed successfully.\n",
        "tags": [
          "Container Registry"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/registry_name"
          },
          {
            "$ref": "#/components/parameters/registry_repository_name"
          },
          {
            "$ref": "#/components/parameters/registry_manifest_digest"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/no_content"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X DELETE \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  \"https://api.digitalocean.com/v2/registry/example/repositories/repo-1/digests/sha256:cb8a924afdf0229ef7515d9e5b3024e23b3eb03ddbba287f4a19c6ac90b8d221\""
          }
        ]
      }
    },
    "/v2/registry/{registry_name}/garbage-collection": {
      "post": {
        "operationId": "run_garbage_collection",
        "summary": "Start Garbage Collection",
        "description": "Garbage collection enables users to clear out unreferenced blobs (layer &\nmanifest data) after deleting one or more manifests from a repository. If\nthere are no unreferenced blobs resulting from the deletion of one or more\nmanifests, garbage collection is effectively a noop.\n[See here for more information](https://www.digitalocean.com/docs/container-registry/how-to/clean-up-container-registry/)\nabout how and why you should clean up your container registry periodically.\n\nTo request a garbage collection run on your registry, send a POST request to\n`/v2/registry/$REGISTRY_NAME/garbage-collection`. This will initiate the\nfollowing sequence of events on your registry.\n\n* Set the registry to read-only mode, meaning no further write-scoped  JWTs will be issued to registry clients. Existing write-scoped JWTs will\n  continue to work until they expire which can take up to 15 minutes.\n* Wait until all existing write-scoped JWTs have expired.\n* Scan all registry manifests to determine which blobs are unreferenced.\n* Delete all unreferenced blobs from the registry.\n* Record the number of blobs deleted and bytes freed, mark the garbage  collection status as `success`.\n* Remove the read-only mode restriction from the registry, meaning write-scoped  JWTs will once again be issued to registry clients.\n",
        "tags": [
          "Container Registry"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/registry_name"
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/components/responses/garbage_collection"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  \"https://api.digitalocean.com/v2/registry/example/garbage-collection\""
          }
        ]
      },
      "get": {
        "operationId": "get_garbage_collection",
        "summary": "Get Active Garbage Collection",
        "description": "To get information about the currently-active garbage collection for a registry, send a GET request to `/v2/registry/$REGISTRY_NAME/garbage-collection`.",
        "tags": [
          "Container Registry"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/registry_name"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/garbage_collection"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  \"https://api.digitalocean.com/v2/registry/example/garbage-collection\""
          }
        ]
      }
    },
    "/v2/registry/{registry_name}/garbage-collections": {
      "get": {
        "operationId": "list_garbage_collections",
        "summary": "List Garbage Collections",
        "description": "To get information about past garbage collections for a registry, send a GET request to `/v2/registry/$REGISTRY_NAME/garbage-collections`.",
        "tags": [
          "Container Registry"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/registry_name"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/garbage_collections"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  \"https://api.digitalocean.com/v2/registry/example/garbage-collections\""
          }
        ]
      }
    },
    "/v2/registry/{registry_name}/garbage-collection/{garbage_collection_uuid}": {
      "put": {
        "operationId": "update_garbage_collection",
        "summary": "Update Garbage Collection",
        "description": "To cancel the currently-active garbage collection for a registry, send a PUT request to `/v2/registry/$REGISTRY_NAME/garbage-collection/$GC_UUID` and specify one or more of the attributes below.",
        "tags": [
          "Container Registry"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/registry_name"
          },
          {
            "$ref": "#/components/parameters/garbage_collection_uuid"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/update_registry"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/garbage_collection"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X PUT \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  \"https://api.digitalocean.com/v2/registry/example/garbage-collection/example-gc-uuid\""
          }
        ]
      }
    },
    "/v2/registry/options": {
      "get": {
        "operationId": "get_registry_options",
        "summary": "List Available Subscription Tiers",
        "description": "There are multiple subscription tiers available for container registry. Each tier allows a different number of image repositories to be created in your registry, and has a different amount of storage and transfer included.\nTo list the available subscription tiers, send a GET request to `/v2/registry/options`.",
        "tags": [
          "Container Registry"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/registry_options_response"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  \"https://api.digitalocean.com/v2/registry/options\""
          }
        ]
      }
    },
    "/v2/reports/droplet_neighbors_ids": {
      "get": {
        "operationId": "list_all_droplet_neighbors_ids",
        "summary": "List All Droplet Neighbors",
        "description": "To retrieve a list of all Droplets that are co-located on the same physical\nhardware, send a GET request to `/v2/reports/droplet_neighbors_ids`.\n\nThe results will be returned as a JSON object with a key of `neighbor_ids`.\nThis will be set to an array of arrays. Each array will contain a set of\nDroplet IDs for Droplets that share a physical server. An empty array\nindicates that all Droplets associated with your account are located on\nseparate physical hardware.\n",
        "tags": [
          "Droplets"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/droplet_neighbors_ids"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  \"https://api.digitalocean.com/v2/reports/droplet_neighbors_ids\""
          }
        ]
      }
    },
    "/v2/sizes": {
      "get": {
        "operationId": "list_all_sizes",
        "summary": "List All Droplet Sizes",
        "description": "To list all of available Droplet sizes, send a GET request to `/v2/sizes`.\nThe response will be a JSON object with a key called `sizes`. The value of this will be an array of `size` objects each of which contain the standard size attributes.",
        "tags": [
          "Sizes"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/all_sizes"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  \"https://api.digitalocean.com/v2/sizes\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"os\"\n\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n    client := godo.NewFromToken(token)\n    ctx := context.TODO()\n\n    opt := &godo.ListOptions{\n        Page:    1,\n        PerPage: 200,\n    }\n\n    sizes, _, err := client.Sizes.List(ctx, opt)\n}"
          },
          {
            "lang": "Ruby",
            "source": "require 'droplet_kit'\ntoken = ENV['DIGITALOCEAN_TOKEN']\nclient = DropletKit::Client.new(access_token: token)\n\nsizes = client.sizes.all\nsizes.each"
          }
        ]
      }
    },
    "/v2/snapshots": {
      "get": {
        "operationId": "list_all_snapshots",
        "summary": "List All Snapshots",
        "description": "To list all of the snapshots available on your account, send a GET request to\n`/v2/snapshots`.\n\nThe response will be a JSON object with a key called `snapshots`. This will be\nset to an array of `snapshot` objects, each of which will contain the standard\nsnapshot attributes.\n\n\n\nIt's possible to request filtered results by including certain query parameters.\n\n\n\nTo retrieve only snapshots based on Droplets, include the `resource_type`\nquery parameter set to `droplet`. For example, `/v2/snapshots?resource_type=droplet`.\n\n\n\nTo retrieve only snapshots based on volumes, include the `resource_type`\nquery parameter set to `volume`. For example, `/v2/snapshots?resource_type=volume`.\n",
        "tags": [
          "Snapshots"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/snapshot_resource_type"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/all_snapshots"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X GET \\\n  -H 'Content-Type: application/json' \\\n  -H 'Authorization: Bearer $DIGITALOCEAN_TOKEN' \\\n  \"https://api.digitalocean.com/v2/snapshots?page=1&per_page=1\"\n\ncurl -X GET \\\n  -H 'Content-Type: application/json' \\\n  -H 'Authorization: Bearer $DIGITALOCEAN_TOKEN' \\\n  \"https://api.digitalocean.com/v2/snapshots?page=1&per_page=1&resource_type=droplet\"\n\ncurl -X GET \\\n  -H 'Content-Type: application/json' \\\n  -H 'Authorization: Bearer $DIGITALOCEAN_TOKEN' \\\n  \"https://api.digitalocean.com/v2/snapshots?page=1&per_page=1&resource_type=volume\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"os\"\n\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n    client := godo.NewFromToken(token)\n    ctx := context.TODO()\n\n    opt := &godo.ListOptions{\n        Page:    1,\n        PerPage: 200,\n    }\n// List all snapshots\n    snapshots, _, err := client.Snapshots.List(ctx, opt)\n\n// List all Droplet snapshots\n//  snapshots, _, err := client.Snapshots.ListDroplet(ctx, opt)\n\n// List all volume snapshots\n//  snapshots, _, err := client.Snapshots.ListVolume(ctx, opt)\n}"
          },
          {
            "lang": "Ruby",
            "source": "require 'droplet_kit'\ntoken = ENV['DIGITALOCEAN_TOKEN']\nclient = DropletKit::Client.new(access_token: token)\n\nsnapshots = client.snapshots.all\nsnapshots.each"
          }
        ]
      }
    },
    "/v2/snapshots/{snapshot_id}": {
      "get": {
        "operationId": "get_snapshot",
        "summary": "Retrieve an Existing Snapshot",
        "description": "To retrieve information about a snapshot, send a GET request to\n`/v2/snapshots/$SNAPSHOT_ID`.\n\nThe response will be a JSON object with a key called `snapshot`. The value of\nthis will be an snapshot object containing the standard snapshot attributes.\n",
        "tags": [
          "Snapshots"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/snapshot_id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/existing_snapshot"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X GET \\\n  -H 'Content-Type: application/json' \\\n  -H 'Authorization: Bearer $DIGITALOCEAN_TOKEN' \\\n  \"https://api.digitalocean.com/v2/snapshots/fbe805e8-866b-11e6-96bf-000f53315a41\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"os\"\n\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n    client := godo.NewFromToken(token)\n    ctx := context.TODO()\n\n    snapshot, _, err := client.Snapshots.Get(ctx, 'fbe805e8-866b-11e6-96bf-000f53315a41')\n}"
          },
          {
            "lang": "Ruby",
            "source": "require 'droplet_kit'\ntoken = ENV['DIGITALOCEAN_TOKEN']\nclient = DropletKit::Client.new(access_token: token)\n\nsnapshot = client.snapshots.find(id: 'fbe805e8-866b-11e6-96bf-000f53315a41')"
          }
        ]
      },
      "delete": {
        "operationId": "delete_snapshot",
        "summary": "Delete a Snapshot",
        "description": "Both Droplet and volume snapshots are managed through the `/v2/snapshots/`\nendpoint. To delete a snapshot, send a DELETE request to\n`/v2/snapshots/$SNAPSHOT_ID`.\n\nA status of 204 will be given. This indicates that the request was processed\nsuccessfully, but that no response body is needed.\n",
        "tags": [
          "Snapshots"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/snapshot_id"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/no_content"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X DELETE \\\n  -H 'Content-Type: application/json' \\\n  -H 'Authorization: Bearer $DIGITALOCEAN_TOKEN' \\\n  \"https://api.digitalocean.com/v2/snapshots/fbe805e8-866b-11e6-96bf-000f53315a41\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"os\"\n\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n    client := godo.NewFromToken(token)\n    ctx := context.TODO()\n\n    _, err := client.Snapshots.Delete(ctx, 'fbe805e8-866b-11e6-96bf-000f53315a41')\n}"
          },
          {
            "lang": "Ruby",
            "source": "require 'droplet_kit'\ntoken = ENV['DIGITALOCEAN_TOKEN']\nclient = DropletKit::Client.new(access_token: token)\n\nclient.snapshots.delete(id: 'fbe805e8-866b-11e6-96bf-000f53315a41')"
          }
        ]
      }
    },
    "/v2/tags": {
      "get": {
        "operationId": "list_all_tags",
        "summary": "List All Tags",
        "description": "To list all of your tags, you can send a GET request to `/v2/tags`.",
        "tags": [
          "Tags"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/all_tags"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  \"https://api.digitalocean.com/v2/tags\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"os\"\n\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n    client := godo.NewFromToken(token)\n    ctx := context.TODO()\n\n    opt := &godo.ListOptions{\n        Page:    1,\n        PerPage: 200,\n    }\n    tags, _, err := client.Tags.List(ctx, opt)\n}"
          },
          {
            "lang": "Ruby",
            "source": "require 'droplet_kit'\ntoken = ENV['DIGITALOCEAN_TOKEN']\nclient = DropletKit::Client.new(access_token: token)\n\ntags = client.tags.all\ntags.each"
          }
        ]
      },
      "post": {
        "operationId": "create_new_tag",
        "summary": "Create a New Tag",
        "description": "To create a tag you can send a POST request to `/v2/tags` with a `name` attribute.",
        "tags": [
          "Tags"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/tag"
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/new_tag"
          },
          "400": {
            "$ref": "#/components/responses/tag_bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  -d '{\"name\":\"awesome\"}' \\\n  \"https://api.digitalocean.com/v2/tags\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"os\"\n\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n    client := godo.NewFromToken(token)\n    ctx := context.TODO()\n\n    createRequest := &TagCreateRequest{\n        Name: \"testing-1\",\n    }\n    client.Tags.Create(ctx, request)\n}"
          },
          {
            "lang": "Ruby",
            "source": "require 'droplet_kit'\ntoken = ENV['DIGITALOCEAN_TOKEN']\nclient = DropletKit::Client.new(access_token: token)\n\ntag = DropletKit::Tag.new(name: 'awesome')\nclient.tags.create(tag)"
          }
        ]
      }
    },
    "/v2/tags/{tag_id}": {
      "get": {
        "operationId": "get_tag",
        "summary": "Retrieve a Tag",
        "description": "To retrieve an individual tag, you can send a `GET` request to `/v2/tags/$TAG_NAME`.",
        "tags": [
          "Tags"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/tag_id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/existing_tag"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  \"https://api.digitalocean.com/v2/tags/awesome\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"os\"\n\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n    client := godo.NewFromToken(token)\n    ctx := context.TODO()\n\n    tag, _, err := client.Tags.Get(ctx, \"awesome\")\n}"
          },
          {
            "lang": "Ruby",
            "source": "require 'droplet_kit'\ntoken = ENV['DIGITALOCEAN_TOKEN']\nclient = DropletKit::Client.new(access_token: token)\n\nclient.tags.find(name: 'awesome')"
          }
        ]
      },
      "delete": {
        "operationId": "delete_tag",
        "summary": "Delete a Tag",
        "description": "A tag can be deleted by sending a `DELETE` request to `/v2/tags/$TAG_NAME`. Deleting a tag also untags all the resources that have previously been tagged by the Tag.",
        "tags": [
          "Tags"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/tag_id"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/no_content"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X DELETE \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  \"https://api.digitalocean.com/v2/tags/awesome\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"os\"\n\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n    client := godo.NewFromToken(token)\n    ctx := context.TODO()\n\n    client.Tags.Delete(ctx, \"awesome\")\n}"
          },
          {
            "lang": "Ruby",
            "source": "require 'droplet_kit'\ntoken = ENV['DIGITALOCEAN_TOKEN']\nclient = DropletKit::Client.new(access_token: token)\n\nclient.tags.delete(name: 'awesome')"
          }
        ]
      }
    },
    "/v2/tags/{tag_id}/resources": {
      "post": {
        "operationId": "tag_resource",
        "summary": "Tag a Resource",
        "description": "Resources can be tagged by sending a POST request to `/v2/tags/$TAG_NAME/resources` with an array of json objects containing `resource_id` and `resource_type` attributes.\nCurrently only tagging of Droplets, Images, Volumes, and Volume Snapshots is supported. `resource_id` is expected to be the Droplet's id, Image's id, or Volume/Volume Snapshot's UUID attribute as a string, and `resource_type` is expected to be the string `droplet`, `image`, `volume` or `volume_snapshot`.",
        "tags": [
          "Tags"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/tag_id"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/tag_resource"
              }
            }
          }
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/no_content"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  -d '{\"resources\":[{\"resource_id\":\"9569411\",\"resource_type\":\"droplet\"},{\"resource_id\":\"7555620\",\"resource_type\":\"image\"},{\"resource_id\":\"3d80cb72-342b-4aaa-b92e-4e4abb24a933\",\"resource_type\":\"volume\"}]}' \\\n  \"https://api.digitalocean.com/v2/tags/awesome/resources\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"os\"\n\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n    client := godo.NewFromToken(token)\n    ctx := context.TODO()\n\n    opt := &godo.ListOptions{\n        Page:    1,\n        PerPage: 200,\n    }\n    tags, _, err := client.Tags.List(ctx, opt)\n}"
          },
          {
            "lang": "Ruby",
            "source": "require 'droplet_kit'\ntoken = ENV['DIGITALOCEAN_TOKEN']\nclient = DropletKit::Client.new(access_token: token)\n\nclient.tags.tag_resources(name: 'awesome', resources: [{ resource_id: '9569411', resource_type: 'droplet' },{ resource_id: '7555620', resource_type: 'image' },{ resource_id: '3d80cb72-342b-4aaa-b92e-4e4abb24a933', resource_type: 'volume'}])"
          }
        ]
      },
      "delete": {
        "operationId": "untag_resource",
        "summary": "Untag a Resource",
        "description": "Resources can be tagged by sending a DELETE request to `/v2/tags/$TAG_NAME/resources` with an array of json objects containing `resource_id` and `resource_type` attributes.\nCurrently only untagging of Droplets, Images, Volumes, and Volume Snapshots is supported. `resource_id` is expected to be the Droplet's id, Image's id, or Volume/Volume Snapshot's UUID attribute as a string, and `resource_type` is expected to be the string `droplet`, `image`, `volume` or `volume_snapshot`.",
        "tags": [
          "Tags"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/tag_id"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/tag_resource"
              }
            }
          }
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/no_content"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X DELETE \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  -d '{\"resources\":[{\"resource_id\":\"9569411\",\"resource_type\":\"droplet\"},{\"resource_id\":\"7555620\",\"resource_type\":\"image\"},{\"resource_id\":\"3d80cb72-342b-4aaa-b92e-4e4abb24a933\",\"resource_type\":\"volume\"}]}' \\\n  \"https://api.digitalocean.com/v2/tags/awesome/resources\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"os\"\n\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n    client := godo.NewFromToken(token)\n    ctx := context.TODO()\n\n    untagResourcesRequest := &godo.UntagResourcesRequest{\n        Resources: []Resource{{ID: \"11457573\", Type: \"droplet\"},{ID: \"7555620\", Type: \"image\"},{ID: \"3d80cb72-342b-4aaa-b92e-4e4abb24a933\", Type: \"volume\"}},\n    }\n    client.Tags.UntagResources(ctx, \"awesome\", untagResourcesRequest)\n}"
          },
          {
            "lang": "Ruby",
            "source": "require 'droplet_kit'\ntoken = ENV['DIGITALOCEAN_TOKEN']\nclient = DropletKit::Client.new(access_token: token)\n\nclient.tags.untag_resources(name: 'awesome', resources: [{ resource_id: '9569411', resource_type: 'droplet' },{ resource_id: '7555620', resource_type: 'image' },{ resource_id: '3d80cb72-342b-4aaa-b92e-4e4abb24a933', resource_type: 'volume' }])"
          }
        ]
      }
    },
    "/v2/volumes": {
      "get": {
        "operationId": "list_all_volumes",
        "summary": "List All Block Storage Volumes",
        "description": "To list all of the block storage volumes available on your account, send a GET request to `/v2/volumes`.\n\n\nThe `region` may be provided as query paramater in order to restrict results to volumes available in a specific region. For example: `/v2/volumes?region=nyc1`\n\nIt is also possible to list volumes on your account that match a specified name. To do so, send a GET request with the volume's name as a query parameter to `/v2/volumes?name=$VOLUME_NAME`.\n**Note:** You can only create one volume per region with the same name.\n\nIt is also possible to retrieve information about a block storage volume by name. To do so, send a GET request with the volume's name and the region slug for the region it is located in as query parameters to `/v2/volumes?name=$VOLUME_NAME&region=nyc1`.\n\n\n",
        "tags": [
          "Block Storage"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/volume_name"
          },
          {
            "$ref": "#/components/parameters/region"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/all_volumes"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  \"https://api.digitalocean.com/v2/volumes?region=nyc1\"\n\ncurl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  \"https://api.digitalocean.com/v2/volumes?name=example\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"os\"\n\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n    client := godo.NewFromToken(token)\n    ctx := context.TODO()\n\n    opt := &godo.ListOptions{\n        Page:    1,\n        PerPage: 200,\n    }\n\n    volumes, _, err := client.Storage.ListVolumes(ctx, opt)\n}"
          },
          {
            "lang": "Ruby",
            "source": "require 'droplet_kit'\ntoken = ENV['DIGITALOCEAN_TOKEN']\nclient = DropletKit::Client.new(access_token: token)\n\nvolumes = client.volumes.all\nvolumes.each"
          }
        ]
      },
      "post": {
        "operationId": "create_new_volume",
        "summary": "Create a New Block Storage Volume",
        "description": "To create a new volume, send a POST request to `/v2/volumes`. Optionally, a `filesystem_type` attribute may be provided in order to automatically format the volume's filesystem. Pre-formatted volumes are automatically mounted when attached to Ubuntu, Debian, Fedora, Fedora Atomic, and CentOS Droplets created on or after April 26, 2018. Attaching pre-formatted volumes to Droplets without support for auto-mounting is not recommended.",
        "tags": [
          "Block Storage"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/new_volume_ext4"
                  },
                  {
                    "$ref": "#/components/schemas/new_volume_xfs"
                  }
                ],
                "discriminator": {
                  "propertyName": "filesystem_type",
                  "mapping": {
                    "ext4": "#/components/schemas/new_volume_ext4",
                    "xfs": "#/components/schemas/new_volume_xfs"
                  }
                }
              },
              "examples": {
                "ext4 volume": {
                  "value": {
                    "size_gigabytes": 10,
                    "name": "ext4_example",
                    "description": "Block store for examples",
                    "region": "nyc1",
                    "filesystem_type": "ext4",
                    "filesystem_label": "ext4_volume_01"
                  }
                },
                "xfs volume": {
                  "value": {
                    "size_gigabytes": 10,
                    "name": "xfs_example",
                    "description": "Block store for examples",
                    "region": "nyc1",
                    "filesystem_type": "xfs",
                    "filesystem_label": "xfs_volume01"
                  }
                },
                "Volume from a snapshot": {
                  "value": {
                    "size_gigabytes": 10,
                    "name": "snapshot_example",
                    "snapshot_id": "b0798135-fb76-11eb-946a-0a58ac146f33",
                    "region": "nyc1",
                    "description": "A new volume based on a snapshot",
                    "filesystem_type": "ext4",
                    "filesystem_label": "ext4_volume_01"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/volume"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  -d '{\"size_gigabytes\":10, \"name\": \"example\", \"description\": \"Block store for examples\", \"region\": \"nyc1\", \"filesystem_type\": \"ext4\", \"filesystem_label\": \"example\"}' \\\n  \"https://api.digitalocean.com/v2/volumes\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"os\"\n\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n    client := godo.NewFromToken(token)\n    ctx := context.TODO()\n\n    createRequest := &VolumeCreateRequest{\n        Region:        \"nyc1\",\n        Name:          \"example\",\n        Description:   \"Block store for examples\",\n        SizeGigaBytes: 10,\n    }\n\n    volume, _, err := client.Storage.CreateVolume(ctx, createRequest)\n}"
          },
          {
            "lang": "Ruby",
            "source": "require 'droplet_kit'\ntoken = ENV['DIGITALOCEAN_TOKEN']\nclient = DropletKit::Client.new(access_token: token)\n\nvolume = DropletKit::Volume.new(\n  size_gigabytes: 10,\n  name: 'Example',\n  description: 'Block store for examples',\n  region: 'nyc1'\n)\nclient.volumes.create(volume)"
          }
        ]
      },
      "delete": {
        "operationId": "delete_volume_by_name",
        "summary": "Delete a Block Storage Volume by Name",
        "description": "Block storage volumes may also be deleted by name by sending a DELETE request with the volume's **name** and the **region slug** for the region it is located in as query parameters to `/v2/volumes?name=$VOLUME_NAME&region=nyc1`.\nNo response body will be sent back, but the response code will indicate success. Specifically, the response code will be a 204, which means that the action was successful with no returned body data.\n\n",
        "tags": [
          "Block Storage"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/volume_name"
          },
          {
            "$ref": "#/components/parameters/region"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/no_content"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X DELETE \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  \"https://api.digitalocean.com/v2/volumes?name=example&region=nyc1\""
          }
        ]
      }
    },
    "/v2/volumes/actions": {
      "post": {
        "operationId": "post_volume_action_by_name",
        "summary": "Initiate A Block Storage Action By Volume Name",
        "description": "To initiate an action on a block storage volume by Id, send a POST request to\n`~/v2/volumes/actions`. The body should contain the appropriate\nattributes for the respective action.\n\n\n\n| Attribute   | Details                                                             |\n| ----------- | ------------------------------------------------------------------- |\n| type        | This must be `attach`                                               |\n| volume_name | The name of the block storage volume                                |\n| droplet_id  | Set to the Droplet's ID                                             |\n| region      | Set to the slug representing the region where the volume is located |\n\nEach volume may only be attached to a single Droplet. However, up to five\nvolumes may be attached to a Droplet at a time. Pre-formatted volumes will be\nautomatically mounted to Ubuntu, Debian, Fedora, Fedora Atomic, and CentOS\nDroplets created on or after April 26, 2018 when attached. On older Droplets,\n[additional configuration](https://www.digitalocean.com/community/tutorials/how-to-partition-and-format-digitalocean-block-storage-volumes-in-linux#mounting-the-filesystems)\nis required.\n\n\n\n| Attribute   | Details                                                             |\n| ----------- | ------------------------------------------------------------------- |\n| type        | This must be `detach`                                               |\n| volume_name | The name of the block storage volume                                |\n| droplet_id  | Set to the Droplet's ID                                             |\n| region      | Set to the slug representing the region where the volume is located |\n",
        "tags": [
          "Block Storage Actions"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/volume_action_post_attach"
                  },
                  {
                    "$ref": "#/components/schemas/volume_action_post_detach"
                  }
                ],
                "discriminator": {
                  "propertyName": "type",
                  "mapping": {
                    "attach": "#/components/schemas/volume_action_post_attach",
                    "detach": "#/components/schemas/volume_action_post_detach"
                  }
                }
              },
              "examples": {
                "VolumeActionAttach": {
                  "value": {
                    "type": "attach",
                    "droplet_id": 11612190,
                    "region": "nyc1",
                    "tags": [
                      "aninterestingtag"
                    ]
                  }
                },
                "VolumeActionDetatch": {
                  "value": {
                    "type": "detach",
                    "droplet_id": 11612190,
                    "region": "nyc1"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "202": {
            "$ref": "#/components/responses/volume_action"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer b7d03a6947b217efb6f3ec3bd3504582\" \\\n  -d '{\"type\": \"attach\", \"volume_name\": \"example\", \"region\": \"nyc1\", \"droplet_id\": \"11612190\",\"tags\":[\"aninterestingtag\"] }' \\\n  \"https://api.digitalocean.com/v2/volumes/actions\"\n\ncurl -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer b7d03a6947b217efb6f3ec3bd3504582\" \\\n  -d '{\"type\": \"detach\", \"droplet_id\": \"11612190\", \"volume_name\": \"example\", \"region\": \"nyc1\"}' \\\n  \"https://api.digitalocean.com/v2/volumes/actions\""
          }
        ]
      }
    },
    "/v2/volumes/snapshot/{snapshot_id}": {
      "get": {
        "operationId": "get_volume_snapshot_by_id",
        "summary": "Retreive an Existing Volume Snapshot",
        "description": "To retrieve the details of a snapshot that has been created from a volume, send a GET request to `/v2/volumes/snapshots/$SNAPSHOT_ID`.\n\n",
        "tags": [
          "Block Storage"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/snapshot_id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/volume_snapshot"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        }
      },
      "delete": {
        "operationId": "delete_volume_snapshot_by_id",
        "summary": "Delete a Volume Snapshot",
        "description": "To delete a volume snapshot, send a DELETE request to\n`/v2/snapshots/$SNAPSHOT_ID`.\n\nA status of 204 will be given. This indicates that the request was processed\nsuccessfully, but that no response body is needed.\n",
        "tags": [
          "Block Storage"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/snapshot_id"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/no_content"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X DELETE -H 'Content-Type: application/json' -H 'Authorization: Bearer $DIGITALOCEAN_TOKEN' \\  \"https://api.digitalocean.com/v2/snapshots/fbe805e8-866b-11e6-96bf-000f53315a41\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"os\"\n\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n    client := godo.NewFromToken(token)\n    ctx := context.TODO()\n\n    _, err := client.Storage.DeleteSnapshot(ctx, \"82a48a18-873f-11e6-96bf-000f53315a41\")\n}"
          },
          {
            "lang": "Ruby",
            "source": "require 'droplet_kit'\ntoken = ENV['DIGITALOCEAN_TOKEN']\nclient = DropletKit::Client.new(access_token: token)\n\nclient.snapshots.delete(id: \"fbe805e8-866b-11e6-96bf-000f53315a41\")"
          }
        ]
      }
    },
    "/v2/volumes/{volume_id}": {
      "get": {
        "operationId": "get_volume",
        "summary": "Retrieve an Existing Block Storage Volume",
        "description": "To show information about a block storage volume, send a GET request to `/v2/volumes/$VOLUME_ID`.\n\n",
        "tags": [
          "Block Storage"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/volume_id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/volume"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  \"https://api.digitalocean.com/v2/volumes/7724db7c-e098-11e5-b522-000f53304e51\"\n\ncurl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  \"https://api.digitalocean.com/v2/volumes?name=example&region=nyc1\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"os\"\n\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n    client := godo.NewFromToken(token)\n    ctx := context.TODO()\n\n    volume, _, err := client.Storage.GetVolume(ctx, \"7724db7c-e098-11e5-b522-000f53304e51\")\n}"
          },
          {
            "lang": "Ruby",
            "source": "require 'droplet_kit'\ntoken = ENV['DIGITALOCEAN_TOKEN']\nclient = DropletKit::Client.new(access_token: token)\n\nclient.volumes.find(id: '7724db7c-e098-11e5-b522-000f53304e51')"
          }
        ]
      },
      "delete": {
        "operationId": "delete_volume",
        "summary": "Delete a Block Storage Volume",
        "description": "To delete a block storage volume, destroying all data and removing it from your account, send a DELETE request to `/v2/volumes/$VOLUME_ID`.\nNo response body will be sent back, but the response code will indicate success. Specifically, the response code will be a 204, which means that the action was successful with no returned body data.\n\n",
        "tags": [
          "Block Storage"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/volume_id"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/no_content"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X DELETE \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  \"https://api.digitalocean.com/v2/volumes/7724db7c-e098-11e5-b522-000f53304e51\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"os\"\n\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n    client := godo.NewFromToken(token)\n    ctx := context.TODO()\n\n    _, err := client.Storage.DeleteVolume(ctx, \"7724db7c-e098-11e5-b522-000f53304e51\")\n}"
          },
          {
            "lang": "Ruby",
            "source": "require 'droplet_kit'\ntoken = ENV['DIGITALOCEAN_TOKEN']\nclient = DropletKit::Client.new(access_token: token)\n\nclient.volumes.delete(id: '7724db7c-e098-11e5-b522-000f53304e51')"
          }
        ]
      }
    },
    "/v2/volumes/{volume_id}/actions": {
      "get": {
        "operationId": "list_all_volume_actions",
        "summary": "List All Actions for a Volume",
        "description": "To retrieve all actions that have been executed on a volume, send a GET request to `/v2/volumes/$VOLUME_ID/actions`.\n\n",
        "tags": [
          "Block Storage Actions"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/volume_id"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/all_volume_actions"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  \"https://api.digitalocean.com/v2/volumes/7724db7c-e098-11e5-b522-000f53304e51/actions?page=1&per_page=1\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"os\"\n\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n    client := godo.NewFromToken(token)\n    ctx := context.TODO()\n\n    opt := &godo.ListOptions{\n        Page:    1,\n        PerPage: 200,\n    }\n\n    actions, _, err := client.StorageActions(ctx, \"7724db7c-e098-11e5-b522-000f53304e51\", opt)\n}"
          },
          {
            "lang": "Ruby",
            "source": "require 'droplet_kit'\ntoken = ENV['DIGITALOCEAN_TOKEN']\nclient = DropletKit::Client.new(access_token: token)\n\nactions = client.volume.actions(id: '7724db7c-e098-11e5-b522-000f53304e51')\nactions.each"
          }
        ]
      },
      "post": {
        "operationId": "post_volume_action_by_id",
        "summary": "Initiate A Block Storage Action By Volume Id",
        "description": "To initiate an action on a block storage volume by Id, send a POST request to\n`~/v2/volumes/$VOLUME_ID/actions`. The body should contain the appropriate\nattributes for the respective action.\n\n\n\n| Attribute  | Details                                                             |\n| ---------- | ------------------------------------------------------------------- |\n| type       | This must be `attach`                                               |\n| droplet_id | Set to the Droplet's ID                                             |\n| region     | Set to the slug representing the region where the volume is located |\n\nEach volume may only be attached to a single Droplet. However, up to five\nvolumes may be attached to a Droplet at a time. Pre-formatted volumes will be\nautomatically mounted to Ubuntu, Debian, Fedora, Fedora Atomic, and CentOS\nDroplets created on or after April 26, 2018 when attached. On older Droplets,\n[additional configuration](https://www.digitalocean.com/community/tutorials/how-to-partition-and-format-digitalocean-block-storage-volumes-in-linux#mounting-the-filesystems)\nis required.\n\n\n\n| Attribute  | Details                                                             |\n| ---------- | ------------------------------------------------------------------- |\n| type       | This must be `detach`                                               |\n| droplet_id | Set to the Droplet's ID                                             |\n| region     | Set to the slug representing the region where the volume is located |\n\n\n\n| Attribute      | Details                                                             |\n| -------------- | ------------------------------------------------------------------- |\n| type           | This must be `resize`                                               |\n| size_gigabytes | The new size of the block storage volume in GiB (1024^3)            |\n| region         | Set to the slug representing the region where the volume is located |\n\nVolumes may only be resized upwards. The maximum size for a volume is 16TiB.\n",
        "tags": [
          "Block Storage Actions"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/volume_id"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/volume_action_post_attach"
                  },
                  {
                    "$ref": "#/components/schemas/volume_action_post_detach"
                  },
                  {
                    "$ref": "#/components/schemas/volume_action_post_resize"
                  }
                ],
                "discriminator": {
                  "propertyName": "type",
                  "mapping": {
                    "attach": "#/components/schemas/volume_action_post_attach",
                    "detach": "#/components/schemas/volume_action_post_detach",
                    "resize": "#/components/schemas/volume_action_post_resize"
                  }
                }
              },
              "examples": {
                "VolumeActionAttach": {
                  "value": {
                    "type": "attach",
                    "droplet_id": 11612190,
                    "region": "nyc1",
                    "tags": [
                      "aninterestingtag"
                    ]
                  }
                },
                "VolumeActionDetatch": {
                  "value": {
                    "type": "detach",
                    "droplet_id": 11612190,
                    "region": "nyc1"
                  }
                },
                "VolumeActionResize": {
                  "value": {
                    "type": "resize",
                    "size_gigabytes": 100,
                    "region": "nyc1"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "202": {
            "$ref": "#/components/responses/volume_action"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  -d '{\"type\": \"attach\", \"droplet_id\": 11612190, \"region\": \"nyc1\", \"tags\":[\"aninterestingtag\"]}' \\\n  \"https://api.digitalocean.com/v2/volumes/7724db7c-e098-11e5-b522-000f53304e51/actions\"\n\ncurl -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  -d '{\"type\": \"detach\", \"droplet_id\": \"11612190\", \"region\": \"nyc1\"}' \\\n  \"https://api.digitalocean.com/v2/volumes/7724db7c-e098-11e5-b522-000f53304e51/actions\"\n\ncurl -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  -d '{\"type\":\"resize\",\"size_gigabytes\": 100, \"region\":\"nyc1\"}' \\\n  \"https://api.digitalocean.com/v2/volumes/7724db7c-e098-11e5-b522-000f53304e51/actions\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"os\"\n\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n    client := godo.NewFromToken(token)\n    ctx := context.TODO()\n\n  // Attach a Volume to a Droplet by ID\n    action, _, err := client.StorageActions.Attach(ctx, \"7724db7c-e098-11e5-b522-000f53304e51\", 11612190)\n\n  // Remove a Volume from a Droplet by ID\n  // action, _, err := client.StorageActions.Detach(ctx, \"7724db7c-e098-11e5-b522-000f53304e51\")\n\n  // Resize a Volume\n  // action, _, err := client.StorageActions.Resize(ctx, \"7724db7c-e098-11e5-b522-000f53304e51\", 100, \"nyc1\")\n}"
          },
          {
            "lang": "Ruby",
            "source": "require 'droplet_kit'\ntoken = ENV['DIGITALOCEAN_TOKEN']\nclient = DropletKit::Client.new(access_token: token)\n\n\nclient.volume_actions.attach(volume_id:'7724db7c-e098-11e5-b522-000f53304e51', droplet_id: 11612190, region: 'nyc1'\n\n\n\nclient.volume_actions.detach(volume_id:'7724db7c-e098-11e5-b522-000f53304e51', droplet_id: 11612190, region: 'nyc1'"
          }
        ]
      }
    },
    "/v2/volumes/{volume_id}/actions/{action_id}": {
      "get": {
        "operationId": "get_volume_action",
        "summary": "Retrieve an Existing Volume Action",
        "description": "To retrieve the status of a volume action, send a GET request to `/v2/volumes/$VOLUME_ID/actions/$ACTION_ID`.\n\n",
        "tags": [
          "Block Storage Actions"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/volume_id"
          },
          {
            "$ref": "#/components/parameters/action_id"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/volume_action"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  \"https://api.digitalocean.com/v2/volumes/7724db7c-e098-11e5-b522-000f53304e51/actions/72531856\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"os\"\n\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n    client := godo.NewFromToken(token)\n    ctx := context.TODO()\n\n    action, _, err := client.StorageActions.Get(ctx, \"7724db7c-e098-11e5-b522-000f53304e51\", 72531856)\n}"
          },
          {
            "lang": "Ruby",
            "source": "require 'droplet_kit'\ntoken = ENV['DIGITALOCEAN_TOKEN']\nclient = DropletKit::Client.new(access_token: token)\n\nclient.volume.actions.find(volume_id: '7724db7c-e098-11e5-b522-000f53304e51', id: 72531856)"
          }
        ]
      }
    },
    "/v2/volumes/{volume_id}/snapshots": {
      "get": {
        "operationId": "list_volume_snapshots",
        "summary": "List Snapshots for a Volume",
        "description": "To retrieve the snapshots that have been created from a volume, send a GET request to `/v2/volumes/$VOLUME_ID/snapshots`.\n\n",
        "tags": [
          "Block Storage"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/volume_id"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/volume_snapshots"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X GET \\\n  -H 'Content-Type: application/json' \\\n  -H 'Authorization: Bearer $DIGITALOCEAN_TOKEN' \\\n  \"https://api.digitalocean.com/v2/volumes/82a48a18-873f-11e6-96bf-000f53315a41/snapshots?page=1&per_page=1\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"os\"\n\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n    client := godo.NewFromToken(token)\n    ctx := context.TODO()\n\n    opt := &godo.ListOptions{\n        Page:    1,\n        PerPage: 200,\n    }\n\n    volumes, _, err := client.Storage.ListSnapshots(ctx, '82a48a18-873f-11e6-96bf-000f53315a41', opt)\n}"
          },
          {
            "lang": "Ruby",
            "source": "require 'droplet_kit'\ntoken = ENV['DIGITALOCEAN_TOKEN']\nclient = DropletKit::Client.new(access_token: token)\n\nsnapshots = client.volumes.snapshots(id: '82a48a18-873f-11e6-96bf-000f53315a41')\nsnapshots.each"
          }
        ]
      },
      "post": {
        "operationId": "create_volume_snapshot",
        "summary": "Create Snapshot from a Volume",
        "description": "To create a snapshot from a volume, sent a POST request to `/v2/volumes/$VOLUME_ID/snapshots`.",
        "tags": [
          "Block Storage"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/volume_id"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "A human-readable name for the volume snapshot.",
                    "example": "big-data-snapshot1475261774"
                  },
                  "tags": {
                    "$ref": "#/components/schemas/tags_array"
                  }
                },
                "required": [
                  "name"
                ]
              },
              "example": {
                "name": "big-data-snapshot1475261774"
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/volume_snapshot"
          },
          "400": {
            "$ref": "#/components/responses/bad_request"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X POST \\\n  -H 'Content-Type: application/json' \\\n  -H 'Authorization: Bearer $DIGITALOCEAN_TOKEN' \\\n  -d '{\"name\":\"big-data-snapshot1475261774\", \"tags\":[\"aninterestingtag\"]}' \\\n  \"https://api.digitalocean.com/v2/volumes/82a48a18-873f-11e6-96bf-000f53315a41/snapshots\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"os\"\n\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n    client := godo.NewFromToken(token)\n    ctx := context.TODO()\n\n    snapshot, _, err := client.Storage.CreateSnapshot(ctx, \"82a48a18-873f-11e6-96bf-000f53315a41\")\n}"
          },
          {
            "lang": "Ruby",
            "source": "require 'droplet_kit'\ntoken = ENV['DIGITALOCEAN_TOKEN']\nclient = DropletKit::Client.new(access_token: token)\n\nclient.volumes.create_snapshot(id: \"82a48a18-873f-11e6-96bf-000f53315a41\", name: \"big-data-snapshot1475261774\")"
          }
        ]
      }
    },
    "/v2/vpcs": {
      "get": {
        "operationId": "list_vpcs",
        "summary": "List All VPCs",
        "description": "To list all of the VPCs on your account, send a GET request to `/v2/vpcs`.",
        "tags": [
          "VPCs"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/all_vpcs"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  \"https://api.digitalocean.com/v2/vpcs\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"os\"\n\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n    client := godo.NewFromToken(token)\n    ctx := context.TODO()\n\n    opts := &godo.ListOptions{\n     Page:    1,\n     PerPage: 200,\n    }\n\n    vpcs, _, err := client.VPCs.List(ctx, opts)\n}"
          }
        ]
      },
      "post": {
        "operationId": "create_vpc",
        "summary": "Create a New VPC",
        "description": "To create a VPC, send a POST request to `/v2/vpcs` specifying the attributes\nin the table below in the JSON body.\n\n**Note:** If you do not currently have a VPC network in a specific datacenter\nregion, the first one that you create will be set as the default for that\nregion. The default VPC for a region cannot be changed or deleted.\n",
        "tags": [
          "VPCs"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/vpc_updatable"
                  },
                  {
                    "$ref": "#/components/schemas/vpc_create"
                  }
                ],
                "required": [
                  "name",
                  "region"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/existing_vpc"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  -d '{\"name\":\"my-new-vpc\", \"region\":\"nyc1\", \"ip_range\": \"10.10.10.0/24\"}' \\\n  \"https://api.digitalocean.com/v2/vpcs\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"os\"\n\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n    client := godo.NewFromToken(token)\n    ctx := context.TODO()\n\n    createRequest := &godo.VPCCreateRequest{\n     Name:       \"my-new-vpc\",\n     RegionSlug: \"nyc1\",\n     IPRange:    \"10.10.10.0/24\",\n    }\n\n    vpc, _, err := client.VPCs.Create(ctx, createRequest)\n}"
          }
        ]
      }
    },
    "/v2/vpcs/{vpc_id}": {
      "get": {
        "operationId": "get_vpc",
        "summary": "Retrieve an Existing VPC",
        "description": "To show information about an existing VPC, send a GET request to `/v2/vpcs/$VPC_ID`.",
        "tags": [
          "VPCs"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/vpc_id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/existing_vpc"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  \"https://api.digitalocean.com/v2/vpcs/5a4981aa-9653-4bd1-bef5-d6bff52042e4\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"os\"\n\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n    client := godo.NewFromToken(token)\n    ctx := context.TODO()\n\n    vpc, _, err := client.VPCs.Get(ctx, \"5a4981aa-9653-4bd1-bef5-d6bff52042e4\")\n}"
          }
        ]
      },
      "put": {
        "operationId": "update_vpc",
        "summary": "Update a VPC",
        "description": "To update information about a VPC, send a PUT request to `/v2/vpcs/$VPC_ID`.\n",
        "tags": [
          "VPCs"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/vpc_id"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/vpc_updatable"
                  },
                  {
                    "$ref": "#/components/schemas/vpc_default"
                  }
                ],
                "required": [
                  "name"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/existing_vpc"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X PUT \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  -d '{\"name\":\"renamed-new-vpc\", \"description\": \"A new description\", \"default\": true}' \\\n  \"https://api.digitalocean.com/v2/vpcs/5a4981aa-9653-4bd1-bef5-d6bff52042e4\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"os\"\n\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n    client := godo.NewFromToken(token)\n    ctx := context.TODO()\n\n    updateRequest := &godo.VPCUpdateRequest{\n     Name:        \"renamed-new-vpc\",\n     Description: \"A new description\",\n    }\n\n    _, _, err := client.VPCs.Update(ctx, \"5a4981aa-9653-4bd1-bef5-d6bff52042e4\", updateRequest)\n}"
          }
        ]
      },
      "patch": {
        "operationId": "patch_vpc",
        "summary": "Partially Update a VPC",
        "description": "To update a subset of information about a VPC, send a PATCH request to\n`/v2/vpcs/$VPC_ID`.\n",
        "tags": [
          "VPCs"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/vpc_id"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/vpc_updatable"
                  },
                  {
                    "$ref": "#/components/schemas/vpc_default"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/existing_vpc"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X PATCH \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  -d '{\"description\": \"An updated description\"}' \\\n  \"https://api.digitalocean.com/v2/vpcs/5a4981aa-9653-4bd1-bef5-d6bff52042e4\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"os\"\n\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n    client := godo.NewFromToken(token)\n    ctx := context.TODO()\n\n    vpcDesc := \"An updated description\"\n    _, _, err := client.VPCs.Set(ctx, \"5a4981aa-9653-4bd1-bef5-d6bff52042e4\", godo.VPCSetDescription(vpcDesc))\n}"
          }
        ]
      },
      "delete": {
        "operationId": "delete_vpc",
        "summary": "Delete a VPC",
        "description": "To delete a VPC, send a DELETE request to `/v2/vpcs/$VPC_ID`. A 204 status\ncode with no body will be returned in response to a successful request.\n\nThe default VPC for a region can not be deleted. Additionally, a VPC can only\nbe deleted if it does not contain any member resources. Attempting to delete\na region's default VPC or a VPC that still has members will result in a\n403 Forbidden error response.\n",
        "tags": [
          "VPCs"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/vpc_id"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/no_content"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X DELETE \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  \"https://api.digitalocean.com/v2/vpcs/e0fe0f4d-596a-465e-a902-571ce57b79fa\""
          },
          {
            "lang": "Go",
            "source": "import (\n    \"context\"\n    \"os\"\n\n    \"github.com/digitalocean/godo\"\n)\n\nfunc main() {\n    token := os.Getenv(\"DIGITALOCEAN_TOKEN\")\n\n    client := godo.NewFromToken(token)\n    ctx := context.TODO()\n\n    resp, err := client.VPCs.Delete(ctx, \"5a4981aa-9653-4bd1-bef5-d6bff52042e4\")\n}"
          }
        ]
      }
    },
    "/v2/vpcs/{vpc_id}/members": {
      "get": {
        "operationId": "list_vpc_members",
        "summary": "List the Member Resources of a VPC",
        "description": "To list all of the resources that are members of a VPC, send a GET request to\n`/v2/vpcs/$VPC_ID/members`.\n\nTo only list resources of a specific type that are members of the VPC,\nincluded a `resource_type` query parameter. For example, to only list Droplets\nin the VPC, send a GET request to `/v2/vpcs/$VPC_ID/members?resource_type=droplet`.\n",
        "tags": [
          "VPCs"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/vpc_id"
          },
          {
            "$ref": "#/components/parameters/vpc_resource_type"
          },
          {
            "$ref": "#/components/parameters/per_page"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/vpc_members"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/not_found"
          },
          "429": {
            "$ref": "#/components/responses/too_many_requests"
          },
          "500": {
            "$ref": "#/components/responses/server_error"
          },
          "default": {
            "$ref": "#/components/responses/unexpected_error"
          }
        },
        "x-codeSamples": [
          {
            "lang": "cURL",
            "source": "curl -X GET \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \\\n  \"https://api.digitalocean.com/v2/vpcs/5a4981aa-9653-4bd1-bef5-d6bff52042e4/members\""
          }
        ]
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearer_auth": {
        "type": "http",
        "scheme": "bearer",
        "description": "\n\nIn order to interact with the DigitalOcean API, you or your application must\nauthenticate.\n\nThe DigitalOcean API handles this through OAuth, an open standard for\nauthorization. OAuth allows you to delegate access to your account in full\nor in read-only mode.\n\nYou can generate an OAuth token by visiting the [Apps & API](https://cloud.digitalocean.com/settings/applications)\nsection of the DigitalOcean control panel for your account.\n\nAn OAuth token functions as a complete authentication request. In effect, it\nacts as a substitute for a username and password pair.\n\nBecause of this, it is absolutely **essential** that you keep your OAuth\ntokens secure. In fact, upon generation, the web interface will only display\neach token a single time in order to prevent the token from being compromised.\n\n\n\nIn order to make an authenticated request, include a bearer-type\n`Authorization` header containing your OAuth token. All requests must be\nmade over HTTPS.\n\n\n\n```\ncurl -X $HTTP_METHOD -H \"Authorization: Bearer $DIGITALOCEAN_TOKEN\" \"https://api.digitalocean.com/v2/$OBJECT\"\n```\n"
      }
    },
    "parameters": {
      "1_click_type": {
        "in": "query",
        "name": "type",
        "description": "Restrict results to a certain type of 1-Click.",
        "required": false,
        "schema": {
          "type": "string",
          "enum": [
            "droplet",
            "kubernetes"
          ]
        },
        "example": "kubernetes"
      },
      "per_page": {
        "in": "query",
        "name": "per_page",
        "required": false,
        "description": "Number of items returned per page",
        "schema": {
          "type": "integer",
          "minimum": 1,
          "default": 20,
          "maximum": 200
        },
        "example": 2
      },
      "page": {
        "in": "query",
        "name": "page",
        "required": false,
        "description": "Which 'page' of paginated results to return.",
        "schema": {
          "type": "integer",
          "minimum": 1,
          "default": 1
        },
        "example": 1
      },
      "ssh_key_identifier": {
        "in": "path",
        "name": "ssh_key_identifier",
        "required": true,
        "description": "Either the ID or the fingerprint of an existing SSH key.",
        "schema": {
          "anyOf": [
            {
              "$ref": "#/components/schemas/ssh_key_id"
            },
            {
              "$ref": "#/components/schemas/ssh_key_fingerprint"
            }
          ]
        },
        "example": 512189
      },
      "action_id": {
        "in": "path",
        "name": "action_id",
        "description": "A unique numeric ID that can be used to identify and reference an action.",
        "required": true,
        "schema": {
          "type": "integer",
          "minimum": 1
        },
        "example": 36804636
      },
      "id_app": {
        "description": "The ID of the app",
        "in": "path",
        "name": "id",
        "required": true,
        "schema": {
          "type": "string"
        },
        "example": "4f6c71e2-1e90-4762-9fee-6cc4a0a9f2cf"
      },
      "app_name": {
        "description": "The name of the app to retrieve.",
        "in": "query",
        "name": "name",
        "schema": {
          "type": "string"
        },
        "example": "myApp"
      },
      "app_id": {
        "description": "The app ID",
        "in": "path",
        "name": "app_id",
        "required": true,
        "schema": {
          "type": "string"
        },
        "example": "4f6c71e2-1e90-4762-9fee-6cc4a0a9f2cf"
      },
      "deployment_id": {
        "description": "The deployment ID",
        "in": "path",
        "name": "deployment_id",
        "required": true,
        "schema": {
          "type": "string"
        },
        "example": "3aa4d20e-5527-4c00-b496-601fbd22520a"
      },
      "component": {
        "description": "An optional component name. If set, logs will be limited to this component only.",
        "in": "path",
        "name": "component_name",
        "required": true,
        "schema": {
          "type": "string"
        },
        "example": "component"
      },
      "live_updates": {
        "description": "Whether the logs should follow live updates.",
        "in": "query",
        "name": "follow",
        "schema": {
          "type": "boolean"
        },
        "example": true
      },
      "log_type": {
        "description": "The type of logs to retrieve\n- BUILD: Build-time logs\n- DEPLOY: Deploy-time logs\n- RUN: Live run-time logs",
        "in": "query",
        "name": "type",
        "required": true,
        "schema": {
          "default": "UNSPECIFIED",
          "enum": [
            "UNSPECIFIED",
            "BUILD",
            "DEPLOY",
            "RUN"
          ],
          "type": "string"
        },
        "example": "BUILD"
      },
      "time_wait": {
        "description": "An optional time duration to wait if the underlying component instance is not immediately available. Default: `3m`.",
        "in": "query",
        "name": "pod_connection_timeout",
        "schema": {
          "type": "string"
        },
        "example": "3m"
      },
      "slug_tier": {
        "description": "The slug of the tier",
        "in": "path",
        "name": "slug",
        "required": true,
        "schema": {
          "type": "string"
        },
        "example": "basic"
      },
      "slug_size": {
        "description": "The slug of the instance size",
        "in": "path",
        "name": "slug",
        "required": true,
        "schema": {
          "type": "string"
        },
        "example": "basic-xxs"
      },
      "alert_id": {
        "description": "The alert ID",
        "in": "path",
        "name": "alert_id",
        "required": true,
        "schema": {
          "type": "string"
        },
        "example": "5a624ab5-dd58-4b39-b7dd-8b7c36e8a91d"
      },
      "cdn_endpoint_id": {
        "in": "path",
        "name": "cdn_id",
        "description": "A unique identifier for a CDN endpoint.",
        "required": true,
        "schema": {
          "type": "string",
          "format": "uuid",
          "minimum": 1
        },
        "example": "19f06b6a-3ace-4315-b086-499a0e521b76"
      },
      "certificate_id": {
        "in": "path",
        "name": "certificate_id",
        "description": "A unique identifier for a certificate.",
        "required": true,
        "schema": {
          "type": "string",
          "format": "uuid",
          "minimum": 1
        },
        "example": "4de7ac8b-495b-4884-9a69-1050c6793cd6"
      },
      "invoice_uuid": {
        "name": "invoice_uuid",
        "description": "UUID of the invoice",
        "in": "path",
        "schema": {
          "type": "string"
        },
        "example": "22737513-0ea7-4206-8ceb-98a575af7681",
        "required": true
      },
      "tag_name": {
        "in": "query",
        "name": "tag_name",
        "description": "Limits the results to database clusters with a specific tag.",
        "required": false,
        "example": "production",
        "schema": {
          "type": "string"
        }
      },
      "database_cluster_uuid": {
        "in": "path",
        "name": "database_cluster_uuid",
        "description": "A unique identifier for a database cluster.",
        "required": true,
        "example": "9cc10173-e9ea-4176-9dbc-a4cee4c4ff30",
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      },
      "migration_id": {
        "in": "path",
        "name": "migration_id",
        "description": "A unique identifier assigned to the online migration.",
        "required": true,
        "example": "77b28fc8-19ff-11eb-8c9c-c68e24557488",
        "schema": {
          "type": "string"
        }
      },
      "replica_name": {
        "in": "path",
        "name": "replica_name",
        "description": "The name of the database replica.",
        "required": true,
        "example": "read-nyc3-01",
        "schema": {
          "type": "string"
        }
      },
      "username": {
        "in": "path",
        "name": "username",
        "description": "The name of the database user.",
        "required": true,
        "example": "app-01",
        "schema": {
          "type": "string"
        }
      },
      "database_name": {
        "in": "path",
        "name": "database_name",
        "description": "The name of the database.",
        "required": true,
        "example": "alpha",
        "schema": {
          "type": "string"
        }
      },
      "pool_name": {
        "in": "path",
        "name": "pool_name",
        "description": "The name used to identify the connection pool.",
        "required": true,
        "example": "backend-pool",
        "schema": {
          "type": "string"
        }
      },
      "domain_name": {
        "name": "domain_name",
        "description": "The name of the domain itself.",
        "in": "path",
        "schema": {
          "type": "string"
        },
        "example": "example.com",
        "required": true
      },
      "domain_name_query": {
        "name": "name",
        "description": "A fully qualified record name. For example, to only include records matching sub.example.com, send a GET request to `/v2/domains/$DOMAIN_NAME/records?name=sub.example.com`.",
        "in": "query",
        "schema": {
          "type": "string"
        },
        "example": "sub.example.com"
      },
      "domain_type_query": {
        "name": "type",
        "description": "The type of the DNS record. For example: A, CNAME, TXT, ...",
        "in": "query",
        "schema": {
          "type": "string",
          "enum": [
            "A",
            "AAAA",
            "CAA",
            "CNAME",
            "MX",
            "NS",
            "SOA",
            "SRV",
            "TXT"
          ]
        },
        "example": "A"
      },
      "domain_record_id": {
        "name": "domain_record_id",
        "description": "The unique identifier of the domain record.",
        "in": "path",
        "schema": {
          "type": "integer"
        },
        "example": 3352896,
        "required": true
      },
      "droplet_tag_name": {
        "in": "query",
        "name": "tag_name",
        "description": "Used to filter Droplets by a specific tag.",
        "required": false,
        "schema": {
          "type": "string"
        },
        "example": "env:prod"
      },
      "droplet_delete_tag_name": {
        "in": "query",
        "name": "tag_name",
        "description": "Specifies Droplets to be deleted by tag.",
        "required": true,
        "schema": {
          "type": "string"
        },
        "example": "env:test"
      },
      "droplet_id": {
        "in": "path",
        "name": "droplet_id",
        "description": "A unique identifier for a Droplet instance.",
        "required": true,
        "schema": {
          "type": "integer",
          "minimum": 1
        },
        "example": 3164444
      },
      "x_dangerous": {
        "in": "header",
        "name": "X-Dangerous",
        "description": "Acknowledge this action will destroy the Droplet and all associated resources and _can not_ be reversed.",
        "schema": {
          "type": "boolean"
        },
        "example": true,
        "required": true
      },
      "firewall_id": {
        "name": "firewall_id",
        "description": "A unique ID that can be used to identify and reference a firewall.",
        "in": "path",
        "schema": {
          "type": "string",
          "format": "uuid"
        },
        "example": "bb4b2611-3d72-467b-8602-280330ecd65c",
        "required": true
      },
      "floating_ip": {
        "in": "path",
        "name": "floating_ip",
        "description": "A floating IP address.",
        "required": true,
        "schema": {
          "type": "string",
          "format": "ipv4",
          "minimum": 1
        },
        "example": "45.55.96.47"
      },
      "type": {
        "in": "query",
        "name": "type",
        "description": "Filters results based on image type which can be either `application` or `distribution`.",
        "required": false,
        "schema": {
          "type": "string",
          "enum": [
            "application",
            "distribution"
          ]
        },
        "example": "distribution"
      },
      "private": {
        "in": "query",
        "name": "private",
        "description": "Used to filter only user images.",
        "required": false,
        "schema": {
          "type": "boolean"
        },
        "example": true
      },
      "tag": {
        "in": "query",
        "name": "tag_name",
        "description": "Used to filter images by a specific tag.",
        "required": false,
        "schema": {
          "type": "string"
        },
        "example": "base-image"
      },
      "image_id": {
        "in": "path",
        "name": "image_id",
        "description": "A unique number that can be used to identify and reference a specific image.",
        "required": true,
        "schema": {
          "type": "integer"
        },
        "example": 62137902
      },
      "kubernetes_cluster_id": {
        "in": "path",
        "name": "cluster_id",
        "description": "A unique ID that can be used to reference a Kubernetes cluster.",
        "required": true,
        "schema": {
          "type": "string",
          "format": "uuid",
          "minimum": 1
        },
        "example": "bd5f5959-5e1e-4205-a714-a914373942af"
      },
      "kubernetes_expiry_seconds": {
        "in": "query",
        "name": "expiry_seconds",
        "required": false,
        "description": "The duration in seconds that the returned Kubernetes credentials will be valid. If not set or 0, the credentials will have a 7 day expiry.",
        "schema": {
          "type": "integer",
          "minimum": 0,
          "default": 0
        },
        "example": 300
      },
      "kubernetes_node_pool_id": {
        "in": "path",
        "name": "node_pool_id",
        "description": "A unique ID that can be used to reference a Kubernetes node pool.",
        "required": true,
        "schema": {
          "type": "string",
          "format": "uuid",
          "minimum": 1
        },
        "example": "cdda885e-7663-40c8-bc74-3a036c66545d"
      },
      "kubernetes_node_id": {
        "in": "path",
        "name": "node_id",
        "description": "A unique ID that can be used to reference a node in a Kubernetes node pool.",
        "required": true,
        "schema": {
          "type": "string",
          "format": "uuid",
          "minimum": 1
        },
        "example": "478247f8-b1bb-4f7a-8db9-2a5f8d4b8f8f"
      },
      "kubernetes_node_skip_drain": {
        "in": "query",
        "name": "skip_drain",
        "required": false,
        "description": "Specifies whether or not to drain workloads from a node before it is deleted. Setting it to `1` causes node draining to be skipped. Omitting the query parameter or setting its value to `0` carries out draining prior to deletion.",
        "schema": {
          "type": "integer",
          "minimum": 0,
          "maximum": 1,
          "default": 0
        },
        "example": 1
      },
      "kubernetes_node_replace": {
        "in": "query",
        "name": "replace",
        "required": false,
        "description": "Specifies whether or not to replace a node after it has been deleted. Setting it to `1` causes the node to be replaced by a new one after deletion. Omitting the query parameter or setting its value to `0` deletes without replacement.",
        "schema": {
          "type": "integer",
          "minimum": 0,
          "maximum": 1,
          "default": 0
        },
        "example": 1
      },
      "clusterlint_run_id": {
        "in": "query",
        "name": "run_id",
        "description": "Specifies the clusterlint run whose results will be retrieved.",
        "required": false,
        "schema": {
          "type": "string",
          "format": "uuid"
        },
        "example": "50c2f44c-011d-493e-aee5-361a4a0d1844"
      },
      "load_balancer_id": {
        "in": "path",
        "name": "lb_id",
        "description": "A unique identifier for a load balancer.",
        "required": true,
        "schema": {
          "type": "string",
          "minimum": 1
        },
        "example": "4de7ac8b-495b-4884-9a69-1050c6793cd6"
      },
      "alert_uuid": {
        "in": "path",
        "name": "alert_uuid",
        "description": "A unique identifier for an alert policy.",
        "required": true,
        "schema": {
          "type": "string"
        },
        "example": "4de7ac8b-495b-4884-9a69-1050c6793cd6"
      },
      "parameters_droplet_id": {
        "in": "query",
        "name": "host_id",
        "description": "The droplet ID.",
        "example": "17209102",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "network_interface": {
        "in": "query",
        "name": "interface",
        "description": "The network interface.",
        "required": true,
        "example": "private",
        "schema": {
          "type": "string",
          "enum": [
            "private",
            "public"
          ]
        }
      },
      "network_direction": {
        "in": "query",
        "name": "direction",
        "description": "The traffic direction.",
        "required": true,
        "example": "inbound",
        "schema": {
          "type": "string",
          "enum": [
            "inbound",
            "outbound"
          ]
        }
      },
      "metric_timestamp_start": {
        "in": "query",
        "name": "start",
        "description": "Timestamp to start metric window.",
        "example": "1620683817",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "metric_timestamp_end": {
        "in": "query",
        "name": "end",
        "description": "Timestamp to end metric window.",
        "example": "1620705417",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "project_id": {
        "in": "path",
        "name": "project_id",
        "description": "A unique identifier for a project.",
        "required": true,
        "schema": {
          "type": "string",
          "format": "uuid",
          "minimum": 1
        },
        "example": "4de7ac8b-495b-4884-9a69-1050c6793cd6"
      },
      "registry_expiry_seconds": {
        "in": "query",
        "name": "expiry_seconds",
        "required": false,
        "description": "The duration in seconds that the returned registry credentials will be valid. If not set or 0, the credentials will not expire.",
        "schema": {
          "type": "integer",
          "minimum": 0,
          "default": 0
        },
        "example": 3600
      },
      "registry_read_write": {
        "in": "query",
        "name": "read_write",
        "required": false,
        "description": "By default, the registry credentials allow for read-only access. Set this query parameter to `true` to obtain read-write credentials.",
        "schema": {
          "type": "boolean",
          "default": false
        },
        "example": true
      },
      "registry_name": {
        "in": "path",
        "name": "registry_name",
        "description": "The name of a container registry.",
        "required": true,
        "schema": {
          "type": "string"
        },
        "example": "example"
      },
      "registry_repository_name": {
        "in": "path",
        "name": "repository_name",
        "description": "The name of a container registry repository. If the name contains `/` characters, they must be URL-encoded, e.g. `%2F`.",
        "required": true,
        "schema": {
          "type": "string"
        },
        "example": "repo-1"
      },
      "registry_repository_tag": {
        "in": "path",
        "name": "repository_tag",
        "description": "The name of a container registry repository tag.",
        "required": true,
        "schema": {
          "type": "string"
        },
        "example": "06a447a"
      },
      "registry_manifest_digest": {
        "in": "path",
        "name": "manifest_digest",
        "description": "The manifest digest of a container registry repository tag.",
        "required": true,
        "schema": {
          "type": "string"
        },
        "example": "sha256:cb8a924afdf0229ef7515d9e5b3024e23b3eb03ddbba287f4a19c6ac90b8d221"
      },
      "garbage_collection_uuid": {
        "in": "path",
        "name": "garbage_collection_uuid",
        "description": "The UUID of a garbage collection run.",
        "required": true,
        "schema": {
          "type": "string"
        },
        "example": "eff0feee-49c7-4e8f-ba5c-a320c109c8a8"
      },
      "snapshot_resource_type": {
        "in": "query",
        "name": "resource_type",
        "description": "Used to filter snapshots by a resource type.",
        "required": false,
        "schema": {
          "type": "string",
          "enum": [
            "droplet",
            "volume"
          ]
        },
        "example": "droplet"
      },
      "snapshot_id": {
        "in": "path",
        "name": "snapshot_id",
        "required": true,
        "description": "Either the ID of an existing snapshot. This will be an integer for a Droplet snapshot or a string for a volume snapshot.",
        "schema": {
          "anyOf": [
            {
              "type": "integer",
              "description": "The ID of a Droplet snapshot.",
              "example": 6372321
            },
            {
              "type": "string",
              "description": "The ID of a volume snapshot.",
              "example": "fbe805e8-866b-11e6-96bf-000f53315a41"
            }
          ]
        },
        "example": 6372321
      },
      "tag_id": {
        "in": "path",
        "name": "tag_id",
        "description": "The name of the tag. Tags may contain letters, numbers, colons, dashes, and underscores. There is a limit of 255 characters per tag.",
        "required": true,
        "schema": {
          "type": "string",
          "maxLength": 255,
          "pattern": "^[a-zA-Z0-9_\\-\\:]+$"
        },
        "example": "awesome"
      },
      "volume_name": {
        "name": "name",
        "in": "query",
        "description": "The block storage volume's name.",
        "schema": {
          "type": "string"
        },
        "example": "example"
      },
      "region": {
        "name": "region",
        "in": "query",
        "description": "The slug identifier for the region where the resource is available.",
        "schema": {
          "$ref": "#/components/schemas/region_slug"
        },
        "example": "nyc3"
      },
      "volume_id": {
        "name": "volume_id",
        "in": "path",
        "required": true,
        "description": "The ID of the block storage volume.",
        "schema": {
          "type": "string",
          "format": "uuid"
        },
        "example": "7724db7c-e098-11e5-b522-000f53304e51"
      },
      "vpc_id": {
        "in": "path",
        "name": "vpc_id",
        "description": "A unique identifier for a VPC.",
        "required": true,
        "schema": {
          "type": "string",
          "format": "uuid",
          "minimum": 1
        },
        "example": "4de7ac8b-495b-4884-9a69-1050c6793cd6"
      },
      "vpc_resource_type": {
        "in": "query",
        "name": "resource_type",
        "description": "Used to filter VPC members by a resource type.",
        "required": false,
        "schema": {
          "type": "string"
        },
        "example": "droplet"
      }
    },
    "headers": {
      "ratelimit-limit": {
        "schema": {
          "type": "integer"
        },
        "example": 5000,
        "description": "The default limit on number of requests that can be made per hour and per minute. Current rate limits are 5000 requests per hour and 250 requests per minute."
      },
      "ratelimit-remaining": {
        "schema": {
          "type": "integer"
        },
        "example": 4816,
        "description": "The number of requests in your hourly quota that remain before you hit your request limit. See https://developers.digitalocean.com/documentation/v2/#rate-limit for information about how requests expire."
      },
      "ratelimit-reset": {
        "schema": {
          "type": "integer"
        },
        "example": 1444931833,
        "description": "The time when the oldest request will expire. The value is given in Unix epoch time. See https://developers.digitalocean.com/documentation/v2/#rate-limit for information about how requests expire."
      },
      "content-disposition": {
        "description": "Indicates if the content is expected to be displayed *inline* in the  browser, that is, as a Web page or as part of a Web page, or as an  *attachment*, that is downloaded and saved locally.",
        "schema": {
          "type": "string"
        },
        "example": "attachment; filename=\"DigitalOcean Invoice 2020 Jul (6173678-418071234).csv\""
      },
      "x-request-id": {
        "description": "Optionally, some endpoints may include a request ID that should be provided  when reporting bugs or opening support tickets to help identify the issue.",
        "schema": {
          "type": "string",
          "format": "uuid"
        },
        "example": "515850a0-a812-50bf-aa3c-d0d21d287e40"
      }
    },
    "schemas": {
      "error": {
        "type": "object",
        "properties": {
          "id": {
            "description": "A short identifier corresponding to the HTTP status code returned. For  example, the ID for a response returning a 404 status code would be \"not_found.\"",
            "type": "string",
            "example": "not_found"
          },
          "message": {
            "description": "A message providing additional information about the error, including  details to help resolve it when possible.",
            "type": "string",
            "example": "The resource you were accessing could not be found."
          },
          "request_id": {
            "description": "Optionally, some endpoints may include a request ID that should be  provided when reporting bugs or opening support tickets to help  identify the issue.",
            "type": "string",
            "example": "4d9d8375-3c56-4925-a3e7-eb137fed17e9"
          }
        },
        "required": [
          "id",
          "message"
        ]
      },
      "1_click": {
        "type": "object",
        "properties": {
          "slug": {
            "title": "slug",
            "type": "string",
            "example": "monitoring",
            "description": "The slug identifier for the 1-Click application."
          },
          "type": {
            "title": "type",
            "type": "string",
            "example": "kubernetes",
            "description": "The type of the 1-Click application."
          }
        },
        "required": [
          "slug",
          "type"
        ]
      },
      "1_click_create": {
        "type": "object",
        "properties": {
          "addon_slugs": {
            "title": "addon_slugs",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "kube-state-metrics",
              "loki"
            ],
            "default": [],
            "description": "An array of 1-Click Application slugs to be installed to the Kubernetes cluster."
          },
          "cluster_uuid": {
            "title": "cluster_uuid",
            "type": "string",
            "example": "50a994b6-c303-438f-9495-7e896cfe6b08",
            "description": "A unique ID for the Kubernetes cluster to which the 1-Click Applications will be installed."
          }
        },
        "required": [
          "addon_slugs",
          "cluster_uuid"
        ]
      },
      "account": {
        "type": "object",
        "properties": {
          "droplet_limit": {
            "description": "The total number of Droplets current user or team may have active at one time.",
            "type": "integer",
            "example": 25
          },
          "floating_ip_limit": {
            "description": "The total number of Floating IPs the current user or team may have.",
            "type": "integer",
            "example": 5
          },
          "email": {
            "description": "The email address used by the current user to register for DigitalOcean.",
            "type": "string",
            "example": "sammy@digitalocean.com"
          },
          "uuid": {
            "description": "The unique universal identifier for the current user.",
            "type": "string",
            "example": "b6fr89dbf6d9156cace5f3c78dc9851d957381ef"
          },
          "email_verified": {
            "description": "If true, the user has verified their account via email. False otherwise.",
            "type": "boolean",
            "default": false,
            "example": true
          },
          "status": {
            "description": "This value is one of \"active\", \"warning\" or \"locked\".",
            "type": "string",
            "enum": [
              "active",
              "warning",
              "locked"
            ],
            "default": "active",
            "example": "active"
          },
          "status_message": {
            "description": "A human-readable message giving more details about the status of the account.",
            "type": "string",
            "example": " "
          }
        },
        "required": [
          "droplet_limit",
          "floating_ip_limit",
          "email",
          "uuid",
          "email_verified",
          "status",
          "status_message"
        ]
      },
      "ssh_key_id": {
        "type": "integer",
        "description": "A unique identification number for this key. Can be used to embed a  specific SSH key into a Droplet.",
        "readOnly": true,
        "example": 512189
      },
      "ssh_key_fingerprint": {
        "type": "string",
        "description": "A unique identifier that differentiates this key from other keys using  a format that SSH recognizes. The fingerprint is created when the key is added to your account.",
        "readOnly": true,
        "example": "3b:16:bf:e4:8b:00:8b:b8:59:8c:a9:d3:f0:19:45:fa"
      },
      "ssh_key_name": {
        "type": "string",
        "description": "A human-readable display name for this key, used to easily identify the SSH keys when they are displayed.",
        "example": "My SSH Public Key"
      },
      "ssh_key": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ssh_key_id"
          },
          "fingerprint": {
            "$ref": "#/components/schemas/ssh_key_fingerprint"
          },
          "public_key": {
            "description": "The entire public key string that was uploaded. Embedded into the root user's `authorized_keys` file if you include this key during Droplet creation.",
            "type": "string",
            "example": "ssh-rsa AEXAMPLEaC1yc2EAAAADAQABAAAAQQDDHr/jh2Jy4yALcK4JyWbVkPRaWmhck3IgCoeOO3z1e2dBowLh64QAM+Qb72pxekALga2oi4GvT+TlWNhzPH4V example"
          },
          "name": {
            "$ref": "#/components/schemas/ssh_key_name"
          }
        },
        "required": [
          "public_key",
          "name"
        ]
      },
      "link_to_last_page": {
        "type": "object",
        "properties": {
          "last": {
            "description": "URI of the last page of the results.",
            "type": "string",
            "example": "https://api.digitalocean.com/v2/images?page=2"
          }
        }
      },
      "link_to_next_page": {
        "type": "object",
        "properties": {
          "next": {
            "description": "URI of the next page of the results.",
            "type": "string",
            "example": "https://api.digitalocean.com/v2/images?page=2"
          }
        }
      },
      "forward_links": {
        "allOf": [
          {
            "$ref": "#/components/schemas/link_to_last_page"
          },
          {
            "$ref": "#/components/schemas/link_to_next_page"
          }
        ]
      },
      "link_to_first_page": {
        "type": "object",
        "properties": {
          "first": {
            "description": "URI of the first page of the results.",
            "type": "string",
            "example": "https://api.digitalocean.com/v2/images?page=1"
          }
        }
      },
      "link_to_prev_page": {
        "type": "object",
        "properties": {
          "prev": {
            "description": "URI of the previous page of the results.",
            "type": "string",
            "example": "https://api.digitalocean.com/v2/images?page=1"
          }
        }
      },
      "backward_links": {
        "allOf": [
          {
            "$ref": "#/components/schemas/link_to_first_page"
          },
          {
            "$ref": "#/components/schemas/link_to_prev_page"
          }
        ]
      },
      "page_links": {
        "type": "object",
        "properties": {
          "pages": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/forward_links"
              },
              {
                "$ref": "#/components/schemas/backward_links"
              },
              {}
            ],
            "example": {
              "pages": {
                "first": "https://api.digitalocean.com/v2/account/keys?page=1",
                "prev": "https://api.digitalocean.com/v2/account/keys?page=2"
              }
            }
          }
        }
      },
      "pagination": {
        "type": "object",
        "properties": {
          "links": {
            "$ref": "#/components/schemas/page_links"
          }
        }
      },
      "meta": {
        "type": "object",
        "properties": {
          "meta": {
            "description": "Information about the response itself.",
            "type": "object",
            "properties": {
              "total": {
                "description": "Number of objects returned by the request.",
                "type": "integer",
                "example": 1
              }
            },
            "required": [
              "total"
            ]
          }
        },
        "required": [
          "meta"
        ]
      },
      "region": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The display name of the region.  This will be a full name that is used in the control panel and other interfaces.",
            "example": "New York 3"
          },
          "slug": {
            "type": "string",
            "description": "A human-readable string that is used as a unique identifier for each region.",
            "example": "nyc3"
          },
          "features": {
            "items": {
              "type": "string"
            },
            "description": "This attribute is set to an array which contains features available in this region",
            "example": [
              "private_networking",
              "backups",
              "ipv6",
              "metadata",
              "install_agent",
              "storage",
              "image_transfer"
            ]
          },
          "available": {
            "type": "boolean",
            "description": "This is a boolean value that represents whether new Droplets can be created in this region.",
            "example": true
          },
          "sizes": {
            "items": {
              "type": "string"
            },
            "description": "This attribute is set to an array which contains the identifying slugs for the sizes available in this region.",
            "example": [
              "s-1vcpu-1gb",
              "s-1vcpu-2gb",
              "s-1vcpu-3gb",
              "s-2vcpu-2gb",
              "s-3vcpu-1gb",
              "s-2vcpu-4gb",
              "s-4vcpu-8gb",
              "s-6vcpu-16gb",
              "s-8vcpu-32gb",
              "s-12vcpu-48gb",
              "s-16vcpu-64gb",
              "s-20vcpu-96gb",
              "s-24vcpu-128gb",
              "s-32vcpu-192g"
            ]
          }
        },
        "required": [
          "available",
          "features",
          "name",
          "sizes",
          "slug"
        ]
      },
      "slug": {
        "type": "string",
        "description": "A human-readable string that is used as a unique identifier for each region.",
        "example": "nyc3"
      },
      "action": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "A unique numeric ID that can be used to identify and reference an action.",
            "example": 36804636
          },
          "status": {
            "type": "string",
            "description": "The current status of the action. This can be \"in-progress\", \"completed\", or \"errored\".",
            "enum": [
              "in-progress",
              "completed",
              "errored"
            ],
            "example": "completed",
            "default": "in-progress"
          },
          "type": {
            "type": "string",
            "description": "This is the type of action that the object represents. For example, this could be \"transfer\" to represent the state of an image transfer action.",
            "example": "create"
          },
          "started_at": {
            "type": "string",
            "format": "date-time",
            "description": "A time value given in ISO8601 combined date and time format that represents when the action was initiated.",
            "example": "2020-11-14T16:29:21.000Z"
          },
          "completed_at": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "A time value given in ISO8601 combined date and time format that represents when the action was completed.",
            "example": "2020-11-14T16:30:06.000Z"
          },
          "resource_id": {
            "type": "integer",
            "nullable": true,
            "description": "A unique identifier for the resource that the action is associated with.",
            "example": 3164444
          },
          "resource_type": {
            "type": "string",
            "description": "The type of resource that the action is associated with.",
            "example": "droplet"
          },
          "region": {
            "$ref": "#/components/schemas/region"
          },
          "region_slug": {
            "allOf": [
              {
                "$ref": "#/components/schemas/slug"
              },
              {
                "type": "string",
                "nullable": true
              }
            ]
          }
        }
      },
      "apps_deployment_job": {
        "properties": {
          "name": {
            "title": "The name of this job",
            "type": "string",
            "example": "migrate-db"
          },
          "source_commit_hash": {
            "title": "The commit hash of the repository that was used to build this job",
            "type": "string",
            "example": "54d4a727f457231062439895000d45437c7bb405"
          }
        },
        "type": "object"
      },
      "apps_deployment_phase": {
        "default": "UNKNOWN",
        "enum": [
          "UNKNOWN",
          "PENDING_BUILD",
          "BUILDING",
          "PENDING_DEPLOY",
          "DEPLOYING",
          "ACTIVE",
          "SUPERSEDED",
          "ERROR",
          "CANCELED"
        ],
        "type": "string",
        "example": "ACTIVE"
      },
      "apps_deployment_progress_step_reason": {
        "properties": {
          "code": {
            "title": "The error code",
            "type": "string",
            "example": "Title of Error"
          },
          "message": {
            "title": "The error message",
            "type": "string",
            "example": "This is an error"
          }
        },
        "type": "object"
      },
      "apps_deployment_progress_step_status": {
        "default": "UNKNOWN",
        "enum": [
          "UNKNOWN",
          "PENDING",
          "RUNNING",
          "ERROR",
          "SUCCESS"
        ],
        "type": "string",
        "example": "SUCCESS"
      },
      "apps_deployment_progress_step": {
        "properties": {
          "component_name": {
            "title": "The component name that this step is associated with",
            "type": "string",
            "example": "component"
          },
          "ended_at": {
            "format": "date-time",
            "title": "The end time of this step",
            "type": "string",
            "example": "2020-11-19T20:27:18.000Z"
          },
          "message_base": {
            "description": "The base of a human-readable description of the step intended to be combined with the component name for presentation. For example:\n\n`message_base` = \"Building service\"\n`component_name` = \"api\"",
            "type": "string",
            "example": "Building service"
          },
          "name": {
            "title": "The name of this step",
            "type": "string",
            "example": "example_step"
          },
          "reason": {
            "$ref": "#/components/schemas/apps_deployment_progress_step_reason"
          },
          "started_at": {
            "format": "date-time",
            "title": "The start time of this step",
            "type": "string",
            "example": "2020-11-19T20:27:18.000Z"
          },
          "status": {
            "$ref": "#/components/schemas/apps_deployment_progress_step_status"
          },
          "steps": {
            "items": {
              "type": "object"
            },
            "title": "Child steps of this step",
            "type": "array"
          }
        },
        "title": "A step that is run as part of the deployment's lifecycle",
        "type": "object"
      },
      "apps_deployment_progress": {
        "properties": {
          "error_steps": {
            "format": "int32",
            "title": "Number of unsuccessful steps",
            "type": "integer",
            "example": 3
          },
          "pending_steps": {
            "format": "int32",
            "title": "Number of pending steps",
            "type": "integer",
            "example": 2
          },
          "running_steps": {
            "format": "int32",
            "title": "Number of currently running steps",
            "type": "integer",
            "example": 2
          },
          "steps": {
            "items": {
              "$ref": "#/components/schemas/apps_deployment_progress_step"
            },
            "title": "The deployment's steps",
            "type": "array"
          },
          "success_steps": {
            "format": "int32",
            "title": "Number of successful steps",
            "type": "integer",
            "example": 4
          },
          "summary_steps": {
            "items": {
              "$ref": "#/components/schemas/apps_deployment_progress_step"
            },
            "title": "A flattened summary of the steps",
            "type": "array"
          },
          "total_steps": {
            "format": "int32",
            "title": "Total number of steps",
            "type": "integer",
            "example": 5
          }
        },
        "type": "object"
      },
      "apps_deployment_service": {
        "properties": {
          "name": {
            "title": "The name of this service",
            "type": "string",
            "example": "web"
          },
          "source_commit_hash": {
            "title": "The commit hash of the repository that was used to build this service",
            "type": "string",
            "example": "54d4a727f457231062439895000d45437c7bb405"
          }
        },
        "type": "object"
      },
      "app_domain_spec": {
        "type": "object",
        "properties": {
          "domain": {
            "type": "string",
            "format": "hostname",
            "maxLength": 253,
            "minLength": 4,
            "pattern": "^((xn--)?[a-zA-Z0-9]+(-[a-zA-Z0-9]+)*\\.)+[a-zA-Z]{2,}\\.?$",
            "description": "The hostname for the domain",
            "example": "app.example.com"
          },
          "type": {
            "type": "string",
            "default": "UNSPECIFIED",
            "enum": [
              "UNSPECIFIED",
              "DEFAULT",
              "PRIMARY",
              "ALIAS"
            ],
            "description": "- DEFAULT: The default `.ondigitalocean.app` domain assigned to this app\n- PRIMARY: The primary domain for this app that is displayed as the default in the control panel, used in bindable environment variables, and any other places that reference an app's live URL. Only one domain may be set as primary.\n- ALIAS: A non-primary domain",
            "example": "DEFAULT"
          },
          "wildcard": {
            "type": "boolean",
            "description": "Indicates whether the domain includes all sub-domains, in addition to the given domain",
            "example": true
          },
          "zone": {
            "description": "Optional. If the domain uses DigitalOcean DNS and you would like App\nPlatform to automatically manage it for you, set this to the name of the\ndomain on your account.\n\nFor example, If the domain you are adding is `app.domain.com`, the zone\ncould be `domain.com`.",
            "type": "string",
            "format": "hostname",
            "example": "example.com"
          }
        },
        "required": [
          "domain"
        ]
      },
      "apps_git_source_spec": {
        "type": "object",
        "properties": {
          "branch": {
            "type": "string",
            "description": "The name of the branch to use",
            "example": "main"
          },
          "repo_clone_url": {
            "type": "string",
            "description": "The clone URL of the repo. Example: `https://github.com/digitalocean/sample-golang.git`",
            "example": "https://github.com/digitalocean/sample-golang.git"
          }
        }
      },
      "apps_github_source_spec": {
        "type": "object",
        "properties": {
          "branch": {
            "type": "string",
            "description": "The name of the branch to use",
            "example": "main"
          },
          "deploy_on_push": {
            "type": "boolean",
            "description": "Whether to automatically deploy new commits made to the repo",
            "example": true
          },
          "repo": {
            "type": "string",
            "description": "The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`",
            "example": "digitalocean/sample-golang"
          }
        }
      },
      "apps_gitlab_source_spec": {
        "type": "object",
        "properties": {
          "branch": {
            "type": "string",
            "description": "The name of the branch to use",
            "example": "main"
          },
          "deploy_on_push": {
            "type": "boolean",
            "description": "Whether to automatically deploy new commits made to the repo",
            "example": true
          },
          "repo": {
            "type": "string",
            "description": "The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`",
            "example": "digitalocean/sample-golang"
          }
        }
      },
      "apps_image_source_spec": {
        "type": "object",
        "properties": {
          "registry": {
            "type": "string",
            "description": "The registry name. Must be left empty for the `DOCR` registry type.",
            "example": "registry.hub.docker.com"
          },
          "registry_type": {
            "type": "string",
            "enum": [
              "DOCKER_HUB",
              "DOCR"
            ],
            "description": "- DOCKER_HUB: The DockerHub container registry type.\n- DOCR: The DigitalOcean container registry type.",
            "example": "DOCR"
          },
          "repository": {
            "type": "string",
            "description": "The repository name.",
            "example": "origin/master"
          },
          "tag": {
            "type": "string",
            "description": "The repository tag. Defaults to `latest` if not provided.",
            "example": "latest",
            "default": "latest"
          }
        }
      },
      "app_variable_definition": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "pattern": "^[_A-Za-z][_A-Za-z0-9]*$",
            "description": "The variable name",
            "example": "BASE_URL"
          },
          "scope": {
            "type": "string",
            "enum": [
              "UNSET",
              "RUN_TIME",
              "BUILD_TIME",
              "RUN_AND_BUILD_TIME"
            ],
            "description": "- RUN_TIME: Made available only at run-time\n- BUILD_TIME: Made available only at build-time\n- RUN_AND_BUILD_TIME: Made available at both build and run-time",
            "default": "RUN_AND_BUILD_TIME",
            "example": "BUILD_TIME"
          },
          "type": {
            "type": "string",
            "enum": [
              "GENERAL",
              "SECRET"
            ],
            "description": "- GENERAL: A plain-text environment variable\n- SECRET: A secret encrypted environment variable",
            "default": "GENERAL",
            "example": "GENERAL"
          },
          "value": {
            "description": "The value. If the type is `SECRET`, the value will be encrypted on first submission. On following submissions, the encrypted value should be used.",
            "type": "string",
            "example": "http://example.com"
          }
        },
        "required": [
          "key"
        ]
      },
      "app_component_base": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 32,
            "minLength": 2,
            "pattern": "^[a-z][a-z0-9-]{0,30}[a-z0-9]$",
            "description": "The name. Must be unique across all components within the same app.",
            "example": "api"
          },
          "git": {
            "$ref": "#/components/schemas/apps_git_source_spec"
          },
          "github": {
            "$ref": "#/components/schemas/apps_github_source_spec"
          },
          "gitlab": {
            "$ref": "#/components/schemas/apps_gitlab_source_spec"
          },
          "image": {
            "$ref": "#/components/schemas/apps_image_source_spec"
          },
          "dockerfile_path": {
            "type": "string",
            "description": "The path to the Dockerfile relative to the root of the repo. If set, it will be used to build this component. Otherwise, App Platform will attempt to build it using buildpacks.",
            "example": "path/to/Dockerfile"
          },
          "build_command": {
            "type": "string",
            "description": "An optional build command to run while building this component from source.",
            "example": "npm run build"
          },
          "run_command": {
            "type": "string",
            "description": "An optional run command to override the component's default.",
            "example": "bin/api"
          },
          "source_dir": {
            "type": "string",
            "description": "An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.",
            "example": "path/to/dir"
          },
          "envs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/app_variable_definition"
            },
            "description": "A list of environment variables made available to the component."
          },
          "environment_slug": {
            "type": "string",
            "description": "An environment slug describing the type of this app. For a full list, please refer to [the product documentation](https://www.digitalocean.com/docs/app-platform/).",
            "example": "node-js"
          }
        }
      },
      "app_component_instance_base": {
        "type": "object",
        "properties": {
          "instance_count": {
            "type": "integer",
            "format": "int64",
            "minimum": 1,
            "description": "The amount of instances that this component should be scaled to. Default: 1",
            "default": 1,
            "example": 2
          },
          "instance_size_slug": {
            "description": "The instance size to use for this component. Default: `basic-xxs`",
            "type": "string",
            "enum": [
              "basic-xxs",
              "basic-xs",
              "basic-s",
              "basic-m",
              "professional-xs",
              "professional-s",
              "professional-m",
              "professional-1l",
              "professional-l",
              "professional-xl"
            ],
            "default": "basic-xxs",
            "example": "basic-xxs"
          }
        }
      },
      "apps_string_match": {
        "type": "object",
        "properties": {
          "exact": {
            "type": "string",
            "description": "Exact string match. Only 1 of `exact`, `prefix`, or `regex` must be set.",
            "maxLength": 256,
            "minLength": 1,
            "example": "https://www.example.com"
          },
          "prefix": {
            "type": "string",
            "description": "Prefix-based match. Only 1 of `exact`, `prefix`, or `regex` must be set.",
            "maxLength": 256,
            "minLength": 1,
            "example": "https://www.example.com"
          },
          "regex": {
            "type": "string",
            "maxLength": 256,
            "minLength": 1,
            "description": "RE2 style regex-based match. Only 1 of `exact`, `prefix`, or `regex` must be set. For more information about RE2 syntax, see: https://github.com/google/re2/wiki/Syntax",
            "example": "^.*example.com"
          }
        }
      },
      "apps_cors_policy": {
        "type": "object",
        "properties": {
          "allow_origins": {
            "type": "array",
            "description": "The set of allowed CORS origins.",
            "items": {
              "$ref": "#/components/schemas/apps_string_match"
            },
            "example": [
              {
                "exact": "https://www.example.com"
              },
              {
                "regex": "^.*example.com"
              }
            ]
          },
          "allow_methods": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The set of allowed HTTP methods. This configures the `Access-Control-Allow-Methods` header.",
            "example": [
              "GET",
              "OPTIONS",
              "POST",
              "PUT",
              "PATCH",
              "DELETE"
            ]
          },
          "allow_headers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The set of allowed HTTP request headers. This configures the `Access-Control-Allow-Headers` header.",
            "example": [
              "Content-Type",
              "X-Custom-Header"
            ]
          },
          "expose_headers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The set of HTTP response headers that browsers are allowed to access. This configures the `Access-Control-Expose-Headers` header.",
            "example": [
              "Content-Encoding",
              "X-Custom-Header"
            ]
          },
          "max_age": {
            "type": "string",
            "description": "An optional duration specifying how long browsers can cache the results of a preflight request. This configures the `Access-Control-Max-Age` header.",
            "example": "5h30m"
          },
          "allow_credentials": {
            "type": "boolean",
            "description": "Whether browsers should expose the response to the client-side JavaScript code when the request’s credentials mode is include. This configures the `Access-Control-Allow-Credentials` header.",
            "example": false
          }
        }
      },
      "app_service_spec_health_check": {
        "type": "object",
        "properties": {
          "failure_threshold": {
            "type": "integer",
            "format": "int32",
            "description": "The number of failed health checks before considered unhealthy.",
            "example": 2
          },
          "http_path": {
            "type": "string",
            "description": "The route path used for the HTTP health check ping. If not set, the HTTP health check will be disabled and a TCP health check used instead.",
            "example": "/health"
          },
          "initial_delay_seconds": {
            "type": "integer",
            "format": "int32",
            "description": "The number of seconds to wait before beginning health checks.",
            "example": 30
          },
          "period_seconds": {
            "type": "integer",
            "format": "int32",
            "description": "The number of seconds to wait between health checks.",
            "example": 60
          },
          "success_threshold": {
            "type": "integer",
            "format": "int32",
            "description": "The number of successful health checks before considered healthy.",
            "example": 3
          },
          "timeout_seconds": {
            "type": "integer",
            "format": "int32",
            "description": "The number of seconds after which the check times out.",
            "example": 45
          }
        }
      },
      "app_route_spec": {
        "title": "A criterion for routing HTTP traffic to a component.",
        "type": "object",
        "properties": {
          "path": {
            "description": "An HTTP path prefix. Paths must start with / and must be unique across all components within an app.",
            "type": "string",
            "example": "/api"
          }
        }
      },
      "app_service_spec": {
        "allOf": [
          {
            "$ref": "#/components/schemas/app_component_base"
          },
          {
            "$ref": "#/components/schemas/app_component_instance_base"
          },
          {
            "type": "object",
            "properties": {
              "cors": {
                "$ref": "#/components/schemas/apps_cors_policy"
              },
              "health_check": {
                "$ref": "#/components/schemas/app_service_spec_health_check"
              },
              "http_port": {
                "type": "integer",
                "description": "The internal port on which this service's run command will listen. Default: 8080\nIf there is not an environment variable with the name `PORT`, one will be automatically added with its value set to the value of this field.",
                "format": "int64",
                "maximum": 65535,
                "minimum": 1,
                "example": 3000
              },
              "internal_ports": {
                "type": "array",
                "description": "The ports on which this service will listen for internal traffic.",
                "items": {
                  "format": "int64",
                  "type": "integer"
                },
                "example": [
                  80,
                  443
                ]
              },
              "routes": {
                "type": "array",
                "description": "A list of HTTP routes that should be routed to this component.",
                "items": {
                  "$ref": "#/components/schemas/app_route_spec"
                }
              }
            },
            "required": [
              "name"
            ]
          }
        ]
      },
      "app_static_site_spec": {
        "allOf": [
          {
            "$ref": "#/components/schemas/app_component_base"
          },
          {
            "type": "object",
            "properties": {
              "index_document": {
                "type": "string",
                "description": "The name of the index document to use when serving this static site. Default: index.html",
                "default": "index.html",
                "example": "main.html"
              },
              "error_document": {
                "type": "string",
                "description": "The name of the error document to use when serving this static site. Default: 404.html. If no such file exists within the built assets, App Platform will supply one.",
                "default": "404.html",
                "example": "error.html"
              },
              "catchall_document": {
                "type": "string",
                "description": "The name of the document to use as the fallback for any requests to documents that are not found when serving this static site. Only 1 of `catchall_document` or `error_document` can be set.",
                "example": "index.html"
              },
              "output_dir": {
                "type": "string",
                "description": "An optional path to where the built assets will be located, relative to the build context. If not set, App Platform will automatically scan for these directory names: `_static`, `dist`, `public`, `build`.",
                "example": "dist/"
              },
              "cors": {
                "$ref": "#/components/schemas/apps_cors_policy"
              },
              "routes": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/app_route_spec"
                },
                "description": "A list of HTTP routes that should be routed to this component."
              }
            }
          }
        ],
        "required": [
          "name"
        ]
      },
      "app_job_spec": {
        "allOf": [
          {
            "$ref": "#/components/schemas/app_component_base"
          },
          {
            "$ref": "#/components/schemas/app_component_instance_base"
          },
          {
            "type": "object",
            "properties": {
              "kind": {
                "type": "string",
                "enum": [
                  "UNSPECIFIED",
                  "PRE_DEPLOY",
                  "POST_DEPLOY",
                  "FAILED_DEPLOY"
                ],
                "description": "- UNSPECIFIED: Default job type, will auto-complete to POST_DEPLOY kind.\n- PRE_DEPLOY: Indicates a job that runs before an app deployment.\n- POST_DEPLOY: Indicates a job that runs after an app deployment.\n- FAILED_DEPLOY: Indicates a job that runs after a component fails to deploy.",
                "default": "UNSPECIFIED",
                "example": "PRE_DEPLOY"
              }
            },
            "required": [
              "name"
            ]
          }
        ]
      },
      "app_worker_spec": {
        "allOf": [
          {
            "$ref": "#/components/schemas/app_component_base"
          },
          {
            "$ref": "#/components/schemas/app_component_instance_base"
          }
        ],
        "required": [
          "name"
        ]
      },
      "app_database_spec": {
        "type": "object",
        "properties": {
          "cluster_name": {
            "description": "The name of the underlying DigitalOcean DBaaS cluster. This is required for production databases. For dev databases, if cluster_name is not set, a new cluster will be provisioned.",
            "type": "string",
            "example": "cluster_name"
          },
          "db_name": {
            "description": "The name of the MySQL or PostgreSQL database to configure.",
            "type": "string",
            "example": "my_db"
          },
          "db_user": {
            "description": "The name of the MySQL or PostgreSQL user to configure.",
            "type": "string",
            "example": "superuser"
          },
          "engine": {
            "type": "string",
            "default": "UNSET",
            "enum": [
              "UNSET",
              "MYSQL",
              "PG",
              "REDIS"
            ],
            "description": "- MYSQL: MySQL\n- PG: PostgreSQL\n- REDIS: Redis",
            "example": "PG"
          },
          "name": {
            "description": "The name. Must be unique across all components within the same app.",
            "maxLength": 32,
            "minLength": 2,
            "pattern": "^[a-z][a-z0-9-]{0,30}[a-z0-9]$",
            "type": "string",
            "example": "prod-db"
          },
          "production": {
            "description": "Whether this is a production or dev database.",
            "type": "boolean",
            "example": true
          },
          "version": {
            "description": "The version of the database engine",
            "type": "string",
            "example": "12"
          }
        },
        "required": [
          "name"
        ]
      },
      "app_spec": {
        "title": "AppSpec",
        "type": "object",
        "description": "The desired configuration of an application.",
        "properties": {
          "name": {
            "description": "The name of the app. Must be unique across all apps in the same account.",
            "maxLength": 32,
            "minLength": 2,
            "pattern": "^[a-z][a-z0-9-]{0,30}[a-z0-9]$",
            "type": "string",
            "example": "web-app-01"
          },
          "region": {
            "description": "The slug form of the geographical origin of the app. Default: `nearest available`",
            "type": "string",
            "enum": [
              "ams",
              "nyc",
              "fra"
            ],
            "example": "nyc"
          },
          "domains": {
            "description": "A set of hostnames where the application will be available.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/app_domain_spec"
            }
          },
          "services": {
            "description": "Workloads which expose publicy-accessible HTTP services.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/app_service_spec"
            }
          },
          "static_sites": {
            "description": "Content which can be rendered to static web assets.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/app_static_site_spec"
            }
          },
          "jobs": {
            "description": "Pre and post deployment workloads which do not expose publicly-accessible HTTP routes.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/app_job_spec"
            }
          },
          "workers": {
            "description": "Workloads which do not expose publicly-accessible HTTP services.",
            "items": {
              "$ref": "#/components/schemas/app_worker_spec"
            },
            "type": "array"
          },
          "databases": {
            "description": "Database instances which can provide persistence to workloads within the\napplication.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/app_database_spec"
            }
          }
        },
        "required": [
          "name"
        ]
      },
      "apps_deployment_static_site": {
        "properties": {
          "name": {
            "title": "The name of this static site",
            "type": "string",
            "example": "web"
          },
          "source_commit_hash": {
            "title": "The commit hash of the repository that was used to build this static site",
            "type": "string",
            "example": "54d4a727f457231062439895000d45437c7bb405"
          }
        },
        "type": "object"
      },
      "apps_deployment_worker": {
        "properties": {
          "name": {
            "title": "The name of this worker",
            "type": "string",
            "example": "queue-runner"
          },
          "source_commit_hash": {
            "title": "The commit hash of the repository that was used to build this worker",
            "type": "string",
            "example": "54d4a727f457231062439895000d45437c7bb405"
          }
        },
        "type": "object"
      },
      "apps_deployment": {
        "properties": {
          "cause": {
            "title": "What caused this deployment to be created",
            "type": "string",
            "example": "commit 9a4df0b pushed to github/digitalocean/sample-golang"
          },
          "cloned_from": {
            "title": "The ID of a previous deployment that this deployment was cloned from",
            "type": "string",
            "example": "3aa4d20e-5527-4c00-b496-601fbd22520a"
          },
          "created_at": {
            "format": "date-time",
            "title": "The creation time of the deployment",
            "type": "string",
            "example": "2020-07-28T18:00:00.000Z"
          },
          "id": {
            "title": "The ID of the deployment",
            "type": "string",
            "example": "b6bdf840-2854-4f87-a36c-5f231c617c84"
          },
          "jobs": {
            "items": {
              "$ref": "#/components/schemas/apps_deployment_job"
            },
            "title": "Job components that are part of this deployment",
            "type": "array"
          },
          "phase": {
            "$ref": "#/components/schemas/apps_deployment_phase"
          },
          "phase_last_updated_at": {
            "format": "date-time",
            "title": "When the deployment phase was last updated",
            "type": "string",
            "example": "1901-01-01T00:00:00.000Z"
          },
          "progress": {
            "$ref": "#/components/schemas/apps_deployment_progress"
          },
          "services": {
            "items": {
              "$ref": "#/components/schemas/apps_deployment_service"
            },
            "title": "Service components that are part of this deployment",
            "type": "array"
          },
          "spec": {
            "$ref": "#/components/schemas/app_spec"
          },
          "static_sites": {
            "items": {
              "$ref": "#/components/schemas/apps_deployment_static_site"
            },
            "title": "Static Site components that are part of this deployment",
            "type": "array"
          },
          "tier_slug": {
            "readOnly": true,
            "title": "The current pricing tier slug of the deployment",
            "type": "string",
            "example": "basic"
          },
          "updated_at": {
            "format": "date-time",
            "title": "When the deployment was last updated",
            "type": "string",
            "example": "2020-07-28T18:00:00.000Z"
          },
          "workers": {
            "items": {
              "$ref": "#/components/schemas/apps_deployment_worker"
            },
            "title": "Worker components that are part of this deployment",
            "type": "array"
          }
        },
        "title": "An app deployment",
        "type": "object"
      },
      "apps_domain_phase": {
        "default": "UNKNOWN",
        "enum": [
          "UNKNOWN",
          "PENDING",
          "CONFIGURING",
          "ACTIVE",
          "ERROR"
        ],
        "type": "string",
        "example": "ACTIVE"
      },
      "apps_domain_progress": {
        "properties": {
          "steps": {
            "items": {
              "type": "object"
            },
            "title": "The steps of the domain's progress",
            "type": "array"
          }
        },
        "type": "object"
      },
      "apps_domain": {
        "properties": {
          "id": {
            "title": "The ID of the domain",
            "type": "string",
            "example": "4f6c71e2-1e90-4762-9fee-6cc4a0a9f2cf"
          },
          "phase": {
            "$ref": "#/components/schemas/apps_domain_phase"
          },
          "progress": {
            "$ref": "#/components/schemas/apps_domain_progress"
          },
          "spec": {
            "$ref": "#/components/schemas/app_domain_spec"
          }
        },
        "type": "object"
      },
      "apps_region": {
        "properties": {
          "continent": {
            "readOnly": true,
            "title": "The continent that this region is in",
            "type": "string",
            "example": "europe"
          },
          "data_centers": {
            "items": {
              "type": "string",
              "example": "ams"
            },
            "readOnly": true,
            "title": "Data centers that are in this region",
            "type": "array",
            "example": [
              "ams"
            ]
          },
          "default": {
            "description": "Whether or not the region is presented as the default.",
            "readOnly": true,
            "type": "boolean",
            "example": true
          },
          "disabled": {
            "readOnly": true,
            "title": "Whether or not the region is open for new apps",
            "type": "boolean",
            "example": true
          },
          "flag": {
            "readOnly": true,
            "title": "The flag of this region",
            "type": "string",
            "example": "ams"
          },
          "label": {
            "readOnly": true,
            "title": "A human-readable name of the region",
            "type": "string",
            "example": "ams"
          },
          "reason": {
            "readOnly": true,
            "title": "Reason that this region is not available",
            "type": "string",
            "example": "to crowded"
          },
          "slug": {
            "readOnly": true,
            "title": "The slug form of the region name",
            "type": "string",
            "example": "basic"
          }
        },
        "title": "Geographical information about an app origin",
        "type": "object"
      },
      "app": {
        "description": "An application's configuration and status.",
        "properties": {
          "active_deployment": {
            "$ref": "#/components/schemas/apps_deployment"
          },
          "created_at": {
            "format": "date-time",
            "readOnly": true,
            "title": "The creation time of the app",
            "type": "string",
            "example": "2020-11-19T20:27:18.000Z"
          },
          "default_ingress": {
            "readOnly": true,
            "title": "The default hostname on which the app is accessible",
            "type": "string",
            "example": "digitalocean.com"
          },
          "domains": {
            "items": {
              "$ref": "#/components/schemas/apps_domain"
            },
            "readOnly": true,
            "title": "Contains all domains for the app",
            "type": "array"
          },
          "id": {
            "readOnly": true,
            "title": "The ID of the application",
            "type": "string",
            "example": "4f6c71e2-1e90-4762-9fee-6cc4a0a9f2cf"
          },
          "in_progress_deployment": {
            "$ref": "#/components/schemas/apps_deployment"
          },
          "last_deployment_created_at": {
            "format": "date-time",
            "readOnly": true,
            "title": "The creation time of the last deployment",
            "type": "string",
            "example": "2020-11-19T20:27:18.000Z"
          },
          "live_domain": {
            "readOnly": true,
            "title": "The live domain of the app",
            "type": "string",
            "example": "live_domain"
          },
          "live_url": {
            "readOnly": true,
            "title": "The live URL of the app",
            "type": "string",
            "example": "google.com"
          },
          "live_url_base": {
            "readOnly": true,
            "title": "The live URL base of the app, the URL excluding the path",
            "type": "string",
            "example": "digitalocean.com"
          },
          "owner_uuid": {
            "readOnly": true,
            "title": "The ID of the account to which the application belongs",
            "type": "string",
            "example": "4f6c71e2-1e90-4762-9fee-6cc4a0a9f2cf"
          },
          "region": {
            "$ref": "#/components/schemas/apps_region"
          },
          "spec": {
            "$ref": "#/components/schemas/app_spec"
          },
          "tier_slug": {
            "readOnly": true,
            "title": "The current pricing tier slug of the app",
            "type": "string",
            "example": "basic"
          },
          "updated_at": {
            "format": "date-time",
            "readOnly": true,
            "title": "Time of the app's last configuration update",
            "type": "string",
            "example": "2020-12-01T00:42:16.000Z"
          }
        },
        "required": [
          "spec"
        ],
        "type": "object"
      },
      "meta_meta": {
        "description": "Information about the response itself.",
        "type": "object",
        "properties": {
          "total": {
            "description": "Number of objects returned by the request.",
            "type": "integer",
            "example": 1
          }
        },
        "required": [
          "total"
        ]
      },
      "apps_response": {
        "properties": {
          "apps": {
            "items": {
              "$ref": "#/components/schemas/app"
            },
            "title": "A list of apps",
            "type": "array"
          },
          "links": {
            "$ref": "#/components/schemas/page_links"
          },
          "meta": {
            "$ref": "#/components/schemas/meta_meta"
          }
        },
        "type": "object"
      },
      "apps_create_app_request": {
        "properties": {
          "spec": {
            "$ref": "#/components/schemas/app_spec"
          }
        },
        "required": [
          "spec"
        ],
        "type": "object"
      },
      "app_response": {
        "properties": {
          "app": {
            "$ref": "#/components/schemas/app"
          }
        },
        "type": "object"
      },
      "apps_update_app_request": {
        "type": "object",
        "properties": {
          "spec": {
            "$ref": "#/components/schemas/app_spec"
          }
        },
        "required": [
          "spec"
        ]
      },
      "apps_delete_app_response": {
        "properties": {
          "id": {
            "title": "The ID of the app that was deleted",
            "type": "string",
            "example": "4f6c71e2-1e90-4762-9fee-6cc4a0a9f2cf"
          }
        },
        "type": "object"
      },
      "apps_deployments_response": {
        "properties": {
          "deployments": {
            "items": {
              "$ref": "#/components/schemas/apps_deployment"
            },
            "title": "A list of deployments",
            "type": "array"
          },
          "links": {
            "$ref": "#/components/schemas/page_links"
          },
          "meta": {
            "$ref": "#/components/schemas/meta_meta"
          }
        },
        "type": "object"
      },
      "apps_create_deployment_request": {
        "type": "object",
        "properties": {
          "force_build": {
            "title": "Indicates whether to force a build of app from source even if an existing cached build is suitable for re-use",
            "type": "boolean",
            "example": true
          }
        }
      },
      "apps_deployment_response": {
        "properties": {
          "deployment": {
            "$ref": "#/components/schemas/apps_deployment"
          }
        },
        "type": "object"
      },
      "apps_get_logs_response": {
        "properties": {
          "historic_urls": {
            "items": {
              "type": "string",
              "example": "https://logs/build.log"
            },
            "title": "A list of URLs to archived log files",
            "type": "array"
          },
          "live_url": {
            "description": "A URL of the real-time live logs. This URL may use either the `https://` or `wss://` protocols and will keep pushing live logs as they become available.",
            "type": "string",
            "example": "ws://logs/build"
          }
        },
        "type": "object"
      },
      "apps_tier": {
        "properties": {
          "build_seconds": {
            "format": "int64",
            "title": "The amount of included build time in seconds",
            "type": "string",
            "example": "233"
          },
          "egress_bandwidth_bytes": {
            "format": "int64",
            "title": "The amount of included outbound bandwidth in bytes",
            "type": "string",
            "example": "123"
          },
          "name": {
            "title": "A human-readable name of the tier",
            "type": "string",
            "example": "test"
          },
          "slug": {
            "title": "The slug of the tier",
            "type": "string",
            "example": "test"
          },
          "storage_bytes": {
            "format": "int64",
            "title": "The allotted disk space in bytes",
            "type": "string",
            "example": "10000000"
          }
        },
        "type": "object"
      },
      "apps_list_tiers_response": {
        "properties": {
          "tiers": {
            "items": {
              "$ref": "#/components/schemas/apps_tier"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "apps_get_tier_response": {
        "properties": {
          "tier": {
            "$ref": "#/components/schemas/apps_tier"
          }
        },
        "type": "object"
      },
      "instance_size_cpu_type": {
        "default": "UNSPECIFIED",
        "enum": [
          "UNSPECIFIED",
          "SHARED",
          "DEDICATED"
        ],
        "title": "- SHARED: Shared vCPU cores\n - DEDICATED: Dedicated vCPU cores",
        "type": "string",
        "example": "SHARED"
      },
      "apps_instance_size": {
        "properties": {
          "cpu_type": {
            "$ref": "#/components/schemas/instance_size_cpu_type"
          },
          "cpus": {
            "format": "int64",
            "title": "The number of allotted vCPU cores",
            "type": "string",
            "example": "3"
          },
          "memory_bytes": {
            "format": "int64",
            "title": "The allotted memory in bytes",
            "type": "string",
            "example": "1048"
          },
          "name": {
            "title": "A human-readable name of the instance size",
            "type": "string",
            "example": "name"
          },
          "slug": {
            "title": "The slug of the instance size",
            "type": "string",
            "example": "basic"
          },
          "tier_downgrade_to": {
            "title": "The slug of the corresponding downgradable instance size on the lower tier",
            "type": "string",
            "example": "basic"
          },
          "tier_slug": {
            "title": "The slug of the tier to which this instance size belongs",
            "type": "string",
            "example": "basic"
          },
          "tier_upgrade_to": {
            "title": "The slug of the corresponding upgradable instance size on the higher tier",
            "type": "string",
            "example": "basic"
          },
          "usd_per_month": {
            "title": "The cost of this instance size in USD per month",
            "type": "string",
            "example": "23"
          },
          "usd_per_second": {
            "title": "The cost of this instance size in USD per second",
            "type": "string",
            "example": "0.00000001232"
          }
        },
        "type": "object"
      },
      "apps_list_instance_sizes_response": {
        "properties": {
          "discount_percent": {
            "format": "float",
            "type": "number",
            "example": 2.32
          },
          "instance_sizes": {
            "items": {
              "$ref": "#/components/schemas/apps_instance_size"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "apps_get_instance_size_response": {
        "properties": {
          "instance_size": {
            "$ref": "#/components/schemas/apps_instance_size"
          }
        },
        "type": "object"
      },
      "apps_list_regions_response": {
        "properties": {
          "regions": {
            "items": {
              "$ref": "#/components/schemas/apps_region"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "app_propose": {
        "type": "object",
        "properties": {
          "spec": {
            "$ref": "#/components/schemas/app_spec"
          },
          "app_id": {
            "type": "string",
            "description": "An optional ID of an existing app. If set, the spec will be treated as a proposed update to the specified app. The existing app is not modified using this method.",
            "example": "b6bdf840-2854-4f87-a36c-5f231c617c84"
          }
        },
        "required": [
          "spec"
        ]
      },
      "app_propose_response": {
        "type": "object",
        "properties": {
          "app_is_static": {
            "type": "boolean",
            "description": "Indicates whether the app is a static app.",
            "example": true
          },
          "app_name_available": {
            "type": "boolean",
            "description": "Indicates whether the app name is available.",
            "example": true
          },
          "app_name_suggestion": {
            "type": "string",
            "description": "The suggested name if the proposed app name is unavailable.",
            "example": "newName"
          },
          "existing_static_apps": {
            "type": "string",
            "description": "The maximum number of free static apps the account can have. We will charge you for any additional static apps.",
            "example": "2"
          },
          "spec": {
            "$ref": "#/components/schemas/app_spec"
          },
          "app_cost": {
            "type": "integer",
            "format": "int32",
            "description": "The monthly cost of the proposed app in USD using the next pricing plan tier. For example, if you propose an app that uses the Basic tier, the `app_tier_upgrade_cost` field displays the monthly cost of the app if it were to use the Professional tier. If the proposed app already uses the most expensive tier, the field is empty.",
            "example": 5
          },
          "app_tier_downgrade_cost": {
            "type": "integer",
            "format": "int32",
            "description": "The monthly cost of the proposed app in USD using the previous pricing plan tier. For example, if you propose an app that uses the Professional tier, the `app_tier_downgrade_cost` field displays the monthly cost of the app if it were to use the Basic tier. If the proposed app already uses the lest expensive tier, the field is empty.",
            "example": 17
          }
        }
      },
      "app_alert_spec_rule": {
        "default": "UNSPECIFIED_RULE",
        "enum": [
          "UNSPECIFIED_RULE",
          "CPU_UTILIZATION",
          "MEM_UTILIZATION",
          "RESTART_COUNT",
          "DEPLOYMENT_FAILED",
          "DEPLOYMENT_LIVE",
          "DOMAIN_FAILED",
          "DOMAIN_LIVE"
        ],
        "type": "string",
        "example": "CPU_UTILIZATION"
      },
      "app_alert_spec_operator": {
        "default": "UNSPECIFIED_OPERATOR",
        "enum": [
          "UNSPECIFIED_OPERATOR",
          "GREATER_THAN",
          "LESS_THAN"
        ],
        "type": "string",
        "example": "GREATER_THAN"
      },
      "app_alert_spec_window": {
        "default": "UNSPECIFIED_WINDOW",
        "enum": [
          "UNSPECIFIED_WINDOW",
          "FIVE_MINUTES",
          "TEN_MINUTES",
          "THIRTY_MINUTES",
          "ONE_HOUR"
        ],
        "type": "string",
        "example": "FIVE_MINUTES"
      },
      "app_alert_spec": {
        "properties": {
          "rule": {
            "$ref": "#/components/schemas/app_alert_spec_rule"
          },
          "disabled": {
            "description": "Is the alert disabled?",
            "type": "boolean",
            "example": false
          },
          "operator": {
            "$ref": "#/components/schemas/app_alert_spec_operator"
          },
          "value": {
            "description": "Threshold value for alert",
            "format": "float",
            "type": "number",
            "example": 2.32
          },
          "window": {
            "$ref": "#/components/schemas/app_alert_spec_window"
          }
        },
        "type": "object"
      },
      "app_alert_email": {
        "default": "",
        "type": "string",
        "example": "sammy@digitalocean.com"
      },
      "app_alert_slack_webhook": {
        "properties": {
          "url": {
            "title": "URL of the Slack webhook",
            "type": "string",
            "example": "https://hooks.slack.com/services/T00000000/B00000000/XXXXXXXXXXXXXXXXXXXXXXXX"
          },
          "channel": {
            "title": "Name of the Slack Webhook Channel",
            "type": "string",
            "example": "Channel Name"
          }
        },
        "type": "object"
      },
      "app_alert_phase": {
        "default": "UNKNOWN",
        "enum": [
          "UNKNOWN",
          "PENDING",
          "CONFIGURING",
          "ACTIVE",
          "ERROR"
        ],
        "type": "string",
        "example": "ACTIVE"
      },
      "app_alert_progress_step_status": {
        "default": "UNKNOWN",
        "enum": [
          "UNKNOWN",
          "PENDING",
          "RUNNING",
          "ERROR",
          "SUCCESS"
        ],
        "type": "string",
        "example": "SUCCESS"
      },
      "app_alert_progress_step_reason": {
        "properties": {
          "code": {
            "title": "The error code",
            "type": "string",
            "example": "Title of Error"
          },
          "message": {
            "title": "The error message",
            "type": "string",
            "example": "This is an error"
          }
        },
        "type": "object"
      },
      "app_alert_progress_step": {
        "properties": {
          "name": {
            "title": "The name of this step",
            "type": "string",
            "example": "example_step"
          },
          "status": {
            "$ref": "#/components/schemas/app_alert_progress_step_status"
          },
          "started_at": {
            "format": "date-time",
            "title": "The start time of this step",
            "type": "string",
            "example": "2020-11-19T20:27:18.000Z"
          },
          "ended_at": {
            "format": "date-time",
            "title": "The start time of this step",
            "type": "string",
            "example": "2020-11-19T20:27:18.000Z"
          },
          "reason": {
            "$ref": "#/components/schemas/app_alert_progress_step_reason"
          }
        },
        "type": "object"
      },
      "app_alert_progress": {
        "properties": {
          "steps": {
            "title": "Steps of an alert's progress.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/app_alert_progress_step"
            }
          }
        },
        "type": "object"
      },
      "app_alert": {
        "properties": {
          "id": {
            "readOnly": true,
            "title": "The ID of the alert",
            "type": "string",
            "example": "4f6c71e2-1e90-4762-9fee-6cc4a0a9f2cf"
          },
          "component_name": {
            "title": "Name of component the alert belongs to",
            "type": "string",
            "example": "backend"
          },
          "spec": {
            "$ref": "#/components/schemas/app_alert_spec"
          },
          "emails": {
            "title": "Emails for alerts to go to",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/app_alert_email"
            },
            "example": [
              "sammy@digitalocean.com"
            ]
          },
          "slack_webhooks": {
            "title": "Slack Webhooks to send alerts to",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/app_alert_slack_webhook"
            }
          },
          "phase": {
            "$ref": "#/components/schemas/app_alert_phase"
          },
          "progress": {
            "$ref": "#/components/schemas/app_alert_progress"
          }
        },
        "type": "object"
      },
      "apps_list_alerts_response": {
        "properties": {
          "alerts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/app_alert"
            }
          }
        },
        "type": "object"
      },
      "apps_assign_app_alert_destinations_request": {
        "properties": {
          "emails": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/app_alert_email"
            },
            "example": [
              "sammy@digitalocean.com"
            ]
          },
          "slack_webhooks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/app_alert_slack_webhook"
            }
          }
        },
        "type": "object"
      },
      "apps_alert_response": {
        "properties": {
          "alert": {
            "$ref": "#/components/schemas/app_alert"
          }
        },
        "type": "object"
      },
      "cdn_endpoint": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "readOnly": true,
            "example": "892071a0-bb95-49bc-8021-3afd67a210bf",
            "description": "A unique ID that can be used to identify and reference a CDN endpoint."
          },
          "origin": {
            "type": "string",
            "format": "hostname",
            "example": "static-images.nyc3.digitaloceanspaces.com",
            "description": "The fully qualified domain name (FQDN) for the origin server which provides the content for the CDN. This is currently restricted to a Space."
          },
          "endpoint": {
            "type": "string",
            "format": "hostname",
            "readOnly": true,
            "example": "static-images.nyc3.cdn.digitaloceanspaces.com",
            "description": "The fully qualified domain name (FQDN) from which the CDN-backed content is served."
          },
          "ttl": {
            "type": "integer",
            "example": 3600,
            "enum": [
              60,
              600,
              3600,
              86400,
              604800
            ],
            "default": 3600,
            "description": "The amount of time the content is cached by the CDN's edge servers in seconds. TTL must be one of 60, 600, 3600, 86400, or 604800. Defaults to 3600 (one hour) when excluded."
          },
          "certificate_id": {
            "type": "string",
            "format": "uuid",
            "example": "892071a0-bb95-49bc-8021-3afd67a210bf",
            "description": "The ID of a DigitalOcean managed TLS certificate used for SSL when a custom subdomain is provided."
          },
          "custom_domain": {
            "type": "string",
            "format": "hostname",
            "example": "static.example.com",
            "description": "The fully qualified domain name (FQDN) of the custom subdomain used with the CDN endpoint."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "example": "2018-03-21T16:02:37Z",
            "description": "A time value given in ISO8601 combined date and time format that represents when the CDN endpoint was created."
          }
        },
        "required": [
          "origin"
        ]
      },
      "update_endpoint": {
        "type": "object",
        "properties": {
          "ttl": {
            "type": "integer",
            "example": 3600,
            "enum": [
              60,
              600,
              3600,
              86400,
              604800
            ],
            "default": 3600,
            "description": "The amount of time the content is cached by the CDN's edge servers in seconds. TTL must be one of 60, 600, 3600, 86400, or 604800. Defaults to 3600 (one hour) when excluded."
          },
          "certificate_id": {
            "type": "string",
            "format": "uuid",
            "example": "892071a0-bb95-49bc-8021-3afd67a210bf",
            "description": "The ID of a DigitalOcean managed TLS certificate used for SSL when a custom subdomain is provided."
          },
          "custom_domain": {
            "type": "string",
            "format": "hostname",
            "example": "static.example.com",
            "description": "The fully qualified domain name (FQDN) of the custom subdomain used with the CDN endpoint."
          }
        }
      },
      "purge_cache": {
        "type": "object",
        "properties": {
          "files": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "path/to/image.png",
              "path/to/css/*"
            ],
            "description": "An array of strings containing the path to the content to be purged from the CDN cache."
          }
        },
        "required": [
          "files"
        ]
      },
      "certificate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "readOnly": true,
            "example": "892071a0-bb95-49bc-8021-3afd67a210bf",
            "description": "A unique ID that can be used to identify and reference a certificate."
          },
          "name": {
            "type": "string",
            "example": "web-cert-01",
            "description": "A unique human-readable name referring to a certificate."
          },
          "not_after": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "example": "2017-02-22T00:23:00.000Z",
            "description": "A time value given in ISO8601 combined date and time format that represents the certificate's expiration date."
          },
          "sha1_fingerprint": {
            "type": "string",
            "readOnly": true,
            "example": "dfcc9f57d86bf58e321c2c6c31c7a971be244ac7",
            "description": "A unique identifier generated from the SHA-1 fingerprint of the certificate."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "example": "2017-02-08T16:02:37.000Z",
            "description": "A time value given in ISO8601 combined date and time format that represents when the certificate was created."
          },
          "dns_names": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "www.example.com",
              "example.com"
            ],
            "description": "An array of fully qualified domain names (FQDNs) for which the certificate was issued."
          },
          "state": {
            "type": "string",
            "enum": [
              "pending",
              "verified",
              "error"
            ],
            "readOnly": true,
            "example": "verified",
            "description": "A string representing the current state of the certificate. It may be `pending`, `verified`, or `error`."
          },
          "type": {
            "type": "string",
            "enum": [
              "custom",
              "lets_encrypt"
            ],
            "example": "lets_encrypt",
            "description": "A string representing the type of the certificate. The value will be `custom` for a user-uploaded certificate or `lets_encrypt` for one automatically generated with Let's Encrypt."
          }
        }
      },
      "certificate_create_base": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "web-cert-01",
            "description": "A unique human-readable name referring to a certificate."
          },
          "type": {
            "type": "string",
            "enum": [
              "custom",
              "lets_encrypt"
            ],
            "example": "lets_encrypt",
            "description": "A string representing the type of the certificate. The value will be `custom` for a user-uploaded certificate or `lets_encrypt` for one automatically generated with Let's Encrypt."
          }
        },
        "required": [
          "name"
        ]
      },
      "certificate_request_lets_encrypt": {
        "title": "Let's Encrypt Certificate Request",
        "allOf": [
          {
            "$ref": "#/components/schemas/certificate_create_base"
          },
          {
            "type": "object",
            "properties": {
              "dns_names": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "example": [
                  "www.example.com",
                  "example.com"
                ],
                "description": "An array of fully qualified domain names (FQDNs) for which the certificate was issued. A certificate covering all subdomains can be issued using a wildcard (e.g. `*.example.com`)."
              }
            },
            "required": [
              "dns_names"
            ]
          }
        ]
      },
      "certificate_request_custom": {
        "title": "Custom Certificate Request",
        "allOf": [
          {
            "$ref": "#/components/schemas/certificate_create_base"
          },
          {
            "type": "object",
            "properties": {
              "private_key": {
                "type": "string",
                "example": "-----BEGIN PRIVATE KEY-----\nMIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQDBIZMz8pnK6V52\nSVf+CYssOfCQHAx5f0Ou5rYbq3xNh8VHAIYJCQ1QxQIxKSP6+uODSYrb2KWyurP1\nDwGb8OYm0J3syEDtCUQik1cpCzpeNlAZ2f8FzXyYQAqPopxdRpsFz8DtZnVvu86X\nwrE4oFPl9MReICmZfBNWylpV5qgFPoXyJ70ZAsTm3cEe3n+LBXEnY4YrVDRWxA3w\nZ2mzZ03HZ1hHrxK9CMnS829U+8sK+UneZpCO7yLRPuxwhmps0wpK/YuZZfRAKF1F\nZRnak/SIQ28rnWufmdg16YqqHgl5JOgnb3aslKRvL4dI2Gwnkd2IHtpZnTR0gxFX\nfqqbQwuRAgMBAAECggEBAILLmkW0JzOkmLTDNzR0giyRkLoIROqDpfLtjKdwm95l\n9NUBJcU4vCvXQITKt/NhtnNTexcowg8pInb0ksJpg3UGE+4oMNBXVi2UW5MQZ5cm\ncVkQqgXkBF2YAY8FMaB6EML+0En2+dGR/3gIAr221xsFiXe1kHbB8Nb2c/d5HpFt\neRpLVJnK+TxSr78PcZA8DDGlSgwvgimdAaFUNO2OqB9/0E9UPyKk2ycdff/Z6ldF\n0hkCLtdYTTl8Kf/OwjcuTgmA2O3Y8/CoQX/L+oP9Rvt9pWCEfuebiOmHJVPO6Y6x\ngtQVEXwmF1pDHH4Qtz/e6UZTdYeMl9G4aNO2CawwcaYECgYEA57imgSOG4XsJLRh\nGGncV9R/xhy4AbDWLtAMzQRX4ktvKCaHWyQV2XK2we/cu29NLv2Y89WmerTNPOU+\nP8+pB31uty2ELySVn15QhKpQClVEAlxCnnNjXYrii5LOM80+lVmxvQwxVd8Yz8nj\nIntyioXNBEnYS7V2RxxFGgFun1cCgYEA1V3W+Uyamhq8JS5EY0FhyGcXdHd70K49\nW1ou7McIpncf9tM9acLS1hkI98rd2T69Zo8mKoV1V2hjFaKUYfNys6tTkYWeZCcJ\n3rW44j9DTD+FmmjcX6b8DzfybGLehfNbCw6n67/r45DXIV/fk6XZfkx6IEGO4ODt\nNfnvx4TuI1cCgYBACDiKqwSUvmkUuweOo4IuCxyb5Ee8v98P5JIE/VRDxlCbKbpx\npxEam6aBBQVcDi+n8o0H3WjjlKc6UqbW/01YMoMrvzotxNBLz8Y0QtQHZvR6KoCG\nRKCKstxTcWflzKuknbqN4RapAhNbKBDJ8PMSWfyDWNyaXzSmBdvaidbF1QKBgDI0\no4oD0Xkjg1QIYAUu9FBQmb9JAjRnW36saNBEQS/SZg4RRKknM683MtoDvVIKJk0E\nsAlfX+4SXQZRPDMUMtA+Jyrd0xhj6zmhbwClvDMr20crF3fWdgcqtft1BEFmsuyW\nJUMe5OWmRkjPI2+9ncDPRAllA7a8lnSV/Crph5N/AoGBAIK249temKrGe9pmsmAo\nQbNuYSmwpnMoAqdHTrl70HEmK7ob6SIVmsR8QFAkH7xkYZc4Bxbx4h1bdpozGB+/\nAangbiaYJcAOD1QyfiFbflvI1RFeHgrk7VIafeSeQv6qu0LLMi2zUbpgVzxt78Wg\neTuK2xNR0PIM8OI7pRpgyj1I\n-----END PRIVATE KEY-----",
                "description": "The contents of a PEM-formatted private-key corresponding to the SSL certificate."
              },
              "leaf_certificate": {
                "type": "string",
                "example": "-----BEGIN CERTIFICATE-----\nMIIFFjCCA/6gAwIBAgISA0AznUJmXhu08/89ZuSPC/kRMA0GCSqGSIb3DQEBCwUA\nMEoxCzAJBgNVBAYTAlVTMRYwFAYDVQQKEw1MZXQncyBFbmNyeXB0MSMwIQYDVQQD\nExpMZXQncyBFbmNyeXB0IEF1dGhvcml0eSBYMzAeFw0xNjExMjQwMDIzMDBaFw0x\nNzAyMjIwMDIzMDBaMCQxIjAgBgNVBAMTGWNsb3VkLmFuZHJld3NvbWV0aGluZy5j\nb20wggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDBIZMz8pnK6V52SVf+\nCYssOfCQHAx5f0Ou5rYbq3xNh8VWHIYJCQ1QxQIxKSP6+uODSYrb2KWyurP1DwGb\n8OYm0J3syEDtCUQik1cpCzpeNlAZ2f8FzXyYQAqPopxdRpsFz8DtZnVvu86XwrE4\noFPl9MReICmZfBNWylpV5qgFPoXyJ70ZAsTm3cEe3n+LBXEnY4YrVDRWxA3wZ2mz\nZ03HZ1hHrxK9CMnS829U+8sK+UneZpCO7yLRPuxwhmps0wpK/YuZZfRAKF1FZRna\nk/SIQ28rnWufmdg16YqqHgl5JOgnb3aslKRvL4dI2Gwnkd2IHtpZnTR0gxFXfqqb\nQwuRAgMBAAGjggIaMIICFjAOBgNVHQ8BAf8EBAMCBaAwHQYDVR0lBBYwFAYIKwYB\nBQUHAwEGCCsGAQUFBwMCMAwGA1UdEwEB/wQCMAAwHQYDVR0OBBYEFLsAFcxAhFX1\nMbCnzr9hEO5rL4jqMB8GA1UdIwQYMBaAFKhKamMEfd265tE5t6ZFZe/zqOyhMHAG\nCCsGAQUFBwEBBGQwYjAvBggrBgEFBQcwAYYjaHR0cDovL29jc3AuaW50LXgzLmxl\ndHNlbmNyeXB0Lm9yZy8wLwYIKwYBBQUHMAKGI2h0dHA6Ly9jZXJ0LmludC14My5s\nZXRzZW5jcnlwdC5vcmcvMCQGA1UdEQQdMBuCGWNsb3VkLmFuZHJld3NvbWV0aGlu\nZy5jb20wgf4GA1UdIASB9jCB8zAIBgZngQwBAgWrgeYGCysGAQQBgt8TAQEBMIHW\nMCYGCCsGAQUFBwIBFhpodHRwOi8vY3BzLmxldHNlbmNyeXB0Lm9yZzCBqwYIKwYB\nBQUHAgIwgZ4MgZtUaGlzIENlcnRpZmljYXRlIG1heSBvbmx5IGJlIHJlbGllZCB1\ncG9uIGJ5IFJlbHlpbmcgUGFydGllcyBhbmQgb25seSQ2ziBhY2NvcmRhbmNlIHdp\ndGggdGhlIENlcnRpZmljYXRlIFBvbGljeSBmb3VuZCBhdCBodHRwczovL2xldHNl\nbmNyeXB0Lm9yZy9yZXBvc2l0b3J5LzANBgkqhkiG9w0BAQsFAAOCAQEAOZVQvrjM\nPKXLARTjB5XsgfyDN3/qwLl7SmwGkPe+B+9FJpfScYG1JzVuCj/SoaPaK34G4x/e\niXwlwOXtMOtqjQYzNu2Pr2C+I+rVmaxIrCUXFmC205IMuUBEeWXG9Y/HvXQLPabD\nD3Gdl5+Feink9SDRP7G0HaAwq13hI7ARxkL9p+UIY39X0dV3WOboW2Re8nrkFXJ7\nq9Z6shK5QgpBfsLjtjNsQzaGV3ve1gOg25aTJGearBWOvEjJNA1wGMoKVXOtYwm/\nWyWoVdCQ8HmconcbJB6xc0UZ1EjvzRr5ZIvSa5uHZD0L3m7/kpPWlAlFJ7hHASPu\nUlF1zblDmg2Iaw==\n-----END CERTIFICATE-----",
                "description": "The contents of a PEM-formatted public SSL certificate."
              },
              "certificate_chain": {
                "type": "string",
                "example": "-----BEGIN CERTIFICATE-----\nMIIFFjCCA/6gAwIBAgISA0AznUJmXhu08/89ZuSPC/kRMA0GCSqGSIb3DQEBCwUA\nMEoxCzAJBgNVBAYTAlVTMRYwFAYDVQQKEw1MZXQncyBFbmNyeXB0MSMwIQYDVQQD\nExpMZXQncyBFbmNyeXB0IEF1dGhvcml0eSBYMzAeFw0xNjExMjQwMDIzMDBaFw0x\nNzAyMjIwMDIzMDBaMCQxIjAgBgNVBAMTGWNsb3VkLmFuZHJld3NvbWV0aGluZy5j\nb20wggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDBIZMz7tnK6V52SVf+\nCYssOfCQHAx5f0Ou5rYbq3xNh8VHAIYJCQ1QxQIxKSP6+uODSYrb2KWyurP1DwGb\n8OYm0J3syEDtCUQik1cpCzpeNlAZ2f8FzXyYQAqPopxdRpsFz8DtZnVvu86XwrE4\noFPl9MReICmZfBNWylpV5qgFPoXyJ70ZAsTm3cEe3n+LBXEnY4YrVDRWxA3wZ2mz\nZ03HZ1hHrxK9CMnS829U+8sK+UneZpCO7yLRPuxwhmps0wpK/YuZZfRAKF1FZRna\nk/SIQ28rnWufmdg16YqqHgl5JOgnb3aslKRvL4dI2Gwnkd2IHtpZnTR0gxFXfqqb\nQwuRAgMBAAGjggIaMIICFjAOBgNVHQ8BAf8EBAMCBaAwHQYDVR0lBBYwFAYIKwYB\nBQUHAwEGCCsGAQUFBwMCMAwGA1UdEwEB/wQCMAAwHQYDVR0OBBYEFLsAFcxAhFX1\nMbCnzr9hEO5rL4jqMB8GA1UdIwQYMBaAFKhKamMEfd265tE5t6ZFZe/zqOyhMHAG\nCCsGAQUFBwEBBGQwYjAvBggrBgEFBQcwAYYjaHR0cDovL29jc3AuaW50LXgzLmxl\ndHNlbmNyeXB0Lm9yZy8wLwYIKwYBBQUHMAKGI2h0dHA6Ly9jZXJ0LmludC14My5s\nZXRzZW5jcnlwdC5vcmcvMCQGA1UdEQQdMBuCGWNsb3VkLmFuZHJld3NvbWV0aGlu\nZy5jb20wgf4GA1UdIASB9jCB8zAIBgZngQwBAgEwgeWECysGAQQBgt8TAQEBMIHW\nMCYGCCsGAQUFBwIBFhpodHRwOi8vY3BzLmxldHNlbmNyeXB0Lm9yZzCBqwYIKwYB\nBQUHAgIwgZ4MgZtUaGlzIENlcnRpZmljYXRlIG1heSBvbmx5IGJlIHJlbGllZCB1\ncG9uIGJ5IFJlbHlpbmcgUGFydGllcyBhbmQgb25seSQ2ziBhY2NvcmRhbmNlIHdp\ndGggdGhlIENlcnRpZmljYXRlIFBvbGljeSBmb3VuZCBhdCBsdHRwczovL2xldHNl\nbmNyeXB0Lm9yZy9yZXBvc2l0b3J5LzANBgkqhkiG9w0BAQsFAAOCAQEAOZVQvrjM\nPKXLARTjB5XsgfyDN3/qwLl7SmwGkPe+B+9FJpfScYG1JzVuCj/SoaPaK34G4x/e\niXwlwOXtMOtqjQYzNu2Pr2C+I+rVmaxIrCUXFmC205IMuUBEeWXG9Y/HvXQLPabD\nD3Gdl5+Feink9SDRP7G0HaAwq13hI7ARxkL3o+UIY39X0dV3WOboW2Re8nrkFXJ7\nq9Z6shK5QgpBfsLjtjNsQzaGV3ve1gOg25aTJGearBWOvEjJNA1wGMoKVXOtYwm/\nWyWoVdCQ8HmconcbJB6xc0UZ1EjvzRr5ZIvSa5uHZD0L3m7/kpPWlAlFJ7hHASPu\nUlF1zblDmg2Iaw==\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIEkjCCA3qgAwIBAgIQCgFBQgAAAVOFc2oLheynCDANBgkqhkiG9w0BAQsFADA/\nMSQwIgYDVQQKExtEaWdpdGFsIFNpZ25hdHVyZSBUcnVzdCBDby4xFzAVBgNVBAMT\nDkRTVCBSb290IENBIFgzMB4XDTE2MDMxNzE2NDA0NloXDTIxMDMxNzE2NDA0Nlow\nSjELMAkGA1UEBhMCVVMxFjAUBgNVBAoTDUxldCdzIEVuY3J5cHQxIzAhBgNVBAMT\nGkxldCdzIEVuY3J5cHQgQXV0aG9yaXR5IFgzMIIBIjANBgkqhkiG9w0BAQEFAAOC\nAQ8AMIIBCgKCAQEAnNMM8FrlLsd3cl03g7NoYzDq1zUmGSXhvb418XCSL7e4S0EF\nq6meNQhY7LEqxGiHC6PjdeTm86dicbp5gWAf15Gan/PQeGdxyGkOlZHP/uaZ6WA8\nSMx+yk13EiSdRxta67nsHjcAHJyse6cF6s5K671B5TaYucv9bTyWaN8jKkKQDIZ0\nZ8h/pZq4UmEUEz9l6YKHy9v6Dlb2honzhT+Xhq+w3Brvaw2VFn3EK6BlspkENnWA\na6xK8xuQSXgvopZPKiAlKQTGdMDQMc2PMTiVFrqoM7hD8bEfwzB/onkxEz0tNvjj\n/PIzark5McWvxI0NHWQWM6r6hCm21AvA2H3DkwIPOIUo4IBfTCCAXkwEgYDVR0T\nAQH/BAgwBgEB/wIBADAOBgNVHQ8BAf8EBAMCAYYwfwYIKwYBBQUHAQEEczBxMDIG\nCCsGAQUFBzABhiZodHRwOi8vaXNyZy50cnVzdGlkLm9jc3AuaWRlbnRydXN0LmNv\nbTA7BggrBgEFBQcwAoYvaHR0cDovL2FwcHMuaWRlbnRydXN0LmNvbS9yb290cy9k\nc3Ryb290Y2F4My5wN2MwHwYDVR0jBBgwFoAUxKexpHsscfrb4UuQdf/EFWCFiRAw\nVAYDVR0gBE0wSzAIBgZngQwBAgEwPwYLKwYBBAGC3xMBAQEwMDAuBggrBgEFBQcC\nARYiaHR0cDovL2Nwcy5yb290LXgxLmxldHNlbmNyeXB0Lm9yZzA8BgNVHR8ENTAz\nMDGgL6AthitodHRwOi8vY3JsLmlkZW50cnVzdC5jb20vRFNUUk9PVENBWDNDUkwu\nY3JsMB0GA1UdDgQWBBSoSmpjBH3duubRObemRWXv86jsoTANBgkqhkiG9w0BAQsF\nAAOCAQEA3TPXEfNjWDjdGBX7CVW+dla5cEilaUcne8IkCJLxWh9KEik3JHRRHGJo\nuM2VcGfl96S8TihRzZvoroed6ti6WqEBmtzw3Wodatg+VyOeph4EYpr/1wXKtx8/\nwApIvJSwtmVi4MFU5aMqrSDE6ea73Mj2tcMyo5jMd6jmeWUHK8so/joWUoHOUgwu\nX4Po1QYz+3dszkDqMp4fklxBwXRsW10KXzPMTZ+sOPAveyxindmjkW8lGy+QsRlG\nPfZ+G6Z6h7mjem0Y+iWlkYcV4PIWL1iwBi8saCbGS5jN2p8M+X+Q7UNKEkROb3N6\nKOqkqm57TH2H3eDJAkSnh6/DNFu0Qg==\n-----END CERTIFICATE-----",
                "description": "The full PEM-formatted trust chain between the certificate authority's certificate and your domain's SSL certificate."
              }
            },
            "required": [
              "private_key",
              "leaf_certificate"
            ]
          }
        ]
      },
      "balance": {
        "type": "object",
        "properties": {
          "month_to_date_balance": {
            "type": "string",
            "description": "Balance as of the `generated_at` time.  This value includes the `account_balance` and `month_to_date_usage`.",
            "example": "23.44"
          },
          "account_balance": {
            "type": "string",
            "description": "Current balance of the customer's most recent billing activity.  Does not reflect `month_to_date_usage`.",
            "example": "12.23"
          },
          "month_to_date_usage": {
            "type": "string",
            "description": "Amount used in the current billing period as of the `generated_at` time.",
            "example": "11.21"
          },
          "generated_at": {
            "type": "string",
            "format": "date-time",
            "description": "The time at which balances were most recently generated.",
            "example": "2019-07-09T15:01:12.000Z"
          }
        }
      },
      "billing_history": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "Description of the billing history entry.",
            "example": "Invoice for May 2018"
          },
          "amount": {
            "type": "string",
            "description": "Amount of the billing history entry.",
            "example": "12.34"
          },
          "invoice_id": {
            "type": "string",
            "description": "ID of the invoice associated with the billing history entry, if  applicable.",
            "example": "123"
          },
          "invoice_uuid": {
            "type": "string",
            "description": "UUID of the invoice associated with the billing history entry, if  applicable.",
            "example": "example-uuid"
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "description": "Time the billing history entry occured.",
            "example": "2018-06-01T08:44:38.000Z"
          },
          "type": {
            "type": "string",
            "description": "Type of billing history entry.",
            "example": "Invoice",
            "enum": [
              "ACHFailure",
              "Adjustment",
              "AttemptFailed",
              "Chargeback",
              "Credit",
              "CreditExpiration",
              "Invoice",
              "Payment",
              "Refund",
              "Reversal"
            ]
          }
        }
      },
      "invoice_preview": {
        "type": "object",
        "description": "The invoice preview.",
        "properties": {
          "invoice_uuid": {
            "type": "string",
            "description": "The UUID of the invoice. The canonical reference for the invoice.",
            "example": "fdabb512-6faf-443c-ba2e-665452332a9e"
          },
          "amount": {
            "type": "string",
            "description": "Total amount of the invoice, in USD.  This will reflect month-to-date usage in the invoice preview.",
            "example": "23.45"
          },
          "invoice_period": {
            "type": "string",
            "description": "Billing period of usage for which the invoice is issued, in `YYYY-MM`  format.",
            "example": "2020-01"
          },
          "updated_at": {
            "type": "string",
            "description": "Time the invoice was last updated.  This is only included with the invoice preview.",
            "example": "2020-01-23T06:31:50.000Z"
          }
        }
      },
      "invoice_item": {
        "type": "object",
        "properties": {
          "product": {
            "type": "string",
            "description": "Name of the product being billed in the invoice item.",
            "example": "Kubernetes Clusters"
          },
          "resource_uuid": {
            "type": "string",
            "description": "UUID of the resource billing in the invoice item if available.",
            "example": "711157cb-37c8-4817-b371-44fa3504a39c"
          },
          "resource_id": {
            "type": "string",
            "description": "ID of the resource billing in the invoice item if available.",
            "example": "2353624"
          },
          "group_description": {
            "type": "string",
            "description": "Description of the invoice item when it is a grouped set of usage, such  as DOKS or databases.",
            "example": "my-doks-cluster"
          },
          "description": {
            "type": "string",
            "description": "Description of the invoice item.",
            "example": "a56e086a317d8410c8b4cfd1f4dc9f82"
          },
          "amount": {
            "type": "string",
            "description": "Billed amount of this invoice item. Billed in USD.",
            "example": "12.34"
          },
          "duration": {
            "type": "string",
            "description": "Duration of time this invoice item was used and subsequently billed.",
            "example": "744"
          },
          "duration_unit": {
            "type": "string",
            "description": "Unit of time for duration.",
            "example": "Hours"
          },
          "start_time": {
            "type": "string",
            "description": "Time the invoice item began to be billed for usage.",
            "example": "2020-01-01T00:00:00.000Z"
          },
          "end_time": {
            "type": "string",
            "description": "Time the invoice item stoped being billed for usage.",
            "example": "2020-02-01T00:00:00.000Z"
          },
          "project_name": {
            "type": "string",
            "description": "Name of the DigitalOcean Project this resource belongs to.",
            "example": "web"
          }
        }
      },
      "billing_address": {
        "type": "object",
        "properties": {
          "address_line1": {
            "type": "string",
            "description": "Street address line 1",
            "example": "101 Shark Row"
          },
          "address_line2": {
            "type": "string",
            "description": "Street address line 2",
            "example": " "
          },
          "city": {
            "type": "string",
            "description": "City",
            "example": "Atlantis"
          },
          "region": {
            "type": "string",
            "description": "Region",
            "example": "OC"
          },
          "postal_code": {
            "type": "string",
            "description": "Postal code",
            "example": "12345"
          },
          "country_iso2_code": {
            "type": "string",
            "description": "Country (ISO2) code",
            "example": "US"
          },
          "created_at": {
            "type": "string",
            "description": "Timestamp billing address was created",
            "example": "2019-09-03T16:34:46.000Z"
          },
          "updated_at": {
            "type": "string",
            "description": "Timestamp billing address was updated",
            "example": "2019-09-03T16:34:46.000Z"
          }
        }
      },
      "product_charge_item": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "string",
            "description": "Amount of the charge",
            "example": "10.00"
          },
          "name": {
            "type": "string",
            "description": "Description of the charge",
            "example": "Spaces Subscription"
          },
          "count": {
            "type": "string",
            "description": "Number of times the charge was applied",
            "example": "1"
          }
        }
      },
      "product_usage_charges": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Description of usage charges",
            "example": "Product usage charges"
          },
          "amount": {
            "type": "string",
            "description": "Total amount charged",
            "example": "12.34"
          },
          "items": {
            "type": "array",
            "description": "List of amount, and grouped aggregates by resource type.",
            "items": {
              "$ref": "#/components/schemas/product_charge_item"
            },
            "example": [
              {
                "amount": "10.00",
                "name": "Spaces Subscription",
                "count": "1"
              },
              {
                "amount": "2.34",
                "name": "Database Clusters",
                "count": "1"
              }
            ]
          }
        }
      },
      "simple_charge": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the charge",
            "example": "Overages"
          },
          "amount": {
            "type": "string",
            "description": "Total amount charged in USD",
            "example": "3.45"
          }
        }
      },
      "invoice_summary": {
        "type": "object",
        "properties": {
          "invoice_uuid": {
            "type": "string",
            "description": "UUID of the invoice",
            "example": "22737513-0ea7-4206-8ceb-98a575af7681"
          },
          "billing_period": {
            "type": "string",
            "description": "Billing period of usage for which the invoice is issued, in `YYYY-MM`  format.",
            "example": "2020-01"
          },
          "amount": {
            "type": "string",
            "description": "Total amount of the invoice, in USD.  This will reflect month-to-date usage in the invoice preview.",
            "example": "27.13"
          },
          "user_name": {
            "type": "string",
            "description": "Name of the DigitalOcean customer being invoiced.",
            "example": "Sammy Shark"
          },
          "user_billing_address": {
            "allOf": [
              {
                "description": "The billing address of the customer being invoiced."
              },
              {
                "$ref": "#/components/schemas/billing_address"
              }
            ]
          },
          "user_company": {
            "type": "string",
            "description": "Company of the DigitalOcean customer being invoiced, if set.",
            "example": "DigitalOcean"
          },
          "user_email": {
            "type": "string",
            "description": "Email of the DigitalOcean customer being invoiced.",
            "example": "sammy@digitalocean.com"
          },
          "product_charges": {
            "allOf": [
              {
                "description": "A summary of the product usage charges contributing to the invoice.  This will include an amount, and grouped aggregates by resource type  under the `items` key."
              },
              {
                "$ref": "#/components/schemas/product_usage_charges"
              }
            ]
          },
          "overages": {
            "allOf": [
              {
                "description": "A summary of the overages contributing to the invoice."
              },
              {
                "$ref": "#/components/schemas/simple_charge"
              }
            ]
          },
          "taxes": {
            "allOf": [
              {
                "description": "A summary of the taxes contributing to the invoice."
              },
              {
                "$ref": "#/components/schemas/simple_charge"
              }
            ]
          },
          "credits_and_adjustments": {
            "allOf": [
              {
                "description": "A summary of the credits and adjustments contributing to the invoice."
              },
              {
                "$ref": "#/components/schemas/simple_charge"
              }
            ]
          }
        }
      },
      "database_connection": {
        "type": "object",
        "properties": {
          "uri": {
            "type": "string",
            "description": "A connection string in the format accepted by the `psql` command. This is provided as a convenience and should be able to be constructed by the other attributes.",
            "example": "postgres://doadmin:wv78n3zpz42xezdk@backend-do-user-19081923-0.db.ondigitalocean.com:25060/defaultdb?sslmode=require",
            "readOnly": true
          },
          "database": {
            "type": "string",
            "description": "The name of the default database.",
            "example": "defaultdb",
            "readOnly": true
          },
          "host": {
            "type": "string",
            "description": "The FQDN pointing to the database cluster's current primary node.",
            "example": "backend-do-user-19081923-0.db.ondigitalocean.com",
            "readOnly": true
          },
          "port": {
            "type": "integer",
            "description": "The port on which the database cluster is listening.",
            "example": 25060,
            "readOnly": true
          },
          "user": {
            "type": "string",
            "description": "The default user for the database.",
            "example": "doadmin",
            "readOnly": true
          },
          "password": {
            "type": "string",
            "description": "The randomly generated password for the default user.",
            "example": "wv78n3zpz42xezdk",
            "readOnly": true
          },
          "ssl": {
            "type": "boolean",
            "description": "A boolean value indicating if the connection should be made over SSL.",
            "example": true,
            "readOnly": true
          }
        }
      },
      "mysql_settings": {
        "type": "object",
        "properties": {
          "auth_plugin": {
            "type": "string",
            "enum": [
              "mysql_native_password",
              "caching_sha2_password"
            ],
            "example": "mysql_native_password",
            "description": "A string specifying the authentication method to be used for connections\nto the MySQL user account. The valid values are `mysql_native_password`\nor `caching_sha2_password`. If excluded when creating a new user, the\ndefault for the version of MySQL in use will be used. As of MySQL 8.0, the\ndefault is `caching_sha2_password`.\n"
          }
        },
        "required": [
          "auth_plugin"
        ]
      },
      "database_user": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "app-01",
            "description": "The name of a database user."
          },
          "role": {
            "type": "string",
            "enum": [
              "primary",
              "normal"
            ],
            "example": "normal",
            "description": "A string representing the database user's role. The value will be either\n\"primary\" or \"normal\".\n",
            "readOnly": true
          },
          "password": {
            "type": "string",
            "example": "jge5lfxtzhx42iff",
            "description": "A randomly generated password for the database user.",
            "readOnly": true
          },
          "mysql_settings": {
            "$ref": "#/components/schemas/mysql_settings"
          }
        },
        "required": [
          "name"
        ]
      },
      "database_maintenance_window": {
        "type": "object",
        "nullable": true,
        "properties": {
          "day": {
            "type": "string",
            "example": "tuesday",
            "description": "The day of the week on which to apply maintenance updates."
          },
          "hour": {
            "type": "string",
            "example": "14:00",
            "description": "The hour in UTC at which maintenance updates will be applied in 24 hour format."
          },
          "pending": {
            "type": "boolean",
            "example": true,
            "description": "A boolean value indicating whether any maintenance is scheduled to be performed in the next window.",
            "readOnly": true
          },
          "description": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A list of strings, each containing information about a pending maintenance update.",
            "example": [
              "Update TimescaleDB to version 1.2.1",
              "Upgrade to PostgreSQL 11.2 and 10.7 bugfix releases"
            ],
            "readOnly": true
          }
        },
        "required": [
          "day",
          "hour"
        ]
      },
      "database_cluster": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "9cc10173-e9ea-4176-9dbc-a4cee4c4ff30",
            "description": "A unique ID that can be used to identify and reference a database cluster.",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "example": "backend",
            "description": "A unique, human-readable name referring to a database cluster."
          },
          "engine": {
            "type": "string",
            "example": "pg",
            "enum": [
              "pg",
              "mysql",
              "redis",
              "mongodb"
            ],
            "description": "A slug representing the database engine used for the cluster. The possible values are: \"pg\" for PostgreSQL, \"mysql\" for MySQL, \"redis\" for Redis, and \"mongodb\" for MongoDB."
          },
          "version": {
            "type": "string",
            "example": "10",
            "description": "A string representing the version of the database engine in use for the cluster."
          },
          "num_nodes": {
            "type": "integer",
            "example": 2,
            "description": "The number of nodes in the database cluster."
          },
          "size": {
            "type": "string",
            "example": "db-s-2vcpu-4gb",
            "description": "The slug identifier representing the size of the nodes in the database cluster."
          },
          "region": {
            "type": "string",
            "example": "nyc3",
            "description": "The slug identifier for the region where the database cluster is located."
          },
          "status": {
            "type": "string",
            "enum": [
              "creating",
              "online",
              "resizing",
              "migrating",
              "forking"
            ],
            "example": "creating",
            "description": "A string representing the current status of the database cluster.",
            "readOnly": true
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "example": "2019-01-11T18:37:36.000Z",
            "description": "A time value given in ISO8601 combined date and time format that represents when the database cluster was created.",
            "readOnly": true
          },
          "private_network_uuid": {
            "type": "string",
            "pattern": "^$|[0-9a-f]{8}\\b-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-\\b[0-9a-f]{12}",
            "example": "d455e75d-4858-4eec-8c95-da2f0a5f93a7",
            "description": "A string specifying the UUID of the VPC to which the database cluster will be assigned. If excluded, the cluster when creating a new database cluster, it will be assigned to your account's default VPC for the region."
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "production"
            ],
            "nullable": true,
            "description": "An array of tags that have been applied to the database cluster."
          },
          "db_names": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "doadmin"
            ],
            "nullable": true,
            "readOnly": true,
            "description": "An array of strings containing the names of databases created in the database cluster."
          },
          "connection": {
            "allOf": [
              {
                "$ref": "#/components/schemas/database_connection"
              },
              {
                "readOnly": true
              }
            ]
          },
          "private_connection": {
            "allOf": [
              {
                "$ref": "#/components/schemas/database_connection"
              },
              {
                "readOnly": true
              }
            ]
          },
          "users": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/database_user"
            },
            "readOnly": true
          },
          "maintenance_window": {
            "allOf": [
              {
                "$ref": "#/components/schemas/database_maintenance_window"
              },
              {
                "readOnly": true
              }
            ]
          }
        },
        "required": [
          "name",
          "engine",
          "num_nodes",
          "size",
          "region"
        ]
      },
      "database_backup": {
        "type": "object",
        "properties": {
          "database_name": {
            "type": "string",
            "example": "backend",
            "description": "The name of an existing database cluster from which the backup will be restored."
          },
          "backup_created_at": {
            "type": "string",
            "format": "date-time",
            "example": "2019-01-31T19:25:22.000Z",
            "description": "The timestamp of an existing database cluster backup in ISO8601 combined date and time format. The most recent backup will be used if excluded."
          }
        },
        "required": [
          "database_name"
        ]
      },
      "ca": {
        "type": "object",
        "properties": {
          "certificate": {
            "type": "string",
            "example": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUVRVENDQXFtZ0F3SUJBZ0lVRUZZWTdBWFZQS0Raam9jb1lpMk00Y0dvcU0wd0RRWUpLb1pJaHZjTkFRRU0KQlFBd09qRTRNRFlHQTFVRUF3d3ZOek0zT1RaaE1XRXRaamhrTUMwME9HSmpMV0V4Wm1NdFpqbGhNVFZsWXprdwpORGhsSUZCeWIycGxZM1FnUTBFd0hoY05NakF3TnpFM01UVTFNREEyV2hjTk16QXdOekUxTVRVMU1EQTJXakE2Ck1UZ3dOZ1lEVlFRRERDODNNemM1Tm1FeFlTMW1PR1F3TFRRNFltTXRZVEZtWXkxbU9XRXhOV1ZqT1RBME9HVWcKVUhKdmFtVmpkQ0JEUVRDQ0FhSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnR1BBRENDQVlvQ2dnR0JBTVdScXhycwpMZnpNdHZyUmxKVEw4MldYMVBLZkhKbitvYjNYcmVBY3FZd1dBUUp2Q3IycmhxSXZieVZzMGlaU0NzOHI4c3RGClljQ0R1bkxJNmUwTy9laERZYTBIT2RrMkFFRzE1ckVOVmNha2NSczcyQWlHVHNrdkNXS2VkUjFTUWswVWt0WCsKQUg4S1ExS3F5bzNtZ2Y2cVV1WUpzc3JNTXFselk3YTN1RVpEb2ZqTjN5Q3MvM21pTVJKcVcyNm1JV0IrUUlEbAo5YzdLRVF5MTZvdCtjeHVnd0lLMm9oZHMzaFY1bjBKMFVBM0I3QWRBdXY5aUl5L3JHaHlTNm5CNTdaWm9JZnAyCnFybXdOY0UrVjlIdXhQSGtRVjFOQjUwOFFudWZ4Z0E5VCtqU2VrdGVUbWFORkxqNjFXL3BtcndrTytOaWFXUTIKaGgzVXBKOEozY1BoNkErbHRnUmpSV2NEb2lsYVNwRVVpU09WemNNYVFvalZKYVJlNk9NbnZYc29NaSs3ZzdneApWcittQ0lUcGcvck9DaXpBWWQ2UFAxLzdYTjk1ZXNmU2tBQnM5c3hJakpjTUFqbDBYTEFzRmtGZVdyeHNIajlVCmJnaDNWYXdtcnpUeXhZT0RQcXV1cS9JcGlwc0RRT3Fpb2ZsUStkWEJJL3NUT0NNbVp6K0pNcG5HYXdJREFRQUIKb3o4d1BUQWRCZ05WSFE0RUZnUVVSekdDRlE3WEtUdHRDN3JzNS8ydFlQcExTZGN3RHdZRFZSMFRCQWd3QmdFQgovd0lCQURBTEJnTlZIUThFQkFNQ0FRWXdEUVlKS29aSWh2Y05BUUVNQlFBRGdnR0JBSWFKQ0dSVVNxUExtcmcvCmk3MW10b0NHUDdzeG1BVXVCek1oOEdrU25uaVdaZnZGMTRwSUtqTlkwbzVkWmpHKzZqK1VjalZtK0RIdGE1RjYKOWJPeEk5S0NFeEI1blBjRXpMWjNZYitNOTcrellxbm9zUm85S21DVFJBb2JrNTZ0WU1FS1h1aVJja2tkMm1yUQo4cGw2N2xxdThjM1V4c0dHZEZVT01wMkk3ZTNpdUdWVm5UR0ZWM3JQZUdaQ0J3WGVyUUQyY0F4UjkzS3BnWVZ2ClhUUzk5dnpSbm1HOHhhUm9EVy9FbEdXZ2xWd0Q5a1JrbXhUUkdoYTdDWVZCcjFQVWY2dVVFVjhmVFIxc1hFZnIKLytMR1JoSVVsSUhWT3l2Yzk3YnZYQURPbWF1MWZDVE5lWGtRdTNyZnZFSlBmaFlLeVIwT0V3eWVvdlhRNzl0LwpTV2ZGTjBreU1Pc1UrNVNIdHJKSEh1eWNWcU0yQlVVK083VjM1UnNwOU9MZGRZMFFVbTZldFpEVEhhSUhYYzRRCnl1Rm1OL1NhSFZtNE0wL3BTVlJQdVd6TmpxMnZyRllvSDRtbGhIZk95TUNJMjc2elE2aWhGNkdDSHlkOUJqajcKUm1UWGEyNHM3NWhmSi9YTDV2bnJSdEtpVHJlVHF6V21EOVhnUmNMQ0gyS1hJaVRtSWc9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==",
            "description": "base64 encoding of the certificate used to secure database connections",
            "readOnly": true
          }
        },
        "required": [
          "certificate"
        ]
      },
      "online_migration": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the currently running migration.",
            "example": "77b28fc8-19ff-11eb-8c9c-c68e24557488"
          },
          "status": {
            "type": "string",
            "description": "The current status of the migration.",
            "example": "running"
          },
          "created_at": {
            "type": "string",
            "description": "The time the migration was initiated, in ISO 8601 format.",
            "example": "2020-10-29T15:57:38.000Z"
          }
        }
      },
      "source_database": {
        "type": "object",
        "properties": {
          "source": {
            "allOf": [
              {
                "$ref": "#/components/schemas/database_connection"
              }
            ]
          },
          "disable_ssl": {
            "type": "boolean",
            "description": "Enables SSL encryption when connecting to the source database.",
            "example": false
          }
        }
      },
      "database_cluster_resize": {
        "type": "object",
        "properties": {
          "size": {
            "type": "string",
            "example": "db-s-4vcpu-8gb",
            "description": "A slug identifier representing desired the size of the nodes in the database cluster."
          },
          "num_nodes": {
            "type": "integer",
            "format": "int32",
            "example": 3,
            "description": "The number of nodes in the database cluster. Valid values are are 1-3. In addition to the primary node, up to two standby nodes may be added for highly available configurations."
          }
        },
        "required": [
          "size",
          "num_nodes"
        ]
      },
      "firewall_rule": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "pattern": "^$|[0-9a-f]{8}\\b-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-\\b[0-9a-f]{12}",
            "example": "79f26d28-ea8a-41f2-8ad8-8cfcdd020095",
            "description": "A unique ID for the firewall rule itself."
          },
          "cluster_uuid": {
            "type": "string",
            "pattern": "^$|[0-9a-f]{8}\\b-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-\\b[0-9a-f]{12}",
            "example": "9cc10173-e9ea-4176-9dbc-a4cee4c4ff30",
            "description": "A unique ID for the database cluster to which the rule is applied."
          },
          "type": {
            "type": "string",
            "enum": [
              "droplet",
              "k8s",
              "ip_addr",
              "tag",
              "app"
            ],
            "example": "droplet",
            "description": "The type of resource that the firewall rule allows to access the database cluster."
          },
          "value": {
            "type": "string",
            "example": "ff2a6c52-5a44-4b63-b99c-0e98e7a63d61",
            "description": "The ID of the specific resource, the name of a tag applied to a group of resources, or the IP address that the firewall rule allows to access the database cluster."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "example": "2019-01-11T18:37:36.000Z",
            "description": "A time value given in ISO8601 combined date and time format that represents when the firewall rule was created.",
            "readOnly": true
          }
        },
        "required": [
          "type",
          "value"
        ]
      },
      "backup": {
        "type": "object",
        "properties": {
          "created_at": {
            "type": "string",
            "format": "date-time",
            "example": "2019-01-31T19:25:22.000Z",
            "description": "A time value given in ISO8601 combined date and time format at which the backup was created."
          },
          "size_gigabytes": {
            "type": "number",
            "example": 0.03364864,
            "description": "The size of the database backup in GBs."
          }
        },
        "required": [
          "created_at",
          "size_gigabytes"
        ]
      },
      "database_replica": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "read-nyc3-01",
            "description": "The name to give the read-only replicating"
          },
          "region": {
            "type": "string",
            "example": "nyc3",
            "description": "A slug identifier for the region where the read-only replica will be located. If excluded, the replica will be placed in the same region as the cluster."
          },
          "size": {
            "type": "string",
            "writeOnly": true,
            "example": "db-s-2vcpu-4gb",
            "description": "A slug identifier representing the size of the node for the read-only replica. The size of the replica must be at least as large as the node size for the database cluster from which it is replicating."
          },
          "status": {
            "type": "string",
            "enum": [
              "creating",
              "online",
              "resizing",
              "migrating",
              "forking"
            ],
            "example": "creating",
            "description": "A string representing the current status of the database cluster.",
            "readOnly": true
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "production"
            ],
            "description": "A flat array of tag names as strings to apply to the read-only replica after it is created. Tag names can either be existing or new tags."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "example": "2019-01-11T18:37:36.000Z",
            "description": "A time value given in ISO8601 combined date and time format that represents when the database cluster was created.",
            "readOnly": true
          },
          "private_network_uuid": {
            "type": "string",
            "example": "9423cbad-9211-442f-820b-ef6915e99b5f",
            "description": "A string specifying the UUID of the VPC to which the read-only replica will be assigned. If excluded, the replica will be assigned to your account's default VPC for the region."
          },
          "connection": {
            "allOf": [
              {
                "readOnly": true
              },
              {
                "$ref": "#/components/schemas/database_connection"
              }
            ]
          },
          "private_connection": {
            "allOf": [
              {
                "readOnly": true
              },
              {
                "$ref": "#/components/schemas/database_connection"
              }
            ]
          }
        },
        "required": [
          "name"
        ]
      },
      "database": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "alpha",
            "description": "The name of the database."
          }
        },
        "required": [
          "name"
        ]
      },
      "connection_pool": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "A unique name for the connection pool. Must be between 3 and 60 characters.",
            "example": "backend-pool"
          },
          "mode": {
            "type": "string",
            "description": "The PGBouncer transaction mode for the connection pool. The allowed values are session, transaction, and statement.",
            "example": "transaction"
          },
          "size": {
            "type": "integer",
            "format": "int32",
            "description": "The desired size of the PGBouncer connection pool. The maximum allowed size is determined by the size of the cluster's primary node. 25 backend server connections are allowed for every 1GB of RAM. Three are reserved for maintenance. For example, a primary node with 1 GB of RAM allows for a maximum of 22 backend server connections while one with 4 GB would allow for 97. Note that these are shared across all connection pools in a cluster.",
            "example": 10
          },
          "db": {
            "type": "string",
            "description": "The database for use with the connection pool.",
            "example": "defaultdb"
          },
          "user": {
            "type": "string",
            "description": "The name of the user for use with the connection pool.",
            "example": "doadmin"
          },
          "connection": {
            "allOf": [
              {
                "$ref": "#/components/schemas/database_connection"
              },
              {
                "readOnly": true
              }
            ]
          },
          "private_connection": {
            "allOf": [
              {
                "$ref": "#/components/schemas/database_connection"
              },
              {
                "readOnly": true
              }
            ]
          }
        },
        "required": [
          "name",
          "mode",
          "size",
          "db",
          "user"
        ]
      },
      "connection_pools": {
        "type": "object",
        "properties": {
          "pools": {
            "type": "array",
            "readOnly": true,
            "description": "An array of connection pool objects.",
            "items": {
              "$ref": "#/components/schemas/connection_pool"
            }
          }
        }
      },
      "eviction_policy": {
        "type": "object",
        "properties": {
          "eviction_policy": {
            "type": "string",
            "enum": [
              "noeviction",
              "allkeys_lru",
              "allkeys_random",
              "volatile_lru",
              "volatile_random",
              "volatile_ttl"
            ],
            "example": "noeviction",
            "description": "A string specifying the desired eviction policy for the Redis cluster."
          }
        },
        "required": [
          "eviction_policy"
        ]
      },
      "sql_mode": {
        "type": "object",
        "properties": {
          "sql_mode": {
            "type": "string",
            "example": "ANSI,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION,NO_ZERO_DATE,NO_ZERO_IN_DATE,STRICT_ALL_TABLES",
            "description": "A string specifying the configured SQL modes for the MySQL cluster."
          }
        },
        "required": [
          "sql_mode"
        ]
      },
      "domain": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the domain itself. This should follow the standard domain format of domain.TLD. For instance, `example.com` is a valid domain name.",
            "example": "example.com"
          },
          "ip_address": {
            "type": "string",
            "writeOnly": true,
            "description": "This optional attribute may contain an IP address. When provided, an A record will be automatically created pointing to the apex domain.",
            "example": "192.0.2.1"
          },
          "ttl": {
            "type": "integer",
            "readOnly": true,
            "nullable": true,
            "description": "This value is the time to live for the records on this domain, in seconds. This defines the time frame that clients can cache queried information before a refresh should be requested.",
            "example": 1800
          },
          "zone_file": {
            "type": "string",
            "readOnly": true,
            "nullable": true,
            "description": "This attribute contains the complete contents of the zone file for the selected domain. Individual domain record resources should be used to get more granular control over records. However, this attribute can also be used to get information about the SOA record, which is created automatically and is not accessible as an individual record resource.",
            "example": "$ORIGIN example.com.\n$TTL 1800\nexample.com. IN SOA ns1.digitalocean.com. hostmaster.example.com. 1415982609 10800 3600 604800 1800\nexample.com. 1800 IN NS ns1.digitalocean.com.\nexample.com. 1800 IN NS ns2.digitalocean.com.\nexample.com. 1800 IN NS ns3.digitalocean.com.\nexample.com. 1800 IN A 1.2.3.4\n"
          }
        }
      },
      "domain_record": {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "description": "A unique identifier for each domain record.",
            "example": 28448429,
            "readOnly": true
          },
          "type": {
            "type": "string",
            "description": "The type of the DNS record. For example: A, CNAME, TXT, ...",
            "example": "NS"
          },
          "name": {
            "type": "string",
            "description": "The host name, alias, or service being defined by the record.",
            "example": "@"
          },
          "data": {
            "type": "string",
            "description": "Variable data depending on record type. For example, the \"data\" value for an A record would be the IPv4 address to which the domain will be mapped. For a CAA record, it would contain the domain name of the CA being granted permission to issue certificates.",
            "example": "ns1.digitalocean.com"
          },
          "priority": {
            "type": "integer",
            "description": "The priority for SRV and MX records.",
            "nullable": true,
            "example": null
          },
          "port": {
            "type": "integer",
            "description": "The port for SRV records.",
            "nullable": true,
            "example": null
          },
          "ttl": {
            "type": "integer",
            "description": "This value is the time to live for the record, in seconds. This defines the time frame that clients can cache queried information before a refresh should be requested.",
            "example": 1800
          },
          "weight": {
            "type": "integer",
            "description": "The weight for SRV records.",
            "nullable": true,
            "example": null
          },
          "flags": {
            "type": "integer",
            "description": "An unsigned integer between 0-255 used for CAA records.",
            "nullable": true,
            "example": null
          },
          "tag": {
            "type": "string",
            "description": "The parameter tag for CAA records. Valid values are \"issue\", \"issuewild\", or \"iodef\"",
            "nullable": true,
            "example": null
          }
        }
      },
      "domain_record_a": {
        "allOf": [
          {
            "$ref": "#/components/schemas/domain_record"
          },
          {
            "required": [
              "type",
              "name",
              "data"
            ]
          }
        ]
      },
      "domain_record_aaaa": {
        "allOf": [
          {
            "$ref": "#/components/schemas/domain_record"
          },
          {
            "required": [
              "type",
              "name",
              "data"
            ]
          }
        ]
      },
      "domain_record_caa": {
        "allOf": [
          {
            "$ref": "#/components/schemas/domain_record"
          },
          {
            "required": [
              "type",
              "name",
              "data",
              "flags",
              "tag"
            ]
          }
        ]
      },
      "domain_record_cname": {
        "allOf": [
          {
            "$ref": "#/components/schemas/domain_record"
          },
          {
            "required": [
              "type",
              "name",
              "data"
            ]
          }
        ]
      },
      "domain_record_mx": {
        "allOf": [
          {
            "$ref": "#/components/schemas/domain_record"
          },
          {
            "required": [
              "type",
              "data",
              "priority"
            ]
          }
        ]
      },
      "domain_record_ns": {
        "allOf": [
          {
            "$ref": "#/components/schemas/domain_record"
          },
          {
            "required": [
              "type",
              "name",
              "data",
              "flags",
              "tag"
            ]
          }
        ]
      },
      "domain_record_soa": {
        "allOf": [
          {
            "$ref": "#/components/schemas/domain_record"
          },
          {
            "required": [
              "type",
              "ttl"
            ]
          }
        ]
      },
      "domain_record_srv": {
        "allOf": [
          {
            "$ref": "#/components/schemas/domain_record"
          },
          {
            "required": [
              "type",
              "name",
              "data",
              "priority",
              "port",
              "flags",
              "tag"
            ]
          }
        ]
      },
      "domain_record_txt": {
        "allOf": [
          {
            "$ref": "#/components/schemas/domain_record"
          },
          {
            "required": [
              "type",
              "name",
              "data",
              "flags",
              "tag"
            ]
          }
        ]
      },
      "kernel": {
        "type": "object",
        "description": "**Note**: All Droplets created after March 2017 use internal kernels by default.\nThese Droplets will have this attribute set to `null`.\n\nThe current [kernel](https://www.digitalocean.com/docs/droplets/how-to/kernel/)\nfor Droplets with externally managed kernels. This will initially be set to\nthe kernel of the base image when the Droplet is created.\n",
        "nullable": true,
        "deprecated": true,
        "properties": {
          "id": {
            "type": "integer",
            "example": 7515,
            "description": "A unique number used to identify and reference a specific kernel."
          },
          "name": {
            "type": "string",
            "example": "DigitalOcean GrubLoader v0.2 (20160714)",
            "description": "The display name of the kernel. This is shown in the web UI and is generally a descriptive title for the kernel in question."
          },
          "version": {
            "type": "string",
            "example": "2016.07.13-DigitalOcean_loader_Ubuntu",
            "description": "A standard kernel version string representing the version, patch, and release information."
          }
        }
      },
      "image_name": {
        "type": "string",
        "description": "The display name that has been given to an image.  This is what is shown in the control panel and is generally a descriptive title for the image in question.",
        "example": "Nifty New Snapshot"
      },
      "distribution": {
        "type": "string",
        "description": "The name of a custom image's distribution. Currently, the valid values are  \"Arch Linux\", \"CentOS\", \"CoreOS\", \"Debian\", \"Fedora\", \"Fedora Atomic\",  \"FreeBSD\", \"Gentoo\", \"openSUSE\", \"RancherOS\", \"Ubuntu\", and \"Unknown\".  Any other value will be accepted but ignored, and \"Unknown\" will be used in its place.",
        "enum": [
          "Arch Linux",
          "CentOS",
          "CoreOS",
          "Debian",
          "Fedora",
          "Fedora Atomic",
          "FreeBSD",
          "Gentoo",
          "openSUSE",
          "RancherOS",
          "Ubuntu",
          "Unknown"
        ],
        "example": "Ubuntu"
      },
      "region_slug": {
        "type": "string",
        "description": "The slug identifier for the region where the resource will initially be  available.",
        "enum": [
          "ams1",
          "ams2",
          "ams3",
          "blr1",
          "fra1",
          "lon1",
          "nyc1",
          "nyc2",
          "nyc3",
          "sfo1",
          "sfo2",
          "sfo3",
          "sgp1",
          "tor1"
        ],
        "example": "nyc3"
      },
      "regions_array": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/region_slug"
        },
        "description": "This attribute is an array of the regions that the image is available in. The regions are represented by their identifying slug values.",
        "example": [
          "nyc1",
          "nyc2"
        ]
      },
      "image_description": {
        "type": "string",
        "description": "An optional free-form text field to describe an image.",
        "example": " "
      },
      "tags_array": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "nullable": true,
        "description": "A flat array of tag names as strings to be applied to the resource. Tag names may be for either existing or new tags.",
        "example": [
          "base-image",
          "prod"
        ]
      },
      "image": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "A unique number that can be used to identify and reference a specific image.",
            "example": 7555620,
            "readOnly": true
          },
          "name": {
            "$ref": "#/components/schemas/image_name"
          },
          "type": {
            "type": "string",
            "description": "Describes the kind of image. It may be one of \"snapshot\", \"backup\", or \"custom\". This specifies whether an image is a user-generated Droplet snapshot, automatically created Droplet backup, or a user-provided virtual machine image.",
            "enum": [
              "base",
              "snapshot",
              "backup",
              "custom"
            ],
            "example": "snapshot"
          },
          "distribution": {
            "$ref": "#/components/schemas/distribution"
          },
          "slug": {
            "type": "string",
            "nullable": true,
            "description": "A uniquely identifying string that is associated with each of the DigitalOcean-provided public images. These can be used to reference a public image as an alternative to the numeric id.",
            "example": "nifty1"
          },
          "public": {
            "type": "boolean",
            "description": "This is a boolean value that indicates whether the image in question is public or not. An image that is public is available to all accounts. A non-public image is only accessible from your account.",
            "example": true
          },
          "regions": {
            "$ref": "#/components/schemas/regions_array"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "A time value given in ISO8601 combined date and time format that represents when the image was created.",
            "example": "2020-05-04T22:23:02.000Z"
          },
          "min_disk_size": {
            "type": "integer",
            "description": "The minimum disk size in GB required for a Droplet to use this image.",
            "example": 20,
            "nullable": true,
            "minimum": 0
          },
          "size_gigabytes": {
            "type": "number",
            "format": "float",
            "nullable": true,
            "description": "The size of the image in gigabytes.",
            "example": 2.34
          },
          "description": {
            "$ref": "#/components/schemas/image_description"
          },
          "tags": {
            "$ref": "#/components/schemas/tags_array"
          },
          "status": {
            "type": "string",
            "description": "A status string indicating the state of a custom image. This may be `NEW`, `available`, `pending`, `deleted`, or `retired`.",
            "enum": [
              "NEW",
              "new",
              "available",
              "pending",
              "deleted",
              "retired"
            ],
            "example": "NEW"
          },
          "error_message": {
            "type": "string",
            "description": "A string containing information about errors that may occur when importing a custom image.",
            "example": " "
          }
        }
      },
      "size": {
        "type": "object",
        "properties": {
          "slug": {
            "type": "string",
            "example": "s-1vcpu-1gb",
            "description": "A human-readable string that is used to uniquely identify each size."
          },
          "memory": {
            "type": "integer",
            "multipleOf": 8,
            "minimum": 8,
            "example": 1024,
            "description": "The amount of RAM allocated to Droplets created of this size. The value is represented in megabytes."
          },
          "vcpus": {
            "type": "integer",
            "example": 1,
            "description": "The integer of number CPUs allocated to Droplets of this size."
          },
          "disk": {
            "type": "integer",
            "example": 25,
            "description": "The amount of disk space set aside for Droplets of this size. The value is represented in gigabytes."
          },
          "transfer": {
            "type": "number",
            "format": "float",
            "example": 1,
            "description": "The amount of transfer bandwidth that is available for Droplets created in this size. This only counts traffic on the public interface. The value is given in terabytes."
          },
          "price_monthly": {
            "type": "number",
            "format": "float",
            "example": 5,
            "description": "This attribute describes the monthly cost of this Droplet size if the Droplet is kept for an entire month. The value is measured in US dollars."
          },
          "price_hourly": {
            "type": "number",
            "format": "float",
            "example": 0.00743999984115362,
            "description": "This describes the price of the Droplet size as measured hourly. The value is measured in US dollars."
          },
          "regions": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "ams2",
              "ams3",
              "blr1",
              "fra1",
              "lon1",
              "nyc1",
              "nyc2",
              "nyc3",
              "sfo1",
              "sfo2",
              "sfo3",
              "sgp1",
              "tor1"
            ],
            "description": "An array containing the region slugs where this size is available for Droplet creates."
          },
          "available": {
            "type": "boolean",
            "default": true,
            "example": true,
            "description": "This is a boolean value that represents whether new Droplets can be created with this size."
          },
          "description": {
            "type": "string",
            "example": "Basic",
            "description": "A string describing the class of Droplets created from this size. For example: Basic, General Purpose, CPU-Optimized, Memory-Optimized, or Storage-Optimized."
          }
        },
        "required": [
          "available",
          "disk",
          "memory",
          "price_hourly",
          "price_monthly",
          "regions",
          "slug",
          "transfer",
          "vcpus",
          "description"
        ]
      },
      "network_v4": {
        "type": "object",
        "properties": {
          "ip_address": {
            "type": "string",
            "format": "ipv4",
            "example": "104.236.32.182",
            "description": "The IP address of the IPv4 network interface."
          },
          "netmask": {
            "type": "string",
            "format": "ipv4",
            "example": "255.255.192.0",
            "description": "The netmask of the IPv4 network interface."
          },
          "gateway": {
            "type": "string",
            "example": "104.236.0.1",
            "description": "The gateway of the specified IPv4 network interface.\n\nFor private interfaces, a gateway is not provided. This is denoted by\nreturning `nil` as its value.\n"
          },
          "type": {
            "type": "string",
            "enum": [
              "public",
              "private"
            ],
            "example": "public",
            "description": "The type of the IPv4 network interface."
          }
        }
      },
      "network_v6": {
        "type": "object",
        "properties": {
          "ip_address": {
            "type": "string",
            "format": "ipv6",
            "example": "2604:a880:0:1010::18a:a001",
            "description": "The IP address of the IPv6 network interface."
          },
          "netmask": {
            "type": "integer",
            "example": 64,
            "description": "The netmask of the IPv6 network interface."
          },
          "gateway": {
            "type": "string",
            "format": "ipv6",
            "example": "2604:a880:0:1010::1",
            "description": "The gateway of the specified IPv6 network interface."
          },
          "type": {
            "type": "string",
            "enum": [
              "public"
            ],
            "example": "public",
            "description": "The type of the IPv6 network interface.\n\n**Note**: IPv6 private  networking is not currently supported.\n"
          }
        }
      },
      "droplet": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "example": 3164444,
            "description": "A unique identifier for each Droplet instance. This is automatically generated upon Droplet creation."
          },
          "name": {
            "type": "string",
            "example": "example.com",
            "description": "The human-readable name set for the Droplet instance."
          },
          "memory": {
            "type": "integer",
            "multipleOf": 8,
            "example": 1024,
            "description": "Memory of the Droplet in megabytes."
          },
          "vcpus": {
            "type": "integer",
            "example": 1,
            "description": "The number of virtual CPUs."
          },
          "disk": {
            "type": "integer",
            "example": 25,
            "description": "The size of the Droplet's disk in gigabytes."
          },
          "locked": {
            "type": "boolean",
            "example": false,
            "description": "A boolean value indicating whether the Droplet has been locked, preventing actions by users."
          },
          "status": {
            "type": "string",
            "enum": [
              "new",
              "active",
              "off",
              "archive"
            ],
            "example": "active",
            "description": "A status string indicating the state of the Droplet instance. This may be \"new\", \"active\", \"off\", or \"archive\"."
          },
          "kernel": {
            "$ref": "#/components/schemas/kernel"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "example": "2020-07-21T18:37:44Z",
            "description": "A time value given in ISO8601 combined date and time format that represents when the Droplet was created."
          },
          "features": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "backups",
              "private_networking",
              "ipv6"
            ],
            "description": "An array of features enabled on this Droplet."
          },
          "backup_ids": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "example": [
              53893572
            ],
            "description": "An array of backup IDs of any backups that have been taken of the Droplet instance.  Droplet backups are enabled at the time of the instance creation."
          },
          "next_backup_window": {
            "type": "object",
            "description": "The details of the Droplet's backups feature, if backups are configured for the Droplet. This object contains keys for the start and end times of the window during which the backup will start.",
            "nullable": true,
            "properties": {
              "start": {
                "type": "string",
                "format": "date-time",
                "example": "2019-12-04T00:00:00Z",
                "description": "A time value given in ISO8601 combined date and time format specifying the start of the Droplet's backup window."
              },
              "end": {
                "type": "string",
                "format": "date-time",
                "example": "2019-12-04T23:00:00Z",
                "description": "A time value given in ISO8601 combined date and time format specifying the end of the Droplet's backup window."
              }
            }
          },
          "snapshot_ids": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "example": [
              67512819
            ],
            "description": "An array of snapshot IDs of any snapshots created from the Droplet instance."
          },
          "image": {
            "$ref": "#/components/schemas/image"
          },
          "volume_ids": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "506f78a4-e098-11e5-ad9f-000f53306ae1"
            ],
            "description": "A flat array including the unique identifier for each Block Storage volume attached to the Droplet."
          },
          "size": {
            "$ref": "#/components/schemas/size"
          },
          "size_slug": {
            "type": "string",
            "example": "s-1vcpu-1gb",
            "description": "The unique slug identifier for the size of this Droplet."
          },
          "networks": {
            "type": "object",
            "description": "The details of the network that are configured for the Droplet instance.  This is an object that contains keys for IPv4 and IPv6.  The value of each of these is an array that contains objects describing an individual IP resource allocated to the Droplet.  These will define attributes like the IP address, netmask, and gateway of the specific network depending on the type of network it is.",
            "properties": {
              "v4": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/network_v4"
                }
              },
              "v6": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/network_v6"
                }
              }
            }
          },
          "region": {
            "$ref": "#/components/schemas/region"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "web",
              "env:prod"
            ],
            "description": "An array of Tags the Droplet has been tagged with."
          },
          "vpc_uuid": {
            "type": "string",
            "example": "760e09ef-dc84-11e8-981e-3cfdfeaae000",
            "description": "A string specifying the UUID of the VPC to which the Droplet is assigned."
          }
        },
        "required": [
          "id",
          "name",
          "memory",
          "vcpus",
          "disk",
          "locked",
          "status",
          "kernel",
          "created_at",
          "features",
          "backup_ids",
          "next_backup_window",
          "snapshot_ids",
          "image",
          "volume_ids",
          "size",
          "size_slug",
          "networks",
          "region",
          "tags"
        ]
      },
      "droplet_create": {
        "type": "object",
        "properties": {
          "region": {
            "type": "string",
            "example": "nyc3",
            "description": "The slug identifier for the region that you wish to deploy the Droplet in."
          },
          "size": {
            "type": "string",
            "example": "s-1vcpu-1gb",
            "description": "The slug identifier for the size that you wish to select for this Droplet."
          },
          "image": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "integer"
              }
            ],
            "example": "ubuntu-20-04-x64",
            "description": "The image ID of a public or private image or the slug identifier for a public image. This image will be the base image for your Droplet."
          },
          "ssh_keys": {
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "example": [
              289794,
              "3b:16:e4:bf:8b:00:8b:b8:59:8c:a9:d3:f0:19:fa:45"
            ],
            "default": [],
            "description": "An array containing the IDs or fingerprints of the SSH keys that you wish to embed in the Droplet's root account upon creation."
          },
          "backups": {
            "type": "boolean",
            "example": true,
            "default": false,
            "description": "A boolean indicating whether automated backups should be enabled for the Droplet."
          },
          "ipv6": {
            "type": "boolean",
            "example": true,
            "default": false,
            "description": "A boolean indicating whether to enable IPv6 on the Droplet."
          },
          "monitoring": {
            "type": "boolean",
            "example": true,
            "default": false,
            "description": "A boolean indicating whether to install the DigitalOcean agent for monitoring."
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true,
            "example": [
              "env:prod",
              "web"
            ],
            "default": [],
            "description": "A flat array of tag names as strings to apply to the Droplet after it is created. Tag names can either be existing or new tags."
          },
          "user_data": {
            "type": "string",
            "example": "runcmd:\n  - touch /test.txt\n",
            "description": "A string containing 'user data' which may be used to configure the Droplet on first boot, often a 'cloud-config' file or Bash script. It must be plain text and may not exceed 64 KiB in size."
          },
          "private_networking": {
            "type": "boolean",
            "example": true,
            "default": false,
            "deprecated": true,
            "description": "This parameter has been deprecated. Use `vpc_uuid` instead to specify a VPC network for the Droplet. If no `vpc_uuid` is provided, the Droplet will be placed in your account's default VPC for the region."
          },
          "vpc_uuid": {
            "type": "string",
            "example": "760e09ef-dc84-11e8-981e-3cfdfeaae000",
            "description": "A string specifying the UUID of the VPC to which the Droplet will be assigned. If excluded, the Droplet will be assigned to your account's default VPC for the region."
          },
          "with_droplet_agent": {
            "type": "boolean",
            "example": true,
            "description": "A boolean indicating whether to install the DigitalOcean agent used for providing access to the Droplet web console in the control panel. By default, the agent is installed on new Droplets but installation errors (i.e. OS not supported) are ignored. To prevent it from being installed, set to `false`. To make installation errors fatal, explicitly set it to `true`."
          }
        },
        "required": [
          "region",
          "size",
          "image"
        ]
      },
      "droplet_single_create": {
        "title": "Single Droplet Request",
        "allOf": [
          {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "example": "example.com",
                "description": "The human-readable string you wish to use when displaying the Droplet name. The name, if set to a domain name managed in the DigitalOcean DNS management system, will configure a PTR record for the Droplet. The name set during creation will also determine the hostname for the Droplet in its internal configuration."
              }
            },
            "required": [
              "name"
            ]
          },
          {
            "$ref": "#/components/schemas/droplet_create"
          }
        ]
      },
      "droplet_multi_create": {
        "title": "Multiple Droplet Request",
        "allOf": [
          {
            "type": "object",
            "properties": {
              "names": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "example": [
                  "sub-01.example.com",
                  "sub-02.example.com"
                ],
                "description": "An array of human human-readable strings you wish to use when displaying the Droplet name. Each name, if set to a domain name managed in the DigitalOcean DNS management system, will configure a PTR record for the Droplet. Each name set during creation will also determine the hostname for the Droplet in its internal configuration."
              }
            },
            "required": [
              "names"
            ]
          },
          {
            "$ref": "#/components/schemas/droplet_create"
          }
        ]
      },
      "action_link": {
        "type": "object",
        "description": "The linked actions can be used to check the status of a Droplet's create event.",
        "properties": {
          "id": {
            "type": "integer",
            "example": 7515,
            "description": "A unique numeric ID that can be used to identify and reference an action."
          },
          "rel": {
            "type": "string",
            "example": "create",
            "description": "A string specifying the type of the related action."
          },
          "href": {
            "type": "string",
            "format": "uri",
            "example": "https://api.digitalocean.com/v2/actions/7515",
            "description": "A URL that can be used to access the action."
          }
        }
      },
      "snapshot_base": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "web-01-1595954862243",
            "description": "A human-readable name for the snapshot."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "example": "2020-07-28T16:47:44Z",
            "description": "A time value given in ISO8601 combined date and time format that represents when the snapshot was created."
          },
          "regions": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "nyc3",
              "sfo3"
            ],
            "description": "An array of the regions that the snapshot is available in. The regions are represented by their identifying slug values."
          },
          "min_disk_size": {
            "type": "integer",
            "example": 25,
            "description": "The minimum size in GB required for a volume or Droplet to use this snapshot."
          },
          "size_gigabytes": {
            "type": "number",
            "format": "float",
            "example": 2.34,
            "description": "The billable size of the snapshot in gigabytes."
          }
        },
        "required": [
          "name",
          "created_at",
          "regions",
          "min_disk_size",
          "size_gigabytes"
        ]
      },
      "droplet_snapshot": {
        "allOf": [
          {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "example": 6372321,
                "description": "The unique identifier for the snapshot or backup."
              }
            },
            "required": [
              "id"
            ]
          },
          {
            "$ref": "#/components/schemas/snapshot_base"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "snapshot",
                  "backup"
                ],
                "example": "snapshot",
                "description": "Describes the kind of image. It may be one of `snapshot` or `backup`. This specifies whether an image is a user-generated Droplet snapshot or automatically created Droplet backup."
              }
            },
            "required": [
              "type"
            ]
          }
        ]
      },
      "droplet_action_type": {
        "required": [
          "type"
        ],
        "type": "object",
        "description": "Specifies the action that will be taken on the Droplet.",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "enable_backups",
              "disable_backups",
              "reboot",
              "power_cycle",
              "shutdown",
              "power_off",
              "power_on",
              "restore",
              "password_reset",
              "resize",
              "rebuild",
              "rename",
              "change_kernel",
              "enable_ipv6",
              "snapshot"
            ],
            "example": "reboot",
            "description": "The type of action to initiate for the Droplet."
          }
        }
      },
      "droplet_action_restore": {
        "allOf": [
          {
            "$ref": "#/components/schemas/droplet_action_type"
          },
          {
            "type": "object",
            "properties": {
              "image": {
                "type": "integer",
                "example": 12389723,
                "description": "The ID of a backup of the current Droplet instance to restore from."
              }
            }
          }
        ]
      },
      "droplet_action_resize": {
        "allOf": [
          {
            "$ref": "#/components/schemas/droplet_action_type"
          },
          {
            "type": "object",
            "properties": {
              "disk": {
                "type": "boolean",
                "example": true,
                "description": "When `true`, the Droplet's disk will be resized in addition to its RAM and CPU. This is a permanent change and cannot be reversed as a Droplet's disk size cannot be decreased."
              },
              "size": {
                "type": "string",
                "example": "s-2vcpu-2gb",
                "description": "The slug identifier for the size to which you wish to resize the Droplet."
              }
            }
          }
        ]
      },
      "droplet_action_rebuild": {
        "allOf": [
          {
            "$ref": "#/components/schemas/droplet_action_type"
          },
          {
            "type": "object",
            "properties": {
              "image": {
                "oneOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "integer"
                  }
                ],
                "example": "ubuntu-20-04-x64",
                "description": "The image ID of a public or private image or the slug identifier for a public image. The Droplet will be rebuilt using this image as its base."
              }
            }
          }
        ]
      },
      "droplet_action_rename": {
        "allOf": [
          {
            "$ref": "#/components/schemas/droplet_action_type"
          },
          {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "example": "nifty-new-name",
                "description": "The new name for the Droplet."
              }
            }
          }
        ]
      },
      "droplet_action_change_kernel": {
        "allOf": [
          {
            "$ref": "#/components/schemas/droplet_action_type"
          },
          {
            "type": "object",
            "properties": {
              "kernel": {
                "type": "integer",
                "example": 12389723,
                "description": "A unique number used to identify and reference a specific kernel."
              }
            }
          }
        ]
      },
      "droplet_action_snapshot": {
        "allOf": [
          {
            "$ref": "#/components/schemas/droplet_action_type"
          },
          {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "example": "Nifty New Snapshot",
                "description": "The name to give the new snapshot of the Droplet."
              }
            }
          }
        ]
      },
      "firewall_rule_base": {
        "type": "object",
        "properties": {
          "protocol": {
            "type": "string",
            "enum": [
              "tcp",
              "udp",
              "icmp"
            ],
            "description": "The type of traffic to be allowed. This may be one of `tcp`, `udp`, or `icmp`.",
            "example": "tcp"
          },
          "ports": {
            "type": "string",
            "description": "The ports on which traffic will be allowed specified as a string containing a single port, a range (e.g. \"8000-9000\"), or \"0\" when all ports are open for a protocol. For ICMP rules this parameter will always return \"0\".",
            "example": "8000"
          }
        },
        "required": [
          "protocol",
          "ports"
        ]
      },
      "firewall_rule_target": {
        "type": "object",
        "properties": {
          "addresses": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "An array of strings containing the IPv4 addresses, IPv6 addresses, IPv4 CIDRs, and/or IPv6 CIDRs to which the firewall will allow traffic.",
            "example": [
              "1.2.3.4",
              "18.0.0.0/8"
            ]
          },
          "droplet_ids": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "An array containing the IDs of the Droplets to which the firewall will allow traffic.",
            "example": [
              8043964
            ]
          },
          "load_balancer_uids": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "An array containing the IDs of the load balancers to which the firewall will allow traffic.",
            "example": [
              "4de7ac8b-495b-4884-9a69-1050c6793cd6"
            ]
          },
          "kubernetes_ids": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "An array containing the IDs of the Kubernetes clusters to which the firewall will allow traffic.",
            "example": [
              "41b74c5d-9bd0-5555-5555-a57c495b81a3"
            ]
          },
          "tags": {
            "allOf": [
              {
                "$ref": "#/components/schemas/tags_array"
              },
              {
                "description": "An array containing the names of Tags corresponding to groups of Droplets to which the firewall will allow traffic.",
                "example": [
                  "frontend"
                ]
              }
            ]
          }
        }
      },
      "firewall_rules": {
        "type": "object",
        "properties": {
          "inbound_rules": {
            "nullable": true,
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/firewall_rule_base"
                },
                {
                  "properties": {
                    "sources": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/firewall_rule_target"
                        },
                        {
                          "description": "An object specifying locations from which inbound traffic will be accepted."
                        }
                      ]
                    }
                  },
                  "required": [
                    "sources"
                  ]
                }
              ]
            }
          },
          "outbound_rules": {
            "nullable": true,
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/firewall_rule_base"
                },
                {
                  "properties": {
                    "destinations": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/firewall_rule_target"
                        },
                        {
                          "description": "An object specifying locations to which outbound traffic that will be allowed."
                        }
                      ]
                    }
                  },
                  "required": [
                    "destinations"
                  ]
                }
              ]
            }
          }
        }
      },
      "firewall": {
        "type": "object",
        "allOf": [
          {
            "properties": {
              "id": {
                "type": "string",
                "description": "A unique ID that can be used to identify and reference a firewall.",
                "readOnly": true,
                "example": "bb4b2611-3d72-467b-8602-280330ecd65c"
              },
              "status": {
                "type": "string",
                "description": "A status string indicating the current state of the firewall. This can be \"waiting\", \"succeeded\", or \"failed\".",
                "enum": [
                  "waiting",
                  "succeeded",
                  "failed"
                ],
                "readOnly": true,
                "example": "waiting"
              },
              "created_at": {
                "type": "string",
                "format": "date-time",
                "description": "A time value given in ISO8601 combined date and time format that represents when the firewall was created.",
                "readOnly": true,
                "example": "2020-05-23T21:24:00Z"
              },
              "pending_changes": {
                "type": "array",
                "description": "An array of objects each containing the fields \"droplet_id\", \"removing\", and \"status\". It is provided to detail exactly which Droplets are having their security policies updated. When empty, all changes have been successfully applied.",
                "items": {
                  "type": "object",
                  "properties": {
                    "droplet_id": {
                      "type": "integer",
                      "example": 8043964
                    },
                    "removing": {
                      "type": "boolean",
                      "example": false
                    },
                    "status": {
                      "type": "string",
                      "example": "waiting"
                    }
                  }
                },
                "readOnly": true,
                "example": [
                  {
                    "droplet_id": 8043964,
                    "removing": false,
                    "status": "waiting"
                  }
                ]
              },
              "name": {
                "type": "string",
                "description": "A human-readable name for a firewall. The name must begin with an alphanumeric character. Subsequent characters must either be alphanumeric characters, a period (.), or a dash (-).",
                "pattern": "^[a-zA-Z0-9][a-zA-Z0-9\\.-]+$",
                "example": "firewall"
              },
              "droplet_ids": {
                "type": "array",
                "description": "An array containing the IDs of the Droplets assigned to the firewall.",
                "nullable": true,
                "items": {
                  "type": "integer"
                },
                "example": [
                  8043964
                ]
              },
              "tags": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/tags_array"
                  },
                  {
                    "description": "An array containing the names of the Tags assigned to the firewall.",
                    "example": "gateway"
                  }
                ]
              }
            }
          },
          {
            "$ref": "#/components/schemas/firewall_rules"
          }
        ]
      },
      "associated_resource": {
        "type": "object",
        "description": "An objects containing information about a resource associated with a Droplet.",
        "properties": {
          "id": {
            "type": "string",
            "example": "61486916",
            "description": "The unique identifier for the resource associated with the Droplet."
          },
          "name": {
            "type": "string",
            "example": "ubuntu-s-1vcpu-1gb-nyc1-01-1585758823330",
            "description": "The name of the resource associated with the Droplet."
          },
          "cost": {
            "type": "string",
            "example": "0.05",
            "description": "The cost of the resource in USD per month if the resource is retained after the Droplet is destroyed."
          }
        }
      },
      "destroyed_associated_resource": {
        "type": "object",
        "description": "An object containing information about a resource scheduled for deletion.",
        "properties": {
          "id": {
            "type": "string",
            "example": "61486916",
            "description": "The unique identifier for the resource scheduled for deletion."
          },
          "name": {
            "type": "string",
            "example": "ubuntu-s-1vcpu-1gb-nyc1-01-1585758823330",
            "description": "The name of the resource scheduled for deletion."
          },
          "destroyed_at": {
            "type": "string",
            "format": "date-time",
            "example": "2020-04-01T18:11:49.000Z",
            "description": "A time value given in ISO8601 combined date and time format indicating when the resource was destroyed if the request was successful."
          },
          "error_message": {
            "type": "string",
            "example": " ",
            "description": "A string indicating that the resource was not successfully destroyed and providing additional information."
          }
        }
      },
      "associated_resource_status": {
        "type": "object",
        "description": "An objects containing information about a resources scheduled for deletion.",
        "properties": {
          "droplet": {
            "$ref": "#/components/schemas/destroyed_associated_resource"
          },
          "resources": {
            "type": "object",
            "description": "An object containing additional information about resource related to a Droplet requested to be destroyed.",
            "properties": {
              "snapshots": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/destroyed_associated_resource"
                }
              },
              "volumes": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/destroyed_associated_resource"
                }
              },
              "volume_snapshots": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/destroyed_associated_resource"
                }
              }
            }
          },
          "completed_at": {
            "type": "string",
            "format": "date-time",
            "example": "2020-04-01T18:11:49.000Z",
            "description": "A time value given in ISO8601 combined date and time format indicating when the requested action was completed."
          },
          "failures": {
            "type": "integer",
            "example": 0,
            "description": "A count of the associated resources that failed to be destroyed, if any."
          }
        }
      },
      "floating_ip": {
        "type": "object",
        "properties": {
          "ip": {
            "type": "string",
            "format": "ipv4",
            "example": "45.55.96.47",
            "description": "The public IP address of the floating IP. It also serves as its identifier."
          },
          "region": {
            "allOf": [
              {
                "$ref": "#/components/schemas/region"
              },
              {
                "type": "object",
                "description": "The region that the floating IP is reserved to. When you query a floating IP, the entire region object will be returned."
              }
            ]
          },
          "droplet": {
            "description": "The Droplet that the floating IP has been assigned to. When you query a floating IP, if it is assigned to a Droplet, the entire Droplet object will be returned. If it is not assigned, the value will be null.",
            "anyOf": [
              {
                "title": "null",
                "nullable": true,
                "description": "If the floating IP is not assigned to a Droplet, the value will be null."
              },
              {
                "$ref": "#/components/schemas/droplet"
              }
            ],
            "example": null
          },
          "locked": {
            "type": "boolean",
            "example": true,
            "description": "A boolean value indicating whether or not the floating IP has pending actions preventing new ones from being submitted."
          }
        }
      },
      "floating_ip_create": {
        "oneOf": [
          {
            "title": "Assign to Droplet",
            "type": "object",
            "properties": {
              "droplet_id": {
                "type": "integer",
                "example": 2457247,
                "description": "The ID of the Droplet that the floating IP will be assigned to."
              }
            },
            "required": [
              "droplet_id"
            ]
          },
          {
            "title": "Reserve to Region",
            "type": "object",
            "properties": {
              "region": {
                "type": "string",
                "example": "nyc3",
                "description": "The slug identifier for the region the floating IP will be reserved to."
              }
            },
            "required": [
              "region"
            ]
          }
        ]
      },
      "floating_ip_action_type": {
        "type": "object",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "assign",
              "unassign"
            ],
            "description": "The type of action to initiate for the floating IP."
          }
        },
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "assign": "#/components/schemas/floating_ip_action_assign",
            "unassign": "#/components/schemas/floating_ip_action_unassign"
          }
        }
      },
      "floating_ip_action_assign": {
        "allOf": [
          {
            "$ref": "#/components/schemas/floating_ip_action_type"
          },
          {
            "type": "object",
            "required": [
              "type",
              "droplet_id"
            ],
            "properties": {
              "droplet_id": {
                "type": "integer",
                "example": 758604968,
                "description": "The ID of the Droplet that the floating IP will be assigned to."
              }
            }
          }
        ]
      },
      "floating_ip_action_unassign": {
        "allOf": [
          {
            "$ref": "#/components/schemas/floating_ip_action_type"
          },
          {
            "type": "object",
            "required": [
              "type"
            ]
          }
        ]
      },
      "image_update": {
        "type": "object",
        "properties": {
          "name": {
            "$ref": "#/components/schemas/image_name"
          },
          "distribution": {
            "$ref": "#/components/schemas/distribution"
          },
          "description": {
            "$ref": "#/components/schemas/image_description"
          }
        }
      },
      "image_new_custom": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/image_update"
          },
          {
            "properties": {
              "url": {
                "type": "string",
                "description": "A URL from which the custom Linux virtual machine image may be retrieved.  The image it points to must be in the raw, qcow2, vhdx, vdi, or vmdk format.  It may be compressed using gzip or bzip2 and must be smaller than 100 GB after being decompressed.",
                "example": "http://cloud-images.ubuntu.com/minimal/releases/bionic/release/ubuntu-18.04-minimal-cloudimg-amd64.img"
              },
              "region": {
                "$ref": "#/components/schemas/region_slug"
              },
              "tags": {
                "$ref": "#/components/schemas/tags_array"
              }
            }
          }
        ],
        "required": [
          "name",
          "url",
          "region"
        ],
        "example": {
          "name": "ubuntu-18.04-minimal",
          "url": "http://cloud-images.ubuntu.com/minimal/releases/bionic/release/ubuntu-18.04-minimal-cloudimg-amd64.img",
          "distribution": "Ubuntu",
          "region": "nyc3",
          "description": "Cloud-optimized image w/ small footprint",
          "tags": [
            "base-image",
            "prod"
          ]
        }
      },
      "image_action_base": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The action to be taken on the image. Can be either `convert` or `transfer`.",
            "enum": [
              "convert",
              "transfer"
            ],
            "example": "convert"
          }
        },
        "required": [
          "type"
        ]
      },
      "image_action_transfer": {
        "allOf": [
          {
            "$ref": "#/components/schemas/image_action_base"
          },
          {
            "type": "object",
            "properties": {
              "region": {
                "$ref": "#/components/schemas/region_slug"
              }
            },
            "required": [
              "type",
              "region"
            ]
          }
        ]
      },
      "kubernetes_node_pool_size": {
        "type": "object",
        "properties": {
          "size": {
            "type": "string",
            "example": "s-1vcpu-2gb",
            "description": "The slug identifier for the type of Droplet used as workers in the node pool."
          }
        }
      },
      "kubernetes_node_pool_taint": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "example": "priority",
            "description": "An arbitrary string. The `key` and `value` fields of the `taint` object form a key-value pair. For example, if the value of the `key` field is \"special\" and the value of the `value` field is \"gpu\", the key value pair would be `special=gpu`."
          },
          "value": {
            "type": "string",
            "example": "high",
            "description": "An arbitrary string. The `key` and `value` fields of the `taint` object form a key-value pair. For example, if the value of the `key` field is \"special\" and the value of the `value` field is \"gpu\", the key value pair would be `special=gpu`."
          },
          "effect": {
            "type": "string",
            "enum": [
              "NoSchedule",
              "PreferNoSchedule",
              "NoExecute"
            ],
            "example": "NoSchedule",
            "description": "How the node reacts to pods that it won't tolerate. Available effect values are `NoSchedule`, `PreferNoSchedule`, and `NoExecute`."
          }
        }
      },
      "node": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "e78247f8-b1bb-4f7a-8db9-2a5f8d4b8f8f",
            "description": "A unique ID that can be used to identify and reference the node."
          },
          "name": {
            "type": "string",
            "example": "adoring-newton-3niq",
            "description": "An automatically generated, human-readable name for the node."
          },
          "status": {
            "type": "object",
            "description": "An object containing a `state` attribute whose value is set to a string indicating the current status of the node.",
            "properties": {
              "state": {
                "type": "string",
                "enum": [
                  "provisioning",
                  "running",
                  "draining",
                  "deleting"
                ],
                "example": "provisioning",
                "description": "A string indicating the current status of the node."
              }
            }
          },
          "droplet_id": {
            "type": "string",
            "example": "205545370",
            "description": "The ID of the Droplet used for the worker node."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "example": "2018-11-15T16:00:11Z",
            "description": "A time value given in ISO8601 combined date and time format that represents when the node was created."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "example": "2018-11-15T16:00:11Z",
            "description": "A time value given in ISO8601 combined date and time format that represents when the node was last updated."
          }
        }
      },
      "kubernetes_node_pool_base": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "readOnly": true,
            "example": "cdda885e-7663-40c8-bc74-3a036c66545d",
            "description": "A unique ID that can be used to identify and reference a specific node pool."
          },
          "name": {
            "type": "string",
            "example": "frontend-pool",
            "description": "A human-readable name for the node pool."
          },
          "count": {
            "type": "integer",
            "example": 3,
            "description": "The number of Droplet instances in the node pool."
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "k8s",
              "k8s:bd5f5959-5e1e-4205-a714-a914373942af",
              "k8s-worker",
              "production",
              "web-team"
            ],
            "description": "An array containing the tags applied to the node pool. All node pools are automatically tagged `k8s`, `k8s-worker`, and `k8s:$K8S_CLUSTER_ID`."
          },
          "labels": {
            "type": "object",
            "nullable": true,
            "example": null,
            "description": "An object containing a set of Kubernetes labels. The keys and are values are both user-defined."
          },
          "taints": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/kubernetes_node_pool_taint"
            },
            "description": "An array of taints to apply to all nodes in a pool. Taints will automatically be applied to all existing nodes and any subsequent nodes added to the pool. When a taint is removed, it is removed from all nodes in the pool."
          },
          "auto_scale": {
            "type": "boolean",
            "example": true,
            "description": "A boolean value indicating whether auto-scaling is enabled for this node pool."
          },
          "min_nodes": {
            "type": "integer",
            "example": 3,
            "description": "The minimum number of nodes that this node pool can be auto-scaled to. The value will be `0` if `auto_scale` is set to `false`."
          },
          "max_nodes": {
            "type": "integer",
            "example": 6,
            "description": "The maximum number of nodes that this node pool can be auto-scaled to. The value will be `0` if `auto_scale` is set to `false`."
          },
          "nodes": {
            "type": "array",
            "readOnly": true,
            "description": "An object specifying the details of a specific worker node in a node pool.",
            "items": {
              "$ref": "#/components/schemas/node"
            }
          }
        }
      },
      "kubernetes_node_pool": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/kubernetes_node_pool_size"
          },
          {
            "$ref": "#/components/schemas/kubernetes_node_pool_base"
          }
        ],
        "required": [
          "name",
          "size",
          "count"
        ]
      },
      "maintenance_policy": {
        "type": "object",
        "nullable": true,
        "description": "An object specifying the maintenance window policy for the Kubernetes cluster.",
        "properties": {
          "start_time": {
            "type": "string",
            "example": "12:00",
            "description": "The start time in UTC of the maintenance window policy in 24-hour clock format / HH:MM notation (e.g., `15:00`)."
          },
          "duration": {
            "type": "string",
            "readOnly": true,
            "example": "4h0m0s",
            "description": "The duration of the maintenance window policy in human-readable format."
          },
          "day": {
            "type": "string",
            "enum": [
              "any",
              "monday",
              "tuesday",
              "wednesday",
              "thursday",
              "friday",
              "saturday",
              "sunday"
            ],
            "example": "any",
            "description": "The day of the maintenance window policy. May be one of `monday` through `sunday`, or `any` to indicate an arbitrary week day."
          }
        }
      },
      "cluster": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "readOnly": true,
            "example": "bd5f5959-5e1e-4205-a714-a914373942af",
            "description": "A unique ID that can be used to identify and reference a Kubernetes cluster."
          },
          "name": {
            "type": "string",
            "example": "prod-cluster-01",
            "description": "A human-readable name for a Kubernetes cluster."
          },
          "region": {
            "type": "string",
            "example": "nyc1",
            "description": "The slug identifier for the region where the Kubernetes cluster is located."
          },
          "version": {
            "type": "string",
            "example": "1.18.6-do.0",
            "description": "The slug identifier for the version of Kubernetes used for the cluster. If set to a minor version (e.g. \"1.14\"), the latest version within it will be used (e.g. \"1.14.6-do.1\"); if set to \"latest\", the latest published version will be used. See the `/v2/kubernetes/options` endpoint to find all currently available versions."
          },
          "cluster_subnet": {
            "type": "string",
            "format": "cidr",
            "readOnly": true,
            "example": "10.244.0.0/16",
            "description": "The range of IP addresses in the overlay network of the Kubernetes cluster in CIDR notation."
          },
          "service_subnet": {
            "type": "string",
            "readOnly": true,
            "example": "10.245.0.0/16",
            "description": "The range of assignable IP addresses for services running in the Kubernetes cluster in CIDR notation."
          },
          "vpc_uuid": {
            "type": "string",
            "format": "uuid",
            "example": "c33931f2-a26a-4e61-b85c-4e95a2ec431b",
            "description": "A string specifying the UUID of the VPC to which the Kubernetes cluster is assigned."
          },
          "ipv4": {
            "type": "string",
            "readOnly": true,
            "example": "68.183.121.157",
            "description": "The public IPv4 address of the Kubernetes master node."
          },
          "endpoint": {
            "type": "string",
            "readOnly": true,
            "example": "https://bd5f5959-5e1e-4205-a714-a914373942af.k8s.ondigitalocean.com",
            "description": "The base URL of the API server on the Kubernetes master node."
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "k8s",
              "k8s:bd5f5959-5e1e-4205-a714-a914373942af",
              "production",
              "web-team"
            ],
            "description": "An array of tags applied to the Kubernetes cluster. All clusters are automatically tagged `k8s` and `k8s:$K8S_CLUSTER_ID`."
          },
          "node_pools": {
            "type": "array",
            "description": "An object specifying the details of the worker nodes available to the Kubernetes cluster.",
            "items": {
              "$ref": "#/components/schemas/kubernetes_node_pool"
            }
          },
          "maintenance_policy": {
            "$ref": "#/components/schemas/maintenance_policy"
          },
          "auto_upgrade": {
            "type": "boolean",
            "default": false,
            "example": true,
            "description": "A boolean value indicating whether the cluster will be automatically upgraded to new patch releases during its maintenance window."
          },
          "status": {
            "type": "object",
            "readOnly": true,
            "description": "An object containing a `state` attribute whose value is set to a string indicating the current status of the cluster.",
            "properties": {
              "state": {
                "type": "string",
                "enum": [
                  "running",
                  "provisioning",
                  "degraded",
                  "error",
                  "deleted",
                  "upgrading",
                  "deleting"
                ],
                "example": "provisioning",
                "description": "A string indicating the current status of the cluster."
              },
              "message": {
                "type": "string",
                "example": "provisioning",
                "description": "An optional message providing additional information about the current cluster state."
              }
            }
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "example": "2018-11-15T16:00:11Z",
            "description": "A time value given in ISO8601 combined date and time format that represents when the Kubernetes cluster was created."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "example": "2018-11-15T16:00:11Z",
            "readOnly": true,
            "description": "A time value given in ISO8601 combined date and time format that represents when the Kubernetes cluster was last updated."
          },
          "surge_upgrade": {
            "type": "boolean",
            "default": false,
            "example": true,
            "description": "A boolean value indicating whether surge upgrade is enabled/disabled for the cluster. Surge upgrade makes cluster upgrades fast and reliable by bringing up new nodes before destroying the outdated nodes."
          },
          "ha": {
            "type": "boolean",
            "default": false,
            "example": true,
            "description": "A boolean value indicating whether the control plane is run in a highly available configuration in the cluster. Highly available control planes incur less downtime."
          },
          "registry_enabled": {
            "type": "boolean",
            "readOnly": true,
            "example": true,
            "description": "A read-only boolean value indicating if a container registry is integrated with the cluster."
          }
        },
        "required": [
          "name",
          "region",
          "version",
          "node_pools"
        ]
      },
      "cluster_update": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "prod-cluster-01",
            "description": "A human-readable name for a Kubernetes cluster."
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "k8s",
              "k8s:bd5f5959-5e1e-4205-a714-a914373942af",
              "production",
              "web-team"
            ],
            "description": "An array of tags applied to the Kubernetes cluster. All clusters are automatically tagged `k8s` and `k8s:$K8S_CLUSTER_ID`."
          },
          "maintenance_policy": {
            "$ref": "#/components/schemas/maintenance_policy"
          },
          "auto_upgrade": {
            "type": "boolean",
            "default": false,
            "example": true,
            "description": "A boolean value indicating whether the cluster will be automatically upgraded to new patch releases during its maintenance window."
          },
          "surge_upgrade": {
            "type": "boolean",
            "default": false,
            "example": true,
            "description": "A boolean value indicating whether surge upgrade is enabled/disabled for the cluster. Surge upgrade makes cluster upgrades fast and reliable by bringing up new nodes before destroying the outdated nodes."
          }
        },
        "required": [
          "name"
        ]
      },
      "associated_kubernetes_resource": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of a resource associated with a Kubernetes cluster.",
            "example": "edb0478d-7436-11ea-86e6-0a58ac144b91"
          },
          "name": {
            "type": "string",
            "description": "The name of a resource associated with a Kubernetes cluster.",
            "example": "volume-001"
          }
        }
      },
      "associated_kubernetes_resources": {
        "type": "object",
        "description": "An object containing the IDs of resources associated with a Kubernetes cluster.",
        "properties": {
          "load_balancers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/associated_kubernetes_resource"
            },
            "example": [
              {
                "id": "4de7ac8b-495b-4884-9a69-1050c6793cd6",
                "name": "lb-001"
              }
            ],
            "description": "A list of names and IDs for associated load balancers that can be destroyed along with the cluster."
          },
          "volumes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/associated_kubernetes_resource"
            },
            "example": [
              {
                "id": "ba49449a-7435-11ea-b89e-0a58ac14480f",
                "name": "volume-001"
              }
            ],
            "description": "A list of names and IDs for associated volumes that can be destroyed along with the cluster."
          },
          "volume_snapshots": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/associated_kubernetes_resource"
            },
            "example": [
              {
                "id": "edb0478d-7436-11ea-86e6-0a58ac144b91",
                "name": "snapshot-001"
              }
            ],
            "description": "A list of names and IDs for associated volume snapshots that can be destroyed along with the cluster."
          }
        }
      },
      "destroy_associated_kubernetes_resources": {
        "type": "object",
        "description": "An object containing the IDs of resources to be destroyed along with their associated with a Kubernetes cluster.",
        "properties": {
          "load_balancers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "4de7ac8b-495b-4884-9a69-1050c6793cd6"
            ],
            "description": "A list of IDs for associated load balancers to destroy along with the cluster."
          },
          "volumes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "ba49449a-7435-11ea-b89e-0a58ac14480f"
            ],
            "description": "A list of IDs for associated volumes to destroy along with the cluster."
          },
          "volume_snapshots": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "edb0478d-7436-11ea-86e6-0a58ac144b91"
            ],
            "description": "A list of IDs for associated volume snapshots to destroy along with the cluster."
          }
        }
      },
      "credentials": {
        "type": "object",
        "properties": {
          "server": {
            "type": "string",
            "format": "uri",
            "example": "https://bd5f5959-5e1e-4205-a714-a914373942af.k8s.ondigitalocean.com",
            "description": "The URL used to access the cluster API server."
          },
          "certificate_authority_data": {
            "type": "string",
            "format": "byte",
            "example": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURKekNDQWcrZ0F3SUJBZ0lDQm5Vd0RRWUpLb1pJaHZjTkFRRUxCUUF3TXpFVk1CTUdBMVVFQ2hNTVJHbG4KYVhSaGJFOWpaV0Z1TVJvd0dBWURWUVFERXhGck9ITmhZWE1nUTJ4MWMzUmxjaUJEUVRBZUZ3MHlNREE0TURNeApOVEkxTWpoYUZ3MDBNREE0TURNeE5USTFNamhhTURNeEZUQVRCZ05WQkFvVERFUnBaMmwwWVd4UFkyVmhiakVhCk1CZ0dBMVVFQXhNUmF6aHpZV0Z6SUVOc2RYTjBaWElnUTBFd2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUIKRHdBd2dnRUtBb0lCQVFDc21oa2JrSEpUcGhZQlN0R05VVE1ORVZTd2N3bmRtajArelQvcUZaNGsrOVNxUnYrSgpBd0lCaGpBU0JnTlZIUk1CQWY4RUNEQUdBUUgvQWdFQU1CMEdBMVVkRGdRV0JCUlRzazhhZ1hCUnFyZXdlTXJxClhwa3E1NXg5dVRBTkJna3Foa2lHOXcwQkFRc0ZBQU9DQVFFQXB6V2F6bXNqYWxXTEx3ZjVpbWdDblNINDlKcGkKYWkvbzFMdEJvVEpleGdqZzE1ZVppaG5BMUJMc0lWNE9BZGM3UEFsL040L0hlbENrTDVxandjamRnNVdaYnMzYwozcFVUQ0g5bVVwMFg1SVdhT1VKV292Q1hGUlM1R2VKYXlkSDVPUXhqTURzR2N2UlNvZGQrVnQ2MXE3aWdFZ2I1CjBOZ1l5RnRnc2p0MHpJN3hURzZFNnlsOVYvUmFoS3lIQks2eExlM1RnUGU4SXhWa2RwT3QzR0FhSDRaK0pLR3gKYisyMVZia1NnRE1QQTlyR0VKNVZwVXlBV0FEVXZDRVFHV0hmNGpQN2ZGZlc3T050S0JWY3h3YWFjcVBVdUhzWApwRG5DZVR3V1NuUVp6L05xNmQxWUtsMFdtbkwzTEowemJzRVFGbEQ4MkkwL09MY2dZSDVxMklOZHhBPT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=",
            "description": "A base64 encoding of bytes representing the certificate authority data for accessing the cluster."
          },
          "client_certificate_data": {
            "type": "string",
            "format": "byte",
            "deprecated": true,
            "nullable": true,
            "example": null,
            "description": "A base64 encoding of bytes representing the x509 client\ncertificate data for access the cluster. This is only returned for clusters\nwithout support for token-based authentication.\n\nNewly created Kubernetes clusters do not return credentials using\ncertificate-based authentication. For additional information,\n[see here](https://www.digitalocean.com/docs/kubernetes/how-to/connect-to-cluster/#authenticate).\n"
          },
          "client_key_data": {
            "type": "string",
            "format": "byte",
            "deprecated": true,
            "nullable": true,
            "example": null,
            "description": "A base64 encoding of bytes representing the x509 client key\ndata for access the cluster. This is only returned for clusters without\nsupport for token-based authentication.\n\nNewly created Kubernetes clusters do not return credentials using\ncertificate-based authentication. For additional information,\n[see here](https://www.digitalocean.com/docs/kubernetes/how-to/connect-to-cluster/#authenticate).\n"
          },
          "token": {
            "type": "string",
            "example": "$DIGITALOCEAN_TOKEN",
            "description": "An access token used to authenticate with the cluster. This is only returned for clusters with support for token-based authentication."
          },
          "expires_at": {
            "type": "string",
            "format": "date-time",
            "example": "2019-11-09T11:50:28.889Z",
            "description": "A time value given in ISO8601 combined date and time format that represents when the access token expires."
          }
        }
      },
      "kubernetes_version": {
        "type": "object",
        "properties": {
          "slug": {
            "type": "string",
            "example": "1.16.13-do.0",
            "description": "The slug identifier for an available version of Kubernetes for use when creating or updating a cluster. The string contains both the upstream version of Kubernetes as well as the DigitalOcean revision."
          },
          "kubernetes_version": {
            "type": "string",
            "example": "1.16.13",
            "description": "The upstream version string for the version of Kubernetes provided by a given slug."
          },
          "supported_features": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "cluster-autoscaler",
              "docr-integration",
              "token-authentication"
            ],
            "description": "The features available with the version of Kubernetes provided by a given slug."
          }
        }
      },
      "kubernetes_node_pool_update": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/kubernetes_node_pool_base"
          }
        ],
        "required": [
          "name",
          "count"
        ]
      },
      "user": {
        "type": "object",
        "properties": {
          "kubernetes_cluster_user": {
            "type": "object",
            "properties": {
              "username": {
                "type": "string",
                "format": "email",
                "example": "sammy@digitalocean.com",
                "description": "The username for the cluster admin user."
              },
              "groups": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "example": [
                  "k8saas:authenticated"
                ],
                "description": "A list of in-cluster groups that the user belongs to."
              }
            }
          }
        }
      },
      "kubernetes_region": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "New York 3",
            "description": "A DigitalOcean region where Kubernetes is available."
          },
          "slug": {
            "type": "string",
            "example": "nyc3",
            "description": "The identifier for a region for use when creating a new cluster."
          }
        }
      },
      "kubernetes_size": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "s-1vcpu-2gb",
            "description": "A Droplet size available for use in a Kubernetes node pool."
          },
          "slug": {
            "type": "string",
            "example": "s-1vcpu-2gb",
            "description": "The identifier for a size for use when creating a new cluster."
          }
        }
      },
      "kubernetes_options": {
        "type": "object",
        "properties": {
          "options": {
            "properties": {
              "regions": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/kubernetes_region"
                }
              },
              "versions": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/kubernetes_version"
                }
              },
              "sizes": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/kubernetes_size"
                }
              }
            }
          }
        }
      },
      "clusterlint_results": {
        "type": "object",
        "properties": {
          "run_id": {
            "type": "string",
            "example": "50c2f44c-011d-493e-aee5-361a4a0d1844",
            "description": "Id of the clusterlint run that can be used later to fetch the diagnostics."
          },
          "requested_at": {
            "type": "string",
            "format": "date-time",
            "example": "2019-10-30T05:34:07Z",
            "description": "A time value given in ISO8601 combined date and time format that represents when the schedule clusterlint run request was made."
          },
          "completed_at": {
            "type": "string",
            "format": "date-time",
            "example": "2019-10-30T05:34:11Z",
            "description": "A time value given in ISO8601 combined date and time format that represents when the schedule clusterlint run request was completed."
          },
          "diagnostics": {
            "description": "An array of diagnostics reporting potential problems for the given cluster.",
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "check_name": {
                  "type": "string",
                  "example": "unused-config-map",
                  "description": "The clusterlint check that resulted in the diagnostic."
                },
                "severity": {
                  "type": "string",
                  "example": "warning",
                  "description": "Can be one of error, warning or suggestion."
                },
                "message": {
                  "type": "string",
                  "example": "Unused config map",
                  "description": "Feedback about the object for users to fix."
                },
                "object": {
                  "type": "object",
                  "description": "Metadata about the Kubernetes API object the diagnostic is reported on.",
                  "properties": {
                    "name": {
                      "type": "string",
                      "example": "foo",
                      "description": "Name of the object"
                    },
                    "kind": {
                      "type": "string",
                      "example": "config map",
                      "description": "The kind of Kubernetes API object"
                    },
                    "namespace": {
                      "type": "string",
                      "example": "kube-system",
                      "description": "The namespace the object resides in the cluster."
                    }
                  }
                }
              }
            }
          }
        }
      },
      "clusterlint_request": {
        "type": "object",
        "properties": {
          "include_groups": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "basic",
              "doks",
              "security"
            ],
            "description": "An array of check groups that will be run when clusterlint executes checks."
          },
          "include_checks": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "bare-pods",
              "resource-requirements"
            ],
            "description": "An array of checks that will be run when clusterlint executes checks."
          },
          "exclude_groups": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "workload-health"
            ],
            "description": "An array of check groups that will be omitted when clusterlint executes checks."
          },
          "exclude_checks": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "default-namespace"
            ],
            "description": "An array of checks that will be run when clusterlint executes checks."
          }
        }
      },
      "cluster_registries": {
        "type": "object",
        "properties": {
          "cluster_uuids": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "bd5f5959-5e1e-4205-a714-a914373942af",
              "50c2f44c-011d-493e-aee5-361a4a0d1844"
            ],
            "description": "An array containing the UUIDs of Kubernetes clusters."
          }
        }
      },
      "forwarding_rule": {
        "type": "object",
        "description": "An object specifying a forwarding rule for a load balancer.",
        "properties": {
          "entry_protocol": {
            "type": "string",
            "enum": [
              "http",
              "https",
              "http2",
              "tcp"
            ],
            "example": "https",
            "description": "The protocol used for traffic to the load balancer. The possible values are: `http`, `https`, `http2`, or `tcp`.\n"
          },
          "entry_port": {
            "type": "integer",
            "example": 443,
            "description": "An integer representing the port on which the load balancer instance will listen."
          },
          "target_protocol": {
            "type": "string",
            "enum": [
              "http",
              "https",
              "http2",
              "tcp"
            ],
            "example": "http",
            "description": "The protocol used for traffic from the load balancer to the backend Droplets. The possible values are: `http`, `https`, `http2`, or `tcp`.\n"
          },
          "target_port": {
            "type": "integer",
            "example": 80,
            "description": "An integer representing the port on the backend Droplets to which the load balancer will send traffic."
          },
          "certificate_id": {
            "type": "string",
            "example": "892071a0-bb95-49bc-8021-3afd67a210bf",
            "description": "The ID of the TLS certificate used for SSL termination if enabled."
          },
          "tls_passthrough": {
            "type": "boolean",
            "example": false,
            "description": "A boolean value indicating whether SSL encrypted traffic will be passed through to the backend Droplets."
          }
        },
        "required": [
          "entry_protocol",
          "entry_port",
          "target_protocol",
          "target_port"
        ]
      },
      "health_check": {
        "type": "object",
        "description": "An object specifying health check settings for the load balancer.",
        "properties": {
          "protocol": {
            "type": "string",
            "enum": [
              "http",
              "https",
              "tcp"
            ],
            "default": "http",
            "example": "http",
            "description": "The protocol used for health checks sent to the backend Droplets. The possible values are `http`, `https`, or `tcp`."
          },
          "port": {
            "type": "integer",
            "default": 80,
            "example": 80,
            "description": "An integer representing the port on the backend Droplets on which the health check will attempt a connection."
          },
          "path": {
            "type": "string",
            "default": "/",
            "example": "/",
            "description": "The path on the backend Droplets to which the load balancer instance will send a request."
          },
          "check_interval_seconds": {
            "type": "integer",
            "default": 10,
            "example": 10,
            "description": "The number of seconds between between two consecutive health checks."
          },
          "response_timeout_seconds": {
            "type": "integer",
            "default": 5,
            "example": 5,
            "description": "The number of seconds the load balancer instance will wait for a response until marking a health check as failed."
          },
          "unhealthy_threshold": {
            "type": "integer",
            "default": 5,
            "example": 5,
            "description": "The number of times a health check must fail for a backend Droplet to be marked \"unhealthy\" and be removed from the pool."
          },
          "healthy_threshold": {
            "type": "integer",
            "default": 3,
            "example": 3,
            "description": "The number of times a health check must pass for a backend Droplet to be marked \"healthy\" and be re-added to the pool."
          }
        }
      },
      "sticky_sessions": {
        "type": "object",
        "description": "An object specifying sticky sessions settings for the load balancer.",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "cookies",
              "none"
            ],
            "example": "cookies",
            "default": "none",
            "description": "An attribute indicating how and if requests from a client will be persistently served by the same backend Droplet. The possible values are `cookies` or `none`."
          },
          "cookie_name": {
            "type": "string",
            "example": "DO-LB",
            "description": "The name of the cookie sent to the client. This attribute is only returned when using `cookies` for the sticky sessions type."
          },
          "cookie_ttl_seconds": {
            "type": "integer",
            "example": 300,
            "description": "The number of seconds until the cookie set by the load balancer expires. This attribute is only returned when using `cookies` for the sticky sessions type."
          }
        }
      },
      "load_balancer_base": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "readOnly": true,
            "example": "4de7ac8b-495b-4884-9a69-1050c6793cd6",
            "description": "A unique ID that can be used to identify and reference a load balancer."
          },
          "name": {
            "type": "string",
            "example": "example-lb-01",
            "description": "A human-readable name for a load balancer instance."
          },
          "ip": {
            "type": "string",
            "pattern": "^$|^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$",
            "readOnly": true,
            "example": "104.131.186.241",
            "description": "An attribute containing the public-facing IP address of the load balancer."
          },
          "size": {
            "type": "string",
            "enum": [
              "lb-small",
              "lb-medium",
              "lb-large"
            ],
            "default": "lb-small",
            "example": "lb-small",
            "description": "The size of the load balancer. The available sizes are `lb-small`, `lb-medium`, or `lb-large`. You can resize load balancers after creation up to once per hour. You cannot resize a load balancer within the first hour of its creation."
          },
          "algorithm": {
            "type": "string",
            "example": "round_robin",
            "enum": [
              "round_robin",
              "least_connections"
            ],
            "default": "round_robin",
            "description": "The load balancing algorithm used to determine which backend Droplet will be selected by a client. It must be either `round_robin` or `least_connections`."
          },
          "status": {
            "type": "string",
            "example": "new",
            "enum": [
              "new",
              "active",
              "errored"
            ],
            "readOnly": true,
            "description": "A status string indicating the current state of the load balancer. This can be `new`, `active`, or `errored`."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "example": "2017-02-01T22:22:58Z",
            "description": "A time value given in ISO8601 combined date and time format that represents when the load balancer was created."
          },
          "forwarding_rules": {
            "type": "array",
            "minimum": 1,
            "items": {
              "$ref": "#/components/schemas/forwarding_rule"
            },
            "description": "An array of objects specifying the forwarding rules for a load balancer."
          },
          "health_check": {
            "$ref": "#/components/schemas/health_check"
          },
          "sticky_sessions": {
            "$ref": "#/components/schemas/sticky_sessions"
          },
          "redirect_http_to_https": {
            "type": "boolean",
            "example": true,
            "default": false,
            "description": "A boolean value indicating whether HTTP requests to the load balancer on port 80 will be redirected to HTTPS on port 443."
          },
          "enable_proxy_protocol": {
            "type": "boolean",
            "example": true,
            "default": false,
            "description": "A boolean value indicating whether PROXY Protocol is in use."
          },
          "enable_backend_keepalive": {
            "type": "boolean",
            "example": true,
            "default": false,
            "description": "A boolean value indicating whether HTTP keepalive connections are maintained to target Droplets."
          },
          "vpc_uuid": {
            "type": "string",
            "format": "uuid",
            "example": "c33931f2-a26a-4e61-b85c-4e95a2ec431b",
            "description": "A string specifying the UUID of the VPC to which the load balancer is assigned."
          },
          "disable_lets_encrypt_dns_records": {
            "type": "boolean",
            "example": true,
            "default": false,
            "description": "A boolean value indicating whether to disable automatic DNS record creation for Let's Encrypt certificates that are added to the load balancer."
          }
        },
        "required": [
          "forwarding_rules"
        ]
      },
      "load_balancer": {
        "allOf": [
          {
            "$ref": "#/components/schemas/load_balancer_base"
          },
          {
            "type": "object",
            "properties": {
              "region": {
                "type": "object",
                "allOf": [
                  {
                    "description": "The region where the load balancer instance is located. When setting a region, the value should be the slug identifier for the region. When you query a load balancer, an entire region object will be returned."
                  },
                  {
                    "$ref": "#/components/schemas/region"
                  }
                ]
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "droplet_ids": {
                "type": "array",
                "items": {
                  "type": "integer"
                },
                "example": [
                  3164444,
                  3164445
                ],
                "description": "An array containing the IDs of the Droplets assigned to the load balancer."
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "tag": {
                "type": "string",
                "example": "prod:web",
                "description": "The name of a Droplet tag corresponding to Droplets assigned to the load balancer."
              }
            }
          }
        ]
      },
      "load_balancer_create": {
        "oneOf": [
          {
            "title": "Assign Droplets by ID",
            "allOf": [
              {
                "type": "object",
                "properties": {
                  "droplet_ids": {
                    "type": "array",
                    "items": {
                      "type": "integer"
                    },
                    "example": [
                      3164444,
                      3164445
                    ],
                    "description": "An array containing the IDs of the Droplets assigned to the load balancer."
                  }
                }
              },
              {
                "type": "object",
                "properties": {
                  "region": {
                    "$ref": "#/components/schemas/region_slug"
                  }
                }
              },
              {
                "$ref": "#/components/schemas/load_balancer_base"
              }
            ],
            "required": [
              "droplet_ids",
              "region"
            ]
          },
          {
            "title": "Assign Droplets by Tag",
            "allOf": [
              {
                "type": "object",
                "properties": {
                  "tag": {
                    "type": "string",
                    "example": "prod:web",
                    "description": "The name of a Droplet tag corresponding to Droplets assigned to the load balancer."
                  }
                }
              },
              {
                "type": "object",
                "properties": {
                  "region": {
                    "$ref": "#/components/schemas/region_slug"
                  }
                }
              },
              {
                "$ref": "#/components/schemas/load_balancer_base"
              }
            ],
            "required": [
              "tag",
              "region"
            ]
          }
        ]
      },
      "slack_details": {
        "type": "object",
        "required": [
          "url",
          "channel"
        ],
        "properties": {
          "channel": {
            "type": "string",
            "format": "string",
            "example": "Production Alerts",
            "description": "Slack channel to notify of an alert trigger."
          },
          "url": {
            "type": "string",
            "format": "string",
            "description": "Slack Webhook URL.",
            "example": "https://hooks.slack.com/services/T1234567/AAAAAAAA/ZZZZZZ"
          }
        }
      },
      "alerts": {
        "type": "object",
        "required": [
          "slack",
          "email"
        ],
        "properties": {
          "email": {
            "description": "An email to notify on an alert trigger.",
            "example": [
              "bob@exmaple.com"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "slack": {
            "type": "array",
            "description": "Slack integration details.",
            "items": {
              "$ref": "#/components/schemas/slack_details"
            }
          }
        }
      },
      "alert_policy": {
        "type": "object",
        "required": [
          "uuid",
          "type",
          "description",
          "compare",
          "value",
          "window",
          "entities",
          "tags",
          "alerts",
          "enabled"
        ],
        "properties": {
          "alerts": {
            "$ref": "#/components/schemas/alerts"
          },
          "compare": {
            "type": "string",
            "format": "string",
            "example": "GreaterThan",
            "enum": [
              "GreaterThan",
              "LessThan"
            ]
          },
          "description": {
            "type": "string",
            "format": "string",
            "example": "CPU Alert"
          },
          "enabled": {
            "type": "boolean",
            "example": true
          },
          "entities": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "192018292"
            ]
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "droplet_tag"
            ]
          },
          "type": {
            "type": "string",
            "format": "string",
            "enum": [
              "v1/insights/droplet/load_1",
              "v1/insights/droplet/load_5",
              "v1/insights/droplet/load_15",
              "v1/insights/droplet/memory_utilization_percent",
              "v1/insights/droplet/disk_utilization_percent",
              "v1/insights/droplet/cpu",
              "v1/insights/droplet/disk_read",
              "v1/insights/droplet/disk_write",
              "v1/insights/droplet/public_outbound_bandwidth",
              "v1/insights/droplet/public_inbound_bandwidth",
              "v1/insights/droplet/private_outbound_bandwidth",
              "v1/insights/droplet/private_inbound_bandwidth"
            ],
            "example": "v1/insights/droplet/cpu"
          },
          "uuid": {
            "type": "string",
            "format": "string",
            "example": "78b3da62-27e5-49ba-ac70-5db0b5935c64"
          },
          "value": {
            "type": "number",
            "format": "float",
            "example": 80
          },
          "window": {
            "type": "string",
            "format": "string",
            "enum": [
              "5m",
              "10m",
              "30m",
              "1h"
            ],
            "example": "5m"
          }
        }
      },
      "list_alert_policy": {
        "type": "object",
        "required": [
          "policies"
        ],
        "properties": {
          "policies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/alert_policy"
            }
          }
        }
      },
      "alert_policy_request": {
        "type": "object",
        "required": [
          "type",
          "description",
          "compare",
          "value",
          "window",
          "entities",
          "tags",
          "alerts",
          "enabled"
        ],
        "properties": {
          "alerts": {
            "$ref": "#/components/schemas/alerts"
          },
          "compare": {
            "type": "string",
            "example": "GreaterThan",
            "format": "string",
            "enum": [
              "GreaterThan",
              "LessThan"
            ]
          },
          "description": {
            "type": "string",
            "format": "string",
            "example": "CPU Alert"
          },
          "enabled": {
            "type": "boolean",
            "example": true
          },
          "entities": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "192018292"
            ]
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "droplet_tag"
            ]
          },
          "type": {
            "type": "string",
            "format": "string",
            "enum": [
              "v1/insights/droplet/load_1",
              "v1/insights/droplet/load_5",
              "v1/insights/droplet/load_15",
              "v1/insights/droplet/memory_utilization_percent",
              "v1/insights/droplet/disk_utilization_percent",
              "v1/insights/droplet/cpu",
              "v1/insights/droplet/disk_read",
              "v1/insights/droplet/disk_write",
              "v1/insights/droplet/public_outbound_bandwidth",
              "v1/insights/droplet/public_inbound_bandwidth",
              "v1/insights/droplet/private_outbound_bandwidth",
              "v1/insights/droplet/private_inbound_bandwidth"
            ],
            "example": "v1/insights/droplet/cpu"
          },
          "value": {
            "type": "number",
            "format": "float",
            "example": 80
          },
          "window": {
            "type": "string",
            "format": "string",
            "example": "5m",
            "enum": [
              "5m",
              "10m",
              "30m",
              "1h"
            ]
          }
        }
      },
      "metrics_result": {
        "type": "object",
        "required": [
          "metric",
          "values"
        ],
        "properties": {
          "metric": {
            "type": "object",
            "description": "An object containing the metric labels.",
            "additionalProperties": {
              "type": "string"
            },
            "example": {
              "host_id": "19201920"
            }
          },
          "values": {
            "type": "array",
            "example": [
              "- 1435781430\n- '1'",
              "- 1435781445\n- '1'"
            ],
            "items": {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "integer"
                  },
                  {
                    "type": "string"
                  }
                ]
              }
            }
          }
        }
      },
      "metrics_data": {
        "type": "object",
        "required": [
          "resultType",
          "result"
        ],
        "properties": {
          "result": {
            "type": "array",
            "description": "Result of query.",
            "items": {
              "$ref": "#/components/schemas/metrics_result"
            }
          },
          "resultType": {
            "type": "string",
            "format": "string",
            "enum": [
              "matrix"
            ],
            "example": "matrix"
          }
        }
      },
      "metrics": {
        "type": "object",
        "required": [
          "status",
          "data"
        ],
        "properties": {
          "data": {
            "$ref": "#/components/schemas/metrics_data"
          },
          "status": {
            "type": "string",
            "format": "string",
            "example": "success",
            "enum": [
              "success",
              "error"
            ]
          }
        }
      },
      "project_base": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "readOnly": true,
            "example": "4e1bfbc3-dc3e-41f2-a18f-1b4d7ba71679",
            "description": "The unique universal identifier of this project."
          },
          "owner_uuid": {
            "type": "string",
            "readOnly": true,
            "example": "99525febec065ca37b2ffe4f852fd2b2581895e7",
            "description": "The unique universal identifier of the project owner."
          },
          "owner_id": {
            "type": "integer",
            "readOnly": true,
            "example": 258992,
            "description": "The integer id of the project owner."
          },
          "name": {
            "type": "string",
            "maxLength": 175,
            "example": "my-web-api",
            "description": "The human-readable name for the project. The maximum length is 175 characters and the name must be unique."
          },
          "description": {
            "type": "string",
            "maxLength": 255,
            "example": "My website API",
            "description": "The description of the project. The maximum length is 255 characters."
          },
          "purpose": {
            "type": "string",
            "maxLength": 255,
            "example": "Service or API",
            "description": "The purpose of the project. The maximum length is 255 characters. It can\nhave one of the following values:\n\n- Just trying out DigitalOcean\n- Class project / Educational purposes\n- Website or blog\n- Web Application\n- Service or API\n- Mobile Application\n- Machine learning / AI / Data processing\n- IoT\n- Operational / Developer tooling\n\nIf another value for purpose is specified, for example, \"your custom purpose\",\nyour purpose will be stored as `Other: your custom purpose`.\n"
          },
          "environment": {
            "type": "string",
            "enum": [
              "Development",
              "Staging",
              "Production"
            ],
            "example": "Production",
            "description": "The environment of the project's resources."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "example": "2018-09-27T20:10:35Z",
            "description": "A time value given in ISO8601 combined date and time format that represents when the project was created."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "example": "2018-09-27T20:10:35Z",
            "description": "A time value given in ISO8601 combined date and time format that represents when the project was updated."
          }
        }
      },
      "project": {
        "allOf": [
          {
            "$ref": "#/components/schemas/project_base"
          },
          {
            "type": "object",
            "properties": {
              "is_default": {
                "type": "boolean",
                "example": false,
                "description": "If true, all resources will be added to this project if no project is specified."
              }
            }
          }
        ]
      },
      "urn": {
        "type": "string",
        "pattern": "^do:(dbaas|domain|droplet|floatingip|loadbalancer|space|volume|kubernetes|vpc):.*",
        "example": "do:droplet:13457723",
        "description": "The uniform resource name (URN) for the resource in the format do:resource_type:resource_id."
      },
      "resource": {
        "type": "object",
        "properties": {
          "urn": {
            "$ref": "#/components/schemas/urn"
          },
          "assigned_at": {
            "type": "string",
            "format": "date-time",
            "example": "2018-09-28T19:26:37Z",
            "description": "A time value given in ISO8601 combined date and time format that represents when the project was created."
          },
          "links": {
            "type": "object",
            "description": "The links object contains the `self` object, which contains the resource relationship.",
            "properties": {
              "self": {
                "type": "string",
                "format": "uri",
                "example": "https://api.digitalocean.com/v2/droplets/13457723",
                "description": "A URI that can be used to retrieve the resource."
              }
            }
          },
          "status": {
            "type": "string",
            "enum": [
              "ok",
              "not_found",
              "assigned",
              "already_assigned",
              "service_down"
            ],
            "example": "ok",
            "description": "The status of assigning and fetching the resources."
          }
        }
      },
      "project_assignment": {
        "type": "object",
        "properties": {
          "resources": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/urn"
            },
            "example": [
              "do:droplet:13457723"
            ],
            "description": "A list of uniform resource names (URNs) to be added to a project."
          }
        }
      },
      "subscription_tier_base": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Basic",
            "description": "The name of the subscription tier."
          },
          "slug": {
            "type": "string",
            "example": "basic",
            "description": "The slug identifier of the subscription tier."
          },
          "included_repositories": {
            "type": "integer",
            "example": 5,
            "description": "The number of repositories included in the subscription tier. `0` indicates that the subscription tier includes unlimited repositories."
          },
          "included_storage_bytes": {
            "type": "integer",
            "example": 5368709120,
            "description": "The amount of storage included in the subscription tier in bytes."
          },
          "allow_storage_overage": {
            "type": "boolean",
            "example": true,
            "description": "A boolean indicating whether the subscription tier supports additional storage above what is included in the base plan at an additional cost per GiB used."
          },
          "included_bandwidth_bytes": {
            "type": "integer",
            "example": 5368709120,
            "description": "The amount of outbound data transfer included in the subscription tier in bytes."
          },
          "monthly_price_in_cents": {
            "type": "integer",
            "example": 500,
            "description": "The monthly cost of the subscription tier in cents."
          }
        }
      },
      "subscription": {
        "type": "object",
        "properties": {
          "tier": {
            "$ref": "#/components/schemas/subscription_tier_base"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "example": "2020-01-23T21:19:12Z",
            "description": "The time at which the subscription was created."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "example": "2020-11-05T15:53:24Z",
            "description": "The time at which the subscription was last updated."
          }
        }
      },
      "registry": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 63,
            "pattern": "^[a-z0-9-]{1,63}$",
            "example": "example",
            "description": "A globally unique name for the container registry. Must be lowercase and be composed only of numbers, letters and `-`, up to a limit of 63 characters."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "example": "2020-03-21T16:02:37Z",
            "description": "A time value given in ISO8601 combined date and time format that represents when the registry was created."
          },
          "storage_usage_bytes": {
            "type": "integer",
            "readOnly": true,
            "example": 29393920,
            "description": "The amount of storage used in the registry in bytes."
          },
          "storage_usage_bytes_updated_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "example": "2020-11-04T21:39:49.530562231Z",
            "description": "The time at which the storage usage was updated. Storage usage is calculated asynchronously, and may not immediately reflect pushes to the registry."
          },
          "subscription": {
            "allOf": [
              {
                "readOnly": true
              },
              {
                "$ref": "#/components/schemas/subscription"
              }
            ]
          }
        }
      },
      "registry_create": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 63,
            "pattern": "^[a-z0-9-]{1,63}$",
            "example": "example",
            "description": "A globally unique name for the container registry. Must be lowercase and be composed only of numbers, letters and `-`, up to a limit of 63 characters."
          },
          "subscription_tier_slug": {
            "type": "string",
            "enum": [
              "starter",
              "basic",
              "professional"
            ],
            "example": "basic",
            "description": "The slug of the subscription tier to sign up for. Valid values can be retrieved using the options endpoint."
          }
        },
        "required": [
          "name",
          "subscription_tier_slug"
        ]
      },
      "docker_credentials": {
        "type": "object",
        "properties": {
          "auths": {
            "type": "object",
            "properties": {
              "registry.digitalocean.com": {
                "type": "object",
                "properties": {
                  "auth": {
                    "type": "string",
                    "example": "YjdkMDNhNjk0N2IyMTdlZmI2ZjNlYzNiZDM1MDQ1ODI6YjdkMDNhNjk0N2IyMTdlZmI2ZjNlYzNiZDM1MDQ1ODIK",
                    "description": "A base64 encoded string containing credentials for the container registry."
                  }
                }
              }
            }
          }
        }
      },
      "validate_registry": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 63,
            "pattern": "^[a-z0-9-]{1,63}$",
            "example": "example",
            "description": "A globally unique name for the container registry. Must be lowercase and be composed only of numbers, letters and `-`, up to a limit of 63 characters."
          }
        },
        "required": [
          "name"
        ]
      },
      "repository_tag": {
        "type": "object",
        "properties": {
          "registry_name": {
            "type": "string",
            "example": "example",
            "description": "The name of the container registry."
          },
          "repository_name": {
            "type": "string",
            "example": "repo-1",
            "description": "The name of the repository."
          },
          "tag": {
            "type": "string",
            "example": "latest",
            "description": "The name of the tag."
          },
          "manifest_digest": {
            "type": "string",
            "example": "sha256:cb8a924afdf0229ef7515d9e5b3024e23b3eb03ddbba287f4a19c6ac90b8d221",
            "description": "The digest of the manifest associated with the tag."
          },
          "compressed_size_bytes": {
            "type": "integer",
            "example": 2803255,
            "description": "The compressed size of the tag in bytes."
          },
          "size_bytes": {
            "type": "integer",
            "example": 5861888,
            "description": "The uncompressed size of the tag in bytes (this size is calculated asynchronously so it may not be immediately available)."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "example": "2020-04-09T23:54:25Z",
            "description": "The time the tag was last updated."
          }
        }
      },
      "repository": {
        "type": "object",
        "properties": {
          "registry_name": {
            "type": "string",
            "example": "example",
            "description": "The name of the container registry."
          },
          "name": {
            "type": "string",
            "example": "repo-1",
            "description": "The name of the repository."
          },
          "latest_tag": {
            "$ref": "#/components/schemas/repository_tag"
          },
          "tag_count": {
            "type": "integer",
            "example": 1,
            "description": "The number of tags in the repository."
          }
        }
      },
      "garbage_collection": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "example": "eff0feee-49c7-4e8f-ba5c-a320c109c8a8",
            "description": "A string specifying the UUID of the garbage collection."
          },
          "registry_name": {
            "type": "string",
            "example": "example",
            "description": "The name of the container registry."
          },
          "status": {
            "type": "string",
            "enum": [
              "requested",
              "waiting for write JWTs to expire",
              "scanning manifests",
              "deleting unreferenced blobs",
              "cancelling",
              "failed",
              "succeeded",
              "cancelled"
            ],
            "example": "requested",
            "description": "The current status of this garbage collection."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "example": "2020-10-30T21:03:24.000Z",
            "description": "The time the garbage collection was created."
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "example": "2020-10-30T21:03:44.000Z",
            "description": "The time the garbage collection was last updated."
          },
          "blobs_deleted": {
            "type": "integer",
            "example": 42,
            "description": "The number of blobs deleted as a result of this garbage collection."
          },
          "freed_bytes": {
            "type": "integer",
            "example": 667,
            "description": "The number of bytes freed as a result of this garbage collection."
          }
        }
      },
      "update_registry": {
        "type": "object",
        "properties": {
          "cancel": {
            "type": "boolean",
            "example": true,
            "description": "A boolean value indicating that the garbage collection should be cancelled."
          }
        }
      },
      "subscription_tier_extended": {
        "type": "object",
        "properties": {
          "eligible": {
            "type": "boolean",
            "example": true,
            "description": "A boolean indicating whether your account it eligible to use a certain subscription tier."
          },
          "eligibility_reasons": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "OverRepositoryLimit",
                "OverStorageLimit"
              ]
            },
            "example": [
              "OverRepositoryLimit"
            ],
            "description": "If your account is not eligible to use a certain subscription tier, this will include a list of reasons that prevent you from using the tier."
          }
        }
      },
      "neighbor_ids": {
        "type": "object",
        "properties": {
          "neighbor_ids": {
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "description": "An array of arrays. Each array will contain a set of Droplet IDs for Droplets that share a physical server.",
            "example": [
              "- 168671828\n- 168663509\n- 168671815",
              "- 168671883\n- 168671750"
            ]
          }
        }
      },
      "snapshot": {
        "allOf": [
          {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "example": "6372321",
                "description": "The unique identifier for the snapshot."
              }
            },
            "required": [
              "id"
            ]
          },
          {
            "$ref": "#/components/schemas/snapshot_base"
          },
          {
            "type": "object",
            "properties": {
              "resource_id": {
                "type": "string",
                "example": "200776916",
                "description": "The unique identifier for the resource that the snapshot originated from."
              },
              "resource_type": {
                "type": "string",
                "enum": [
                  "droplet",
                  "volume"
                ],
                "example": "droplet",
                "description": "The type of resource that the snapshot originated from."
              },
              "tags": {
                "description": "An array of Tags the snapshot has been tagged with.",
                "type": "array",
                "items": {
                  "type": "string"
                },
                "nullable": true,
                "example": [
                  "web",
                  "env:prod"
                ]
              }
            },
            "required": [
              "resource_id",
              "resource_type",
              "tags"
            ]
          }
        ]
      },
      "tag_metadata": {
        "type": "object",
        "description": "Tagged Resource Statistics include metadata regarding the resource type that has been tagged.",
        "properties": {
          "count": {
            "type": "integer",
            "description": "The number of tagged objects for this type of resource.",
            "example": 5,
            "minimum": 0
          },
          "last_tagged_uri": {
            "type": "string",
            "description": "The URI for the last tagged object for this type of resource.",
            "example": "https://api.digitalocean.com/v2/images/7555620"
          }
        }
      },
      "tag": {
        "type": "object",
        "description": "A tag is a label that can be applied to a resource (currently Droplets, Images, Volumes, Volume Snapshots, and Database clusters) in order to better organize or facilitate the lookups and actions on it.\nTags have two attributes: a user defined `name` attribute and an embedded `resources` attribute with information about resources that have been tagged.",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the tag. Tags may contain letters, numbers, colons, dashes, and underscores.\nThere is a limit of 255 characters per tag.\n\n**Note:** Tag names are case stable, which means the capitalization you use when you first create a tag is canonical.\n\nWhen working with tags in the API, you must use the tag's canonical capitalization. For example, if you create a tag named \"PROD\", the URL to add that tag to a resource would be `https://api.digitalocean.com/v2/tags/PROD/resources` (not `/v2/tags/prod/resources`).\n\nTagged resources in the control panel will always display the canonical capitalization. For example, if you create a tag named \"PROD\", you can tag resources in the control panel by entering \"prod\". The tag will still display with its canonical capitalization, \"PROD\".\n",
            "pattern": "^[a-zA-Z0-9_\\-\\:]+$",
            "maxLength": 255,
            "example": "extra-awesome"
          },
          "resources": {
            "type": "object",
            "description": "An embedded object containing key value pairs of resource type and resource statistics. It also includes a count of the total number of resources tagged with the current tag as well as a `last_tagged_uri` attribute set to the last resource tagged with the current tag.",
            "readOnly": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/tag_metadata"
              },
              {
                "properties": {
                  "droplets": {
                    "$ref": "#/components/schemas/tag_metadata"
                  },
                  "imgages": {
                    "$ref": "#/components/schemas/tag_metadata"
                  },
                  "volumes": {
                    "$ref": "#/components/schemas/tag_metadata"
                  },
                  "volume_snapshots": {
                    "$ref": "#/components/schemas/tag_metadata"
                  },
                  "databases": {
                    "$ref": "#/components/schemas/tag_metadata"
                  }
                }
              }
            ],
            "example": {
              "count": 5,
              "last_tagged_uri": "https://api.digitalocean.com/v2/images/7555620",
              "droplets": {
                "count": 1,
                "last_tagged_uri": "https://api.digitalocean.com/v2/droplets/3164444"
              },
              "images": {
                "count": 1,
                "last_tagged_uri": "https://api.digitalocean.com/v2/images/7555620"
              },
              "volumes": {
                "count": 1,
                "last_tagged_uri": "https://api.digitalocean.com/v2/volumes/3d80cb72-342b-4aaa-b92e-4e4abb24a933"
              },
              "volume_snapshots": {
                "count": 1,
                "last_tagged_uri": "https://api.digitalocean.com/v2/snapshots/1f6f46e8-6b60-11e9-be4e-0a58ac144519"
              },
              "databases": {
                "count": 1,
                "last_tagged_uri": "https://api.digitalocean.com/v2/databases/b92438f6-ba03-416c-b642-e9236db91976"
              }
            }
          }
        }
      },
      "error_with_root_causes": {
        "type": "object",
        "properties": {
          "error": {
            "description": "A message providing information about the error.",
            "type": "string",
            "example": "not_found"
          },
          "messages": {
            "description": "A list of legacy error messages.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true,
            "example": null
          },
          "root_causes": {
            "description": "A list of underlying causes for the error, including details to help  resolve it when possible.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": []
          }
        },
        "required": [
          "error",
          "root_causes"
        ]
      },
      "tag_resource": {
        "type": "object",
        "properties": {
          "resources": {
            "description": "An array of objects containing resource_id and resource_type  attributes.",
            "type": "array",
            "items": {
              "properties": {
                "resource_id": {
                  "type": "string",
                  "description": "The identifier of a resource.",
                  "example": "3d80cb72-342b-4aaa-b92e-4e4abb24a933"
                },
                "resource_type": {
                  "type": "string",
                  "description": "The type of the resource.",
                  "example": "volume",
                  "enum": [
                    "droplet",
                    "image",
                    "volume",
                    "volume_snapshot"
                  ]
                }
              }
            },
            "example": [
              {
                "resource_id": "9569411",
                "resource_type": "droplet"
              },
              {
                "resource_id": "7555620",
                "resource_type": "image"
              },
              {
                "resource_id": "3d80cb72-342b-4aaa-b92e-4e4abb24a933",
                "resource_type": "volume"
              }
            ]
          }
        },
        "required": [
          "resources"
        ]
      },
      "volume_base": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier for the block storage volume.",
            "example": "506f78a4-e098-11e5-ad9f-000f53306ae1",
            "readOnly": true
          },
          "droplet_ids": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "nullable": true,
            "description": "An array containing the IDs of the Droplets the volume is attached to. Note that at this time, a volume can only be attached to a single Droplet.",
            "example": [],
            "readOnly": true
          },
          "name": {
            "type": "string",
            "description": "A human-readable name for the block storage volume. Must be lowercase and be composed only of numbers, letters and \"-\", up to a limit of 64 characters. The name must begin with a letter.",
            "example": "example"
          },
          "description": {
            "type": "string",
            "description": "An optional free-form text field to describe a block storage volume.",
            "example": "Block store for examples"
          },
          "size_gigabytes": {
            "type": "integer",
            "description": "The size of the block storage volume in GiB (1024^3).",
            "example": 10
          },
          "created_at": {
            "type": "string",
            "description": "A time value given in ISO8601 combined date and time format that represents when the block storage volume was created.",
            "example": "2020-03-02T17:00:49.000Z",
            "readOnly": true
          },
          "tags": {
            "$ref": "#/components/schemas/tags_array"
          }
        }
      },
      "volume_full": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/volume_base"
          },
          {
            "properties": {
              "region": {
                "allOf": [
                  {
                    "description": "The region that the block storage volume is located in. When setting a region, the value should be the slug identifier for the region. When you query a block storage volume, the entire region object will be returned."
                  },
                  {
                    "$ref": "#/components/schemas/region"
                  }
                ],
                "example": {
                  "name": "New York 1",
                  "slug": "nyc1",
                  "sizes": [
                    "s-1vcpu-1gb",
                    "s-1vcpu-2gb",
                    "s-1vcpu-3gb",
                    "s-2vcpu-2gb",
                    "s-3vcpu-1gb",
                    "s-2vcpu-4gb",
                    "s-4vcpu-8gb",
                    "s-6vcpu-16gb",
                    "s-8vcpu-32gb",
                    "s-12vcpu-48gb",
                    "s-16vcpu-64gb",
                    "s-20vcpu-96gb",
                    "s-24vcpu-128gb",
                    "s-32vcpu-192gb"
                  ],
                  "features": [
                    "private_networking",
                    "backups",
                    "ipv6",
                    "metadata"
                  ],
                  "available": true
                },
                "readOnly": true
              },
              "filesystem_type": {
                "type": "string",
                "description": "The type of filesystem currently in-use on the volume.",
                "example": "ext4"
              },
              "filesystem_label": {
                "type": "string",
                "description": "The label currently applied to the filesystem.",
                "example": "example"
              }
            }
          }
        ]
      },
      "volume_snapshot_id": {
        "properties": {
          "snapshot_id": {
            "type": "string",
            "description": "The unique identifier for the volume snapshot from which to create the volume.",
            "example": "b0798135-fb76-11eb-946a-0a58ac146f33"
          }
        }
      },
      "new_volume_ext4": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/volume_base"
          },
          {
            "$ref": "#/components/schemas/volume_snapshot_id"
          },
          {
            "$ref": "#/components/schemas/volume_write_file_system_type"
          },
          {
            "properties": {
              "region": {
                "$ref": "#/components/schemas/region_slug"
              },
              "filesystem_label": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/volume_write_file_system_label"
                  },
                  {
                    "maxLength": 16
                  }
                ]
              }
            },
            "required": [
              "name",
              "size_gigabytes",
              "region",
              "filesystem_type"
            ]
          }
        ]
      },
      "volume_write_file_system_type": {
        "type": "object",
        "required": [
          "filesystem_type"
        ],
        "properties": {
          "filesystem_type": {
            "type": "string",
            "description": "The name of the filesystem type to be used on the volume. When provided, the volume will automatically be formatted to the specified filesystem type. Currently, the available options are `ext4` and `xfs`. Pre-formatted volumes are automatically mounted when attached to Ubuntu, Debian, Fedora, Fedora Atomic, and CentOS Droplets created on or after April 26, 2018. Attaching pre-formatted volumes to other Droplets is not recommended.",
            "example": "ext4"
          }
        },
        "discriminator": {
          "propertyName": "filesystem_type",
          "mapping": {
            "EXT4": "#/components/schemas/new_volume_ext4",
            "XFS": "#/components/schemas/new_volume_xfs"
          }
        }
      },
      "volume_write_file_system_label": {
        "type": "string",
        "description": "The label applied to the filesystem. Labels for ext4 type filesystems may contain 16 characters while lables for xfs type filesystems are limited to 12 characters. May only be used in conjunction with filesystem_type.",
        "example": "example"
      },
      "new_volume_xfs": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/volume_base"
          },
          {
            "$ref": "#/components/schemas/volume_snapshot_id"
          },
          {
            "$ref": "#/components/schemas/volume_write_file_system_type"
          },
          {
            "properties": {
              "region": {
                "$ref": "#/components/schemas/region_slug"
              },
              "filesystem_label": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/volume_write_file_system_label"
                  },
                  {
                    "maxLength": 12
                  }
                ]
              }
            },
            "required": [
              "name",
              "size_gigabytes",
              "region",
              "filesystem_type"
            ]
          }
        ]
      },
      "volume_action_post_base": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The volume action to initiate.",
            "enum": [
              "attach",
              "detach",
              "resize"
            ],
            "example": "attach"
          },
          "region": {
            "$ref": "#/components/schemas/region_slug"
          }
        },
        "required": [
          "type"
        ]
      },
      "volume_action_droplet_id": {
        "type": "integer",
        "description": "The unique identifier for the Droplet the volume will be attached or detached from.",
        "example": 11612190
      },
      "volume_action_post_attach": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/volume_action_post_base"
          },
          {
            "properties": {
              "droplet_id": {
                "$ref": "#/components/schemas/volume_action_droplet_id"
              },
              "tags": {
                "$ref": "#/components/schemas/tags_array"
              }
            },
            "required": [
              "droplet_id"
            ]
          }
        ]
      },
      "volume_action_post_detach": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/volume_action_post_base"
          },
          {
            "properties": {
              "droplet_id": {
                "$ref": "#/components/schemas/volume_action_droplet_id"
              }
            },
            "required": [
              "droplet_id"
            ]
          }
        ]
      },
      "volume_action": {
        "type": "object",
        "allOf": [
          {
            "properties": {
              "type": {
                "type": "string",
                "description": "This is the type of action that the object represents. For example, this could be \"attach_volume\" to represent the state of a volume attach action.",
                "example": "attach_volume"
              },
              "resource_id": {
                "type": "integer",
                "nullable": true,
                "example": null
              }
            }
          },
          {
            "$ref": "#/components/schemas/action"
          }
        ]
      },
      "volume_action_post_resize": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/volume_action_post_base"
          },
          {
            "properties": {
              "size_gigabytes": {
                "type": "integer",
                "description": "The new size of the block storage volume in GiB (1024^3).",
                "maximum": 16384
              }
            },
            "required": [
              "size_gigabytes"
            ]
          }
        ]
      },
      "vpc_updatable": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "pattern": "^[a-zA-Z0-9\\-\\.]+$",
            "example": "env.prod-vpc",
            "description": "The name of the VPC. Must be unique and may only contain alphanumeric characters, dashes, and periods."
          },
          "description": {
            "type": "string",
            "maxLength": 255,
            "example": "VPC for production environment",
            "description": "A free-form text field for describing the VPC's purpose. It may be a maximum of 255 characters."
          }
        }
      },
      "vpc_create": {
        "type": "object",
        "properties": {
          "region": {
            "type": "string",
            "example": "nyc1",
            "description": "The slug identifier for the region where the VPC will be created."
          },
          "ip_range": {
            "type": "string",
            "example": "10.10.10.0/24",
            "description": "The range of IP addresses in the VPC in CIDR notation. Network ranges cannot overlap with other networks in the same account and must be in range of private addresses as defined in RFC1918. It may not be smaller than `/24` nor larger than `/16`. If no IP range is specified, a `/20` network range is generated that won't conflict with other VPC networks in your account."
          }
        }
      },
      "vpc_default": {
        "type": "object",
        "properties": {
          "default": {
            "type": "boolean",
            "example": true,
            "description": "A boolean value indicating whether or not the VPC is the default network for the region. All applicable resources are placed into the default VPC network unless otherwise specified during their creation. The `default` field cannot be unset from `true`. If you want to set a new default VPC network, update the `default` field of another VPC network in the same region. The previous network's `default` field will be set to `false` when a new default VPC has been defined."
          }
        }
      },
      "vpc_base": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "readOnly": true,
            "example": "5a4981aa-9653-4bd1-bef5-d6bff52042e4",
            "description": "A unique ID that can be used to identify and reference the VPC."
          },
          "urn": {
            "$ref": "#/components/schemas/urn"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "example": "2020-03-13T19:20:47.442049222Z",
            "description": "A time value given in ISO8601 combined date and time format."
          }
        }
      },
      "vpc": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/vpc_updatable"
          },
          {
            "$ref": "#/components/schemas/vpc_create"
          },
          {
            "$ref": "#/components/schemas/vpc_default"
          },
          {
            "$ref": "#/components/schemas/vpc_base"
          }
        ]
      },
      "vpc_member": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "nyc1-load-balancer-01",
            "description": "The name of the resource."
          },
          "urn": {
            "$ref": "#/components/schemas/urn"
          },
          "created_at": {
            "type": "string",
            "example": "2020-03-13T19:30:48Z",
            "description": "A time value given in ISO8601 combined date and time format that represents when the resource was created."
          }
        }
      }
    },
    "responses": {
      "unexpected_error": {
        "description": "Unexpected error",
        "headers": {
          "ratelimit-limit": {
            "$ref": "#/components/headers/ratelimit-limit"
          },
          "ratelimit-remaining": {
            "$ref": "#/components/headers/ratelimit-remaining"
          },
          "ratelimit-reset": {
            "$ref": "#/components/headers/ratelimit-reset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/error"
            },
            "example": {
              "id": "im_a_teapot",
              "message": "how do you do?"
            }
          }
        }
      },
      "all_1_clicks": {
        "description": "A JSON object with a key of `1_clicks`.",
        "headers": {
          "ratelimit-limit": {
            "$ref": "#/components/headers/ratelimit-limit"
          },
          "ratelimit-remaining": {
            "$ref": "#/components/headers/ratelimit-remaining"
          },
          "ratelimit-reset": {
            "$ref": "#/components/headers/ratelimit-reset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "1_clicks": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/1_click"
                  }
                }
              }
            },
            "examples": {
              "All 1-Click Applications": {
                "value": {
                  "1_clicks": [
                    {
                      "slug": "monitoring",
                      "type": "kubernetes"
                    },
                    {
                      "slug": "wordpress-18-04",
                      "type": "droplet"
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "unauthorized": {
        "description": "Unauthorized",
        "headers": {
          "ratelimit-limit": {
            "$ref": "#/components/headers/ratelimit-limit"
          },
          "ratelimit-remaining": {
            "$ref": "#/components/headers/ratelimit-remaining"
          },
          "ratelimit-reset": {
            "$ref": "#/components/headers/ratelimit-reset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/error"
            },
            "example": {
              "id": "unauthorized",
              "message": "Unable to authenticate you."
            }
          }
        }
      },
      "too_many_requests": {
        "description": "API Rate limit exceeded",
        "headers": {
          "ratelimit-limit": {
            "$ref": "#/components/headers/ratelimit-limit"
          },
          "ratelimit-remaining": {
            "$ref": "#/components/headers/ratelimit-remaining"
          },
          "ratelimit-reset": {
            "$ref": "#/components/headers/ratelimit-reset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/error"
            },
            "example": {
              "id": "too_many_requests",
              "message": "API Rate limit exceeded."
            }
          }
        }
      },
      "server_error": {
        "description": "Server error.",
        "headers": {
          "ratelimit-limit": {
            "$ref": "#/components/headers/ratelimit-limit"
          },
          "ratelimit-remaining": {
            "$ref": "#/components/headers/ratelimit-remaining"
          },
          "ratelimit-reset": {
            "$ref": "#/components/headers/ratelimit-reset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/error"
            },
            "example": {
              "id": "server_error",
              "message": "Unexpected server-side error"
            }
          }
        }
      },
      "1_click_create": {
        "description": "The response will verify that a job has been successfully created to install a 1-Click. The\npost-installation lifecycle of a 1-Click application can not be managed via the DigitalOcean\nAPI. For additional details specific to the 1-Click, find and view its\n[DigitalOcean Marketplace](https://marketplace.digitalocean.com) page.\n",
        "headers": {
          "ratelimit-limit": {
            "$ref": "#/components/headers/ratelimit-limit"
          },
          "ratelimit-remaining": {
            "$ref": "#/components/headers/ratelimit-remaining"
          },
          "ratelimit-reset": {
            "$ref": "#/components/headers/ratelimit-reset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "A message about the result of the request.",
                  "example": "Successfully kicked off addon job."
                }
              }
            },
            "examples": {
              "Install a 1-Click Application": {
                "value": {
                  "message": "Successfully kicked off addon job."
                }
              }
            }
          }
        }
      },
      "account": {
        "description": "A JSON object keyed on account with an excerpt of the current user account data.",
        "headers": {
          "ratelimit-limit": {
            "$ref": "#/components/headers/ratelimit-limit"
          },
          "ratelimit-remaining": {
            "$ref": "#/components/headers/ratelimit-remaining"
          },
          "ratelimit-reset": {
            "$ref": "#/components/headers/ratelimit-reset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "account": {
                  "$ref": "#/components/schemas/account"
                }
              }
            }
          }
        }
      },
      "all_keys": {
        "description": "A JSON object with the key set to `ssh_keys`. The value is an array of `ssh_key` objects, each of which contains the standard `ssh_key` attributes.",
        "headers": {
          "ratelimit-limit": {
            "$ref": "#/components/headers/ratelimit-limit"
          },
          "ratelimit-remaining": {
            "$ref": "#/components/headers/ratelimit-remaining"
          },
          "ratelimit-reset": {
            "$ref": "#/components/headers/ratelimit-reset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "properties": {
                    "ssh_keys": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ssh_key"
                      }
                    }
                  }
                },
                {
                  "$ref": "#/components/schemas/pagination"
                },
                {
                  "$ref": "#/components/schemas/meta"
                }
              ],
              "example": {
                "ssh_keys": [
                  {
                    "id": 289794,
                    "fingerprint": "3b:16:e4:bf:8b:00:8b:b8:59:8c:a9:d3:f0:19:fa:45",
                    "public_key": "ssh-rsa ANOTHEREXAMPLEaC1yc2EAAAADAQABAAAAQQDDHr/jh2Jy4yALcK4JyWbVkPRaWmhck3IgCoeOO3z1e2dBowLh64QAM+Qb72pxekALga2oi4GvT+TlWNhzPH4V anotherexample",
                    "name": "Other Public Key"
                  }
                ],
                "meta": {
                  "total": 1
                }
              }
            }
          }
        }
      },
      "key_created": {
        "description": "The response body will be a JSON object with a key set to `ssh_key`.",
        "headers": {
          "ratelimit-limit": {
            "$ref": "#/components/headers/ratelimit-limit"
          },
          "ratelimit-remaining": {
            "$ref": "#/components/headers/ratelimit-remaining"
          },
          "ratelimit-reset": {
            "$ref": "#/components/headers/ratelimit-reset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "ssh_key": {
                  "$ref": "#/components/schemas/ssh_key"
                }
              }
            }
          }
        },
        "links": {
          "get_ssh_key_by_id": {
            "$ref": "#/components/links/get_ssh_key_by_id"
          },
          "get_ssh_key_by_fingerprint": {
            "$ref": "#/components/links/get_ssh_key_by_fingerprint"
          },
          "delete_ssh_key_by_id": {
            "$ref": "#/components/links/delete_ssh_key_by_id"
          },
          "delete_ssh_key_by_fingerprint": {
            "$ref": "#/components/links/delete_ssh_key_by_fingerprint"
          }
        }
      },
      "existing_key": {
        "description": "A JSON object with the key set to `ssh_key`. The value is an `ssh_key` object containing the standard `ssh_key` attributes.",
        "headers": {
          "ratelimit-limit": {
            "$ref": "#/components/headers/ratelimit-limit"
          },
          "ratelimit-remaining": {
            "$ref": "#/components/headers/ratelimit-remaining"
          },
          "ratelimit-reset": {
            "$ref": "#/components/headers/ratelimit-reset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "ssh_key": {
                  "$ref": "#/components/schemas/ssh_key"
                }
              }
            }
          }
        },
        "links": {
          "get_ssh_key_by_id": {
            "$ref": "#/components/links/get_ssh_key_by_id"
          },
          "get_ssh_key_by_fingerprint": {
            "$ref": "#/components/links/get_ssh_key_by_fingerprint"
          },
          "delete_ssh_key_by_id": {
            "$ref": "#/components/links/delete_ssh_key_by_id"
          },
          "delete_ssh_key_by_fingerprint": {
            "$ref": "#/components/links/delete_ssh_key_by_fingerprint"
          }
        }
      },
      "not_found": {
        "description": "The resource was not found.",
        "headers": {
          "ratelimit-limit": {
            "$ref": "#/components/headers/ratelimit-limit"
          },
          "ratelimit-remaining": {
            "$ref": "#/components/headers/ratelimit-remaining"
          },
          "ratelimit-reset": {
            "$ref": "#/components/headers/ratelimit-reset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/error"
            },
            "example": {
              "id": "not_found",
              "message": "The resource you requested could not be found."
            }
          }
        }
      },
      "no_content": {
        "description": "The action was successful and the response body is empty.",
        "headers": {
          "ratelimit-limit": {
            "$ref": "#/components/headers/ratelimit-limit"
          },
          "ratelimit-remaining": {
            "$ref": "#/components/headers/ratelimit-remaining"
          },
          "ratelimit-reset": {
            "$ref": "#/components/headers/ratelimit-reset"
          }
        }
      },
      "all_actions": {
        "description": "The results will be returned as a JSON object with an actions key.  This will be set to an array filled with action objects containing the standard action attributes",
        "headers": {
          "ratelimit-limit": {
            "$ref": "#/components/headers/ratelimit-limit"
          },
          "ratelimit-remaining": {
            "$ref": "#/components/headers/ratelimit-remaining"
          },
          "ratelimit-reset": {
            "$ref": "#/components/headers/ratelimit-reset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "type": "object",
                  "properties": {
                    "actions": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/action"
                      }
                    }
                  }
                },
                {
                  "$ref": "#/components/schemas/pagination"
                },
                {
                  "$ref": "#/components/schemas/meta"
                }
              ]
            }
          }
        }
      },
      "existing_action": {
        "description": "The result will be a JSON object with an action key.  This will be set to an action object containing the standard action attributes.",
        "headers": {
          "ratelimit-limit": {
            "$ref": "#/components/headers/ratelimit-limit"
          },
          "ratelimit-remaining": {
            "$ref": "#/components/headers/ratelimit-remaining"
          },
          "ratelimit-reset": {
            "$ref": "#/components/headers/ratelimit-reset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "action": {
                  "$ref": "#/components/schemas/action"
                }
              }
            }
          }
        }
      },
      "list_apps": {
        "description": "A JSON object with a `apps` key. This is list of object `apps`.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/apps_response"
            },
            "examples": {
              "apps": {
                "$ref": "#/components/examples/apps"
              }
            }
          }
        },
        "headers": {
          "ratelimit-limit": {
            "$ref": "#/components/headers/ratelimit-limit"
          },
          "ratelimit-remaining": {
            "$ref": "#/components/headers/ratelimit-remaining"
          },
          "ratelimit-reset": {
            "$ref": "#/components/headers/ratelimit-reset"
          }
        }
      },
      "new_app": {
        "description": "A JSON of a `spec` object.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/app_response"
            },
            "examples": {
              "app": {
                "$ref": "#/components/examples/app"
              }
            }
          }
        },
        "headers": {
          "ratelimit-limit": {
            "$ref": "#/components/headers/ratelimit-limit"
          },
          "ratelimit-remaining": {
            "$ref": "#/components/headers/ratelimit-remaining"
          },
          "ratelimit-reset": {
            "$ref": "#/components/headers/ratelimit-reset"
          }
        }
      },
      "get_app": {
        "description": "A JSON with key `app`",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/app_response"
            },
            "examples": {
              "app": {
                "$ref": "#/components/examples/app"
              }
            }
          }
        },
        "headers": {
          "ratelimit-limit": {
            "$ref": "#/components/headers/ratelimit-limit"
          },
          "ratelimit-remaining": {
            "$ref": "#/components/headers/ratelimit-remaining"
          },
          "ratelimit-reset": {
            "$ref": "#/components/headers/ratelimit-reset"
          }
        }
      },
      "update_app": {
        "description": "A JSON object of the updated `app`",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/app_response"
            },
            "examples": {
              "app": {
                "$ref": "#/components/examples/app"
              }
            }
          }
        },
        "headers": {
          "ratelimit-limit": {
            "$ref": "#/components/headers/ratelimit-limit"
          },
          "ratelimit-remaining": {
            "$ref": "#/components/headers/ratelimit-remaining"
          },
          "ratelimit-reset": {
            "$ref": "#/components/headers/ratelimit-reset"
          }
        }
      },
      "delete_app": {
        "description": "the ID of the app deleted.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/apps_delete_app_response"
            },
            "example": {
              "id": "b7d64052-3706-4cb7-b21a-c5a2f44e63b3"
            }
          }
        },
        "headers": {
          "ratelimit-limit": {
            "$ref": "#/components/headers/ratelimit-limit"
          },
          "ratelimit-remaining": {
            "$ref": "#/components/headers/ratelimit-remaining"
          },
          "ratelimit-reset": {
            "$ref": "#/components/headers/ratelimit-reset"
          }
        }
      },
      "existing_deployments": {
        "description": "A JSON object with a `deployments` key. This will be a list of all app deployments",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/apps_deployments_response"
            },
            "examples": {
              "deployments": {
                "$ref": "#/components/examples/deployments"
              }
            }
          }
        },
        "headers": {
          "ratelimit-limit": {
            "$ref": "#/components/headers/ratelimit-limit"
          },
          "ratelimit-remaining": {
            "$ref": "#/components/headers/ratelimit-remaining"
          },
          "ratelimit-reset": {
            "$ref": "#/components/headers/ratelimit-reset"
          }
        }
      },
      "new_app_deployment": {
        "description": "A JSON object with a `deployment` key.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/apps_deployment_response"
            },
            "examples": {
              "deployment": {
                "$ref": "#/components/examples/deployment"
              }
            }
          }
        },
        "headers": {
          "ratelimit-limit": {
            "$ref": "#/components/headers/ratelimit-limit"
          },
          "ratelimit-remaining": {
            "$ref": "#/components/headers/ratelimit-remaining"
          },
          "ratelimit-reset": {
            "$ref": "#/components/headers/ratelimit-reset"
          }
        }
      },
      "list_deployment": {
        "description": "A JSON of the requested deployment",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/apps_deployment_response"
            },
            "examples": {
              "deployment": {
                "$ref": "#/components/examples/deployment"
              }
            }
          }
        },
        "headers": {
          "ratelimit-limit": {
            "$ref": "#/components/headers/ratelimit-limit"
          },
          "ratelimit-remaining": {
            "$ref": "#/components/headers/ratelimit-remaining"
          },
          "ratelimit-reset": {
            "$ref": "#/components/headers/ratelimit-reset"
          }
        }
      },
      "cancel_deployment": {
        "description": "A JSON the `deployment` that was just cancelled.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/apps_deployment_response"
            },
            "examples": {
              "deployment": {
                "$ref": "#/components/examples/deployment"
              }
            }
          }
        },
        "headers": {
          "ratelimit-limit": {
            "$ref": "#/components/headers/ratelimit-limit"
          },
          "ratelimit-remaining": {
            "$ref": "#/components/headers/ratelimit-remaining"
          },
          "ratelimit-reset": {
            "$ref": "#/components/headers/ratelimit-reset"
          }
        }
      },
      "list_logs": {
        "description": "A JSON object with urls that point to archived logs",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/apps_get_logs_response"
            },
            "examples": {
              "logs": {
                "$ref": "#/components/examples/logs"
              }
            }
          }
        },
        "headers": {
          "ratelimit-limit": {
            "$ref": "#/components/headers/ratelimit-limit"
          },
          "ratelimit-remaining": {
            "$ref": "#/components/headers/ratelimit-remaining"
          },
          "ratelimit-reset": {
            "$ref": "#/components/headers/ratelimit-reset"
          }
        }
      },
      "list_logs_aggregate": {
        "description": "A JSON object with urls that point to archived logs",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/apps_get_logs_response"
            },
            "examples": {
              "logs": {
                "$ref": "#/components/examples/logs"
              }
            }
          }
        },
        "headers": {
          "ratelimit-limit": {
            "$ref": "#/components/headers/ratelimit-limit"
          },
          "ratelimit-remaining": {
            "$ref": "#/components/headers/ratelimit-remaining"
          },
          "ratelimit-reset": {
            "$ref": "#/components/headers/ratelimit-reset"
          }
        }
      },
      "all_tiers": {
        "description": "A JSON object with a `tiers` key. This will be a list of all app tiers",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/apps_list_tiers_response"
            },
            "examples": {
              "tiers": {
                "$ref": "#/components/examples/tiers"
              }
            }
          }
        },
        "headers": {
          "ratelimit-limit": {
            "$ref": "#/components/headers/ratelimit-limit"
          },
          "ratelimit-remaining": {
            "$ref": "#/components/headers/ratelimit-remaining"
          },
          "ratelimit-reset": {
            "$ref": "#/components/headers/ratelimit-reset"
          }
        }
      },
      "get_tier": {
        "description": "A JSON with the key `tier`",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/apps_get_tier_response"
            },
            "examples": {
              "tier": {
                "$ref": "#/components/examples/tier"
              }
            }
          }
        },
        "headers": {
          "ratelimit-limit": {
            "$ref": "#/components/headers/ratelimit-limit"
          },
          "ratelimit-remaining": {
            "$ref": "#/components/headers/ratelimit-remaining"
          },
          "ratelimit-reset": {
            "$ref": "#/components/headers/ratelimit-reset"
          }
        }
      },
      "list_instance": {
        "description": "A JSON with key `instance_sizes`",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/apps_list_instance_sizes_response"
            },
            "examples": {
              "instance_sizes": {
                "$ref": "#/components/examples/instance_sizes"
              }
            }
          }
        },
        "headers": {
          "ratelimit-limit": {
            "$ref": "#/components/headers/ratelimit-limit"
          },
          "ratelimit-remaining": {
            "$ref": "#/components/headers/ratelimit-remaining"
          },
          "ratelimit-reset": {
            "$ref": "#/components/headers/ratelimit-reset"
          }
        }
      },
      "get_instance": {
        "description": "A JSON with key `instance_size`",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/apps_get_instance_size_response"
            },
            "examples": {
              "instance_size": {
                "$ref": "#/components/examples/instance_size"
              }
            }
          }
        },
        "headers": {
          "ratelimit-limit": {
            "$ref": "#/components/headers/ratelimit-limit"
          },
          "ratelimit-remaining": {
            "$ref": "#/components/headers/ratelimit-remaining"
          },
          "ratelimit-reset": {
            "$ref": "#/components/headers/ratelimit-reset"
          }
        }
      },
      "list_regions": {
        "description": "A JSON object with key `regions`",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/apps_list_regions_response"
            },
            "examples": {
              "regions": {
                "$ref": "#/components/examples/regions"
              }
            }
          }
        },
        "headers": {
          "ratelimit-limit": {
            "$ref": "#/components/headers/ratelimit-limit"
          },
          "ratelimit-remaining": {
            "$ref": "#/components/headers/ratelimit-remaining"
          },
          "ratelimit-reset": {
            "$ref": "#/components/headers/ratelimit-reset"
          }
        }
      },
      "propose_app": {
        "description": "A JSON object.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/app_propose_response"
            },
            "examples": {
              "propose": {
                "$ref": "#/components/examples/propose"
              }
            }
          }
        },
        "headers": {
          "ratelimit-limit": {
            "$ref": "#/components/headers/ratelimit-limit"
          },
          "ratelimit-remaining": {
            "$ref": "#/components/headers/ratelimit-remaining"
          },
          "ratelimit-reset": {
            "$ref": "#/components/headers/ratelimit-reset"
          }
        }
      },
      "list_alerts": {
        "description": "A JSON object with a `alerts` key. This is list of object `alerts`.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/apps_list_alerts_response"
            },
            "examples": {
              "apps": {
                "$ref": "#/components/examples/alerts"
              }
            }
          }
        },
        "headers": {
          "ratelimit-limit": {
            "$ref": "#/components/headers/ratelimit-limit"
          },
          "ratelimit-remaining": {
            "$ref": "#/components/headers/ratelimit-remaining"
          },
          "ratelimit-reset": {
            "$ref": "#/components/headers/ratelimit-reset"
          }
        }
      },
      "assign_alert_destinations": {
        "description": "A JSON object with an `alert` key. This is an object of type `alert`.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/apps_alert_response"
            },
            "examples": {
              "apps": {
                "$ref": "#/components/examples/alert"
              }
            }
          }
        },
        "headers": {
          "ratelimit-limit": {
            "$ref": "#/components/headers/ratelimit-limit"
          },
          "ratelimit-remaining": {
            "$ref": "#/components/headers/ratelimit-remaining"
          },
          "ratelimit-reset": {
            "$ref": "#/components/headers/ratelimit-reset"
          }
        }
      },
      "all_cdn_endpoints": {
        "description": "The result will be a JSON object with an `endpoints` key. This will be set to an array of endpoint objects, each of which will contain the standard CDN endpoint attributes.",
        "headers": {
          "ratelimit-limit": {
            "$ref": "#/components/headers/ratelimit-limit"
          },
          "ratelimit-remaining": {
            "$ref": "#/components/headers/ratelimit-remaining"
          },
          "ratelimit-reset": {
            "$ref": "#/components/headers/ratelimit-reset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "type": "object",
                  "properties": {
                    "endpoints": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/cdn_endpoint"
                      }
                    }
                  }
                },
                {
                  "$ref": "#/components/schemas/pagination"
                },
                {
                  "$ref": "#/components/schemas/meta"
                }
              ],
              "example": {
                "endpoints": [
                  {
                    "id": "19f06b6a-3ace-4315-b086-499a0e521b76",
                    "origin": "static-images.nyc3.digitaloceanspaces.com",
                    "endpoint": "static-images.nyc3.cdn.digitaloceanspaces.com",
                    "created_at": "2018-07-19T15:04:16Z",
                    "certificate_id": "892071a0-bb95-49bc-8021-3afd67a210bf",
                    "custom_domain": "static.example.com",
                    "ttl": 3600
                  }
                ],
                "meta": {
                  "total": 1
                }
              }
            }
          }
        }
      },
      "existing_endpoint": {
        "description": "The response will be a JSON object with an `endpoint` key. This will be set to an object containing the standard CDN endpoint attributes.",
        "headers": {
          "ratelimit-limit": {
            "$ref": "#/components/headers/ratelimit-limit"
          },
          "ratelimit-remaining": {
            "$ref": "#/components/headers/ratelimit-remaining"
          },
          "ratelimit-reset": {
            "$ref": "#/components/headers/ratelimit-reset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "endpoint": {
                  "$ref": "#/components/schemas/cdn_endpoint"
                }
              }
            },
            "examples": {
              "CDN Endpoint": {
                "value": {
                  "endpoint": {
                    "id": "19f06b6a-3ace-4315-b086-499a0e521b76",
                    "origin": "static-images.nyc3.digitaloceanspaces.com",
                    "endpoint": "static-images.nyc3.cdn.digitaloceanspaces.com",
                    "created_at": "2018-07-19T15:04:16Z",
                    "ttl": 3600
                  }
                }
              },
              "CDN Endpoint With Custom Domain": {
                "value": {
                  "endpoint": {
                    "id": "19f06b6a-3ace-4315-b086-499a0e521b76",
                    "origin": "static-images.nyc3.digitaloceanspaces.com",
                    "endpoint": "static-images.nyc3.cdn.digitaloceanspaces.com",
                    "created_at": "2018-07-19T15:04:16Z",
                    "certificate_id": "892071a0-bb95-49bc-8021-3afd67a210bf",
                    "custom_domain": "static.example.com",
                    "ttl": 3600
                  }
                }
              }
            }
          }
        }
      },
      "all_certificates": {
        "description": "The result will be a JSON object with a `certificates` key. This will be set to an array of certificate objects, each of which will contain the standard certificate attributes.",
        "headers": {
          "ratelimit-limit": {
            "$ref": "#/components/headers/ratelimit-limit"
          },
          "ratelimit-remaining": {
            "$ref": "#/components/headers/ratelimit-remaining"
          },
          "ratelimit-reset": {
            "$ref": "#/components/headers/ratelimit-reset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "type": "object",
                  "properties": {
                    "certificates": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/certificate"
                      }
                    }
                  }
                },
                {
                  "$ref": "#/components/schemas/pagination"
                },
                {
                  "$ref": "#/components/schemas/meta"
                }
              ]
            },
            "examples": {
              "AllCertificates": {
                "$ref": "#/components/examples/certificates_all"
              }
            }
          }
        }
      },
      "new_certificate": {
        "description": "The response will be a JSON object with a key called `certificate`. The value of this will be an object that contains the standard attributes associated with a certificate.\nWhen using Let's Encrypt, the initial value of the certificate's `state` attribute will be `pending`. When the certificate has been successfully issued by Let's Encrypt, this will transition to `verified` and be ready for use.",
        "headers": {
          "ratelimit-limit": {
            "$ref": "#/components/headers/ratelimit-limit"
          },
          "ratelimit-remaining": {
            "$ref": "#/components/headers/ratelimit-remaining"
          },
          "ratelimit-reset": {
            "$ref": "#/components/headers/ratelimit-reset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "certificate": {
                  "$ref": "#/components/schemas/certificate"
                }
              }
            },
            "examples": {
              "Custom Certificate": {
                "$ref": "#/components/examples/certificates_custom"
              },
              "Let's Encrypt Certificate": {
                "$ref": "#/components/examples/certificates_lets_encrypt_pending"
              }
            }
          }
        }
      },
      "existing_certificate": {
        "description": "The response will be a JSON object with a `certificate` key. This will be set to an object containing the standard certificate attributes.",
        "headers": {
          "ratelimit-limit": {
            "$ref": "#/components/headers/ratelimit-limit"
          },
          "ratelimit-remaining": {
            "$ref": "#/components/headers/ratelimit-remaining"
          },
          "ratelimit-reset": {
            "$ref": "#/components/headers/ratelimit-reset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "certificate": {
                  "$ref": "#/components/schemas/certificate"
                }
              }
            },
            "examples": {
              "Custom Certificate": {
                "$ref": "#/components/examples/certificates_custom"
              },
              "Let's Encrypt Certificate": {
                "$ref": "#/components/examples/certificates_lets_encrypt"
              }
            }
          }
        }
      },
      "balance": {
        "description": "The response will be a JSON object that contains the following attributes",
        "headers": {
          "ratelimit-limit": {
            "$ref": "#/components/headers/ratelimit-limit"
          },
          "ratelimit-remaining": {
            "$ref": "#/components/headers/ratelimit-remaining"
          },
          "ratelimit-reset": {
            "$ref": "#/components/headers/ratelimit-reset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/balance"
            },
            "example": {
              "month_to_date_balance": "23.44",
              "account_balance": "12.23",
              "month_to_date_usage": "11.21",
              "generated_at": "2019-07-09T15:01:12Z"
            }
          }
        }
      },
      "billing_history": {
        "description": "The response will be a JSON object that contains the following attributes",
        "headers": {
          "ratelimit-limit": {
            "$ref": "#/components/headers/ratelimit-limit"
          },
          "ratelimit-remaining": {
            "$ref": "#/components/headers/ratelimit-remaining"
          },
          "ratelimit-reset": {
            "$ref": "#/components/headers/ratelimit-reset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "type": "object",
                  "properties": {
                    "billing_history": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/billing_history"
                      }
                    }
                  },
                  "required": [
                    "billing_history"
                  ]
                },
                {
                  "$ref": "#/components/schemas/pagination"
                },
                {
                  "$ref": "#/components/schemas/meta"
                }
              ],
              "example": {
                "billing_history": [
                  {
                    "description": "Invoice for May 2018",
                    "amount": "12.34",
                    "invoice_id": "123",
                    "invoice_uuid": "example-uuid",
                    "date": "2018-06-01T08:44:38Z",
                    "type": "Invoice"
                  },
                  {
                    "description": "Payment (MC 2018)",
                    "amount": "-12.34",
                    "date": "2018-06-02T08:44:38Z",
                    "type": "Payment"
                  }
                ],
                "links": {
                  "pages": {
                    "next": "https://api.digitalocean.com/v2/customers/my/billing_history?page=2&per_page=2",
                    "last": "https://api.digitalocean.com/v2/customers/my/billing_history?page=3&per_page=2"
                  }
                },
                "meta": {
                  "total": 5
                }
              }
            }
          }
        }
      },
      "invoices": {
        "description": "The response will be a JSON object contains that contains a list of invoices under the `invoices` key, and the invoice preview under the `invoice_preview` key.\nEach element contains the invoice summary attributes.",
        "headers": {
          "ratelimit-limit": {
            "$ref": "#/components/headers/ratelimit-limit"
          },
          "ratelimit-remaining": {
            "$ref": "#/components/headers/ratelimit-remaining"
          },
          "ratelimit-reset": {
            "$ref": "#/components/headers/ratelimit-reset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "type": "object",
                  "properties": {
                    "invoices": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/invoice_preview"
                      }
                    },
                    "invoice_preview": {
                      "$ref": "#/components/schemas/invoice_preview"
                    }
                  }
                },
                {
                  "$ref": "#/components/schemas/pagination"
                },
                {
                  "$ref": "#/components/schemas/meta"
                }
              ],
              "example": {
                "invoices": [
                  {
                    "invoice_uuid": "22737513-0ea7-4206-8ceb-98a575af7681",
                    "amount": "12.34",
                    "invoice_period": "2019-12"
                  },
                  {
                    "invoice_uuid": "fdabb512-6faf-443c-ba2e-665452332a9e",
                    "amount": "23.45",
                    "invoice_period": "2019-11"
                  }
                ],
                "invoice_preview": {
                  "invoice_uuid": "1afe95e6-0958-4eb0-8d9a-9c5060d3ef03",
                  "amount": "34.56",
                  "invoice_period": "2020-02",
                  "updated_at": "2020-02-23T06:31:50Z"
                },
                "links": {
                  "pages": {
                    "next": "https://api.digitalocean.com/v2/customers/my/invoices?page=2&per_page=2",
                    "last": "https://api.digitalocean.com/v2/customers/my/invoices?page=35&per_page=2"
                  }
                },
                "meta": {
                  "total": 70
                }
              }
            }
          }
        }
      },
      "invoice": {
        "description": "The response will be a JSON object with a key called `invoice_items`. This will be set to an array of invoice item objects.",
        "headers": {
          "ratelimit-limit": {
            "$ref": "#/components/headers/ratelimit-limit"
          },
          "ratelimit-remaining": {
            "$ref": "#/components/headers/ratelimit-remaining"
          },
          "ratelimit-reset": {
            "$ref": "#/components/headers/ratelimit-reset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "type": "object",
                  "properties": {
                    "invoice_items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/invoice_item"
                      }
                    }
                  }
                },
                {
                  "$ref": "#/components/schemas/pagination"
                },
                {
                  "$ref": "#/components/schemas/meta"
                }
              ],
              "example": {
                "invoice_items": [
                  {
                    "product": "Kubernetes Clusters",
                    "resource_uuid": "711157cb-37c8-4817-b371-44fa3504a39c",
                    "group_description": "my-doks-cluster",
                    "description": "a56e086a317d8410c8b4cfd1f4dc9f82",
                    "amount": "12.34",
                    "duration": "744",
                    "duration_unit": "Hours",
                    "start_time": "2020-01-01T00:00:00Z",
                    "end_time": "2020-02-01T00:00:00Z"
                  },
                  {
                    "product": "Spaces Subscription",
                    "description": "Spaces ($5/mo 250GB storage & 1TB bandwidth)",
                    "amount": "34.45",
                    "duration": "744",
                    "duration_unit": "Hours",
                    "start_time": "2020-01-01T00:00:00Z",
                    "end_time": "2020-02-01T00:00:00Z"
                  }
                ],
                "links": {
                  "pages": {
                    "next": "https://api.digitalocean.com/v2/customers/my/invoices/22737513-0ea7-4206-8ceb-98a575af7681?page=2&per_page=2",
                    "last": "https://api.digitalocean.com/v2/customers/my/invoices/22737513-0ea7-4206-8ceb-98a575af7681?page=3&per_page=2"
                  }
                },
                "meta": {
                  "total": 6
                }
              }
            }
          }
        }
      },
      "invoice_csv": {
        "description": "The response will be a CSV file.",
        "headers": {
          "content-disposition": {
            "$ref": "#/components/headers/content-disposition"
          },
          "ratelimit-limit": {
            "$ref": "#/components/headers/ratelimit-limit"
          },
          "ratelimit-remaining": {
            "$ref": "#/components/headers/ratelimit-remaining"
          },
          "ratelimit-reset": {
            "$ref": "#/components/headers/ratelimit-reset"
          }
        },
        "content": {
          "text/csv": {
            "schema": {
              "type": "string"
            },
            "example": "product,group_description,description,hours,start,end,USD,project_name,category\nFloating IPs,,Unused Floating IP - 1.1.1.1,100,2020-07-01 00:00:00 +0000,2020-07-22 18:14:39 +0000,$3.11,,iaas\nTaxes,,STATE SALES TAX (6.25%),,2020-07-01 00:00:00 +0000,2020-07-31 23:59:59 +0000,$0.16,,iaas\n"
          }
        }
      },
      "invoice_pdf": {
        "description": "The response will be a PDF file.",
        "headers": {
          "content-disposition": {
            "$ref": "#/components/headers/content-disposition"
          },
          "ratelimit-limit": {
            "$ref": "#/components/headers/ratelimit-limit"
          },
          "ratelimit-remaining": {
            "$ref": "#/components/headers/ratelimit-remaining"
          },
          "ratelimit-reset": {
            "$ref": "#/components/headers/ratelimit-reset"
          }
        },
        "content": {
          "application/pdf": {
            "schema": {
              "type": "string",
              "format": "binary"
            }
          }
        }
      },
      "invoice_summary": {
        "description": "To retrieve a summary for an invoice, send a GET request to  `/v2/customers/my/invoices/$INVOICE_UUID/summary`.",
        "headers": {
          "ratelimit-limit": {
            "$ref": "#/components/headers/ratelimit-limit"
          },
          "ratelimit-remaining": {
            "$ref": "#/components/headers/ratelimit-remaining"
          },
          "ratelimit-reset": {
            "$ref": "#/components/headers/ratelimit-reset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/invoice_summary"
            },
            "example": {
              "invoice_uuid": "22737513-0ea7-4206-8ceb-98a575af7681",
              "billing_period": "2020-01",
              "amount": "27.13",
              "user_name": "Sammy Shark",
              "user_billing_address": {
                "address_line1": "101 Shark Row",
                "city": "Atlantis",
                "region": "OC",
                "postal_code": "12345",
                "country_iso2_code": "US",
                "created_at": "2019-09-03T16:34:46.000+00:00",
                "updated_at": "2019-09-03T16:34:46.000+00:00"
              },
              "user_company": "DigitalOcean",
              "user_email": "sammy@digitalocean.com",
              "product_charges": {
                "name": "Product usage charges",
                "amount": "12.34",
                "items": [
                  {
                    "amount": "10.00",
                    "name": "Spaces Subscription",
                    "count": "1"
                  },
                  {
                    "amount": "2.34",
                    "name": "Database Clusters",
                    "count": "1"
                  }
                ]
              },
              "overages": {
                "name": "Overages",
                "amount": "3.45"
              },
              "taxes": {
                "name": "Taxes",
                "amount": "4.56"
              },
              "credits_and_adjustments": {
                "name": "Credits & adjustments",
                "amount": "6.78"
              }
            }
          }
        }
      },
      "database_clusters": {
        "description": "A JSON object with a key of `databases`.",
        "headers": {
          "ratelimit-limit": {
            "$ref": "#/components/headers/ratelimit-limit"
          },
          "ratelimit-remaining": {
            "$ref": "#/components/headers/ratelimit-remaining"
          },
          "ratelimit-reset": {
            "$ref": "#/components/headers/ratelimit-reset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "databases": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/database_cluster"
                  }
                }
              }
            },
            "example": {
              "databases": [
                {
                  "id": "9cc10173-e9ea-4176-9dbc-a4cee4c4ff30",
                  "name": "backend",
                  "engine": "pg",
                  "version": "10",
                  "connection": {
                    "uri": "postgres://doadmin:wv78n3zpz42xezdk@backend-do-user-19081923-0.db.ondigitalocean.com:25060/defaultdb?sslmode=require",
                    "database": "",
                    "host": "backend-do-user-19081923-0.db.ondigitalocean.com",
                    "port": 25060,
                    "user": "doadmin",
                    "password": "wv78n3zpz42xezdk",
                    "ssl": true
                  },
                  "private_connection": {
                    "uri": "postgres://doadmin:wv78n3zpz42xezdk@private-backend-do-user-19081923-0.db.ondigitalocean.com:25060/defaultdb?sslmode=require",
                    "database": "",
                    "host": "private-backend-do-user-19081923-0.db.ondigitalocean.com",
                    "port": 25060,
                    "user": "doadmin",
                    "password": "wv78n3zpz42xezdk",
                    "ssl": true
                  },
                  "users": [
                    {
                      "name": "doadmin",
                      "role": "primary",
                      "password": "wv78n3zpz42xezdk"
                    }
                  ],
                  "db_names": [
                    "defaultdb"
                  ],
                  "num_nodes": 1,
                  "region": "nyc3",
                  "status": "online",
                  "created_at": "2019-01-11T18:37:36Z",
                  "maintenance_window": {
                    "day": "saturday",
                    "hour": "08:45:12",
                    "pending": true,
                    "description": [
                      "Update TimescaleDB to version 1.2.1",
                      "Upgrade to PostgreSQL 11.2 and 10.7 bugfix releases"
                    ]
                  },
                  "size": "db-s-2vcpu-4gb",
                  "tags": [
                    "production"
                  ],
                  "private_network_uuid": "d455e75d-4858-4eec-8c95-da2f0a5f93a7"
                }
              ]
            }
          }
        }
      },
      "database_cluster": {
        "description": "A JSON object with a key of `database`.",
        "headers": {
          "ratelimit-limit": {
            "$ref": "#/components/headers/ratelimit-limit"
          },
          "ratelimit-remaining": {
            "$ref": "#/components/headers/ratelimit-remaining"
          },
          "ratelimit-reset": {
            "$ref": "#/components/headers/ratelimit-reset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "database": {
                  "$ref": "#/components/schemas/database_cluster"
                }
              },
              "required": [
                "database"
              ]
            },
            "example": {
              "database": {
                "id": "9cc10173-e9ea-4176-9dbc-a4cee4c4ff30",
                "name": "backend",
                "engine": "pg",
                "version": "10",
                "connection": {
                  "uri": "postgres://doadmin:wv78n3zpz42xezdk@backend-do-user-19081923-0.db.ondigitalocean.com:25060/defaultdb?sslmode=require",
                  "database": "",
                  "host": "backend-do-user-19081923-0.db.ondigitalocean.com",
                  "port": 25060,
                  "user": "doadmin",
                  "password": "wv78n3zpz42xezdk",
                  "ssl": true
                },
                "private_connection": {
                  "uri": "postgres://doadmin:wv78n3zpz42xezdk@private-backend-do-user-19081923-0.db.ondigitalocean.com:25060/defaultdb?sslmode=require",
                  "database": "",
                  "host": "private-backend-do-user-19081923-0.db.ondigitalocean.com",
                  "port": 25060,
                  "user": "doadmin",
                  "password": "wv78n3zpz42xezdk",
                  "ssl": true
                },
                "users": [
                  {
                    "name": "doadmin",
                    "role": "primary",
                    "password": "wv78n3zpz42xezdk"
                  }
                ],
                "db_names": [
                  "defaultdb"
                ],
                "num_nodes": 2,
                "region": "nyc3",
                "status": "creating",
                "created_at": "2019-01-11T18:37:36Z",
                "maintenance_window": {
                  "day": "saturday",
                  "hour": "08:45:12",
                  "pending": true,
                  "description": [
                    "Update TimescaleDB to version 1.2.1",
                    "Upgrade to PostgreSQL 11.2 and 10.7 bugfix releases"
                  ]
                },
                "size": "db-s-2vcpu-4gb",
                "tags": [
                  "production"
                ],
                "private_network_uuid": "d455e75d-4858-4eec-8c95-da2f0a5f93a7"
              }
            }
          }
        }
      },
      "ca": {
        "description": "A JSON object with a key of `ca`.",
        "headers": {
          "ratelimit-limit": {
            "$ref": "#/components/headers/ratelimit-limit"
          },
          "ratelimit-remaining": {
            "$ref": "#/components/headers/ratelimit-remaining"
          },
          "ratelimit-reset": {
            "$ref": "#/components/headers/ratelimit-reset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "ca": {
                  "$ref": "#/components/schemas/ca"
                }
              },
              "required": [
                "ca"
              ]
            },
            "example": {
              "ca": {
                "certificate": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUVRVENDQXFtZ0F3SUJBZ0lVRUZZWTdBWFZQS0Raam9jb1lpMk00Y0dvcU0wd0RRWUpLb1pJaHZjTkFRRU0KQlFBd09qRTRNRFlHQTFVRUF3d3ZOek0zT1RaaE1XRXRaamhrTUMwME9HSmpMV0V4Wm1NdFpqbGhNVFZsWXprdwpORGhsSUZCeWIycGxZM1FnUTBFd0hoY05NakF3TnpFM01UVTFNREEyV2hjTk16QXdOekUxTVRVMU1EQTJXakE2Ck1UZ3dOZ1lEVlFRRERDODNNemM1Tm1FeFlTMW1PR1F3TFRRNFltTXRZVEZtWXkxbU9XRXhOV1ZqT1RBME9HVWcKVUhKdmFtVmpkQ0JEUVRDQ0FhSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnR1BBRENDQVlvQ2dnR0JBTVdScXhycwpMZnpNdHZyUmxKVEw4MldYMVBLZkhKbitvYjNYcmVBY3FZd1dBUUp2Q3IycmhxSXZieVZzMGlaU0NzOHI4c3RGClljQ0R1bkxJNmUwTy9laERZYTBIT2RrMkFFRzE1ckVOVmNha2NSczcyQWlHVHNrdkNXS2VkUjFTUWswVWt0WCsKQUg4S1ExS3F5bzNtZ2Y2cVV1WUpzc3JNTXFselk3YTN1RVpEb2ZqTjN5Q3MvM21pTVJKcVcyNm1JV0IrUUlEbAo5YzdLRVF5MTZvdCtjeHVnd0lLMm9oZHMzaFY1bjBKMFVBM0I3QWRBdXY5aUl5L3JHaHlTNm5CNTdaWm9JZnAyCnFybXdOY0UrVjlIdXhQSGtRVjFOQjUwOFFudWZ4Z0E5VCtqU2VrdGVUbWFORkxqNjFXL3BtcndrTytOaWFXUTIKaGgzVXBKOEozY1BoNkErbHRnUmpSV2NEb2lsYVNwRVVpU09WemNNYVFvalZKYVJlNk9NbnZYc29NaSs3ZzdneApWcittQ0lUcGcvck9DaXpBWWQ2UFAxLzdYTjk1ZXNmU2tBQnM5c3hJakpjTUFqbDBYTEFzRmtGZVdyeHNIajlVCmJnaDNWYXdtcnpUeXhZT0RQcXV1cS9JcGlwc0RRT3Fpb2ZsUStkWEJJL3NUT0NNbVp6K0pNcG5HYXdJREFRQUIKb3o4d1BUQWRCZ05WSFE0RUZnUVVSekdDRlE3WEtUdHRDN3JzNS8ydFlQcExTZGN3RHdZRFZSMFRCQWd3QmdFQgovd0lCQURBTEJnTlZIUThFQkFNQ0FRWXdEUVlKS29aSWh2Y05BUUVNQlFBRGdnR0JBSWFKQ0dSVVNxUExtcmcvCmk3MW10b0NHUDdzeG1BVXVCek1oOEdrU25uaVdaZnZGMTRwSUtqTlkwbzVkWmpHKzZqK1VjalZtK0RIdGE1RjYKOWJPeEk5S0NFeEI1blBjRXpMWjNZYitNOTcrellxbm9zUm85S21DVFJBb2JrNTZ0WU1FS1h1aVJja2tkMm1yUQo4cGw2N2xxdThjM1V4c0dHZEZVT01wMkk3ZTNpdUdWVm5UR0ZWM3JQZUdaQ0J3WGVyUUQyY0F4UjkzS3BnWVZ2ClhUUzk5dnpSbm1HOHhhUm9EVy9FbEdXZ2xWd0Q5a1JrbXhUUkdoYTdDWVZCcjFQVWY2dVVFVjhmVFIxc1hFZnIKLytMR1JoSVVsSUhWT3l2Yzk3YnZYQURPbWF1MWZDVE5lWGtRdTNyZnZFSlBmaFlLeVIwT0V3eWVvdlhRNzl0LwpTV2ZGTjBreU1Pc1UrNVNIdHJKSEh1eWNWcU0yQlVVK083VjM1UnNwOU9MZGRZMFFVbTZldFpEVEhhSUhYYzRRCnl1Rm1OL1NhSFZtNE0wL3BTVlJQdVd6TmpxMnZyRllvSDRtbGhIZk95TUNJMjc2elE2aWhGNkdDSHlkOUJqajcKUm1UWGEyNHM3NWhmSi9YTDV2bnJSdEtpVHJlVHF6V21EOVhnUmNMQ0gyS1hJaVRtSWc9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg=="
              }
            }
          }
        }
      },
      "online_migration": {
        "description": "A JSON object.",
        "headers": {
          "ratelimit-limit": {
            "$ref": "#/components/headers/ratelimit-limit"
          },
          "ratelimit-remaining": {
            "$ref": "#/components/headers/ratelimit-remaining"
          },
          "ratelimit-reset": {
            "$ref": "#/components/headers/ratelimit-reset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/online_migration"
            },
            "example": {
              "id": "77b28fc8-19ff-11eb-8c9c-c68e24557488",
              "status": "running",
              "created_at": "2020-10-29T15:57:38Z"
            }
          }
        }
      },
      "accepted": {
        "description": "The does not indicate the success or failure of any operation, just that the request has been accepted for processing.",
        "headers": {
          "ratelimit-limit": {
            "$ref": "#/components/headers/ratelimit-limit"
          },
          "ratelimit-remaining": {
            "$ref": "#/components/headers/ratelimit-remaining"
          },
          "ratelimit-reset": {
            "$ref": "#/components/headers/ratelimit-reset"
          }
        }
      },
      "firewall_rules": {
        "description": "A JSON object with a key of `rules`.",
        "headers": {
          "ratelimit-limit": {
            "$ref": "#/components/headers/ratelimit-limit"
          },
          "ratelimit-remaining": {
            "$ref": "#/components/headers/ratelimit-remaining"
          },
          "ratelimit-reset": {
            "$ref": "#/components/headers/ratelimit-reset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "rules": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/firewall_rule"
                  }
                }
              }
            },
            "example": {
              "rules": [
                {
                  "uuid": "79f26d28-ea8a-41f2-8ad8-8cfcdd020095",
                  "cluster_uuid": "9cc10173-e9ea-4176-9dbc-a4cee4c4ff30",
                  "type": "k8s",
                  "value": "ff2a6c52-5a44-4b63-b99c-0e98e7a63d61",
                  "created_at": "2019-11-14T20:30:28Z"
                },
                {
                  "uuid": "adfe81a8-0fa1-4e2d-973f-06aa5af19b44",
                  "cluster_uuid": "9cc10173-e9ea-4176-9dbc-a4cee4c4ff30",
                  "type": "ip_addr",
                  "value": "192.168.1.1",
                  "created_at": "2019-11-14T20:30:28Z"
                },
                {
                  "uuid": "b9b42276-8295-4313-b40f-74173a7f46e6",
                  "cluster_uuid": "9cc10173-e9ea-4176-9dbc-a4cee4c4ff30",
                  "type": "droplet",
                  "value": "163973392",
                  "created_at": "2019-11-14T20:30:28Z"
                },
                {
                  "uuid": "718d23e0-13d7-4129-8a00-47fb72ee0deb",
                  "cluster_uuid": "9cc10173-e9ea-4176-9dbc-a4cee4c4ff30",
                  "type": "tag",
                  "value": "backend",
                  "created_at": "2019-11-14T20:30:28Z"
                }
              ]
            }
          }
        }
      },
      "database_backups": {
        "description": "A JSON object with a key of `database_backups`.",
        "headers": {
          "ratelimit-limit": {
            "$ref": "#/components/headers/ratelimit-limit"
          },
          "ratelimit-remaining": {
            "$ref": "#/components/headers/ratelimit-remaining"
          },
          "ratelimit-reset": {
            "$ref": "#/components/headers/ratelimit-reset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "backups": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/backup"
                  }
                }
              },
              "required": [
                "backups"
              ]
            },
            "example": {
              "backups": [
                {
                  "created_at": "2019-01-11T18:42:27Z",
                  "size_gigabytes": 0.03357696
                },
                {
                  "created_at": "2019-01-12T18:42:29Z",
                  "size_gigabytes": 0.03364864
                }
              ]
            }
          }
        }
      },
      "database_replicas": {
        "description": "A JSON object with a key of `replicas`.",
        "headers": {
          "ratelimit-limit": {
            "$ref": "#/components/headers/ratelimit-limit"
          },
          "ratelimit-remaining": {
            "$ref": "#/components/headers/ratelimit-remaining"
          },
          "ratelimit-reset": {
            "$ref": "#/components/headers/ratelimit-reset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "replicas": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/database_replica"
                  }
                }
              }
            },
            "example": {
              "replicas": [
                {
                  "name": "read-nyc3-01",
                  "connection": {
                    "uri": "",
                    "database": "defaultdb",
                    "host": "read-nyc3-01-do-user-19081923-0.db.ondigitalocean.com",
                    "port": 25060,
                    "user": "doadmin",
                    "password": "wv78n3zpz42xezdk",
                    "ssl": true
                  },
                  "private_connection": {
                    "uri": "postgres://doadmin:wv78n3zpz42xezdk@private-read-nyc3-01-do-user-19081923-0.db.ondigitalocean.com:25060/defaultdb?sslmode=require",
                    "database": "",
                    "host": "private-read-nyc3-01-do-user-19081923-0.db.ondigitalocean.com",
                    "port": 25060,
                    "user": "doadmin",
                    "password": "wv78n3zpz42xezdk",
                    "ssl": true
                  },
                  "region": "nyc3",
                  "status": "online",
                  "created_at": "2019-01-11T18:37:36Z"
                }
              ]
            }
          }
        }
      },
      "database_replica": {
        "description": "A JSON object with a key of `replica`.",
        "headers": {
          "ratelimit-limit": {
            "$ref": "#/components/headers/ratelimit-limit"
          },
          "ratelimit-remaining": {
            "$ref": "#/components/headers/ratelimit-remaining"
          },
          "ratelimit-reset": {
            "$ref": "#/components/headers/ratelimit-reset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "replica": {
                  "$ref": "#/components/schemas/database_replica"
                }
              }
            },
            "example": {
              "replica": {
                "name": "read-nyc3-01",
                "connection": {
                  "uri": "",
                  "database": "defaultdb",
                  "host": "read-nyc3-01-do-user-19081923-0.db.ondigitalocean.com",
                  "port": 25060,
                  "user": "doadmin",
                  "password": "wv78n3zpz42xezdk",
                  "ssl": true
                },
                "private_connection": {
                  "uri": "postgres://doadmin:wv78n3zpz42xezdk@private-read-nyc3-01-do-user-19081923-0.db.ondigitalocean.com:25060/defaultdb?sslmode=require",
                  "database": "",
                  "host": "private-read-nyc3-01-do-user-19081923-0.db.ondigitalocean.com",
                  "port": 25060,
                  "user": "doadmin",
                  "password": "wv78n3zpz42xezdk",
                  "ssl": true
                },
                "region": "nyc3",
                "status": "online",
                "created_at": "2019-01-11T18:37:36Z"
              }
            }
          }
        }
      },
      "users": {
        "description": "A JSON object with a key of `users`.",
        "headers": {
          "ratelimit-limit": {
            "$ref": "#/components/headers/ratelimit-limit"
          },
          "ratelimit-remaining": {
            "$ref": "#/components/headers/ratelimit-remaining"
          },
          "ratelimit-reset": {
            "$ref": "#/components/headers/ratelimit-reset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "users": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/database_user"
                  }
                }
              }
            },
            "example": {
              "users": [
                {
                  "name": "app-01",
                  "role": "normal",
                  "password": "jge5lfxtzhx42iff"
                },
                {
                  "name": "doadmin",
                  "role": "primary",
                  "password": "wv78n3zpz42xezd"
                }
              ]
            }
          }
        }
      },
      "user": {
        "description": "A JSON object with a key of `user`.",
        "headers": {
          "ratelimit-limit": {
            "$ref": "#/components/headers/ratelimit-limit"
          },
          "ratelimit-remaining": {
            "$ref": "#/components/headers/ratelimit-remaining"
          },
          "ratelimit-reset": {
            "$ref": "#/components/headers/ratelimit-reset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "user": {
                  "$ref": "#/components/schemas/database_user"
                }
              },
              "required": [
                "user"
              ]
            },
            "examples": {
              "New User": {
                "value": {
                  "user": {
                    "name": "app-01",
                    "role": "normal",
                    "password": "jge5lfxtzhx42iff"
                  }
                }
              },
              "New User with MySQL Auth Plugin": {
                "value": {
                  "user": {
                    "name": "app-02",
                    "role": "normal",
                    "password": "wv78n3zpz42xezdk",
                    "mysql_settings": {
                      "auth_plugin": "mysql_native_password"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "databases": {
        "description": "A JSON object with a key of `databases`.",
        "headers": {
          "ratelimit-limit": {
            "$ref": "#/components/headers/ratelimit-limit"
          },
          "ratelimit-remaining": {
            "$ref": "#/components/headers/ratelimit-remaining"
          },
          "ratelimit-reset": {
            "$ref": "#/components/headers/ratelimit-reset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "dbs": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/database"
                  }
                }
              }
            },
            "example": {
              "dbs": [
                {
                  "name": "alpha"
                },
                {
                  "name": "defaultdb"
                }
              ]
            }
          }
        }
      },
      "database": {
        "description": "A JSON object with a key of `db`.",
        "headers": {
          "ratelimit-limit": {
            "$ref": "#/components/headers/ratelimit-limit"
          },
          "ratelimit-remaining": {
            "$ref": "#/components/headers/ratelimit-remaining"
          },
          "ratelimit-reset": {
            "$ref": "#/components/headers/ratelimit-reset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "db": {
                  "$ref": "#/components/schemas/database"
                }
              },
              "required": [
                "db"
              ]
            },
            "example": {
              "db": {
                "name": "alpha"
              }
            }
          }
        }
      },
      "connection_pools": {
        "description": "A JSON object with a key of `pools`.",
        "headers": {
          "ratelimit-limit": {
            "$ref": "#/components/headers/ratelimit-limit"
          },
          "ratelimit-remaining": {
            "$ref": "#/components/headers/ratelimit-remaining"
          },
          "ratelimit-reset": {
            "$ref": "#/components/headers/ratelimit-reset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/connection_pools"
            },
            "example": {
              "pools": [
                {
                  "user": "doadmin",
                  "name": "reporting-pool",
                  "size": 10,
                  "db": "defaultdb",
                  "mode": "session",
                  "connection": {
                    "uri": "postgres://doadmin:wv78n3zpz42xezdk@backend-do-user-19081923-0.db.ondigitalocean.com:25061/foo?sslmode=require",
                    "database": "foo",
                    "host": "backend-do-user-19081923-0.db.ondigitalocean.com",
                    "port": 25061,
                    "user": "doadmin",
                    "password": "wv78n3zpz42xezdk",
                    "ssl": true
                  }
                },
                {
                  "user": "doadmin",
                  "name": "backend-pool",
                  "size": 10,
                  "db": "defaultdb",
                  "mode": "transaction",
                  "connection": {
                    "uri": "postgres://doadmin:wv78n3zpz42xezdk@backend-do-user-19081923-0.db.ondigitalocean.com:25061/backend-pool?sslmode=require",
                    "database": "backend-pool",
                    "host": "backend-do-user-19081923-0.db.ondigitalocean.com",
                    "port": 25061,
                    "user": "doadmin",
                    "password": "wv78n3zpz42xezdk",
                    "ssl": true
                  }
                }
              ]
            }
          }
        }
      },
      "connection_pool": {
        "description": "A JSON object with a key of `pool`.",
        "headers": {
          "ratelimit-limit": {
            "$ref": "#/components/headers/ratelimit-limit"
          },
          "ratelimit-remaining": {
            "$ref": "#/components/headers/ratelimit-remaining"
          },
          "ratelimit-reset": {
            "$ref": "#/components/headers/ratelimit-reset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "pool": {
                  "$ref": "#/components/schemas/connection_pool"
                }
              },
              "required": [
                "pool"
              ]
            },
            "example": {
              "pool": {
                "user": "doadmin",
                "name": "backend-pool",
                "size": 10,
                "db": "defaultdb",
                "mode": "transaction",
                "connection": {
                  "uri": "postgres://doadmin:wv78n3zpz42xezdk@backend-do-user-19081923-0.db.ondigitalocean.com:25061/backend-pool?sslmode=require",
                  "database": "backend-pool",
                  "host": "backend-do-user-19081923-0.db.ondigitalocean.com",
                  "port": 25061,
                  "user": "doadmin",
                  "password": "wv78n3zpz42xezdk",
                  "ssl": true
                }
              }
            }
          }
        }
      },
      "eviction_policy": {
        "description": "A JSON string with a key of `eviction_policy`.",
        "headers": {
          "ratelimit-limit": {
            "$ref": "#/components/headers/ratelimit-limit"
          },
          "ratelimit-remaining": {
            "$ref": "#/components/headers/ratelimit-remaining"
          },
          "ratelimit-reset": {
            "$ref": "#/components/headers/ratelimit-reset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/eviction_policy"
            },
            "example": {
              "eviction_policy": "noeviction"
            }
          }
        }
      },
      "sql_mode": {
        "description": "A JSON string with a key of `sql_mode`.",
        "headers": {
          "ratelimit-limit": {
            "$ref": "#/components/headers/ratelimit-limit"
          },
          "ratelimit-remaining": {
            "$ref": "#/components/headers/ratelimit-remaining"
          },
          "ratelimit-reset": {
            "$ref": "#/components/headers/ratelimit-reset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/sql_mode"
            },
            "example": {
              "sql_mode": "ANSI,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION,NO_ZERO_DATE,NO_ZERO_IN_DATE,STRICT_ALL_TABLES"
            }
          }
        }
      },
      "all_domains_response": {
        "description": "The response will be a JSON object with a key called `domains`. The value of this will be an array of Domain objects, each of which contain the standard domain attributes.",
        "headers": {
          "ratelimit-limit": {
            "$ref": "#/components/headers/ratelimit-limit"
          },
          "ratelimit-remaining": {
            "$ref": "#/components/headers/ratelimit-remaining"
          },
          "ratelimit-reset": {
            "$ref": "#/components/headers/ratelimit-reset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "type": "object",
                  "properties": {
                    "domains": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/domain"
                      },
                      "description": "Array of volumes."
                    }
                  },
                  "required": [
                    "domains"
                  ]
                },
                {
                  "$ref": "#/components/schemas/pagination"
                },
                {
                  "$ref": "#/components/schemas/meta"
                }
              ],
              "example": {
                "domains": [
                  {
                    "name": "example.com",
                    "ttl": 1800,
                    "zone_file": "$ORIGIN example.com.\n$TTL 1800\nexample.com. IN SOA ns1.digitalocean.com. hostmaster.example.com. 1415982609 10800 3600 604800 1800\nexample.com. 1800 IN NS ns1.digitalocean.com.\nexample.com. 1800 IN NS ns2.digitalocean.com.\nexample.com. 1800 IN NS ns3.digitalocean.com.\nexample.com. 1800 IN A 1.2.3.4\n"
                  }
                ],
                "meta": {
                  "total": 1
                }
              }
            }
          }
        }
      },
      "create_domain_response": {
        "description": "The response will be a JSON object with a key called `domain`. The value of this will be an object that contains the standard attributes associated with a domain.",
        "headers": {
          "ratelimit-limit": {
            "$ref": "#/components/headers/ratelimit-limit"
          },
          "ratelimit-remaining": {
            "$ref": "#/components/headers/ratelimit-remaining"
          },
          "ratelimit-reset": {
            "$ref": "#/components/headers/ratelimit-reset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "domain": {
                  "$ref": "#/components/schemas/domain"
                }
              },
              "example": {
                "domain": {
                  "name": "example.com",
                  "ttl": 1800,
                  "zone_file": null
                }
              }
            }
          }
        }
      },
      "existing_domain": {
        "description": "The response will be a JSON object with a key called `domain`. The value of this will be an object that contains the standard attributes defined for a domain.",
        "headers": {
          "ratelimit-limit": {
            "$ref": "#/components/headers/ratelimit-limit"
          },
          "ratelimit-remaining": {
            "$ref": "#/components/headers/ratelimit-remaining"
          },
          "ratelimit-reset": {
            "$ref": "#/components/headers/ratelimit-reset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "domain": {
                  "$ref": "#/components/schemas/domain"
                }
              },
              "example": {
                "domain": {
                  "name": "example.com",
                  "ttl": 1800,
                  "zone_file": "$ORIGIN example.com.\n$TTL 1800\nexample.com. IN SOA ns1.digitalocean.com. hostmaster.example.com. 1415982611 10800 3600 604800 1800\nexample.com. 1800 IN NS ns1.digitalocean.com.\nexample.com. 1800 IN NS ns2.digitalocean.com.\nexample.com. 1800 IN NS ns3.digitalocean.com.\nexample.com. 1800 IN A 1.2.3.4\n"
                }
              }
            }
          }
        }
      },
      "all_domain_records_response": {
        "description": "The response will be a JSON object with a key called `domain_records`. The value of this will be an array of domain record objects, each of which contains the standard domain record attributes. For attributes that are not used by a specific record type, a value of `null` will be returned. For instance, all records other than SRV will have `null` for the `weight` and `port` attributes.",
        "headers": {
          "ratelimit-limit": {
            "$ref": "#/components/headers/ratelimit-limit"
          },
          "ratelimit-remaining": {
            "$ref": "#/components/headers/ratelimit-remaining"
          },
          "ratelimit-reset": {
            "$ref": "#/components/headers/ratelimit-reset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "type": "object",
                  "properties": {
                    "domain_records": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/domain_record"
                      }
                    }
                  }
                },
                {
                  "$ref": "#/components/schemas/pagination"
                },
                {
                  "$ref": "#/components/schemas/meta"
                }
              ]
            },
            "examples": {
              "All Domain Records": {
                "$ref": "#/components/examples/domain_records_all"
              }
            }
          }
        }
      },
      "created_domain_record": {
        "description": "The response body will be a JSON object with a key called `domain_record`. The value of this will be an object representing the new record. Attributes that are not applicable for the record type will be set to `null`. An `id` attribute is generated for each record as part of the object.",
        "headers": {
          "ratelimit-limit": {
            "$ref": "#/components/headers/ratelimit-limit"
          },
          "ratelimit-remaining": {
            "$ref": "#/components/headers/ratelimit-remaining"
          },
          "ratelimit-reset": {
            "$ref": "#/components/headers/ratelimit-reset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "domain_record": {
                  "$ref": "#/components/schemas/domain_record"
                }
              },
              "example": {
                "domain_record": {
                  "id": 28448433,
                  "type": "A",
                  "name": "www",
                  "data": "162.10.66.0",
                  "priority": null,
                  "port": null,
                  "ttl": 1800,
                  "weight": null,
                  "flags": null,
                  "tag": null
                }
              }
            }
          }
        }
      },
      "domain_record": {
        "description": "The response will be a JSON object with a key called `domain_record`. The value of this will be a domain record object which contains the standard domain record attributes.",
        "headers": {
          "ratelimit-limit": {
            "$ref": "#/components/headers/ratelimit-limit"
          },
          "ratelimit-remaining": {
            "$ref": "#/components/headers/ratelimit-remaining"
          },
          "ratelimit-reset": {
            "$ref": "#/components/headers/ratelimit-reset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "domain_record": {
                  "$ref": "#/components/schemas/domain_record"
                }
              },
              "example": {
                "domain_record": {
                  "id": 3352896,
                  "type": "A",
                  "name": "blog",
                  "data": "162.10.66.0",
                  "priority": null,
                  "port": null,
                  "ttl": 1800,
                  "weight": null,
                  "flags": null,
                  "tag": null
                }
              }
            }
          }
        }
      },
      "all_droplets": {
        "description": "A JSON object with a key of `droplets`.",
        "headers": {
          "ratelimit-limit": {
            "$ref": "#/components/headers/ratelimit-limit"
          },
          "ratelimit-remaining": {
            "$ref": "#/components/headers/ratelimit-remaining"
          },
          "ratelimit-reset": {
            "$ref": "#/components/headers/ratelimit-reset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "type": "object",
                  "properties": {
                    "droplets": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/droplet"
                      }
                    }
                  }
                },
                {
                  "$ref": "#/components/schemas/pagination"
                },
                {
                  "$ref": "#/components/schemas/meta"
                }
              ]
            },
            "examples": {
              "All Droplets": {
                "$ref": "#/components/examples/droplets_all"
              },
              "Droplets Filtered By Tag": {
                "$ref": "#/components/examples/droplets_tagged"
              }
            }
          }
        }
      },
      "droplet_create": {
        "description": "Accepted",
        "headers": {
          "ratelimit-limit": {
            "$ref": "#/components/headers/ratelimit-limit"
          },
          "ratelimit-remaining": {
            "$ref": "#/components/headers/ratelimit-remaining"
          },
          "ratelimit-reset": {
            "$ref": "#/components/headers/ratelimit-reset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "oneOf": [
                {
                  "title": "Single Droplet Response",
                  "properties": {
                    "droplet": {
                      "$ref": "#/components/schemas/droplet"
                    },
                    "links": {
                      "type": "object",
                      "properties": {
                        "actions": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/action_link"
                          }
                        }
                      }
                    }
                  },
                  "required": [
                    "droplet",
                    "links"
                  ]
                },
                {
                  "title": "Multiple Droplet Response",
                  "properties": {
                    "droplets": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/droplet"
                      }
                    },
                    "links": {
                      "type": "object",
                      "properties": {
                        "actions": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/action_link"
                          }
                        }
                      }
                    }
                  },
                  "required": [
                    "droplets",
                    "links"
                  ]
                }
              ]
            },
            "examples": {
              "Single Droplet Create Response": {
                "$ref": "#/components/examples/droplet_create_response"
              },
              "Multiple Droplet Create Response": {
                "$ref": "#/components/examples/droplet_multi_create_response"
              }
            }
          }
        }
      },
      "existing_droplet": {
        "description": "The response will be a JSON object with a key called `droplet`. This will be\nset to a JSON object that contains the standard Droplet attributes.\n",
        "headers": {
          "ratelimit-limit": {
            "$ref": "#/components/headers/ratelimit-limit"
          },
          "ratelimit-remaining": {
            "$ref": "#/components/headers/ratelimit-remaining"
          },
          "ratelimit-reset": {
            "$ref": "#/components/headers/ratelimit-reset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "droplet": {
                  "$ref": "#/components/schemas/droplet"
                }
              }
            },
            "examples": {
              "Single Droplet": {
                "$ref": "#/components/examples/droplet_single"
              }
            }
          }
        }
      },
      "all_droplet_backups": {
        "description": "A JSON object with an `backups` key.",
        "headers": {
          "ratelimit-limit": {
            "$ref": "#/components/headers/ratelimit-limit"
          },
          "ratelimit-remaining": {
            "$ref": "#/components/headers/ratelimit-remaining"
          },
          "ratelimit-reset": {
            "$ref": "#/components/headers/ratelimit-reset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "type": "object",
                  "properties": {
                    "backups": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/droplet_snapshot"
                      }
                    }
                  }
                },
                {
                  "$ref": "#/components/schemas/pagination"
                },
                {
                  "$ref": "#/components/schemas/meta"
                }
              ]
            },
            "example": {
              "backups": [
                {
                  "id": 67539192,
                  "name": "web-01- 2020-07-29",
                  "distribution": "Ubuntu",
                  "slug": null,
                  "public": false,
                  "regions": [
                    "nyc3"
                  ],
                  "created_at": "2020-07-29T01:44:35Z",
                  "min_disk_size": 50,
                  "size_gigabytes": 2.34,
                  "type": "backup"
                }
              ],
              "meta": {
                "total": 1
              }
            }
          }
        }
      },
      "all_droplet_snapshots": {
        "description": "A JSON object with an `snapshots` key.",
        "headers": {
          "ratelimit-limit": {
            "$ref": "#/components/headers/ratelimit-limit"
          },
          "ratelimit-remaining": {
            "$ref": "#/components/headers/ratelimit-remaining"
          },
          "ratelimit-reset": {
            "$ref": "#/components/headers/ratelimit-reset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "type": "object",
                  "properties": {
                    "snapshots": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/droplet_snapshot"
                      }
                    }
                  }
                },
                {
                  "$ref": "#/components/schemas/pagination"
                },
                {
                  "$ref": "#/components/schemas/meta"
                }
              ]
            },
            "example": {
              "snapshots": [
                {
                  "id": 6372321,
                  "name": "web-01-1595954862243",
                  "created_at": "2020-07-28T16:47:44Z",
                  "regions": [
                    "nyc3",
                    "sfo3"
                  ],
                  "min_disk_size": 25,
                  "size_gigabytes": 2.34,
                  "type": "snapshot"
                }
              ],
              "meta": {
                "total": 1
              }
            }
          }
        }
      },
      "all_droplet_actions": {
        "description": "A JSON object with an `actions` key.",
        "headers": {
          "ratelimit-limit": {
            "$ref": "#/components/headers/ratelimit-limit"
          },
          "ratelimit-remaining": {
            "$ref": "#/components/headers/ratelimit-remaining"
          },
          "ratelimit-reset": {
            "$ref": "#/components/headers/ratelimit-reset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "type": "object",
                  "properties": {
                    "actions": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/action"
                      }
                    }
                  }
                },
                {
                  "$ref": "#/components/schemas/pagination"
                },
                {
                  "$ref": "#/components/schemas/meta"
                }
              ]
            },
            "example": {
              "actions": [
                {
                  "id": 982864273,
                  "status": "completed",
                  "type": "create",
                  "started_at": "2020-07-20T19:37:30.000Z",
                  "completed_at": "2020-07-20T19:37:45.000Z",
                  "resource_id": 3164444,
                  "resource_type": "droplet",
                  "region": {
                    "name": "New York 3",
                    "slug": "nyc3",
                    "features": [
                      "private_networking",
                      "backups",
                      "ipv6",
                      "metadata",
                      "install_agent",
                      "image_transfer"
                    ],
                    "available": true,
                    "sizes": [
                      "s-1vcpu-1gb",
                      "s-1vcpu-2gb",
                      "s-3vcpu-1gb",
                      "s-2vcpu-2gb",
                      "s-1vcpu-3gb",
                      "s-2vcpu-4gb",
                      "s-4vcpu-8gb",
                      "m-1vcpu-8gb",
                      "s-6vcpu-16gb",
                      "s-8vcpu-32gb",
                      "s-12vcpu-48gb"
                    ]
                  },
                  "region_slug": "nyc3"
                }
              ],
              "meta": {
                "total": 1
              }
            }
          }
        }
      },
      "droplet_action": {
        "description": "The response will be a JSON object with a key called `action`.",
        "headers": {
          "ratelimit-limit": {
            "$ref": "#/components/headers/ratelimit-limit"
          },
          "ratelimit-remaining": {
            "$ref": "#/components/headers/ratelimit-remaining"
          },
          "ratelimit-reset": {
            "$ref": "#/components/headers/ratelimit-reset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "action": {
                  "$ref": "#/components/schemas/action"
                }
              }
            }
          }
        }
      },
      "droplet_actions": {
        "description": "The response will be a JSON object with a key called `actions`.",
        "headers": {
          "ratelimit-limit": {
            "$ref": "#/components/headers/ratelimit-limit"
          },
          "ratelimit-remaining": {
            "$ref": "#/components/headers/ratelimit-remaining"
          },
          "ratelimit-reset": {
            "$ref": "#/components/headers/ratelimit-reset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "actions": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/action"
                  }
                }
              }
            }
          }
        }
      },
      "all_kernels": {
        "description": "A JSON object that has a key called `kernels`.",
        "headers": {
          "ratelimit-limit": {
            "$ref": "#/components/headers/ratelimit-limit"
          },
          "ratelimit-remaining": {
            "$ref": "#/components/headers/ratelimit-remaining"
          },
          "ratelimit-reset": {
            "$ref": "#/components/headers/ratelimit-reset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "type": "object",
                  "properties": {
                    "kernels": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/kernel"
                      }
                    }
                  }
                },
                {
                  "$ref": "#/components/schemas/pagination"
                },
                {
                  "$ref": "#/components/schemas/meta"
                }
              ]
            },
            "example": {
              "kernels": [
                {
                  "id": 7515,
                  "name": "DigitalOcean GrubLoader v0.2 (20160714)",
                  "version": "2016.07.13-DigitalOcean_loader_Ubuntu"
                }
              ],
              "links": {
                "pages": {
                  "next": "https://api.digitalocean.com/v2/droplets/3164444/kernels?page=2&per_page=1",
                  "last": "https://api.digitalocean.com/v2/droplets/3164444/kernels?page=171&per_page=1"
                }
              },
              "meta": {
                "total": 171
              }
            }
          }
        }
      },
      "all_firewalls": {
        "description": "A JSON object that has a key called `firewalls`.",
        "headers": {
          "ratelimit-limit": {
            "$ref": "#/components/headers/ratelimit-limit"
          },
          "ratelimit-remaining": {
            "$ref": "#/components/headers/ratelimit-remaining"
          },
          "ratelimit-reset": {
            "$ref": "#/components/headers/ratelimit-reset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "type": "object",
                  "properties": {
                    "firewalls": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/firewall"
                      }
                    }
                  }
                },
                {
                  "$ref": "#/components/schemas/pagination"
                },
                {
                  "$ref": "#/components/schemas/meta"
                }
              ]
            },
            "example": {
              "firewalls": [
                {
                  "id": "bb4b2611-3d72-467b-8602-280330ecd65c",
                  "status": "succeeded",
                  "created_at": "2020-05-23T21:24:00.000Z",
                  "pending_changes": [
                    {
                      "droplet_id": 8043964,
                      "removing": true,
                      "status": "waiting"
                    }
                  ],
                  "name": "firewall",
                  "droplet_ids": [
                    89989,
                    33322
                  ],
                  "tags": [
                    "base-image",
                    "prod"
                  ],
                  "inbound_rules": [
                    {
                      "protocol": "udp",
                      "ports": "8000-9000",
                      "sources": {
                        "addresses": [
                          "1.2.3.4",
                          "18.0.0.0/8"
                        ],
                        "droplet_ids": [
                          8282823,
                          3930392
                        ],
                        "load_balancer_uids": [
                          "4de7ac8b-495b-4884-9a69-1050c6793cd6"
                        ],
                        "tags": [
                          "base-image",
                          "dev"
                        ]
                      }
                    }
                  ],
                  "outbound_rules": [
                    {
                      "protocol": "tcp",
                      "ports": "7000-9000",
                      "destinations": {
                        "addresses": [
                          "1.2.3.4",
                          "18.0.0.0/8"
                        ],
                        "droplet_ids": [
                          3827493,
                          213213
                        ],
                        "load_balancer_uids": [
                          "4de7ac8b-495b-4884-9a69-1050c6793cd6"
                        ],
                        "tags": [
                          "base-image",
                          "prod"
                        ]
                      }
                    }
                  ]
                }
              ],
              "meta": {
                "total": 1
              }
            }
          }
        }
      },
      "neighbor_droplets": {
        "description": "A JSON object with an `droplets` key.",
        "headers": {
          "ratelimit-limit": {
            "$ref": "#/components/headers/ratelimit-limit"
          },
          "ratelimit-remaining": {
            "$ref": "#/components/headers/ratelimit-remaining"
          },
          "ratelimit-reset": {
            "$ref": "#/components/headers/ratelimit-reset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "type": "object",
                  "properties": {
                    "droplets": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/droplet"
                      }
                    }
                  }
                }
              ]
            }
          }
        }
      },
      "associated_resources_list": {
        "description": "A JSON object containing `snapshots`, `volumes`, and `volume_snapshots` keys.",
        "headers": {
          "ratelimit-limit": {
            "$ref": "#/components/headers/ratelimit-limit"
          },
          "ratelimit-remaining": {
            "$ref": "#/components/headers/ratelimit-remaining"
          },
          "ratelimit-reset": {
            "$ref": "#/components/headers/ratelimit-reset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "type": "object",
                  "properties": {
                    "snapshots": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/associated_resource"
                      }
                    },
                    "volumes": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/associated_resource"
                      }
                    },
                    "volume_snapshots": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/associated_resource"
                      }
                    }
                  }
                }
              ]
            },
            "example": {
              "snapshots": [
                {
                  "id": "61486916",
                  "name": "ubuntu-s-1vcpu-1gb-nyc1-01-1585758823330",
                  "cost": "0.05"
                }
              ],
              "volumes": [
                {
                  "id": "ba49449a-7435-11ea-b89e-0a58ac14480f",
                  "name": "volume-nyc1-01",
                  "cost": "10.00"
                }
              ],
              "volume_snapshots": [
                {
                  "id": "edb0478d-7436-11ea-86e6-0a58ac144b91",
                  "name": "volume-nyc1-01-1585758983629",
                  "cost": "0.04"
                }
              ]
            }
          }
        }
      },
      "associated_resources_status": {
        "description": "A JSON object containing containing the status of a request to destroy a Droplet and its associated resources.",
        "headers": {
          "ratelimit-limit": {
            "$ref": "#/components/headers/ratelimit-limit"
          },
          "ratelimit-remaining": {
            "$ref": "#/components/headers/ratelimit-remaining"
          },
          "ratelimit-reset": {
            "$ref": "#/components/headers/ratelimit-reset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/associated_resource_status"
            },
            "example": {
              "droplet": {
                "id": "187000742",
                "name": "ubuntu-s-1vcpu-1gb-nyc1-01",
                "destroyed_at": "2020-04-01T18:11:49Z"
              },
              "resources": {
                "snapshots": [
                  {
                    "id": "61486916",
                    "name": "ubuntu-s-1vcpu-1gb-nyc1-01-1585758823330",
                    "destroyed_at": "2020-04-01T18:11:44Z"
                  }
                ],
                "volumes": [],
                "volume_snapshots": [
                  {
                    "id": "edb0478d-7436-11ea-86e6-0a58ac144b91",
                    "name": "volume-nyc1-01-1585758983629",
                    "destroyed_at": "2020-04-01T18:11:44Z"
                  }
                ]
              },
              "completed_at": "2020-04-01T18:11:49Z",
              "failures": 0
            }
          }
        }
      },
      "conflict": {
        "description": "Conflict",
        "headers": {
          "ratelimit-limit": {
            "$ref": "#/components/headers/ratelimit-limit"
          },
          "ratelimit-remaining": {
            "$ref": "#/components/headers/ratelimit-remaining"
          },
          "ratelimit-reset": {
            "$ref": "#/components/headers/ratelimit-reset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/error"
            },
            "example": {
              "id": "conflict",
              "message": "The request could not be completed due to a conflict."
            }
          }
        }
      },
      "list_firewalls_response": {
        "description": "To list all of the firewalls available on your account, send a GET request to `/v2/firewalls`.",
        "headers": {
          "ratelimit-limit": {
            "$ref": "#/components/headers/ratelimit-limit"
          },
          "ratelimit-remaining": {
            "$ref": "#/components/headers/ratelimit-remaining"
          },
          "ratelimit-reset": {
            "$ref": "#/components/headers/ratelimit-reset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "type": "object",
                  "properties": {
                    "firewalls": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/firewall"
                      }
                    }
                  }
                },
                {
                  "$ref": "#/components/schemas/pagination"
                },
                {
                  "$ref": "#/components/schemas/meta"
                }
              ]
            },
            "example": {
              "firewalls": [
                {
                  "id": "fb6045f1-cf1d-4ca3-bfac-18832663025b",
                  "name": "firewall",
                  "status": "succeeded",
                  "inbound_rules": [
                    {
                      "protocol": "tcp",
                      "ports": "80",
                      "sources": {
                        "load_balancer_uids": [
                          "4de7ac8b-495b-4884-9a69-1050c6793cd6"
                        ]
                      }
                    },
                    {
                      "protocol": "tcp",
                      "ports": "22",
                      "sources": {
                        "tags": [
                          "gateway"
                        ],
                        "addresses": [
                          "18.0.0.0/8"
                        ]
                      }
                    }
                  ],
                  "outbound_rules": [
                    {
                      "protocol": "tcp",
                      "ports": "80",
                      "destinations": {
                        "addresses": [
                          "0.0.0.0/0",
                          "::/0"
                        ]
                      }
                    }
                  ],
                  "created_at": "2017-05-23T21:23:59Z",
                  "droplet_ids": [
                    8043964
                  ],
                  "tags": [],
                  "pending_changes": []
                }
              ],
              "meta": {
                "total": 1
              }
            }
          }
        }
      },
      "create_firewall_response": {
        "description": "The response will be a JSON object with a firewall key. This will be set to an object containing the standard firewall attributes",
        "headers": {
          "ratelimit-limit": {
            "$ref": "#/components/headers/ratelimit-limit"
          },
          "ratelimit-remaining": {
            "$ref": "#/components/headers/ratelimit-remaining"
          },
          "ratelimit-reset": {
            "$ref": "#/components/headers/ratelimit-reset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "firewall": {
                  "$ref": "#/components/schemas/firewall"
                }
              }
            },
            "example": {
              "firewall": {
                "id": "bb4b2611-3d72-467b-8602-280330ecd65c",
                "name": "firewall",
                "status": "waiting",
                "inbound_rules": [
                  {
                    "protocol": "tcp",
                    "ports": "80",
                    "sources": {
                      "load_balancer_uids": [
                        "4de7ac8b-495b-4884-9a69-1050c6793cd6"
                      ]
                    }
                  },
                  {
                    "protocol": "tcp",
                    "ports": "22",
                    "sources": {
                      "tags": [
                        "gateway"
                      ],
                      "addresses": [
                        "18.0.0.0/8"
                      ]
                    }
                  }
                ],
                "outbound_rules": [
                  {
                    "protocol": "tcp",
                    "ports": "80",
                    "destinations": {
                      "addresses": [
                        "0.0.0.0/0",
                        "::/0"
                      ]
                    }
                  }
                ],
                "created_at": "2017-05-23T21:24:00Z",
                "droplet_ids": [
                  8043964
                ],
                "tags": [],
                "pending_changes": [
                  {
                    "droplet_id": 8043964,
                    "removing": false,
                    "status": "waiting"
                  }
                ]
              }
            }
          }
        }
      },
      "bad_request": {
        "description": "Bad Request",
        "headers": {
          "ratelimit-limit": {
            "$ref": "#/components/headers/ratelimit-limit"
          },
          "ratelimit-remaining": {
            "$ref": "#/components/headers/ratelimit-remaining"
          },
          "ratelimit-reset": {
            "$ref": "#/components/headers/ratelimit-reset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/error"
            },
            "example": {
              "id": "bad_request",
              "message": "error parsing request body",
              "request_id": "4851a473-1621-42ea-b2f9-5071c0ea8414"
            }
          }
        }
      },
      "get_firewall_response": {
        "description": "The response will be a JSON object with a firewall key. This will be set to an object containing the standard firewall attributes.",
        "headers": {
          "ratelimit-limit": {
            "$ref": "#/components/headers/ratelimit-limit"
          },
          "ratelimit-remaining": {
            "$ref": "#/components/headers/ratelimit-remaining"
          },
          "ratelimit-reset": {
            "$ref": "#/components/headers/ratelimit-reset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "firewall": {
                  "$ref": "#/components/schemas/firewall"
                }
              }
            },
            "example": {
              "firewall": {
                "id": "bb4b2611-3d72-467b-8602-280330ecd65c",
                "name": "firewall",
                "status": "succeeded",
                "inbound_rules": [
                  {
                    "protocol": "tcp",
                    "ports": "80",
                    "sources": {
                      "load_balancer_uids": [
                        "4de7ac8b-495b-4884-9a69-1050c6793cd6"
                      ]
                    }
                  },
                  {
                    "protocol": "tcp",
                    "ports": "22",
                    "sources": {
                      "tags": [
                        "gateway"
                      ],
                      "addresses": [
                        "18.0.0.0/8"
                      ]
                    }
                  }
                ],
                "outbound_rules": [
                  {
                    "protocol": "tcp",
                    "ports": "80",
                    "destinations": {
                      "addresses": [
                        "0.0.0.0/0",
                        "::/0"
                      ]
                    }
                  }
                ],
                "created_at": "2017-05-23T21:24:00Z",
                "droplet_ids": [
                  8043964
                ],
                "tags": [],
                "pending_changes": []
              }
            }
          }
        }
      },
      "put_firewall_response": {
        "description": "The response will be a JSON object with a `firewall` key. This will be set to an object containing the standard firewall attributes.",
        "headers": {
          "ratelimit-limit": {
            "$ref": "#/components/headers/ratelimit-limit"
          },
          "ratelimit-remaining": {
            "$ref": "#/components/headers/ratelimit-remaining"
          },
          "ratelimit-reset": {
            "$ref": "#/components/headers/ratelimit-reset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "firewall": {
                  "$ref": "#/components/schemas/firewall"
                }
              }
            },
            "example": {
              "firewall": {
                "id": "bb4b2611-3d72-467b-8602-280330ecd65c",
                "name": "frontend-firewall",
                "inbound_rules": [
                  {
                    "protocol": "tcp",
                    "ports": "80",
                    "sources": {
                      "load_balancer_uids": [
                        "4de7ac8b-495b-4884-9a69-1050c6793cd6"
                      ]
                    }
                  },
                  {
                    "protocol": "tcp",
                    "ports": "22",
                    "sources": {
                      "tags": [
                        "gateway"
                      ],
                      "addresses": [
                        "18.0.0.0/8"
                      ]
                    }
                  }
                ],
                "outbound_rules": [
                  {
                    "protocol": "tcp",
                    "ports": "80",
                    "destinations": {
                      "addresses": [
                        "0.0.0.0/0",
                        "::/0"
                      ]
                    }
                  }
                ],
                "created_at": "2020-05-23T21:24:00Z",
                "droplet_ids": [
                  8043964
                ],
                "tags": [
                  "frontend"
                ],
                "status": "waiting",
                "pending_changes": [
                  {
                    "droplet_id": 8043964,
                    "removing": false,
                    "status": "waiting"
                  }
                ]
              }
            }
          }
        }
      },
      "floating_ip_list": {
        "description": "The response will be a JSON object with a key called `floating_ips`. This will be set to an array of floating IP objects, each of which will contain the standard floating IP attributes",
        "headers": {
          "ratelimit-limit": {
            "$ref": "#/components/headers/ratelimit-limit"
          },
          "ratelimit-remaining": {
            "$ref": "#/components/headers/ratelimit-remaining"
          },
          "ratelimit-reset": {
            "$ref": "#/components/headers/ratelimit-reset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "type": "object",
                  "properties": {
                    "floating_ips": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/floating_ip"
                      }
                    }
                  }
                },
                {
                  "$ref": "#/components/schemas/pagination"
                },
                {
                  "$ref": "#/components/schemas/meta"
                }
              ],
              "example": {
                "floating_ips": [
                  {
                    "ip": "45.55.96.47",
                    "droplet": null,
                    "region": {
                      "name": "New York 3",
                      "slug": "nyc3",
                      "features": [
                        "private_networking",
                        "backups",
                        "ipv6",
                        "metadata",
                        "install_agent",
                        "storage",
                        "image_transfer"
                      ],
                      "available": true,
                      "sizes": [
                        "s-1vcpu-1gb",
                        "s-1vcpu-2gb",
                        "s-1vcpu-3gb",
                        "s-2vcpu-2gb",
                        "s-3vcpu-1gb",
                        "s-2vcpu-4gb",
                        "s-4vcpu-8gb",
                        "s-6vcpu-16gb",
                        "s-8vcpu-32gb",
                        "s-12vcpu-48gb",
                        "s-16vcpu-64gb",
                        "s-20vcpu-96gb",
                        "s-24vcpu-128gb",
                        "s-32vcpu-192g"
                      ]
                    },
                    "locked": false
                  }
                ],
                "meta": {
                  "total": 1
                }
              }
            }
          }
        }
      },
      "floating_ip_created": {
        "description": "The response will be a JSON object with a key called `floating_ip`. The value of this will be an object that contains the standard attributes associated with a floating IP.\nWhen assigning a floating IP to a Droplet at same time as it created, the response's `links` object will contain links to both the Droplet and the assignment action. The latter can be used to check the status of the action.",
        "headers": {
          "ratelimit-limit": {
            "$ref": "#/components/headers/ratelimit-limit"
          },
          "ratelimit-remaining": {
            "$ref": "#/components/headers/ratelimit-remaining"
          },
          "ratelimit-reset": {
            "$ref": "#/components/headers/ratelimit-reset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "floating_ip": {
                  "$ref": "#/components/schemas/floating_ip"
                },
                "links": {
                  "type": "object",
                  "properties": {
                    "droplets": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/action_link"
                      }
                    },
                    "actions": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/action_link"
                      }
                    }
                  }
                }
              }
            },
            "examples": {
              "floating_ip_assigning": {
                "$ref": "#/components/examples/floating_ip_assigning"
              },
              "floating_ip_reserving": {
                "$ref": "#/components/examples/floating_ip_reserving"
              }
            }
          }
        }
      },
      "floating_ip": {
        "description": "The response will be a JSON object with a key called `floating_ip`. The value of this will be an object that contains the standard attributes associated with a floating IP.",
        "headers": {
          "ratelimit-limit": {
            "$ref": "#/components/headers/ratelimit-limit"
          },
          "ratelimit-remaining": {
            "$ref": "#/components/headers/ratelimit-remaining"
          },
          "ratelimit-reset": {
            "$ref": "#/components/headers/ratelimit-reset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "floating_ip": {
                  "$ref": "#/components/schemas/floating_ip"
                }
              }
            },
            "examples": {
              "floating_ip_assigned": {
                "$ref": "#/components/examples/floating_ip_assigned"
              },
              "floating_ip_reserved": {
                "$ref": "#/components/examples/floating_ip_reserved"
              }
            }
          }
        }
      },
      "floating_ip_actions": {
        "description": "The results will be returned as a JSON object with an `actions` key. This will be set to an array filled with action objects containing the standard floating IP action attributes.",
        "headers": {
          "ratelimit-limit": {
            "$ref": "#/components/headers/ratelimit-limit"
          },
          "ratelimit-remaining": {
            "$ref": "#/components/headers/ratelimit-remaining"
          },
          "ratelimit-reset": {
            "$ref": "#/components/headers/ratelimit-reset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "type": "object",
                  "properties": {
                    "actions": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/action"
                      }
                    }
                  }
                },
                {
                  "$ref": "#/components/schemas/pagination"
                },
                {
                  "$ref": "#/components/schemas/meta"
                }
              ],
              "example": {
                "actions": [
                  {
                    "id": 72531856,
                    "status": "completed",
                    "type": "reserve_ip",
                    "started_at": "2015-11-21T21:51:09Z",
                    "completed_at": "2015-11-21T21:51:09Z",
                    "resource_id": 758604197,
                    "resource_type": "floating_ip",
                    "region": {
                      "name": "New York 3",
                      "slug": "nyc3",
                      "sizes": [
                        "s-1vcpu-1gb",
                        "s-1vcpu-2gb",
                        "s-1vcpu-3gb",
                        "s-2vcpu-2gb",
                        "s-3vcpu-1gb",
                        "s-2vcpu-4gb",
                        "s-4vcpu-8gb",
                        "s-6vcpu-16gb",
                        "s-8vcpu-32gb",
                        "s-12vcpu-48gb",
                        "s-16vcpu-64gb",
                        "s-20vcpu-96gb",
                        "s-24vcpu-128gb",
                        "s-32vcpu-192gb"
                      ],
                      "features": [
                        "private_networking",
                        "backups",
                        "ipv6",
                        "metadata"
                      ],
                      "available": true
                    },
                    "region_slug": "nyc3"
                  }
                ],
                "meta": {
                  "total": 1
                }
              }
            }
          }
        }
      },
      "floating_ip_action": {
        "description": "The response will be an object with a key called `action`. The value of this will be an object that contains the standard floating IP action attributes.",
        "headers": {
          "ratelimit-limit": {
            "$ref": "#/components/headers/ratelimit-limit"
          },
          "ratelimit-remaining": {
            "$ref": "#/components/headers/ratelimit-remaining"
          },
          "ratelimit-reset": {
            "$ref": "#/components/headers/ratelimit-reset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "action": {
                  "$ref": "#/components/schemas/action"
                }
              },
              "example": {
                "action": {
                  "id": 72531856,
                  "status": "completed",
                  "type": "assign_ip",
                  "started_at": "2015-11-12T17:51:03Z",
                  "completed_at": "2015-11-12T17:51:14Z",
                  "resource_id": 758604968,
                  "resource_type": "floating_ip",
                  "region": {
                    "name": "New York 3",
                    "slug": "nyc3",
                    "sizes": [
                      "s-1vcpu-1gb",
                      "s-1vcpu-2gb",
                      "s-1vcpu-3gb",
                      "s-2vcpu-2gb",
                      "s-3vcpu-1gb",
                      "s-2vcpu-4gb",
                      "s-4vcpu-8gb",
                      "s-6vcpu-16gb",
                      "s-8vcpu-32gb",
                      "s-12vcpu-48gb",
                      "s-16vcpu-64gb",
                      "s-20vcpu-96gb",
                      "s-24vcpu-128gb",
                      "s-32vcpu-192gb"
                    ],
                    "features": [
                      "private_networking",
                      "backups",
                      "ipv6",
                      "metadata"
                    ],
                    "available": true
                  },
                  "region_slug": "nyc3"
                }
              }
            }
          }
        }
      },
      "all_images": {
        "description": "The response will be a JSON object with a key called `images`.  This will be set to an array of image objects, each of which will contain the standard image attributes.",
        "headers": {
          "ratelimit-limit": {
            "$ref": "#/components/headers/ratelimit-limit"
          },
          "ratelimit-remaining": {
            "$ref": "#/components/headers/ratelimit-remaining"
          },
          "ratelimit-reset": {
            "$ref": "#/components/headers/ratelimit-reset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "type": "object",
                  "properties": {
                    "images": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/image"
                      }
                    }
                  },
                  "required": [
                    "images"
                  ]
                },
                {
                  "$ref": "#/components/schemas/pagination"
                },
                {
                  "$ref": "#/components/schemas/meta"
                }
              ]
            },
            "examples": {
              "All": {
                "$ref": "#/components/examples/images_all"
              },
              "Snapshots": {
                "$ref": "#/components/examples/images_snapshots"
              },
              "Distribution": {
                "$ref": "#/components/examples/images_distribution"
              },
              "Custom": {
                "$ref": "#/components/examples/images_custom"
              },
              "Application": {
                "$ref": "#/components/examples/images_application"
              },
              "Tagged": {
                "$ref": "#/components/examples/images_tagged"
              }
            }
          }
        }
      },
      "new_custom_image": {
        "description": "The response will be a JSON object with a key set to `image`.  The value of this will be an image object containing a subset of the standard  image attributes as listed below, including the image's `id` and `status`.  After initial creation, the `status` will be `NEW`. Using the image's id, you  may query the image's status by sending a `GET` request to the  `/v2/images/$IMAGE_ID` endpoint.  When the `status` changes to `available`, the image will be ready for use.",
        "headers": {
          "ratelimit-limit": {
            "$ref": "#/components/headers/ratelimit-limit"
          },
          "ratelimit-remaining": {
            "$ref": "#/components/headers/ratelimit-remaining"
          },
          "ratelimit-reset": {
            "$ref": "#/components/headers/ratelimit-reset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "image": {
                  "$ref": "#/components/schemas/image"
                }
              }
            },
            "example": {
              "image": {
                "created_at": "2018-09-20T19:28:00Z",
                "description": "Cloud-optimized image w/ small footprint",
                "distribution": "Ubuntu",
                "error_message": "",
                "id": 38413969,
                "name": "ubuntu-18.04-minimal",
                "regions": [],
                "type": "custom",
                "tags": [
                  "base-image",
                  "prod"
                ],
                "status": "NEW"
              }
            }
          }
        }
      },
      "existing_image": {
        "description": "The response will be a JSON object with a key called `image`.  The value of this will be an image object containing the standard image attributes.",
        "headers": {
          "ratelimit-limit": {
            "$ref": "#/components/headers/ratelimit-limit"
          },
          "ratelimit-remaining": {
            "$ref": "#/components/headers/ratelimit-remaining"
          },
          "ratelimit-reset": {
            "$ref": "#/components/headers/ratelimit-reset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "image": {
                  "$ref": "#/components/schemas/image"
                }
              },
              "required": [
                "image"
              ]
            },
            "example": {
              "image": {
                "id": 6918990,
                "name": "14.04 x64",
                "distribution": "Ubuntu",
                "slug": "ubuntu-16-04-x64",
                "public": true,
                "regions": [
                  "nyc1",
                  "ams1",
                  "sfo1",
                  "nyc2",
                  "ams2",
                  "sgp1",
                  "lon1",
                  "nyc3",
                  "ams3",
                  "nyc3"
                ],
                "created_at": "2014-10-17T20:24:33Z",
                "min_disk_size": 20,
                "size_gigabytes": 2.34,
                "description": "",
                "tags": [],
                "status": "available",
                "error_message": ""
              }
            }
          }
        }
      },
      "updated_image": {
        "description": "The response will be a JSON object with a key set to `image`.  The value of this will be an image object containing the standard image attributes.",
        "headers": {
          "ratelimit-limit": {
            "$ref": "#/components/headers/ratelimit-limit"
          },
          "ratelimit-remaining": {
            "$ref": "#/components/headers/ratelimit-remaining"
          },
          "ratelimit-reset": {
            "$ref": "#/components/headers/ratelimit-reset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "image": {
                  "$ref": "#/components/schemas/image"
                }
              },
              "required": [
                "image"
              ]
            },
            "example": {
              "image": {
                "id": 7938391,
                "name": "new-image-name",
                "distribution": "Ubuntu",
                "slug": null,
                "public": false,
                "regions": [
                  "nyc3",
                  "nyc3"
                ],
                "created_at": "2014-11-14T16:44:03Z",
                "min_disk_size": 20,
                "size_gigabytes": 2.34,
                "description": "",
                "tags": [],
                "status": "available",
                "error_message": ""
              }
            }
          }
        }
      },
      "get_image_actions_response": {
        "description": "The results will be returned as a JSON object with an `actions` key. This will be set to an array filled with action objects containing the standard action attributes.",
        "headers": {
          "ratelimit-limit": {
            "$ref": "#/components/headers/ratelimit-limit"
          },
          "ratelimit-remaining": {
            "$ref": "#/components/headers/ratelimit-remaining"
          },
          "ratelimit-reset": {
            "$ref": "#/components/headers/ratelimit-reset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "type": "object",
                  "properties": {
                    "actions": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/action"
                      }
                    }
                  }
                },
                {
                  "$ref": "#/components/schemas/pagination"
                },
                {
                  "$ref": "#/components/schemas/meta"
                }
              ]
            },
            "example": {
              "actions": [
                {
                  "id": 29410565,
                  "status": "completed",
                  "type": "transfer",
                  "started_at": "2014-07-25T15:04:21Z",
                  "completed_at": "2014-07-25T15:10:20Z",
                  "resource_id": 7555620,
                  "resource_type": "image",
                  "region": {
                    "name": "New York 2",
                    "slug": "nyc2",
                    "sizes": [
                      "s-1vcpu-3gb",
                      "m-1vcpu-8gb",
                      "s-3vcpu-1gb",
                      "s-1vcpu-2gb",
                      "s-2vcpu-2gb",
                      "s-2vcpu-4gb",
                      "s-4vcpu-8gb",
                      "s-6vcpu-16gb",
                      "s-8vcpu-32gb",
                      "s-12vcpu-48gb",
                      "s-16vcpu-64gb",
                      "s-20vcpu-96gb",
                      "s-1vcpu-1gb",
                      "c-1vcpu-2gb",
                      "s-24vcpu-128gb"
                    ],
                    "features": [
                      "private_networking",
                      "backups",
                      "ipv6",
                      "metadata",
                      "server_id",
                      "install_agent",
                      "storage",
                      "image_transfer"
                    ],
                    "available": true
                  },
                  "region_slug": "nyc2"
                }
              ],
              "links": {
                "pages": {
                  "last": "https://api.digitalocean.com/v2/images/7555620/actions?page=5&per_page=1",
                  "next": "https://api.digitalocean.com/v2/images/7555620/actions?page=2&per_page=1"
                }
              },
              "meta": {
                "total": 5
              }
            }
          }
        }
      },
      "post_image_action_response": {
        "description": "The response will be a JSON object with a key called `action`. The value of this will be an object containing the standard image action attributes.",
        "headers": {
          "ratelimit-limit": {
            "$ref": "#/components/headers/ratelimit-limit"
          },
          "ratelimit-remaining": {
            "$ref": "#/components/headers/ratelimit-remaining"
          },
          "ratelimit-reset": {
            "$ref": "#/components/headers/ratelimit-reset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/action"
            },
            "example": {
              "action": {
                "id": 36805527,
                "status": "in-progress",
                "type": "transfer",
                "started_at": "2014-11-14T16:42:45Z",
                "completed_at": null,
                "resource_id": 7938269,
                "resource_type": "image",
                "region": {
                  "name": "New York 3",
                  "slug": "nyc3",
                  "sizes": [
                    "s-1vcpu-3gb",
                    "m-1vcpu-8gb",
                    "s-3vcpu-1gb",
                    "s-1vcpu-2gb",
                    "s-2vcpu-2gb",
                    "s-2vcpu-4gb",
                    "s-4vcpu-8gb",
                    "s-6vcpu-16gb",
                    "s-8vcpu-32gb",
                    "s-12vcpu-48gb",
                    "s-16vcpu-64gb",
                    "s-20vcpu-96gb",
                    "s-1vcpu-1gb",
                    "c-1vcpu-2gb",
                    "s-24vcpu-128gb"
                  ],
                  "features": [
                    "private_networking",
                    "backups",
                    "ipv6",
                    "metadata",
                    "server_id",
                    "install_agent",
                    "storage",
                    "image_transfer"
                  ],
                  "available": true
                },
                "region_slug": "nyc3"
              }
            }
          }
        }
      },
      "get_image_action_response": {
        "description": "The response will be an object with a key called `action`. The value of this will be an object that contains the standard image action attributes.",
        "headers": {
          "ratelimit-limit": {
            "$ref": "#/components/headers/ratelimit-limit"
          },
          "ratelimit-remaining": {
            "$ref": "#/components/headers/ratelimit-remaining"
          },
          "ratelimit-reset": {
            "$ref": "#/components/headers/ratelimit-reset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/action"
            },
            "example": {
              "action": {
                "id": 36805527,
                "status": "in-progress",
                "type": "transfer",
                "started_at": "2014-11-14T16:42:45Z",
                "completed_at": null,
                "resource_id": 7938269,
                "resource_type": "image",
                "region": {
                  "name": "New York 3",
                  "slug": "nyc3",
                  "sizes": [
                    "s-1vcpu-3gb",
                    "m-1vcpu-8gb",
                    "s-3vcpu-1gb",
                    "s-1vcpu-2gb",
                    "s-2vcpu-2gb",
                    "s-2vcpu-4gb",
                    "s-4vcpu-8gb",
                    "s-6vcpu-16gb",
                    "s-8vcpu-32gb",
                    "s-12vcpu-48gb",
                    "s-16vcpu-64gb",
                    "s-20vcpu-96gb",
                    "s-1vcpu-1gb",
                    "c-1vcpu-2gb",
                    "s-24vcpu-128gb"
                  ],
                  "features": [
                    "private_networking",
                    "backups",
                    "ipv6",
                    "metadata",
                    "server_id",
                    "install_agent",
                    "storage",
                    "image_transfer"
                  ],
                  "available": true
                },
                "region_slug": "nyc3"
              }
            }
          }
        }
      },
      "all_clusters": {
        "description": "The response will be a JSON object with a key called `kubernetes_clusters`.\nThis will be set to an array of objects, each of which will contain the\nstandard Kubernetes cluster attributes.\n",
        "headers": {
          "ratelimit-limit": {
            "$ref": "#/components/headers/ratelimit-limit"
          },
          "ratelimit-remaining": {
            "$ref": "#/components/headers/ratelimit-remaining"
          },
          "ratelimit-reset": {
            "$ref": "#/components/headers/ratelimit-reset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "type": "object",
                  "properties": {
                    "kubernetes_clusters": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/cluster"
                      }
                    }
                  }
                },
                {
                  "$ref": "#/components/schemas/pagination"
                },
                {
                  "$ref": "#/components/schemas/meta"
                }
              ]
            },
            "examples": {
              "All Kubernetes Clusters": {
                "$ref": "#/components/examples/kubernetes_clusters_all"
              }
            }
          }
        }
      },
      "cluster_create": {
        "description": "The response will be a JSON object with a key called `kubernetes_cluster`. The\nvalue of this will be an object containing the standard attributes of a\nKubernetes cluster.\n\nThe IP address and cluster API server endpoint will not be available until the\ncluster has finished provisioning. The initial value of the cluster's\n`status.state` attribute will be `provisioning`. When the cluster is ready,\nthis will transition to `running`.\n",
        "headers": {
          "ratelimit-limit": {
            "$ref": "#/components/headers/ratelimit-limit"
          },
          "ratelimit-remaining": {
            "$ref": "#/components/headers/ratelimit-remaining"
          },
          "ratelimit-reset": {
            "$ref": "#/components/headers/ratelimit-reset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "kubernetes_cluster": {
                  "$ref": "#/components/schemas/cluster"
                }
              }
            },
            "examples": {
              "Kubernetes Cluster Response": {
                "$ref": "#/components/examples/kubernetes_clusters_create_basic_response"
              },
              "Kubernetes Cluster with Multiple Node Pools Response": {
                "$ref": "#/components/examples/kubernetes_clusters_multi_pool_response"
              }
            }
          }
        }
      },
      "existing_cluster": {
        "description": "The response will be a JSON object with a key called `kubernetes_cluster`. The\nvalue of this will be an object containing the standard attributes of a\nKubernetes cluster.\n",
        "headers": {
          "ratelimit-limit": {
            "$ref": "#/components/headers/ratelimit-limit"
          },
          "ratelimit-remaining": {
            "$ref": "#/components/headers/ratelimit-remaining"
          },
          "ratelimit-reset": {
            "$ref": "#/components/headers/ratelimit-reset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "kubernetes_cluster": {
                  "$ref": "#/components/schemas/cluster"
                }
              }
            },
            "examples": {
              "Single Kubernetes Cluster": {
                "$ref": "#/components/examples/kubernetes_single"
              }
            }
          }
        }
      },
      "updated_cluster": {
        "description": "The response will be a JSON object with a key called `kubernetes_cluster`. The\nvalue of this will be an object containing the standard attributes of a\nKubernetes cluster.\n",
        "headers": {
          "ratelimit-limit": {
            "$ref": "#/components/headers/ratelimit-limit"
          },
          "ratelimit-remaining": {
            "$ref": "#/components/headers/ratelimit-remaining"
          },
          "ratelimit-reset": {
            "$ref": "#/components/headers/ratelimit-reset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "kubernetes_cluster": {
                  "$ref": "#/components/schemas/cluster"
                }
              }
            },
            "examples": {
              "Updated Kubernetes Cluster": {
                "$ref": "#/components/examples/kubernetes_updated"
              }
            }
          }
        }
      },
      "associated_kubernetes_resources_list": {
        "description": "The response will be a JSON object containing `load_balancers`, `volumes`, and `volume_snapshots` keys. Each will be set to an array of objects containing the standard attributes for associated resources.",
        "headers": {
          "ratelimit-limit": {
            "$ref": "#/components/headers/ratelimit-limit"
          },
          "ratelimit-remaining": {
            "$ref": "#/components/headers/ratelimit-remaining"
          },
          "ratelimit-reset": {
            "$ref": "#/components/headers/ratelimit-reset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/associated_kubernetes_resources"
            }
          }
        }
      },
      "kubeconfig": {
        "description": "A kubeconfig file for the cluster in YAML format.",
        "headers": {
          "ratelimit-limit": {
            "$ref": "#/components/headers/ratelimit-limit"
          },
          "ratelimit-remaining": {
            "$ref": "#/components/headers/ratelimit-remaining"
          },
          "ratelimit-reset": {
            "$ref": "#/components/headers/ratelimit-reset"
          }
        },
        "content": {
          "application/yaml": {
            "schema": {
              "type": "string"
            },
            "example": "apiVersion: v1\nclusters:\n- cluster:\n    certificate-authority-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURUxCUUF3TXpFVk1CTUdBMVVFQ2ftTVJHbG4KYVhSaGJFOWpaV0Z1TVJvd0dUSREERXhGck9ITmhZWE1nUTJ4MWMzUmxjaUJEUVRBZUZ3MHhPREV4TVRVeApOakF3TWpCYUZ3MHpPREV4TVRVeE5qQXdNakJhTURNeEZUQVRCZ05WQkFvVERFUnBaMmwwWVd4UFkyVmhiakVhCk1CZ0dBMVVFQXhNUmF6aHpZV0Z6SUVOc2RYTjBaWElnUTBFd2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUIKRHdBd2dnRUtBb0lCQVFDK2Z0L05Nd3pNaUxFZlFvTFU2bDgrY0hMbWttZFVKdjl4SmlhZUpIU0dZOGhPZFVEZQpGd1Zoc0pDTnVFWkpJUFh5Y0orcGpkU3pYc1lFSE03WVNKWk9xNkdaYThPMnZHUlJjN2ZQaUFJaFBRK0ZpUmYzCmRhMHNIUkZlM2hCTmU5ZE5SeTliQ2VCSTRSUlQrSEwzRFR3L2I5KytmRkdZQkRoVTEvTTZUWWRhUHR3WU0rdWgKb1pKcWJZVGJZZTFhb3R1ekdnYUpXaXRhdFdHdnNJYU8xYWthdkh0WEIOOHFxa2lPemdrSDdvd3RVY3JYM05iawozdmlVeFU4TW40MmlJaGFyeHNvTnlwdGhHOWZLMi9OdVdKTXJJS2R0Mzhwc0tkdDBFbng0MWg5K0dsMjUzMzhWCk1mdjBDVDF6SG1JanYwblIrakNkcFd0eFVLRyt0YjYzZFhNbkFnTUJBQUdqUlRCRE1BNEdBMVVkRHdFQi93UUUKQXdJQmhqQVNCZ05WSFJNQkFmOEVDREFHQVFIL0FnRUFNQjBHQTFVZERnUVdCQlNQMmJrOXJiUGJpQnZOd1Z1NQpUL0dwTFdvOTdEQU5CZ2txaGtpRzl3MEJBUXNGQUFPQ0FRRUFEVjFMSGZyc1JiYVdONHE5SnBFVDMxMlluRDZ6Cm5rM3BpU1ZSYVEvM09qWG8wdHJ6Z2N4KzlVTUQxeDRHODI1RnYxc0ROWUExZEhFc2dHUmNyRkVmdGZJQWUrUVYKTitOR3NMRnQrOGZrWHdnUlpoNEU4ZUJsSVlrdEprOWptMzFMT25vaDJYZno0aGs3VmZwYkdvVVlsbmVoak1JZApiL3ZMUk05Y2EwVTJlYTB5OTNveE5pdU9PcXdrZGFjU1orczJtb3JNdGZxc3VRSzRKZDA3SENIbUFIeWpXT2k4ClVOQVUyTnZnSnBKY2RiZ3VzN2I5S3ppR1ZERklFUk04cEo4U1Nob1ZvVFFJd3d5Y2xVTU9EUUJreFFHOHNVRk8KRDE3ZjRod1dNbW5qVHY2MEJBM0dxaTZRcjdsWVFSL3drSEtQcnZjMjhoNXB0NndPWEY1b1M4OUZkUT09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K\n    server: https://bd5f5959-5e1e-4205-a714-a914373942af.k8s.ondigitalocean.com\n  name: do-nyc1-prod-cluster-01\ncontexts:\n- context:\n    cluster: do-nyc1-prod-cluster-01\n    user: do-nyc1-prod-cluster-01-admin\n  name: do-nyc1-prod-cluster-01\ncurrent-context: do-nyc1-prod-cluster-01\nkind: Config\npreferences: {}\nusers:\n- name: do-nyc1-prod-cluster-01-admin\n  user:\n    token: 403d085aaa80102277d8da97ffd2db2b6a4f129d0e2146098fdfb0cec624babc\n"
          }
        }
      },
      "credentials": {
        "description": "A JSON object containing credentials for a cluster.",
        "headers": {
          "ratelimit-limit": {
            "$ref": "#/components/headers/ratelimit-limit"
          },
          "ratelimit-remaining": {
            "$ref": "#/components/headers/ratelimit-remaining"
          },
          "ratelimit-reset": {
            "$ref": "#/components/headers/ratelimit-reset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/credentials"
            }
          }
        }
      },
      "available_upgrades": {
        "description": "The response will be a JSON object with a key called\n`available_upgrade_versions`. The value of this will be an array of objects,\nrepresenting the upgrade versions currently available for this cluster.\n\nIf the cluster is up-to-date (i.e. there are no upgrades currently available)\n`available_upgrade_versions` will be `null`.\n",
        "headers": {
          "ratelimit-limit": {
            "$ref": "#/components/headers/ratelimit-limit"
          },
          "ratelimit-remaining": {
            "$ref": "#/components/headers/ratelimit-remaining"
          },
          "ratelimit-reset": {
            "$ref": "#/components/headers/ratelimit-reset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "available_upgrade_versions": {
                  "type": "array",
                  "nullable": true,
                  "items": {
                    "$ref": "#/components/schemas/kubernetes_version"
                  }
                }
              }
            }
          }
        }
      },
      "all_node_pools": {
        "description": "The response will be a JSON object with a key called `node_pools`. This will\nbe set to an array of objects, each of which will contain the standard node\npool attributes.\n",
        "headers": {
          "ratelimit-limit": {
            "$ref": "#/components/headers/ratelimit-limit"
          },
          "ratelimit-remaining": {
            "$ref": "#/components/headers/ratelimit-remaining"
          },
          "ratelimit-reset": {
            "$ref": "#/components/headers/ratelimit-reset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "node_pools": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/kubernetes_node_pool"
                  }
                }
              }
            },
            "example": {
              "node_pools": [
                {
                  "id": "cdda885e-7663-40c8-bc74-3a036c66545d",
                  "name": "frontend-pool",
                  "size": "s-1vcpu-2gb",
                  "count": 3,
                  "tags": [
                    "production",
                    "web-team",
                    "k8s",
                    "k8s:bd5f5959-5e1e-4205-a714-a914373942af",
                    "k8s:worker"
                  ],
                  "labels": null,
                  "auto_scale": false,
                  "min_nodes": 0,
                  "max_nodes": 0,
                  "nodes": [
                    {
                      "id": "478247f8-b1bb-4f7a-8db9-2a5f8d4b8f8f",
                      "name": "adoring-newton-3niq",
                      "status": {
                        "state": "running"
                      },
                      "droplet_id": "205545370",
                      "created_at": "2018-11-15T16:00:11Z",
                      "updated_at": "2018-11-15T16:00:11Z"
                    },
                    {
                      "id": "ad12e744-c2a9-473d-8aa9-be5680500eb1",
                      "name": "adoring-newton-3nim",
                      "status": {
                        "state": "running"
                      },
                      "droplet_id": "205545371",
                      "created_at": "2018-11-15T16:00:11Z",
                      "updated_at": "2018-11-15T16:00:11Z"
                    },
                    {
                      "id": "e46e8d07-f58f-4ff1-9737-97246364400e",
                      "name": "adoring-newton-3ni7",
                      "status": {
                        "state": "running"
                      },
                      "droplet_id": "205545372",
                      "created_at": "2018-11-15T16:00:11Z",
                      "updated_at": "2018-11-15T16:00:11Z"
                    }
                  ]
                },
                {
                  "id": "f49f4379-7e7f-4af5-aeb6-0354bd840778",
                  "name": "backend-pool",
                  "size": "g-4vcpu-16gb",
                  "count": 2,
                  "tags": [
                    "production",
                    "web-team",
                    "k8s",
                    "k8s:bd5f5959-5e1e-4205-a714-a914373942af",
                    "k8s:worker"
                  ],
                  "labels": {
                    "service": "backend",
                    "priority": "high"
                  },
                  "auto_scale": true,
                  "min_nodes": 2,
                  "max_nodes": 5,
                  "nodes": [
                    {
                      "id": "3385619f-8ec3-42ba-bb23-8d21b8ba7518",
                      "name": "affectionate-nightingale-3nif",
                      "status": {
                        "state": "running"
                      },
                      "droplet_id": "205545373",
                      "created_at": "2018-11-15T16:00:11Z",
                      "updated_at": "2018-11-15T16:00:11Z"
                    },
                    {
                      "id": "4b8f60ff-ba06-4523-a6a4-b8148244c7e6",
                      "name": "affectionate-nightingale-3niy",
                      "status": {
                        "state": "running"
                      },
                      "droplet_id": "205545374",
                      "created_at": "2018-11-15T16:00:11Z",
                      "updated_at": "2018-11-15T16:00:11Z"
                    }
                  ]
                }
              ]
            }
          }
        }
      },
      "node_pool_create": {
        "description": "The response will be a JSON object with a key called `node_pool`. The value of\nthis will be an object containing the standard attributes of a node pool.\n",
        "headers": {
          "ratelimit-limit": {
            "$ref": "#/components/headers/ratelimit-limit"
          },
          "ratelimit-remaining": {
            "$ref": "#/components/headers/ratelimit-remaining"
          },
          "ratelimit-reset": {
            "$ref": "#/components/headers/ratelimit-reset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "node_pool": {
                  "$ref": "#/components/schemas/kubernetes_node_pool"
                }
              },
              "example": {
                "node_pool": {
                  "id": "cdda885e-7663-40c8-bc74-3a036c66545d",
                  "name": "new-pool",
                  "size": "s-1vcpu-2gb",
                  "count": 3,
                  "tags": [
                    "production",
                    "web-team",
                    "front-end",
                    "k8s",
                    "k8s:bd5f5959-5e1e-4205-a714-a914373942af",
                    "k8s:worker"
                  ],
                  "labels": null,
                  "taints": [],
                  "auto_scale": true,
                  "min_nodes": 3,
                  "max_nodes": 6,
                  "nodes": [
                    {
                      "id": "478247f8-b1bb-4f7a-8db9-2a5f8d4b8f8f",
                      "name": " ",
                      "status": {
                        "state": "provisioning"
                      },
                      "droplet_id": " ",
                      "created_at": "2018-11-15T16:00:11Z",
                      "updated_at": "2018-11-15T16:00:11Z"
                    },
                    {
                      "id": "ad12e744-c2a9-473d-8aa9-be5680500eb1",
                      "name": " ",
                      "status": {
                        "state": "provisioning"
                      },
                      "droplet_id": " ",
                      "created_at": "2018-11-15T16:00:11Z",
                      "updated_at": "2018-11-15T16:00:11Z"
                    },
                    {
                      "id": "e46e8d07-f58f-4ff1-9737-97246364400e",
                      "name": " ",
                      "status": {
                        "state": "provisioning"
                      },
                      "droplet_id": " ",
                      "created_at": "2018-11-15T16:00:11Z",
                      "updated_at": "2018-11-15T16:00:11Z"
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "existing_node_pool": {
        "description": "The response will be a JSON object with a key called `node_pool`. The value\nof this will be an object containing the standard attributes of a node pool.\n",
        "headers": {
          "ratelimit-limit": {
            "$ref": "#/components/headers/ratelimit-limit"
          },
          "ratelimit-remaining": {
            "$ref": "#/components/headers/ratelimit-remaining"
          },
          "ratelimit-reset": {
            "$ref": "#/components/headers/ratelimit-reset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "node_pool": {
                  "$ref": "#/components/schemas/kubernetes_node_pool"
                }
              },
              "example": {
                "node_pool": {
                  "id": "cdda885e-7663-40c8-bc74-3a036c66545d",
                  "name": "frontend-pool",
                  "size": "s-1vcpu-2gb",
                  "count": 3,
                  "tags": [
                    "production",
                    "web-team",
                    "k8s",
                    "k8s:bd5f5959-5e1e-4205-a714-a914373942af",
                    "k8s:worker"
                  ],
                  "labels": {
                    "service": "backend",
                    "priority": "high"
                  },
                  "taints": [
                    {
                      "key": "priority",
                      "value": "high",
                      "effect": "NoSchedule"
                    }
                  ],
                  "auto_scale": false,
                  "min_nodes": 0,
                  "max_nodes": 0,
                  "nodes": [
                    {
                      "id": "478247f8-b1bb-4f7a-8db9-2a5f8d4b8f8f",
                      "name": "adoring-newton-3niq",
                      "status": {
                        "state": "running"
                      },
                      "droplet_id": "205545370",
                      "created_at": "2018-11-15T16:00:11Z",
                      "updated_at": "2018-11-15T16:00:11Z"
                    },
                    {
                      "id": "ad12e744-c2a9-473d-8aa9-be5680500eb1",
                      "name": "adoring-newton-3nim",
                      "status": {
                        "state": "running"
                      },
                      "droplet_id": "205545371",
                      "created_at": "2018-11-15T16:00:11Z",
                      "updated_at": "2018-11-15T16:00:11Z"
                    },
                    {
                      "id": "e46e8d07-f58f-4ff1-9737-97246364400e",
                      "name": "adoring-newton-3ni7",
                      "status": {
                        "state": "running"
                      },
                      "droplet_id": "205545372",
                      "created_at": "2018-11-15T16:00:11Z",
                      "updated_at": "2018-11-15T16:00:11Z"
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "node_pool_update": {
        "description": "The response will be a JSON object with a key called `node_pool`. The value of\nthis will be an object containing the standard attributes of a node pool.\n",
        "headers": {
          "ratelimit-limit": {
            "$ref": "#/components/headers/ratelimit-limit"
          },
          "ratelimit-remaining": {
            "$ref": "#/components/headers/ratelimit-remaining"
          },
          "ratelimit-reset": {
            "$ref": "#/components/headers/ratelimit-reset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "node_pool": {
                  "$ref": "#/components/schemas/kubernetes_node_pool"
                }
              },
              "example": {
                "node_pool": {
                  "id": "cdda885e-7663-40c8-bc74-3a036c66545d",
                  "name": "renamed-pool",
                  "size": "s-1vcpu-2gb",
                  "count": 3,
                  "tags": [
                    "production",
                    "web-team",
                    "front-end",
                    "new-tag",
                    "k8s",
                    "k8s:bd5f5959-5e1e-4205-a714-a914373942af",
                    "k8s:worker"
                  ],
                  "labels": null,
                  "taints": [],
                  "auto_scale": true,
                  "min_nodes": 3,
                  "max_nodes": 6,
                  "nodes": [
                    {
                      "id": "478247f8-b1bb-4f7a-8db9-2a5f8d4b8f8f",
                      "name": "adoring-newton-3niq",
                      "status": {
                        "state": "running"
                      },
                      "droplet_id": "205545370",
                      "created_at": "2018-11-15T16:00:11Z",
                      "updated_at": "2018-11-15T16:00:11Z"
                    },
                    {
                      "id": "ad12e744-c2a9-473d-8aa9-be5680500eb1",
                      "name": "adoring-newton-3nim",
                      "status": {
                        "state": "running"
                      },
                      "droplet_id": "205545371",
                      "created_at": "2018-11-15T16:00:11Z",
                      "updated_at": "2018-11-15T16:00:11Z"
                    },
                    {
                      "id": "e46e8d07-f58f-4ff1-9737-97246364400e",
                      "name": "adoring-newton-3ni7",
                      "status": {
                        "state": "running"
                      },
                      "droplet_id": "205545372",
                      "created_at": "2018-11-15T16:00:11Z",
                      "updated_at": "2018-11-15T16:00:11Z"
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "cluster_user": {
        "description": "The response will be a JSON object with a key called `kubernetes_cluster_user`\ncontaining the username and in-cluster groups that it belongs to.\n",
        "headers": {
          "ratelimit-limit": {
            "$ref": "#/components/headers/ratelimit-limit"
          },
          "ratelimit-remaining": {
            "$ref": "#/components/headers/ratelimit-remaining"
          },
          "ratelimit-reset": {
            "$ref": "#/components/headers/ratelimit-reset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/user"
            }
          }
        }
      },
      "all_options": {
        "description": "The response will be a JSON object with a key called `options` which contains\n`regions`, `versions`, and `sizes` objects listing the available options and\nthe matching slugs for use when creating a new cluster.\n",
        "headers": {
          "ratelimit-limit": {
            "$ref": "#/components/headers/ratelimit-limit"
          },
          "ratelimit-remaining": {
            "$ref": "#/components/headers/ratelimit-remaining"
          },
          "ratelimit-reset": {
            "$ref": "#/components/headers/ratelimit-reset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/kubernetes_options"
            },
            "examples": {
              "All Kubernetes Options": {
                "$ref": "#/components/examples/kubernetes_options"
              }
            }
          }
        }
      },
      "clusterlint_results": {
        "description": "The response is a JSON object which contains the diagnostics on Kubernetes\nobjects in the cluster. Each diagnostic will contain some metadata information\nabout the object and feedback for users to act upon.\n",
        "headers": {
          "ratelimit-limit": {
            "$ref": "#/components/headers/ratelimit-limit"
          },
          "ratelimit-remaining": {
            "$ref": "#/components/headers/ratelimit-remaining"
          },
          "ratelimit-reset": {
            "$ref": "#/components/headers/ratelimit-reset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/clusterlint_results"
            }
          }
        }
      },
      "clusterlint_run": {
        "description": "The response is a JSON object with a key called `run_id` that you can later use to fetch the run results.",
        "headers": {
          "ratelimit-limit": {
            "$ref": "#/components/headers/ratelimit-limit"
          },
          "ratelimit-remaining": {
            "$ref": "#/components/headers/ratelimit-remaining"
          },
          "ratelimit-reset": {
            "$ref": "#/components/headers/ratelimit-reset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "run_id": {
                  "type": "string",
                  "example": "50c2f44c-011d-493e-aee5-361a4a0d1844",
                  "description": "ID of the clusterlint run that can be used later to fetch the diagnostics."
                }
              }
            }
          }
        }
      },
      "all_load_balancers": {
        "description": "A JSON object with a key of `load_balancers`. This will be set to an array of objects, each of which will contain the standard load balancer attributes.",
        "headers": {
          "ratelimit-limit": {
            "$ref": "#/components/headers/ratelimit-limit"
          },
          "ratelimit-remaining": {
            "$ref": "#/components/headers/ratelimit-remaining"
          },
          "ratelimit-reset": {
            "$ref": "#/components/headers/ratelimit-reset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "type": "object",
                  "properties": {
                    "load_balancers": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/load_balancer"
                      }
                    }
                  }
                },
                {
                  "$ref": "#/components/schemas/pagination"
                },
                {
                  "$ref": "#/components/schemas/meta"
                }
              ]
            },
            "examples": {
              "All Load Balancers": {
                "$ref": "#/components/examples/load_balancers_all"
              }
            }
          }
        }
      },
      "load_balancer_create": {
        "description": "Accepted",
        "headers": {
          "ratelimit-limit": {
            "$ref": "#/components/headers/ratelimit-limit"
          },
          "ratelimit-remaining": {
            "$ref": "#/components/headers/ratelimit-remaining"
          },
          "ratelimit-reset": {
            "$ref": "#/components/headers/ratelimit-reset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "load_balancer": {
                  "$ref": "#/components/schemas/load_balancer"
                }
              }
            },
            "examples": {
              "Basic Create Response": {
                "$ref": "#/components/examples/load_balancer_basic_response"
              },
              "SSL Termination Create Response": {
                "$ref": "#/components/examples/load_balancer_ssl_termination_response"
              },
              "Create Response Using Droplet Tag": {
                "$ref": "#/components/examples/load_balancer_using_tag_response"
              },
              "Sticky Sessions and Custom Health Check": {
                "$ref": ""
              }
            }
          }
        }
      },
      "existing_load_balancer": {
        "description": "The response will be a JSON object with a key called `load_balancer`. The\nvalue of this will be an object that contains the standard attributes\nassociated with a load balancer\n",
        "headers": {
          "ratelimit-limit": {
            "$ref": "#/components/headers/ratelimit-limit"
          },
          "ratelimit-remaining": {
            "$ref": "#/components/headers/ratelimit-remaining"
          },
          "ratelimit-reset": {
            "$ref": "#/components/headers/ratelimit-reset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "load_balancer": {
                  "$ref": "#/components/schemas/load_balancer"
                }
              }
            },
            "examples": {
              "load_balancer_basic_response": {
                "$ref": "#/components/examples/load_balancer_basic_response"
              }
            }
          }
        }
      },
      "updated_load_balancer": {
        "description": "The response will be a JSON object with a key called `load_balancer`. The\nvalue of this will be an object containing the standard attributes of a\nload balancer.\n",
        "headers": {
          "ratelimit-limit": {
            "$ref": "#/components/headers/ratelimit-limit"
          },
          "ratelimit-remaining": {
            "$ref": "#/components/headers/ratelimit-remaining"
          },
          "ratelimit-reset": {
            "$ref": "#/components/headers/ratelimit-reset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "load_balancer": {
                  "$ref": "#/components/schemas/load_balancer"
                }
              }
            },
            "examples": {
              "load_balancer_update_response": {
                "$ref": "#/components/examples/load_balancer_update_response"
              }
            }
          }
        }
      },
      "list_alert_policy_response": {
        "description": "A list of alert policies.",
        "headers": {
          "ratelimit-limit": {
            "$ref": "#/components/headers/ratelimit-limit"
          },
          "ratelimit-remaining": {
            "$ref": "#/components/headers/ratelimit-remaining"
          },
          "ratelimit-reset": {
            "$ref": "#/components/headers/ratelimit-reset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/list_alert_policy"
                },
                {
                  "$ref": "#/components/schemas/pagination"
                },
                {
                  "$ref": "#/components/schemas/meta"
                }
              ],
              "example": {
                "policies": [
                  {
                    "alerts": {
                      "email": [
                        "bob@example.com"
                      ],
                      "slack": [
                        {
                          "channel": "Production Alerts",
                          "url": "https://hooks.slack.com/services/T1234567/AAAAAAAA/ZZZZZZ\""
                        }
                      ]
                    },
                    "compare": "GreaterThan",
                    "description": "CPU Alert",
                    "enabled": true,
                    "entities": [
                      192018292
                    ],
                    "tags": [
                      "production_droplets"
                    ],
                    "type": "v1/insights/droplet/cpu",
                    "uuid": "78b3da62-27e5-49ba-ac70-5db0b5935c64",
                    "value": 80,
                    "window": "5m"
                  }
                ],
                "links": {
                  "first": "https//api.digitalocean.com/v2/monitoring/alerts?page=1&per_page=10",
                  "prev": "https//api.digitalocean.com/v2/monitoring/alerts?page=2&per_page=10",
                  "next": "https//api.digitalocean.com/v2/monitoring/alerts?page=4&per_page=10",
                  "last": "https//api.digitalocean.com/v2/monitoring/alerts?page=5&per_page=10"
                },
                "meta": {
                  "total": 50
                }
              }
            }
          }
        }
      },
      "alert_policy_response": {
        "description": "An alert policy.",
        "headers": {
          "ratelimit-limit": {
            "$ref": "#/components/headers/ratelimit-limit"
          },
          "ratelimit-remaining": {
            "$ref": "#/components/headers/ratelimit-remaining"
          },
          "ratelimit-reset": {
            "$ref": "#/components/headers/ratelimit-reset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/alert_policy"
            }
          }
        }
      },
      "metric_response": {
        "description": "The response will be a JSON object with a key called `data` and `status`.",
        "headers": {
          "ratelimit-limit": {
            "$ref": "#/components/headers/ratelimit-limit"
          },
          "ratelimit-remaining": {
            "$ref": "#/components/headers/ratelimit-remaining"
          },
          "ratelimit-reset": {
            "$ref": "#/components/headers/ratelimit-reset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/metrics"
            }
          }
        }
      },
      "projects_list": {
        "description": "The response will be a JSON object with a key called `projects`. The value of this will be an object with the standard project attributes",
        "headers": {
          "ratelimit-limit": {
            "$ref": "#/components/headers/ratelimit-limit"
          },
          "ratelimit-remaining": {
            "$ref": "#/components/headers/ratelimit-remaining"
          },
          "ratelimit-reset": {
            "$ref": "#/components/headers/ratelimit-reset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "type": "object",
                  "properties": {
                    "projects": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/project"
                      }
                    }
                  }
                },
                {
                  "$ref": "#/components/schemas/pagination"
                },
                {
                  "$ref": "#/components/schemas/meta"
                }
              ],
              "example": {
                "projects": [
                  {
                    "id": "4e1bfbc3-dc3e-41f2-a18f-1b4d7ba71679",
                    "owner_uuid": "99525febec065ca37b2ffe4f852fd2b2581895e7",
                    "owner_id": 258992,
                    "name": "my-web-api",
                    "description": "My website API",
                    "purpose": "Service or API",
                    "environment": "Production",
                    "is_default": false,
                    "created_at": "2018-09-27T20:10:35Z",
                    "updated_at": "2018-09-27T20:10:35Z"
                  },
                  {
                    "id": "addb4547-6bab-419a-8542-76263a033cf6",
                    "owner_uuid": "99525febec065ca37b2ffe4f852fd2b2581895e7",
                    "owner_id": 258992,
                    "name": "Default",
                    "description": "Default project",
                    "purpose": "Just trying out DigitalOcean",
                    "environment": "Development",
                    "is_default": true,
                    "created_at": "2017-10-19T21:44:20Z",
                    "updated_at": "2019-11-05T18:50:03Z"
                  }
                ],
                "links": {
                  "pages": {
                    "first": "https://api.digitalocean.com/v2/projects?page=1",
                    "last": "https://api.digitalocean.com/v2/projects?page=1"
                  }
                },
                "meta": {
                  "total": 2
                }
              }
            }
          }
        }
      },
      "existing_project": {
        "description": "The response will be a JSON object with a key called `project`. The value of this will be an object with the standard project attributes",
        "headers": {
          "ratelimit-limit": {
            "$ref": "#/components/headers/ratelimit-limit"
          },
          "ratelimit-remaining": {
            "$ref": "#/components/headers/ratelimit-remaining"
          },
          "ratelimit-reset": {
            "$ref": "#/components/headers/ratelimit-reset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "project": {
                  "$ref": "#/components/schemas/project"
                }
              }
            }
          }
        }
      },
      "default_project": {
        "description": "The response will be a JSON object with a key called `project`. The value of this will be an object with the standard project attributes",
        "headers": {
          "ratelimit-limit": {
            "$ref": "#/components/headers/ratelimit-limit"
          },
          "ratelimit-remaining": {
            "$ref": "#/components/headers/ratelimit-remaining"
          },
          "ratelimit-reset": {
            "$ref": "#/components/headers/ratelimit-reset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "project": {
                  "$ref": "#/components/schemas/project"
                }
              },
              "example": {
                "project": {
                  "id": "addb4547-6bab-419a-8542-76263a033cf6",
                  "owner_uuid": "99525febec065ca37b2ffe4f852fd2b2581895e7",
                  "owner_id": 258992,
                  "name": "Default",
                  "description": "Default project",
                  "purpose": "Just trying out DigitalOcean",
                  "environment": "Development",
                  "is_default": true,
                  "created_at": "2017-10-19T21:44:20Z",
                  "updated_at": "2019-11-05T18:50:03Z"
                }
              }
            }
          }
        }
      },
      "precondition_failed": {
        "description": "Only an empty project can be deleted.",
        "headers": {
          "ratelimit-limit": {
            "$ref": "#/components/headers/ratelimit-limit"
          },
          "ratelimit-remaining": {
            "$ref": "#/components/headers/ratelimit-remaining"
          },
          "ratelimit-reset": {
            "$ref": "#/components/headers/ratelimit-reset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/error"
            },
            "example": {
              "id": "precondition_failed",
              "message": "cannot delete a project with resources. move or remove the resources first"
            }
          }
        }
      },
      "resources_list": {
        "description": "The response will be a JSON object with a key called `resources`. The value of this will be an object with the standard resource attributes.",
        "headers": {
          "ratelimit-limit": {
            "$ref": "#/components/headers/ratelimit-limit"
          },
          "ratelimit-remaining": {
            "$ref": "#/components/headers/ratelimit-remaining"
          },
          "ratelimit-reset": {
            "$ref": "#/components/headers/ratelimit-reset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "type": "object",
                  "properties": {
                    "resources": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/resource"
                      }
                    }
                  }
                },
                {
                  "$ref": "#/components/schemas/pagination"
                },
                {
                  "$ref": "#/components/schemas/meta"
                }
              ],
              "example": {
                "resources": [
                  {
                    "urn": "do:droplet:13457723",
                    "assigned_at": "2018-09-28T19:26:37Z",
                    "links": {
                      "self": "https://api.digitalocean.com/v2/droplets/13457723"
                    },
                    "status": "ok"
                  },
                  {
                    "urn": "do:domain:example.com",
                    "assigned_at": "2019-03-31T16:24:14Z",
                    "links": {
                      "self": "https://api.digitalocean.com/v2/domains/example.com"
                    },
                    "status": "ok"
                  }
                ],
                "links": {
                  "pages": {
                    "first": "https://api.digitalocean.com/v2/projects/4e1bfbc3-dc3e-41f2-a18f-1b4d7ba71679/resources?page=1",
                    "last": "https://api.digitalocean.com/v2/projects/4e1bfbc3-dc3e-41f2-a18f-1b4d7ba71679/resources?page=1"
                  }
                },
                "meta": {
                  "total": 2
                }
              }
            }
          }
        }
      },
      "assigned_resources_list": {
        "description": "The response will be a JSON object with a key called `resources`. The value of this will be an object with the standard resource attributes.",
        "headers": {
          "ratelimit-limit": {
            "$ref": "#/components/headers/ratelimit-limit"
          },
          "ratelimit-remaining": {
            "$ref": "#/components/headers/ratelimit-remaining"
          },
          "ratelimit-reset": {
            "$ref": "#/components/headers/ratelimit-reset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "resources": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/resource"
                  }
                }
              },
              "example": {
                "resources": [
                  {
                    "urn": "do:droplet:13457723",
                    "assigned_at": "2018-09-28T19:26:37Z",
                    "links": {
                      "self": "https://api.digitalocean.com/v2/droplets/13457723"
                    },
                    "status": "ok"
                  },
                  {
                    "urn": "do:domain:example.com",
                    "assigned_at": "2019-03-31T16:24:14Z",
                    "links": {
                      "self": "https://api.digitalocean.com/v2/domains/example.com"
                    },
                    "status": "ok"
                  }
                ]
              }
            }
          }
        }
      },
      "all_regions": {
        "description": "A JSON object with a key set to `regions`. The value is an array of `region` objects, each of which contain the standard `region` attributes.",
        "headers": {
          "ratelimit-limit": {
            "$ref": "#/components/headers/ratelimit-limit"
          },
          "ratelimit-remaining": {
            "$ref": "#/components/headers/ratelimit-remaining"
          },
          "ratelimit-reset": {
            "$ref": "#/components/headers/ratelimit-reset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "type": "object",
                  "properties": {
                    "regions": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/region"
                      }
                    }
                  },
                  "required": [
                    "regions"
                  ]
                },
                {
                  "$ref": "#/components/schemas/pagination"
                },
                {
                  "$ref": "#/components/schemas/meta"
                }
              ],
              "example": {
                "regions": [
                  {
                    "name": "New York 3",
                    "slug": "nyc3",
                    "features": [
                      "private_networking",
                      "backups",
                      "ipv6",
                      "metadata",
                      "install_agent",
                      "storage",
                      "image_transfer"
                    ],
                    "available": true,
                    "sizes": [
                      "s-1vcpu-1gb",
                      "s-1vcpu-2gb",
                      "s-1vcpu-3gb",
                      "s-2vcpu-2gb",
                      "s-3vcpu-1gb",
                      "s-2vcpu-4gb",
                      "s-4vcpu-8gb",
                      "s-6vcpu-16gb",
                      "s-8vcpu-32gb",
                      "s-12vcpu-48gb",
                      "s-16vcpu-64gb",
                      "s-20vcpu-96gb",
                      "s-24vcpu-128gb",
                      "s-32vcpu-192g"
                    ]
                  }
                ],
                "links": {
                  "pages": {
                    "last": "https://api.digitalocean.com/v2/regions?page=13&per_page=1",
                    "next": "https://api.digitalocean.com/v2/regions?page=2&per_page=1"
                  }
                },
                "meta": {
                  "total": 13
                }
              }
            }
          }
        }
      },
      "registry_info": {
        "description": "The response will be a JSON object with the key `registry` containing information about your registry.",
        "headers": {
          "ratelimit-limit": {
            "$ref": "#/components/headers/ratelimit-limit"
          },
          "ratelimit-remaining": {
            "$ref": "#/components/headers/ratelimit-remaining"
          },
          "ratelimit-reset": {
            "$ref": "#/components/headers/ratelimit-reset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "registry": {
                  "$ref": "#/components/schemas/registry"
                }
              }
            }
          }
        }
      },
      "subscription_response": {
        "description": "The response will be a JSON object with a key called `subscription` containing information about your subscription.",
        "headers": {
          "ratelimit-limit": {
            "$ref": "#/components/headers/ratelimit-limit"
          },
          "ratelimit-remaining": {
            "$ref": "#/components/headers/ratelimit-remaining"
          },
          "ratelimit-reset": {
            "$ref": "#/components/headers/ratelimit-reset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/subscription"
            }
          }
        }
      },
      "docker_credentials": {
        "description": "A Docker `config.json` file for the container registry.",
        "headers": {
          "ratelimit-limit": {
            "$ref": "#/components/headers/ratelimit-limit"
          },
          "ratelimit-remaining": {
            "$ref": "#/components/headers/ratelimit-remaining"
          },
          "ratelimit-reset": {
            "$ref": "#/components/headers/ratelimit-reset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/docker_credentials"
            }
          }
        }
      },
      "all_repositories": {
        "description": "The response body will be a JSON object with a key of `repositories`. This will be set to an array containing objects each representing a repository.",
        "headers": {
          "ratelimit-limit": {
            "$ref": "#/components/headers/ratelimit-limit"
          },
          "ratelimit-remaining": {
            "$ref": "#/components/headers/ratelimit-remaining"
          },
          "ratelimit-reset": {
            "$ref": "#/components/headers/ratelimit-reset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "type": "object",
                  "properties": {
                    "repositories": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/repository"
                      }
                    }
                  }
                },
                {
                  "$ref": "#/components/schemas/pagination"
                },
                {
                  "$ref": "#/components/schemas/meta"
                }
              ],
              "example": {
                "repositories": [
                  {
                    "registry_name": "example",
                    "name": "repo-1",
                    "latest_tag": {
                      "registry_name": "example",
                      "repository": "repo-1",
                      "tag": "latest",
                      "manifest_digest": "sha256:cb8a924afdf0229ef7515d9e5b3024e23b3eb03ddbba287f4a19c6ac90b8d221",
                      "compressed_size_bytes": 2803255,
                      "size_bytes": 5861888,
                      "updated_at": "2020-04-09T23:54:25Z"
                    },
                    "tag_count": 1
                  }
                ],
                "meta": {
                  "total": 1
                }
              }
            }
          }
        }
      },
      "repository_tags": {
        "description": "The response body will be a JSON object with a key of `tags`. This will be set to an array containing objects each representing a tag.",
        "headers": {
          "ratelimit-limit": {
            "$ref": "#/components/headers/ratelimit-limit"
          },
          "ratelimit-remaining": {
            "$ref": "#/components/headers/ratelimit-remaining"
          },
          "ratelimit-reset": {
            "$ref": "#/components/headers/ratelimit-reset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "type": "object",
                  "properties": {
                    "tags": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/repository_tag"
                      }
                    }
                  }
                },
                {
                  "$ref": "#/components/schemas/pagination"
                },
                {
                  "$ref": "#/components/schemas/meta"
                }
              ],
              "example": {
                "tags": [
                  {
                    "registry_name": "example",
                    "repository": "repo-1",
                    "tag": "latest",
                    "manifest_digest": "sha256:cb8a924afdf0229ef7515d9e5b3024e23b3eb03ddbba287f4a19c6ac90b8d221",
                    "compressed_size_bytes": 2803255,
                    "size_bytes": 5861888,
                    "updated_at": "2020-04-09T23:54:25Z"
                  }
                ],
                "meta": {
                  "total": 1
                }
              }
            }
          }
        }
      },
      "garbage_collection": {
        "description": "The response will be a JSON object with a key of `garbage_collection`. This will be a json object with attributes representing the currently-active garbage collection.",
        "headers": {
          "ratelimit-limit": {
            "$ref": "#/components/headers/ratelimit-limit"
          },
          "ratelimit-remaining": {
            "$ref": "#/components/headers/ratelimit-remaining"
          },
          "ratelimit-reset": {
            "$ref": "#/components/headers/ratelimit-reset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "garbage_collection": {
                  "$ref": "#/components/schemas/garbage_collection"
                }
              }
            }
          }
        }
      },
      "garbage_collections": {
        "description": "The response will be a JSON object with a key of `garbage_collections`. This will be set to an array containing objects representing each past garbage collection. Each will contain the standard Garbage Collection attributes.",
        "headers": {
          "ratelimit-limit": {
            "$ref": "#/components/headers/ratelimit-limit"
          },
          "ratelimit-remaining": {
            "$ref": "#/components/headers/ratelimit-remaining"
          },
          "ratelimit-reset": {
            "$ref": "#/components/headers/ratelimit-reset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "garbage_collections": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/garbage_collection"
                  }
                }
              }
            },
            "example": {
              "garbage_collections": [
                {
                  "uuid": "eff0feee-49c7-4e8f-ba5c-a320c109c8a8",
                  "registry_name": "example",
                  "status": "requested",
                  "created_at": "2020-10-30T21:03:24.000Z",
                  "updated_at": "2020-10-30T21:03:44.000Z",
                  "blobs_deleted": 42,
                  "freed_bytes": 667
                }
              ],
              "meta": {
                "total": 1
              }
            }
          }
        }
      },
      "registry_options_response": {
        "description": "The response will be a JSON object with a key called `options` which contains a key called `subscription_tiers` listing the available tiers.",
        "headers": {
          "ratelimit-limit": {
            "$ref": "#/components/headers/ratelimit-limit"
          },
          "ratelimit-remaining": {
            "$ref": "#/components/headers/ratelimit-remaining"
          },
          "ratelimit-reset": {
            "$ref": "#/components/headers/ratelimit-reset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "options": {
                  "type": "object",
                  "properties": {
                    "subscription_tiers": {
                      "type": "array",
                      "items": {
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/subscription_tier_base"
                          },
                          {
                            "$ref": "#/components/schemas/subscription_tier_extended"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            },
            "example": {
              "options": {
                "subscription_tiers": [
                  {
                    "name": "Starter",
                    "slug": "starter",
                    "included_repositories": 1,
                    "included_storage_bytes": 524288000,
                    "allow_storage_overage": false,
                    "included_bandwidth_bytes": 524288000,
                    "monthly_price_in_cents": 0,
                    "eligible": false,
                    "eligibility_reasons": [
                      "OverRepositoryLimit"
                    ]
                  },
                  {
                    "name": "Basic",
                    "slug": "basic",
                    "included_repositories": 5,
                    "included_storage_bytes": 5368709120,
                    "allow_storage_overage": true,
                    "included_bandwidth_bytes": 5368709120,
                    "monthly_price_in_cents": 500,
                    "eligible": true
                  },
                  {
                    "name": "Professional",
                    "slug": "professional",
                    "included_repositories": 0,
                    "included_storage_bytes": 107374182400,
                    "allow_storage_overage": true,
                    "included_bandwidth_bytes": 107374182400,
                    "monthly_price_in_cents": 2000,
                    "eligible": true
                  }
                ]
              }
            }
          }
        }
      },
      "droplet_neighbors_ids": {
        "description": "A JSON object with an `neighbor_ids` key.",
        "headers": {
          "ratelimit-limit": {
            "$ref": "#/components/headers/ratelimit-limit"
          },
          "ratelimit-remaining": {
            "$ref": "#/components/headers/ratelimit-remaining"
          },
          "ratelimit-reset": {
            "$ref": "#/components/headers/ratelimit-reset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/neighbor_ids"
            }
          }
        }
      },
      "all_sizes": {
        "description": "A JSON object with a key called `sizes`. The value of this will be an array of `size` objects each of which contain the standard size attributes.",
        "headers": {
          "ratelimit-limit": {
            "$ref": "#/components/headers/ratelimit-limit"
          },
          "ratelimit-remaining": {
            "$ref": "#/components/headers/ratelimit-remaining"
          },
          "ratelimit-reset": {
            "$ref": "#/components/headers/ratelimit-reset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "type": "object",
                  "properties": {
                    "sizes": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/size"
                      }
                    }
                  },
                  "required": [
                    "sizes"
                  ]
                },
                {
                  "$ref": "#/components/schemas/pagination"
                },
                {
                  "$ref": "#/components/schemas/meta"
                }
              ],
              "example": {
                "sizes": [
                  {
                    "slug": "s-1vcpu-1gb",
                    "memory": 1024,
                    "vcpus": 1,
                    "disk": 25,
                    "transfer": 1,
                    "price_monthly": 5,
                    "price_hourly": 0.00743999984115362,
                    "regions": [
                      "ams2",
                      "ams3",
                      "blr1",
                      "fra1",
                      "lon1",
                      "nyc1",
                      "nyc2",
                      "nyc3",
                      "sfo1",
                      "sfo2",
                      "sfo3",
                      "sgp1",
                      "tor1"
                    ],
                    "available": true,
                    "description": "Basic"
                  }
                ],
                "links": {
                  "pages": {
                    "last": "https://api.digitalocean.com/v2/sizes?page=64&per_page=1",
                    "next": "https://api.digitalocean.com/v2/sizes?page=2&per_page=1"
                  }
                },
                "meta": {
                  "total": 64
                }
              }
            }
          }
        }
      },
      "all_snapshots": {
        "description": "A JSON object with a key of `snapshots`.",
        "headers": {
          "ratelimit-limit": {
            "$ref": "#/components/headers/ratelimit-limit"
          },
          "ratelimit-remaining": {
            "$ref": "#/components/headers/ratelimit-remaining"
          },
          "ratelimit-reset": {
            "$ref": "#/components/headers/ratelimit-reset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "type": "object",
                  "properties": {
                    "snapshots": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/snapshot"
                      }
                    }
                  }
                },
                {
                  "$ref": "#/components/schemas/pagination"
                },
                {
                  "$ref": "#/components/schemas/meta"
                }
              ]
            },
            "examples": {
              "All Snapshots": {
                "$ref": "#/components/examples/snapshots_all"
              },
              "Droplets Snapshots": {
                "$ref": "#/components/examples/snapshots_droplets_only"
              },
              "Volume Snapshots": {
                "$ref": "#/components/examples/snapshots_volumes_only"
              }
            }
          }
        }
      },
      "existing_snapshot": {
        "description": "A JSON object with a key called `snapshot`.\n",
        "headers": {
          "ratelimit-limit": {
            "$ref": "#/components/headers/ratelimit-limit"
          },
          "ratelimit-remaining": {
            "$ref": "#/components/headers/ratelimit-remaining"
          },
          "ratelimit-reset": {
            "$ref": "#/components/headers/ratelimit-reset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "snapshot": {
                  "$ref": "#/components/schemas/snapshot"
                }
              }
            }
          }
        }
      },
      "all_tags": {
        "description": "To list all of your tags, you can send a `GET` request to `/v2/tags`.",
        "headers": {
          "ratelimit-limit": {
            "$ref": "#/components/headers/ratelimit-limit"
          },
          "ratelimit-remaining": {
            "$ref": "#/components/headers/ratelimit-remaining"
          },
          "ratelimit-reset": {
            "$ref": "#/components/headers/ratelimit-reset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "type": "object",
                  "properties": {
                    "tags": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/tag"
                      }
                    }
                  }
                },
                {
                  "$ref": "#/components/schemas/pagination"
                },
                {
                  "$ref": "#/components/schemas/meta"
                }
              ],
              "example": {
                "tags": [
                  {
                    "name": "extra-awesome",
                    "resources": {
                      "count": 5,
                      "last_tagged_uri": "https://api.digitalocean.com/v2/images/7555620",
                      "droplets": {
                        "count": 1,
                        "last_tagged_uri": "https://api.digitalocean.com/v2/droplets/3164444"
                      },
                      "images": {
                        "count": 1,
                        "last_tagged_uri": "https://api.digitalocean.com/v2/images/7555620"
                      },
                      "volumes": {
                        "count": 1,
                        "last_tagged_uri": "https://api.digitalocean.com/v2/volumes/3d80cb72-342b-4aaa-b92e-4e4abb24a933"
                      },
                      "volume_snapshots": {
                        "count": 1,
                        "last_tagged_uri": "https://api.digitalocean.com/v2/snapshots/1f6f46e8-6b60-11e9-be4e-0a58ac144519"
                      },
                      "databases": {
                        "count": 1,
                        "last_tagged_uri": "https://api.digitalocean.com/v2/databases/b92438f6-ba03-416c-b642-e9236db91976"
                      }
                    }
                  }
                ],
                "meta": {
                  "total": 1
                }
              }
            }
          }
        }
      },
      "new_tag": {
        "description": "The response will be a JSON object with a key called tag.  The value of this will be a tag object containing the standard tag attributes",
        "headers": {
          "ratelimit-limit": {
            "$ref": "#/components/headers/ratelimit-limit"
          },
          "ratelimit-remaining": {
            "$ref": "#/components/headers/ratelimit-remaining"
          },
          "ratelimit-reset": {
            "$ref": "#/components/headers/ratelimit-reset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "tag": {
                  "$ref": "#/components/schemas/tag"
                }
              },
              "example": {
                "tag": {
                  "name": "extra-awesome",
                  "resources": {
                    "count": 0,
                    "droplets": {
                      "count": 0
                    },
                    "images": {
                      "count": 0
                    },
                    "volumes": {
                      "count": 0
                    },
                    "volume_snapshots": {
                      "count": 0
                    },
                    "databases": {
                      "count": 0
                    }
                  }
                }
              }
            }
          }
        }
      },
      "tag_bad_request": {
        "description": "Bad Request",
        "headers": {
          "ratelimit-limit": {
            "$ref": "#/components/headers/ratelimit-limit"
          },
          "ratelimit-remaining": {
            "$ref": "#/components/headers/ratelimit-remaining"
          },
          "ratelimit-reset": {
            "$ref": "#/components/headers/ratelimit-reset"
          },
          "x-request-id": {
            "$ref": "#/components/headers/x-request-id"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/error_with_root_causes"
            },
            "examples": {
              "InvalidCharacters": {
                "value": {
                  "error": "Error validating resource tag: \\\"tag-name \\\\\\\"здорово\\\\\\\" contains invalid characters\\\"",
                  "messages": null,
                  "root_causes": [
                    "rpc error: code = InvalidArgument desc = Error validating resource tag: \\\"tag-name \\\\\\\"здорово\\\\\\\" contains invalid characters\\\""
                  ]
                }
              }
            }
          }
        }
      },
      "existing_tag": {
        "description": "The response will be a JSON object with a key called `tag`.  The value of this will be a tag object containing the standard tag attributes.",
        "headers": {
          "ratelimit-limit": {
            "$ref": "#/components/headers/ratelimit-limit"
          },
          "ratelimit-remaining": {
            "$ref": "#/components/headers/ratelimit-remaining"
          },
          "ratelimit-reset": {
            "$ref": "#/components/headers/ratelimit-reset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "tag": {
                  "$ref": "#/components/schemas/tag"
                }
              },
              "example": {
                "tag": {
                  "tag": {
                    "name": "extra-awesome",
                    "resources": {
                      "count": 5,
                      "last_tagged_uri": "https://api.digitalocean.com/v2/images/7555620",
                      "droplets": {
                        "count": 1,
                        "last_tagged_uri": "https://api.digitalocean.com/v2/droplets/3164444"
                      },
                      "images": {
                        "count": 1,
                        "last_tagged_uri": "https://api.digitalocean.com/v2/images/7555620"
                      },
                      "volumes": {
                        "count": 1,
                        "last_tagged_uri": "https://api.digitalocean.com/v2/volumes/3d80cb72-342b-4aaa-b92e-4e4abb24a933"
                      },
                      "volume_snapshots": {
                        "count": 1,
                        "last_tagged_uri": "https://api.digitalocean.com/v2/snapshots/1f6f46e8-6b60-11e9-be4e-0a58ac144519"
                      },
                      "databases": {
                        "count": 1,
                        "last_tagged_uri": "https://api.digitalocean.com/v2/databases/b92438f6-ba03-416c-b642-e9236db91976"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "all_volumes": {
        "description": "The response will be a JSON object with a key called `volumes`. This will be set to an array of volume objects, each of which will contain the standard volume attributes.",
        "headers": {
          "ratelimit-limit": {
            "$ref": "#/components/headers/ratelimit-limit"
          },
          "ratelimit-remaining": {
            "$ref": "#/components/headers/ratelimit-remaining"
          },
          "ratelimit-reset": {
            "$ref": "#/components/headers/ratelimit-reset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "type": "object",
                  "properties": {
                    "volumes": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/volume_full"
                      },
                      "description": "Array of volumes."
                    }
                  },
                  "required": [
                    "volumes"
                  ]
                },
                {
                  "$ref": "#/components/schemas/pagination"
                },
                {
                  "$ref": "#/components/schemas/meta"
                }
              ]
            },
            "examples": {
              "All Volumes": {
                "$ref": "#/components/examples/volumes_all"
              },
              "Filtered by Name": {
                "$ref": "#/components/examples/volumes_filtered_by_name"
              },
              "Filtered by Region": {
                "$ref": "#/components/examples/volumes_filtered_by_region"
              }
            }
          }
        }
      },
      "volume": {
        "description": "The response will be a JSON object with a key called `volume`. The value will be an object containing the standard attributes associated with a volume.",
        "headers": {
          "ratelimit-limit": {
            "$ref": "#/components/headers/ratelimit-limit"
          },
          "ratelimit-remaining": {
            "$ref": "#/components/headers/ratelimit-remaining"
          },
          "ratelimit-reset": {
            "$ref": "#/components/headers/ratelimit-reset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "volume": {
                  "$ref": "#/components/schemas/volume_full"
                }
              },
              "example": {
                "volume": {
                  "id": "506f78a4-e098-11e5-ad9f-000f53306ae1",
                  "region": {
                    "name": "New York 1",
                    "slug": "nyc1",
                    "sizes": [
                      "s-1vcpu-1gb",
                      "s-1vcpu-2gb",
                      "s-1vcpu-3gb",
                      "s-2vcpu-2gb",
                      "s-3vcpu-1gb",
                      "s-2vcpu-4gb",
                      "s-4vcpu-8gb",
                      "s-6vcpu-16gb",
                      "s-8vcpu-32gb",
                      "s-12vcpu-48gb",
                      "s-16vcpu-64gb",
                      "s-20vcpu-96gb",
                      "s-24vcpu-128gb",
                      "s-32vcpu-192gb"
                    ],
                    "features": [
                      "private_networking",
                      "backups",
                      "ipv6",
                      "metadata"
                    ],
                    "available": true
                  },
                  "droplet_ids": [],
                  "name": "example",
                  "description": "Block store for examples",
                  "size_gigabytes": 10,
                  "filesystem_type": "ext4",
                  "filesystem_label": "example",
                  "created_at": "2020-03-02T17:00:49Z"
                }
              }
            }
          }
        }
      },
      "volume_action": {
        "description": "The response will be an object with a key called `action`. The value of this will be an object that contains the standard volume action attributes",
        "headers": {
          "ratelimit-limit": {
            "$ref": "#/components/headers/ratelimit-limit"
          },
          "ratelimit-remaining": {
            "$ref": "#/components/headers/ratelimit-remaining"
          },
          "ratelimit-reset": {
            "$ref": "#/components/headers/ratelimit-reset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "action": {
                  "$ref": "#/components/schemas/volume_action"
                }
              }
            },
            "examples": {
              "volume_action_attach_response": {
                "$ref": "#/components/examples/volume_action_attach_response"
              },
              "VolumeActionDetatchResponse": {
                "$ref": "#/components/examples/volume_action_detach_response"
              }
            }
          }
        }
      },
      "volume_snapshot": {
        "description": "You will get back a JSON object that has a `snapshot` key. This will contain the standard snapshot attributes",
        "headers": {
          "ratelimit-limit": {
            "$ref": "#/components/headers/ratelimit-limit"
          },
          "ratelimit-remaining": {
            "$ref": "#/components/headers/ratelimit-remaining"
          },
          "ratelimit-reset": {
            "$ref": "#/components/headers/ratelimit-reset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "properties": {
                "snapshot": {
                  "$ref": "#/components/schemas/snapshot"
                }
              },
              "example": {
                "snapshot": {
                  "id": "8fa70202-873f-11e6-8b68-000f533176b1",
                  "name": "big-data-snapshot1475261774",
                  "regions": [
                    "nyc1"
                  ],
                  "created_at": "2020-09-30T18:56:14Z",
                  "resource_id": "82a48a18-873f-11e6-96bf-000f53315a41",
                  "resource_type": "volume",
                  "min_disk_size": 10,
                  "size_gigabytes": 10,
                  "tags": [
                    "aninterestingtag"
                  ]
                }
              }
            }
          }
        }
      },
      "all_volume_actions": {
        "description": "The response will be an object with a key called `action`. The value of this will be an object that contains the standard volume action attributes.",
        "headers": {
          "ratelimit-limit": {
            "$ref": "#/components/headers/ratelimit-limit"
          },
          "ratelimit-remaining": {
            "$ref": "#/components/headers/ratelimit-remaining"
          },
          "ratelimit-reset": {
            "$ref": "#/components/headers/ratelimit-reset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "type": "object",
                  "properties": {
                    "actions": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/volume_action"
                      }
                    }
                  }
                },
                {
                  "$ref": "#/components/schemas/pagination"
                },
                {
                  "$ref": "#/components/schemas/meta"
                }
              ],
              "example": {
                "actions": [
                  {
                    "id": 72531856,
                    "status": "completed",
                    "type": "attach_volume",
                    "started_at": "2020-11-21T21:51:09Z",
                    "completed_at": "2020-11-21T21:51:09Z",
                    "resource_type": "volume",
                    "region": {
                      "name": "New York 1",
                      "slug": "nyc1",
                      "sizes": [
                        "s-1vcpu-1gb",
                        "s-1vcpu-2gb",
                        "s-1vcpu-3gb",
                        "s-2vcpu-2gb",
                        "s-3vcpu-1gb",
                        "s-2vcpu-4gb",
                        "s-4vcpu-8gb",
                        "s-6vcpu-16gb",
                        "s-8vcpu-32gb",
                        "s-12vcpu-48gb",
                        "s-16vcpu-64gb",
                        "s-20vcpu-96gb",
                        "s-24vcpu-128gb",
                        "s-32vcpu-192gb"
                      ],
                      "features": [
                        "private_networking",
                        "backups",
                        "ipv6",
                        "metadata"
                      ],
                      "available": true
                    },
                    "region_slug": "nyc1"
                  }
                ],
                "meta": {
                  "total": 1
                }
              }
            }
          }
        }
      },
      "volume_snapshots": {
        "description": "You will get back a JSON object that has a `snapshots` key. This will be set to an array of snapshot objects, each of which contain the standard snapshot attributes",
        "headers": {
          "ratelimit-limit": {
            "$ref": "#/components/headers/ratelimit-limit"
          },
          "ratelimit-remaining": {
            "$ref": "#/components/headers/ratelimit-remaining"
          },
          "ratelimit-reset": {
            "$ref": "#/components/headers/ratelimit-reset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "type": "object",
                  "properties": {
                    "snapshots": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/snapshot"
                      }
                    }
                  }
                },
                {
                  "$ref": "#/components/schemas/pagination"
                },
                {
                  "$ref": "#/components/schemas/meta"
                }
              ],
              "example": {
                "snapshots": [
                  {
                    "id": "8eb4d51a-873f-11e6-96bf-000f53315a41",
                    "name": "big-data-snapshot1475261752",
                    "regions": [
                      "nyc1"
                    ],
                    "created_at": "2020-09-30T18:56:12Z",
                    "resource_id": "82a48a18-873f-11e6-96bf-000f53315a41",
                    "resource_type": "volume",
                    "min_disk_size": 10,
                    "size_gigabytes": 0,
                    "tags": null
                  }
                ],
                "meta": {
                  "total": 1
                }
              }
            }
          }
        }
      },
      "all_vpcs": {
        "description": "The response will be a JSON object with a key called `vpcs`. This will be set to an array of objects, each of which will contain the standard attributes associated with a VPC",
        "headers": {
          "ratelimit-limit": {
            "$ref": "#/components/headers/ratelimit-limit"
          },
          "ratelimit-remaining": {
            "$ref": "#/components/headers/ratelimit-remaining"
          },
          "ratelimit-reset": {
            "$ref": "#/components/headers/ratelimit-reset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "type": "object",
                  "properties": {
                    "vpcs": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/vpc"
                      }
                    }
                  }
                },
                {
                  "$ref": "#/components/schemas/pagination"
                },
                {
                  "$ref": "#/components/schemas/meta"
                }
              ],
              "example": {
                "vpcs": [
                  {
                    "name": "env.prod-vpc",
                    "description": "VPC for production environment",
                    "region": "nyc1",
                    "ip_range": "10.10.10.0/24",
                    "id": "5a4981aa-9653-4bd1-bef5-d6bff52042e4",
                    "urn": "do:vpc:5a4981aa-9653-4bd1-bef5-d6bff52042e4",
                    "default": false,
                    "created_at": "2020-03-13T19:20:47.442049222Z"
                  },
                  {
                    "id": "e0fe0f4d-596a-465e-a902-571ce57b79fa",
                    "urn": "do:vpc:e0fe0f4d-596a-465e-a902-571ce57b79fa",
                    "name": "default-nyc1",
                    "description": "",
                    "region": "nyc1",
                    "ip_range": "10.102.0.0/20",
                    "created_at": "2020-03-13T19:29:20Z",
                    "default": true
                  },
                  {
                    "id": "d455e75d-4858-4eec-8c95-da2f0a5f93a7",
                    "urn": "do:vpc:d455e75d-4858-4eec-8c95-da2f0a5f93a7",
                    "name": "default-nyc3",
                    "description": "",
                    "region": "nyc3",
                    "ip_range": "10.100.0.0/20",
                    "created_at": "2019-11-19T22:19:35Z",
                    "default": true
                  }
                ],
                "meta": {
                  "total": 3
                }
              }
            }
          }
        }
      },
      "existing_vpc": {
        "description": "The response will be a JSON object with a key called `vpc`. The value of this will be an object that contains the standard attributes associated with a VPC.",
        "headers": {
          "ratelimit-limit": {
            "$ref": "#/components/headers/ratelimit-limit"
          },
          "ratelimit-remaining": {
            "$ref": "#/components/headers/ratelimit-remaining"
          },
          "ratelimit-reset": {
            "$ref": "#/components/headers/ratelimit-reset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "vpc": {
                  "$ref": "#/components/schemas/vpc"
                }
              }
            }
          }
        }
      },
      "vpc_members": {
        "description": "The response will be a JSON object with a key called members. This will be set to an array of objects, each of which will contain the standard attributes associated with a VPC member.",
        "headers": {
          "ratelimit-limit": {
            "$ref": "#/components/headers/ratelimit-limit"
          },
          "ratelimit-remaining": {
            "$ref": "#/components/headers/ratelimit-remaining"
          },
          "ratelimit-reset": {
            "$ref": "#/components/headers/ratelimit-reset"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "type": "object",
                  "properties": {
                    "members": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/vpc_member"
                      }
                    }
                  }
                },
                {
                  "$ref": "#/components/schemas/pagination"
                },
                {
                  "$ref": "#/components/schemas/meta"
                }
              ],
              "example": {
                "members": [
                  {
                    "urn": "do:loadbalancer:fb294d78-d193-4cb2-8737-ea620993591b",
                    "name": "nyc1-load-balancer-01",
                    "created_at": "2020-03-13T19:30:48Z"
                  },
                  {
                    "urn": "do:dbaas:13f7a2f6-43df-4c4a-8129-8733267ddeea",
                    "name": "db-postgresql-nyc1-55986",
                    "created_at": "2020-03-13T19:30:18Z"
                  },
                  {
                    "urn": "do:kubernetes:da39d893-96e1-4e4d-971d-1fdda33a46b1",
                    "name": "k8s-nyc1-1584127772221",
                    "created_at": "2020-03-13T19:30:16Z"
                  },
                  {
                    "urn": "do:droplet:86e29982-03a7-4946-8a07-a0114dff8754",
                    "name": "ubuntu-s-1vcpu-1gb-nyc1-01",
                    "created_at": "2020-03-13T19:29:20Z"
                  }
                ],
                "meta": {
                  "total": 4
                }
              }
            }
          }
        }
      }
    },
    "links": {
      "get_ssh_key_by_id": {
        "operationId": "get_ssh_key_by_id",
        "parameters": {
          "ssh_key_identifier": "$response.body#/ssh_key/id"
        },
        "description": "The `id` value returned in the response can be used as the `ssh_key_identifier` parameter in `GET /v2/account/keys/{ssh_key_identifier}`."
      },
      "get_ssh_key_by_fingerprint": {
        "operationId": "get_ssh_key_by_fingerprint",
        "parameters": {
          "ssh_key_identifier": "$response.body#/ssh_key/fingerprint"
        },
        "description": "The `fingerprint` value returned in the response can be used as the `ssh_key_identifier` parameter in `GET /v2/account/keys/{ssh_key_identifier}`."
      },
      "delete_ssh_key_by_id": {
        "operationId": "destroy_a_key",
        "parameters": {
          "ssh_key_identifier": "$response.body#/ssh_key/id"
        },
        "description": "The `id` value returned in the response can be used as the  `ssh_key_identifier` parameter in `DELETE /v2/account/keys/{ssh_key_identifier}`."
      },
      "delete_ssh_key_by_fingerprint": {
        "operationId": "destroy_a_key",
        "parameters": {
          "ssh_key_identifier": "$response.body#/ssh_key/fingerprint"
        },
        "description": "The `fingerprint` value returned in the response can be used as the  `ssh_key_identifier` parameter in `DELETE /v2/account/keys/{ssh_key_identifier}`."
      }
    },
    "examples": {
      "apps": {
        "value": {
          "apps": [
            {
              "id": "4f6c71e2-1e90-4762-9fee-6cc4a0a9f2cf",
              "owner_uuid": "ff36cbc6fd350fe12577f5123133bb5ba01a2419",
              "spec": {
                "name": "sample-php",
                "services": [
                  {
                    "name": "sample-php",
                    "git": {
                      "repo_clone_url": "https://github.com/digitalocean/sample-php.git",
                      "branch": "main"
                    },
                    "run_command": "heroku-php-apache2",
                    "environment_slug": "php",
                    "instance_size_slug": "basic-xxs",
                    "instance_count": 1,
                    "http_port": 8080,
                    "routes": [
                      {
                        "path": "/"
                      }
                    ]
                  }
                ]
              },
              "default_ingress": "https://sample-php-iaj87.ondigitalocean.app",
              "created_at": "2020-11-19T20:27:18.000Z",
              "updated_at": "2020-12-01T00:42:16.000Z",
              "active_deployment": {
                "id": "3aa4d20e-5527-4c00-b496-601fbd22520a",
                "spec": {
                  "name": "sample-php",
                  "services": [
                    {
                      "name": "sample-php",
                      "git": {
                        "repo_clone_url": "https://github.com/digitalocean/sample-php.git",
                        "branch": "main"
                      },
                      "run_command": "heroku-php-apache2",
                      "environment_slug": "php",
                      "instance_size_slug": "basic-xxs",
                      "instance_count": 1,
                      "http_port": 8080,
                      "routes": [
                        {
                          "path": "/"
                        }
                      ]
                    }
                  ],
                  "region": "fra"
                },
                "services": [
                  {
                    "name": "sample-php",
                    "source_commit_hash": "54d4a727f457231062439895000d45437c7bb405"
                  }
                ],
                "phase_last_updated_at": "2020-12-01T00:42:12.000Z",
                "created_at": "2020-12-01T00:40:05.000Z",
                "updated_at": "2020-12-01T00:42:12.000Z"
              },
              "cause": "app spec updated",
              "progress": {
                "success_steps": 6,
                "total_steps": 6,
                "steps": [
                  {
                    "name": "build",
                    "status": "SUCCESS",
                    "steps": [
                      {
                        "name": "initialize",
                        "status": "SUCCESS",
                        "started_at": "2020-12-01T00:40:11.979Z",
                        "ended_at": "2020-12-01T00:40:12.470Z"
                      },
                      {
                        "name": "components",
                        "status": "SUCCESS",
                        "steps": [
                          {
                            "name": "sample-php",
                            "status": "SUCCESS",
                            "started_at": "1901-01-01T00:00:00.000Z",
                            "ended_at": "1901-01-01T00:00:00.000Z",
                            "component_name": "sample-php",
                            "message_base": "Building service"
                          }
                        ],
                        "started_at": "2020-12-01T00:40:12.470Z",
                        "ended_at": "2020-12-01T00:41:26.180Z"
                      }
                    ],
                    "started_at": "2020-12-01T00:40:11.979Z",
                    "ended_at": "2020-12-01T00:41:26.653Z"
                  }
                ],
                "phase": "ACTIVE",
                "tier_slug": "basic"
              },
              "last_deployment_created_at": "2020-12-01T00:40:05.000Z",
              "live_url": "https://sample-php-iaj87.ondigitalocean.app",
              "region": {
                "slug": "fra",
                "label": "Frankfurt",
                "flag": "germany",
                "continent": "Europe",
                "data_centers": [
                  "fra1"
                ]
              },
              "tier_slug": "basic",
              "live_url_base": "https://sample-php-iaj87.ondigitalocean.app",
              "live_domain": "sample-php-iaj87.ondigitalocean.app"
            }
          ]
        }
      },
      "app": {
        "value": {
          "app": {
            "id": "c2a93513-8d9b-4223-9d61-5e7272c81cf5",
            "owner_uuid": "a4e16f25-cdd1-4483-b246-d77f283c9209",
            "spec": {
              "name": "sample-golang",
              "services": [
                {
                  "name": "web",
                  "github": {
                    "repo": "ChiefMateStarbuck/sample-golang",
                    "branch": "main"
                  },
                  "run_command": "bin/sample-golang",
                  "environment_slug": "go",
                  "instance_size_slug": "basic-xxs",
                  "instance_count": 1,
                  "http_port": 8080,
                  "routes": [
                    {
                      "path": "/"
                    }
                  ]
                }
              ],
              "region": "ams"
            },
            "default_ingress": "https://sample-golang-zyhgn.ondigitalocean.app",
            "created_at": "2021-02-10T16:45:14Z",
            "updated_at": "2021-02-10T17:06:56Z",
            "active_deployment": {
              "id": "991dfa59-6a23-459f-86d6-67dfa2c6f1e3",
              "spec": {
                "name": "sample-golang",
                "services": [
                  {
                    "name": "web",
                    "github": {
                      "repo": "ChiefMateStarbuck/sample-golang",
                      "branch": "main"
                    },
                    "run_command": "bin/sample-golang",
                    "environment_slug": "go",
                    "instance_size_slug": "basic-xxs",
                    "instance_count": 1,
                    "http_port": 8080,
                    "routes": [
                      {
                        "path": "/"
                      }
                    ]
                  }
                ],
                "region": "ams"
              },
              "services": [
                {
                  "name": "web",
                  "source_commit_hash": "db6936cb46047c576962962eed81ad52c21f35d7"
                }
              ],
              "phase_last_updated_at": "2021-02-10T17:06:53Z",
              "created_at": "2021-02-10T17:05:30Z",
              "updated_at": "2021-02-10T17:06:53Z",
              "cause": "manual",
              "progress": {
                "success_steps": 6,
                "total_steps": 6,
                "steps": [
                  {
                    "name": "build",
                    "status": "SUCCESS",
                    "steps": [
                      {
                        "name": "initialize",
                        "status": "SUCCESS",
                        "started_at": "2021-02-10T17:05:35.572347485Z",
                        "ended_at": "2021-02-10T17:05:36.093995229Z"
                      },
                      {
                        "name": "components",
                        "status": "SUCCESS",
                        "steps": [
                          {
                            "name": "web",
                            "status": "SUCCESS",
                            "component_name": "web",
                            "message_base": "Building service"
                          }
                        ],
                        "started_at": "2021-02-10T17:05:36.094015928Z",
                        "ended_at": "2021-02-10T17:06:19.461737040Z"
                      }
                    ],
                    "started_at": "2021-02-10T17:05:35.572287990Z",
                    "ended_at": "2021-02-10T17:06:19.807834070Z"
                  },
                  {
                    "name": "deploy",
                    "status": "SUCCESS",
                    "steps": [
                      {
                        "name": "initialize",
                        "status": "SUCCESS",
                        "started_at": "2021-02-10T17:06:25.143957508Z",
                        "ended_at": "2021-02-10T17:06:26.120343872Z"
                      },
                      {
                        "name": "components",
                        "status": "SUCCESS",
                        "steps": [
                          {
                            "name": "web",
                            "status": "SUCCESS",
                            "steps": [
                              {
                                "name": "deploy",
                                "status": "SUCCESS",
                                "component_name": "web",
                                "message_base": "Deploying service"
                              },
                              {
                                "name": "wait",
                                "status": "SUCCESS",
                                "component_name": "web",
                                "message_base": "Waiting for service"
                              }
                            ],
                            "component_name": "web"
                          }
                        ],
                        "started_at": "2021-02-10T17:06:26.120385561Z",
                        "ended_at": "2021-02-10T17:06:50.029695913Z"
                      },
                      {
                        "name": "finalize",
                        "status": "SUCCESS",
                        "started_at": "2021-02-10T17:06:50.348459495Z",
                        "ended_at": "2021-02-10T17:06:53.404065961Z"
                      }
                    ],
                    "started_at": "2021-02-10T17:06:25.143932418Z",
                    "ended_at": "2021-02-10T17:06:53.404104185Z"
                  }
                ]
              },
              "phase": "ACTIVE",
              "tier_slug": "basic"
            },
            "last_deployment_created_at": "2021-02-10T17:05:30Z",
            "live_url": "https://sample-golang-zyhgn.ondigitalocean.app",
            "region": {
              "slug": "ams",
              "label": "Amsterdam",
              "flag": "netherlands",
              "continent": "Europe",
              "data_centers": [
                "ams3"
              ]
            },
            "tier_slug": "basic",
            "live_url_base": "https://sample-golang-zyhgn.ondigitalocean.app",
            "live_domain": "sample-golang-zyhgn.ondigitalocean.app"
          }
        }
      },
      "deployments": {
        "value": {
          "deployments": [
            {
              "id": "b6bdf840-2854-4f87-a36c-5f231c617c84",
              "spec": {
                "name": "sample-golang",
                "services": [
                  {
                    "name": "web",
                    "github": {
                      "repo": "digitalocean/sample-golang",
                      "branch": "branch"
                    },
                    "run_command": "bin/sample-golang",
                    "environment_slug": "go",
                    "instance_size_slug": "basic-xxs",
                    "instance_count": 2,
                    "routes": [
                      {
                        "path": "/"
                      }
                    ]
                  }
                ],
                "region": "ams"
              },
              "services": [
                {
                  "name": "web",
                  "source_commit_hash": "9a4df0b8e161e323bc3cdf1dc71878080fe144fa"
                }
              ],
              "phase_last_updated_at": "1901-01-01T00:00:00.000Z",
              "created_at": "2020-07-28T18:00:00.000Z",
              "updated_at": "2020-07-28T18:00:00.000Z",
              "cause": "commit 9a4df0b pushed to github/digitalocean/sample-golang",
              "progress": {
                "pending_steps": 6,
                "total_steps": 6,
                "steps": [
                  {
                    "name": "build",
                    "status": "PENDING",
                    "steps": [
                      {
                        "name": "initialize",
                        "status": "PENDING"
                      },
                      {
                        "name": "components",
                        "status": "PENDING",
                        "steps": [
                          {
                            "name": "web",
                            "status": "PENDING",
                            "component_name": "web",
                            "message_base": "Building service"
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "name": "deploy",
                    "status": "PENDING",
                    "steps": [
                      {
                        "name": "initialize",
                        "status": "PENDING"
                      },
                      {
                        "name": "components",
                        "status": "PENDING",
                        "steps": [
                          {
                            "name": "web",
                            "status": "PENDING",
                            "steps": [
                              {
                                "name": "deploy",
                                "status": "PENDING",
                                "component_name": "web",
                                "message_base": "Deploying service"
                              },
                              {
                                "name": "wait",
                                "status": "PENDING",
                                "component_name": "web",
                                "message_base": "Waiting for service"
                              }
                            ],
                            "component_name": "web"
                          }
                        ]
                      },
                      {
                        "name": "finalize",
                        "status": "PENDING"
                      }
                    ]
                  }
                ]
              },
              "phase": "PENDING_BUILD",
              "tier_slug": "basic"
            }
          ]
        }
      },
      "deployment": {
        "value": {
          "deployment": {
            "id": "b6bdf840-2854-4f87-a36c-5f231c617c84",
            "spec": {
              "name": "sample-golang",
              "services": [
                {
                  "name": "web",
                  "github": {
                    "repo": "digitalocean/sample-golang",
                    "branch": "branch"
                  },
                  "run_command": "bin/sample-golang",
                  "environment_slug": "go",
                  "instance_size_slug": "basic-xxs",
                  "instance_count": 2,
                  "routes": [
                    {
                      "path": "/"
                    }
                  ]
                }
              ],
              "region": "ams"
            },
            "services": [
              {
                "name": "web",
                "source_commit_hash": "9a4df0b8e161e323bc3cdf1dc71878080fe144fa"
              }
            ],
            "phase_last_updated_at": "1901-01-01T00:00:00.000Z",
            "created_at": "2020-07-28T18:00:00.000Z",
            "updated_at": "2020-07-28T18:00:00.000Z",
            "cause": "commit 9a4df0b pushed to github/digitalocean/sample-golang",
            "progress": {
              "pending_steps": 6,
              "total_steps": 6,
              "steps": [
                {
                  "name": "build",
                  "status": "PENDING",
                  "steps": [
                    {
                      "name": "initialize",
                      "status": "PENDING"
                    },
                    {
                      "name": "components",
                      "status": "PENDING",
                      "steps": [
                        {
                          "name": "web",
                          "status": "PENDING",
                          "component_name": "web",
                          "message_base": "Building service"
                        }
                      ]
                    }
                  ]
                },
                {
                  "name": "deploy",
                  "status": "PENDING",
                  "steps": [
                    {
                      "name": "initialize",
                      "status": "PENDING"
                    },
                    {
                      "name": "components",
                      "status": "PENDING",
                      "steps": [
                        {
                          "name": "web",
                          "status": "PENDING",
                          "steps": [
                            {
                              "name": "deploy",
                              "status": "PENDING",
                              "component_name": "web",
                              "message_base": "Deploying service"
                            },
                            {
                              "name": "wait",
                              "status": "PENDING",
                              "component_name": "web",
                              "message_base": "Waiting for service"
                            }
                          ],
                          "component_name": "web"
                        }
                      ]
                    },
                    {
                      "name": "finalize",
                      "status": "PENDING"
                    }
                  ]
                }
              ]
            },
            "phase": "PENDING_BUILD",
            "tier_slug": "basic"
          }
        }
      },
      "logs": {
        "value": {
          "live_url": "https://logs-example/build.log",
          "url": "https://logs/build.log",
          "historic_logs": [
            "https://logs-example/archive/build.log"
          ]
        }
      },
      "tiers": {
        "value": {
          "tiers": [
            {
              "name": "Starter",
              "slug": "starter",
              "egress_bandwidth_bytes": "1073741824",
              "build_seconds": "6000"
            },
            {
              "name": "Basic",
              "slug": "basic",
              "egress_bandwidth_bytes": "42949672960",
              "build_seconds": "24000"
            },
            {
              "name": "Professional",
              "slug": "professional",
              "egress_bandwidth_bytes": "107374182400",
              "build_seconds": "60000"
            }
          ]
        }
      },
      "tier": {
        "value": {
          "tier": {
            "name": "Basic",
            "slug": "basic",
            "egress_bandwidth_bytes": "42949672960",
            "build_seconds": "24000"
          }
        }
      },
      "instance_sizes": {
        "value": {
          "instance_sizes": [
            {
              "name": "Basic XXS",
              "slug": "basic-xxs",
              "cpu_type": "SHARED",
              "cpus": "1",
              "memory_bytes": "536870912",
              "usd_per_month": "5.00",
              "usd_per_second": "0.000002066799",
              "tier_slug": "basic",
              "tier_upgrade_to": "professional-xs"
            },
            {
              "name": "Basic XS",
              "slug": "basic-xs",
              "cpu_type": "SHARED",
              "cpus": "1",
              "memory_bytes": "1073741824",
              "usd_per_month": "10.00",
              "usd_per_second": "0.000004133598",
              "tier_slug": "basic",
              "tier_upgrade_to": "professional-xs"
            },
            {
              "name": "Basic S",
              "slug": "basic-s",
              "cpu_type": "SHARED",
              "cpus": "1",
              "memory_bytes": "2147483648",
              "usd_per_month": "20.00",
              "usd_per_second": "0.000008267196",
              "tier_slug": "basic",
              "tier_upgrade_to": "professional-s"
            },
            {
              "name": "Basic M",
              "slug": "basic-m",
              "cpu_type": "SHARED",
              "cpus": "2",
              "memory_bytes": "4294967296",
              "usd_per_month": "40.00",
              "usd_per_second": "0.000016534392",
              "tier_slug": "basic",
              "tier_upgrade_to": "professional-m"
            },
            {
              "name": "Professional XS",
              "slug": "professional-xs",
              "cpu_type": "SHARED",
              "cpus": "1",
              "memory_bytes": "1073741824",
              "usd_per_month": "12.00",
              "usd_per_second": "0.000004960317",
              "tier_slug": "professional",
              "tier_downgrade_to": "basic-xs"
            },
            {
              "name": "Professional S",
              "slug": "professional-s",
              "cpu_type": "SHARED",
              "cpus": "1",
              "memory_bytes": "2147483648",
              "usd_per_month": "25.00",
              "usd_per_second": "0.000010333995",
              "tier_slug": "professional",
              "tier_downgrade_to": "basic-s"
            },
            {
              "name": "Professional M",
              "slug": "professional-m",
              "cpu_type": "SHARED",
              "cpus": "2",
              "memory_bytes": "4294967296",
              "usd_per_month": "50.00",
              "usd_per_second": "0.000020667989",
              "tier_slug": "professional",
              "tier_downgrade_to": "basic-s"
            },
            {
              "name": "Professional 1L",
              "slug": "professional-1l",
              "cpu_type": "DEDICATED",
              "cpus": "1",
              "memory_bytes": "4294967296",
              "usd_per_month": "75.00",
              "usd_per_second": "0.000031001984",
              "tier_slug": "professional",
              "tier_downgrade_to": "basic-m"
            },
            {
              "name": "Professional L",
              "slug": "professional-l",
              "cpu_type": "DEDICATED",
              "cpus": "2",
              "memory_bytes": "8589934592",
              "usd_per_month": "150.00",
              "usd_per_second": "0.000062003968",
              "tier_slug": "professional",
              "tier_downgrade_to": "basic-s"
            },
            {
              "name": "Professional XL",
              "slug": "professional-xl",
              "cpu_type": "DEDICATED",
              "cpus": "4",
              "memory_bytes": "17179869184",
              "usd_per_month": "300.00",
              "usd_per_second": "0.000124007937",
              "tier_slug": "professional",
              "tier_downgrade_to": "basic-s"
            }
          ]
        }
      },
      "instance_size": {
        "value": {
          "instance_size": {
            "name": "Basic XXS",
            "slug": "basic-xxs",
            "cpu_type": "SHARED",
            "cpus": "1",
            "memory_bytes": "536870912",
            "usd_per_month": "5.00",
            "usd_per_second": "0.000002066799",
            "tier_slug": "basic",
            "tier_upgrade_to": "professional-xs"
          }
        }
      },
      "regions": {
        "value": {
          "regions": [
            {
              "slug": "ams",
              "label": "Amsterdam",
              "flag": "netherlands",
              "continent": "Europe",
              "data_centers": [
                "ams3"
              ]
            },
            {
              "slug": "nyc",
              "label": "New York",
              "flag": "usa",
              "continent": "North America",
              "data_centers": [
                "nyc1",
                "nyc3"
              ],
              "default": true
            },
            {
              "slug": "fra",
              "label": "Frankfurt",
              "flag": "germany",
              "continent": "Europe",
              "data_centers": [
                "fra1"
              ]
            },
            {
              "slug": "sfo",
              "label": "San Francisco",
              "flag": "usa",
              "continent": "North America",
              "data_centers": [
                "sfo3"
              ]
            },
            {
              "slug": "sgp",
              "label": "Singapore",
              "flag": "singapore",
              "continent": "Asia",
              "data_centers": [
                "sgp1"
              ]
            },
            {
              "slug": "blr",
              "label": "Bangalore",
              "flag": "india",
              "continent": "Asia",
              "data_centers": [
                "blr1"
              ]
            },
            {
              "slug": "tor",
              "label": "Toronto",
              "flag": "canada",
              "continent": "North America",
              "data_centers": [
                "tor1"
              ]
            },
            {
              "slug": "lon",
              "label": "London",
              "flag": "uk",
              "continent": "Europe",
              "data_centers": [
                "lon1"
              ]
            }
          ]
        }
      },
      "propose": {
        "value": {
          "app_name_available": true,
          "existing_static_apps": "2",
          "max_free_static_apps": "3",
          "spec": {
            "name": "sample-golang",
            "services": [
              {
                "name": "web",
                "github": {
                  "repo": "digitalocean/sample-golang",
                  "branch": "branch"
                },
                "run_command": "bin/sample-golang",
                "environment_slug": "go",
                "instance_size_slug": "basic-xxs",
                "instance_count": 1,
                "http_port": 8080,
                "routes": [
                  {
                    "path": "/"
                  }
                ]
              }
            ],
            "region": "ams"
          },
          "app_cost": 5,
          "app_tier_upgrade_cost": 17
        }
      },
      "alerts": {
        "value": {
          "alerts": [
            {
              "id": "e552e1f9-c1b0-4e6d-8777-ad6f27767306",
              "spec": {
                "rule": "DEPLOYMENT_FAILED"
              },
              "emails": [
                "sammy@digitalocean.com"
              ],
              "phase": "ACTIVE",
              "progress": {
                "steps": [
                  {
                    "name": "alert-configure-insight-alert",
                    "status": "SUCCESS",
                    "started_at": "2020-07-28T18:00:00.000Z",
                    "ended_at": "2020-07-28T18:00:00.000Z"
                  }
                ]
              }
            },
            {
              "id": "b58cc9d4-0702-4ffd-ab45-4c2a8d979527",
              "spec": {
                "rule": "CPU_UTILIZATION",
                "operator": "GREATER_THAN",
                "value": 85,
                "window": "FIVE_MINUTES"
              },
              "emails": [
                "sammy@digitalocean.com"
              ],
              "phase": "ACTIVE",
              "progress": {
                "steps": [
                  {
                    "name": "alert-configure-insight-alert",
                    "status": "SUCCESS",
                    "started_at": "2020-07-28T18:00:00.000Z",
                    "ended_at": "2020-07-28T18:00:00.000Z"
                  }
                ]
              }
            }
          ]
        }
      },
      "alert": {
        "value": {
          "alert": {
            "id": "e552e1f9-c1b0-4e6d-8777-ad6f27767306",
            "spec": {
              "rule": "DEPLOYMENT_FAILED"
            },
            "emails": [
              "sammy@digitalocean.com"
            ],
            "phase": "ACTIVE",
            "progress": {
              "steps": [
                {
                  "name": "alert-configure-insight-alert",
                  "status": "SUCCESS",
                  "started_at": "2020-07-28T18:00:00.000Z",
                  "ended_at": "2020-07-28T18:00:00.000Z"
                }
              ]
            }
          }
        }
      },
      "certificates_all": {
        "value": {
          "certificates": [
            {
              "id": "892071a0-bb95-49bc-8021-3afd67a210bf",
              "name": "web-cert-01",
              "not_after": "2017-02-22T00:23:00Z",
              "sha1_fingerprint": "dfcc9f57d86bf58e321c2c6c31c7a971be244ac7",
              "created_at": "2017-02-08T16:02:37Z",
              "dns_names": [
                ""
              ],
              "state": "verified",
              "type": "custom"
            },
            {
              "id": "ba9b9c18-6c59-46c2-99df-70da170a42ba",
              "name": "web-cert-02",
              "not_after": "2018-06-07T17:44:12Z",
              "sha1_fingerprint": "479c82b5c63cb6d3e6fac4624d58a33b267e166c",
              "created_at": "2018-03-09T18:44:11Z",
              "dns_names": [
                "www.example.com",
                "example.com"
              ],
              "state": "verified",
              "type": "lets_encrypt"
            }
          ],
          "meta": {
            "total": 2
          }
        }
      },
      "certificates_custom": {
        "value": {
          "certificate": {
            "id": "892071a0-bb95-49bc-8021-3afd67a210bf",
            "name": "web-cert-01",
            "not_after": "2017-02-22T00:23:00Z",
            "sha1_fingerprint": "dfcc9f57d86bf58e321c2c6c31c7a971be244ac7",
            "created_at": "2017-02-08T16:02:37Z",
            "dns_names": [
              ""
            ],
            "state": "verified",
            "type": "custom"
          }
        }
      },
      "certificates_lets_encrypt_pending": {
        "value": {
          "certificate": {
            "id": "ba9b9c18-6c59-46c2-99df-70da170a42ba",
            "name": "web-cert-02",
            "not_after": "2018-06-07T17:44:12Z",
            "sha1_fingerprint": "479c82b5c63cb6d3e6fac4624d58a33b267e166c",
            "created_at": "2018-03-09T18:44:11Z",
            "dns_names": [
              "www.example.com",
              "example.com"
            ],
            "state": "pending",
            "type": "lets_encrypt"
          }
        }
      },
      "certificates_lets_encrypt": {
        "value": {
          "certificate": {
            "id": "ba9b9c18-6c59-46c2-99df-70da170a42ba",
            "name": "web-cert-02",
            "not_after": "2018-06-07T17:44:12Z",
            "sha1_fingerprint": "479c82b5c63cb6d3e6fac4624d58a33b267e166c",
            "created_at": "2018-03-09T18:44:11Z",
            "dns_names": [
              "www.example.com",
              "example.com"
            ],
            "state": "verified",
            "type": "lets_encrypt"
          }
        }
      },
      "domain_records_all": {
        "value": {
          "domain_records": [
            {
              "id": 28448429,
              "type": "NS",
              "name": "@",
              "data": "ns1.digitalocean.com",
              "priority": null,
              "port": null,
              "ttl": 1800,
              "weight": null,
              "flags": null,
              "tag": null
            },
            {
              "id": 28448430,
              "type": "NS",
              "name": "@",
              "data": "ns2.digitalocean.com",
              "priority": null,
              "port": null,
              "ttl": 1800,
              "weight": null,
              "flags": null,
              "tag": null
            },
            {
              "id": 28448431,
              "type": "NS",
              "name": "@",
              "data": "ns3.digitalocean.com",
              "priority": null,
              "port": null,
              "ttl": 1800,
              "weight": null,
              "flags": null,
              "tag": null
            },
            {
              "id": 28448432,
              "type": "A",
              "name": "@",
              "data": "1.2.3.4",
              "priority": null,
              "port": null,
              "ttl": 1800,
              "weight": null,
              "flags": null,
              "tag": null
            }
          ],
          "meta": {
            "total": 4
          }
        }
      },
      "droplets_all": {
        "value": {
          "droplets": [
            {
              "id": 3164444,
              "name": "example.com",
              "memory": 1024,
              "vcpus": 1,
              "disk": 25,
              "locked": false,
              "status": "active",
              "kernel": null,
              "created_at": "2020-07-21T18:37:44Z",
              "features": [
                "backups",
                "private_networking",
                "ipv6"
              ],
              "backup_ids": [
                53893572
              ],
              "next_backup_window": {
                "start": "2020-07-30T00:00:00Z",
                "end": "2020-07-30T23:00:00Z"
              },
              "snapshot_ids": [
                67512819
              ],
              "image": {
                "id": 63663980,
                "name": "20.04 (LTS) x64",
                "distribution": "Ubuntu",
                "slug": "ubuntu-20-04-x64",
                "public": true,
                "regions": [
                  "ams2",
                  "ams3",
                  "blr1",
                  "fra1",
                  "lon1",
                  "nyc1",
                  "nyc2",
                  "nyc3",
                  "sfo1",
                  "sfo2",
                  "sfo3",
                  "sgp1",
                  "tor1"
                ],
                "created_at": "2020-05-15T05:47:50Z",
                "type": "snapshot",
                "min_disk_size": 20,
                "size_gigabytes": 2.36,
                "description": "",
                "tags": [],
                "status": "available",
                "error_message": ""
              },
              "volume_ids": [],
              "size": {
                "slug": "s-1vcpu-1gb",
                "memory": 1024,
                "vcpus": 1,
                "disk": 25,
                "transfer": 1,
                "price_monthly": 5,
                "price_hourly": 0.00743999984115362,
                "regions": [
                  "ams2",
                  "ams3",
                  "blr1",
                  "fra1",
                  "lon1",
                  "nyc1",
                  "nyc2",
                  "nyc3",
                  "sfo1",
                  "sfo2",
                  "sfo3",
                  "sgp1",
                  "tor1"
                ],
                "available": true,
                "description": "Basic"
              },
              "size_slug": "s-1vcpu-1gb",
              "networks": {
                "v4": [
                  {
                    "ip_address": "10.128.192.124",
                    "netmask": "255.255.0.0",
                    "gateway": "nil",
                    "type": "private"
                  },
                  {
                    "ip_address": "192.241.165.154",
                    "netmask": "255.255.255.0",
                    "gateway": "192.241.165.1",
                    "type": "public"
                  }
                ],
                "v6": [
                  {
                    "ip_address": "2604:a880:0:1010::18a:a001",
                    "netmask": 64,
                    "gateway": "2604:a880:0:1010::1",
                    "type": "public"
                  }
                ]
              },
              "region": {
                "name": "New York 3",
                "slug": "nyc3",
                "features": [
                  "private_networking",
                  "backups",
                  "ipv6",
                  "metadata",
                  "install_agent",
                  "storage",
                  "image_transfer"
                ],
                "available": true,
                "sizes": [
                  "s-1vcpu-1gb",
                  "s-1vcpu-2gb",
                  "s-1vcpu-3gb",
                  "s-2vcpu-2gb",
                  "s-3vcpu-1gb",
                  "s-2vcpu-4gb",
                  "s-4vcpu-8gb",
                  "s-6vcpu-16gb",
                  "s-8vcpu-32gb",
                  "s-12vcpu-48gb",
                  "s-16vcpu-64gb",
                  "s-20vcpu-96gb",
                  "s-24vcpu-128gb",
                  "s-32vcpu-192g"
                ]
              },
              "tags": [
                "web",
                "env:prod"
              ],
              "vpc_uuid": "760e09ef-dc84-11e8-981e-3cfdfeaae000"
            },
            {
              "id": 3164459,
              "name": "assets.example.com",
              "memory": 1024,
              "vcpus": 1,
              "disk": 25,
              "locked": false,
              "status": "active",
              "kernel": null,
              "created_at": "2020-07-21T18:42:27Z",
              "features": [
                "private_networking"
              ],
              "backup_ids": [],
              "next_backup_window": {
                "start": "2020-07-30T00:00:00Z",
                "end": "2020-07-30T23:00:00Z"
              },
              "snapshot_ids": [],
              "image": {
                "id": 63663980,
                "name": "20.04 (LTS) x64",
                "distribution": "Ubuntu",
                "slug": "ubuntu-20-04-x64",
                "public": true,
                "regions": [
                  "ams2",
                  "ams3",
                  "blr1",
                  "fra1",
                  "lon1",
                  "nyc1",
                  "nyc2",
                  "nyc3",
                  "sfo1",
                  "sfo2",
                  "sfo3",
                  "sgp1",
                  "tor1"
                ],
                "created_at": "2020-05-15T05:47:50Z",
                "type": "snapshot",
                "min_disk_size": 20,
                "size_gigabytes": 2.36,
                "description": "",
                "tags": [],
                "status": "available",
                "error_message": ""
              },
              "volume_ids": [
                "506f78a4-e098-11e5-ad9f-000f53306ae1"
              ],
              "size": {
                "slug": "s-1vcpu-1gb",
                "memory": 1024,
                "vcpus": 1,
                "disk": 25,
                "transfer": 1,
                "price_monthly": 5,
                "price_hourly": 0.00743999984115362,
                "regions": [
                  "ams2",
                  "ams3",
                  "blr1",
                  "fra1",
                  "lon1",
                  "nyc1",
                  "nyc2",
                  "nyc3",
                  "sfo1",
                  "sfo2",
                  "sfo3",
                  "sgp1",
                  "tor1"
                ],
                "available": true,
                "description": "Basic"
              },
              "size_slug": "s-1vcpu-1gb",
              "networks": {
                "v4": [
                  {
                    "ip_address": "10.128.192.138",
                    "netmask": "255.255.0.0",
                    "gateway": "nil",
                    "type": "private"
                  },
                  {
                    "ip_address": "162.243.0.4",
                    "netmask": "255.255.255.0",
                    "gateway": "162.243.0.1",
                    "type": "public"
                  }
                ],
                "v6": []
              },
              "region": {
                "name": "New York 3",
                "slug": "nyc3",
                "features": [
                  "private_networking",
                  "backups",
                  "ipv6",
                  "metadata",
                  "install_agent",
                  "storage",
                  "image_transfer"
                ],
                "available": true,
                "sizes": [
                  "s-1vcpu-1gb",
                  "s-1vcpu-2gb",
                  "s-1vcpu-3gb",
                  "s-2vcpu-2gb",
                  "s-3vcpu-1gb",
                  "s-2vcpu-4gb",
                  "s-4vcpu-8gb",
                  "s-6vcpu-16gb",
                  "s-8vcpu-32gb",
                  "s-12vcpu-48gb",
                  "s-16vcpu-64gb",
                  "s-20vcpu-96gb",
                  "s-24vcpu-128gb",
                  "s-32vcpu-192g"
                ]
              },
              "tags": [
                "storage",
                "env:prod"
              ],
              "vpc_uuid": "760e09ef-dc84-11e8-981e-3cfdfeaae000"
            },
            {
              "id": 3164412,
              "name": "stage.example.com",
              "memory": 1024,
              "vcpus": 1,
              "disk": 25,
              "locked": false,
              "status": "active",
              "kernel": null,
              "created_at": "2020-07-21T18:32:55Z",
              "features": [
                "private_networking"
              ],
              "backup_ids": [],
              "next_backup_window": {
                "start": "2020-07-30T00:00:00Z",
                "end": "2020-07-30T23:00:00Z"
              },
              "snapshot_ids": [],
              "image": {
                "id": 63663980,
                "name": "20.04 (LTS) x64",
                "distribution": "Ubuntu",
                "slug": "ubuntu-20-04-x64",
                "public": true,
                "regions": [
                  "ams2",
                  "ams3",
                  "blr1",
                  "fra1",
                  "lon1",
                  "nyc1",
                  "nyc2",
                  "nyc3",
                  "sfo1",
                  "sfo2",
                  "sfo3",
                  "sgp1",
                  "tor1"
                ],
                "created_at": "2020-05-15T05:47:50Z",
                "type": "snapshot",
                "min_disk_size": 20,
                "size_gigabytes": 2.36,
                "description": "",
                "tags": [],
                "status": "available",
                "error_message": ""
              },
              "volume_ids": [
                "7724db7c-e098-11e5-b522-000f53304e51"
              ],
              "size": {
                "slug": "s-1vcpu-1gb",
                "memory": 1024,
                "vcpus": 1,
                "disk": 25,
                "transfer": 1,
                "price_monthly": 5,
                "price_hourly": 0.00743999984115362,
                "regions": [
                  "ams2",
                  "ams3",
                  "blr1",
                  "fra1",
                  "lon1",
                  "nyc1",
                  "nyc2",
                  "nyc3",
                  "sfo1",
                  "sfo2",
                  "sfo3",
                  "sgp1",
                  "tor1"
                ],
                "available": true,
                "description": "Basic"
              },
              "size_slug": "s-1vcpu-1gb",
              "networks": {
                "v4": [
                  {
                    "ip_address": "10.128.192.125",
                    "netmask": "255.255.0.0",
                    "gateway": "nil",
                    "type": "private"
                  },
                  {
                    "ip_address": "192.241.247.248",
                    "netmask": "255.255.255.0",
                    "gateway": "192.241.247.1",
                    "type": "public"
                  }
                ],
                "v6": []
              },
              "region": {
                "name": "New York 3",
                "slug": "nyc3",
                "features": [
                  "private_networking",
                  "backups",
                  "ipv6",
                  "metadata",
                  "install_agent",
                  "storage",
                  "image_transfer"
                ],
                "available": true,
                "sizes": [
                  "s-1vcpu-1gb",
                  "s-1vcpu-2gb",
                  "s-1vcpu-3gb",
                  "s-2vcpu-2gb",
                  "s-3vcpu-1gb",
                  "s-2vcpu-4gb",
                  "s-4vcpu-8gb",
                  "s-6vcpu-16gb",
                  "s-8vcpu-32gb",
                  "s-12vcpu-48gb",
                  "s-16vcpu-64gb",
                  "s-20vcpu-96gb",
                  "s-24vcpu-128gb",
                  "s-32vcpu-192g"
                ]
              },
              "tags": [
                "env:stage"
              ],
              "vpc_uuid": "5a4981aa-9653-4bd1-bef5-d6bff52042e4"
            }
          ],
          "meta": {
            "total": 3
          }
        }
      },
      "droplets_tagged": {
        "value": {
          "droplets": [
            {
              "id": 3164444,
              "name": "example.com",
              "memory": 1024,
              "vcpus": 1,
              "disk": 25,
              "locked": false,
              "status": "active",
              "kernel": null,
              "created_at": "2020-07-21T18:37:44Z",
              "features": [
                "backups",
                "private_networking",
                "ipv6"
              ],
              "backup_ids": [
                53893572
              ],
              "next_backup_window": {
                "start": "2020-07-30T00:00:00Z",
                "end": "2020-07-30T23:00:00Z"
              },
              "snapshot_ids": [
                67512819
              ],
              "image": {
                "id": 63663980,
                "name": "20.04 (LTS) x64",
                "distribution": "Ubuntu",
                "slug": "ubuntu-20-04-x64",
                "public": true,
                "regions": [
                  "ams2",
                  "ams3",
                  "blr1",
                  "fra1",
                  "lon1",
                  "nyc1",
                  "nyc2",
                  "nyc3",
                  "sfo1",
                  "sfo2",
                  "sfo3",
                  "sgp1",
                  "tor1"
                ],
                "created_at": "2020-05-15T05:47:50Z",
                "type": "snapshot",
                "min_disk_size": 20,
                "size_gigabytes": 2.36,
                "description": "",
                "tags": [],
                "status": "available",
                "error_message": ""
              },
              "volume_ids": [],
              "size": {
                "slug": "s-1vcpu-1gb",
                "memory": 1024,
                "vcpus": 1,
                "disk": 25,
                "transfer": 1,
                "price_monthly": 5,
                "price_hourly": 0.00743999984115362,
                "regions": [
                  "ams2",
                  "ams3",
                  "blr1",
                  "fra1",
                  "lon1",
                  "nyc1",
                  "nyc2",
                  "nyc3",
                  "sfo1",
                  "sfo2",
                  "sfo3",
                  "sgp1",
                  "tor1"
                ],
                "available": true,
                "description": "Basic"
              },
              "size_slug": "s-1vcpu-1gb",
              "networks": {
                "v4": [
                  {
                    "ip_address": "10.128.192.124",
                    "netmask": "255.255.0.0",
                    "gateway": "nil",
                    "type": "private"
                  },
                  {
                    "ip_address": "192.241.165.154",
                    "netmask": "255.255.255.0",
                    "gateway": "192.241.165.1",
                    "type": "public"
                  }
                ],
                "v6": [
                  {
                    "ip_address": "2604:a880:0:1010::18a:a001",
                    "netmask": 64,
                    "gateway": "2604:a880:0:1010::1",
                    "type": "public"
                  }
                ]
              },
              "region": {
                "name": "New York 3",
                "slug": "nyc3",
                "features": [
                  "private_networking",
                  "backups",
                  "ipv6",
                  "metadata",
                  "install_agent",
                  "storage",
                  "image_transfer"
                ],
                "available": true,
                "sizes": [
                  "s-1vcpu-1gb",
                  "s-1vcpu-2gb",
                  "s-1vcpu-3gb",
                  "s-2vcpu-2gb",
                  "s-3vcpu-1gb",
                  "s-2vcpu-4gb",
                  "s-4vcpu-8gb",
                  "s-6vcpu-16gb",
                  "s-8vcpu-32gb",
                  "s-12vcpu-48gb",
                  "s-16vcpu-64gb",
                  "s-20vcpu-96gb",
                  "s-24vcpu-128gb",
                  "s-32vcpu-192g"
                ]
              },
              "tags": [
                "web",
                "env:prod"
              ],
              "vpc_uuid": "760e09ef-dc84-11e8-981e-3cfdfeaae000"
            },
            {
              "id": 3164459,
              "name": "assets.example.com",
              "memory": 1024,
              "vcpus": 1,
              "disk": 25,
              "locked": false,
              "status": "active",
              "kernel": null,
              "created_at": "2020-07-21T18:42:27Z",
              "features": [
                "private_networking"
              ],
              "backup_ids": [],
              "next_backup_window": {
                "start": "2020-07-30T00:00:00Z",
                "end": "2020-07-30T23:00:00Z"
              },
              "snapshot_ids": [],
              "image": {
                "id": 63663980,
                "name": "20.04 (LTS) x64",
                "distribution": "Ubuntu",
                "slug": "ubuntu-20-04-x64",
                "public": true,
                "regions": [
                  "ams2",
                  "ams3",
                  "blr1",
                  "fra1",
                  "lon1",
                  "nyc1",
                  "nyc2",
                  "nyc3",
                  "sfo1",
                  "sfo2",
                  "sfo3",
                  "sgp1",
                  "tor1"
                ],
                "created_at": "2020-05-15T05:47:50Z",
                "type": "snapshot",
                "min_disk_size": 20,
                "size_gigabytes": 2.36,
                "description": "",
                "tags": [],
                "status": "available",
                "error_message": ""
              },
              "volume_ids": [
                "506f78a4-e098-11e5-ad9f-000f53306ae1"
              ],
              "size": {
                "slug": "s-1vcpu-1gb",
                "memory": 1024,
                "vcpus": 1,
                "disk": 25,
                "transfer": 1,
                "price_monthly": 5,
                "price_hourly": 0.00743999984115362,
                "regions": [
                  "ams2",
                  "ams3",
                  "blr1",
                  "fra1",
                  "lon1",
                  "nyc1",
                  "nyc2",
                  "nyc3",
                  "sfo1",
                  "sfo2",
                  "sfo3",
                  "sgp1",
                  "tor1"
                ],
                "available": true,
                "description": "Basic"
              },
              "size_slug": "s-1vcpu-1gb",
              "networks": {
                "v4": [
                  {
                    "ip_address": "10.128.192.138",
                    "netmask": "255.255.0.0",
                    "gateway": "nil",
                    "type": "private"
                  },
                  {
                    "ip_address": "162.243.0.4",
                    "netmask": "255.255.255.0",
                    "gateway": "162.243.0.1",
                    "type": "public"
                  }
                ],
                "v6": []
              },
              "region": {
                "name": "New York 3",
                "slug": "nyc3",
                "features": [
                  "private_networking",
                  "backups",
                  "ipv6",
                  "metadata",
                  "install_agent",
                  "storage",
                  "image_transfer"
                ],
                "available": true,
                "sizes": [
                  "s-1vcpu-1gb",
                  "s-1vcpu-2gb",
                  "s-1vcpu-3gb",
                  "s-2vcpu-2gb",
                  "s-3vcpu-1gb",
                  "s-2vcpu-4gb",
                  "s-4vcpu-8gb",
                  "s-6vcpu-16gb",
                  "s-8vcpu-32gb",
                  "s-12vcpu-48gb",
                  "s-16vcpu-64gb",
                  "s-20vcpu-96gb",
                  "s-24vcpu-128gb",
                  "s-32vcpu-192g"
                ]
              },
              "tags": [
                "storage",
                "env:prod"
              ],
              "vpc_uuid": "760e09ef-dc84-11e8-981e-3cfdfeaae000"
            }
          ],
          "meta": {
            "total": 2
          }
        }
      },
      "droplet_create_request": {
        "value": {
          "name": "example.com",
          "region": "nyc3",
          "size": "s-1vcpu-1gb",
          "image": "ubuntu-20-04-x64",
          "ssh_keys": [
            289794,
            "3b:16:e4:bf:8b:00:8b:b8:59:8c:a9:d3:f0:19:fa:45"
          ],
          "backups": true,
          "ipv6": true,
          "monitoring": true,
          "tags": [
            "env:prod",
            "web"
          ],
          "user_data": "runcmd:\n  - touch /test.txt\n",
          "vpc_uuid": "760e09ef-dc84-11e8-981e-3cfdfeaae000"
        }
      },
      "droplet_multi_create_request": {
        "value": {
          "names": [
            "sub-01.example.com",
            "sub-02.example.com"
          ],
          "region": "nyc3",
          "size": "s-1vcpu-1gb",
          "image": "ubuntu-20-04-x64",
          "ssh_keys": [
            289794,
            "3b:16:e4:bf:8b:00:8b:b8:59:8c:a9:d3:f0:19:fa:45"
          ],
          "backups": true,
          "ipv6": true,
          "monitoring": true,
          "tags": [
            "env:prod",
            "web"
          ],
          "user_data": "runcmd:\n  - touch /test.txt\n",
          "vpc_uuid": "760e09ef-dc84-11e8-981e-3cfdfeaae000"
        }
      },
      "droplet_create_response": {
        "value": {
          "droplet": {
            "id": 3164444,
            "name": "example.com",
            "memory": 1024,
            "vcpus": 1,
            "disk": 25,
            "locked": false,
            "status": "new",
            "kernel": null,
            "created_at": "2020-07-21T18:37:44Z",
            "features": [
              "backups",
              "private_networking",
              "ipv6",
              "monitoring"
            ],
            "backup_ids": [],
            "next_backup_window": null,
            "snapshot_ids": [],
            "image": {
              "id": 63663980,
              "name": "20.04 (LTS) x64",
              "distribution": "Ubuntu",
              "slug": "ubuntu-20-04-x64",
              "public": true,
              "regions": [
                "ams2",
                "ams3",
                "blr1",
                "fra1",
                "lon1",
                "nyc1",
                "nyc2",
                "nyc3",
                "sfo1",
                "sfo2",
                "sfo3",
                "sgp1",
                "tor1"
              ],
              "created_at": "2020-05-15T05:47:50Z",
              "type": "snapshot",
              "min_disk_size": 20,
              "size_gigabytes": 2.36,
              "description": "",
              "tags": [],
              "status": "available",
              "error_message": ""
            },
            "volume_ids": [],
            "size": {
              "slug": "s-1vcpu-1gb",
              "memory": 1024,
              "vcpus": 1,
              "disk": 25,
              "transfer": 1,
              "price_monthly": 5,
              "price_hourly": 0.00743999984115362,
              "regions": [
                "ams2",
                "ams3",
                "blr1",
                "fra1",
                "lon1",
                "nyc1",
                "nyc2",
                "nyc3",
                "sfo1",
                "sfo2",
                "sfo3",
                "sgp1",
                "tor1"
              ],
              "available": true,
              "description": "Basic"
            },
            "size_slug": "s-1vcpu-1gb",
            "networks": {
              "v4": [],
              "v6": []
            },
            "region": {
              "name": "New York 3",
              "slug": "nyc3",
              "features": [
                "private_networking",
                "backups",
                "ipv6",
                "metadata",
                "install_agent",
                "storage",
                "image_transfer"
              ],
              "available": true,
              "sizes": [
                "s-1vcpu-1gb",
                "s-1vcpu-2gb",
                "s-1vcpu-3gb",
                "s-2vcpu-2gb",
                "s-3vcpu-1gb",
                "s-2vcpu-4gb",
                "s-4vcpu-8gb",
                "s-6vcpu-16gb",
                "s-8vcpu-32gb",
                "s-12vcpu-48gb",
                "s-16vcpu-64gb",
                "s-20vcpu-96gb",
                "s-24vcpu-128gb",
                "s-32vcpu-192g"
              ]
            },
            "tags": [
              "web",
              "env:prod"
            ]
          },
          "links": {
            "actions": [
              {
                "id": 7515,
                "rel": "create",
                "href": "https://api.digitalocean.com/v2/actions/7515"
              }
            ]
          }
        }
      },
      "droplet_multi_create_response": {
        "value": {
          "droplets": [
            {
              "id": 3164444,
              "name": "sub-01.example.com",
              "memory": 1024,
              "vcpus": 1,
              "disk": 25,
              "locked": false,
              "status": "new",
              "kernel": null,
              "created_at": "2020-07-21T18:37:44Z",
              "features": [
                "backups",
                "private_networking",
                "ipv6",
                "monitoring"
              ],
              "backup_ids": [],
              "next_backup_window": null,
              "snapshot_ids": [],
              "image": {
                "id": 63663980,
                "name": "20.04 (LTS) x64",
                "distribution": "Ubuntu",
                "slug": "ubuntu-20-04-x64",
                "public": true,
                "regions": [
                  "ams2",
                  "ams3",
                  "blr1",
                  "fra1",
                  "lon1",
                  "nyc1",
                  "nyc2",
                  "nyc3",
                  "sfo1",
                  "sfo2",
                  "sfo3",
                  "sgp1",
                  "tor1"
                ],
                "created_at": "2020-05-15T05:47:50Z",
                "type": "snapshot",
                "min_disk_size": 20,
                "size_gigabytes": 2.36,
                "description": "",
                "tags": [],
                "status": "available",
                "error_message": ""
              },
              "volume_ids": [],
              "size": {
                "slug": "s-1vcpu-1gb",
                "memory": 1024,
                "vcpus": 1,
                "disk": 25,
                "transfer": 1,
                "price_monthly": 5,
                "price_hourly": 0.00743999984115362,
                "regions": [
                  "ams2",
                  "ams3",
                  "blr1",
                  "fra1",
                  "lon1",
                  "nyc1",
                  "nyc2",
                  "nyc3",
                  "sfo1",
                  "sfo2",
                  "sfo3",
                  "sgp1",
                  "tor1"
                ],
                "available": true,
                "description": "Basic"
              },
              "size_slug": "s-1vcpu-1gb",
              "networks": {
                "v4": [],
                "v6": []
              },
              "region": {
                "name": "New York 3",
                "slug": "nyc3",
                "features": [
                  "private_networking",
                  "backups",
                  "ipv6",
                  "metadata",
                  "install_agent",
                  "storage",
                  "image_transfer"
                ],
                "available": true,
                "sizes": [
                  "s-1vcpu-1gb",
                  "s-1vcpu-2gb",
                  "s-1vcpu-3gb",
                  "s-2vcpu-2gb",
                  "s-3vcpu-1gb",
                  "s-2vcpu-4gb",
                  "s-4vcpu-8gb",
                  "s-6vcpu-16gb",
                  "s-8vcpu-32gb",
                  "s-12vcpu-48gb",
                  "s-16vcpu-64gb",
                  "s-20vcpu-96gb",
                  "s-24vcpu-128gb",
                  "s-32vcpu-192g"
                ]
              },
              "tags": [
                "web",
                "env:prod"
              ]
            },
            {
              "id": 3164445,
              "name": "sub-02.example.com",
              "memory": 1024,
              "vcpus": 1,
              "disk": 25,
              "locked": false,
              "status": "new",
              "kernel": null,
              "created_at": "2020-07-21T18:37:44Z",
              "features": [
                "backups",
                "private_networking",
                "ipv6",
                "monitoring"
              ],
              "backup_ids": [],
              "next_backup_window": null,
              "snapshot_ids": [],
              "image": {
                "id": 63663980,
                "name": "20.04 (LTS) x64",
                "distribution": "Ubuntu",
                "slug": "ubuntu-20-04-x64",
                "public": true,
                "regions": [
                  "ams2",
                  "ams3",
                  "blr1",
                  "fra1",
                  "lon1",
                  "nyc1",
                  "nyc2",
                  "nyc3",
                  "sfo1",
                  "sfo2",
                  "sfo3",
                  "sgp1",
                  "tor1"
                ],
                "created_at": "2020-05-15T05:47:50Z",
                "type": "snapshot",
                "min_disk_size": 20,
                "size_gigabytes": 2.36,
                "description": "",
                "tags": [],
                "status": "available",
                "error_message": ""
              },
              "volume_ids": [],
              "size": {
                "slug": "s-1vcpu-1gb",
                "memory": 1024,
                "vcpus": 1,
                "disk": 25,
                "transfer": 1,
                "price_monthly": 5,
                "price_hourly": 0.00743999984115362,
                "regions": [
                  "ams2",
                  "ams3",
                  "blr1",
                  "fra1",
                  "lon1",
                  "nyc1",
                  "nyc2",
                  "nyc3",
                  "sfo1",
                  "sfo2",
                  "sfo3",
                  "sgp1",
                  "tor1"
                ],
                "available": true,
                "description": "Basic"
              },
              "size_slug": "s-1vcpu-1gb",
              "networks": {
                "v4": [],
                "v6": []
              },
              "region": {
                "name": "New York 3",
                "slug": "nyc3",
                "features": [
                  "private_networking",
                  "backups",
                  "ipv6",
                  "metadata",
                  "install_agent",
                  "storage",
                  "image_transfer"
                ],
                "available": true,
                "sizes": [
                  "s-1vcpu-1gb",
                  "s-1vcpu-2gb",
                  "s-1vcpu-3gb",
                  "s-2vcpu-2gb",
                  "s-3vcpu-1gb",
                  "s-2vcpu-4gb",
                  "s-4vcpu-8gb",
                  "s-6vcpu-16gb",
                  "s-8vcpu-32gb",
                  "s-12vcpu-48gb",
                  "s-16vcpu-64gb",
                  "s-20vcpu-96gb",
                  "s-24vcpu-128gb",
                  "s-32vcpu-192g"
                ]
              },
              "tags": [
                "web",
                "env:prod"
              ]
            }
          ],
          "links": {
            "actions": [
              {
                "id": 7515,
                "rel": "create",
                "href": "https://api.digitalocean.com/v2/actions/7515"
              },
              {
                "id": 7516,
                "rel": "create",
                "href": "https://api.digitalocean.com/v2/actions/7516"
              }
            ]
          }
        }
      },
      "droplet_single": {
        "value": {
          "droplet": {
            "id": 3164444,
            "name": "example.com",
            "memory": 1024,
            "vcpus": 1,
            "disk": 25,
            "locked": false,
            "status": "active",
            "kernel": null,
            "created_at": "2020-07-21T18:37:44Z",
            "features": [
              "backups",
              "private_networking",
              "ipv6"
            ],
            "backup_ids": [
              53893572
            ],
            "next_backup_window": {
              "start": "2020-07-30T00:00:00Z",
              "end": "2020-07-30T23:00:00Z"
            },
            "snapshot_ids": [
              67512819
            ],
            "image": {
              "id": 63663980,
              "name": "20.04 (LTS) x64",
              "distribution": "Ubuntu",
              "slug": "ubuntu-20-04-x64",
              "public": true,
              "regions": [
                "ams2",
                "ams3",
                "blr1",
                "fra1",
                "lon1",
                "nyc1",
                "nyc2",
                "nyc3",
                "sfo1",
                "sfo2",
                "sfo3",
                "sgp1",
                "tor1"
              ],
              "created_at": "2020-05-15T05:47:50Z",
              "type": "snapshot",
              "min_disk_size": 20,
              "size_gigabytes": 2.36,
              "description": "",
              "tags": [],
              "status": "available",
              "error_message": ""
            },
            "volume_ids": [],
            "size": {
              "slug": "s-1vcpu-1gb",
              "memory": 1024,
              "vcpus": 1,
              "disk": 25,
              "transfer": 1,
              "price_monthly": 5,
              "price_hourly": 0.00743999984115362,
              "regions": [
                "ams2",
                "ams3",
                "blr1",
                "fra1",
                "lon1",
                "nyc1",
                "nyc2",
                "nyc3",
                "sfo1",
                "sfo2",
                "sfo3",
                "sgp1",
                "tor1"
              ],
              "available": true,
              "description": "Basic"
            },
            "size_slug": "s-1vcpu-1gb",
            "networks": {
              "v4": [
                {
                  "ip_address": "10.128.192.124",
                  "netmask": "255.255.0.0",
                  "gateway": "nil",
                  "type": "private"
                },
                {
                  "ip_address": "192.241.165.154",
                  "netmask": "255.255.255.0",
                  "gateway": "192.241.165.1",
                  "type": "public"
                }
              ],
              "v6": [
                {
                  "ip_address": "2604:a880:0:1010::18a:a001",
                  "netmask": 64,
                  "gateway": "2604:a880:0:1010::1",
                  "type": "public"
                }
              ]
            },
            "region": {
              "name": "New York 3",
              "slug": "nyc3",
              "features": [
                "private_networking",
                "backups",
                "ipv6",
                "metadata",
                "install_agent",
                "storage",
                "image_transfer"
              ],
              "available": true,
              "sizes": [
                "s-1vcpu-1gb",
                "s-1vcpu-2gb",
                "s-1vcpu-3gb",
                "s-2vcpu-2gb",
                "s-3vcpu-1gb",
                "s-2vcpu-4gb",
                "s-4vcpu-8gb",
                "s-6vcpu-16gb",
                "s-8vcpu-32gb",
                "s-12vcpu-48gb",
                "s-16vcpu-64gb",
                "s-20vcpu-96gb",
                "s-24vcpu-128gb",
                "s-32vcpu-192g"
              ]
            },
            "tags": [
              "web",
              "env:prod"
            ],
            "vpc_uuid": "760e09ef-dc84-11e8-981e-3cfdfeaae000"
          }
        }
      },
      "floating_ip_assigning": {
        "summary": "Assigning to Droplet",
        "value": {
          "floating_ip": {
            "ip": "45.55.96.47",
            "droplet": null,
            "region": {
              "name": "New York 3",
              "slug": "nyc3",
              "features": [
                "private_networking",
                "backups",
                "ipv6",
                "metadata",
                "install_agent",
                "storage",
                "image_transfer"
              ],
              "available": true,
              "sizes": [
                "s-1vcpu-1gb",
                "s-1vcpu-2gb",
                "s-1vcpu-3gb",
                "s-2vcpu-2gb",
                "s-3vcpu-1gb",
                "s-2vcpu-4gb",
                "s-4vcpu-8gb",
                "s-6vcpu-16gb",
                "s-8vcpu-32gb",
                "s-12vcpu-48gb",
                "s-16vcpu-64gb",
                "s-20vcpu-96gb",
                "s-24vcpu-128gb",
                "s-32vcpu-192g"
              ]
            },
            "locked": true
          },
          "links": {
            "droplets": [
              {
                "id": 213939433,
                "rel": "droplet",
                "href": "https://api.digitalocean.com/v2/droplets/213939433"
              }
            ],
            "actions": [
              {
                "id": 1088924622,
                "rel": "assign_ip",
                "href": "https://api.digitalocean.com/v2/actions/1088924622"
              }
            ]
          }
        }
      },
      "floating_ip_reserving": {
        "summary": "Reserving to Region",
        "value": {
          "floating_ip": {
            "ip": "45.55.96.47",
            "droplet": null,
            "region": {
              "name": "New York 3",
              "slug": "nyc3",
              "features": [
                "private_networking",
                "backups",
                "ipv6",
                "metadata",
                "install_agent",
                "storage",
                "image_transfer"
              ],
              "available": true,
              "sizes": [
                "s-1vcpu-1gb",
                "s-1vcpu-2gb",
                "s-1vcpu-3gb",
                "s-2vcpu-2gb",
                "s-3vcpu-1gb",
                "s-2vcpu-4gb",
                "s-4vcpu-8gb",
                "s-6vcpu-16gb",
                "s-8vcpu-32gb",
                "s-12vcpu-48gb",
                "s-16vcpu-64gb",
                "s-20vcpu-96gb",
                "s-24vcpu-128gb",
                "s-32vcpu-192g"
              ]
            },
            "locked": false
          }
        }
      },
      "floating_ip_assigned": {
        "summary": "Assigned to Droplet",
        "value": {
          "floating_ip": {
            "ip": "45.55.96.47",
            "droplet": {
              "id": 3164444,
              "name": "example.com",
              "memory": 1024,
              "vcpus": 1,
              "disk": 25,
              "locked": false,
              "status": "active",
              "kernel": null,
              "created_at": "2020-07-21T18:37:44Z",
              "features": [
                "backups",
                "private_networking",
                "ipv6"
              ],
              "backup_ids": [
                53893572
              ],
              "next_backup_window": {
                "start": "2020-07-30T00:00:00Z",
                "end": "2020-07-30T23:00:00Z"
              },
              "snapshot_ids": [
                67512819
              ],
              "image": {
                "id": 63663980,
                "name": "20.04 (LTS) x64",
                "type": "base",
                "distribution": "Ubuntu",
                "slug": "ubuntu-20-04-x64",
                "public": true,
                "regions": [
                  "ams2",
                  "ams3",
                  "blr1",
                  "fra1",
                  "lon1",
                  "nyc1",
                  "nyc2",
                  "nyc3",
                  "sfo1",
                  "sfo2",
                  "sfo3",
                  "sgp1",
                  "tor1"
                ],
                "created_at": "2020-05-15T05:47:50Z",
                "min_disk_size": 20,
                "size_gigabytes": 2.36,
                "description": "",
                "tags": [],
                "status": "available",
                "error_message": ""
              },
              "volume_ids": [],
              "size": {
                "slug": "s-1vcpu-1gb",
                "memory": 1024,
                "vcpus": 1,
                "disk": 25,
                "transfer": 1,
                "price_monthly": 5,
                "price_hourly": 0.00743999984115362,
                "regions": [
                  "ams2",
                  "ams3",
                  "blr1",
                  "fra1",
                  "lon1",
                  "nyc1",
                  "nyc2",
                  "nyc3",
                  "sfo1",
                  "sfo2",
                  "sfo3",
                  "sgp1",
                  "tor1"
                ],
                "available": true,
                "description": "Basic"
              },
              "size_slug": "s-1vcpu-1gb",
              "networks": {
                "v4": [
                  {
                    "ip_address": "10.128.192.124",
                    "netmask": "255.255.0.0",
                    "gateway": "nil",
                    "type": "private"
                  },
                  {
                    "ip_address": "192.241.165.154",
                    "netmask": "255.255.255.0",
                    "gateway": "192.241.165.1",
                    "type": "public"
                  }
                ],
                "v6": [
                  {
                    "ip_address": "2604:a880:0:1010::18a:a001",
                    "netmask": 64,
                    "gateway": "2604:a880:0:1010::1",
                    "type": "public"
                  }
                ]
              },
              "region": {
                "name": "New York 3",
                "slug": "nyc3",
                "features": [
                  "backups",
                  "ipv6",
                  "metadata",
                  "install_agent",
                  "storage",
                  "image_transfer"
                ],
                "available": true,
                "sizes": [
                  "s-1vcpu-1gb",
                  "s-1vcpu-2gb",
                  "s-1vcpu-3gb",
                  "s-2vcpu-2gb",
                  "s-3vcpu-1gb",
                  "s-2vcpu-4gb",
                  "s-4vcpu-8gb",
                  "s-6vcpu-16gb",
                  "s-8vcpu-32gb",
                  "s-12vcpu-48gb",
                  "s-16vcpu-64gb",
                  "s-20vcpu-96gb",
                  "s-24vcpu-128gb",
                  "s-32vcpu-192g"
                ]
              },
              "tags": [
                "web",
                "env:prod"
              ],
              "vpc_uuid": "760e09ef-dc84-11e8-981e-3cfdfeaae000"
            },
            "region": {
              "name": "New York 3",
              "slug": "nyc3",
              "features": [
                "backups",
                "ipv6",
                "metadata",
                "install_agent",
                "storage",
                "image_transfer"
              ],
              "available": true,
              "sizes": [
                "s-1vcpu-1gb",
                "s-1vcpu-2gb",
                "s-1vcpu-3gb",
                "s-2vcpu-2gb",
                "s-3vcpu-1gb",
                "s-2vcpu-4gb",
                "s-4vcpu-8gb",
                "s-6vcpu-16gb",
                "s-8vcpu-32gb",
                "s-12vcpu-48gb",
                "s-16vcpu-64gb",
                "s-20vcpu-96gb",
                "s-24vcpu-128gb",
                "s-32vcpu-192g"
              ]
            },
            "locked": false
          }
        }
      },
      "floating_ip_reserved": {
        "summary": "Reserved to Region",
        "value": {
          "floating_ip": {
            "ip": "45.55.96.47",
            "droplet": null,
            "region": {
              "name": "New York 3",
              "slug": "nyc3",
              "features": [
                "private_networking",
                "backups",
                "ipv6",
                "metadata",
                "install_agent",
                "storage",
                "image_transfer"
              ],
              "available": true,
              "sizes": [
                "s-1vcpu-1gb",
                "s-1vcpu-2gb",
                "s-1vcpu-3gb",
                "s-2vcpu-2gb",
                "s-3vcpu-1gb",
                "s-2vcpu-4gb",
                "s-4vcpu-8gb",
                "s-6vcpu-16gb",
                "s-8vcpu-32gb",
                "s-12vcpu-48gb",
                "s-16vcpu-64gb",
                "s-20vcpu-96gb",
                "s-24vcpu-128gb",
                "s-32vcpu-192g"
              ]
            },
            "locked": false
          }
        }
      },
      "images_all": {
        "value": {
          "images": [
            {
              "id": 7555620,
              "name": "Nifty New Snapshot",
              "distribution": "Ubuntu",
              "slug": null,
              "public": false,
              "regions": [
                "nyc2",
                "nyc3"
              ],
              "created_at": "2014-11-04T22:23:02Z",
              "type": "snapshot",
              "min_disk_size": 20,
              "size_gigabytes": 2.34,
              "description": "",
              "tags": [],
              "status": "available",
              "error_message": ""
            },
            {
              "id": 7555621,
              "name": "Another Snapshot",
              "distribution": "Ubuntu",
              "slug": null,
              "public": false,
              "regions": [
                "nyc2"
              ],
              "created_at": "2014-11-04T22:23:02Z",
              "type": "snapshot",
              "min_disk_size": 20,
              "size_gigabytes": 2.34,
              "description": "",
              "tags": [],
              "status": "available",
              "error_message": ""
            },
            {
              "id": 63663980,
              "name": "20.04 (LTS) x64",
              "distribution": "Ubuntu",
              "slug": "ubuntu-20-04-x64",
              "public": true,
              "regions": [
                "nyc2",
                "nyc3"
              ],
              "created_at": "2020-05-15T05:47:50Z",
              "type": "snapshot",
              "min_disk_size": 20,
              "size_gigabytes": 2.36,
              "description": "",
              "tags": [],
              "status": "available",
              "error_message": ""
            },
            {
              "id": 7555621,
              "name": "A custom image",
              "distribution": "Arch Linux",
              "slug": null,
              "public": false,
              "regions": [
                "nyc3"
              ],
              "created_at": "2014-11-04T22:23:02Z",
              "type": "custom",
              "min_disk_size": 20,
              "size_gigabytes": 2.34,
              "description": "",
              "tags": [],
              "status": "available",
              "error_message": ""
            },
            {
              "id": 7555621,
              "name": "An APP image",
              "distribution": "Fedora",
              "slug": null,
              "public": false,
              "regions": [
                "nyc2",
                "nyc3"
              ],
              "created_at": "2014-11-04T22:23:02Z",
              "type": "snapshot",
              "min_disk_size": 20,
              "size_gigabytes": 2.34,
              "description": "",
              "tags": [],
              "status": "available",
              "error_message": ""
            },
            {
              "id": 7555621,
              "name": "A simple tagged image",
              "distribution": "CentOS",
              "slug": null,
              "public": false,
              "regions": [
                "nyc2",
                "nyc3"
              ],
              "created_at": "2014-11-04T22:23:02Z",
              "type": "snapshot",
              "min_disk_size": 20,
              "size_gigabytes": 2.34,
              "description": "",
              "tags": [
                "simple-image"
              ],
              "status": "available",
              "error_message": ""
            }
          ],
          "meta": {
            "total": 6
          }
        }
      },
      "images_snapshots": {
        "value": {
          "images": [
            {
              "id": 7555620,
              "name": "Nifty New Snapshot",
              "distribution": "Ubuntu",
              "slug": null,
              "public": false,
              "regions": [
                "nyc2",
                "nyc3"
              ],
              "created_at": "2014-11-04T22:23:02Z",
              "type": "snapshot",
              "min_disk_size": 20,
              "size_gigabytes": 2.34,
              "description": "",
              "tags": [],
              "status": "available",
              "error_message": ""
            },
            {
              "id": 7555621,
              "name": "Another Snapshot",
              "distribution": "Ubuntu",
              "slug": null,
              "public": false,
              "regions": [
                "nyc2"
              ],
              "created_at": "2014-11-04T22:23:02Z",
              "type": "snapshot",
              "min_disk_size": 20,
              "size_gigabytes": 2.34,
              "description": "",
              "tags": [],
              "status": "available",
              "error_message": ""
            }
          ],
          "meta": {
            "total": 2
          }
        }
      },
      "images_distribution": {
        "description": "**Important:**\nThe `type` query parameter is not directly related to the `type` attribute.\nThe main thing to remember here is that DigitalOcean-produced distribution images will have `snapshot` as the type attribute.\n",
        "value": {
          "images": [
            {
              "id": 63663980,
              "name": "20.04 (LTS) x64",
              "distribution": "Ubuntu",
              "slug": "ubuntu-20-04-x64",
              "public": true,
              "regions": [
                "nyc2",
                "nyc3"
              ],
              "created_at": "2020-05-15T05:47:50Z",
              "type": "snapshot",
              "min_disk_size": 20,
              "size_gigabytes": 2.36,
              "description": "",
              "tags": [],
              "status": "available",
              "error_message": ""
            }
          ],
          "meta": {
            "total": 1
          }
        }
      },
      "images_custom": {
        "value": {
          "images": [
            {
              "id": 7555621,
              "name": "A custom image",
              "distribution": "Arch Linux",
              "slug": null,
              "public": false,
              "regions": [
                "nyc3"
              ],
              "created_at": "2014-11-04T22:23:02Z",
              "type": "custom",
              "min_disk_size": 20,
              "size_gigabytes": 2.34,
              "description": "",
              "tags": [],
              "status": "available",
              "error_message": ""
            }
          ],
          "meta": {
            "total": 1
          }
        }
      },
      "images_application": {
        "description": "**Important:**\nThe `type` query parameter is not directly related to the `type` attribute.\n",
        "value": {
          "images": [
            {
              "id": 7555621,
              "name": "An APP image",
              "distribution": "Fedora",
              "slug": null,
              "public": false,
              "regions": [
                "nyc2",
                "nyc3"
              ],
              "created_at": "2014-11-04T22:23:02Z",
              "type": "snapshot",
              "min_disk_size": 20,
              "size_gigabytes": 2.34,
              "description": "",
              "tags": [],
              "status": "available",
              "error_message": ""
            }
          ],
          "meta": {
            "total": 1
          }
        }
      },
      "images_tagged": {
        "value": {
          "images": [
            {
              "id": 7555621,
              "name": "A simple tagged image",
              "distribution": "CentOS",
              "slug": null,
              "public": false,
              "regions": [
                "nyc2",
                "nyc3"
              ],
              "created_at": "2014-11-04T22:23:02Z",
              "type": "snapshot",
              "min_disk_size": 20,
              "size_gigabytes": 2.34,
              "description": "",
              "tags": [
                "simple-image"
              ],
              "status": "available",
              "error_message": ""
            }
          ],
          "meta": {
            "total": 1
          }
        }
      },
      "kubernetes_clusters_all": {
        "value": {
          "kubernetes_clusters": [
            {
              "id": "bd5f5959-5e1e-4205-a714-a914373942af",
              "name": "prod-cluster-01",
              "region": "nyc1",
              "version": "1.18.6-do.0",
              "cluster_subnet": "10.244.0.0/16",
              "service_subnet": "10.245.0.0/16",
              "vpc_uuid": "c33931f2-a26a-4e61-b85c-4e95a2ec431b",
              "ipv4": "68.183.121.157",
              "endpoint": "https://bd5f5959-5e1e-4205-a714-a914373942af.k8s.ondigitalocean.com",
              "tags": [
                "production",
                "web-team",
                "k8s",
                "k8s:bd5f5959-5e1e-4205-a714-a914373942af"
              ],
              "node_pools": [
                {
                  "id": "cdda885e-7663-40c8-bc74-3a036c66545d",
                  "name": "frontend-pool",
                  "size": "s-1vcpu-2gb",
                  "count": 3,
                  "tags": [
                    "production",
                    "web-team",
                    "k8s",
                    "k8s:bd5f5959-5e1e-4205-a714-a914373942af",
                    "k8s:worker"
                  ],
                  "labels": null,
                  "taints": [],
                  "auto_scale": false,
                  "min_nodes": 0,
                  "max_nodes": 0,
                  "nodes": [
                    {
                      "id": "478247f8-b1bb-4f7a-8db9-2a5f8d4b8f8f",
                      "name": "adoring-newton-3niq",
                      "status": {
                        "state": "provisioning"
                      },
                      "droplet_id": "205545370",
                      "created_at": "2018-11-15T16:00:11Z",
                      "updated_at": "2018-11-15T16:00:11Z"
                    },
                    {
                      "id": "ad12e744-c2a9-473d-8aa9-be5680500eb1",
                      "name": "adoring-newton-3nim",
                      "status": {
                        "state": "provisioning"
                      },
                      "droplet_id": "205545371",
                      "created_at": "2018-11-15T16:00:11Z",
                      "updated_at": "2018-11-15T16:00:11Z"
                    },
                    {
                      "id": "e46e8d07-f58f-4ff1-9737-97246364400e",
                      "name": "adoring-newton-3ni7",
                      "status": {
                        "state": "provisioning"
                      },
                      "droplet_id": "205545372",
                      "created_at": "2018-11-15T16:00:11Z",
                      "updated_at": "2018-11-15T16:00:11Z"
                    }
                  ]
                },
                {
                  "id": "f49f4379-7e7f-4af5-aeb6-0354bd840778",
                  "name": "backend-pool",
                  "size": "g-4vcpu-16gb",
                  "count": 2,
                  "tags": [
                    "production",
                    "web-team",
                    "k8s",
                    "k8s:bd5f5959-5e1e-4205-a714-a914373942af",
                    "k8s:worker"
                  ],
                  "labels": {
                    "service": "backend",
                    "priority": "high"
                  },
                  "taints": [],
                  "auto_scale": true,
                  "min_nodes": 2,
                  "max_nodes": 5,
                  "nodes": [
                    {
                      "id": "3385619f-8ec3-42ba-bb23-8d21b8ba7518",
                      "name": "affectionate-nightingale-3nif",
                      "status": {
                        "state": "provisioning"
                      },
                      "droplet_id": "205545373",
                      "created_at": "2018-11-15T16:00:11Z",
                      "updated_at": "2018-11-15T16:00:11Z"
                    },
                    {
                      "id": "4b8f60ff-ba06-4523-a6a4-b8148244c7e6",
                      "name": "affectionate-nightingale-3niy",
                      "status": {
                        "state": "provisioning"
                      },
                      "droplet_id": "205545374",
                      "created_at": "2018-11-15T16:00:11Z",
                      "updated_at": "2018-11-15T16:00:11Z"
                    }
                  ]
                }
              ],
              "maintenance_policy": {
                "start_time": "00:00",
                "duration": "4h0m0s",
                "day": "any"
              },
              "auto_upgrade": false,
              "status": {
                "state": "provisioning",
                "message": "provisioning"
              },
              "created_at": "2018-11-15T16:00:11Z",
              "updated_at": "2018-11-15T16:00:11Z",
              "surge_upgrade": false,
              "registry_enabled": false,
              "ha": false
            }
          ],
          "meta": {
            "total": 1
          }
        }
      },
      "kubernetes_clusters_basic_request": {
        "value": {
          "name": "prod-cluster-01",
          "region": "nyc1",
          "version": "1.18.6-do.0",
          "node_pools": [
            {
              "size": "s-1vcpu-2gb",
              "count": 3,
              "name": "worker-pool"
            }
          ]
        }
      },
      "kubernetes_clusters_multi_pool_request": {
        "description": "This example request creates a Kubernetes cluster with two node pools. It\nalso demonstrates setting tags, labels, auto scaling, and a maintenance\npolicy.\n",
        "value": {
          "name": "prod-cluster-01",
          "region": "nyc1",
          "version": "1.18.6-do.0",
          "tags": [
            "production",
            "web-team"
          ],
          "node_pools": [
            {
              "size": "s-1vcpu-2gb",
              "count": 3,
              "name": "frontend-pool",
              "tags": [
                "frontend"
              ]
            },
            {
              "size": "g-4vcpu-16gb",
              "count": 2,
              "name": "backend-pool",
              "labels": {
                "service": "backend",
                "priority": "high"
              },
              "auto_scale": true,
              "min_nodes": 2,
              "max_nodes": 5
            }
          ],
          "maintenance_policy": {
            "start_time": "12:00",
            "day": "any"
          }
        }
      },
      "kubernetes_clusters_create_basic_response": {
        "value": {
          "kubernetes_cluster": {
            "id": "bd5f5959-5e1e-4205-a714-a914373942af",
            "name": "prod-cluster-01",
            "region": "nyc1",
            "version": "1.18.6-do.0",
            "cluster_subnet": "10.244.0.0/16",
            "service_subnet": "10.245.0.0/16",
            "vpc_uuid": "c33931f2-a26a-4e61-b85c-4e95a2ec431b",
            "ipv4": "",
            "endpoint": "",
            "tags": [
              "k8s",
              "k8s:bd5f5959-5e1e-4205-a714-a914373942af"
            ],
            "node_pools": [
              {
                "id": "cdda885e-7663-40c8-bc74-3a036c66545d",
                "name": "worker-pool",
                "size": "s-1vcpu-2gb",
                "count": 3,
                "tags": [
                  "k8s",
                  "k8s:bd5f5959-5e1e-4205-a714-a914373942af",
                  "k8s:worker"
                ],
                "labels": null,
                "taints": [],
                "auto_scale": false,
                "min_nodes": 0,
                "max_nodes": 0,
                "nodes": [
                  {
                    "id": "478247f8-b1bb-4f7a-8db9-2a5f8d4b8f8f",
                    "name": "",
                    "status": {
                      "state": "provisioning"
                    },
                    "droplet_id": "",
                    "created_at": "2018-11-15T16:00:11Z",
                    "updated_at": "2018-11-15T16:00:11Z"
                  },
                  {
                    "id": "ad12e744-c2a9-473d-8aa9-be5680500eb1",
                    "name": "",
                    "status": {
                      "state": "provisioning"
                    },
                    "droplet_id": "",
                    "created_at": "2018-11-15T16:00:11Z",
                    "updated_at": "2018-11-15T16:00:11Z"
                  },
                  {
                    "id": "e46e8d07-f58f-4ff1-9737-97246364400e",
                    "name": "",
                    "status": {
                      "state": "provisioning"
                    },
                    "droplet_id": "",
                    "created_at": "2018-11-15T16:00:11Z",
                    "updated_at": "2018-11-15T16:00:11Z"
                  }
                ]
              }
            ],
            "maintenance_policy": {
              "start_time": "00:00",
              "duration": "4h0m0s",
              "day": "any"
            },
            "auto_upgrade": false,
            "status": {
              "state": "provisioning",
              "message": "provisioning"
            },
            "created_at": "2018-11-15T16:00:11Z",
            "updated_at": "2018-11-15T16:00:11Z",
            "surge_upgrade": false,
            "registry_enabled": false,
            "ha": false
          }
        }
      },
      "kubernetes_clusters_multi_pool_response": {
        "value": {
          "kubernetes_clusters": {
            "id": "bd5f5959-5e1e-4205-a714-a914373942af",
            "name": "prod-cluster-01",
            "region": "nyc1",
            "version": "1.18.6-do.0",
            "cluster_subnet": "10.244.0.0/16",
            "service_subnet": "10.245.0.0/16",
            "vpc_uuid": "c33931f2-a26a-4e61-b85c-4e95a2ec431b",
            "ipv4": "",
            "endpoint": "",
            "tags": [
              "production",
              "web-team",
              "k8s",
              "k8s:bd5f5959-5e1e-4205-a714-a914373942af"
            ],
            "node_pools": [
              {
                "id": "cdda885e-7663-40c8-bc74-3a036c66545d",
                "name": "frontend-pool",
                "size": "s-1vcpu-2gb",
                "count": 3,
                "tags": [
                  "production",
                  "web-team",
                  "frontend",
                  "k8s",
                  "k8s:bd5f5959-5e1e-4205-a714-a914373942af",
                  "k8s:worker"
                ],
                "labels": null,
                "taints": [],
                "auto_scale": false,
                "min_nodes": 0,
                "max_nodes": 0,
                "nodes": [
                  {
                    "id": "478247f8-b1bb-4f7a-8db9-2a5f8d4b8f8f",
                    "name": "",
                    "status": {
                      "state": "provisioning"
                    },
                    "droplet_id": "",
                    "created_at": "2018-11-15T16:00:11Z",
                    "updated_at": "2018-11-15T16:00:11Z"
                  },
                  {
                    "id": "ad12e744-c2a9-473d-8aa9-be5680500eb1",
                    "name": "",
                    "status": {
                      "state": "provisioning"
                    },
                    "droplet_id": "",
                    "created_at": "2018-11-15T16:00:11Z",
                    "updated_at": "2018-11-15T16:00:11Z"
                  },
                  {
                    "id": "e46e8d07-f58f-4ff1-9737-97246364400e",
                    "name": "",
                    "status": {
                      "state": "provisioning"
                    },
                    "droplet_id": "",
                    "created_at": "2018-11-15T16:00:11Z",
                    "updated_at": "2018-11-15T16:00:11Z"
                  }
                ]
              },
              {
                "id": "f49f4379-7e7f-4af5-aeb6-0354bd840778",
                "name": "backend-pool",
                "size": "g-4vcpu-16gb",
                "count": 2,
                "tags": [
                  "production",
                  "web-team",
                  "k8s",
                  "k8s:bd5f5959-5e1e-4205-a714-a914373942af",
                  "k8s:worker"
                ],
                "labels": {
                  "service": "backend",
                  "priority": "high"
                },
                "taints": [],
                "auto_scale": true,
                "min_nodes": 2,
                "max_nodes": 5,
                "nodes": [
                  {
                    "id": "3385619f-8ec3-42ba-bb23-8d21b8ba7518",
                    "name": "",
                    "status": {
                      "state": "provisioning"
                    },
                    "droplet_id": "",
                    "created_at": "2018-11-15T16:00:11Z",
                    "updated_at": "2018-11-15T16:00:11Z"
                  },
                  {
                    "id": "4b8f60ff-ba06-4523-a6a4-b8148244c7e6",
                    "name": "",
                    "status": {
                      "state": "provisioning"
                    },
                    "droplet_id": "",
                    "created_at": "2018-11-15T16:00:11Z",
                    "updated_at": "2018-11-15T16:00:11Z"
                  }
                ]
              }
            ],
            "maintenance_policy": {
              "start_time": "12:00",
              "duration": "4h0m0s",
              "day": "any"
            },
            "auto_upgrade": false,
            "status": {
              "state": "provisioning",
              "message": "provisioning"
            },
            "created_at": "2018-11-15T16:00:11Z",
            "updated_at": "2018-11-15T16:00:11Z",
            "surge_upgrade": false,
            "registry_enabled": false,
            "ha": false
          }
        }
      },
      "kubernetes_single": {
        "value": {
          "kubernetes_cluster": {
            "id": "bd5f5959-5e1e-4205-a714-a914373942af",
            "name": "prod-cluster-01",
            "region": "nyc1",
            "version": "1.18.6-do.0",
            "cluster_subnet": "10.244.0.0/16",
            "service_subnet": "10.245.0.0/16",
            "vpc_uuid": "c33931f2-a26a-4e61-b85c-4e95a2ec431b",
            "ipv4": "68.183.121.157",
            "endpoint": "https://bd5f5959-5e1e-4205-a714-a914373942af.k8s.ondigitalocean.com",
            "tags": [
              "production",
              "web-team",
              "k8s",
              "k8s:bd5f5959-5e1e-4205-a714-a914373942af"
            ],
            "node_pools": [
              {
                "id": "cdda885e-7663-40c8-bc74-3a036c66545d",
                "name": "frontend-pool",
                "size": "s-1vcpu-2gb",
                "count": 3,
                "tags": [
                  "production",
                  "web-team",
                  "k8s",
                  "k8s:bd5f5959-5e1e-4205-a714-a914373942af",
                  "k8s:worker"
                ],
                "labels": null,
                "taints": [],
                "auto_scale": false,
                "min_nodes": 0,
                "max_nodes": 0,
                "nodes": [
                  {
                    "id": "478247f8-b1bb-4f7a-8db9-2a5f8d4b8f8f",
                    "name": "adoring-newton-3niq",
                    "status": {
                      "state": "running"
                    },
                    "droplet_id": "205545370",
                    "created_at": "2018-11-15T16:00:11Z",
                    "updated_at": "2018-11-15T16:00:11Z"
                  },
                  {
                    "id": "ad12e744-c2a9-473d-8aa9-be5680500eb1",
                    "name": "adoring-newton-3nim",
                    "status": {
                      "state": "running"
                    },
                    "droplet_id": "205545371",
                    "created_at": "2018-11-15T16:00:11Z",
                    "updated_at": "2018-11-15T16:00:11Z"
                  },
                  {
                    "id": "e46e8d07-f58f-4ff1-9737-97246364400e",
                    "name": "adoring-newton-3ni7",
                    "status": {
                      "state": "running"
                    },
                    "droplet_id": "205545372",
                    "created_at": "2018-11-15T16:00:11Z",
                    "updated_at": "2018-11-15T16:00:11Z"
                  }
                ]
              },
              {
                "id": "f49f4379-7e7f-4af5-aeb6-0354bd840778",
                "name": "backend-pool",
                "size": "g-4vcpu-16gb",
                "count": 2,
                "tags": [
                  "production",
                  "web-team",
                  "k8s",
                  "k8s:bd5f5959-5e1e-4205-a714-a914373942af",
                  "k8s:worker"
                ],
                "labels": {
                  "service": "backend",
                  "priority": "high"
                },
                "taints": [],
                "auto_scale": true,
                "min_nodes": 2,
                "max_nodes": 5,
                "nodes": [
                  {
                    "id": "3385619f-8ec3-42ba-bb23-8d21b8ba7518",
                    "name": "affectionate-nightingale-3nif",
                    "status": {
                      "state": "running"
                    },
                    "droplet_id": "205545373",
                    "created_at": "2018-11-15T16:00:11Z",
                    "updated_at": "2018-11-15T16:00:11Z"
                  },
                  {
                    "id": "4b8f60ff-ba06-4523-a6a4-b8148244c7e6",
                    "name": "affectionate-nightingale-3niy",
                    "status": {
                      "state": "running"
                    },
                    "droplet_id": "205545374",
                    "created_at": "2018-11-15T16:00:11Z",
                    "updated_at": "2018-11-15T16:00:11Z"
                  }
                ]
              }
            ],
            "maintenance_policy": {
              "start_time": "00:00",
              "duration": "4h0m0s",
              "day": "any"
            },
            "auto_upgrade": false,
            "status": {
              "state": "running"
            },
            "created_at": "2018-11-15T16:00:11Z",
            "updated_at": "2018-11-15T16:00:11Z",
            "surge_upgrade": false,
            "registry_enabled": false,
            "ha": false
          }
        }
      },
      "kubernetes_updated": {
        "value": {
          "kubernetes_cluster": {
            "id": "bd5f5959-5e1e-4205-a714-a914373942af",
            "name": "prod-cluster-01",
            "region": "nyc1",
            "version": "1.18.6-do.0",
            "cluster_subnet": "10.244.0.0/16",
            "service_subnet": "10.245.0.0/16",
            "vpc_uuid": "c33931f2-a26a-4e61-b85c-4e95a2ec431b",
            "ipv4": "68.183.121.157",
            "endpoint": "https://bd5f5959-5e1e-4205-a714-a914373942af.k8s.ondigitalocean.com",
            "tags": [
              "production",
              "web-team",
              "k8s",
              "k8s:bd5f5959-5e1e-4205-a714-a914373942af"
            ],
            "node_pools": [
              {
                "id": "cdda885e-7663-40c8-bc74-3a036c66545d",
                "name": "frontend-pool",
                "size": "s-1vcpu-2gb",
                "count": 3,
                "tags": [
                  "production",
                  "web-team",
                  "k8s",
                  "k8s:bd5f5959-5e1e-4205-a714-a914373942af",
                  "k8s:worker"
                ],
                "labels": null,
                "taints": [],
                "auto_scale": false,
                "min_nodes": 0,
                "max_nodes": 0,
                "nodes": [
                  {
                    "id": "478247f8-b1bb-4f7a-8db9-2a5f8d4b8f8f",
                    "name": "adoring-newton-3niq",
                    "status": {
                      "state": "running"
                    },
                    "droplet_id": "205545370",
                    "created_at": "2018-11-15T16:00:11Z",
                    "updated_at": "2018-11-15T16:00:11Z"
                  },
                  {
                    "id": "ad12e744-c2a9-473d-8aa9-be5680500eb1",
                    "name": "adoring-newton-3nim",
                    "status": {
                      "state": "running"
                    },
                    "droplet_id": "205545371",
                    "created_at": "2018-11-15T16:00:11Z",
                    "updated_at": "2018-11-15T16:00:11Z"
                  },
                  {
                    "id": "e46e8d07-f58f-4ff1-9737-97246364400e",
                    "name": "adoring-newton-3ni7",
                    "status": {
                      "state": "running"
                    },
                    "droplet_id": "205545372",
                    "created_at": "2018-11-15T16:00:11Z",
                    "updated_at": "2018-11-15T16:00:11Z"
                  }
                ]
              },
              {
                "id": "f49f4379-7e7f-4af5-aeb6-0354bd840778",
                "name": "backend-pool",
                "size": "g-4vcpu-16gb",
                "count": 2,
                "tags": [
                  "production",
                  "web-team",
                  "k8s",
                  "k8s:bd5f5959-5e1e-4205-a714-a914373942af",
                  "k8s:worker"
                ],
                "labels": {
                  "service": "backend",
                  "priority": "high"
                },
                "taints": [],
                "auto_scale": true,
                "min_nodes": 2,
                "max_nodes": 5,
                "nodes": [
                  {
                    "id": "3385619f-8ec3-42ba-bb23-8d21b8ba7518",
                    "name": "affectionate-nightingale-3nif",
                    "status": {
                      "state": "running"
                    },
                    "droplet_id": "205545373",
                    "created_at": "2018-11-15T16:00:11Z",
                    "updated_at": "2018-11-15T16:00:11Z"
                  },
                  {
                    "id": "4b8f60ff-ba06-4523-a6a4-b8148244c7e6",
                    "name": "affectionate-nightingale-3niy",
                    "status": {
                      "state": "running"
                    },
                    "droplet_id": "205545374",
                    "created_at": "2018-11-15T16:00:11Z",
                    "updated_at": "2018-11-15T16:00:11Z"
                  }
                ]
              }
            ],
            "maintenance_policy": {
              "start_time": "00:00",
              "duration": "4h0m0s",
              "day": "any"
            },
            "auto_upgrade": true,
            "status": {
              "state": "running"
            },
            "created_at": "2018-11-15T16:00:11Z",
            "updated_at": "2018-11-15T16:00:11Z",
            "surge_upgrade": true,
            "registry_enabled": false,
            "ha": false
          }
        }
      },
      "kubernetes_options": {
        "value": {
          "options": {
            "regions": [
              {
                "name": "New York 1",
                "slug": "nyc1"
              },
              {
                "name": "Singapore 1",
                "slug": "sgp1"
              },
              {
                "name": "London 1",
                "slug": "lon1"
              },
              {
                "name": "New York 3",
                "slug": "nyc3"
              },
              {
                "name": "Amsterdam 3",
                "slug": "ams3"
              },
              {
                "name": "Frankfurt 1",
                "slug": "fra1"
              },
              {
                "name": "Toronto 1",
                "slug": "tor1"
              },
              {
                "name": "San Francisco 2",
                "slug": "sfo2"
              },
              {
                "name": "Bangalore 1",
                "slug": "blr1"
              },
              {
                "name": "San Francisco 3",
                "slug": "sfo3"
              }
            ],
            "versions": [
              {
                "slug": "1.18.8-do.0",
                "kubernetes_version": "1.18.8",
                "supported_features": [
                  "cluster-autoscaler",
                  "docr-integration",
                  "token-authentication"
                ]
              },
              {
                "slug": "1.17.11-do.0",
                "kubernetes_version": "1.17.11",
                "supported_features": [
                  "cluster-autoscaler",
                  "docr-integration",
                  "token-authentication"
                ]
              },
              {
                "slug": "1.16.14-do.0",
                "kubernetes_version": "1.16.14",
                "supported_features": [
                  "cluster-autoscaler",
                  "docr-integration",
                  "token-authentication"
                ]
              }
            ],
            "sizes": [
              {
                "name": "s-1vcpu-2gb",
                "slug": "s-1vcpu-2gb"
              },
              {
                "name": "s-2vcpu-2gb",
                "slug": "s-2vcpu-2gb"
              },
              {
                "name": "s-1vcpu-3gb",
                "slug": "s-1vcpu-3gb"
              },
              {
                "name": "s-2vcpu-4gb",
                "slug": "s-2vcpu-4gb"
              },
              {
                "name": "s-4vcpu-8gb",
                "slug": "s-4vcpu-8gb"
              },
              {
                "name": "c-2-4GiB",
                "slug": "c-2"
              },
              {
                "name": "g-2vcpu-8gb",
                "slug": "g-2vcpu-8gb"
              },
              {
                "name": "gd-2vcpu-8gb",
                "slug": "gd-2vcpu-8gb"
              },
              {
                "name": "s-8vcpu-16gb",
                "slug": "s-8vcpu-16gb"
              },
              {
                "name": "s-6vcpu-16gb",
                "slug": "s-6vcpu-16gb"
              },
              {
                "name": "c-4-8GiB",
                "slug": "c-4"
              },
              {
                "name": "m-2vcpu-16gb",
                "slug": "m-2vcpu-16gb"
              },
              {
                "name": "m3-2vcpu-16gb",
                "slug": "m3-2vcpu-16gb"
              },
              {
                "name": "g-4vcpu-16gb",
                "slug": "g-4vcpu-16gb"
              },
              {
                "name": "gd-4vcpu-16gb",
                "slug": "gd-4vcpu-16gb"
              },
              {
                "name": "m6-2vcpu-16gb",
                "slug": "m6-2vcpu-16gb"
              },
              {
                "name": "s-8vcpu-32gb",
                "slug": "s-8vcpu-32gb"
              },
              {
                "name": "c-8-16GiB",
                "slug": "c-8"
              },
              {
                "name": "m-4vcpu-32gb",
                "slug": "m-4vcpu-32gb"
              },
              {
                "name": "m3-4vcpu-32gb",
                "slug": "m3-4vcpu-32gb"
              },
              {
                "name": "g-8vcpu-32gb",
                "slug": "g-8vcpu-32gb"
              },
              {
                "name": "s-12vcpu-48gb",
                "slug": "s-12vcpu-48gb"
              },
              {
                "name": "gd-8vcpu-32gb",
                "slug": "gd-8vcpu-32gb"
              },
              {
                "name": "m6-4vcpu-32gb",
                "slug": "m6-4vcpu-32gb"
              },
              {
                "name": "s-16vcpu-64gb",
                "slug": "s-16vcpu-64gb"
              },
              {
                "name": "c-16",
                "slug": "c-16"
              },
              {
                "name": "m-8vcpu-64gb",
                "slug": "m-8vcpu-64gb"
              },
              {
                "name": "m3-8vcpu-64gb",
                "slug": "m3-8vcpu-64gb"
              },
              {
                "name": "g-16vcpu-64gb",
                "slug": "g-16vcpu-64gb"
              },
              {
                "name": "s-20vcpu-96gb",
                "slug": "s-20vcpu-96gb"
              },
              {
                "name": "gd-16vcpu-64gb",
                "slug": "gd-16vcpu-64gb"
              },
              {
                "name": "m6-8vcpu-64gb",
                "slug": "m6-8vcpu-64gb"
              },
              {
                "name": "s-24vcpu-128gb",
                "slug": "s-24vcpu-128gb"
              },
              {
                "name": "c-32-64GiB",
                "slug": "c-32"
              },
              {
                "name": "m-16vcpu-128gb",
                "slug": "m-16vcpu-128gb"
              },
              {
                "name": "m3-16vcpu-128gb",
                "slug": "m3-16vcpu-128gb"
              },
              {
                "name": "g-32vcpu-128gb",
                "slug": "g-32vcpu-128gb"
              },
              {
                "name": "s-32vcpu-192gb",
                "slug": "s-32vcpu-192gb"
              },
              {
                "name": "gd-32vcpu-128gb",
                "slug": "gd-32vcpu-128gb"
              },
              {
                "name": "m-24vcpu-192gb",
                "slug": "m-24vcpu-192gb"
              },
              {
                "name": "m6-16vcpu-128gb",
                "slug": "m6-16vcpu-128gb"
              },
              {
                "name": "g-40vcpu-160gb",
                "slug": "g-40vcpu-160gb"
              },
              {
                "name": "gd-40vcpu-160gb",
                "slug": "gd-40vcpu-160gb"
              },
              {
                "name": "m3-24vcpu-192gb",
                "slug": "m3-24vcpu-192gb"
              },
              {
                "name": "m-32vcpu-256gb",
                "slug": "m-32vcpu-256gb"
              },
              {
                "name": "m6-24vcpu-192gb",
                "slug": "m6-24vcpu-192gb"
              },
              {
                "name": "m3-32vcpu-256gb",
                "slug": "m3-32vcpu-256gb"
              },
              {
                "name": "m6-32vcpu-256gb",
                "slug": "m6-32vcpu-256gb"
              }
            ]
          }
        }
      },
      "load_balancers_all": {
        "value": {
          "load_balancers": [
            {
              "id": "4de7ac8b-495b-4884-9a69-1050c6793cd6",
              "name": "example-lb-01",
              "ip": "104.131.186.241",
              "size": "lb-small",
              "algorithm": "round_robin",
              "status": "new",
              "created_at": "2017-02-01T22:22:58Z",
              "forwarding_rules": [
                {
                  "entry_protocol": "http",
                  "entry_port": 80,
                  "target_protocol": "http",
                  "target_port": 80,
                  "certificate_id": "",
                  "tls_passthrough": false
                },
                {
                  "entry_protocol": "https",
                  "entry_port": 443,
                  "target_protocol": "https",
                  "target_port": 443,
                  "certificate_id": "",
                  "tls_passthrough": true
                }
              ],
              "health_check": {
                "protocol": "http",
                "port": 80,
                "path": "/",
                "check_interval_seconds": 10,
                "response_timeout_seconds": 5,
                "healthy_threshold": 5,
                "unhealthy_threshold": 3
              },
              "sticky_sessions": {
                "type": "none"
              },
              "region": {
                "name": "New York 3",
                "slug": "nyc3",
                "sizes": [
                  "s-1vcpu-1gb",
                  "s-1vcpu-2gb",
                  "s-1vcpu-3gb",
                  "s-2vcpu-2gb",
                  "s-3vcpu-1gb",
                  "s-2vcpu-4gb",
                  "s-4vcpu-8gb",
                  "s-6vcpu-16gb",
                  "s-8vcpu-32gb",
                  "s-12vcpu-48gb",
                  "s-16vcpu-64gb",
                  "s-20vcpu-96gb",
                  "s-24vcpu-128gb",
                  "s-32vcpu-192gb"
                ],
                "features": [
                  "private_networking",
                  "backups",
                  "ipv6",
                  "metadata",
                  "install_agent"
                ],
                "available": true
              },
              "tag": "",
              "droplet_ids": [
                3164444,
                3164445
              ],
              "redirect_http_to_https": false,
              "enable_proxy_protocol": false,
              "enable_backend_keepalive": false,
              "vpc_uuid": "c33931f2-a26a-4e61-b85c-4e95a2ec431b",
              "disable_lets_encrypt_dns_records": false
            },
            {
              "id": "56775c3f-04ab-4fb3-a7ed-40ef9bc8eece",
              "name": "prod-web-lb-01",
              "ip": "45.55.125.24",
              "size": "lb-small",
              "algorithm": "round_robin",
              "status": "active",
              "created_at": "2020-09-08T18:58:04Z",
              "forwarding_rules": [
                {
                  "entry_protocol": "https",
                  "entry_port": 443,
                  "target_protocol": "http",
                  "target_port": 8080,
                  "certificate_id": "892071a0-bb95-49bc-8021-3afd67a210bf",
                  "tls_passthrough": false
                }
              ],
              "health_check": {
                "protocol": "https",
                "port": 443,
                "path": "/",
                "check_interval_seconds": 10,
                "response_timeout_seconds": 5,
                "healthy_threshold": 5,
                "unhealthy_threshold": 3
              },
              "sticky_sessions": {
                "type": "cookies",
                "cookie_name": "DO-LB",
                "cookie_ttl_seconds": 300
              },
              "region": {
                "name": "New York 3",
                "slug": "nyc3",
                "sizes": [
                  "s-1vcpu-1gb",
                  "s-1vcpu-2gb",
                  "s-1vcpu-3gb",
                  "s-2vcpu-2gb",
                  "s-3vcpu-1gb",
                  "s-2vcpu-4gb",
                  "s-4vcpu-8gb",
                  "s-6vcpu-16gb",
                  "s-8vcpu-32gb",
                  "s-12vcpu-48gb",
                  "s-16vcpu-64gb",
                  "s-20vcpu-96gb",
                  "s-24vcpu-128gb",
                  "s-32vcpu-192gb"
                ],
                "features": [
                  "private_networking",
                  "backups",
                  "ipv6",
                  "metadata",
                  "install_agent"
                ],
                "available": true
              },
              "tag": "prod:web",
              "droplet_ids": [
                55806512,
                55806515,
                55806524
              ],
              "redirect_http_to_https": true,
              "enable_proxy_protocol": false,
              "enable_backend_keepalive": false,
              "vpc_uuid": "587d698c-de84-11e8-80bc-3cfdfea9fcd1",
              "disable_lets_encrypt_dns_records": false
            }
          ],
          "meta": {
            "total": 2
          }
        }
      },
      "load_balancer_basic_create_request": {
        "description": "Passing requests directly through to 80 and 443.",
        "value": {
          "name": "example-lb-01",
          "region": "nyc3",
          "forwarding_rules": [
            {
              "entry_protocol": "http",
              "entry_port": 80,
              "target_protocol": "http",
              "target_port": 80
            },
            {
              "entry_protocol": "https",
              "entry_port": 443,
              "target_protocol": "https",
              "target_port": 443,
              "tls_passthrough": true
            }
          ],
          "droplet_ids": [
            3164444,
            3164445
          ]
        }
      },
      "load_balancer_ssl_termination_create_request": {
        "description": "Terminating SSL at the load balancer using a managed SSL certificate specifying Droplets using `droplet_ids`.",
        "value": {
          "name": "example-lb-01",
          "region": "nyc3",
          "forwarding_rules": [
            {
              "entry_protocol": "https",
              "entry_port": 443,
              "target_protocol": "http",
              "target_port": 8080,
              "certificate_id": "892071a0-bb95-49bc-8021-3afd67a210bf"
            }
          ],
          "droplet_ids": [
            3164444,
            3164445
          ]
        }
      },
      "load_balancer_using_tag_create_request": {
        "description": "Terminating SSL at the load balancer using a managed SSL certificate specifying Droplets using `tag`.",
        "value": {
          "name": "example-lb-01",
          "region": "nyc3",
          "forwarding_rules": [
            {
              "entry_protocol": "https",
              "entry_port": 443,
              "target_protocol": "http",
              "target_port": 8080,
              "certificate_id": "892071a0-bb95-49bc-8021-3afd67a210bf"
            }
          ],
          "tag": "prod:web"
        }
      },
      "load_balancer_sticky_sessions_and_health_check_create_request": {
        "description": "Terminating SSL at the load balancer using a managed SSL certificate specifying Droplets using `tag`.",
        "value": {
          "name": "example-lb-01",
          "region": "nyc3",
          "forwarding_rules": [
            {
              "entry_protocol": "https",
              "entry_port": 443,
              "target_protocol": "http",
              "target_port": 8080,
              "certificate_id": "892071a0-bb95-49bc-8021-3afd67a210bf"
            }
          ],
          "health_check": {
            "protocol": "http",
            "port": 8080,
            "path": "/health",
            "check_interval_seconds": 10,
            "response_timeout_seconds": 5,
            "healthy_threshold": 5,
            "unhealthy_threshold": 3
          },
          "sticky_sessions": {
            "type": "cookies",
            "cookie_name": "LB_COOKIE",
            "cookie_ttl_seconds": 300
          },
          "tag": "prod:web"
        }
      },
      "load_balancer_basic_response": {
        "value": {
          "load_balancer": {
            "id": "4de7ac8b-495b-4884-9a69-1050c6793cd6",
            "name": "example-lb-01",
            "ip": "104.131.186.241",
            "size": "lb-small",
            "algorithm": "round_robin",
            "status": "new",
            "created_at": "2017-02-01T22:22:58Z",
            "forwarding_rules": [
              {
                "entry_protocol": "http",
                "entry_port": 80,
                "target_protocol": "http",
                "target_port": 80,
                "certificate_id": "",
                "tls_passthrough": false
              },
              {
                "entry_protocol": "https",
                "entry_port": 443,
                "target_protocol": "https",
                "target_port": 443,
                "certificate_id": "",
                "tls_passthrough": true
              }
            ],
            "health_check": {
              "protocol": "http",
              "port": 80,
              "path": "/",
              "check_interval_seconds": 10,
              "response_timeout_seconds": 5,
              "healthy_threshold": 5,
              "unhealthy_threshold": 3
            },
            "sticky_sessions": {
              "type": "none"
            },
            "region": {
              "name": "New York 3",
              "slug": "nyc3",
              "sizes": [
                "s-1vcpu-1gb",
                "s-1vcpu-2gb",
                "s-1vcpu-3gb",
                "s-2vcpu-2gb",
                "s-3vcpu-1gb",
                "s-2vcpu-4gb",
                "s-4vcpu-8gb",
                "s-6vcpu-16gb",
                "s-8vcpu-32gb",
                "s-12vcpu-48gb",
                "s-16vcpu-64gb",
                "s-20vcpu-96gb",
                "s-24vcpu-128gb",
                "s-32vcpu-192gb"
              ],
              "features": [
                "private_networking",
                "backups",
                "ipv6",
                "metadata",
                "install_agent"
              ],
              "available": true
            },
            "tag": "",
            "droplet_ids": [
              3164444,
              3164445
            ],
            "redirect_http_to_https": false,
            "enable_proxy_protocol": false,
            "enable_backend_keepalive": false,
            "vpc_uuid": "c33931f2-a26a-4e61-b85c-4e95a2ec431b",
            "disable_lets_encrypt_dns_records": false
          }
        }
      },
      "load_balancer_ssl_termination_response": {
        "value": {
          "load_balancer": {
            "id": "4de7ac8b-495b-4884-9a69-1050c6793cd6",
            "name": "example-lb-01",
            "ip": "104.131.186.241",
            "size": "lb-small",
            "algorithm": "round_robin",
            "status": "new",
            "created_at": "2017-02-01T22:22:58Z",
            "forwarding_rules": [
              {
                "entry_protocol": "https",
                "entry_port": 443,
                "target_protocol": "http",
                "target_port": 8080,
                "certificate_id": "892071a0-bb95-49bc-8021-3afd67a210bf"
              }
            ],
            "health_check": {
              "protocol": "http",
              "port": 80,
              "path": "/",
              "check_interval_seconds": 10,
              "response_timeout_seconds": 5,
              "healthy_threshold": 5,
              "unhealthy_threshold": 3
            },
            "sticky_sessions": {
              "type": "none"
            },
            "region": {
              "name": "New York 3",
              "slug": "nyc3",
              "sizes": [
                "s-1vcpu-1gb",
                "s-1vcpu-2gb",
                "s-1vcpu-3gb",
                "s-2vcpu-2gb",
                "s-3vcpu-1gb",
                "s-2vcpu-4gb",
                "s-4vcpu-8gb",
                "s-6vcpu-16gb",
                "s-8vcpu-32gb",
                "s-12vcpu-48gb",
                "s-16vcpu-64gb",
                "s-20vcpu-96gb",
                "s-24vcpu-128gb",
                "s-32vcpu-192gb"
              ],
              "features": [
                "private_networking",
                "backups",
                "ipv6",
                "metadata",
                "install_agent"
              ],
              "available": true
            },
            "tag": "",
            "droplet_ids": [
              3164444,
              3164445
            ],
            "redirect_http_to_https": false,
            "enable_proxy_protocol": false,
            "enable_backend_keepalive": false,
            "vpc_uuid": "c33931f2-a26a-4e61-b85c-4e95a2ec431b",
            "disable_lets_encrypt_dns_records": false
          }
        }
      },
      "load_balancer_using_tag_response": {
        "value": {
          "load_balancer": {
            "id": "4de7ac8b-495b-4884-9a69-1050c6793cd6",
            "name": "example-lb-01",
            "ip": "104.131.186.241",
            "size": "lb-small",
            "algorithm": "round_robin",
            "status": "new",
            "created_at": "2017-02-01T22:22:58Z",
            "forwarding_rules": [
              {
                "entry_protocol": "https",
                "entry_port": 443,
                "target_protocol": "http",
                "target_port": 8080,
                "certificate_id": "892071a0-bb95-49bc-8021-3afd67a210bf"
              }
            ],
            "health_check": {
              "protocol": "http",
              "port": 80,
              "path": "/",
              "check_interval_seconds": 10,
              "response_timeout_seconds": 5,
              "healthy_threshold": 5,
              "unhealthy_threshold": 3
            },
            "sticky_sessions": {
              "type": "none"
            },
            "region": {
              "name": "New York 3",
              "slug": "nyc3",
              "sizes": [
                "s-1vcpu-1gb",
                "s-1vcpu-2gb",
                "s-1vcpu-3gb",
                "s-2vcpu-2gb",
                "s-3vcpu-1gb",
                "s-2vcpu-4gb",
                "s-4vcpu-8gb",
                "s-6vcpu-16gb",
                "s-8vcpu-32gb",
                "s-12vcpu-48gb",
                "s-16vcpu-64gb",
                "s-20vcpu-96gb",
                "s-24vcpu-128gb",
                "s-32vcpu-192gb"
              ],
              "features": [
                "private_networking",
                "backups",
                "ipv6",
                "metadata",
                "install_agent"
              ],
              "available": true
            },
            "tag": "prod:web",
            "droplet_ids": [
              3164444,
              3164445
            ],
            "redirect_http_to_https": false,
            "enable_proxy_protocol": false,
            "enable_backend_keepalive": false,
            "vpc_uuid": "c33931f2-a26a-4e61-b85c-4e95a2ec431b",
            "disable_lets_encrypt_dns_records": false
          }
        }
      },
      "load_balancer_sticky_sessions_and_health_check_response": {
        "value": {
          "load_balancer": {
            "id": "4de7ac8b-495b-4884-9a69-1050c6793cd6",
            "name": "example-lb-01",
            "ip": "104.131.186.241",
            "size": "lb-small",
            "algorithm": "round_robin",
            "status": "new",
            "created_at": "2017-02-01T22:22:58Z",
            "forwarding_rules": [
              {
                "entry_protocol": "https",
                "entry_port": 443,
                "target_protocol": "http",
                "target_port": 8080,
                "certificate_id": "892071a0-bb95-49bc-8021-3afd67a210bf"
              }
            ],
            "health_check": {
              "protocol": "http",
              "port": 8080,
              "path": "/health",
              "check_interval_seconds": 10,
              "response_timeout_seconds": 5,
              "healthy_threshold": 5,
              "unhealthy_threshold": 3
            },
            "sticky_sessions": {
              "type": "cookies",
              "cookie_name": "LB_COOKIE",
              "cookie_ttl_seconds": 300
            },
            "region": {
              "name": "New York 3",
              "slug": "nyc3",
              "sizes": [
                "s-1vcpu-1gb",
                "s-1vcpu-2gb",
                "s-1vcpu-3gb",
                "s-2vcpu-2gb",
                "s-3vcpu-1gb",
                "s-2vcpu-4gb",
                "s-4vcpu-8gb",
                "s-6vcpu-16gb",
                "s-8vcpu-32gb",
                "s-12vcpu-48gb",
                "s-16vcpu-64gb",
                "s-20vcpu-96gb",
                "s-24vcpu-128gb",
                "s-32vcpu-192gb"
              ],
              "features": [
                "private_networking",
                "backups",
                "ipv6",
                "metadata",
                "install_agent"
              ],
              "available": true
            },
            "tag": "prod:web",
            "droplet_ids": [
              3164444,
              3164445
            ],
            "redirect_http_to_https": false,
            "enable_proxy_protocol": false,
            "enable_backend_keepalive": false,
            "vpc_uuid": "c33931f2-a26a-4e61-b85c-4e95a2ec431b",
            "disable_lets_encrypt_dns_records": false
          }
        }
      },
      "load_balancer_update_request": {
        "value": {
          "name": "updated-example-lb-01",
          "region": "nyc3",
          "droplet_ids": [
            3164444,
            3164445
          ],
          "algorithm": "round_robin",
          "forwarding_rules": [
            {
              "entry_protocol": "http",
              "entry_port": 80,
              "target_protocol": "http",
              "target_port": 80,
              "certificate_id": "",
              "tls_passthrough": false
            },
            {
              "entry_protocol": "https",
              "entry_port": 443,
              "target_protocol": "https",
              "target_port": 443,
              "certificate_id": "",
              "tls_passthrough": true
            }
          ],
          "health_check": {
            "protocol": "http",
            "port": 80,
            "path": "/",
            "check_interval_seconds": 10,
            "response_timeout_seconds": 5,
            "healthy_threshold": 5,
            "unhealthy_threshold": 3
          },
          "sticky_sessions": {
            "type": "none"
          },
          "redirect_http_to_https": false,
          "enable_proxy_protocol": true,
          "enable_backend_keepalive": true,
          "vpc_uuid": "c33931f2-a26a-4e61-b85c-4e95a2ec431b"
        }
      },
      "load_balancer_update_response": {
        "value": {
          "load_balancer": {
            "id": "4de7ac8b-495b-4884-9a69-1050c6793cd6",
            "name": "updated-example-lb-01",
            "ip": "104.131.186.241",
            "size": "lb-small",
            "algorithm": "round_robin",
            "status": "new",
            "created_at": "2017-02-01T22:22:58Z",
            "forwarding_rules": [
              {
                "entry_protocol": "http",
                "entry_port": 80,
                "target_protocol": "http",
                "target_port": 80,
                "certificate_id": "",
                "tls_passthrough": false
              },
              {
                "entry_protocol": "https",
                "entry_port": 443,
                "target_protocol": "https",
                "target_port": 443,
                "certificate_id": "",
                "tls_passthrough": true
              }
            ],
            "health_check": {
              "protocol": "http",
              "port": 80,
              "path": "/",
              "check_interval_seconds": 10,
              "response_timeout_seconds": 5,
              "healthy_threshold": 5,
              "unhealthy_threshold": 3
            },
            "sticky_sessions": {
              "type": "none"
            },
            "region": {
              "name": "New York 3",
              "slug": "nyc3",
              "sizes": [
                "s-1vcpu-1gb",
                "s-1vcpu-2gb",
                "s-1vcpu-3gb",
                "s-2vcpu-2gb",
                "s-3vcpu-1gb",
                "s-2vcpu-4gb",
                "s-4vcpu-8gb",
                "s-6vcpu-16gb",
                "s-8vcpu-32gb",
                "s-12vcpu-48gb",
                "s-16vcpu-64gb",
                "s-20vcpu-96gb",
                "s-24vcpu-128gb",
                "s-32vcpu-192gb"
              ],
              "features": [
                "private_networking",
                "backups",
                "ipv6",
                "metadata",
                "install_agent"
              ],
              "available": true
            },
            "tag": "",
            "droplet_ids": [
              3164444,
              3164445
            ],
            "redirect_http_to_https": false,
            "enable_proxy_protocol": true,
            "enable_backend_keepalive": true,
            "vpc_uuid": "c33931f2-a26a-4e61-b85c-4e95a2ec431b",
            "disable_lets_encrypt_dns_records": false
          }
        }
      },
      "snapshots_all": {
        "value": {
          "snapshots": [
            {
              "id": "6372321",
              "name": "web-01-1595954862243",
              "created_at": "2020-07-28T16:47:44Z",
              "regions": [
                "nyc3",
                "sfo3"
              ],
              "resource_id": "200776916",
              "resource_type": "droplet",
              "min_disk_size": 25,
              "size_gigabytes": 2.34,
              "tags": [
                "web",
                "env:prod"
              ]
            },
            {
              "id": "fbe805e8-866b-11e6-96bf-000f53315a41",
              "name": "pvc-01-1595954862243",
              "created_at": "2019-09-28T23:14:30Z",
              "regions": [
                "nyc1"
              ],
              "resource_id": "89bcc42f-85cf-11e6-a004-000f53315871",
              "resource_type": "volume",
              "min_disk_size": 2,
              "size_gigabytes": 0.1008,
              "tags": [
                "k8s"
              ]
            }
          ],
          "meta": {
            "total": 2
          }
        }
      },
      "snapshots_droplets_only": {
        "value": {
          "snapshots": [
            {
              "id": "6372321",
              "name": "web-01-1595954862243",
              "created_at": "2020-07-28T16:47:44Z",
              "regions": [
                "nyc3",
                "sfo3"
              ],
              "resource_id": "200776916",
              "resource_type": "droplet",
              "min_disk_size": 25,
              "size_gigabytes": 2.34,
              "tags": [
                "web",
                "env:prod"
              ]
            }
          ],
          "meta": {
            "total": 1
          }
        }
      },
      "snapshots_volumes_only": {
        "value": {
          "snapshots": [
            {
              "id": "fbe805e8-866b-11e6-96bf-000f53315a41",
              "name": "pvc-01-1595954862243",
              "created_at": "2019-09-28T23:14:30Z",
              "regions": [
                "nyc1"
              ],
              "resource_id": "89bcc42f-85cf-11e6-a004-000f53315871",
              "resource_type": "volume",
              "min_disk_size": 2,
              "size_gigabytes": 0.1008,
              "tags": [
                "k8s"
              ]
            }
          ],
          "meta": {
            "total": 1
          }
        }
      },
      "volumes_all": {
        "value": {
          "volumes": [
            {
              "id": "506f78a4-e098-11e5-ad9f-000f53306ae1",
              "region": {
                "name": "New York 1",
                "slug": "nyc1",
                "sizes": [
                  "s-1vcpu-1gb",
                  "s-1vcpu-2gb",
                  "s-1vcpu-3gb",
                  "s-2vcpu-2gb",
                  "s-3vcpu-1gb",
                  "s-2vcpu-4gb",
                  "s-4vcpu-8gb",
                  "s-6vcpu-16gb",
                  "s-8vcpu-32gb",
                  "s-12vcpu-48gb",
                  "s-16vcpu-64gb",
                  "s-20vcpu-96gb",
                  "s-24vcpu-128gb",
                  "s-32vcpu-192gb"
                ],
                "features": [
                  "private_networking",
                  "backups",
                  "ipv6",
                  "metadata"
                ],
                "available": true
              },
              "droplet_ids": [],
              "name": "example",
              "description": "Block store for examples",
              "size_gigabytes": 10,
              "created_at": "2016-03-02T17:00:49Z",
              "filesystem_type": "ext4",
              "filesystem_label": "example",
              "tags": [
                "aninterestingtag"
              ]
            },
            {
              "id": "506f78a4-e098-11e5-ad9f-000f53305eb2",
              "region": {
                "name": "New York 3",
                "slug": "nyc3",
                "sizes": [
                  "s-1vcpu-1gb",
                  "s-1vcpu-2gb",
                  "s-1vcpu-3gb",
                  "s-2vcpu-2gb",
                  "s-3vcpu-1gb",
                  "s-2vcpu-4gb",
                  "s-4vcpu-8gb",
                  "s-6vcpu-16gb",
                  "s-8vcpu-32gb",
                  "s-12vcpu-48gb",
                  "s-16vcpu-64gb",
                  "s-20vcpu-96gb",
                  "s-24vcpu-128gb",
                  "s-32vcpu-192gb"
                ],
                "features": [
                  "private_networking",
                  "backups",
                  "ipv6",
                  "metadata"
                ],
                "available": true
              },
              "droplet_ids": [],
              "name": "example",
              "description": "Block store for examples",
              "size_gigabytes": 10,
              "created_at": "2016-03-02T17:01:49Z",
              "filesystem_type": "ext4",
              "filesystem_label": "example",
              "tags": [
                "aninterestingtag"
              ]
            }
          ],
          "meta": {
            "total": 2
          }
        }
      },
      "volumes_filtered_by_name": {
        "value": {
          "volumes": [
            {
              "id": "506f78a4-e098-11e5-ad9f-000f53306ae1",
              "region": {
                "name": "New York 1",
                "slug": "nyc1",
                "sizes": [
                  "s-1vcpu-1gb",
                  "s-1vcpu-2gb",
                  "s-1vcpu-3gb",
                  "s-2vcpu-2gb",
                  "s-3vcpu-1gb",
                  "s-2vcpu-4gb",
                  "s-4vcpu-8gb",
                  "s-6vcpu-16gb",
                  "s-8vcpu-32gb",
                  "s-12vcpu-48gb",
                  "s-16vcpu-64gb",
                  "s-20vcpu-96gb",
                  "s-24vcpu-128gb",
                  "s-32vcpu-192gb"
                ],
                "features": [
                  "private_networking",
                  "backups",
                  "ipv6",
                  "metadata"
                ],
                "available": true
              },
              "droplet_ids": [],
              "name": "example",
              "description": "Block store for examples",
              "size_gigabytes": 10,
              "created_at": "2016-03-02T17:00:49Z",
              "filesystem_type": "ext4",
              "filesystem_label": "example",
              "tags": [
                "aninterestingtag"
              ]
            }
          ],
          "meta": {
            "total": 1
          }
        }
      },
      "volumes_filtered_by_region": {
        "value": {
          "volumes": [
            {
              "id": "506f78a4-e098-11e5-ad9f-000f53306ae1",
              "region": {
                "name": "New York 1",
                "slug": "nyc1",
                "sizes": [
                  "s-1vcpu-1gb",
                  "s-1vcpu-2gb",
                  "s-1vcpu-3gb",
                  "s-2vcpu-2gb",
                  "s-3vcpu-1gb",
                  "s-2vcpu-4gb",
                  "s-4vcpu-8gb",
                  "s-6vcpu-16gb",
                  "s-8vcpu-32gb",
                  "s-12vcpu-48gb",
                  "s-16vcpu-64gb",
                  "s-20vcpu-96gb",
                  "s-24vcpu-128gb",
                  "s-32vcpu-192gb"
                ],
                "features": [
                  "private_networking",
                  "backups",
                  "ipv6",
                  "metadata"
                ],
                "available": true
              },
              "droplet_ids": [],
              "name": "example",
              "description": "Block store for examples",
              "size_gigabytes": 10,
              "created_at": "2016-03-02T17:00:49Z",
              "filesystem_type": "ext4",
              "filesystem_label": "example",
              "tags": [
                "aninterestingtag"
              ]
            }
          ],
          "meta": {
            "total": 1
          }
        }
      },
      "volume_action_attach_response": {
        "value": {
          "action": {
            "id": 72531856,
            "status": "completed",
            "type": "attach_volume",
            "started_at": "2020-11-12T17:51:03Z",
            "completed_at": "2020-11-12T17:51:14Z",
            "resource_type": "volume",
            "region": {
              "name": "New York 1",
              "slug": "nyc1",
              "sizes": [
                "s-1vcpu-1gb",
                "s-1vcpu-2gb",
                "s-1vcpu-3gb",
                "s-2vcpu-2gb",
                "s-3vcpu-1gb",
                "s-2vcpu-4gb",
                "s-4vcpu-8gb",
                "s-6vcpu-16gb",
                "s-8vcpu-32gb",
                "s-12vcpu-48gb",
                "s-16vcpu-64gb",
                "s-20vcpu-96gb",
                "s-24vcpu-128gb",
                "s-32vcpu-192gb"
              ],
              "features": [
                "private_networking",
                "backups",
                "ipv6",
                "metadata"
              ],
              "available": true
            },
            "region_slug": "nyc1"
          }
        }
      },
      "volume_action_detach_response": {
        "value": {
          "action": {
            "id": 68212773,
            "status": "in-progress",
            "type": "detach_volume",
            "started_at": "2015-10-15T17:46:15Z",
            "completed_at": null,
            "resource_id": null,
            "resource_type": "backend",
            "region": {
              "name": "New York 1",
              "slug": "nyc1",
              "sizes": [
                "s-1vcpu-1gb",
                "s-1vcpu-2gb",
                "s-1vcpu-3gb",
                "s-2vcpu-2gb",
                "s-3vcpu-1gb",
                "s-2vcpu-4gb",
                "s-4vcpu-8gb",
                "s-6vcpu-16gb",
                "s-8vcpu-32gb",
                "s-12vcpu-48gb",
                "s-16vcpu-64gb",
                "s-20vcpu-96gb",
                "s-24vcpu-128gb",
                "s-32vcpu-192gb"
              ],
              "features": [
                "private_networking",
                "backups",
                "ipv6",
                "metadata"
              ],
              "available": true
            },
            "region_slug": "nyc1"
          }
        }
      }
    }
  },
  "security": [
    {
      "bearer_auth": []
    }
  ]
}