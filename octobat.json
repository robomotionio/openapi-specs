{
  "openapi": "3.0.0",
  "info": {
    "version": "2.0.0",
    "title": "Octobat API",
    "description": "Octobat API Reference",
    "x-logo": {
      "url": "https://logo.clearbit.com/octobat.com"
    }
  },
  "servers": [
    {
      "url": "https://apiv2.octobat.com",
      "description": "Octobat API"
    }
  ],
  "security": [
    {
      "BasicAuth": []
    }
  ],
  "tags": [
    {
      "name": "Introduction",
      "x-traitTag": true,
      "description": "The Octobat API is organized around REST. Our API is designed to have predictable, resource-oriented URLs and to use HTTP response codes to indicate API errors. We use built-in HTTP features, like HTTP verbs, which can be understood by off-the-shelf HTTP clients.\n\nJSON will be returned in all responses from the API, including errors.\n\nTo make the Octobat API as secure as possible. Authentication is performed through HTTP Basic Auth. Credentials can be found on your Octobat developers menu, in the “API Keys” section."
    },
    {
      "name": "Authentication",
      "x-traitTag": true,
      "description": "Authentication to the API occurs via HTTP Basic Auth. Provide your API secret key as the basic auth username. You do not need to provide a password.\nAll API requests must be made over HTTPS. Calls made over plain HTTP will fail. You must authenticate for all requests.\nYou can manage your API keys from your account. Your API keys carry many privileges, so be sure to keep them secret!\n```curl\n# Example request\n$ curl https://apiv2.octobat.com/customers \\\n   -u oc_test_skey_tkHCYYOUVrYyY5rBFZxNzgtt:\n\n# curl uses the -u flag to pass basic auth credentials\n# (adding a colon after your secret API key will prevent it\n# from asking you for a password).\n```\n\n```ruby\n# Example global authentication\nrequire \"octobat\"\nOctobat.api_key = \"oc_test_skey_tkHCYYOUVrYyY5rBFZxNzgtt\"\n# Authentication is transparently handled for you\n# in subsequent method calls.\nOctobat::Customer.all\n\n# Example per-request authentication\nrequire \"octobat\"\nOctobat::Customer.all( {}, { api_key: 'oc_test_skey_tkHCYYOUVrYyY5rBFZxNzgtt' } )\n```"
    },
    {
      "name": "Errors",
      "x-traitTag": true,
      "description": "Octobat uses conventional HTTP response codes to indicate success or failure of an API request.\nIn general, codes in the 2xx range indicate success, codes in the 4xx range indicate an error that resulted from the provided information (e.g. a required parameter was missing, a charge failed, etc.), and codes in the 5xx range indicate an error with Octobat’s servers.\n```\nHTTP status codes summary\n\n200 OK - Everything worked as expected.\n\n201 Created - Resource has been successfully created\n\n202 Accepted - Request has been accepted, but requires asynchronous work to be fully performed\n\n400 Bad Request - Request failed due to a combination of errors\n\n401 Unauthorized - No valid API credentials provided.\n\n402 Payment Required - Your request was in livemode while your account is not activated for live requests yet.\n\n403 Forbidden - You are not authorized to access the requested item.\n\n404 Not Found - The requested item doesn't exist.\n\n406 Unacceptable - Your request format was not supported. Use JSON.\n\n409 Conflict - The data you submitted is in conflict with existing data.\n\n422 Unprocessable Entity - Often missing a required parameter.\n\n429 Too Many Requests - You sent us too many API requests in a row. Please retry later.\n\n500, 502, 503, 504 Server errors - something went wrong on Octobat's end.\n```"
    },
    {
      "name": "Pagination",
      "x-traitTag": true,
      "description": "All top-level Octobat API resources have support for bulk fetches “list” API methods. For instance, you can list customers, list invoices.\nLike Stripe, Octobat uses cursor-based pagination using the parameter `starting_after`. Pass `starting_after` parameter at the previous page last object id value to determine where to start in the list.\nReverse pagination is possible as well thanks to the `ending_before` parameter.\n\n### Attributes\n<table>\n<tr><th>Attribute</th><th>Type</th></tr>\n<tr><td><strong>limit</strong></td><td>integer, optional A limit on the number of objects to be returned. Must be included between 1 and 100</td>\n<tr><td><strong>starting_after</strong></td><td>string, optional A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.</td>\n<tr><td><strong>ending_before</strong></td><td>string, optional A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.</td>\n</table>\n\n### List Response format\n<table>\n<tr><th>Attribute</th><th>Type</th></tr>\n<tr><td><strong>object</strong></td><td>string, value is `list`</td></tr>\n<tr><td><strong>data</strong></td><td>array, An array containing the actual response elements, paginated by any request parameters.</td></tr>\n<tr><td><strong>has_before</strong></td><td>boolean, Whether or not there are more elements available before this page. If `false`, this page is the beginning of the list.</td></tr>\n<tr><td><strong>has_more</strong></td><td>boolean, Whether or not there are more elements available after this page. If `false`, this page is the end of the list</td></tr>\n<tr><td><strong>total_count</strong></td><td>integer, The total count of all recipients that match your filters, as if there was no pagination</td></tr>\n</table>"
    },
    {
      "name": "Source objects",
      "x-traitTag": true,
      "description": "Potentially Synchronized objects —including Customer, Invoice, Credit Note, Item and Transaction— have a sources parameter.\n\nSources references the external data this Octobat object has been created from. As an Octobat object may have been populated from several external objects, sources is always represented as an array of JSON-encoded hashes - each nested hash being a single reference -.\n\nAs an example, a customer created in Octobat from a Stripe customer includes a reference to this last one in the following form:\n`{'gateway': 'stripe', 'source_type': 'customer', 'identifier': 'cus_xxxxxxxx'}`,\n\nso the full sources attribute value would be:  \n`[{'gateway': 'stripe', 'source_type': 'customer', 'identifier': 'cus_xxxxxxxx'}]`.\n\nNested JSON-encoded hashes have always the same structure with the following keys:\n\n<table>\n<tr><th>Attribute</th><th>Type</th></tr>\n<tr><td><strong>gateway</strong></td><td>string The integration this object came from. Examples: `stripe`, `gocardless`</td></tr>\n<tr><td><strong>source_type</strong></td><td>string, The platform object type. For instance, a Stripe payment object type is: `charge`.</td></tr>\n<tr><td><strong>identifier</strong></td><td>string, The platform object identifier, that you can request on.</td></tr>\n</table>\n\nSources are always serialized and sent back upon API requests and webhooks. A common useful case is to link the payment platform charge or subscription object to the corresponding invoice or items created in Octobat."
    },
    {
      "name": "Expandable objects",
      "x-traitTag": true,
      "description": "Many objects can be nested into their parent object in their response properties. Those objects can be expanded inline with the expand request parameter. Objects that can be expanded are noted in this documentation.\nThis parameter is available on all API requests, and applies to the response of that request only. For example, requesting invoices on a customer will add the customer’s invoices list as a property into a full customer object, and will then expand the invoices properties on that customer into a full list object.\n```curl\n# Example request\n$ curl https://apiv2.octobat.com/customers?expand[]=invoices \\\n   -u oc_test_skey_tkHCYYOUVrYyY5rBFZxNzgtt:\n```\n```ruby\n# Example request\nrequire \"octobat\"\nOctobat.api_key = \"oc_test_skey_tkHCYYOUVrYyY5rBFZxNzgtt\"\nOctobat::Customer.all(expand: ['invoices'])\n```"
    },
    {
      "name": "Idempotent requests",
      "x-traitTag": true,
      "description": "The Octobat API supports idempotency for safely retrying requests without accidentally performing the same operation twice. For example, if a request to create an invoice fails due to a network connection error, you can retry the request with the same idempotency key to guarantee that only a single invoice is created.\n\nTo perform an idempotent request, provide an additional `idempotency_key` element to the request headers. curl header syntax is the following: `Idempotency-Key: <key>`\n\nHow you create unique keys is completely up to you. We suggest using random strings or UUIDs. We’ll always send back the same response for requests made with the same key. However, you cannot use the same key with different request parameters. The keys expire after 24 hours.\n\n```curl\n# Example request\n$ curl -X POST https://apiv2.octobat.com/customers \\\n   -u oc_test_skey_tkHCYYOUVrYyY5rBFZxNzgtt:\n   -H \"Idempotency-Key: 6OiRDy97Nlrt4ESP\" \\\n   -d email=contact@octobat.com \\\n   -d billing_address_country=FR \\\n   -d name=Octobat SAS\n```\n```ruby\n# Example request\nrequire \"octobat\"\nOctobat.api_key = \"oc_test_skey_tkHCYYOUVrYyY5rBFZxNzgtt\"\n\nOctobat::Customer.create({\n  email: \"contact@octobat.com\",\n  billing_address_country: \"FR\",\n  name: \"Octobat SAS\"\n}, {\n  idempotency_key: \"6OiRDy97Nlrt4ESP\"\n})\n```"
    },
    {
      "name": "Accounts"
    },
    {
      "name": "Capabilities"
    },
    {
      "name": "Configurations"
    },
    {
      "name": "CountrySpecs"
    },
    {
      "name": "Credit Note Numbering Sequences",
      "description": "      Credit Note Numbering Sequences objects enable the possibility to have one or several\n      numbering sequences. Each credit note that belongs to a given numbering sequence will get the prefix\n      of the sequence followed by its sequential number\n"
    },
    {
      "name": "Credit Notes",
      "description": ""
    },
    {
      "name": "CustomerBalanceTransactions"
    },
    {
      "name": "Customers",
      "description": "Customer objects are required to create other Octobat objects such as invoices or transactions that must be attached to them"
    },
    {
      "name": "Invoice Numbering Sequences",
      "description": "      Invoice Numbering Sequences objects enable the possibility to have one or several\n      numbering sequences. Each invoice that belongs to a given numbering sequence will get the prefix\n      of the sequence followed by its sequential number\n"
    },
    {
      "name": "Invoices"
    },
    {
      "name": "Items"
    },
    {
      "name": "OutboundTransactions",
      "description": "Outbound Transaction objects represent outbound payments or refunds, that goes from your account to a supplier"
    },
    {
      "name": "PaymentRecipientReferences"
    },
    {
      "name": "PaymentRecipients",
      "description": "PaymentRecipients objects describe payment methods that can be attached to an invoice to explain how it can be paid"
    },
    {
      "name": "PurchaseItems"
    },
    {
      "name": "ReportRuns"
    },
    {
      "name": "ReportTypes"
    },
    {
      "name": "SelfBillingCreditNotes",
      "description": "      Self Billing Credit Notes objects are to Self Billing Invoices what Credit Notes are to Invoices.\n      They cancel or amend self billing invoices that are generated by the customer\n      on behalf of the supplier to simplify the billing process.\n"
    },
    {
      "name": "SelfBillingInvoices",
      "description": "      Self Billing Invoices objects represent tax invoices that are generated by the customer\n      on behalf of the supplier to simplify the billing process.\n"
    },
    {
      "name": "Sessions"
    },
    {
      "name": "SubscriptionItems",
      "description": "Subscription Items objects allow you to create customer subscriptions with more than one line item."
    },
    {
      "name": "Subscriptions",
      "description": "Subscriptions objects are defining recurring cycles of items sold, or fees collected, and generates a recurring invoice for accounting purposes."
    },
    {
      "name": "Suppliers",
      "description": "Suppliers represents entities that sell goods and services to the current account entity. They are required to create self-invoices."
    },
    {
      "name": "TaxCodes"
    },
    {
      "name": "TaxEvidences",
      "description": "Tax evidences are the representation of a tax calculation, based on the evidence that permitted its determination"
    },
    {
      "name": "TaxEvidences",
      "description": "Tax evidences are the representation of a tax calculation, based on the evidence that permitted its determination"
    },
    {
      "name": "TaxIds"
    },
    {
      "name": "TaxRegionSettings"
    },
    {
      "name": "Taxes"
    },
    {
      "name": "Transactions",
      "description": "Transaction objects represent payments or refunds, successful or failed"
    },
    {
      "name": "UsageItems"
    },
    {
      "name": "Warehouses"
    }
  ],
  "paths": {
    "/beanie/configurations": {
      "get": {
        "summary": "List Beanie Configurations",
        "operationId": "Configurations_Index",
        "tags": [
          "Configurations"
        ],
        "description": "Returns a list of Beanie Configurations.",
        "responses": {
          "200": {
            "$ref": "#/components/responses/BeanieConfigurationsListResponse"
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      },
      "post": {
        "summary": "Create a Beanie Configuration",
        "operationId": "Configurations_Create",
        "tags": [
          "Configurations"
        ],
        "requestBody": {
          "required": false,
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "An internal code to help you identify your configuration among others."
                  },
                  "submit_type": {
                    "type": "string",
                    "enum": [
                      "auto",
                      "pay",
                      "donate",
                      "book"
                    ],
                    "description": "Describes the type of transaction being performed by Beanie in order to customize relevant text on the page, such as the submit button"
                  },
                  "primary_color": {
                    "type": "string",
                    "default": "#212CA7",
                    "description": "The Hex code of the main color for the Beanie hosted page"
                  },
                  "locale": {
                    "type": "string",
                    "enum": [
                      "auto",
                      "en",
                      "fr",
                      "es",
                      "de"
                    ],
                    "description": "The Beanie Session locale. If blank or `auto`, the default browser locale is used"
                  },
                  "success_url": {
                    "type": "string",
                    "description": "The URL the customer will be directed to after the session is successful."
                  },
                  "cancel_url": {
                    "type": "string",
                    "description": "The URL the customer will be directed to if they decide to cancel the session and return to your website."
                  },
                  "custom_domain": {
                    "type": "string",
                    "description": "The Beanie Payment page custom domain host. Must be a valid host"
                  },
                  "tax_calculation": {
                    "type": "string",
                    "default": "exclusive",
                    "enum": [
                      "inclusive",
                      "exclusive"
                    ],
                    "description": "Decide if item amounts are considered as tax inclusive or tax exclusive"
                  },
                  "billing_address_collection": {
                    "type": "string",
                    "enum": [
                      "required",
                      "auto"
                    ],
                    "description": "Whether Beanie should collect the full billing address or not"
                  },
                  "billing_address_options": {
                    "type": "object",
                    "properties": {
                      "allowed_countries": {
                        "type": "array",
                        "example": [
                          "FR",
                          "DE",
                          "US",
                          "CA"
                        ],
                        "items": {
                          "type": "string"
                        },
                        "description": "An explicit list of ISO3166-alpha2 codes of countries where you allow shipping"
                      },
                      "required_fields": {
                        "type": "boolean",
                        "default": false,
                        "description": "Whether the full address is required (not only the country)"
                      }
                    },
                    "description": "Whether you want to specify specific required fields or limit the countries you will allow delivery of your services"
                  },
                  "shipping_address_collection": {
                    "type": "object",
                    "properties": {
                      "allowed_countries": {
                        "type": "array",
                        "example": [
                          "FR",
                          "DE",
                          "US",
                          "CA"
                        ],
                        "items": {
                          "type": "string"
                        },
                        "description": "An explicit list of ISO3166-alpha2 codes of countries where you allow shipping"
                      }
                    },
                    "description": "Whether Beanie should collect the shipping address of the order, and describes the countries you will allow shipping"
                  },
                  "company_details_collection": {
                    "type": "string",
                    "default": "optional",
                    "enum": [
                      "optional",
                      "never"
                    ],
                    "description": "Whether Beanie asks for company details (Tax number / Company name)"
                  },
                  "phone_number_collection": {
                    "type": "boolean",
                    "description": "Whether Beanie should collect the phone number or not"
                  },
                  "tax_number_validation": {
                    "type": "string",
                    "default": "true",
                    "enum": [
                      "true",
                      "false",
                      "format"
                    ],
                    "description": "Whether Beanie should validate the tax number on input"
                  },
                  "coupon_collection": {
                    "type": "boolean",
                    "description": "Whether Beanie should collect coupons or not"
                  },
                  "multiple_evidence_collection": {
                    "type": "boolean",
                    "default": true,
                    "description": "Whether Beanie should collect multiple evidence such as the IP address and the payment method issuer country to calculate tax."
                  },
                  "prefill_settings": {
                    "type": "object",
                    "properties": {
                      "editable_fields": {
                        "type": "boolean",
                        "default": false,
                        "description": "Whether fields that are prefilled with `prefill_data` are editable or not"
                      }
                    },
                    "description": "Configuration of fields for which data is prefilled."
                  },
                  "save_payment_method": {
                    "type": "string",
                    "default": "never",
                    "enum": [
                      "never",
                      "always",
                      "optional"
                    ],
                    "description": "Whether you need to save the payment method of the customer in the PSP's vault for future use. If value is `optional`, the customer will have a checkbox to decide if they want or not to save their credit card for future use."
                  },
                  "setup_future_usage": {
                    "type": "string",
                    "enum": [
                      "on_session",
                      "off_session"
                    ],
                    "description": "If the payment method is saved, whether it will be used when the customer is always on your website `on_session`, or if you may charge them when they are offline `off_session`."
                  }
                },
                "required": [
                  "name",
                  "success_url",
                  "cancel_url"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/beanieConfiguration"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      }
    },
    "/beanie/configurations/{id}": {
      "get": {
        "summary": "Retrieve a Single Beanie Configuration",
        "operationId": "Configurations_Show",
        "tags": [
          "Configurations"
        ],
        "description": "Returns a Single Beanie Configuration by its ID.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/beanieConfiguration"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      },
      "patch": {
        "summary": "Update a Beanie Configuration",
        "operationId": "Configurations_Update",
        "tags": [
          "Configurations"
        ],
        "description": "Update a Single Beanie Configuration by its ID.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": false,
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "An internal code to help you identify your configuration among others."
                  },
                  "submit_type": {
                    "type": "string",
                    "enum": [
                      "auto",
                      "pay",
                      "donate",
                      "book"
                    ],
                    "description": "Describes the type of transaction being performed by Beanie in order to customize relevant text on the page, such as the submit button"
                  },
                  "primary_color": {
                    "type": "string",
                    "default": "#212CA7",
                    "description": "The Hex code of the main color for the Beanie hosted page"
                  },
                  "locale": {
                    "type": "string",
                    "enum": [
                      "auto",
                      "en",
                      "fr",
                      "es",
                      "de"
                    ],
                    "description": "The Beanie Session locale. If blank or `auto`, the default browser locale is used"
                  },
                  "success_url": {
                    "type": "string",
                    "description": "The URL the customer will be directed to after the session is successful."
                  },
                  "cancel_url": {
                    "type": "string",
                    "description": "The URL the customer will be directed to if they decide to cancel the session and return to your website."
                  },
                  "custom_domain": {
                    "type": "string",
                    "description": "The Beanie Payment page custom domain host. Must be a valid host"
                  },
                  "tax_calculation": {
                    "type": "string",
                    "default": "exclusive",
                    "enum": [
                      "inclusive",
                      "exclusive"
                    ],
                    "description": "Decide if item amounts are considered as tax inclusive or tax exclusive"
                  },
                  "billing_address_collection": {
                    "type": "string",
                    "enum": [
                      "required",
                      "auto"
                    ],
                    "description": "Whether Beanie should collect the full billing address or not"
                  },
                  "billing_address_options": {
                    "type": "object",
                    "properties": {
                      "allowed_countries": {
                        "type": "array",
                        "example": [
                          "FR",
                          "DE",
                          "US",
                          "CA"
                        ],
                        "items": {
                          "type": "string"
                        },
                        "description": "An explicit list of ISO3166-alpha2 codes of countries where you allow shipping"
                      },
                      "required_fields": {
                        "type": "boolean",
                        "default": false,
                        "description": "Whether the full address is required (not only the country)"
                      }
                    },
                    "description": "Whether you want to specify specific required fields or limit the countries you will allow delivery of your services"
                  },
                  "shipping_address_collection": {
                    "type": "object",
                    "properties": {
                      "allowed_countries": {
                        "type": "array",
                        "example": [
                          "FR",
                          "DE",
                          "US",
                          "CA"
                        ],
                        "items": {
                          "type": "string"
                        },
                        "description": "An explicit list of ISO3166-alpha2 codes of countries where you allow shipping"
                      }
                    },
                    "description": "Whether Beanie should collect the shipping address of the order, and describes the countries you will allow shipping"
                  },
                  "company_details_collection": {
                    "type": "string",
                    "default": "optional",
                    "enum": [
                      "optional",
                      "never"
                    ],
                    "description": "Whether Beanie asks for company details (Tax number / Company name)"
                  },
                  "phone_number_collection": {
                    "type": "boolean",
                    "description": "Whether Beanie should collect the phone number or not"
                  },
                  "tax_number_validation": {
                    "type": "string",
                    "default": "true",
                    "enum": [
                      "true",
                      "false",
                      "format"
                    ],
                    "description": "Whether Beanie should validate the tax number on input"
                  },
                  "coupon_collection": {
                    "type": "boolean",
                    "description": "Whether Beanie should collect coupons or not"
                  },
                  "multiple_evidence_collection": {
                    "type": "boolean",
                    "default": true,
                    "description": "Whether Beanie should collect multiple evidence such as the IP address and the payment method issuer country to calculate tax."
                  },
                  "prefill_settings": {
                    "type": "object",
                    "properties": {
                      "editable_fields": {
                        "type": "boolean",
                        "default": false,
                        "description": "Whether fields that are prefilled with `prefill_data` are editable or not"
                      }
                    },
                    "description": "Configuration of fields for which data is prefilled."
                  },
                  "save_payment_method": {
                    "type": "string",
                    "default": "never",
                    "enum": [
                      "never",
                      "always",
                      "optional"
                    ],
                    "description": "Whether you need to save the payment method of the customer in the PSP's vault for future use. If value is `optional`, the customer will have a checkbox to decide if they want or not to save their credit card for future use."
                  },
                  "setup_future_usage": {
                    "type": "string",
                    "enum": [
                      "on_session",
                      "off_session"
                    ],
                    "description": "If the payment method is saved, whether it will be used when the customer is always on your website `on_session`, or if you may charge them when they are offline `off_session`."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/beanieConfiguration"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      },
      "put": {
        "summary": "Update a Beanie Configuration",
        "operationId": "Configurations_Update",
        "tags": [
          "Configurations"
        ],
        "description": "Update a Single Beanie Configuration by its ID.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": false,
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "An internal code to help you identify your configuration among others."
                  },
                  "submit_type": {
                    "type": "string",
                    "enum": [
                      "auto",
                      "pay",
                      "donate",
                      "book"
                    ],
                    "description": "Describes the type of transaction being performed by Beanie in order to customize relevant text on the page, such as the submit button"
                  },
                  "primary_color": {
                    "type": "string",
                    "default": "#212CA7",
                    "description": "The Hex code of the main color for the Beanie hosted page"
                  },
                  "locale": {
                    "type": "string",
                    "enum": [
                      "auto",
                      "en",
                      "fr",
                      "es",
                      "de"
                    ],
                    "description": "The Beanie Session locale. If blank or `auto`, the default browser locale is used"
                  },
                  "success_url": {
                    "type": "string",
                    "description": "The URL the customer will be directed to after the session is successful."
                  },
                  "cancel_url": {
                    "type": "string",
                    "description": "The URL the customer will be directed to if they decide to cancel the session and return to your website."
                  },
                  "custom_domain": {
                    "type": "string",
                    "description": "The Beanie Payment page custom domain host. Must be a valid host"
                  },
                  "tax_calculation": {
                    "type": "string",
                    "default": "exclusive",
                    "enum": [
                      "inclusive",
                      "exclusive"
                    ],
                    "description": "Decide if item amounts are considered as tax inclusive or tax exclusive"
                  },
                  "billing_address_collection": {
                    "type": "string",
                    "enum": [
                      "required",
                      "auto"
                    ],
                    "description": "Whether Beanie should collect the full billing address or not"
                  },
                  "billing_address_options": {
                    "type": "object",
                    "properties": {
                      "allowed_countries": {
                        "type": "array",
                        "example": [
                          "FR",
                          "DE",
                          "US",
                          "CA"
                        ],
                        "items": {
                          "type": "string"
                        },
                        "description": "An explicit list of ISO3166-alpha2 codes of countries where you allow shipping"
                      },
                      "required_fields": {
                        "type": "boolean",
                        "default": false,
                        "description": "Whether the full address is required (not only the country)"
                      }
                    },
                    "description": "Whether you want to specify specific required fields or limit the countries you will allow delivery of your services"
                  },
                  "shipping_address_collection": {
                    "type": "object",
                    "properties": {
                      "allowed_countries": {
                        "type": "array",
                        "example": [
                          "FR",
                          "DE",
                          "US",
                          "CA"
                        ],
                        "items": {
                          "type": "string"
                        },
                        "description": "An explicit list of ISO3166-alpha2 codes of countries where you allow shipping"
                      }
                    },
                    "description": "Whether Beanie should collect the shipping address of the order, and describes the countries you will allow shipping"
                  },
                  "company_details_collection": {
                    "type": "string",
                    "default": "optional",
                    "enum": [
                      "optional",
                      "never"
                    ],
                    "description": "Whether Beanie asks for company details (Tax number / Company name)"
                  },
                  "phone_number_collection": {
                    "type": "boolean",
                    "description": "Whether Beanie should collect the phone number or not"
                  },
                  "tax_number_validation": {
                    "type": "string",
                    "default": "true",
                    "enum": [
                      "true",
                      "false",
                      "format"
                    ],
                    "description": "Whether Beanie should validate the tax number on input"
                  },
                  "coupon_collection": {
                    "type": "boolean",
                    "description": "Whether Beanie should collect coupons or not"
                  },
                  "multiple_evidence_collection": {
                    "type": "boolean",
                    "default": true,
                    "description": "Whether Beanie should collect multiple evidence such as the IP address and the payment method issuer country to calculate tax."
                  },
                  "prefill_settings": {
                    "type": "object",
                    "properties": {
                      "editable_fields": {
                        "type": "boolean",
                        "default": false,
                        "description": "Whether fields that are prefilled with `prefill_data` are editable or not"
                      }
                    },
                    "description": "Configuration of fields for which data is prefilled."
                  },
                  "save_payment_method": {
                    "type": "string",
                    "default": "never",
                    "enum": [
                      "never",
                      "always",
                      "optional"
                    ],
                    "description": "Whether you need to save the payment method of the customer in the PSP's vault for future use. If value is `optional`, the customer will have a checkbox to decide if they want or not to save their credit card for future use."
                  },
                  "setup_future_usage": {
                    "type": "string",
                    "enum": [
                      "on_session",
                      "off_session"
                    ],
                    "description": "If the payment method is saved, whether it will be used when the customer is always on your website `on_session`, or if you may charge them when they are offline `off_session`."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/beanieConfiguration"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      }
    },
    "/beanie/sessions": {
      "post": {
        "summary": "Create a Beanie Session",
        "operationId": "Sessions_Create",
        "tags": [
          "Sessions"
        ],
        "requestBody": {
          "required": false,
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "mode": {
                    "type": "string",
                    "enum": [
                      "payment",
                      "setup",
                      "subscription"
                    ],
                    "description": "The mode of the Beanie Session. Mandatory for `setup`, Optional for other flows"
                  },
                  "beanie_configuration": {
                    "type": "string",
                    "description": "The ID of the BeanieConfiguration from your Octobat dashboard. It will use your preconfigured `success_url`, `cancel_url`, `billing_address_collection`, `shipping_address_collection`, `billing_address_options`, `tax_calculation`, `validate_tax_number`, `coupon_collection` settings"
                  },
                  "customer": {
                    "type": "string",
                    "description": "The ID of the customer you want to attach this session to. Mandatory for `setup` mode"
                  },
                  "success_url": {
                    "type": "string",
                    "description": "The URL the customer will be directed to after the session is successful."
                  },
                  "cancel_url": {
                    "type": "string",
                    "description": "The URL the customer will be directed to if they decide to cancel the session and return to your website."
                  },
                  "line_items": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "price": {
                          "type": "string",
                          "description": "The ID of the price. It can be configured externally - for instance, on Stripe -."
                        },
                        "sku": {
                          "type": "string",
                          "description": "The ID of the SKU product. It can be configured externally - for instance, on Stripe -."
                        },
                        "quantity": {
                          "type": "integer",
                          "default": 1,
                          "description": "The quantity of this item purchased by the customer"
                        },
                        "product_type": {
                          "type": "string",
                          "description": "The Octobat-supported tax class/product type for this item. Defaults to your Octobat configuration default product type."
                        },
                        "charge": {
                          "type": "string",
                          "description": "Deprecated: A JWT representing an item purchase"
                        },
                        "order_item_data": {
                          "type": "object",
                          "properties": {
                            "amount": {
                              "type": "integer",
                              "description": "The inline order item unit amount"
                            },
                            "currency": {
                              "type": "string",
                              "description": "Currency ISO code"
                            },
                            "description": {
                              "type": "string",
                              "description": "Description of the inline order item unit amount"
                            }
                          },
                          "description": "Data used to generate a new order item object inline"
                        }
                      }
                    },
                    "description": "A list of items the customer is purchasing. Use this parameter for one-time payments, and use `subscription_data.subscription_items` for subscription items"
                  },
                  "subscription_data": {
                    "type": "object",
                    "properties": {
                      "subscription_items": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "plan": {
                              "type": "string",
                              "description": "The ID of the plan. It can be configured externally - for instance, on Stripe -."
                            },
                            "quantity": {
                              "type": "integer",
                              "default": 1,
                              "description": "The quantity of this plan purchased by the customer"
                            },
                            "product_type": {
                              "type": "string",
                              "description": "The Octobat-supported tax class/product type for this item. Defaults to your Octobat configuration default product type."
                            }
                          },
                          "required": [
                            "plan"
                          ]
                        },
                        "description": "A list of items, each with an attached plan, that the customer is subscribing to. Use this parameter for subscriptions"
                      },
                      "trial_end": {
                        "type": "integer",
                        "description": "The timestamp for which the trial will stop"
                      },
                      "trial_period_days": {
                        "type": "integer",
                        "description": "The number of days for which the trial is active"
                      }
                    },
                    "required": [
                      "subscription_items"
                    ],
                    "description": "A subset of parameters to be passed to subscription creation"
                  },
                  "save_payment_method": {
                    "type": "string",
                    "default": "never",
                    "enum": [
                      "never",
                      "always",
                      "optional"
                    ],
                    "description": "Whether you need to save the payment method of the customer in the PSP's vault for future use. If value is `optional`, the customer will have a checkbox to decide if they want or not to save their credit card for future use. Ignored if `mode`'s value is not `payment`"
                  },
                  "setup_future_usage": {
                    "type": "string",
                    "enum": [
                      "off_session",
                      "on_session"
                    ],
                    "description": "If the payment method is saved, whether it will be used when the customer is always on your website `on_session`, or if you may charge them when they are offline `off_session`.  Ignored if `mode`'s value is not `payment`"
                  },
                  "tax_calculation": {
                    "type": "string",
                    "enum": [
                      "inclusive",
                      "exclusive"
                    ],
                    "description": "Decide if item amounts are considered as tax inclusive or tax exclusive"
                  },
                  "billing_address_collection": {
                    "type": "string",
                    "enum": [
                      "required",
                      "auto"
                    ],
                    "description": "Whether Beanie should collect the full billing address or not"
                  },
                  "billing_address_options": {
                    "type": "object",
                    "properties": {
                      "allowed_countries": {
                        "type": "array",
                        "example": [
                          "FR",
                          "DE",
                          "US",
                          "CA"
                        ],
                        "items": {
                          "type": "string"
                        },
                        "description": "An explicit list of ISO3166-alpha2 codes of countries where you allow shipping"
                      },
                      "required_fields": {
                        "type": "boolean",
                        "default": false,
                        "description": "Whether the full address is required (not only the country)"
                      }
                    },
                    "description": "Whether you want to specify specific required fields or limit the countries you will allow delivery of your services"
                  },
                  "shipping_address_collection": {
                    "type": "object",
                    "properties": {
                      "allowed_countries": {
                        "type": "array",
                        "example": [
                          "FR",
                          "DE",
                          "US",
                          "CA"
                        ],
                        "items": {
                          "type": "string"
                        },
                        "description": "An explicit list of ISO3166-alpha2 codes of countries where you allow shipping"
                      }
                    },
                    "description": "Whether Beanie should collect the shipping address of the order, and describes the countries you will allow shipping. Leave blank to not collect shipping address."
                  },
                  "company_details_collection": {
                    "type": "string",
                    "default": "optional",
                    "enum": [
                      "optional",
                      "never"
                    ],
                    "description": "Whether Beanie asks for company details (Tax number / Company name)"
                  },
                  "phone_number_collection": {
                    "type": "boolean",
                    "description": "Whether Beanie should collect the phone number or not"
                  },
                  "tax_number_validation": {
                    "type": "string",
                    "enum": [
                      "true",
                      "false",
                      "format"
                    ],
                    "description": "Whether Beanie should validate the tax number on input"
                  },
                  "coupon_collection": {
                    "type": "boolean",
                    "description": "Whether Beanie should collect coupons or not"
                  },
                  "primary_color": {
                    "type": "string",
                    "description": "The main color for the Beanie theme. Must be an hex-formatted color"
                  },
                  "locale": {
                    "type": "string",
                    "enum": [
                      "auto",
                      "en",
                      "fr",
                      "es",
                      "de"
                    ],
                    "description": "The Beanie Session locale. If blank or `auto`, the default browser locale is used"
                  },
                  "client_reference_id": {
                    "type": "string",
                    "description": "A unique string to reference the Beanie Session. This can be a customer ID, a cart ID, or similar, and can be used to reconcile the session with your internal systems."
                  },
                  "prefill_data": {
                    "type": "object",
                    "properties": {
                      "customer_billing_address_line1": {
                        "type": "string"
                      },
                      "customer_billing_address_city": {
                        "type": "string"
                      },
                      "customer_billing_address_zip": {
                        "type": "string"
                      },
                      "customer_billing_address_state": {
                        "type": "string"
                      },
                      "customer_billing_address_country": {
                        "type": "string",
                        "description": "Must be ISO3166-alpha2"
                      },
                      "customer_company_name": {
                        "type": "string"
                      },
                      "customer_email": {
                        "type": "string"
                      },
                      "customer_name": {
                        "type": "string"
                      },
                      "customer_tax_number": {
                        "type": "string"
                      }
                    },
                    "description": "Set of key-value pairs that you can attach to prefill the Beanie form fields"
                  },
                  "prefill_settings": {
                    "type": "object",
                    "properties": {
                      "editable_fields": {
                        "type": "boolean",
                        "default": false,
                        "description": "Whether fields that are prefilled with `prefill_data` are editable or not"
                      }
                    },
                    "description": "Configuration of fields for which data is prefilled."
                  },
                  "metadata": {
                    "type": "object",
                    "properties": {
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "description": "Set of key-value pairs that you can attach to an object"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/beanieSession"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      }
    },
    "/beanie/sessions/{id}": {
      "get": {
        "summary": "Retrieve a Single Beanie Session",
        "operationId": "Sessions_Show",
        "tags": [
          "Sessions"
        ],
        "description": "Returns a Single Beanie Session by its ID.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/beanieSession"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      }
    },
    "/credit_note_numbering_sequences": {
      "get": {
        "summary": "List Credit Note Numbering Sequences",
        "operationId": "Credit Note Numbering Sequences_Index",
        "tags": [
          "Credit Note Numbering Sequences"
        ],
        "description": "Returns a list of Credit Note Numbering Sequences.",
        "responses": {
          "200": {
            "$ref": "#/components/responses/CreditNoteNumberingSequencesListResponse"
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      },
      "post": {
        "summary": "Create a Credit Note Numbering Sequence",
        "operationId": "Credit Note Numbering Sequences_Create",
        "tags": [
          "Credit Note Numbering Sequences"
        ],
        "description": "Create a Credit Note Numbering Sequence.",
        "requestBody": {
          "required": false,
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "is_default": {
                    "type": "boolean"
                  },
                  "next_number": {
                    "type": "integer",
                    "default": 1,
                    "description": "The next sequential number that will be used for the next credit note"
                  },
                  "prefix": {
                    "type": "boolean",
                    "description": "The prefix of the sequence"
                  },
                  "reset_to_zero": {
                    "type": "boolean",
                    "default": false,
                    "description": "When `true`, the sequence will be resetted to 1 every year"
                  }
                },
                "required": [
                  "prefix"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/credit_note_numbering_sequence"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      }
    },
    "/credit_note_numbering_sequences/{id}": {
      "get": {
        "summary": "Retrieve a Single Credit Note Numbering Sequence",
        "operationId": "Credit Note Numbering Sequences_Show",
        "tags": [
          "Credit Note Numbering Sequences"
        ],
        "description": "Returns a Single Credit Note Numbering Sequence by its ID.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/credit_note_numbering_sequence"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      }
    },
    "/credit_note_numbering_sequences/{id}/default": {
      "patch": {
        "summary": "Set a Credit Note Numbering Sequence as default",
        "operationId": "Credit Note Numbering Sequences_Default",
        "tags": [
          "Credit Note Numbering Sequences"
        ],
        "description": "Set a Credit Note Numbering Sequence as default.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/credit_note_numbering_sequence"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      }
    },
    "/credit_notes": {
      "get": {
        "summary": "List Credit Notes",
        "operationId": "Credit Notes_Index",
        "tags": [
          "Credit Notes"
        ],
        "description": "Returns a list of Credit Notes.",
        "parameters": [
          {
            "name": "credit_note_date",
            "in": "query",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "gte": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Filter on objects created on or after the value provided"
                },
                "lte": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Filter on objects created on or before the value provided"
                }
              }
            }
          },
          {
            "name": "customer",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "A filter on the list based on the customer’s ID. The value must be a string."
            },
            "description": "A filter on the list based on the customer’s ID. The value must be a string."
          },
          {
            "name": "ending_before",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "required": false,
              "description": "Pagination cursor"
            },
            "description": "Pagination cursor"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "required": false,
              "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100."
            },
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100."
          },
          {
            "name": "invoice",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "A filter on the list based on the invoice's ID. The value must be a string."
            },
            "description": "A filter on the list based on the invoice's ID. The value must be a string."
          },
          {
            "name": "source",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "example": "cus_xxxxxxxxx",
              "description": "ID of the external object this customer was synced from, to filter results"
            },
            "description": "ID of the external object this customer was synced from, to filter results"
          },
          {
            "name": "starting_after",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "required": false,
              "description": "Pagination cursor"
            },
            "description": "Pagination cursor"
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "draft",
                "confirmed"
              ],
              "description": "A filter on the list based on the `status` value"
            },
            "description": "A filter on the list based on the `status` value"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/CreditNotesListResponse"
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      },
      "post": {
        "summary": "Create a credit note",
        "operationId": "Credit Notes_Create",
        "tags": [
          "Credit Notes"
        ],
        "description": "Create a credit note. Its status will be `draft`",
        "requestBody": {
          "required": false,
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "currency": {
                    "type": "string",
                    "description": "A string representing the ISO-code of the currency of the credit note"
                  },
                  "customer": {
                    "type": "string",
                    "description": "ID of the customer that is billed"
                  },
                  "credit_note_numbering_sequence": {
                    "type": "string",
                    "description": "ID of the credit note numbering sequence this credit note belongs to. If not filled, it uses the default credit note numbering sequence of the account."
                  },
                  "custom_fields": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "The name of the custom field."
                        },
                        "value": {
                          "type": "string",
                          "description": "The value of the custom field."
                        }
                      }
                    },
                    "description": "List of custom fields to be displayed in the credit note"
                  },
                  "description": {
                    "type": "string",
                    "description": "A string describing the credit note's description"
                  },
                  "document_template": {
                    "type": "string",
                    "description": "ID of the document template used by this credit note. If not filled, it uses the default document template of the account."
                  },
                  "invoice": {
                    "type": "string",
                    "description": "ID of the invoice this credit note refers to. Leave blank if it is not related to any particular invoice"
                  },
                  "language": {
                    "type": "string",
                    "description": "A string representing the locale that is used for the invoice."
                  },
                  "metadata": {
                    "type": "object",
                    "properties": {
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "description": "Set of key-value pairs that you can attach to an object"
                  },
                  "notes": {
                    "type": "string",
                    "description": "A custom text that you want to attach to and print on the invoice"
                  },
                  "sources": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "gateway": {
                          "type": "string",
                          "description": "The name of the gateway. E.g.: stripe, paypal"
                        },
                        "identifier": {
                          "type": "string",
                          "description": "The object ID from the gateway"
                        },
                        "source_type": {
                          "type": "string",
                          "description": "The object type from the gateway"
                        }
                      }
                    },
                    "description": "Information related to the platform and the ID of the object this credit note was synced from"
                  },
                  "supplier_tax_ids": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Array of supplier `tax_id` objects used for this invoice"
                  }
                },
                "required": [
                  "currency",
                  "customer"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/credit_note"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      }
    },
    "/credit_notes/{credit_note_id}/items": {
      "get": {
        "summary": "List Items",
        "operationId": "Items_Index",
        "tags": [
          "Items"
        ],
        "description": "Returns a list of Items.",
        "parameters": [
          {
            "name": "credit_note_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The ID the credit note to filter items on"
            },
            "description": "The ID the credit note to filter items on"
          },
          {
            "name": "ending_before",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "required": false,
              "description": "Pagination cursor"
            },
            "description": "Pagination cursor"
          },
          {
            "name": "invoice_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The ID the invoice to filter items on"
            },
            "description": "The ID the invoice to filter items on"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "required": false,
              "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100."
            },
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100."
          },
          {
            "name": "starting_after",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "required": false,
              "description": "Pagination cursor"
            },
            "description": "Pagination cursor"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ItemsListResponse"
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "# Definition\nGET https://apiv2.octobat.com/invoices/:invoice_id/items\nGET https://apiv2.octobat.com/credit_notes/:credit_note_id/items\n\n# Example request\n$ curl https://apiv2.octobat.com/invoices/oc_in_xxxxxx/items \\\n-u oc_test_skey_tkHCYYOUVrYyY5rBFZxNzgtt:\n\n$ curl https://apiv2.octobat.com/credit_notes/oc_cn_xxxxxx/items \\\n-u oc_test_skey_tkHCYYOUVrYyY5rBFZxNzgtt:"
          },
          {
            "lang": "ruby",
            "source": "# Example request\nrequire \"octobat\"\nOctobat.api_key = \"oc_test_skey_tkHCYYOUVrYyY5rBFZxNzgtt\"\ninvoice = Octobat::Invoice.retrieve( \"oc_in_xxxxx\" )\nitems = invoice.items.list( { limit: 3 } )"
          },
          {
            "lang": "node",
            "source": "// Example request\nconst octobat = require('octobat-npm')('oc_test_skey_mf8MurlswKilc78QolUN7Qtt');\noctobat.invoices.listItems(\n  \"oc_in_xxxxx\",\n  {\n    limit: 3,\n  }\n).then(function(items) {\n  // ...\n}).catch(function(err) {\n  // ...\n})"
          },
          {
            "lang": "php",
            "source": "// Example request\n\\Octobat\\Octobat::setApiKey('oc_test_skey_BQokikJOvBiI2HlWgH4olfQ2');\n$invoice=\\Octobat\\Invoice::retrieve([\n  \"id\" => \"oc_in_xxxxx\",\n  \"expand\" => [ 'items' ]\n])\n$items = $invoice->items->list( [ 'limit' => 3 ] );"
          }
        ]
      },
      "post": {
        "summary": "Create an item",
        "operationId": "Items_Create",
        "tags": [
          "Items"
        ],
        "parameters": [
          {
            "name": "credit_note_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The ID the credit note to filter items on"
            },
            "description": "The ID the credit note to filter items on"
          },
          {
            "name": "invoice_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The ID the invoice to filter items on"
            },
            "description": "The ID the invoice to filter items on"
          }
        ],
        "requestBody": {
          "required": false,
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "currency": {
                    "type": "string",
                    "description": "Currency ISO code. Must be the same than the related document's currency"
                  },
                  "description": {
                    "type": "string",
                    "description": "Name of the product / service sold."
                  },
                  "detailed_description": {
                    "type": "string",
                    "description": "An arbitrary string attached to the object. Often useful for displaying to users."
                  },
                  "discountable": {
                    "type": "boolean",
                    "description": "If true, discounts will apply to this invoice item. Always false for prorations."
                  },
                  "extratax_amount": {
                    "type": "integer",
                    "description": "The total price of the item without tax. You must fill either `unit_extratax_amount` or `unit_gross_amount` or `extratax_amount` or `gross_amount` depending on your needs, but filling both will return an error"
                  },
                  "gross_amount": {
                    "type": "integer",
                    "description": "The total price of the item with tax included. You must fill either `unit_extratax_amount` or `unit_gross_amount` or `extratax_amount` or `gross_amount` depending on your needs, but filling both will return an error"
                  },
                  "period": {
                    "type": "object",
                    "properties": {
                      "period_end": {
                        "type": "string",
                        "format": "date-time",
                        "description": "End of the line item’s billing period"
                      },
                      "period_start": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Start of the line item’s billing period"
                      }
                    },
                    "required": [
                      "period_end",
                      "period_start"
                    ],
                    "description": "The period associated with this item. You can leave it blank if the revenue incurred by the item should not be splitted among months/years."
                  },
                  "product": {
                    "type": "string",
                    "description": "ID of the product this item refers to"
                  },
                  "product_type": {
                    "type": "string",
                    "description": "Code of the product type the item refers to. Useful for reporting / thresholds. Copied from `tax_evidence` if filled."
                  },
                  "quantity": {
                    "type": "integer",
                    "description": "The quantity of this item purchased by the customer"
                  },
                  "sale_mode": {
                    "type": "string",
                    "enum": [
                      "B2B",
                      "B2C"
                    ],
                    "description": "Represents if the sale is considered as a B2B or a B2C. Copied from `tax_evidence` if filled."
                  },
                  "sources": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "gateway": {
                          "type": "string",
                          "description": "The name of the gateway. E.g.: stripe, paypal"
                        },
                        "identifier": {
                          "type": "string",
                          "description": "The object ID from the gateway"
                        },
                        "source_type": {
                          "type": "string",
                          "description": "The object type from the gateway"
                        }
                      }
                    },
                    "description": "Information related to the platform and the ID of the object this item was synced from"
                  },
                  "tax": {
                    "type": "string",
                    "example": "eu-vat",
                    "description": "The ID of the tax object that applies to this item. Copied from `tax_evidence` if filled."
                  },
                  "tax_evidence": {
                    "type": "string",
                    "description": "ID of the tax evidence this item is linked to. When filled, `tax_rate`, `tax`, `product_type`, `sale_mode`, and `declare_in_region` fields will be directly filled out from the `tax_evidence` object"
                  },
                  "tax_rate": {
                    "type": "number",
                    "format": "float",
                    "default": 0,
                    "description": "The total tax percentage applied to the given item. Copied from `tax_evidence` if filled"
                  },
                  "unit_extratax_amount": {
                    "type": "integer",
                    "description": "The unit price of the item without tax. Tax-included amount will be computed then. You must fill either `unit_extratax_amount` or `unit_gross_amount` or `extratax_amount` or `gross_amount` depending on your needs, but filling both will return an error"
                  },
                  "unit_gross_amount": {
                    "type": "integer",
                    "description": "The unit price of the item with tax included. Tax-excluded amount will be computed then. You must fill either `unit_extratax_amount` or `unit_gross_amount` or `extratax_amount` or `gross_amount` depending on your needs, but filling both will return an error"
                  }
                },
                "required": [
                  "currency"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/item"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "# Definition\nPOST https://apiv2.octobat.com/invoices/:invoice_id/items\nPOST https://apiv2.octobat.com/invoices/:credit_note_id/items\n\n# Example request (with tax evidence and unit tax exclusive scheme)\n$ curl -X POST https://apiv2.octobat.com/invoices/oc_in_xxxxx/items \\\n-u oc_test_skey_tkHCYYOUVrYyY5rBFZxNzgtt: \\\n-d currency=EUR \\\n-d description='Item description' \\\n-d unit_extratax_amount=1000 \\\n-d tax_evidence=oc_tev_xxxxxxx\n\n# Example request (without tax evidence, and tax-inclusive scheme)\n$ curl -X POST https://apiv2.octobat.com/invoices/oc_in_xxxxx/items \\\n-u oc_test_skey_tkHCYYOUVrYyY5rBFZxNzgtt: \\\n-d currency=EUR \\\n-d description='Item description' \\\n-d gross_amount=1200 \\\n-d tax=eu-vat\n-d tax_rate=20"
          },
          {
            "lang": "ruby",
            "source": "# Example request\nrequire \"octobat\"\nOctobat.api_key = \"oc_test_skey_tkHCYYOUVrYyY5rBFZxNzgtt\"\ninvoice = Octobat::Invoice.retrieve( \"oc_in_xxxxx\" )\n\n# Item with tax evidence, and tax-exclusive scheme\nitem = invoice.items.create( {\n  currency: 'EUR',\n  description: 'Item Description',\n  unit_extratax_amount: 1000,\n  tax_evidence: 'oc_tev_xxxxxxx'\n} )\n\n# Item without tax evidence, and tax-inclusive scheme\nitem = invoice.items.create( {\n  currency: 'EUR',\n  description: 'Item Description',\n  gross_amount: 1200,\n  tax: 'eu-vat',\n  tax_rate: 20.0\n} )"
          },
          {
            "lang": "node",
            "source": "// Example request\nconst octobat = require('octobat-npm')('oc_test_skey_mf8MurlswKilc78QolUN7Qtt');\n\n// Item with tax evidence, and tax-exclusive scheme\noctobat.invoices.createItem(\n  \"oc_in_xxxxx\",\n  {\n    currency: 'EUR',\n    description: 'Item description',\n    unit_extratax_amount: 1000,\n    tax_evidence: \"oc_tev_xxxxxxx\"\n  }\n}).then(function(item) { // ... })\n\n// Item without tax evidence, and tax-inclusive scheme\noctobat.invoices.createItem(\n  \"oc_in_xxxxx\",\n  {\n    currency: 'EUR',\n    description: 'Item description',\n    gross_amount: 1200,\n    tax: \"eu-vat\",\n    tax_rate: 20.0\n  }\n}).then(function(item) { // ... })"
          },
          {
            "lang": "php",
            "source": "// Example request\n\\Octobat\\Octobat::setApiKey('oc_test_skey_BQokikJOvBiI2HlWgH4olfQ2');\n$invoice=\\Octobat\\Invoice::retrieve([\n  \"id\" => \"oc_in_xxxxx\",\n  \"expand\" => [ 'items' ]\n])\n\n// Item with tax evidence, and tax-exclusive scheme\n$item = $invoice->items->create( [\n  'currency' => 'EUR',\n  'description' => 'Item Description',\n  'unit_extratax_amount' => 1000,\n  'tax_evidence' => 'oc_tev_xxxxxxx'\n] );\n\n// Item without tax evidence, and tax-inclusive scheme\n$item = $invoice->items->create( [\n  'currency' => 'EUR',\n  'description' => 'Item Description',\n  'gross_amount' => 1200,\n  'tax' => 'eu-vat',\n  'tax_rate' => 20.0\n] );"
          }
        ]
      }
    },
    "/credit_notes/{credit_note_id}/items/{id}": {
      "get": {
        "summary": "Retrieve a single Item",
        "operationId": "Items_Show",
        "tags": [
          "Items"
        ],
        "description": "Returns a single Item by its ID.",
        "parameters": [
          {
            "name": "credit_note_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The ID the credit note to filter items on"
            },
            "description": "The ID the credit note to filter items on"
          },
          {
            "name": "invoice_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The ID the invoice to filter items on"
            },
            "description": "The ID the invoice to filter items on"
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/item"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "# Definition\nGET https://apiv2.octobat.com/invoices/:invoice_id/items/:id\nGET https://apiv2.octobat.com/credit_notes/:credit_note_id/items/:id\n\n# Example request\n$ curl https://apiv2.octobat.com/invoices/oc_in_xxxxxx/items/oc_it_yyyyyyyy \\\n-u oc_test_skey_tkHCYYOUVrYyY5rBFZxNzgtt:\n\n$ curl https://apiv2.octobat.com/credit_notes/oc_cn_xxxxxx/items/oc_it_yyyyyyyy \\\n-u oc_test_skey_tkHCYYOUVrYyY5rBFZxNzgtt:"
          },
          {
            "lang": "ruby",
            "source": "# Example request\nrequire \"octobat\"\nOctobat.api_key = \"oc_test_skey_tkHCYYOUVrYyY5rBFZxNzgtt\"\ninvoice = Octobat::Invoice.retrieve( \"oc_in_xxxxx\" )\nitems = invoice.items.retrieve( \"oc_it_yyyyyyyy\" )"
          },
          {
            "lang": "node",
            "source": "// Example request\nconst octobat = require('octobat-npm')('oc_test_skey_mf8MurlswKilc78QolUN7Qtt');\noctobat.invoices.retrieveItem(\"oc_in_xxxxxxx\", \"oc_it_yyyyyyyy\").then(function(item) {\n  // ...\n}).catch(function(err) {\n  // ...\n})"
          },
          {
            "lang": "php",
            "source": "// Example request\n\\Octobat\\Octobat::setApiKey('oc_test_skey_BQokikJOvBiI2HlWgH4olfQ2');\n$invoice=\\Octobat\\Invoice::retrieve([\n  \"id\" => \"oc_in_xxxxx\",\n  \"expand\" => [ 'items' ]\n])\n$items = $invoice->items->retrieve( 'oc_it_yyyyyyyy' );"
          }
        ]
      },
      "patch": {
        "summary": "Update a draft item",
        "operationId": "Items_Update",
        "tags": [
          "Items"
        ],
        "parameters": [
          {
            "name": "credit_note_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The ID the credit note to filter items on"
            },
            "description": "The ID the credit note to filter items on"
          },
          {
            "name": "invoice_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The ID the invoice to filter items on"
            },
            "description": "The ID the invoice to filter items on"
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": false,
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "description": {
                    "type": "string",
                    "description": "Name of the product / service sold."
                  },
                  "detailed_description": {
                    "type": "string",
                    "description": "An arbitrary string attached to the object. Often useful for displaying to users."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/item"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      },
      "put": {
        "summary": "Update a draft item",
        "operationId": "Items_Update",
        "tags": [
          "Items"
        ],
        "parameters": [
          {
            "name": "credit_note_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The ID the credit note to filter items on"
            },
            "description": "The ID the credit note to filter items on"
          },
          {
            "name": "invoice_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The ID the invoice to filter items on"
            },
            "description": "The ID the invoice to filter items on"
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": false,
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "description": {
                    "type": "string",
                    "description": "Name of the product / service sold."
                  },
                  "detailed_description": {
                    "type": "string",
                    "description": "An arbitrary string attached to the object. Often useful for displaying to users."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/item"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      },
      "delete": {
        "summary": "Delete a draft Item",
        "operationId": "Items_Destroy",
        "tags": [
          "Items"
        ],
        "description": "Delete a draft Item by its ID.",
        "parameters": [
          {
            "name": "credit_note_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The ID the credit note to filter items on"
            },
            "description": "The ID the credit note to filter items on"
          },
          {
            "name": "invoice_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The ID the invoice to filter items on"
            },
            "description": "The ID the invoice to filter items on"
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/deleted_item"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      }
    },
    "/credit_notes/{id}": {
      "get": {
        "summary": "Retrieve a Single Credit Note",
        "operationId": "Credit Notes_Show",
        "tags": [
          "Credit Notes"
        ],
        "description": "Returns a Single Credit Note by its ID.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/credit_note"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      },
      "patch": {
        "summary": "Update a draft credit note",
        "operationId": "Credit Notes_Update",
        "tags": [
          "Credit Notes"
        ],
        "description": "Update a draft credit note by its ID.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": false,
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "description": {
                    "type": "string",
                    "description": "A string describing the credit note's description"
                  },
                  "notes": {
                    "type": "string",
                    "description": "A custom text that you want to attach to and print on the credit note"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/credit_note"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      },
      "put": {
        "summary": "Update a draft credit note",
        "operationId": "Credit Notes_Update",
        "tags": [
          "Credit Notes"
        ],
        "description": "Update a draft credit note by its ID.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": false,
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "description": {
                    "type": "string",
                    "description": "A string describing the credit note's description"
                  },
                  "notes": {
                    "type": "string",
                    "description": "A custom text that you want to attach to and print on the credit note"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/credit_note"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      },
      "delete": {
        "summary": "Delete a draft CreditNote",
        "operationId": "Credit Notes_Destroy",
        "tags": [
          "Credit Notes"
        ],
        "description": "Delete a draft CreditNote by its ID. The credit note must be a `draft`",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/deleted_credit_note"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      }
    },
    "/credit_notes/{id}/cancel": {
      "patch": {
        "summary": "Cancel a credit note",
        "operationId": "Credit Notes_Cancel",
        "tags": [
          "Credit Notes"
        ],
        "description": "Cancel a credit note that has already been confirmed. It will move its `status` to `cancelled`, and generate a negative corresponding credit note.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/credit_note"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      }
    },
    "/credit_notes/{id}/confirm": {
      "patch": {
        "summary": "Confirm a `draft` credit note",
        "operationId": "Credit Notes_Confirm",
        "tags": [
          "Credit Notes"
        ],
        "description": "Confirm a credit note. It won't be editable anymore, and take its sequence number, as well as a credit note date. The PDF will be generated as well. The credit note must be a `draft` and have at least one `item` attached to be confirmed",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/credit_note"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      }
    },
    "/credit_notes/{id}/send": {
      "post": {
        "summary": "Send a credit note by email",
        "operationId": "Credit Notes_SendByEmail",
        "tags": [
          "Credit Notes"
        ],
        "description": "Send an credit note by Email by its ID.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/credit_note"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      }
    },
    "/customers": {
      "get": {
        "summary": "List Customers",
        "operationId": "Customers_Index",
        "tags": [
          "Customers"
        ],
        "description": "Returns a list of Customers.",
        "parameters": [
          {
            "name": "email",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "A filter on the list based on the customer’s email field. The value must be a string."
            },
            "description": "A filter on the list based on the customer’s email field. The value must be a string."
          },
          {
            "name": "ending_before",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "required": false,
              "description": "Pagination cursor"
            },
            "description": "Pagination cursor"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "required": false,
              "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100."
            },
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100."
          },
          {
            "name": "source",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "example": "cus_xxxxxxxxx",
              "description": "ID of the external object this customer was synced from, to filter results"
            },
            "description": "ID of the external object this customer was synced from, to filter results"
          },
          {
            "name": "starting_after",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "required": false,
              "description": "Pagination cursor"
            },
            "description": "Pagination cursor"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/CustomersListResponse"
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "# Definition\nGET https://apiv2.octobat.com/customers/\n\n# Example request\n$ curl https://apiv2.octobat.com/customers \\\n-u oc_test_skey_tkHCYYOUVrYyY5rBFZxNzgtt:"
          },
          {
            "lang": "ruby",
            "source": "# Example request\nrequire \"octobat\"\nOctobat.api_key = \"oc_test_skey_tkHCYYOUVrYyY5rBFZxNzgtt\"\nOctobat::Customer.list( { limit: 3} )"
          },
          {
            "lang": "node",
            "source": "// Example request\nconst octobat = require('octobat-npm')('oc_test_skey_mf8MurlswKilc78QolUN7Qtt');\noctobat.customers.list({\n  limit: 3,\n}).then(function(customers) {\n  // ...\n}).catch(function(err) {\n  // ...\n})"
          },
          {
            "lang": "php",
            "source": "// Example request\n\\Octobat\\Octobat::setApiKey('oc_test_skey_BQokikJOvBiI2HlWgH4olfQ2');\n$customers = \\Octobat\\Customer::all(['limit' => 3]);"
          }
        ]
      },
      "post": {
        "summary": "Create a customer",
        "operationId": "Customers_Create",
        "tags": [
          "Customers"
        ],
        "description": "Create a customer",
        "requestBody": {
          "required": false,
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "billing_address_line1": {
                    "type": "string"
                  },
                  "billing_address_line2": {
                    "type": "string"
                  },
                  "billing_address_city": {
                    "type": "string"
                  },
                  "billing_address_zip": {
                    "type": "string"
                  },
                  "billing_address_state": {
                    "type": "string"
                  },
                  "billing_address_country": {
                    "type": "string",
                    "example": "FR",
                    "description": "The billing address Country ISO Alpha 2 code of the customer"
                  },
                  "business_type": {
                    "type": "string",
                    "enum": [
                      "B2B",
                      "B2C"
                    ],
                    "description": "Fill if you want to force the customer to be considered as a B2B/B2C"
                  },
                  "document_settings": {
                    "type": "object",
                    "properties": {
                      "recipient_email": {
                        "type": "string",
                        "description": "Email address to which documents should be delivered automatically if different than the customer's email contact"
                      },
                      "email_cc": {
                        "type": "string",
                        "description": "Email address to which documents should be delivered automatically in cc"
                      },
                      "send_automatically": {
                        "type": "boolean",
                        "description": "Whether documents should be delivered automatically on integrations sync"
                      },
                      "custom_fields": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "The name of the custom field."
                            },
                            "value": {
                              "type": "string",
                              "description": "The value of the custom field."
                            }
                          }
                        },
                        "description": "List of custom fields to be displayed in documents"
                      }
                    },
                    "description": "The customer's default document settings"
                  },
                  "email": {
                    "type": "string",
                    "description": "The customer's email"
                  },
                  "metadata": {
                    "type": "object",
                    "properties": {
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "description": "Set of key-value pairs that you can attach to an object"
                  },
                  "name": {
                    "type": "string",
                    "description": "The customer's full name or business name"
                  },
                  "phone_number": {
                    "type": "string"
                  },
                  "preferred_locales": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "example": "fr-FR",
                      "description": "The locale code"
                    },
                    "description": "The customer's preferred locales (languages), ordered by preference"
                  },
                  "shipping": {
                    "type": "object",
                    "properties": {
                      "address_line1": {
                        "type": "string"
                      },
                      "address_line2": {
                        "type": "string"
                      },
                      "address_city": {
                        "type": "string"
                      },
                      "address_zip": {
                        "type": "string"
                      },
                      "address_state": {
                        "type": "string"
                      },
                      "address_country": {
                        "type": "string",
                        "example": "FR",
                        "description": "Must be an ISO alpha-2 code"
                      }
                    },
                    "description": "Shipping details of the customer. Appears on invoices"
                  },
                  "sources": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "gateway": {
                          "type": "string",
                          "description": "The name of the gateway. E.g.: stripe, paypal"
                        },
                        "identifier": {
                          "type": "string",
                          "description": "The object ID from the gateway"
                        },
                        "source_type": {
                          "type": "string",
                          "description": "The object type from the gateway"
                        }
                      }
                    },
                    "description": "Information related to the platform and the ID of the object this customer was synced from"
                  },
                  "tax_number": {
                    "type": "string",
                    "description": "The customer's tax ID"
                  },
                  "website": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customer"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "# Definition\nPOST https://apiv2.octobat.com/customers\n\n# Example request\n$ curl -X POST https://apiv2.octobat.com/customers \\\n-u oc_test_skey_tkHCYYOUVrYyY5rBFZxNzgtt: \\\n-d email=user@octobat.com \\\n-d name='John Doe' \\\n-d billing_address_country=FR"
          },
          {
            "lang": "ruby",
            "source": "# Example request\nrequire \"octobat\"\nOctobat.api_key = \"oc_test_skey_tkHCYYOUVrYyY5rBFZxNzgtt\"\n\nOctobat::Customer.create( {\n  email: 'user@octobat.com',\n  name: 'John Doe',\n  billing_address_country: 'FR'\n} )"
          },
          {
            "lang": "node",
            "source": "// Example request\nconst octobat = require('octobat-npm')('oc_test_skey_mf8MurlswKilc78QolUN7Qtt');\noctobat.customers.create({\n  email: \"user@octobat.com\",\n  name: \"John Doe\",\n  billing_address_country: \"FR\"\n}).then(function(customer) {\n  // ...\n}).catch(function(err) {\n  // ...\n})"
          },
          {
            "lang": "php",
            "source": "// Example request\n\\Octobat\\Octobat::setApiKey('oc_test_skey_BQokikJOvBiI2HlWgH4olfQ2');\n$customer = \\Octobat\\Customer::create([\n  'email' => 'user@octobat.com',\n  'name' => 'John Doe',\n  'billing_address_country' => 'FR'\n]);"
          }
        ]
      }
    },
    "/customers/{customer_id}/customer_balance_transactions": {
      "get": {
        "summary": "List CustomerBalanceTransactions",
        "operationId": "CustomerBalanceTransactions_Index",
        "tags": [
          "CustomerBalanceTransactions"
        ],
        "description": "Returns a list of Customer Balance Transactions.",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "required": false,
              "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100."
            },
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100."
          },
          {
            "name": "customer_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The ID the `customer` to filter items on"
            },
            "description": "The ID the `customer` to filter items on"
          },
          {
            "name": "starting_after",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "required": false,
              "description": "Pagination cursor"
            },
            "description": "Pagination cursor"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/CustomerBalanceTransactionsListResponse"
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      },
      "post": {
        "summary": "Create a customer balance transaction",
        "operationId": "CustomerBalanceTransactions_Create",
        "tags": [
          "CustomerBalanceTransactions"
        ],
        "parameters": [
          {
            "name": "customer_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The ID the customer to create balance transactions on"
            },
            "description": "The ID the customer to create balance transactions on"
          }
        ],
        "requestBody": {
          "required": false,
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "amount": {
                    "type": "integer",
                    "description": "The amount of the transaction. A negative value is a credit for the customer's balance, and a positive value is a debit to the customer's balance"
                  },
                  "balance_type": {
                    "type": "string",
                    "description": "Transaction type"
                  },
                  "currency": {
                    "type": "string",
                    "description": "Currency ISO code. Must be the same than the related customer's currency"
                  },
                  "credit_note": {
                    "type": "string",
                    "description": "The ID of the `credit_note` this `customer_balance_transaction` is related to"
                  },
                  "description": {
                    "type": "string",
                    "description": "Name of the product / service sold."
                  },
                  "invoice": {
                    "type": "string",
                    "description": "The ID of the `invoice` this `customer_balance_transaction` is related to"
                  },
                  "metadata": {
                    "type": "object",
                    "properties": {
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "description": "Set of key-value pairs that you can attach to an object"
                  }
                },
                "required": [
                  "amount",
                  "balance_type",
                  "currency"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customer_balance_transaction"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      }
    },
    "/customers/{customer_id}/customer_balance_transactions/{id}": {
      "get": {
        "summary": "Retrieve a single CustomerBalanceTransactions",
        "operationId": "CustomerBalanceTransactions_Show",
        "tags": [
          "CustomerBalanceTransactions"
        ],
        "description": "Returns a single Customer Balance Transaction by its ID.",
        "parameters": [
          {
            "name": "customer_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The ID the customer to filter balance transactions on"
            },
            "description": "The ID the customer to filter balance transactions on"
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/purchase_item"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      }
    },
    "/customers/{id}": {
      "get": {
        "summary": "Retrieve a Single Customer",
        "operationId": "Customers_Show",
        "tags": [
          "Customers"
        ],
        "description": "Returns a Single Customer by its ID.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customer"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "# Definition\nGET https://apiv2.octobat.com/customers/:id\n\n# Example request\n$ curl https://apiv2.octobat.com/customers/oc_cu_xxxxxxxx \\\n-u oc_test_skey_tkHCYYOUVrYyY5rBFZxNzgtt:"
          },
          {
            "lang": "ruby",
            "source": "# Example request\nrequire \"octobat\"\nOctobat.api_key = \"oc_test_skey_tkHCYYOUVrYyY5rBFZxNzgtt\"\n\nOctobat::Customer.retrieve(\"oc_cu_xxxxxxxx\")"
          },
          {
            "lang": "node",
            "source": "// Example request\nconst octobat = require('octobat-npm')('oc_test_skey_mf8MurlswKilc78QolUN7Qtt');\noctobat.customers.retrieve({\n  \"oc_cu_xxxxxxxx\"\n}).then(function(customer) {\n  // ...\n}).catch(function(err) {\n  // ...\n})"
          },
          {
            "lang": "php",
            "source": "// Example request\n\\Octobat\\Octobat::setApiKey('oc_test_skey_BQokikJOvBiI2HlWgH4olfQ2');\n$customer = \\Octobat\\Customer::retrieve(\"oc_cu_xxxxxxxx\");"
          }
        ]
      },
      "patch": {
        "summary": "Update a Single Customer",
        "operationId": "Customers_Update",
        "tags": [
          "Customers"
        ],
        "description": "Update a Single Customer by its ID.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": false,
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "billing_address_line1": {
                    "type": "string"
                  },
                  "billing_address_line2": {
                    "type": "string"
                  },
                  "billing_address_city": {
                    "type": "string"
                  },
                  "billing_address_zip": {
                    "type": "string"
                  },
                  "billing_address_state": {
                    "type": "string"
                  },
                  "billing_address_country": {
                    "type": "string",
                    "example": "FR",
                    "description": "The billing address Country ISO Alpha 2 code of the customer"
                  },
                  "business_type": {
                    "type": "string",
                    "enum": [
                      "B2B",
                      "B2C"
                    ],
                    "description": "Fill if you want to force the customer to be considered as a B2B/B2C"
                  },
                  "document_settings": {
                    "type": "object",
                    "properties": {
                      "recipient_email": {
                        "type": "string",
                        "description": "Email address to which documents should be delivered automatically if different than the customer's email contact"
                      },
                      "email_cc": {
                        "type": "string",
                        "description": "Email address to which documents should be delivered automatically in cc"
                      },
                      "send_automatically": {
                        "type": "boolean",
                        "description": "Whether documents should be delivered automatically on integrations sync"
                      },
                      "custom_fields": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "The name of the custom field."
                            },
                            "value": {
                              "type": "string",
                              "description": "The value of the custom field."
                            }
                          }
                        },
                        "description": "List of custom fields to be displayed in documents"
                      }
                    },
                    "description": "The customer's default document settings"
                  },
                  "email": {
                    "type": "string",
                    "description": "The customer's email"
                  },
                  "metadata": {
                    "type": "object",
                    "properties": {
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "description": "Set of key-value pairs that you can attach to an object"
                  },
                  "name": {
                    "type": "string",
                    "description": "The customer's full name or business name"
                  },
                  "phone_number": {
                    "type": "string"
                  },
                  "preferred_locales": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "example": "fr-FR",
                      "description": "The locale code"
                    },
                    "description": "The customer's preferred locales (languages), ordered by preference"
                  },
                  "shipping": {
                    "type": "object",
                    "properties": {
                      "address_line1": {
                        "type": "string"
                      },
                      "address_line2": {
                        "type": "string"
                      },
                      "address_city": {
                        "type": "string"
                      },
                      "address_zip": {
                        "type": "string"
                      },
                      "address_state": {
                        "type": "string"
                      },
                      "address_country": {
                        "type": "string",
                        "example": "FR",
                        "description": "Must be an ISO alpha-2 code"
                      }
                    },
                    "description": "Shipping details of the customer. Appears on invoices"
                  },
                  "sources": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "gateway": {
                          "type": "string",
                          "description": "The name of the gateway. E.g.: stripe, paypal"
                        },
                        "identifier": {
                          "type": "string",
                          "description": "The object ID from the gateway"
                        },
                        "source_type": {
                          "type": "string",
                          "description": "The object type from the gateway"
                        }
                      }
                    },
                    "description": "Information related to the platform and the ID of the object this customer was synced from"
                  },
                  "tax_number": {
                    "type": "string",
                    "description": "The customer's tax ID"
                  },
                  "website": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customer"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "# Definition\nPATCH https://apiv2.octobat.com/customers/:id\n\n# Example request\n$ curl -X PATCH https://apiv2.octobat.com/customers/oc_cu_xxxxxxxx \\\n-u oc_test_skey_tkHCYYOUVrYyY5rBFZxNzgtt: \\\n-d email=newemail@octobat.com"
          },
          {
            "lang": "ruby",
            "source": "# Example request\nrequire \"octobat\"\nOctobat.api_key = \"oc_test_skey_tkHCYYOUVrYyY5rBFZxNzgtt\"\n\ncustomer = Octobat::Customer.retrieve(\"oc_cu_xxxxxxxx\")\ncustomer.email = 'newemail@octobat.com'\ncustomer.save"
          },
          {
            "lang": "node",
            "source": "// Example request\nconst octobat = require('octobat-npm')('oc_test_skey_mf8MurlswKilc78QolUN7Qtt');\noctobat.customers.update(\n  \"oc_cu_xxxxxxxx\",\n  {\n    email: \"user@octobat.com\",\n    name: \"John Doe\",\n    billing_address_country: \"FR\"\n  }\n).then(function(customer) {\n  // ...\n}).catch(function(err) {\n  // ...\n})"
          },
          {
            "lang": "php",
            "source": "// Example request\n\\Octobat\\Octobat::setApiKey('oc_test_skey_BQokikJOvBiI2HlWgH4olfQ2');\n$customer = \\Octobat\\Customer::update(\n  \"oc_cu_xxxxxxxx\",\n  [ 'email' => 'newemail@octobat.com' ]\n);"
          }
        ]
      },
      "put": {
        "summary": "Update a Single Customer",
        "operationId": "Customers_Update",
        "tags": [
          "Customers"
        ],
        "description": "Update a Single Customer by its ID.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": false,
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "billing_address_line1": {
                    "type": "string"
                  },
                  "billing_address_line2": {
                    "type": "string"
                  },
                  "billing_address_city": {
                    "type": "string"
                  },
                  "billing_address_zip": {
                    "type": "string"
                  },
                  "billing_address_state": {
                    "type": "string"
                  },
                  "billing_address_country": {
                    "type": "string",
                    "example": "FR",
                    "description": "The billing address Country ISO Alpha 2 code of the customer"
                  },
                  "business_type": {
                    "type": "string",
                    "enum": [
                      "B2B",
                      "B2C"
                    ],
                    "description": "Fill if you want to force the customer to be considered as a B2B/B2C"
                  },
                  "document_settings": {
                    "type": "object",
                    "properties": {
                      "recipient_email": {
                        "type": "string",
                        "description": "Email address to which documents should be delivered automatically if different than the customer's email contact"
                      },
                      "email_cc": {
                        "type": "string",
                        "description": "Email address to which documents should be delivered automatically in cc"
                      },
                      "send_automatically": {
                        "type": "boolean",
                        "description": "Whether documents should be delivered automatically on integrations sync"
                      },
                      "custom_fields": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "The name of the custom field."
                            },
                            "value": {
                              "type": "string",
                              "description": "The value of the custom field."
                            }
                          }
                        },
                        "description": "List of custom fields to be displayed in documents"
                      }
                    },
                    "description": "The customer's default document settings"
                  },
                  "email": {
                    "type": "string",
                    "description": "The customer's email"
                  },
                  "metadata": {
                    "type": "object",
                    "properties": {
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "description": "Set of key-value pairs that you can attach to an object"
                  },
                  "name": {
                    "type": "string",
                    "description": "The customer's full name or business name"
                  },
                  "phone_number": {
                    "type": "string"
                  },
                  "preferred_locales": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "example": "fr-FR",
                      "description": "The locale code"
                    },
                    "description": "The customer's preferred locales (languages), ordered by preference"
                  },
                  "shipping": {
                    "type": "object",
                    "properties": {
                      "address_line1": {
                        "type": "string"
                      },
                      "address_line2": {
                        "type": "string"
                      },
                      "address_city": {
                        "type": "string"
                      },
                      "address_zip": {
                        "type": "string"
                      },
                      "address_state": {
                        "type": "string"
                      },
                      "address_country": {
                        "type": "string",
                        "example": "FR",
                        "description": "Must be an ISO alpha-2 code"
                      }
                    },
                    "description": "Shipping details of the customer. Appears on invoices"
                  },
                  "sources": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "gateway": {
                          "type": "string",
                          "description": "The name of the gateway. E.g.: stripe, paypal"
                        },
                        "identifier": {
                          "type": "string",
                          "description": "The object ID from the gateway"
                        },
                        "source_type": {
                          "type": "string",
                          "description": "The object type from the gateway"
                        }
                      }
                    },
                    "description": "Information related to the platform and the ID of the object this customer was synced from"
                  },
                  "tax_number": {
                    "type": "string",
                    "description": "The customer's tax ID"
                  },
                  "website": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customer"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "# Definition\nPATCH https://apiv2.octobat.com/customers/:id\n\n# Example request\n$ curl -X PATCH https://apiv2.octobat.com/customers/oc_cu_xxxxxxxx \\\n-u oc_test_skey_tkHCYYOUVrYyY5rBFZxNzgtt: \\\n-d email=newemail@octobat.com"
          },
          {
            "lang": "ruby",
            "source": "# Example request\nrequire \"octobat\"\nOctobat.api_key = \"oc_test_skey_tkHCYYOUVrYyY5rBFZxNzgtt\"\n\ncustomer = Octobat::Customer.retrieve(\"oc_cu_xxxxxxxx\")\ncustomer.email = 'newemail@octobat.com'\ncustomer.save"
          },
          {
            "lang": "node",
            "source": "// Example request\nconst octobat = require('octobat-npm')('oc_test_skey_mf8MurlswKilc78QolUN7Qtt');\noctobat.customers.update(\n  \"oc_cu_xxxxxxxx\",\n  {\n    email: \"user@octobat.com\",\n    name: \"John Doe\",\n    billing_address_country: \"FR\"\n  }\n).then(function(customer) {\n  // ...\n}).catch(function(err) {\n  // ...\n})"
          },
          {
            "lang": "php",
            "source": "// Example request\n\\Octobat\\Octobat::setApiKey('oc_test_skey_BQokikJOvBiI2HlWgH4olfQ2');\n$customer = \\Octobat\\Customer::update(\n  \"oc_cu_xxxxxxxx\",\n  [ 'email' => 'newemail@octobat.com' ]\n);"
          }
        ]
      },
      "delete": {
        "summary": "Delete a Single Customer",
        "operationId": "Customers_Destroy",
        "tags": [
          "Customers"
        ],
        "description": "Delete a Single Customer by its ID. The customer must have no documents, or an error is returned",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/deleted_customer"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      }
    },
    "/invoice_numbering_sequences": {
      "get": {
        "summary": "List Invoice Numbering Sequences",
        "operationId": "Invoice Numbering Sequences_Index",
        "tags": [
          "Invoice Numbering Sequences"
        ],
        "description": "Returns a list of Invoice Numbering Sequences.",
        "parameters": [
          {
            "name": "prefix",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "example": "INV-",
              "description": "Prefix of the invoice numbering sequence, to filter results"
            },
            "description": "Prefix of the invoice numbering sequence, to filter results"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/InvoiceNumberingSequencesListResponse"
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      },
      "post": {
        "summary": "Create an Invoice Numbering Sequence",
        "operationId": "Invoice Numbering Sequences_Create",
        "tags": [
          "Invoice Numbering Sequences"
        ],
        "description": "Create an Invoice Numbering Sequence.",
        "requestBody": {
          "required": false,
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "is_default": {
                    "type": "boolean"
                  },
                  "next_number": {
                    "type": "integer",
                    "default": 1,
                    "description": "The next sequential number that will be used for the next invoice"
                  },
                  "prefix": {
                    "type": "boolean",
                    "description": "The prefix of the sequence"
                  },
                  "reset_to_zero": {
                    "type": "boolean",
                    "default": false,
                    "description": "When `true`, the sequence will be resetted to 1 every year"
                  }
                },
                "required": [
                  "prefix"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/invoice_numbering_sequence"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      }
    },
    "/invoice_numbering_sequences/{id}": {
      "get": {
        "summary": "Retrieve a Single Invoice Numbering Sequence",
        "operationId": "Invoice Numbering Sequences_Show",
        "tags": [
          "Invoice Numbering Sequences"
        ],
        "description": "Returns a Single Invoice Numbering Sequence by its ID.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/invoice_numbering_sequence"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      }
    },
    "/invoice_numbering_sequences/{id}/default": {
      "patch": {
        "summary": "Set an Invoice Numbering Sequence as default",
        "operationId": "Invoice Numbering Sequences_Default",
        "tags": [
          "Invoice Numbering Sequences"
        ],
        "description": "Set an Invoice Numbering Sequence as default.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/invoice_numbering_sequence"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      }
    },
    "/invoices": {
      "get": {
        "summary": "List Invoices",
        "operationId": "Invoices_Index",
        "tags": [
          "Invoices"
        ],
        "description": "Returns a list of Invoices.",
        "parameters": [
          {
            "name": "customer",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "A filter on the list based on the customer’s ID. The value must be a string."
            },
            "description": "A filter on the list based on the customer’s ID. The value must be a string."
          },
          {
            "name": "ending_before",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "required": false,
              "description": "Pagination cursor"
            },
            "description": "Pagination cursor"
          },
          {
            "name": "invoice_date",
            "in": "query",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "gte": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Filter on objects created on or after the value provided"
                },
                "lte": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Filter on objects created on or before the value provided"
                }
              }
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "required": false,
              "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100."
            },
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100."
          },
          {
            "name": "payment_status",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "paid",
                "unpaid"
              ],
              "description": "A filter on the list based on the `payment_status` value. `unpaid` returns partially paid and totally unpaid invoices"
            },
            "description": "A filter on the list based on the `payment_status` value. `unpaid` returns partially paid and totally unpaid invoices"
          },
          {
            "name": "sequence_number",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "A filter on the list based on the sequence number of the invoice"
            },
            "description": "A filter on the list based on the sequence number of the invoice"
          },
          {
            "name": "source",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "example": "ch_xxxxxxxxx",
              "description": "ID of the external object this invoice was synced from, to filter results"
            },
            "description": "ID of the external object this invoice was synced from, to filter results"
          },
          {
            "name": "starting_after",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "required": false,
              "description": "Pagination cursor"
            },
            "description": "Pagination cursor"
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "draft",
                "cancelled",
                "confirmed"
              ],
              "description": "A filter on the list based on the `status` value"
            },
            "description": "A filter on the list based on the `status` value"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/InvoicesListResponse"
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "# Definition\nGET https://apiv2.octobat.com/invoices/\n\n# Example request\n$ curl https://apiv2.octobat.com/invoices \\\n-u oc_test_skey_tkHCYYOUVrYyY5rBFZxNzgtt:"
          },
          {
            "lang": "ruby",
            "source": "# Example request\nrequire \"octobat\"\nOctobat.api_key = \"oc_test_skey_tkHCYYOUVrYyY5rBFZxNzgtt\"\ninvoices = Octobat::Invoice.list( { limit: 3} )"
          },
          {
            "lang": "node",
            "source": "// Example request\nconst octobat = require('octobat-npm')('oc_test_skey_mf8MurlswKilc78QolUN7Qtt');\noctobat.invoices.list({\n  limit: 3,\n}).then(function(invoices) {\n  // ...\n}).catch(function(err) {\n  // ...\n})"
          },
          {
            "lang": "php",
            "source": "// Example request\n\\Octobat\\Octobat::setApiKey('oc_test_skey_BQokikJOvBiI2HlWgH4olfQ2');\n$invoices = \\Octobat\\Invoice::all(['limit' => 3]);"
          }
        ]
      },
      "post": {
        "summary": "Create an invoice",
        "operationId": "Invoices_Create",
        "tags": [
          "Invoices"
        ],
        "description": "Create an invoice. Its status will be `draft`",
        "requestBody": {
          "required": false,
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "currency": {
                    "type": "string",
                    "description": "A string representing the ISO-code of the currency of the invoice"
                  },
                  "customer": {
                    "type": "string",
                    "description": "ID of the customer that is billed"
                  },
                  "custom_fields": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "The name of the custom field."
                        },
                        "value": {
                          "type": "string",
                          "description": "The value of the custom field."
                        }
                      }
                    },
                    "description": "List of custom fields to be displayed in the invoice"
                  },
                  "description": {
                    "type": "string",
                    "description": "A string describing the invoice's description"
                  },
                  "document_template": {
                    "type": "string",
                    "description": "ID of the document template used by this invoice. If not filled, it uses the default document template of the account."
                  },
                  "due_date": {
                    "type": "date",
                    "description": "The date on which payment for this invoice is due"
                  },
                  "invoice_numbering_sequence": {
                    "type": "string",
                    "description": "ID of the invoice numbering sequence this invoice belongs to. If not filled, it uses the default invoice numbering sequence of the account."
                  },
                  "language": {
                    "type": "string",
                    "description": "A string representing the locale that is used for the invoice."
                  },
                  "metadata": {
                    "type": "object",
                    "properties": {
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "description": "Set of key-value pairs that you can attach to an object"
                  },
                  "notes": {
                    "type": "string",
                    "description": "A custom text that you want to attach to and print on the invoice"
                  },
                  "on_behalf_of": {
                    "type": "boolean",
                    "default": false,
                    "description": "Plaza only. If set to `true`, the invoice will be generated by its issuer (platform account) on behalf of the seller (connected custom account), using an invoicing mandate."
                  },
                  "order": {
                    "type": "string",
                    "description": "ID of the `order` this invoice is related to."
                  },
                  "payment_recipients": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Array of `payment recipient` IDs that are accepted to pay this invoice"
                  },
                  "sources": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "gateway": {
                          "type": "string",
                          "description": "The name of the gateway. E.g.: stripe, paypal"
                        },
                        "identifier": {
                          "type": "string",
                          "description": "The object ID from the gateway"
                        },
                        "source_type": {
                          "type": "string",
                          "description": "The object type from the gateway"
                        }
                      }
                    },
                    "description": "Information related to the platform and the ID of the object this invoice was synced from"
                  },
                  "supplier_tax_ids": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Array of supplier `tax_id` objects used for this invoice"
                  }
                },
                "required": [
                  "currency",
                  "customer"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/invoice"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "# Definition\nPOST https://apiv2.octobat.com/invoices\n\n# Example request\n$ curl -X POST https://apiv2.octobat.com/invoices \\\n-u oc_test_skey_tkHCYYOUVrYyY5rBFZxNzgtt: \\\n-d customer=oc_cu_xxxxxxxx \\\n-d currency=EUR \\\n-d description=Freelancing Invoice"
          },
          {
            "lang": "ruby",
            "source": "# Example request\nrequire \"octobat\"\nOctobat.api_key = \"oc_test_skey_tkHCYYOUVrYyY5rBFZxNzgtt\"\n\ninvoice = Octobat::Invoice.create( {\n  customer: 'oc_cu_xxxxxxxx',\n  currency: 'EUR'\n} )"
          },
          {
            "lang": "node",
            "source": "// Example request\nconst octobat = require('octobat-npm')('oc_test_skey_mf8MurlswKilc78QolUN7Qtt');\noctobat.invoices.create({\n  customer: \"oc_cu_xxxxxxxx\",\n  currency: \"EUR\"\n}).then(function(invoice) {\n  // ...\n}).catch(function(err) {\n  // ...\n})"
          },
          {
            "lang": "php",
            "source": "// Example request\n\\Octobat\\Octobat::setApiKey('oc_test_skey_BQokikJOvBiI2HlWgH4olfQ2');\n$invoice = \\Octobat\\Invoice::create([\n  'customer' => 'oc_cu_xxxxxxxx',\n  'currency' => 'EUR'\n]);"
          }
        ]
      }
    },
    "/invoices/{id}": {
      "get": {
        "summary": "Retrieve a Single Invoice",
        "operationId": "Invoices_Show",
        "tags": [
          "Invoices"
        ],
        "description": "Returns a Single Invoice by its ID.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/invoice"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "# Definition\nGET https://apiv2.octobat.com/invoices/:id\n\n# Example request\n$ curl https://apiv2.octobat.com/invoices/oc_in_xxxxxxxx \\\n-u oc_test_skey_tkHCYYOUVrYyY5rBFZxNzgtt:"
          },
          {
            "lang": "ruby",
            "source": "# Example request\nrequire \"octobat\"\nOctobat.api_key = \"oc_test_skey_tkHCYYOUVrYyY5rBFZxNzgtt\"\n\ninvoice = Octobat::Invoice.retrieve(\"oc_in_xxxxxxxx\")"
          },
          {
            "lang": "node",
            "source": "// Example request\nconst octobat = require('octobat-npm')('oc_test_skey_mf8MurlswKilc78QolUN7Qtt');\noctobat.invoices.retrieve({\n  \"oc_in_xxxxxxxx\"\n}).then(function(invoice) {\n  // ...\n}).catch(function(err) {\n  // ...\n})"
          },
          {
            "lang": "php",
            "source": "// Example request\n\\Octobat\\Octobat::setApiKey('oc_test_skey_BQokikJOvBiI2HlWgH4olfQ2');\n$invoice = \\Octobat\\Invoice::retrieve(\"oc_in_xxxxxxxx\");"
          }
        ]
      },
      "patch": {
        "summary": "Update a draft invoice",
        "operationId": "Invoices_Update",
        "tags": [
          "Invoices"
        ],
        "description": "Update a draft invoice by its ID.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": false,
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "description": {
                    "type": "string",
                    "description": "A string describing the invoice's description"
                  },
                  "due_date": {
                    "type": "date",
                    "description": "The date on which payment for this invoice is due"
                  },
                  "metadata": {
                    "type": "object",
                    "properties": {
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "description": "Set of key-value pairs that you can attach to an object"
                  },
                  "notes": {
                    "type": "string",
                    "description": "A custom text that you want to attach to and print on the invoice"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/invoice"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "# Definition\nPATCH https://apiv2.octobat.com/invoices/:id\n\n# Example request\n$ curl -X PATCH https://apiv2.octobat.com/invoices/oc_in_xxxxxxxx \\\n-u oc_test_skey_tkHCYYOUVrYyY5rBFZxNzgtt: \\\n-d \"metadata[order_id]\"=6735"
          },
          {
            "lang": "ruby",
            "source": "# Example request\nrequire \"octobat\"\nOctobat.api_key = \"oc_test_skey_tkHCYYOUVrYyY5rBFZxNzgtt\"\n\ninvoice = Octobat::Invoice.retrieve(\"oc_in_xxxxxxxx\")\ninvoice.metadata = { order_id: '1042'}\ninvoice.save"
          },
          {
            "lang": "node",
            "source": "// Example request\nconst octobat = require('octobat-npm')('oc_test_skey_mf8MurlswKilc78QolUN7Qtt');\noctobat.invoices.update(\n  \"oc_in_xxxxxxxx\",\n  {\n    metadata: { order_id: '1042' }\n  }\n).then(function(invoice) {\n  // ...\n}).catch(function(err) {\n  // ...\n})"
          },
          {
            "lang": "php",
            "source": "// Example request\n\\Octobat\\Octobat::setApiKey('oc_test_skey_BQokikJOvBiI2HlWgH4olfQ2');\n$invoice = \\Octobat\\Invoice::update(\n  \"oc_in_xxxxxxxx\",\n  [\n    'metadata' => [ 'order_id' => '1042' ]\n  ]\n);"
          }
        ]
      },
      "put": {
        "summary": "Update a draft invoice",
        "operationId": "Invoices_Update",
        "tags": [
          "Invoices"
        ],
        "description": "Update a draft invoice by its ID.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": false,
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "description": {
                    "type": "string",
                    "description": "A string describing the invoice's description"
                  },
                  "due_date": {
                    "type": "date",
                    "description": "The date on which payment for this invoice is due"
                  },
                  "metadata": {
                    "type": "object",
                    "properties": {
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "description": "Set of key-value pairs that you can attach to an object"
                  },
                  "notes": {
                    "type": "string",
                    "description": "A custom text that you want to attach to and print on the invoice"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/invoice"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "# Definition\nPATCH https://apiv2.octobat.com/invoices/:id\n\n# Example request\n$ curl -X PATCH https://apiv2.octobat.com/invoices/oc_in_xxxxxxxx \\\n-u oc_test_skey_tkHCYYOUVrYyY5rBFZxNzgtt: \\\n-d \"metadata[order_id]\"=6735"
          },
          {
            "lang": "ruby",
            "source": "# Example request\nrequire \"octobat\"\nOctobat.api_key = \"oc_test_skey_tkHCYYOUVrYyY5rBFZxNzgtt\"\n\ninvoice = Octobat::Invoice.retrieve(\"oc_in_xxxxxxxx\")\ninvoice.metadata = { order_id: '1042'}\ninvoice.save"
          },
          {
            "lang": "node",
            "source": "// Example request\nconst octobat = require('octobat-npm')('oc_test_skey_mf8MurlswKilc78QolUN7Qtt');\noctobat.invoices.update(\n  \"oc_in_xxxxxxxx\",\n  {\n    metadata: { order_id: '1042' }\n  }\n).then(function(invoice) {\n  // ...\n}).catch(function(err) {\n  // ...\n})"
          },
          {
            "lang": "php",
            "source": "// Example request\n\\Octobat\\Octobat::setApiKey('oc_test_skey_BQokikJOvBiI2HlWgH4olfQ2');\n$invoice = \\Octobat\\Invoice::update(\n  \"oc_in_xxxxxxxx\",\n  [\n    'metadata' => [ 'order_id' => '1042' ]\n  ]\n);"
          }
        ]
      },
      "delete": {
        "summary": "Delete a draft Invoice",
        "operationId": "Invoices_Destroy",
        "tags": [
          "Invoices"
        ],
        "description": "Delete a draft Invoice by its ID. The invoice must be a `draft`",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/deleted_invoice"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "# Definition\nDELETE https://apiv2.octobat.com/invoices/:id\n\n# Example request\n$ curl -X DELETE https://apiv2.octobat.com/invoices/oc_in_xxxxxxxx \\\n-u oc_test_skey_tkHCYYOUVrYyY5rBFZxNzgtt: \\"
          },
          {
            "lang": "ruby",
            "source": "# Example request\nrequire \"octobat\"\nOctobat.api_key = \"oc_test_skey_tkHCYYOUVrYyY5rBFZxNzgtt\"\n\ninvoice = Octobat::Invoice.retrieve(\"oc_in_xxxxxxxx\")\ninvoice.delete"
          },
          {
            "lang": "node",
            "source": "// Example request\nconst octobat = require('octobat-npm')('oc_test_skey_mf8MurlswKilc78QolUN7Qtt');\noctobat.invoices.delete(\"oc_in_xxxxxxxx\").then(function(invoice) {\n  // ...\n}).catch(function(err) {\n  // ...\n})"
          },
          {
            "lang": "php",
            "source": "// Example request\n\\Octobat\\Octobat::setApiKey('oc_test_skey_BQokikJOvBiI2HlWgH4olfQ2');\n$invoice = \\Octobat\\Invoice::delete(\"oc_in_xxxxxxxx\");"
          }
        ]
      },
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/invoices/{id}/cancel": {
      "patch": {
        "summary": "Cancel an invoice",
        "operationId": "Invoices_Cancel",
        "tags": [
          "Invoices"
        ],
        "description": "Cancel an invoice that has already been confirmed. It will move its `status` to `cancelled`, and generate a credit note.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/invoice"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "# Definition\nPATCH https://apiv2.octobat.com/invoices/:id/cancel\n\n# Example request\n$ curl -X PATCH https://apiv2.octobat.com/invoices/oc_in_xxxxxxxx/cancel \\\n-u oc_test_skey_tkHCYYOUVrYyY5rBFZxNzgtt: \\"
          },
          {
            "lang": "ruby",
            "source": "# Example request\nrequire \"octobat\"\nOctobat.api_key = \"oc_test_skey_tkHCYYOUVrYyY5rBFZxNzgtt\"\n\ninvoice = Octobat::Invoice.retrieve(\"oc_in_xxxxxxxx\")\ninvoice.cancel"
          },
          {
            "lang": "node",
            "source": "// Example request\nconst octobat = require('octobat-npm')('oc_test_skey_mf8MurlswKilc78QolUN7Qtt');\noctobat.invoices.cancel(\"oc_in_xxxxxxxx\").then(function(invoice) {\n  // ...\n}).catch(function(err) {\n  // ...\n})"
          },
          {
            "lang": "php",
            "source": "// Example request\n\\Octobat\\Octobat::setApiKey('oc_test_skey_BQokikJOvBiI2HlWgH4olfQ2');\n$invoice = \\Octobat\\Invoice::cancel(\"oc_in_xxxxxxxx\");"
          }
        ]
      }
    },
    "/invoices/{id}/cancel_and_replace": {
      "patch": {
        "summary": "Cancel and replace an invoice",
        "operationId": "Invoices_CancelAndReplace",
        "tags": [
          "Invoices"
        ],
        "description": "Cancel an invoice that has already been confirmed, and generate a draft to replace it. It will move its `status` to `cancelled`, and generate a credit note.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/invoice"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "# Definition\nPATCH https://apiv2.octobat.com/invoices/:id/cancel_and_replace\n\n# Example request\n$ curl -X PATCH https://apiv2.octobat.com/invoices/oc_in_xxxxxxxx/cancel_and_replace \\\n-u oc_test_skey_tkHCYYOUVrYyY5rBFZxNzgtt: \\"
          },
          {
            "lang": "ruby",
            "source": "# Example request\nrequire \"octobat\"\nOctobat.api_key = \"oc_test_skey_tkHCYYOUVrYyY5rBFZxNzgtt\"\n\ninvoice = Octobat::Invoice.retrieve(\"oc_in_xxxxxxxx\")\ninvoice.cancel_and_replace"
          },
          {
            "lang": "node",
            "source": "// Example request\nconst octobat = require('octobat-npm')('oc_test_skey_mf8MurlswKilc78QolUN7Qtt');\noctobat.invoices.cancelAndReplace(\"oc_in_xxxxxxxx\").then(function(invoice) {\n  // ...\n}).catch(function(err) {\n  // ...\n})"
          },
          {
            "lang": "php",
            "source": "// Example request\n\\Octobat\\Octobat::setApiKey('oc_test_skey_BQokikJOvBiI2HlWgH4olfQ2');\n$invoice = \\Octobat\\Invoice::cancel_and_replace(\"oc_in_xxxxxxxx\");"
          }
        ]
      }
    },
    "/invoices/{id}/confirm": {
      "patch": {
        "summary": "Confirm a `draft` invoice",
        "operationId": "Invoices_Confirm",
        "tags": [
          "Invoices"
        ],
        "description": "Confirm an invoice. It won't be editable anymore, and take its sequence number, as well as an invoice date. The PDF will be generated as well. The invoice must be a `draft` and have at least one `item` attached to be confirmed",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/invoice"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "# Definition\nPATCH https://apiv2.octobat.com/invoices/:id/confirm\n\n# Example request\n$ curl -X PATCH https://apiv2.octobat.com/invoices/oc_in_xxxxxxxx/confirm \\\n-u oc_test_skey_tkHCYYOUVrYyY5rBFZxNzgtt: \\"
          },
          {
            "lang": "ruby",
            "source": "# Example request\nrequire \"octobat\"\nOctobat.api_key = \"oc_test_skey_tkHCYYOUVrYyY5rBFZxNzgtt\"\n\ninvoice = Octobat::Invoice.retrieve(\"oc_in_xxxxxxxx\")\ninvoice.confirm"
          },
          {
            "lang": "node",
            "source": "// Example request\nconst octobat = require('octobat-npm')('oc_test_skey_mf8MurlswKilc78QolUN7Qtt');\noctobat.invoices.confirm(\"oc_in_xxxxxxxx\").then(function(invoice) {\n  // ...\n}).catch(function(err) {\n  // ...\n})"
          },
          {
            "lang": "php",
            "source": "// Example request\n\\Octobat\\Octobat::setApiKey('oc_test_skey_BQokikJOvBiI2HlWgH4olfQ2');\n$invoice = \\Octobat\\Invoice::confirm(\"oc_in_xxxxxxxx\");"
          }
        ]
      }
    },
    "/invoices/{id}/mark_uncollectible": {
      "patch": {
        "summary": "Mark a `confirmed` invoice as uncollectible",
        "operationId": "Invoices_MarkUncollectible",
        "tags": [
          "Invoices"
        ],
        "description": "Mark an invoice as uncollectible significates that you're no longer expecting a payment for it, but it still remains in the list for accounting purposes.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/invoice"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      }
    },
    "/invoices/{id}/send": {
      "post": {
        "summary": "Send an invoice by Email",
        "operationId": "Invoices_SendByEmail",
        "tags": [
          "Invoices"
        ],
        "description": "Send an invoice by Email by its ID.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/invoice"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "# Definition\nPOST https://apiv2.octobat.com/invoices/:id/send\n\n# Example request\n$ curl -X POST https://apiv2.octobat.com/invoices/:id/send \\\n-u oc_test_skey_tkHCYYOUVrYyY5rBFZxNzgtt: \\"
          },
          {
            "lang": "ruby",
            "source": "# Example request\nrequire \"octobat\"\nOctobat.api_key = \"oc_test_skey_tkHCYYOUVrYyY5rBFZxNzgtt\"\n\ninvoice = Octobat::Invoice.retrieve(\"oc_in_xxxxxxxx\")\ninvoice.send_by_email"
          },
          {
            "lang": "node",
            "source": "// Example request\nconst octobat = require('octobat-npm')('oc_test_skey_mf8MurlswKilc78QolUN7Qtt');\noctobat.invoices.sendByEmail(\"oc_in_xxxxxxxx\").then(function(invoice) {\n  // ...\n}).catch(function(err) {\n  // ...\n})"
          },
          {
            "lang": "php",
            "source": "// Example request\n\\Octobat\\Octobat::setApiKey('oc_test_skey_BQokikJOvBiI2HlWgH4olfQ2');\n$invoice = \\Octobat\\Invoice::send_by_email(\"oc_in_xxxxxxxx\");"
          }
        ]
      }
    },
    "/invoices/{id}/set_payment_terms": {
      "patch": {
        "summary": "Modify a `confirmed` invoice payment terms",
        "operationId": "Invoices_SetPaymentTerms",
        "tags": [
          "Invoices"
        ],
        "description": "Modify an invoice payment terms. It must be confirmed",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/invoice"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      }
    },
    "/invoices/{invoice_id}/items": {
      "get": {
        "summary": "List Items",
        "operationId": "Items_Index",
        "tags": [
          "Items"
        ],
        "description": "Returns a list of Items.",
        "parameters": [
          {
            "name": "credit_note_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The ID the credit note to filter items on"
            },
            "description": "The ID the credit note to filter items on"
          },
          {
            "name": "ending_before",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "required": false,
              "description": "Pagination cursor"
            },
            "description": "Pagination cursor"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "required": false,
              "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100."
            },
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100."
          },
          {
            "name": "starting_after",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "required": false,
              "description": "Pagination cursor"
            },
            "description": "Pagination cursor"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ItemsListResponse"
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "# Definition\nGET https://apiv2.octobat.com/invoices/:invoice_id/items\nGET https://apiv2.octobat.com/credit_notes/:credit_note_id/items\n\n# Example request\n$ curl https://apiv2.octobat.com/invoices/oc_in_xxxxxx/items \\\n-u oc_test_skey_tkHCYYOUVrYyY5rBFZxNzgtt:\n\n$ curl https://apiv2.octobat.com/credit_notes/oc_cn_xxxxxx/items \\\n-u oc_test_skey_tkHCYYOUVrYyY5rBFZxNzgtt:"
          },
          {
            "lang": "ruby",
            "source": "# Example request\nrequire \"octobat\"\nOctobat.api_key = \"oc_test_skey_tkHCYYOUVrYyY5rBFZxNzgtt\"\ninvoice = Octobat::Invoice.retrieve( \"oc_in_xxxxx\" )\nitems = invoice.items.list( { limit: 3 } )"
          },
          {
            "lang": "node",
            "source": "// Example request\nconst octobat = require('octobat-npm')('oc_test_skey_mf8MurlswKilc78QolUN7Qtt');\noctobat.invoices.listItems(\n  \"oc_in_xxxxx\",\n  {\n    limit: 3,\n  }\n).then(function(items) {\n  // ...\n}).catch(function(err) {\n  // ...\n})"
          },
          {
            "lang": "php",
            "source": "// Example request\n\\Octobat\\Octobat::setApiKey('oc_test_skey_BQokikJOvBiI2HlWgH4olfQ2');\n$invoice=\\Octobat\\Invoice::retrieve([\n  \"id\" => \"oc_in_xxxxx\",\n  \"expand\" => [ 'items' ]\n])\n$items = $invoice->items->list( [ 'limit' => 3 ] );"
          }
        ]
      },
      "post": {
        "summary": "Create an item",
        "operationId": "Items_Create",
        "tags": [
          "Items"
        ],
        "parameters": [
          {
            "name": "credit_note_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The ID the credit note to filter items on"
            },
            "description": "The ID the credit note to filter items on"
          },
          {
            "name": "invoice_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The ID the invoice to filter items on"
            },
            "description": "The ID the invoice to filter items on"
          }
        ],
        "requestBody": {
          "required": false,
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "currency": {
                    "type": "string",
                    "description": "Currency ISO code. Must be the same than the related document's currency"
                  },
                  "description": {
                    "type": "string",
                    "description": "Name of the product / service sold."
                  },
                  "detailed_description": {
                    "type": "string",
                    "description": "An arbitrary string attached to the object. Often useful for displaying to users."
                  },
                  "discountable": {
                    "type": "boolean",
                    "description": "If true, discounts will apply to this invoice item. Always false for prorations."
                  },
                  "extratax_amount": {
                    "type": "integer",
                    "description": "The total price of the item without tax. You must fill either `unit_extratax_amount` or `unit_gross_amount` or `extratax_amount` or `gross_amount` depending on your needs, but filling both will return an error"
                  },
                  "gross_amount": {
                    "type": "integer",
                    "description": "The total price of the item with tax included. You must fill either `unit_extratax_amount` or `unit_gross_amount` or `extratax_amount` or `gross_amount` depending on your needs, but filling both will return an error"
                  },
                  "period": {
                    "type": "object",
                    "properties": {
                      "period_end": {
                        "type": "string",
                        "format": "date-time",
                        "description": "End of the line item’s billing period"
                      },
                      "period_start": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Start of the line item’s billing period"
                      }
                    },
                    "required": [
                      "period_end",
                      "period_start"
                    ],
                    "description": "The period associated with this item. You can leave it blank if the revenue incurred by the item should not be splitted among months/years."
                  },
                  "product": {
                    "type": "string",
                    "description": "ID of the product this item refers to"
                  },
                  "product_type": {
                    "type": "string",
                    "description": "Code of the product type the item refers to. Useful for reporting / thresholds. Copied from `tax_evidence` if filled."
                  },
                  "quantity": {
                    "type": "integer",
                    "description": "The quantity of this item purchased by the customer"
                  },
                  "sale_mode": {
                    "type": "string",
                    "enum": [
                      "B2B",
                      "B2C"
                    ],
                    "description": "Represents if the sale is considered as a B2B or a B2C. Copied from `tax_evidence` if filled."
                  },
                  "sources": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "gateway": {
                          "type": "string",
                          "description": "The name of the gateway. E.g.: stripe, paypal"
                        },
                        "identifier": {
                          "type": "string",
                          "description": "The object ID from the gateway"
                        },
                        "source_type": {
                          "type": "string",
                          "description": "The object type from the gateway"
                        }
                      }
                    },
                    "description": "Information related to the platform and the ID of the object this item was synced from"
                  },
                  "tax": {
                    "type": "string",
                    "example": "eu-vat",
                    "description": "The ID of the tax object that applies to this item. Copied from `tax_evidence` if filled."
                  },
                  "tax_evidence": {
                    "type": "string",
                    "description": "ID of the tax evidence this item is linked to. When filled, `tax_rate`, `tax`, `product_type`, `sale_mode`, and `declare_in_region` fields will be directly filled out from the `tax_evidence` object"
                  },
                  "tax_rate": {
                    "type": "number",
                    "format": "float",
                    "default": 0,
                    "description": "The total tax percentage applied to the given item. Copied from `tax_evidence` if filled"
                  },
                  "unit_extratax_amount": {
                    "type": "integer",
                    "description": "The unit price of the item without tax. Tax-included amount will be computed then. You must fill either `unit_extratax_amount` or `unit_gross_amount` or `extratax_amount` or `gross_amount` depending on your needs, but filling both will return an error"
                  },
                  "unit_gross_amount": {
                    "type": "integer",
                    "description": "The unit price of the item with tax included. Tax-excluded amount will be computed then. You must fill either `unit_extratax_amount` or `unit_gross_amount` or `extratax_amount` or `gross_amount` depending on your needs, but filling both will return an error"
                  }
                },
                "required": [
                  "currency"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/item"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "# Definition\nPOST https://apiv2.octobat.com/invoices/:invoice_id/items\nPOST https://apiv2.octobat.com/invoices/:credit_note_id/items\n\n# Example request (with tax evidence and unit tax exclusive scheme)\n$ curl -X POST https://apiv2.octobat.com/invoices/oc_in_xxxxx/items \\\n-u oc_test_skey_tkHCYYOUVrYyY5rBFZxNzgtt: \\\n-d currency=EUR \\\n-d description='Item description' \\\n-d unit_extratax_amount=1000 \\\n-d tax_evidence=oc_tev_xxxxxxx\n\n# Example request (without tax evidence, and tax-inclusive scheme)\n$ curl -X POST https://apiv2.octobat.com/invoices/oc_in_xxxxx/items \\\n-u oc_test_skey_tkHCYYOUVrYyY5rBFZxNzgtt: \\\n-d currency=EUR \\\n-d description='Item description' \\\n-d gross_amount=1200 \\\n-d tax=eu-vat\n-d tax_rate=20"
          },
          {
            "lang": "ruby",
            "source": "# Example request\nrequire \"octobat\"\nOctobat.api_key = \"oc_test_skey_tkHCYYOUVrYyY5rBFZxNzgtt\"\ninvoice = Octobat::Invoice.retrieve( \"oc_in_xxxxx\" )\n\n# Item with tax evidence, and tax-exclusive scheme\nitem = invoice.items.create( {\n  currency: 'EUR',\n  description: 'Item Description',\n  unit_extratax_amount: 1000,\n  tax_evidence: 'oc_tev_xxxxxxx'\n} )\n\n# Item without tax evidence, and tax-inclusive scheme\nitem = invoice.items.create( {\n  currency: 'EUR',\n  description: 'Item Description',\n  gross_amount: 1200,\n  tax: 'eu-vat',\n  tax_rate: 20.0\n} )"
          },
          {
            "lang": "node",
            "source": "// Example request\nconst octobat = require('octobat-npm')('oc_test_skey_mf8MurlswKilc78QolUN7Qtt');\n\n// Item with tax evidence, and tax-exclusive scheme\noctobat.invoices.createItem(\n  \"oc_in_xxxxx\",\n  {\n    currency: 'EUR',\n    description: 'Item description',\n    unit_extratax_amount: 1000,\n    tax_evidence: \"oc_tev_xxxxxxx\"\n  }\n}).then(function(item) { // ... })\n\n// Item without tax evidence, and tax-inclusive scheme\noctobat.invoices.createItem(\n  \"oc_in_xxxxx\",\n  {\n    currency: 'EUR',\n    description: 'Item description',\n    gross_amount: 1200,\n    tax: \"eu-vat\",\n    tax_rate: 20.0\n  }\n}).then(function(item) { // ... })"
          },
          {
            "lang": "php",
            "source": "// Example request\n\\Octobat\\Octobat::setApiKey('oc_test_skey_BQokikJOvBiI2HlWgH4olfQ2');\n$invoice=\\Octobat\\Invoice::retrieve([\n  \"id\" => \"oc_in_xxxxx\",\n  \"expand\" => [ 'items' ]\n])\n\n// Item with tax evidence, and tax-exclusive scheme\n$item = $invoice->items->create( [\n  'currency' => 'EUR',\n  'description' => 'Item Description',\n  'unit_extratax_amount' => 1000,\n  'tax_evidence' => 'oc_tev_xxxxxxx'\n] );\n\n// Item without tax evidence, and tax-inclusive scheme\n$item = $invoice->items->create( [\n  'currency' => 'EUR',\n  'description' => 'Item Description',\n  'gross_amount' => 1200,\n  'tax' => 'eu-vat',\n  'tax_rate' => 20.0\n] );"
          }
        ]
      },
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "invoice_id",
          "in": "path",
          "required": true,
          "description": "The ID the invoice to filter items on"
        }
      ]
    },
    "/invoices/{invoice_id}/items/{id}": {
      "get": {
        "summary": "Retrieve a single Item",
        "operationId": "Items_Show",
        "tags": [
          "Items"
        ],
        "description": "Returns a single Item by its ID.",
        "parameters": [
          {
            "name": "credit_note_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The ID the credit note to filter items on"
            },
            "description": "The ID the credit note to filter items on"
          },
          {
            "name": "invoice_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The ID the invoice to filter items on"
            },
            "description": "The ID the invoice to filter items on"
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/item"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "# Definition\nGET https://apiv2.octobat.com/invoices/:invoice_id/items/:id\nGET https://apiv2.octobat.com/credit_notes/:credit_note_id/items/:id\n\n# Example request\n$ curl https://apiv2.octobat.com/invoices/oc_in_xxxxxx/items/oc_it_yyyyyyyy \\\n-u oc_test_skey_tkHCYYOUVrYyY5rBFZxNzgtt:\n\n$ curl https://apiv2.octobat.com/credit_notes/oc_cn_xxxxxx/items/oc_it_yyyyyyyy \\\n-u oc_test_skey_tkHCYYOUVrYyY5rBFZxNzgtt:"
          },
          {
            "lang": "ruby",
            "source": "# Example request\nrequire \"octobat\"\nOctobat.api_key = \"oc_test_skey_tkHCYYOUVrYyY5rBFZxNzgtt\"\ninvoice = Octobat::Invoice.retrieve( \"oc_in_xxxxx\" )\nitems = invoice.items.retrieve( \"oc_it_yyyyyyyy\" )"
          },
          {
            "lang": "node",
            "source": "// Example request\nconst octobat = require('octobat-npm')('oc_test_skey_mf8MurlswKilc78QolUN7Qtt');\noctobat.invoices.retrieveItem(\"oc_in_xxxxxxx\", \"oc_it_yyyyyyyy\").then(function(item) {\n  // ...\n}).catch(function(err) {\n  // ...\n})"
          },
          {
            "lang": "php",
            "source": "// Example request\n\\Octobat\\Octobat::setApiKey('oc_test_skey_BQokikJOvBiI2HlWgH4olfQ2');\n$invoice=\\Octobat\\Invoice::retrieve([\n  \"id\" => \"oc_in_xxxxx\",\n  \"expand\" => [ 'items' ]\n])\n$items = $invoice->items->retrieve( 'oc_it_yyyyyyyy' );"
          }
        ]
      },
      "patch": {
        "summary": "Update a draft item",
        "operationId": "Items_Update",
        "tags": [
          "Items"
        ],
        "parameters": [
          {
            "name": "credit_note_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The ID the credit note to filter items on"
            },
            "description": "The ID the credit note to filter items on"
          },
          {
            "name": "invoice_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The ID the invoice to filter items on"
            },
            "description": "The ID the invoice to filter items on"
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": false,
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "description": {
                    "type": "string",
                    "description": "Name of the product / service sold."
                  },
                  "detailed_description": {
                    "type": "string",
                    "description": "An arbitrary string attached to the object. Often useful for displaying to users."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/item"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      },
      "put": {
        "summary": "Update a draft item",
        "operationId": "Items_Update",
        "tags": [
          "Items"
        ],
        "parameters": [
          {
            "name": "credit_note_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The ID the credit note to filter items on"
            },
            "description": "The ID the credit note to filter items on"
          },
          {
            "name": "invoice_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The ID the invoice to filter items on"
            },
            "description": "The ID the invoice to filter items on"
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": false,
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "description": {
                    "type": "string",
                    "description": "Name of the product / service sold."
                  },
                  "detailed_description": {
                    "type": "string",
                    "description": "An arbitrary string attached to the object. Often useful for displaying to users."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/item"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      },
      "delete": {
        "summary": "Delete a draft Item",
        "operationId": "Items_Destroy",
        "tags": [
          "Items"
        ],
        "description": "Delete a draft Item by its ID.",
        "parameters": [
          {
            "name": "credit_note_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The ID the credit note to filter items on"
            },
            "description": "The ID the credit note to filter items on"
          },
          {
            "name": "invoice_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The ID the invoice to filter items on"
            },
            "description": "The ID the invoice to filter items on"
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/deleted_item"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      }
    },
    "/outbound_transactions": {
      "get": {
        "summary": "List Outbound Transactions",
        "operationId": "OutboundTransactions_Index",
        "tags": [
          "OutboundTransactions"
        ],
        "description": "Returns a list of Outbound Transactions.",
        "parameters": [
          {
            "name": "flow_type",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "outbound_payment",
                "outbound_payment"
              ],
              "description": "A filter on the list based on the transaction flow type."
            },
            "description": "A filter on the list based on the transaction flow type."
          },
          {
            "name": "payment_recipient",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "A filter on the list based on the payment recipient ID."
            },
            "description": "A filter on the list based on the payment recipient ID."
          },
          {
            "name": "source",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "example": "tr_xxxxxxxxx",
              "description": "ID of the external object this outbound transaction was synced from, to filter results"
            },
            "description": "ID of the external object this outbound transaction was synced from, to filter results"
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "failed",
                "succeeded"
              ],
              "description": "A filter on the list based on the transaction status."
            },
            "description": "A filter on the list based on the transaction status."
          },
          {
            "name": "self_billing_credit_note",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "A filter on the list based on the self billing credit note ID."
            },
            "description": "A filter on the list based on the self billing credit note ID."
          },
          {
            "name": "self_billing_invoice",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "A filter on the list based on the self billing invoice ID."
            },
            "description": "A filter on the list based on the self billing invoice ID."
          },
          {
            "name": "supplier",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "A filter on the list based on the supplier ID."
            },
            "description": "A filter on the list based on the supplier ID."
          },
          {
            "name": "transaction_date",
            "in": "query",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "gte": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Filter on objects created on or after the value provided"
                },
                "lte": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Filter on objects created on or before the value provided"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/OutboundTransactionsListResponse"
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      },
      "post": {
        "summary": "Create an outbound transaction",
        "operationId": "OutboundTransactions_Create",
        "tags": [
          "OutboundTransactions"
        ],
        "description": "Create an outbound transaction",
        "requestBody": {
          "required": false,
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "amount": {
                    "type": "integer",
                    "description": "An integer representing the amount of the outbound transaction in the smallest currency unit (e.g., 100 cents to charge $1.00 or 100 to charge ¥100, a zero-decimal currency)"
                  },
                  "currency": {
                    "type": "string",
                    "description": "Three-letter ISO currency code, in lowercase"
                  },
                  "flow_type": {
                    "type": "string",
                    "enum": [
                      "outbound_payment",
                      "outbound_refund"
                    ],
                    "description": "A string representing the inner type of the outbound transaction"
                  },
                  "self_billing_credit_note": {
                    "type": "string",
                    "description": "ID of the self billing credit note this outbound transaction is linked to."
                  },
                  "self_billing_invoice": {
                    "type": "string",
                    "description": "ID of the self billing invoice this outbound transaction is linked to."
                  },
                  "status": {
                    "type": "string",
                    "enum": [
                      "failed",
                      "succeeded"
                    ],
                    "description": "A string representing the outcome of the outbound transaction"
                  },
                  "supplier": {
                    "type": "string",
                    "description": "ID of the supplier this outbound transaction refers to"
                  },
                  "sources": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "gateway": {
                          "type": "string",
                          "description": "The name of the gateway. E.g.: stripe, paypal"
                        },
                        "identifier": {
                          "type": "string",
                          "description": "The object ID from the gateway"
                        },
                        "source_type": {
                          "type": "string",
                          "description": "The object type from the gateway"
                        }
                      }
                    },
                    "description": "Information related to the platform and the ID of the object this transaction was synced from"
                  },
                  "transaction_date": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The datetime this transaction was recorded"
                  }
                },
                "required": [
                  "amount",
                  "currency",
                  "flow_type",
                  "status",
                  "supplier"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/transaction"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      }
    },
    "/outbound_transactions/{id}": {
      "get": {
        "summary": "Retrieve a Single Outbound Transaction",
        "operationId": "OutboundTransactions_Show",
        "tags": [
          "OutboundTransactions"
        ],
        "description": "Returns a Single Outbound Transaction by its ID.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/outbound_transaction"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      }
    },
    "/payment_recipient_references": {
      "get": {
        "summary": "List Payment Recipient References",
        "operationId": "PaymentRecipientReferences_Index",
        "tags": [
          "PaymentRecipientReferences"
        ],
        "description": "Returns a list of Payment Recipient References.",
        "responses": {
          "200": {
            "$ref": "#/components/responses/PaymentRecipientReferencesListResponse"
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      }
    },
    "/payment_recipient_references/{id}": {
      "get": {
        "summary": "Retrieve a Single Payment Recipient Reference",
        "operationId": "PaymentRecipientReferences_Show",
        "tags": [
          "PaymentRecipientReferences"
        ],
        "description": "Returns a Single Payment Recipient Reference by its ID.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/payment_recipient_reference"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      }
    },
    "/payment_recipients": {
      "get": {
        "summary": "List Payment Recipients",
        "operationId": "PaymentRecipients_Index",
        "tags": [
          "PaymentRecipients"
        ],
        "description": "Returns a list of Payment Recipients.",
        "responses": {
          "200": {
            "$ref": "#/components/responses/PaymentRecipientsListResponse"
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      },
      "post": {
        "summary": "Create a Payment Recipient",
        "operationId": "PaymentRecipients_Create",
        "tags": [
          "PaymentRecipients"
        ],
        "description": "Create a Payment Recipient",
        "requestBody": {
          "required": false,
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The internal name of the payment recipient"
                  },
                  "payment_recipient_reference": {
                    "type": "string",
                    "description": "The ID of the payment recipient reference for this payment recipient"
                  },
                  "details": {
                    "type": "object",
                    "properties": {
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "description": "Set of key-value pairs that you can attach to an object"
                  }
                },
                "required": [
                  "name",
                  "payment_recipient_reference"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/payment_recipient"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      }
    },
    "/payment_recipients/{id}": {
      "patch": {
        "summary": "Update a Payment Recipient",
        "operationId": "PaymentRecipients_Update",
        "tags": [
          "PaymentRecipients"
        ],
        "description": "Update a Payment Recipient by its ID",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": false,
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The internal name of the payment recipient"
                  },
                  "details": {
                    "type": "object",
                    "properties": {
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "description": "Set of key-value pairs that you can attach to an object"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/payment_recipient"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      },
      "put": {
        "summary": "Update a Payment Recipient",
        "operationId": "PaymentRecipients_Update",
        "tags": [
          "PaymentRecipients"
        ],
        "description": "Update a Payment Recipient by its ID",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": false,
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The internal name of the payment recipient"
                  },
                  "details": {
                    "type": "object",
                    "properties": {
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "description": "Set of key-value pairs that you can attach to an object"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/payment_recipient"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      },
      "get": {
        "summary": "Retrieve a Single Payment Recipient",
        "operationId": "PaymentRecipients_Show",
        "tags": [
          "PaymentRecipients"
        ],
        "description": "Returns a Single Payment Recipient by its ID.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/payment_recipient"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      }
    },
    "/plaza/accounts": {
      "get": {
        "summary": "List Accounts",
        "operationId": "Accounts_Index",
        "tags": [
          "Accounts"
        ],
        "description": "Returns a list of accounts.",
        "parameters": [
          {
            "name": "active",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "Filter the list on accounts that are active / inactive. The value must be a boolean."
            },
            "description": "Filter the list on accounts that are active / inactive. The value must be a boolean."
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/AccountsListResponse"
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      },
      "post": {
        "summary": "Create an account",
        "operationId": "Accounts_Create",
        "tags": [
          "Accounts"
        ],
        "requestBody": {
          "required": false,
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "custom"
                    ],
                    "description": "The type of Octobat account to create."
                  },
                  "email": {
                    "type": "string",
                    "example": "john.doe@domain.tld",
                    "description": "The email address of the account holder"
                  },
                  "country": {
                    "type": "string",
                    "description": "The country in which the account holder resides, or in which the business is legally established. This should be an ISO 3166-1 alpha-2 country code"
                  },
                  "requested_capabilities": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "tax",
                        "invoicing"
                      ],
                      "description": "The set of capabilities you want to unlock for this account. Each capability will be inactive until you have provided its specific requirements."
                    }
                  },
                  "business_type": {
                    "type": "string",
                    "enum": [
                      "individual",
                      "company"
                    ],
                    "description": "The business type."
                  },
                  "company": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "The company legal name"
                      },
                      "address": {
                        "type": "object",
                        "properties": {
                          "city": {
                            "type": "string"
                          },
                          "country": {
                            "type": "string",
                            "description": "Two-letter country code (ISO 3166-1 alpha-2)"
                          },
                          "line1": {
                            "type": "string"
                          },
                          "line2": {
                            "type": "string"
                          },
                          "zip": {
                            "type": "string",
                            "description": "Postal code or Zip Code"
                          },
                          "state": {
                            "type": "string"
                          }
                        },
                        "description": "The company billing address"
                      },
                      "tax_id": {
                        "type": "string"
                      },
                      "phone_number": {
                        "type": "string"
                      },
                      "legal": {
                        "type": "object",
                        "properties": {
                          "registry_office": {
                            "type": "string"
                          },
                          "registration_id": {
                            "type": "string"
                          },
                          "capital": {
                            "type": "string"
                          }
                        },
                        "description": "Legal additional information that could be requested in a given country"
                      }
                    },
                    "description": "Information about the company or business. This field is null unless business_type is set to `company`"
                  },
                  "individual": {
                    "type": "object",
                    "properties": {
                      "address": {
                        "type": "object",
                        "properties": {
                          "city": {
                            "type": "string"
                          },
                          "country": {
                            "type": "string",
                            "description": "Two-letter country code (ISO 3166-1 alpha-2)"
                          },
                          "line1": {
                            "type": "string"
                          },
                          "line2": {
                            "type": "string"
                          },
                          "zip": {
                            "type": "string",
                            "description": "Postal code or Zip Code"
                          },
                          "state": {
                            "type": "string"
                          }
                        },
                        "description": "The company billing address"
                      },
                      "first_name": {
                        "type": "string"
                      },
                      "last_name": {
                        "type": "string"
                      },
                      "gender": {
                        "type": "string"
                      },
                      "dob": {
                        "type": "object",
                        "properties": {
                          "day": {
                            "type": "integer"
                          },
                          "month": {
                            "type": "integer"
                          },
                          "year": {
                            "type": "integer"
                          }
                        },
                        "required": [
                          "day",
                          "month",
                          "year"
                        ],
                        "description": "The individual’s date of birth."
                      },
                      "phone_number": {
                        "type": "string"
                      }
                    },
                    "description": "Information about the person represented by the account. This field is null unless business_type is set to `individual`"
                  },
                  "business_profile": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "The customer-facing business name"
                      },
                      "support_url": {
                        "type": "string",
                        "description": "A publicly available email address for sending support issues to"
                      },
                      "url": {
                        "type": "string",
                        "description": "A publicly available website for the business"
                      }
                    },
                    "description": "Business Information about the account"
                  },
                  "settings": {
                    "type": "object",
                    "properties": {
                      "branding": {
                        "type": "object",
                        "properties": {
                          "logo": {
                            "type": "string",
                            "description": "The logo of the account"
                          },
                          "primary_color": {
                            "type": "string",
                            "example": "#DC2103",
                            "description": "A CSS hex color representing the account"
                          }
                        }
                      },
                      "tax": {
                        "type": "object",
                        "properties": {
                          "collection": {
                            "type": "boolean",
                            "default": true,
                            "description": "Whether your account needs to collect tax or not"
                          },
                          "default_product_type": {
                            "type": "string",
                            "default": "eservice",
                            "enum": [
                              "eservice",
                              "saas",
                              "physical",
                              "standard"
                            ],
                            "description": "The default tax class for the connected account"
                          },
                          "exemption_due_to_threshold": {
                            "type": "boolean",
                            "default": false,
                            "description": "Whether your account is tax-exempted in their own country"
                          },
                          "vat_moss_registration": {
                            "type": "boolean",
                            "default": false,
                            "description": "Whether your account is registered to the MOSS for EU VAT collection"
                          }
                        },
                        "required": [
                          "default_product_type"
                        ],
                        "description": "Settings for the tax capability"
                      },
                      "invoicing": {
                        "type": "object",
                        "properties": {
                          "mandate": {
                            "type": "string",
                            "description": "TODO mandate"
                          }
                        },
                        "description": "Settings for the invoicing capability"
                      }
                    },
                    "description": "Options for customizing how the account functions within Octobat"
                  },
                  "metadata": {
                    "type": "object",
                    "properties": {
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "description": "Set of key-value pairs that you can attach to an object"
                  }
                },
                "required": [
                  "type",
                  "email",
                  "country",
                  "requested_capabilities"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/account"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      }
    },
    "/plaza/accounts/{account_id}/capabilities": {
      "get": {
        "summary": "List Account capabilities",
        "operationId": "Capabilities_Index",
        "tags": [
          "Capabilities"
        ],
        "description": "Returns a list of capabilities.",
        "responses": {
          "200": {
            "$ref": "#/components/responses/CapabilityListResponse"
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      }
    },
    "/plaza/accounts/{account_id}/capabilities/{id}": {
      "get": {
        "summary": "Retrieve a Single Capability",
        "operationId": "Capabilities_Show",
        "tags": [
          "Capabilities"
        ],
        "description": "Returns a Single Capability by its ID.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/capability"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      }
    },
    "/plaza/accounts/{account_id}/capabilities/{id}/request": {
      "patch": {
        "summary": "Request a Single Capability",
        "operationId": "Capabilities_Ask",
        "tags": [
          "Capabilities"
        ],
        "description": "Request a Single Capability by its ID.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/capability"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      }
    },
    "/plaza/accounts/{id}": {
      "get": {
        "summary": "Retrieve a Single Account",
        "operationId": "Accounts_Show",
        "tags": [
          "Accounts"
        ],
        "description": "Returns a Single Account by its ID.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/account"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      },
      "patch": {
        "summary": "Update an account",
        "operationId": "Accounts_Update",
        "tags": [
          "Accounts"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": false,
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "description": "The email address of the account holder"
                  },
                  "business_type": {
                    "type": "string",
                    "enum": [
                      "individual",
                      "company"
                    ],
                    "description": "The business type."
                  },
                  "company": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "The company legal name"
                      },
                      "address": {
                        "type": "object",
                        "properties": {
                          "city": {
                            "type": "string"
                          },
                          "country": {
                            "type": "string",
                            "description": "Two-letter country code (ISO 3166-1 alpha-2)"
                          },
                          "line1": {
                            "type": "string"
                          },
                          "line2": {
                            "type": "string"
                          },
                          "zip": {
                            "type": "string",
                            "description": "Postal code or Zip Code"
                          },
                          "state": {
                            "type": "string"
                          }
                        },
                        "description": "The company billing address"
                      },
                      "tax_id": {
                        "type": "string"
                      },
                      "phone_number": {
                        "type": "string"
                      },
                      "legal": {
                        "type": "object",
                        "properties": {
                          "registry_office": {
                            "type": "string"
                          },
                          "registration_id": {
                            "type": "string"
                          },
                          "capital": {
                            "type": "string"
                          }
                        },
                        "description": "Legal additional information that could be requested in a given country"
                      }
                    },
                    "description": "Information about the company or business. This field is null unless business_type is set to `company`"
                  },
                  "individual": {
                    "type": "object",
                    "properties": {
                      "address": {
                        "type": "object",
                        "properties": {
                          "city": {
                            "type": "string"
                          },
                          "country": {
                            "type": "string",
                            "description": "Two-letter country code (ISO 3166-1 alpha-2)"
                          },
                          "line1": {
                            "type": "string"
                          },
                          "line2": {
                            "type": "string"
                          },
                          "zip": {
                            "type": "string",
                            "description": "Postal code or Zip Code"
                          },
                          "state": {
                            "type": "string"
                          }
                        },
                        "description": "The company billing address"
                      },
                      "first_name": {
                        "type": "string"
                      },
                      "last_name": {
                        "type": "string"
                      },
                      "gender": {
                        "type": "string"
                      },
                      "dob": {
                        "type": "object",
                        "properties": {
                          "day": {
                            "type": "integer"
                          },
                          "month": {
                            "type": "integer"
                          },
                          "year": {
                            "type": "integer"
                          }
                        },
                        "required": [
                          "day",
                          "month",
                          "year"
                        ],
                        "description": "The individual’s date of birth."
                      },
                      "phone_number": {
                        "type": "string"
                      }
                    },
                    "description": "Information about the person represented by the account. This field is null unless business_type is set to `individual`"
                  },
                  "business_profile": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "The customer-facing business name"
                      },
                      "support_url": {
                        "type": "string",
                        "description": "A publicly available email address for sending support issues to"
                      },
                      "url": {
                        "type": "string",
                        "description": "A publicly available website for the business"
                      }
                    },
                    "description": "Business Information about the account"
                  },
                  "settings": {
                    "type": "object",
                    "properties": {
                      "branding": {
                        "type": "object",
                        "properties": {
                          "logo": {
                            "type": "string",
                            "description": "The logo of the account"
                          },
                          "primary_color": {
                            "type": "string",
                            "description": "A CSS hex color representing the account"
                          }
                        }
                      },
                      "tax": {
                        "type": "object",
                        "properties": {
                          "collection": {
                            "type": "boolean",
                            "default": true,
                            "description": "Whether your account needs to collect tax or not"
                          },
                          "default_product_type": {
                            "type": "string",
                            "default": "eservice",
                            "enum": [
                              "eservice",
                              "saas",
                              "physical",
                              "standard"
                            ],
                            "description": "The default tax class for the connected account"
                          },
                          "exemption_due_to_threshold": {
                            "type": "boolean",
                            "default": false,
                            "description": "Whether your account is tax-exempted in their own country"
                          },
                          "vat_moss_registration": {
                            "type": "boolean",
                            "default": false,
                            "description": "Whether your account is registered to the MOSS for EU VAT collection"
                          }
                        },
                        "required": [
                          "default_product_type"
                        ],
                        "description": "Settings for the tax capability"
                      },
                      "invoicing": {
                        "type": "object",
                        "properties": {
                          "mandate": {
                            "type": "string",
                            "description": "TODO mandate"
                          }
                        },
                        "description": "Settings for the invoicing capability"
                      }
                    },
                    "description": "Options for customizing how the account functions within Octobat"
                  },
                  "metadata": {
                    "type": "object",
                    "properties": {
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "description": "Set of key-value pairs that you can attach to an object"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/account"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      },
      "put": {
        "summary": "Update an account",
        "operationId": "Accounts_Update",
        "tags": [
          "Accounts"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": false,
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "description": "The email address of the account holder"
                  },
                  "business_type": {
                    "type": "string",
                    "enum": [
                      "individual",
                      "company"
                    ],
                    "description": "The business type."
                  },
                  "company": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "The company legal name"
                      },
                      "address": {
                        "type": "object",
                        "properties": {
                          "city": {
                            "type": "string"
                          },
                          "country": {
                            "type": "string",
                            "description": "Two-letter country code (ISO 3166-1 alpha-2)"
                          },
                          "line1": {
                            "type": "string"
                          },
                          "line2": {
                            "type": "string"
                          },
                          "zip": {
                            "type": "string",
                            "description": "Postal code or Zip Code"
                          },
                          "state": {
                            "type": "string"
                          }
                        },
                        "description": "The company billing address"
                      },
                      "tax_id": {
                        "type": "string"
                      },
                      "phone_number": {
                        "type": "string"
                      },
                      "legal": {
                        "type": "object",
                        "properties": {
                          "registry_office": {
                            "type": "string"
                          },
                          "registration_id": {
                            "type": "string"
                          },
                          "capital": {
                            "type": "string"
                          }
                        },
                        "description": "Legal additional information that could be requested in a given country"
                      }
                    },
                    "description": "Information about the company or business. This field is null unless business_type is set to `company`"
                  },
                  "individual": {
                    "type": "object",
                    "properties": {
                      "address": {
                        "type": "object",
                        "properties": {
                          "city": {
                            "type": "string"
                          },
                          "country": {
                            "type": "string",
                            "description": "Two-letter country code (ISO 3166-1 alpha-2)"
                          },
                          "line1": {
                            "type": "string"
                          },
                          "line2": {
                            "type": "string"
                          },
                          "zip": {
                            "type": "string",
                            "description": "Postal code or Zip Code"
                          },
                          "state": {
                            "type": "string"
                          }
                        },
                        "description": "The company billing address"
                      },
                      "first_name": {
                        "type": "string"
                      },
                      "last_name": {
                        "type": "string"
                      },
                      "gender": {
                        "type": "string"
                      },
                      "dob": {
                        "type": "object",
                        "properties": {
                          "day": {
                            "type": "integer"
                          },
                          "month": {
                            "type": "integer"
                          },
                          "year": {
                            "type": "integer"
                          }
                        },
                        "required": [
                          "day",
                          "month",
                          "year"
                        ],
                        "description": "The individual’s date of birth."
                      },
                      "phone_number": {
                        "type": "string"
                      }
                    },
                    "description": "Information about the person represented by the account. This field is null unless business_type is set to `individual`"
                  },
                  "business_profile": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "The customer-facing business name"
                      },
                      "support_url": {
                        "type": "string",
                        "description": "A publicly available email address for sending support issues to"
                      },
                      "url": {
                        "type": "string",
                        "description": "A publicly available website for the business"
                      }
                    },
                    "description": "Business Information about the account"
                  },
                  "settings": {
                    "type": "object",
                    "properties": {
                      "branding": {
                        "type": "object",
                        "properties": {
                          "logo": {
                            "type": "string",
                            "description": "The logo of the account"
                          },
                          "primary_color": {
                            "type": "string",
                            "description": "A CSS hex color representing the account"
                          }
                        }
                      },
                      "tax": {
                        "type": "object",
                        "properties": {
                          "collection": {
                            "type": "boolean",
                            "default": true,
                            "description": "Whether your account needs to collect tax or not"
                          },
                          "default_product_type": {
                            "type": "string",
                            "default": "eservice",
                            "enum": [
                              "eservice",
                              "saas",
                              "physical",
                              "standard"
                            ],
                            "description": "The default tax class for the connected account"
                          },
                          "exemption_due_to_threshold": {
                            "type": "boolean",
                            "default": false,
                            "description": "Whether your account is tax-exempted in their own country"
                          },
                          "vat_moss_registration": {
                            "type": "boolean",
                            "default": false,
                            "description": "Whether your account is registered to the MOSS for EU VAT collection"
                          }
                        },
                        "required": [
                          "default_product_type"
                        ],
                        "description": "Settings for the tax capability"
                      },
                      "invoicing": {
                        "type": "object",
                        "properties": {
                          "mandate": {
                            "type": "string",
                            "description": "TODO mandate"
                          }
                        },
                        "description": "Settings for the invoicing capability"
                      }
                    },
                    "description": "Options for customizing how the account functions within Octobat"
                  },
                  "metadata": {
                    "type": "object",
                    "properties": {
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "description": "Set of key-value pairs that you can attach to an object"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/account"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      }
    },
    "/plaza/accounts/{id}/activate": {
      "patch": {
        "summary": "Activate a disabled account",
        "operationId": "Accounts_Activate",
        "tags": [
          "Accounts"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/account"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      }
    },
    "/plaza/accounts/{id}/deactivate": {
      "delete": {
        "summary": "Deactivate an account",
        "operationId": "Accounts_Deactivate",
        "tags": [
          "Accounts"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/account"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      }
    },
    "/plaza/country_specs": {
      "get": {
        "summary": "List Country Specs",
        "operationId": "CountrySpecs_Index",
        "tags": [
          "CountrySpecs"
        ],
        "description": "Returns a list of country specs.",
        "parameters": [
          {
            "name": "starting_after",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "required": false,
              "description": "Pagination cursor"
            },
            "description": "Pagination cursor"
          },
          {
            "name": "ending_before",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "required": false,
              "description": "Pagination cursor"
            },
            "description": "Pagination cursor"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "required": false,
              "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100."
            },
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100."
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/CountrySpecsListResponse"
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      }
    },
    "/plaza/country_specs/{id}": {
      "get": {
        "summary": "Retrieve a Single Country Spec",
        "operationId": "CountrySpecs_Show",
        "tags": [
          "CountrySpecs"
        ],
        "description": "Returns a Single Country Spec by Country ISO Alpha2 code.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/country_spec"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      }
    },
    "/reporting/report_runs": {
      "get": {
        "summary": "List Report Run",
        "operationId": "ReportRuns_Index",
        "tags": [
          "ReportRuns"
        ],
        "description": "Returns a list of Run Types.",
        "parameters": [
          {
            "name": "starting_after",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "required": false,
              "description": "Pagination cursor"
            },
            "description": "Pagination cursor"
          },
          {
            "name": "ending_before",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "required": false,
              "description": "Pagination cursor"
            },
            "description": "Pagination cursor"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "required": false,
              "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100."
            },
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100."
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ReportRunsListResponse"
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      },
      "post": {
        "summary": "Create a Report Run",
        "operationId": "ReportRuns_Create",
        "tags": [
          "ReportRuns"
        ],
        "description": "Create a Report Run.",
        "requestBody": {
          "required": false,
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "report_type": {
                    "type": "string",
                    "description": "The ID of the Report Type that should be run"
                  },
                  "parameters": {
                    "type": "object",
                    "properties": {
                      "additionalProperties": {
                        "type": "object"
                      }
                    },
                    "description": "Parameters of this report run"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/report_run"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      }
    },
    "/reporting/report_runs/{id}": {
      "get": {
        "summary": "Retrieve a Single Report Run",
        "operationId": "ReportRuns_Show",
        "tags": [
          "ReportRuns"
        ],
        "description": "Returns a Single Report Run by ID.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/report_run"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      }
    },
    "/reporting/report_types": {
      "get": {
        "summary": "List Report Types",
        "operationId": "ReportTypes_Index",
        "tags": [
          "ReportTypes"
        ],
        "description": "Returns a list of Report Types.",
        "parameters": [
          {
            "name": "starting_after",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "required": false,
              "description": "Pagination cursor"
            },
            "description": "Pagination cursor"
          },
          {
            "name": "ending_before",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "required": false,
              "description": "Pagination cursor"
            },
            "description": "Pagination cursor"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "required": false,
              "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100."
            },
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100."
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/ReportTypesListResponse"
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      }
    },
    "/reporting/report_types/{id}": {
      "get": {
        "summary": "Retrieve a Single Report Type",
        "operationId": "ReportTypes_Show",
        "tags": [
          "ReportTypes"
        ],
        "description": "Returns a Single Report Type by ID.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/report_type"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      }
    },
    "/self_billing_credit_notes": {
      "get": {
        "summary": "List Self Billing Credit Notes",
        "operationId": "SelfBillingCreditNotes_Index",
        "tags": [
          "SelfBillingCreditNotes"
        ],
        "description": "Returns a list of Self Billing Credit Notes.",
        "parameters": [
          {
            "name": "ending_before",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "required": false,
              "description": "Pagination cursor"
            },
            "description": "Pagination cursor"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "required": false,
              "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100."
            },
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100."
          },
          {
            "name": "payment_status",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "to refund",
                "refunded"
              ],
              "description": "A filter on the list based on the `payment_status` value."
            },
            "description": "A filter on the list based on the `payment_status` value."
          },
          {
            "name": "sequence_number",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "A filter on the list based on the sequence number of the credit_note"
            },
            "description": "A filter on the list based on the sequence number of the credit_note"
          },
          {
            "name": "source",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "example": "cn_xxxxx",
              "description": "ID of the external object this credit note was synced from, to filter results"
            },
            "description": "ID of the external object this credit note was synced from, to filter results"
          },
          {
            "name": "starting_after",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "required": false,
              "description": "Pagination cursor"
            },
            "description": "Pagination cursor"
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "draft",
                "cancelled",
                "confirmed"
              ],
              "description": "A filter on the list based on the `status` value"
            },
            "description": "A filter on the list based on the `status` value"
          },
          {
            "name": "supplier",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "A filter on the list based on the supplier ID. The value must be a string."
            },
            "description": "A filter on the list based on the supplier ID. The value must be a string."
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/SelfBillingCreditNotesListResponse"
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      },
      "post": {
        "summary": "Create a self-billing credit note",
        "operationId": "SelfBillingCreditNotes_Create",
        "tags": [
          "SelfBillingCreditNotes"
        ],
        "description": "Create a self-billing credit note. Its status will be `draft`",
        "requestBody": {
          "required": false,
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "currency": {
                    "type": "string",
                    "description": "A string representing the ISO-code of the currency of the credit note"
                  },
                  "supplier": {
                    "type": "string",
                    "description": "ID of the supplier who bills"
                  },
                  "custom_fields": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "The name of the custom field."
                        },
                        "value": {
                          "type": "string",
                          "description": "The value of the custom field."
                        }
                      }
                    },
                    "description": "List of custom fields to be displayed in the credit note"
                  },
                  "description": {
                    "type": "string",
                    "description": "A string describing the credit note's description"
                  },
                  "document_template": {
                    "type": "string",
                    "description": "ID of the document template used by this credit note. If not filled, it uses the default document template of the account."
                  },
                  "language": {
                    "type": "string",
                    "description": "A string representing the locale that is used for the credit note."
                  },
                  "metadata": {
                    "type": "object",
                    "properties": {
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "description": "Set of key-value pairs that you can attach to an object"
                  },
                  "notes": {
                    "type": "string",
                    "description": "A custom text that you want to attach to and display on the credit note"
                  },
                  "self_billing_invoice": {
                    "type": "string",
                    "description": "The ID of the `self_billing_invoice` object this credit note is linked to"
                  },
                  "sources": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "gateway": {
                          "type": "string",
                          "description": "The name of the gateway. E.g.: stripe, paypal"
                        },
                        "identifier": {
                          "type": "string",
                          "description": "The object ID from the gateway"
                        },
                        "source_type": {
                          "type": "string",
                          "description": "The object type from the gateway"
                        }
                      }
                    },
                    "description": "Information related to the platform and the ID of the object this credit note was synced from"
                  }
                },
                "required": [
                  "currency",
                  "supplier"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/self_billing_credit_note"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      }
    },
    "/self_billing_credit_notes/{id}": {
      "get": {
        "summary": "Retrieve a Single Self Billing Credit Note",
        "operationId": "SelfBillingCreditNotes_Show",
        "tags": [
          "SelfBillingCreditNotes"
        ],
        "description": "Returns a Single Self Billing Credit Note by its ID.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/self_billing_credit_note"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      },
      "patch": {
        "summary": "Update a draft self billing credit note",
        "operationId": "SelfBillingCreditNotes_Update",
        "tags": [
          "SelfBillingCreditNotes"
        ],
        "description": "Update a draft self billing credit note by its ID.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": false,
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "description": {
                    "type": "string",
                    "description": "A string representing the credit note's description"
                  },
                  "metadata": {
                    "type": "object",
                    "properties": {
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "description": "Set of key-value pairs that you can attach to an object"
                  },
                  "notes": {
                    "type": "string",
                    "description": "A custom text that you want to attach to and display on the credit note"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/self_billing_credit_note"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      },
      "put": {
        "summary": "Update a draft self billing credit note",
        "operationId": "SelfBillingCreditNotes_Update",
        "tags": [
          "SelfBillingCreditNotes"
        ],
        "description": "Update a draft self billing credit note by its ID.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": false,
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "description": {
                    "type": "string",
                    "description": "A string representing the credit note's description"
                  },
                  "metadata": {
                    "type": "object",
                    "properties": {
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "description": "Set of key-value pairs that you can attach to an object"
                  },
                  "notes": {
                    "type": "string",
                    "description": "A custom text that you want to attach to and display on the credit note"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/self_billing_credit_note"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      },
      "delete": {
        "summary": "Delete a draft Self-Billing CreditNote",
        "operationId": "SelfBillingCreditNotes_Destroy",
        "tags": [
          "SelfBillingCreditNotes"
        ],
        "description": "Delete a draft Self-billing CreditNote by its ID. The credit note must be a `draft`",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/deleted_self_billing_credit_note"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      }
    },
    "/self_billing_credit_notes/{id}/cancel": {
      "patch": {
        "summary": "Cancel a self-billing credit note",
        "operationId": "SelfBillingCreditNotes_Cancel",
        "tags": [
          "SelfBillingCreditNotes"
        ],
        "description": "Cancel a self-billing credit note that has already been confirmed. It will move its `status` to `cancelled`, and generate a negative corresponding credit note.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/self_billing_credit_note"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      }
    },
    "/self_billing_credit_notes/{id}/confirm": {
      "patch": {
        "summary": "Confirm a `draft` self billing credit note",
        "operationId": "SelfBillingCreditNotes_Confirm",
        "tags": [
          "SelfBillingCreditNotes"
        ],
        "description": "Confirm a self billing credit note. It won't be editable anymore, and take its sequence number, as well as an credit note date. The PDF will be generated as well. The credit note must be a `draft` and have at least one `purchase_item` attached to be confirmed",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/self_billing_credit_note"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      }
    },
    "/self_billing_credit_notes/{id}/send": {
      "post": {
        "summary": "Send a self-billing credit note by Email",
        "operationId": "SelfBillingCreditNotes_SendByEmail",
        "tags": [
          "SelfBillingCreditNotes"
        ],
        "description": "Send a self-billing credit note by Email by its ID.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/self_billing_credit_note"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      }
    },
    "/self_billing_credit_notes/{self_billing_credit_note_id}/purchase_items": {
      "get": {
        "summary": "List Purchase Items",
        "operationId": "PurchaseItems_Index",
        "tags": [
          "PurchaseItems"
        ],
        "description": "Returns a list of Purchase Items.",
        "parameters": [
          {
            "name": "ending_before",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "required": false,
              "description": "Pagination cursor"
            },
            "description": "Pagination cursor"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "required": false,
              "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100."
            },
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100."
          },
          {
            "name": "self_billing_invoice_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The ID the self-billing invoice to filter items on"
            },
            "description": "The ID the self-billing invoice to filter items on"
          },
          {
            "name": "starting_after",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "required": false,
              "description": "Pagination cursor"
            },
            "description": "Pagination cursor"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PurchaseItemsListResponse"
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "# Definition\nGET https://apiv2.octobat.com/self_billing_invoices/:self_billing_invoice_id/purchase_items\n# Example request\n$ curl https://apiv2.octobat.com/self_billing_invoices/oc_si_xxxxxx/purchase_items \\\n-u oc_test_skey_tkHCYYOUVrYyY5rBFZxNzgtt:"
          },
          {
            "lang": "ruby",
            "source": "# Example request\nrequire \"octobat\"\nOctobat.api_key = \"oc_test_skey_tkHCYYOUVrYyY5rBFZxNzgtt\"\nself_billing_invoice = Octobat::SelfBillingInvoice.retrieve( \"oc_si_xxxxx\" )\npurchase_items = self_billing_invoice.purchase_items.list( { limit: 3 } )"
          },
          {
            "lang": "node",
            "source": "// Example request\nconst octobat = require('octobat-npm')('oc_test_skey_mf8MurlswKilc78QolUN7Qtt');\noctobat.self_billing_invoices.listPurchaseItems(\n  \"oc_si_xxxxx\",\n  {\n    limit: 3,\n  }\n).then(function(items) {\n  // ...\n}).catch(function(err) {\n  // ...\n})"
          },
          {
            "lang": "php",
            "source": "// Example request\n\\Octobat\\Octobat::setApiKey('oc_test_skey_BQokikJOvBiI2HlWgH4olfQ2');\n$self_billing_invoice=\\Octobat\\SelfBillingInvoice::retrieve([\n  \"id\" => \"oc_si_xxxxx\",\n  \"expand\" => [ 'purchase_items' ]\n])\n$purchase_items = $self_billing_invoice->purchase_items->list( [ 'limit' => 3 ] );"
          }
        ]
      },
      "post": {
        "summary": "Create a purchase item",
        "operationId": "PurchaseItems_Create",
        "tags": [
          "PurchaseItems"
        ],
        "parameters": [
          {
            "name": "self_billing_invoice_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The ID the self-billing invoice to create purchase items on"
            },
            "description": "The ID the self-billing invoice to create purchase items on"
          },
          {
            "name": "self_billing_credit_note_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The ID the self-billing credit note to create purchase items on"
            },
            "description": "The ID the self-billing credit note to create purchase items on"
          }
        ],
        "requestBody": {
          "required": false,
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "currency": {
                    "type": "string",
                    "description": "Currency ISO code. Must be the same than the related document's currency"
                  },
                  "description": {
                    "type": "string",
                    "description": "Name of the product / service sold."
                  },
                  "detailed_description": {
                    "type": "string",
                    "description": "An arbitrary string attached to the object. Often useful for displaying to users."
                  },
                  "discountable": {
                    "type": "boolean",
                    "description": "If true, discounts will apply to this invoice item. Always false for prorations."
                  },
                  "extratax_amount": {
                    "type": "integer",
                    "description": "The total price of the item without tax. You must fill either `unit_extratax_amount` or `unit_gross_amount` or `extratax_amount` or `gross_amount` depending on your needs, but filling both will return an error"
                  },
                  "gross_amount": {
                    "type": "integer",
                    "description": "The total price of the item with tax included. You must fill either `unit_extratax_amount` or `unit_gross_amount` or `extratax_amount` or `gross_amount` depending on your needs, but filling both will return an error"
                  },
                  "period": {
                    "type": "object",
                    "properties": {
                      "period_end": {
                        "type": "string",
                        "format": "date-time",
                        "description": "End of the line item’s billing period"
                      },
                      "period_start": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Start of the line item’s billing period"
                      }
                    },
                    "required": [
                      "period_end",
                      "period_start"
                    ],
                    "description": "The period associated with this item. You can leave it blank if the revenue incurred by the item should not be splitted among months/years."
                  },
                  "product": {
                    "type": "string",
                    "description": "ID of the product this item refers to"
                  },
                  "product_type": {
                    "type": "string",
                    "description": "Code of the product type the item refers to. Useful for reporting / thresholds. Copied from `tax_evidence` if filled."
                  },
                  "quantity": {
                    "type": "integer",
                    "description": "The quantity of this item purchased by the customer"
                  },
                  "sale_mode": {
                    "type": "string",
                    "enum": [
                      "B2B",
                      "B2C"
                    ],
                    "description": "Represents if the sale is considered as a B2B or a B2C. Copied from `tax_evidence` if filled."
                  },
                  "sources": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "gateway": {
                          "type": "string",
                          "description": "The name of the gateway. E.g.: stripe, paypal"
                        },
                        "identifier": {
                          "type": "string",
                          "description": "The object ID from the gateway"
                        },
                        "source_type": {
                          "type": "string",
                          "description": "The object type from the gateway"
                        }
                      }
                    },
                    "description": "Information related to the platform and the ID of the object this item was synced from"
                  },
                  "tax": {
                    "type": "string",
                    "example": "eu-vat",
                    "description": "The ID of the tax object that applies to this item. Copied from `tax_evidence` if filled."
                  },
                  "tax_evidence": {
                    "type": "string",
                    "description": "ID of the tax evidence this item is linked to. When filled, `tax_rate`, `tax`, `product_type`, `sale_mode`, and `declare_in_region` fields will be directly filled out from the `tax_evidence` object"
                  },
                  "tax_rate": {
                    "type": "number",
                    "format": "float",
                    "default": 0,
                    "description": "The total tax percentage applied to the given item. Copied from `tax_evidence` if filled"
                  },
                  "unit_extratax_amount": {
                    "type": "integer",
                    "description": "The unit price of the item without tax. Tax-included amount will be computed then. You must fill either `unit_extratax_amount` or `unit_gross_amount` or `extratax_amount` or `gross_amount` depending on your needs, but filling both will return an error"
                  },
                  "unit_gross_amount": {
                    "type": "integer",
                    "description": "The unit price of the item with tax included. Tax-excluded amount will be computed then. You must fill either `unit_extratax_amount` or `unit_gross_amount` or `extratax_amount` or `gross_amount` depending on your needs, but filling both will return an error"
                  }
                },
                "required": [
                  "currency"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/purchase_item"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "# Definition\nPOST https://apiv2.octobat.com/self_billing_invoices/:self_billing_invoice_id/purchase_items\n\n# Example request (with tax evidence and unit tax exclusive scheme)\n$ curl -X POST https://apiv2.octobat.com/self_billing_invoices/oc_si_xxxxx/purchase_items \\\n-u oc_test_skey_tkHCYYOUVrYyY5rBFZxNzgtt: \\\n-d currency=EUR \\\n-d description='Item description' \\\n-d unit_extratax_amount=1000 \\\n-d tax_evidence=oc_tev_xxxxxxx\n\n# Example request (without tax evidence, and tax-inclusive scheme)\n$ curl -X POST https://apiv2.octobat.com/self_billing_invoices/oc_si_xxxxx/purchase_items \\\n-u oc_test_skey_tkHCYYOUVrYyY5rBFZxNzgtt: \\\n-d currency=EUR \\\n-d description='Item description' \\\n-d gross_amount=1200 \\\n-d tax=eu-vat\n-d tax_rate=20"
          },
          {
            "lang": "ruby",
            "source": "# Example request\nrequire \"octobat\"\nOctobat.api_key = \"oc_test_skey_tkHCYYOUVrYyY5rBFZxNzgtt\"\nself_billing_invoice = Octobat::SelfBillingInvoice.retrieve( \"oc_si_xxxxx\" )\n\n# Item with tax evidence, and tax-exclusive scheme\npurchase_item = self_billing_invoice.purchase_items.create( {\n  currency: 'EUR',\n  description: 'Item Description',\n  unit_extratax_amount: 1000,\n  tax_evidence: 'oc_tev_xxxxxxx'\n} )\n\n# Item without tax evidence, and tax-inclusive scheme\npurchase_item = self_billing_invoice.purchase_items.create( {\n  currency: 'EUR',\n  description: 'Item Description',\n  gross_amount: 1200,\n  tax: 'eu-vat',\n  tax_rate: 20.0\n} )"
          },
          {
            "lang": "node",
            "source": "// Example request\nconst octobat = require('octobat-npm')('oc_test_skey_mf8MurlswKilc78QolUN7Qtt');\n\n// PurchaseItem with tax evidence, and tax-exclusive scheme\noctobat.self_billing_invoices.createPurchaseItem(\n  \"oc_si_xxxxx\",\n  {\n    currency: 'EUR',\n    description: 'PurchaseItem description',\n    unit_extratax_amount: 1000,\n    tax_evidence: \"oc_tev_xxxxxxx\"\n  }\n}).then(function(item) { // ... })\n\n// PurchaseItem without tax evidence, and tax-inclusive scheme\noctobat.self_billing_invoices.createPurchaseItem(\n  \"oc_si_xxxxx\",\n  {\n    currency: 'EUR',\n    description: 'PurchaseItem description',\n    gross_amount: 1200,\n    tax: \"eu-vat\",\n    tax_rate: 20.0\n  }\n}).then(function(item) { // ... })"
          },
          {
            "lang": "php",
            "source": "// Example request\n\\Octobat\\Octobat::setApiKey('oc_test_skey_BQokikJOvBiI2HlWgH4olfQ2');\n$self_billing_invoice=\\Octobat\\SelfBillingInvoice::retrieve([\n  \"id\" => \"oc_si_xxxxx\",\n  \"expand\" => [ 'purchase_items' ]\n])\n\n// Item with tax evidence, and tax-exclusive scheme\n$purchase_item = $self_billing_invoice->purchase_items->create( [\n  'currency' => 'EUR',\n  'description' => 'Item Description',\n  'unit_extratax_amount' => 1000,\n  'tax_evidence' => 'oc_tev_xxxxxxx'\n] );\n\n// Item without tax evidence, and tax-inclusive scheme\n$purchase_item = $self_billing_invoice->purchase_items->create( [\n  'currency' => 'EUR',\n  'description' => 'Item Description',\n  'gross_amount' => 1200,\n  'tax' => 'eu-vat',\n  'tax_rate' => 20.0\n] );"
          }
        ]
      }
    },
    "/self_billing_credit_notes/{self_billing_credit_note_id}/purchase_items/{id}": {
      "get": {
        "summary": "Retrieve a single Purchase Item",
        "operationId": "PurchaseItems_Show",
        "tags": [
          "PurchaseItems"
        ],
        "description": "Returns a single Purchase Item by its ID.",
        "parameters": [
          {
            "name": "self_billing_invoice_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The ID the self-billing invoice to filter items on"
            },
            "description": "The ID the self-billing invoice to filter items on"
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/purchase_item"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "# Definition\nGET https://apiv2.octobat.com/self_billing_invoices/:self_billing_invoice_id/purchase_items/:id\n\n# Example request\n$ curl https://apiv2.octobat.com/self_billing_invoices/oc_si_xxxxxx/purchase_items/oc_it_yyyyyyyy \\\n-u oc_test_skey_tkHCYYOUVrYyY5rBFZxNzgtt:"
          },
          {
            "lang": "ruby",
            "source": "# Example request\nrequire \"octobat\"\nOctobat.api_key = \"oc_test_skey_tkHCYYOUVrYyY5rBFZxNzgtt\"\nself_billing_invoice = Octobat::SelfBillingInvoice.retrieve( \"oc_si_xxxxx\" )\npurchase_items = self_billing_invoice.purchase_items.retrieve( \"oc_it_yyyyyyyy\" )"
          },
          {
            "lang": "node",
            "source": "// Example request\nconst octobat = require('octobat-npm')('oc_test_skey_mf8MurlswKilc78QolUN7Qtt');\noctobat.self_billing_invoices.retrievePurchaseItem(\"oc_si_xxxxxxx\", \"oc_pi_yyyyyyyy\").then(function(item) {\n  // ...\n}).catch(function(err) {\n  // ...\n})"
          },
          {
            "lang": "php",
            "source": "// Example request\n\\Octobat\\Octobat::setApiKey('oc_test_skey_BQokikJOvBiI2HlWgH4olfQ2');\n$self_billing_invoice=\\Octobat\\SelfBillingInvoice::retrieve([\n  \"id\" => \"oc_si_xxxxx\",\n  \"expand\" => [ 'purchase_items' ]\n])\n$purchase_items = $self_billing_invoice->purchase_items->retrieve( 'oc_it_yyyyyyyy' );"
          }
        ]
      },
      "patch": {
        "summary": "Update a draft purchase item",
        "operationId": "PurchaseItems_Update",
        "tags": [
          "PurchaseItems"
        ],
        "parameters": [
          {
            "name": "self_billing_invoice_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The ID the self-billing invoice to filter items on"
            },
            "description": "The ID the self-billing invoice to filter items on"
          },
          {
            "name": "self_billing_credit_note_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The ID the self-billing credit note to filter items on"
            },
            "description": "The ID the self-billing credit note to filter items on"
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": false,
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "description": {
                    "type": "string",
                    "description": "Name of the product / service sold."
                  },
                  "detailed_description": {
                    "type": "string",
                    "description": "An arbitrary string attached to the object. Often useful for displaying to users."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/purchase_item"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      },
      "put": {
        "summary": "Update a draft purchase item",
        "operationId": "PurchaseItems_Update",
        "tags": [
          "PurchaseItems"
        ],
        "parameters": [
          {
            "name": "self_billing_invoice_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The ID the self-billing invoice to filter items on"
            },
            "description": "The ID the self-billing invoice to filter items on"
          },
          {
            "name": "self_billing_credit_note_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The ID the self-billing credit note to filter items on"
            },
            "description": "The ID the self-billing credit note to filter items on"
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": false,
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "description": {
                    "type": "string",
                    "description": "Name of the product / service sold."
                  },
                  "detailed_description": {
                    "type": "string",
                    "description": "An arbitrary string attached to the object. Often useful for displaying to users."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/purchase_item"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      },
      "delete": {
        "summary": "Delete a draft PurchaseItem",
        "operationId": "PurchaseItems_Destroy",
        "tags": [
          "PurchaseItems"
        ],
        "description": "Delete a draft PurchaseItem by its ID.",
        "parameters": [
          {
            "name": "self_billing_invoice_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The ID the self-billing invoice to filter items on"
            },
            "description": "The ID the self-billing invoice to filter items on"
          },
          {
            "name": "self_billing_credit_note_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The ID the self-billing credit note to filter items on"
            },
            "description": "The ID the self-billing credit note to filter items on"
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/deleted_purchase_item"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      }
    },
    "/self_billing_invoices": {
      "get": {
        "summary": "List Self Billing Invoices",
        "operationId": "SelfBillingInvoices_Index",
        "tags": [
          "SelfBillingInvoices"
        ],
        "description": "Returns a list of Self Billing Invoices.",
        "parameters": [
          {
            "name": "ending_before",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "required": false,
              "description": "Pagination cursor"
            },
            "description": "Pagination cursor"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "required": false,
              "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100."
            },
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100."
          },
          {
            "name": "payment_status",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "paid",
                "unpaid"
              ],
              "description": "A filter on the list based on the `payment_status` value. `unpaid` returns partially paid and totally unpaid invoices"
            },
            "description": "A filter on the list based on the `payment_status` value. `unpaid` returns partially paid and totally unpaid invoices"
          },
          {
            "name": "sequence_number",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "A filter on the list based on the sequence number of the invoice"
            },
            "description": "A filter on the list based on the sequence number of the invoice"
          },
          {
            "name": "source",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "example": "inv_xxxxx",
              "description": "ID of the external object this invoice was synced from, to filter results"
            },
            "description": "ID of the external object this invoice was synced from, to filter results"
          },
          {
            "name": "starting_after",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "required": false,
              "description": "Pagination cursor"
            },
            "description": "Pagination cursor"
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "draft",
                "cancelled",
                "confirmed"
              ],
              "description": "A filter on the list based on the `status` value"
            },
            "description": "A filter on the list based on the `status` value"
          },
          {
            "name": "supplier",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "A filter on the list based on the supplier ID. The value must be a string."
            },
            "description": "A filter on the list based on the supplier ID. The value must be a string."
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/SelfBillingInvoicesListResponse"
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      },
      "post": {
        "summary": "Create a self-billing invoice",
        "operationId": "SelfBillingInvoices_Create",
        "tags": [
          "SelfBillingInvoices"
        ],
        "description": "Create a self-billing invoice. Its status will be `draft`",
        "requestBody": {
          "required": false,
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "currency": {
                    "type": "string",
                    "description": "A string representing the ISO-code of the currency of the invoice"
                  },
                  "supplier": {
                    "type": "string",
                    "description": "ID of the supplier who bills"
                  },
                  "custom_fields": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "The name of the custom field."
                        },
                        "value": {
                          "type": "string",
                          "description": "The value of the custom field."
                        }
                      }
                    },
                    "description": "List of custom fields to be displayed in the invoice"
                  },
                  "description": {
                    "type": "string",
                    "description": "A string describing the invoice's description"
                  },
                  "document_template": {
                    "type": "string",
                    "description": "ID of the document template used by this invoice. If not filled, it uses the default document template of the account."
                  },
                  "language": {
                    "type": "string",
                    "description": "A string representing the locale that is used for the invoice."
                  },
                  "metadata": {
                    "type": "object",
                    "properties": {
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "description": "Set of key-value pairs that you can attach to an object"
                  },
                  "notes": {
                    "type": "string",
                    "description": "A custom text that you want to attach to and print on the invoice"
                  },
                  "order": {
                    "type": "string",
                    "description": "ID of the `order` this invoice is related to."
                  },
                  "sources": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "gateway": {
                          "type": "string",
                          "description": "The name of the gateway. E.g.: stripe, paypal"
                        },
                        "identifier": {
                          "type": "string",
                          "description": "The object ID from the gateway"
                        },
                        "source_type": {
                          "type": "string",
                          "description": "The object type from the gateway"
                        }
                      }
                    },
                    "description": "Information related to the platform and the ID of the object this invoice was synced from"
                  }
                },
                "required": [
                  "currency",
                  "supplier"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/self_billing_invoice"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      }
    },
    "/self_billing_invoices/{id}": {
      "get": {
        "summary": "Retrieve a Single Self Billing Invoice",
        "operationId": "SelfBillingInvoices_Show",
        "tags": [
          "SelfBillingInvoices"
        ],
        "description": "Returns a Single Self Billing Invoice by its ID.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/self_billing_invoice"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      },
      "patch": {
        "summary": "Update a draft self billing invoice",
        "operationId": "SelfBillingInvoices_Update",
        "tags": [
          "SelfBillingInvoices"
        ],
        "description": "Update a draft self billing invoice by its ID.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": false,
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "description": {
                    "type": "string",
                    "description": "A string representing the invoice's description"
                  },
                  "metadata": {
                    "type": "object",
                    "properties": {
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "description": "Set of key-value pairs that you can attach to an object"
                  },
                  "notes": {
                    "type": "string",
                    "description": "A custom text that you want to attach to and print on the invoice"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/self_billing_invoice"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      },
      "put": {
        "summary": "Update a draft self billing invoice",
        "operationId": "SelfBillingInvoices_Update",
        "tags": [
          "SelfBillingInvoices"
        ],
        "description": "Update a draft self billing invoice by its ID.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": false,
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "description": {
                    "type": "string",
                    "description": "A string representing the invoice's description"
                  },
                  "metadata": {
                    "type": "object",
                    "properties": {
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "description": "Set of key-value pairs that you can attach to an object"
                  },
                  "notes": {
                    "type": "string",
                    "description": "A custom text that you want to attach to and print on the invoice"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/self_billing_invoice"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      },
      "delete": {
        "summary": "Delete a draft Self-Billing Invoice",
        "operationId": "SelfBillingInvoices_Destroy",
        "tags": [
          "SelfBillingInvoices"
        ],
        "description": "Delete a draft Self-billing Invoice by its ID. The invoice must be a `draft`",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/deleted_self_billing_invoice"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      }
    },
    "/self_billing_invoices/{id}/cancel": {
      "patch": {
        "summary": "Cancel a self-billing invoice",
        "operationId": "SelfBillingInvoices_Cancel",
        "tags": [
          "SelfBillingInvoices"
        ],
        "description": "Cancel a self-billing invoice that has already been confirmed. It will move its `status` to `cancelled`, and generate a credit note.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/self_billing_invoice"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      }
    },
    "/self_billing_invoices/{id}/confirm": {
      "patch": {
        "summary": "Confirm a `draft` self billing invoice",
        "operationId": "SelfBillingInvoices_Confirm",
        "tags": [
          "SelfBillingInvoices"
        ],
        "description": "Confirm a self billing invoice. It won't be editable anymore, and take its sequence number, as well as an invoice date. The PDF will be generated as well. The invoice must be a `draft` and have at least one `item` attached to be confirmed",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/self_billing_invoice"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      }
    },
    "/self_billing_invoices/{id}/send": {
      "post": {
        "summary": "Send a self-billing invoice by Email",
        "operationId": "SelfBillingInvoices_SendByEmail",
        "tags": [
          "SelfBillingInvoices"
        ],
        "description": "Send a self-billing invoice by Email by its ID.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/self_billing_invoice"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      }
    },
    "/self_billing_invoices/{self_billing_invoice_id}/purchase_items": {
      "get": {
        "summary": "List Purchase Items",
        "operationId": "PurchaseItems_Index",
        "tags": [
          "PurchaseItems"
        ],
        "description": "Returns a list of Purchase Items.",
        "parameters": [
          {
            "name": "ending_before",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "required": false,
              "description": "Pagination cursor"
            },
            "description": "Pagination cursor"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "required": false,
              "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100."
            },
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100."
          },
          {
            "name": "self_billing_invoice_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The ID the self-billing invoice to filter items on"
            },
            "description": "The ID the self-billing invoice to filter items on"
          },
          {
            "name": "starting_after",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "required": false,
              "description": "Pagination cursor"
            },
            "description": "Pagination cursor"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PurchaseItemsListResponse"
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "# Definition\nGET https://apiv2.octobat.com/self_billing_invoices/:self_billing_invoice_id/purchase_items\n# Example request\n$ curl https://apiv2.octobat.com/self_billing_invoices/oc_si_xxxxxx/purchase_items \\\n-u oc_test_skey_tkHCYYOUVrYyY5rBFZxNzgtt:"
          },
          {
            "lang": "ruby",
            "source": "# Example request\nrequire \"octobat\"\nOctobat.api_key = \"oc_test_skey_tkHCYYOUVrYyY5rBFZxNzgtt\"\nself_billing_invoice = Octobat::SelfBillingInvoice.retrieve( \"oc_si_xxxxx\" )\npurchase_items = self_billing_invoice.purchase_items.list( { limit: 3 } )"
          },
          {
            "lang": "node",
            "source": "// Example request\nconst octobat = require('octobat-npm')('oc_test_skey_mf8MurlswKilc78QolUN7Qtt');\noctobat.self_billing_invoices.listPurchaseItems(\n  \"oc_si_xxxxx\",\n  {\n    limit: 3,\n  }\n).then(function(items) {\n  // ...\n}).catch(function(err) {\n  // ...\n})"
          },
          {
            "lang": "php",
            "source": "// Example request\n\\Octobat\\Octobat::setApiKey('oc_test_skey_BQokikJOvBiI2HlWgH4olfQ2');\n$self_billing_invoice=\\Octobat\\SelfBillingInvoice::retrieve([\n  \"id\" => \"oc_si_xxxxx\",\n  \"expand\" => [ 'purchase_items' ]\n])\n$purchase_items = $self_billing_invoice->purchase_items->list( [ 'limit' => 3 ] );"
          }
        ]
      },
      "post": {
        "summary": "Create a purchase item",
        "operationId": "PurchaseItems_Create",
        "tags": [
          "PurchaseItems"
        ],
        "parameters": [
          {
            "name": "self_billing_invoice_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The ID the self-billing invoice to create purchase items on"
            },
            "description": "The ID the self-billing invoice to create purchase items on"
          },
          {
            "name": "self_billing_credit_note_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The ID the self-billing credit note to create purchase items on"
            },
            "description": "The ID the self-billing credit note to create purchase items on"
          }
        ],
        "requestBody": {
          "required": false,
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "currency": {
                    "type": "string",
                    "description": "Currency ISO code. Must be the same than the related document's currency"
                  },
                  "description": {
                    "type": "string",
                    "description": "Name of the product / service sold."
                  },
                  "detailed_description": {
                    "type": "string",
                    "description": "An arbitrary string attached to the object. Often useful for displaying to users."
                  },
                  "discountable": {
                    "type": "boolean",
                    "description": "If true, discounts will apply to this invoice item. Always false for prorations."
                  },
                  "extratax_amount": {
                    "type": "integer",
                    "description": "The total price of the item without tax. You must fill either `unit_extratax_amount` or `unit_gross_amount` or `extratax_amount` or `gross_amount` depending on your needs, but filling both will return an error"
                  },
                  "gross_amount": {
                    "type": "integer",
                    "description": "The total price of the item with tax included. You must fill either `unit_extratax_amount` or `unit_gross_amount` or `extratax_amount` or `gross_amount` depending on your needs, but filling both will return an error"
                  },
                  "period": {
                    "type": "object",
                    "properties": {
                      "period_end": {
                        "type": "string",
                        "format": "date-time",
                        "description": "End of the line item’s billing period"
                      },
                      "period_start": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Start of the line item’s billing period"
                      }
                    },
                    "required": [
                      "period_end",
                      "period_start"
                    ],
                    "description": "The period associated with this item. You can leave it blank if the revenue incurred by the item should not be splitted among months/years."
                  },
                  "product": {
                    "type": "string",
                    "description": "ID of the product this item refers to"
                  },
                  "product_type": {
                    "type": "string",
                    "description": "Code of the product type the item refers to. Useful for reporting / thresholds. Copied from `tax_evidence` if filled."
                  },
                  "quantity": {
                    "type": "integer",
                    "description": "The quantity of this item purchased by the customer"
                  },
                  "sale_mode": {
                    "type": "string",
                    "enum": [
                      "B2B",
                      "B2C"
                    ],
                    "description": "Represents if the sale is considered as a B2B or a B2C. Copied from `tax_evidence` if filled."
                  },
                  "sources": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "gateway": {
                          "type": "string",
                          "description": "The name of the gateway. E.g.: stripe, paypal"
                        },
                        "identifier": {
                          "type": "string",
                          "description": "The object ID from the gateway"
                        },
                        "source_type": {
                          "type": "string",
                          "description": "The object type from the gateway"
                        }
                      }
                    },
                    "description": "Information related to the platform and the ID of the object this item was synced from"
                  },
                  "tax": {
                    "type": "string",
                    "example": "eu-vat",
                    "description": "The ID of the tax object that applies to this item. Copied from `tax_evidence` if filled."
                  },
                  "tax_evidence": {
                    "type": "string",
                    "description": "ID of the tax evidence this item is linked to. When filled, `tax_rate`, `tax`, `product_type`, `sale_mode`, and `declare_in_region` fields will be directly filled out from the `tax_evidence` object"
                  },
                  "tax_rate": {
                    "type": "number",
                    "format": "float",
                    "default": 0,
                    "description": "The total tax percentage applied to the given item. Copied from `tax_evidence` if filled"
                  },
                  "unit_extratax_amount": {
                    "type": "integer",
                    "description": "The unit price of the item without tax. Tax-included amount will be computed then. You must fill either `unit_extratax_amount` or `unit_gross_amount` or `extratax_amount` or `gross_amount` depending on your needs, but filling both will return an error"
                  },
                  "unit_gross_amount": {
                    "type": "integer",
                    "description": "The unit price of the item with tax included. Tax-excluded amount will be computed then. You must fill either `unit_extratax_amount` or `unit_gross_amount` or `extratax_amount` or `gross_amount` depending on your needs, but filling both will return an error"
                  }
                },
                "required": [
                  "currency"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/purchase_item"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "# Definition\nPOST https://apiv2.octobat.com/self_billing_invoices/:self_billing_invoice_id/purchase_items\n\n# Example request (with tax evidence and unit tax exclusive scheme)\n$ curl -X POST https://apiv2.octobat.com/self_billing_invoices/oc_si_xxxxx/purchase_items \\\n-u oc_test_skey_tkHCYYOUVrYyY5rBFZxNzgtt: \\\n-d currency=EUR \\\n-d description='Item description' \\\n-d unit_extratax_amount=1000 \\\n-d tax_evidence=oc_tev_xxxxxxx\n\n# Example request (without tax evidence, and tax-inclusive scheme)\n$ curl -X POST https://apiv2.octobat.com/self_billing_invoices/oc_si_xxxxx/purchase_items \\\n-u oc_test_skey_tkHCYYOUVrYyY5rBFZxNzgtt: \\\n-d currency=EUR \\\n-d description='Item description' \\\n-d gross_amount=1200 \\\n-d tax=eu-vat\n-d tax_rate=20"
          },
          {
            "lang": "ruby",
            "source": "# Example request\nrequire \"octobat\"\nOctobat.api_key = \"oc_test_skey_tkHCYYOUVrYyY5rBFZxNzgtt\"\nself_billing_invoice = Octobat::SelfBillingInvoice.retrieve( \"oc_si_xxxxx\" )\n\n# Item with tax evidence, and tax-exclusive scheme\npurchase_item = self_billing_invoice.purchase_items.create( {\n  currency: 'EUR',\n  description: 'Item Description',\n  unit_extratax_amount: 1000,\n  tax_evidence: 'oc_tev_xxxxxxx'\n} )\n\n# Item without tax evidence, and tax-inclusive scheme\npurchase_item = self_billing_invoice.purchase_items.create( {\n  currency: 'EUR',\n  description: 'Item Description',\n  gross_amount: 1200,\n  tax: 'eu-vat',\n  tax_rate: 20.0\n} )"
          },
          {
            "lang": "node",
            "source": "// Example request\nconst octobat = require('octobat-npm')('oc_test_skey_mf8MurlswKilc78QolUN7Qtt');\n\n// PurchaseItem with tax evidence, and tax-exclusive scheme\noctobat.self_billing_invoices.createPurchaseItem(\n  \"oc_si_xxxxx\",\n  {\n    currency: 'EUR',\n    description: 'PurchaseItem description',\n    unit_extratax_amount: 1000,\n    tax_evidence: \"oc_tev_xxxxxxx\"\n  }\n}).then(function(item) { // ... })\n\n// PurchaseItem without tax evidence, and tax-inclusive scheme\noctobat.self_billing_invoices.createPurchaseItem(\n  \"oc_si_xxxxx\",\n  {\n    currency: 'EUR',\n    description: 'PurchaseItem description',\n    gross_amount: 1200,\n    tax: \"eu-vat\",\n    tax_rate: 20.0\n  }\n}).then(function(item) { // ... })"
          },
          {
            "lang": "php",
            "source": "// Example request\n\\Octobat\\Octobat::setApiKey('oc_test_skey_BQokikJOvBiI2HlWgH4olfQ2');\n$self_billing_invoice=\\Octobat\\SelfBillingInvoice::retrieve([\n  \"id\" => \"oc_si_xxxxx\",\n  \"expand\" => [ 'purchase_items' ]\n])\n\n// Item with tax evidence, and tax-exclusive scheme\n$purchase_item = $self_billing_invoice->purchase_items->create( [\n  'currency' => 'EUR',\n  'description' => 'Item Description',\n  'unit_extratax_amount' => 1000,\n  'tax_evidence' => 'oc_tev_xxxxxxx'\n] );\n\n// Item without tax evidence, and tax-inclusive scheme\n$purchase_item = $self_billing_invoice->purchase_items->create( [\n  'currency' => 'EUR',\n  'description' => 'Item Description',\n  'gross_amount' => 1200,\n  'tax' => 'eu-vat',\n  'tax_rate' => 20.0\n] );"
          }
        ]
      }
    },
    "/self_billing_invoices/{self_billing_invoice_id}/purchase_items/{id}": {
      "get": {
        "summary": "Retrieve a single Purchase Item",
        "operationId": "PurchaseItems_Show",
        "tags": [
          "PurchaseItems"
        ],
        "description": "Returns a single Purchase Item by its ID.",
        "parameters": [
          {
            "name": "self_billing_invoice_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The ID the self-billing invoice to filter items on"
            },
            "description": "The ID the self-billing invoice to filter items on"
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/purchase_item"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "# Definition\nGET https://apiv2.octobat.com/self_billing_invoices/:self_billing_invoice_id/purchase_items/:id\n\n# Example request\n$ curl https://apiv2.octobat.com/self_billing_invoices/oc_si_xxxxxx/purchase_items/oc_it_yyyyyyyy \\\n-u oc_test_skey_tkHCYYOUVrYyY5rBFZxNzgtt:"
          },
          {
            "lang": "ruby",
            "source": "# Example request\nrequire \"octobat\"\nOctobat.api_key = \"oc_test_skey_tkHCYYOUVrYyY5rBFZxNzgtt\"\nself_billing_invoice = Octobat::SelfBillingInvoice.retrieve( \"oc_si_xxxxx\" )\npurchase_items = self_billing_invoice.purchase_items.retrieve( \"oc_it_yyyyyyyy\" )"
          },
          {
            "lang": "node",
            "source": "// Example request\nconst octobat = require('octobat-npm')('oc_test_skey_mf8MurlswKilc78QolUN7Qtt');\noctobat.self_billing_invoices.retrievePurchaseItem(\"oc_si_xxxxxxx\", \"oc_pi_yyyyyyyy\").then(function(item) {\n  // ...\n}).catch(function(err) {\n  // ...\n})"
          },
          {
            "lang": "php",
            "source": "// Example request\n\\Octobat\\Octobat::setApiKey('oc_test_skey_BQokikJOvBiI2HlWgH4olfQ2');\n$self_billing_invoice=\\Octobat\\SelfBillingInvoice::retrieve([\n  \"id\" => \"oc_si_xxxxx\",\n  \"expand\" => [ 'purchase_items' ]\n])\n$purchase_items = $self_billing_invoice->purchase_items->retrieve( 'oc_it_yyyyyyyy' );"
          }
        ]
      },
      "patch": {
        "summary": "Update a draft purchase item",
        "operationId": "PurchaseItems_Update",
        "tags": [
          "PurchaseItems"
        ],
        "parameters": [
          {
            "name": "self_billing_invoice_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The ID the self-billing invoice to filter items on"
            },
            "description": "The ID the self-billing invoice to filter items on"
          },
          {
            "name": "self_billing_credit_note_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The ID the self-billing credit note to filter items on"
            },
            "description": "The ID the self-billing credit note to filter items on"
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": false,
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "description": {
                    "type": "string",
                    "description": "Name of the product / service sold."
                  },
                  "detailed_description": {
                    "type": "string",
                    "description": "An arbitrary string attached to the object. Often useful for displaying to users."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/purchase_item"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      },
      "put": {
        "summary": "Update a draft purchase item",
        "operationId": "PurchaseItems_Update",
        "tags": [
          "PurchaseItems"
        ],
        "parameters": [
          {
            "name": "self_billing_invoice_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The ID the self-billing invoice to filter items on"
            },
            "description": "The ID the self-billing invoice to filter items on"
          },
          {
            "name": "self_billing_credit_note_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The ID the self-billing credit note to filter items on"
            },
            "description": "The ID the self-billing credit note to filter items on"
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": false,
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "description": {
                    "type": "string",
                    "description": "Name of the product / service sold."
                  },
                  "detailed_description": {
                    "type": "string",
                    "description": "An arbitrary string attached to the object. Often useful for displaying to users."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/purchase_item"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      },
      "delete": {
        "summary": "Delete a draft PurchaseItem",
        "operationId": "PurchaseItems_Destroy",
        "tags": [
          "PurchaseItems"
        ],
        "description": "Delete a draft PurchaseItem by its ID.",
        "parameters": [
          {
            "name": "self_billing_invoice_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The ID the self-billing invoice to filter items on"
            },
            "description": "The ID the self-billing invoice to filter items on"
          },
          {
            "name": "self_billing_credit_note_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The ID the self-billing credit note to filter items on"
            },
            "description": "The ID the self-billing credit note to filter items on"
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/deleted_purchase_item"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      }
    },
    "/subscription_items": {
      "get": {
        "summary": "List Subscription Items",
        "operationId": "SubscriptionItems_Index",
        "tags": [
          "SubscriptionItems"
        ],
        "description": "Returns a list of Subscription Items for a given subscription.",
        "parameters": [
          {
            "name": "subscription",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "required": true,
              "description": "The ID of the subscription whose items will be retrieved"
            },
            "description": "The ID of the subscription whose items will be retrieved"
          },
          {
            "name": "ending_before",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "required": false,
              "description": "Pagination cursor"
            },
            "description": "Pagination cursor"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "required": false,
              "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100."
            },
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100."
          },
          {
            "name": "starting_after",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "required": false,
              "description": "Pagination cursor"
            },
            "description": "Pagination cursor"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/SubscriptionItemsListResponse"
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      },
      "post": {
        "summary": "Create a subscription item",
        "operationId": "SubscriptionItems_Create",
        "tags": [
          "SubscriptionItems"
        ],
        "requestBody": {
          "required": false,
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "subscription": {
                    "type": "string",
                    "description": "ID of the subscription to attach this subscription_item to"
                  },
                  "unit_amount": {
                    "type": "integer",
                    "description": "The unit amount in cents in the currency specified for the item"
                  },
                  "currency": {
                    "type": "string",
                    "description": "Currency ISO code. Must be the same than the related subscription's currency"
                  },
                  "description": {
                    "type": "string",
                    "description": "Text describing the item, that will appear on invoice lines"
                  },
                  "automatic_tax": {
                    "type": "boolean",
                    "default": true,
                    "description": "Boolean representing whether tax should be calculated automatically at each subscription renewal."
                  },
                  "declare_in_region": {
                    "type": "string",
                    "description": "If `automatic_tax=false`, the jurisdiction where tax is owed. It is often the EU country or the US state code"
                  },
                  "detailed_description": {
                    "type": "string"
                  },
                  "metadata": {
                    "type": "object",
                    "properties": {
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "description": "Set of key-value pairs that you can attach to an object"
                  },
                  "product_type": {
                    "type": "string",
                    "description": "Code of the product type the item refers to"
                  },
                  "tax_calculation": {
                    "type": "string",
                    "enum": [
                      "inclusive",
                      "exclusive"
                    ],
                    "description": "Decide if item amounts are considered as tax inclusive or tax exclusive. Mandatory if `automatic_tax=true` or `tax_rate` is filled"
                  },
                  "tax": {
                    "type": "string",
                    "example": "eu-vat",
                    "description": "If `automatic_tax=false`, the ID of the `tax` object that should be applied to the given item. Leave blank if no tax should apply"
                  },
                  "tax_rate": {
                    "type": "number",
                    "format": "float",
                    "description": "If `automatic_tax=false`, the percentage of tax that should be applied to the given item. Leave blank if no tax should apply. Can be set to `0` if, for instance, reverse charge applies"
                  },
                  "quantity": {
                    "type": "integer",
                    "description": "The quantity of items of this type that are sold in the given subscription"
                  }
                },
                "required": [
                  "subscription",
                  "unit_amount",
                  "currency",
                  "description"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/subscription_item"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      }
    },
    "/subscription_items/{id}": {
      "get": {
        "summary": "Retrieve a single SubscriptionItem",
        "operationId": "SubscriptionItems_Show",
        "tags": [
          "SubscriptionItems"
        ],
        "description": "Returns a single SubscriptionItem by its ID.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/subscription_item"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      },
      "patch": {
        "summary": "Update a subscription item",
        "operationId": "SubscriptionItems_Update",
        "tags": [
          "SubscriptionItems"
        ],
        "description": "Updates a subscription item by its ID. Only few parameters can be changed, if you need to change the billing logic (tax calculation, product type), create a new item and delete the existing one instead",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": false,
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "description": {
                    "type": "string",
                    "description": "Text describing the item, that will appear on invoice lines"
                  },
                  "detailed_description": {
                    "type": "string"
                  },
                  "metadata": {
                    "type": "object",
                    "properties": {
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "description": "Set of key-value pairs that you can attach to an object"
                  },
                  "quantity": {
                    "type": "integer",
                    "description": "The quantity of items of this type that are sold in the given subscription"
                  },
                  "unit_amount": {
                    "type": "integer",
                    "description": "The unit amount in cents in the currency specified for the item"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/subscription_item"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      },
      "put": {
        "summary": "Update a subscription item",
        "operationId": "SubscriptionItems_Update",
        "tags": [
          "SubscriptionItems"
        ],
        "description": "Updates a subscription item by its ID. Only few parameters can be changed, if you need to change the billing logic (tax calculation, product type), create a new item and delete the existing one instead",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": false,
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "description": {
                    "type": "string",
                    "description": "Text describing the item, that will appear on invoice lines"
                  },
                  "detailed_description": {
                    "type": "string"
                  },
                  "metadata": {
                    "type": "object",
                    "properties": {
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "description": "Set of key-value pairs that you can attach to an object"
                  },
                  "quantity": {
                    "type": "integer",
                    "description": "The quantity of items of this type that are sold in the given subscription"
                  },
                  "unit_amount": {
                    "type": "integer",
                    "description": "The unit amount in cents in the currency specified for the item"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/subscription_item"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      },
      "delete": {
        "summary": "Delete a SubscriptionItem",
        "operationId": "SubscriptionItems_Destroy",
        "tags": [
          "SubscriptionItems"
        ],
        "description": "Deletes a SubscriptionItem from the subscription from its ID. You can't delete the last item of a subscription. Deleting an item does not cancel the subscription itself",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/deleted_subscription_item"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      }
    },
    "/subscriptions": {
      "get": {
        "summary": "List Subscriptions",
        "operationId": "Subscriptions_Index",
        "tags": [
          "Subscriptions"
        ],
        "description": "Returns a list of Subscriptions.",
        "parameters": [
          {
            "name": "currency",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The currency ISO code to filter subscriptions on"
            },
            "description": "The currency ISO code to filter subscriptions on"
          },
          {
            "name": "customer",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The ID the customer to filter subscriptions on"
            },
            "description": "The ID the customer to filter subscriptions on"
          },
          {
            "name": "ending_before",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "required": false,
              "description": "Pagination cursor"
            },
            "description": "Pagination cursor"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "required": false,
              "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100."
            },
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100."
          },
          {
            "name": "source",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "ID of the external object this subscription was synced from, to filter results"
            },
            "description": "ID of the external object this subscription was synced from, to filter results"
          },
          {
            "name": "starting_after",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "required": false,
              "description": "Pagination cursor"
            },
            "description": "Pagination cursor"
          },
          {
            "name": "type",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "sum_usage",
                "send_invoice"
              ],
              "description": "The type to filter subscriptions on"
            },
            "description": "The type to filter subscriptions on"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/SubscriptionsListResponse"
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      },
      "post": {
        "summary": "Create a subscription",
        "operationId": "Subscriptions_Create",
        "tags": [
          "Subscriptions"
        ],
        "requestBody": {
          "required": false,
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "customer": {
                    "type": "string",
                    "description": "ID of the customer to attach this subscription to"
                  },
                  "currency": {
                    "type": "string",
                    "description": "Currency ISO code."
                  },
                  "items": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "unit_amount": {
                          "type": "integer",
                          "description": "The unit amount in cents in the currency specified for the item"
                        },
                        "currency": {
                          "type": "string",
                          "description": "Currency ISO code. Must be the same than the related subscription's currency"
                        },
                        "description": {
                          "type": "string",
                          "description": "Text describing the item, that will appear on invoice lines"
                        },
                        "automatic_tax": {
                          "type": "boolean",
                          "default": true,
                          "description": "Boolean representing whether tax should be calculated automatically at each subscription renewal."
                        },
                        "declare_in_region": {
                          "type": "string",
                          "description": "If `automatic_tax=false`, the jurisdiction where tax is owed. It is often the EU country or the US state code"
                        },
                        "detailed_description": {
                          "type": "string"
                        },
                        "metadata": {
                          "type": "object",
                          "properties": {
                            "additionalProperties": {
                              "type": "string"
                            }
                          },
                          "description": "Set of key-value pairs that you can attach to an object"
                        },
                        "product_type": {
                          "type": "string",
                          "description": "Code of the product type the item refers to"
                        },
                        "tax_calculation": {
                          "type": "string",
                          "enum": [
                            "inclusive",
                            "exclusive"
                          ],
                          "description": "Decide if item amounts are considered as tax inclusive or tax exclusive. Mandatory if `automatic_tax=true` or `tax_rate` is filled"
                        },
                        "tax": {
                          "type": "string",
                          "example": "eu-vat",
                          "description": "If `automatic_tax=false`, the ID of the `tax` object that should be applied to the given item. Leave blank if no tax should apply"
                        },
                        "tax_rate": {
                          "type": "number",
                          "format": "float",
                          "description": "If `automatic_tax=false`, the percentage of tax that should be applied to the given item. Leave blank if no tax should apply. Can be set to `0` if, for instance, reverse charge applies"
                        },
                        "quantity": {
                          "type": "integer",
                          "description": "The quantity of items of this type that are sold in the given subscription"
                        }
                      },
                      "required": [
                        "unit_amount",
                        "currency",
                        "description"
                      ]
                    },
                    "description": "A list of subscription items. Mandatory if `type=send_invoice`"
                  },
                  "interval": {
                    "type": "string",
                    "enum": [
                      "week",
                      "month",
                      "year"
                    ],
                    "description": "The recurring interval of when an invoice must be generated"
                  },
                  "type": {
                    "type": "string",
                    "enum": [
                      "sum_usage",
                      "send_invoice"
                    ],
                    "description": "The type of the subscription, designing how the invoice amounts are calculated"
                  },
                  "description": {
                    "type": "string",
                    "description": "Description of the subscription, might be the products/services sold."
                  },
                  "interval_count": {
                    "type": "integer",
                    "default": 1,
                    "description": "The number of intervals between subscription billings. For example, interval=month and interval_count=3 bills every 3 months"
                  },
                  "invoice_settings": {
                    "type": "object",
                    "properties": {
                      "document_template": {
                        "type": "string",
                        "description": "The ID of the DocumentTemplate, invoices generated by this subscription should relate to. Use the default one if left blank"
                      },
                      "invoice_numbering_sequence": {
                        "type": "string",
                        "description": "The ID of the InvoiceNumberingSequence, invoices generated by this subscription should relate to. Use the default one if left blank"
                      }
                    },
                    "description": "If `type=send_invoice`, the invoice settings for this subscription"
                  },
                  "metadata": {
                    "type": "object",
                    "properties": {
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "description": "Set of key-value pairs that you can attach to an object"
                  },
                  "payment_recipients": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Array of `payment recipient` IDs that are accepted to pay invoices generated for this subscription. Only present if `type=send_invoice`"
                  },
                  "sources": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "gateway": {
                          "type": "string",
                          "description": "The name of the gateway. E.g.: stripe, paypal"
                        },
                        "identifier": {
                          "type": "string",
                          "description": "The object ID from the gateway"
                        },
                        "source_type": {
                          "type": "string",
                          "description": "The object type from the gateway"
                        }
                      }
                    },
                    "description": "Information related to the platform and the ID of the object this item was synced from"
                  }
                },
                "required": [
                  "customer",
                  "currency",
                  "interval",
                  "type"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/subscription"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      }
    },
    "/subscriptions/{id}": {
      "get": {
        "summary": "Retrieve a single Subscription",
        "operationId": "Subscriptions_Show",
        "tags": [
          "Subscriptions"
        ],
        "description": "Returns a single Subscription by its ID.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/subscription"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      },
      "delete": {
        "summary": "Delete a Subscription",
        "operationId": "Subscriptions_Destroy",
        "tags": [
          "Subscriptions"
        ],
        "description": "Delete a Subscription by its ID.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/deleted_subscription"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      }
    },
    "/subscriptions/{subscription_id}/usage_items": {
      "get": {
        "summary": "List Usage Items",
        "operationId": "UsageItems_Index",
        "tags": [
          "UsageItems"
        ],
        "description": "Returns a list of Usage Items.",
        "parameters": [
          {
            "name": "ending_before",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "required": false,
              "description": "Pagination cursor"
            },
            "description": "Pagination cursor"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "required": false,
              "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100."
            },
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100."
          },
          {
            "name": "subscription_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The ID the self-billing invoice to filter items on"
            },
            "description": "The ID the self-billing invoice to filter items on"
          },
          {
            "name": "starting_after",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "required": false,
              "description": "Pagination cursor"
            },
            "description": "Pagination cursor"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/UsageItemsListResponse"
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      },
      "post": {
        "summary": "Create a usage item",
        "operationId": "UsageItems_Create",
        "tags": [
          "UsageItems"
        ],
        "parameters": [
          {
            "name": "subscription_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The ID the subscription invoice to create usage items on"
            },
            "description": "The ID the subscription invoice to create usage items on"
          }
        ],
        "requestBody": {
          "required": false,
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "amount": {
                    "type": "integer",
                    "description": "The gross amount, in the currency, of the usage item"
                  },
                  "currency": {
                    "type": "string",
                    "description": "Currency ISO code. Must be the same than the related subscription's currency"
                  },
                  "date": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The datetime of this usage item"
                  },
                  "description": {
                    "type": "string",
                    "description": "Name of the product / service sold."
                  },
                  "metadata": {
                    "type": "object",
                    "properties": {
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "description": "Set of key-value pairs that you can attach to an object"
                  },
                  "sources": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "gateway": {
                          "type": "string",
                          "description": "The name of the gateway. E.g.: stripe, paypal"
                        },
                        "identifier": {
                          "type": "string",
                          "description": "The object ID from the gateway"
                        },
                        "source_type": {
                          "type": "string",
                          "description": "The object type from the gateway"
                        }
                      }
                    },
                    "description": "Information related to the platform and the ID of the object this item was synced from"
                  }
                },
                "required": [
                  "amount",
                  "currency"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/usage_item"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      }
    },
    "/subscriptions/{subscription_id}/usage_items/{id}": {
      "get": {
        "summary": "Retrieve a single Usage Item",
        "operationId": "UsageItems_Show",
        "tags": [
          "UsageItems"
        ],
        "description": "Returns a single Usage Item by its ID.",
        "parameters": [
          {
            "name": "subscription_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The ID the subscription to filter items on"
            },
            "description": "The ID the subscription to filter items on"
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/usage_item"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      },
      "delete": {
        "summary": "Delete a pending UsageItem",
        "operationId": "UsageItems_Destroy",
        "tags": [
          "UsageItems"
        ],
        "description": "Delete a pending UsageItem by its ID.",
        "parameters": [
          {
            "name": "subscription_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The ID the subscription to filter items on"
            },
            "description": "The ID the subscription to filter items on"
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/deleted_usage_item"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      }
    },
    "/suppliers": {
      "get": {
        "summary": "List Suppliers",
        "operationId": "Suppliers_Index",
        "tags": [
          "Suppliers"
        ],
        "description": "Returns a list of Suppliers.",
        "parameters": [
          {
            "name": "email",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "A filter on the list based on the supplier's email field. The value must be a string."
            },
            "description": "A filter on the list based on the supplier's email field. The value must be a string."
          },
          {
            "name": "ending_before",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "required": false,
              "description": "Pagination cursor"
            },
            "description": "Pagination cursor"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "required": false,
              "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100."
            },
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100."
          },
          {
            "name": "source",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "ID of the external object this supplier was synced from, to filter results"
            },
            "description": "ID of the external object this supplier was synced from, to filter results"
          },
          {
            "name": "starting_after",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "required": false,
              "description": "Pagination cursor"
            },
            "description": "Pagination cursor"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/SuppliersListResponse"
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "# Definition\nGET https://apiv2.octobat.com/suppliers/\n\n# Example request\n$ curl https://apiv2.octobat.com/suppliers \\\n-u oc_test_skey_tkHCYYOUVrYyY5rBFZxNzgtt:"
          },
          {
            "lang": "ruby",
            "source": "# Example request\nrequire \"octobat\"\nOctobat.api_key = \"oc_test_skey_tkHCYYOUVrYyY5rBFZxNzgtt\"\nOctobat::Supplier.list( { limit: 3} )"
          },
          {
            "lang": "node",
            "source": "// Example request\nconst octobat = require('octobat-npm')('oc_test_skey_mf8MurlswKilc78QolUN7Qtt');\noctobat.suppliers.list({\n  limit: 3,\n}).then(function(suppliers) {\n  // ...\n}).catch(function(err) {\n  // ...\n})"
          },
          {
            "lang": "php",
            "source": "// Example request\n\\Octobat\\Octobat::setApiKey('oc_test_skey_BQokikJOvBiI2HlWgH4olfQ2');\n$suppliers = \\Octobat\\Supplier::all(['limit' => 3]);"
          }
        ]
      },
      "post": {
        "summary": "Create a supplier",
        "operationId": "Suppliers_Create",
        "tags": [
          "Suppliers"
        ],
        "description": "Create a supplier",
        "requestBody": {
          "required": false,
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "billing_address_line1": {
                    "type": "string"
                  },
                  "billing_address_line2": {
                    "type": "string"
                  },
                  "billing_address_city": {
                    "type": "string"
                  },
                  "billing_address_zip": {
                    "type": "string"
                  },
                  "billing_address_state": {
                    "type": "string"
                  },
                  "billing_address_country": {
                    "type": "string",
                    "example": "FR",
                    "description": "The billing address Country ISO Alpha 2 code of the supplier"
                  },
                  "business_type": {
                    "type": "string",
                    "enum": [
                      "B2B",
                      "B2C"
                    ],
                    "description": "Fill if you want to force the supplier to be considered as a B2B/B2C"
                  },
                  "document_settings": {
                    "type": "object",
                    "properties": {
                      "custom_fields": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "The name of the custom field."
                            },
                            "value": {
                              "type": "string",
                              "description": "The value of the custom field."
                            }
                          }
                        },
                        "description": "List of custom fields to be displayed in documents"
                      }
                    },
                    "description": "The supplier's default document settings"
                  },
                  "email": {
                    "type": "string",
                    "description": "The suppliers's email"
                  },
                  "metadata": {
                    "type": "object",
                    "properties": {
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "description": "Set of key-value pairs that you can attach to an object"
                  },
                  "name": {
                    "type": "string",
                    "description": "The supplier's full name or business name"
                  },
                  "phone_number": {
                    "type": "string"
                  },
                  "preferred_locales": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "example": "fr-FR",
                      "description": "The locale code"
                    },
                    "description": "The supplier's preferred locales (languages), ordered by preference"
                  },
                  "shipping": {
                    "type": "object",
                    "properties": {
                      "address_line1": {
                        "type": "string"
                      },
                      "address_line2": {
                        "type": "string"
                      },
                      "address_city": {
                        "type": "string"
                      },
                      "address_zip": {
                        "type": "string"
                      },
                      "address_state": {
                        "type": "string"
                      },
                      "address_country": {
                        "type": "string",
                        "example": "FR",
                        "description": "Must be an ISO alpha-2 code"
                      }
                    },
                    "description": "Shipping details of the supplier."
                  },
                  "sources": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "gateway": {
                          "type": "string",
                          "description": "The name of the gateway. E.g.: stripe, paypal"
                        },
                        "identifier": {
                          "type": "string",
                          "description": "The object ID from the gateway"
                        },
                        "source_type": {
                          "type": "string",
                          "description": "The object type from the gateway"
                        }
                      }
                    },
                    "description": "Information related to the platform and the ID of the object this supplier was synced from"
                  },
                  "specific_tax_rates": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "rate": {
                          "type": "number",
                          "format": "float",
                          "description": "The tax percentage that applies."
                        },
                        "tax": {
                          "type": "string",
                          "example": "eu-vat",
                          "description": "The tax type."
                        },
                        "type": {
                          "type": "string",
                          "example": "Country",
                          "description": "The tax juridiction type."
                        }
                      }
                    },
                    "description": "A set of Tax rates that apply to the given supplier when they sell to the current account entity"
                  },
                  "tax_exempt": {
                    "type": "boolean",
                    "default": false,
                    "description": "Whether the supplier is tax exempt or not"
                  },
                  "tax_number": {
                    "type": "string",
                    "description": "The supplier's tax ID"
                  },
                  "website": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/supplier"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "# Definition\nPOST https://apiv2.octobat.com/suppliers\n\n# Example request\n$ curl -X POST https://apiv2.octobat.com/suppliers \\\n-u oc_test_skey_tkHCYYOUVrYyY5rBFZxNzgtt: \\\n-d email=user@octobat.com \\\n-d name='John Doe' \\\n-d billing_address_country=FR"
          },
          {
            "lang": "ruby",
            "source": "# Example request\nrequire \"octobat\"\nOctobat.api_key = \"oc_test_skey_tkHCYYOUVrYyY5rBFZxNzgtt\"\n\nOctobat::Supplier.create( {\n  email: 'user@octobat.com',\n  name: 'John Doe',\n  billing_address_country: 'FR'\n} )"
          },
          {
            "lang": "node",
            "source": "// Example request\nconst octobat = require('octobat-npm')('oc_test_skey_mf8MurlswKilc78QolUN7Qtt');\noctobat.suppliers.create({\n  email: \"user@octobat.com\",\n  name: \"John Doe\",\n  billing_address_country: \"FR\"\n}).then(function(supplier) {\n  // ...\n}).catch(function(err) {\n  // ...\n})"
          },
          {
            "lang": "php",
            "source": "// Example request\n\\Octobat\\Octobat::setApiKey('oc_test_skey_BQokikJOvBiI2HlWgH4olfQ2');\n$supplier = \\Octobat\\Supplier::create([\n  'email' => 'user@octobat.com',\n  'name' => 'John Doe',\n  'billing_address_country' => 'FR'\n]);"
          }
        ]
      }
    },
    "/suppliers/{id}": {
      "get": {
        "summary": "Retrieve a Single Supplier",
        "operationId": "Suppliers_Show",
        "tags": [
          "Suppliers"
        ],
        "description": "Returns a Single Supplier by its ID.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/supplier"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "# Definition\nGET https://apiv2.octobat.com/suppliers/:id\n\n# Example request\n$ curl https://apiv2.octobat.com/suppliers/oc_su_xxxxxxxx \\\n-u oc_test_skey_tkHCYYOUVrYyY5rBFZxNzgtt:"
          },
          {
            "lang": "ruby",
            "source": "# Example request\nrequire \"octobat\"\nOctobat.api_key = \"oc_test_skey_tkHCYYOUVrYyY5rBFZxNzgtt\"\n\nOctobat::Supplier.retrieve(\"oc_su_xxxxxxxx\")"
          },
          {
            "lang": "node",
            "source": "// Example request\nconst octobat = require('octobat-npm')('oc_test_skey_mf8MurlswKilc78QolUN7Qtt');\noctobat.suppliers.retrieve({\n  \"oc_su_xxxxxxxx\"\n}).then(function(supplier) {\n  // ...\n}).catch(function(err) {\n  // ...\n})"
          },
          {
            "lang": "php",
            "source": "// Example request\n\\Octobat\\Octobat::setApiKey('oc_test_skey_BQokikJOvBiI2HlWgH4olfQ2');\n$supplier = \\Octobat\\Supplier::retrieve(\"oc_su_xxxxxxxx\");"
          }
        ]
      },
      "patch": {
        "summary": "Update a Single Supplier",
        "operationId": "Suppliers_Update",
        "tags": [
          "Suppliers"
        ],
        "description": "Update a Single Supplier by its ID.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": false,
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "billing_address_line1": {
                    "type": "string"
                  },
                  "billing_address_line2": {
                    "type": "string"
                  },
                  "billing_address_city": {
                    "type": "string"
                  },
                  "billing_address_zip": {
                    "type": "string"
                  },
                  "billing_address_state": {
                    "type": "string"
                  },
                  "billing_address_country": {
                    "type": "string",
                    "example": "FR",
                    "description": "The billing address Country ISO Alpha 2 code of the supplier"
                  },
                  "business_type": {
                    "type": "string",
                    "enum": [
                      "B2B",
                      "B2C"
                    ],
                    "description": "Fill if you want to force the supplier to be considered as a B2B/B2C"
                  },
                  "document_settings": {
                    "type": "object",
                    "properties": {
                      "custom_fields": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "The name of the custom field."
                            },
                            "value": {
                              "type": "string",
                              "description": "The value of the custom field."
                            }
                          }
                        },
                        "description": "List of custom fields to be displayed in documents"
                      }
                    },
                    "description": "The supplier's default document settings"
                  },
                  "email": {
                    "type": "string",
                    "description": "The supplier's email"
                  },
                  "metadata": {
                    "type": "object",
                    "properties": {
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "description": "Set of key-value pairs that you can attach to an object"
                  },
                  "name": {
                    "type": "string",
                    "description": "The supplier's full name or business name"
                  },
                  "phone_number": {
                    "type": "string"
                  },
                  "preferred_locales": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "example": "fr-FR",
                      "description": "The locale code"
                    },
                    "description": "The supplier's preferred locales (languages), ordered by preference"
                  },
                  "shipping": {
                    "type": "object",
                    "properties": {
                      "address_line1": {
                        "type": "string"
                      },
                      "address_line2": {
                        "type": "string"
                      },
                      "address_city": {
                        "type": "string"
                      },
                      "address_zip": {
                        "type": "string"
                      },
                      "address_state": {
                        "type": "string"
                      },
                      "address_country": {
                        "type": "string",
                        "example": "FR",
                        "description": "Must be an ISO alpha-2 code"
                      }
                    },
                    "description": "Shipping details of the supplier."
                  },
                  "sources": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "gateway": {
                          "type": "string",
                          "description": "The name of the gateway. E.g.: stripe, paypal"
                        },
                        "identifier": {
                          "type": "string",
                          "description": "The object ID from the gateway"
                        },
                        "source_type": {
                          "type": "string",
                          "description": "The object type from the gateway"
                        }
                      }
                    },
                    "description": "Information related to the platform and the ID of the object this supplier was synced from"
                  },
                  "specific_tax_rates": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "rate": {
                          "type": "number",
                          "format": "float",
                          "description": "The tax percentage that applies."
                        },
                        "tax": {
                          "type": "string",
                          "example": "eu-vat",
                          "description": "The tax type."
                        },
                        "type": {
                          "type": "string",
                          "example": "Country",
                          "description": "The tax juridiction type."
                        }
                      }
                    },
                    "description": "A set of Tax rates that apply to the given supplier when they sell to the current account entity"
                  },
                  "tax_exempt": {
                    "type": "boolean",
                    "default": false,
                    "description": "Whether the supplier is tax exempt or not"
                  },
                  "tax_number": {
                    "type": "string",
                    "description": "The supplier's tax ID"
                  },
                  "website": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/supplier"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "# Definition\nPATCH https://apiv2.octobat.com/suppliers/:id\n\n# Example request\n$ curl -X PATCH https://apiv2.octobat.com/suppliers/oc_su_xxxxxxxx \\\n-u oc_test_skey_tkHCYYOUVrYyY5rBFZxNzgtt: \\\n-d email=newemail@octobat.com"
          },
          {
            "lang": "ruby",
            "source": "# Example request\nrequire \"octobat\"\nOctobat.api_key = \"oc_test_skey_tkHCYYOUVrYyY5rBFZxNzgtt\"\n\nsupplier = Octobat::Supplier.retrieve(\"oc_su_xxxxxxxx\")\nsupplier.email = 'newemail@octobat.com'\nsupplier.save"
          },
          {
            "lang": "node",
            "source": "// Example request\nconst octobat = require('octobat-npm')('oc_test_skey_mf8MurlswKilc78QolUN7Qtt');\noctobat.suppliers.update(\n  \"oc_su_xxxxxxxx\",\n  {\n    email: \"user@octobat.com\",\n    name: \"John Doe\",\n    billing_address_country: \"FR\"\n  }\n).then(function(supplier) {\n  // ...\n}).catch(function(err) {\n  // ...\n})"
          },
          {
            "lang": "php",
            "source": "// Example request\n\\Octobat\\Octobat::setApiKey('oc_test_skey_BQokikJOvBiI2HlWgH4olfQ2');\n$supplier = \\Octobat\\Supplier::update(\n  \"oc_su_xxxxxxxx\",\n  [ 'email' => 'newemail@octobat.com' ]\n);"
          }
        ]
      },
      "put": {
        "summary": "Update a Single Supplier",
        "operationId": "Suppliers_Update",
        "tags": [
          "Suppliers"
        ],
        "description": "Update a Single Supplier by its ID.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": false,
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "billing_address_line1": {
                    "type": "string"
                  },
                  "billing_address_line2": {
                    "type": "string"
                  },
                  "billing_address_city": {
                    "type": "string"
                  },
                  "billing_address_zip": {
                    "type": "string"
                  },
                  "billing_address_state": {
                    "type": "string"
                  },
                  "billing_address_country": {
                    "type": "string",
                    "example": "FR",
                    "description": "The billing address Country ISO Alpha 2 code of the supplier"
                  },
                  "business_type": {
                    "type": "string",
                    "enum": [
                      "B2B",
                      "B2C"
                    ],
                    "description": "Fill if you want to force the supplier to be considered as a B2B/B2C"
                  },
                  "document_settings": {
                    "type": "object",
                    "properties": {
                      "custom_fields": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string",
                              "description": "The name of the custom field."
                            },
                            "value": {
                              "type": "string",
                              "description": "The value of the custom field."
                            }
                          }
                        },
                        "description": "List of custom fields to be displayed in documents"
                      }
                    },
                    "description": "The supplier's default document settings"
                  },
                  "email": {
                    "type": "string",
                    "description": "The supplier's email"
                  },
                  "metadata": {
                    "type": "object",
                    "properties": {
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "description": "Set of key-value pairs that you can attach to an object"
                  },
                  "name": {
                    "type": "string",
                    "description": "The supplier's full name or business name"
                  },
                  "phone_number": {
                    "type": "string"
                  },
                  "preferred_locales": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "example": "fr-FR",
                      "description": "The locale code"
                    },
                    "description": "The supplier's preferred locales (languages), ordered by preference"
                  },
                  "shipping": {
                    "type": "object",
                    "properties": {
                      "address_line1": {
                        "type": "string"
                      },
                      "address_line2": {
                        "type": "string"
                      },
                      "address_city": {
                        "type": "string"
                      },
                      "address_zip": {
                        "type": "string"
                      },
                      "address_state": {
                        "type": "string"
                      },
                      "address_country": {
                        "type": "string",
                        "example": "FR",
                        "description": "Must be an ISO alpha-2 code"
                      }
                    },
                    "description": "Shipping details of the supplier."
                  },
                  "sources": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "gateway": {
                          "type": "string",
                          "description": "The name of the gateway. E.g.: stripe, paypal"
                        },
                        "identifier": {
                          "type": "string",
                          "description": "The object ID from the gateway"
                        },
                        "source_type": {
                          "type": "string",
                          "description": "The object type from the gateway"
                        }
                      }
                    },
                    "description": "Information related to the platform and the ID of the object this supplier was synced from"
                  },
                  "specific_tax_rates": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "rate": {
                          "type": "number",
                          "format": "float",
                          "description": "The tax percentage that applies."
                        },
                        "tax": {
                          "type": "string",
                          "example": "eu-vat",
                          "description": "The tax type."
                        },
                        "type": {
                          "type": "string",
                          "example": "Country",
                          "description": "The tax juridiction type."
                        }
                      }
                    },
                    "description": "A set of Tax rates that apply to the given supplier when they sell to the current account entity"
                  },
                  "tax_exempt": {
                    "type": "boolean",
                    "default": false,
                    "description": "Whether the supplier is tax exempt or not"
                  },
                  "tax_number": {
                    "type": "string",
                    "description": "The supplier's tax ID"
                  },
                  "website": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/supplier"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        },
        "x-code-samples": [
          {
            "lang": "curl",
            "source": "# Definition\nPATCH https://apiv2.octobat.com/suppliers/:id\n\n# Example request\n$ curl -X PATCH https://apiv2.octobat.com/suppliers/oc_su_xxxxxxxx \\\n-u oc_test_skey_tkHCYYOUVrYyY5rBFZxNzgtt: \\\n-d email=newemail@octobat.com"
          },
          {
            "lang": "ruby",
            "source": "# Example request\nrequire \"octobat\"\nOctobat.api_key = \"oc_test_skey_tkHCYYOUVrYyY5rBFZxNzgtt\"\n\nsupplier = Octobat::Supplier.retrieve(\"oc_su_xxxxxxxx\")\nsupplier.email = 'newemail@octobat.com'\nsupplier.save"
          },
          {
            "lang": "node",
            "source": "// Example request\nconst octobat = require('octobat-npm')('oc_test_skey_mf8MurlswKilc78QolUN7Qtt');\noctobat.suppliers.update(\n  \"oc_su_xxxxxxxx\",\n  {\n    email: \"user@octobat.com\",\n    name: \"John Doe\",\n    billing_address_country: \"FR\"\n  }\n).then(function(supplier) {\n  // ...\n}).catch(function(err) {\n  // ...\n})"
          },
          {
            "lang": "php",
            "source": "// Example request\n\\Octobat\\Octobat::setApiKey('oc_test_skey_BQokikJOvBiI2HlWgH4olfQ2');\n$supplier = \\Octobat\\Supplier::update(\n  \"oc_su_xxxxxxxx\",\n  [ 'email' => 'newemail@octobat.com' ]\n);"
          }
        ]
      },
      "delete": {
        "summary": "Delete a Single Supplier",
        "operationId": "Suppliers_Destroy",
        "tags": [
          "Suppliers"
        ],
        "description": "Delete a Single Supplier by its ID. The supplier must have no documents, or an error is returned",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/deleted_supplier"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      }
    },
    "/tax_codes": {
      "get": {
        "summary": "List Tax Codes",
        "operationId": "TaxCodes_Index",
        "tags": [
          "TaxCodes"
        ],
        "description": "Returns a list of tax codes.",
        "parameters": [
          {
            "name": "starting_after",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "required": false,
              "description": "Pagination cursor"
            },
            "description": "Pagination cursor"
          },
          {
            "name": "ending_before",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "required": false,
              "description": "Pagination cursor"
            },
            "description": "Pagination cursor"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "required": false,
              "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100."
            },
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100."
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/TaxCodesListResponse"
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      }
    },
    "/tax_codes/{id}": {
      "get": {
        "summary": "Retrieve a Single Tax Code",
        "operationId": "TaxCodes_Show",
        "tags": [
          "TaxCodes"
        ],
        "description": "Returns a Single Tax Code by its ID.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tax_code"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      }
    },
    "/tax_evidence_requests": {
      "post": {
        "summary": "Request a Tax Evidence",
        "operationId": "TaxEvidences_Create",
        "tags": [
          "TaxEvidences"
        ],
        "description": "If you want to compute an automatic tax calculation to display the tax rates for a given transaction before it is actually performed, or if the customer doesn’t exist yet in Octobat, you can request a tax evidence using this endpoint. It's particularly useful for calculating tax on-the-fly, at checkout or for a cart.",
        "requestBody": {
          "required": false,
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "customer_billing_address_country": {
                    "type": "string"
                  },
                  "customer_billing_address_state": {
                    "type": "string"
                  },
                  "customer_billing_address_zip": {
                    "type": "string"
                  },
                  "customer_business_type": {
                    "type": "string",
                    "enum": [
                      "B2B",
                      "B2C"
                    ],
                    "description": "If you want to force the calculation for a B2C/B2B mode"
                  },
                  "customer_shipping_address_country": {
                    "type": "string"
                  },
                  "customer_shipping_address_state": {
                    "type": "string"
                  },
                  "customer_shipping_address_zip": {
                    "type": "string"
                  },
                  "customer_tax_number": {
                    "type": "string",
                    "description": "The tax ID of the customer, that can trigger a validation"
                  },
                  "ip_address": {
                    "type": "string",
                    "description": "IP address of the purchase, could be IPv4 or IPv6"
                  },
                  "payment_source_type": {
                    "type": "string",
                    "example": "card",
                    "description": "Type of the payment method used for the purchase"
                  },
                  "payment_source_prefix": {
                    "type": "string",
                    "example": "424242",
                    "description": "6-digit prefix of the credit card, if relevant"
                  },
                  "payment_source_country": {
                    "type": "string",
                    "description": "ISO-alpha2 code of the payment source country"
                  },
                  "product_type": {
                    "type": "string",
                    "description": "Code of the product type the evidence refers to"
                  },
                  "sale_mode": {
                    "type": "string",
                    "enum": [
                      "B2B",
                      "B2C"
                    ],
                    "description": "If you want to force the calculation in a B2B or a B2C mode"
                  },
                  "supplier_tax_id": {
                    "type": "string",
                    "description": "ID of the supplier `tax_id` object used for this evidence"
                  },
                  "transaction_date": {
                    "type": "string",
                    "format": "date-time",
                    "description": "If you want to calculate tax for a past or a future date, fill in the transaction date"
                  },
                  "warehouse": {
                    "type": "string",
                    "description": "In the case of a physical good, the ID of the warehouse, if known, the good would be shipped from"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tax_evidence"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      }
    },
    "/tax_evidence_requests/for_supplier": {
      "post": {
        "summary": "Request a Tax Evidence for a supplier's location",
        "operationId": "TaxEvidences_ForSupplier",
        "tags": [
          "TaxEvidences"
        ],
        "description": "If you want to compute an automatic tax calculation for a specific supplier’s location, such as an event in a third-party country, you can request a tax evidence using this endpoint. It's particularly useful for calculating tax on-the-fly, at checkout or for a cart.",
        "requestBody": {
          "required": false,
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "customer_billing_address_country": {
                    "type": "string"
                  },
                  "customer_billing_address_state": {
                    "type": "string"
                  },
                  "customer_billing_address_zip": {
                    "type": "string"
                  },
                  "customer_business_type": {
                    "type": "string",
                    "enum": [
                      "B2B",
                      "B2C"
                    ],
                    "description": "If you want to force the calculation for a B2C/B2B mode"
                  },
                  "customer_shipping_address_country": {
                    "type": "string"
                  },
                  "customer_shipping_address_state": {
                    "type": "string"
                  },
                  "customer_shipping_address_zip": {
                    "type": "string"
                  },
                  "customer_tax_number": {
                    "type": "string",
                    "description": "The tax ID of the customer, that can trigger a validation"
                  },
                  "ip_address": {
                    "type": "string",
                    "description": "IP address of the purchase, could be IPv4 or IPv6"
                  },
                  "payment_source_type": {
                    "type": "string",
                    "example": "card",
                    "description": "Type of the payment method used for the purchase"
                  },
                  "payment_source_prefix": {
                    "type": "string",
                    "example": "424242",
                    "description": "6-digit prefix of the credit card, if relevant"
                  },
                  "payment_source_country": {
                    "type": "string",
                    "description": "ISO-alpha2 code of the payment source country"
                  },
                  "product_type": {
                    "type": "string",
                    "description": "Code of the product type the evidence refers to"
                  },
                  "sale_mode": {
                    "type": "string",
                    "enum": [
                      "B2B",
                      "B2C"
                    ],
                    "description": "If you want to force the calculation in a B2B or a B2C mode"
                  },
                  "supplier_billing_address_country": {
                    "type": "string"
                  },
                  "supplier_billing_address_state": {
                    "type": "string"
                  },
                  "supplier_billing_address_zip": {
                    "type": "string"
                  },
                  "supplier_tax_number": {
                    "type": "string",
                    "description": "The tax ID of the supplier"
                  },
                  "transaction_date": {
                    "type": "string",
                    "format": "date-time",
                    "description": "If you want to calculate tax for a past or a future date, fill in the transaction date"
                  },
                  "warehouse": {
                    "type": "string",
                    "description": "In the case of a physical good, the ID of the warehouse, if known, the good would be shipped from"
                  }
                },
                "required": [
                  "supplier_billing_address_country"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tax_evidence"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      }
    },
    "/tax_evidences": {
      "post": {
        "summary": "Create a Tax Evidence",
        "operationId": "TaxEvidences_Create",
        "tags": [
          "TaxEvidences"
        ],
        "description": "Create a tax evidence to calculate tax for a given transaction, or a cart item, if the customer is already registered",
        "requestBody": {
          "required": false,
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "customer": {
                    "type": "string",
                    "description": "ID of the customer for which you want to calculate tax"
                  },
                  "ip_address": {
                    "type": "string",
                    "description": "IP address of the purchase, could be IPv4 or IPv6"
                  },
                  "payment_source": {
                    "type": "string",
                    "description": "ID of the payment source. Must be attached to the customer"
                  },
                  "product_type": {
                    "type": "string",
                    "description": "Code of the product type the evidence refers to"
                  },
                  "sale_mode": {
                    "type": "string",
                    "enum": [
                      "B2B",
                      "B2C"
                    ],
                    "description": "If you want to force the calculation in a B2B or a B2C mode"
                  },
                  "supplier_tax_id": {
                    "type": "string",
                    "description": "ID of the supplier `tax_id` object used for this evidence"
                  },
                  "transaction_date": {
                    "type": "string",
                    "format": "date-time",
                    "description": "If you want to calculate tax for a past or a future date, fill in the transaction date"
                  },
                  "warehouse": {
                    "type": "string",
                    "description": "For physical goods, ID of the warehouse, if known, from which the supply is shipped"
                  }
                },
                "required": [
                  "customer"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tax_evidence"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      }
    },
    "/tax_evidences/{id}": {
      "get": {
        "summary": "Retrieve a Single Tax Evidence",
        "operationId": "TaxEvidences_Show",
        "tags": [
          "TaxEvidences"
        ],
        "description": "Returns a Single Tax Evidence by ID.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tax_evidence"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      }
    },
    "/tax_ids": {
      "get": {
        "summary": "List Tax IDs",
        "operationId": "TaxIds_Index",
        "tags": [
          "TaxIds"
        ],
        "description": "Returns a list of Tax IDs.",
        "responses": {
          "200": {
            "$ref": "#/components/responses/TaxIdsListResponse"
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      },
      "post": {
        "summary": "Create a TaxId",
        "operationId": "TaxIds_Create",
        "tags": [
          "TaxIds"
        ],
        "requestBody": {
          "required": false,
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "zone_type": {
                    "type": "string",
                    "enum": [
                      "au_abn",
                      "ca_qst",
                      "ch_vat",
                      "eu_vat",
                      "eu_vat",
                      "hk_br",
                      "in_gst",
                      "jp_cn",
                      "kr_brn",
                      "no_vat",
                      "nz_gst",
                      "ru_inn",
                      "tw_vat",
                      "za_vat"
                    ],
                    "description": "Type of the tax ID"
                  },
                  "country": {
                    "type": "string",
                    "description": "Alpha2 ISO code representing the country of the tax ID"
                  },
                  "value": {
                    "type": "string",
                    "description": "Value representing the tax ID"
                  }
                },
                "required": [
                  "zone_type",
                  "country",
                  "value"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tax_id"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      }
    },
    "/tax_ids/{id}": {
      "get": {
        "summary": "Retrieve a Tax ID",
        "operationId": "TaxIds_Show",
        "tags": [
          "TaxIds"
        ],
        "description": "Returns a Single Tax Id by its ID.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tax_id"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      },
      "patch": {
        "summary": "Update a TaxId",
        "operationId": "TaxIds_Update",
        "tags": [
          "TaxIds"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": false,
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "zone_type": {
                    "type": "string",
                    "enum": [
                      "au_abn",
                      "ca_qst",
                      "ch_vat",
                      "eu_vat",
                      "eu_vat",
                      "hk_br",
                      "in_gst",
                      "jp_cn",
                      "kr_brn",
                      "no_vat",
                      "nz_gst",
                      "ru_inn",
                      "tw_vat",
                      "za_vat"
                    ],
                    "description": "Type of the tax ID"
                  },
                  "country": {
                    "type": "string",
                    "description": "Alpha2 ISO code representing the country of the tax ID"
                  },
                  "value": {
                    "type": "string",
                    "description": "Value representing the tax ID"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tax_id"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      },
      "put": {
        "summary": "Update a TaxId",
        "operationId": "TaxIds_Update",
        "tags": [
          "TaxIds"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": false,
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "zone_type": {
                    "type": "string",
                    "enum": [
                      "au_abn",
                      "ca_qst",
                      "ch_vat",
                      "eu_vat",
                      "eu_vat",
                      "hk_br",
                      "in_gst",
                      "jp_cn",
                      "kr_brn",
                      "no_vat",
                      "nz_gst",
                      "ru_inn",
                      "tw_vat",
                      "za_vat"
                    ],
                    "description": "Type of the tax ID"
                  },
                  "country": {
                    "type": "string",
                    "description": "Alpha2 ISO code representing the country of the tax ID"
                  },
                  "value": {
                    "type": "string",
                    "description": "Value representing the tax ID"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tax_id"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      }
    },
    "/tax_ids/{id}/archive": {
      "patch": {
        "summary": "Archive a tax ID",
        "operationId": "TaxIds_Archive",
        "tags": [
          "TaxIds"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tax_id"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      }
    },
    "/tax_region_settings": {
      "get": {
        "summary": "List Tax Region Settings",
        "operationId": "TaxRegionSettings_Index",
        "tags": [
          "TaxRegionSettings"
        ],
        "description": "Returns a list of tax region settings.",
        "responses": {
          "200": {
            "$ref": "#/components/responses/TaxRegionSettingsListResponse"
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      }
    },
    "/tax_region_settings/{id}": {
      "get": {
        "summary": "Retrieve a Single Tax Region Setting",
        "operationId": "TaxRegionSettings_Show",
        "tags": [
          "TaxRegionSettings"
        ],
        "description": "Returns a Single Tax Region Setting by ID.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tax_region_setting"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      },
      "patch": {
        "summary": "Update a tax region setting",
        "operationId": "TaxRegionSettings_Update",
        "tags": [
          "TaxRegionSettings"
        ],
        "description": "Update a Single Tax region setting by ID.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": false,
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "activated": {
                    "type": "boolean",
                    "description": "Whether tax is activated for current region or not"
                  },
                  "regions": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "example": "FR",
                      "description": "The region code (country ISO alpha2 or province/state code)"
                    },
                    "description": "If tax has sub-regions, such as EU countries or US states, or CA provinces, the ones where tax is activated"
                  },
                  "physical_regions": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "example": "FR",
                      "description": "The region code (country ISO alpha2 or province/state code)"
                    },
                    "description": "Specifically for EU-VAT, countries where the seller is registered in for distance selling VAT. If a region is not activated, B2C physical VAT for sales in this region will automatically be calculated at the seller's country. If activated they will be calculated at the customer's country rate."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tax_region_setting"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      },
      "put": {
        "summary": "Update a tax region setting",
        "operationId": "TaxRegionSettings_Update",
        "tags": [
          "TaxRegionSettings"
        ],
        "description": "Update a Single Tax region setting by ID.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": false,
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "activated": {
                    "type": "boolean",
                    "description": "Whether tax is activated for current region or not"
                  },
                  "regions": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "example": "FR",
                      "description": "The region code (country ISO alpha2 or province/state code)"
                    },
                    "description": "If tax has sub-regions, such as EU countries or US states, or CA provinces, the ones where tax is activated"
                  },
                  "physical_regions": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "example": "FR",
                      "description": "The region code (country ISO alpha2 or province/state code)"
                    },
                    "description": "Specifically for EU-VAT, countries where the seller is registered in for distance selling VAT. If a region is not activated, B2C physical VAT for sales in this region will automatically be calculated at the seller's country. If activated they will be calculated at the customer's country rate."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tax_region_setting"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      }
    },
    "/tax_region_settings/{id}/activate": {
      "patch": {
        "summary": "Activate a Single Tax Region Setting",
        "operationId": "TaxRegionSettings_Activate",
        "tags": [
          "TaxRegionSettings"
        ],
        "description": "Activate a Single Tax Region Setting.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tax_region_setting"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      }
    },
    "/tax_region_settings/{id}/deactivate": {
      "patch": {
        "summary": "Deactivate a Single Tax Region Setting",
        "operationId": "TaxRegionSettings_Deactivate",
        "tags": [
          "TaxRegionSettings"
        ],
        "description": "Deactivate a Single Tax Region Setting.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tax_region_setting"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      }
    },
    "/taxes": {
      "get": {
        "summary": "List Taxes",
        "operationId": "Taxes_Index",
        "tags": [
          "Taxes"
        ],
        "description": "Returns a list of taxes.",
        "parameters": [
          {
            "name": "starting_after",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "required": false,
              "description": "Pagination cursor"
            },
            "description": "Pagination cursor"
          },
          {
            "name": "ending_before",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "required": false,
              "description": "Pagination cursor"
            },
            "description": "Pagination cursor"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "required": false,
              "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100."
            },
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100."
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/TaxesListResponse"
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      }
    },
    "/taxes/{id}": {
      "get": {
        "summary": "Retrieve a Single Tax",
        "operationId": "Taxes_Show",
        "tags": [
          "Taxes"
        ],
        "description": "Returns a Single Tax by code.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tax"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      }
    },
    "/transactions": {
      "get": {
        "summary": "List Transactions",
        "operationId": "Transactions_Index",
        "tags": [
          "Transactions"
        ],
        "description": "Returns a list of Transactions.",
        "parameters": [
          {
            "name": "credit_note",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "A filter on the list based on the credit note ID."
            },
            "description": "A filter on the list based on the credit note ID."
          },
          {
            "name": "customer",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "A filter on the list based on the customer ID."
            },
            "description": "A filter on the list based on the customer ID."
          },
          {
            "name": "invoice",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "A filter on the list based on the invoice ID."
            },
            "description": "A filter on the list based on the invoice ID."
          },
          {
            "name": "flow_type",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "payment",
                "refund",
                "adjustment",
                "reinstatement"
              ],
              "description": "A filter on the list based on the transaction flow type."
            },
            "description": "A filter on the list based on the transaction flow type."
          },
          {
            "name": "payment_recipient",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "A filter on the list based on the payment recipient ID."
            },
            "description": "A filter on the list based on the payment recipient ID."
          },
          {
            "name": "source",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "example": "cus_xxxxxxxxx",
              "description": "ID of the external object this customer was synced from, to filter results"
            },
            "description": "ID of the external object this customer was synced from, to filter results"
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "failed",
                "succeeded"
              ],
              "description": "A filter on the list based on the transaction status."
            },
            "description": "A filter on the list based on the transaction status."
          },
          {
            "name": "transaction_date",
            "in": "query",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "gte": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Filter on objects created on or after the value provided"
                },
                "lte": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Filter on objects created on or before the value provided"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/TransactionsListResponse"
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      },
      "post": {
        "summary": "Create a transaction",
        "operationId": "Transactions_Create",
        "tags": [
          "Transactions"
        ],
        "description": "Create a transaction",
        "requestBody": {
          "required": false,
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "amount": {
                    "type": "integer",
                    "description": "An integer representing the amount of the transaction in the smallest currency unit (e.g., 100 cents to charge $1.00 or 100 to charge ¥100, a zero-decimal currency)"
                  },
                  "currency": {
                    "type": "string",
                    "description": "Three-letter ISO currency code, in lowercase"
                  },
                  "customer": {
                    "type": "string",
                    "description": "ID of the customer this transaction refers to"
                  },
                  "flow_type": {
                    "type": "string",
                    "enum": [
                      "payment",
                      "refund",
                      "adjustment",
                      "reinstatement"
                    ],
                    "description": "A string representing the inner type of the transaction"
                  },
                  "status": {
                    "type": "string",
                    "enum": [
                      "failed",
                      "succeeded"
                    ],
                    "description": "A string representing the outcome of the transaction"
                  },
                  "credit_note": {
                    "type": "string",
                    "description": "ID of the credit note this transaction is linked to."
                  },
                  "invoice": {
                    "type": "string",
                    "description": "ID of the invoice this transaction is linked to."
                  },
                  "payment_recipient": {
                    "type": "string",
                    "description": "ID of the payment_source this transaction refers to"
                  },
                  "payment_source": {
                    "type": "string",
                    "description": "ID of the payment_source this transaction refers to"
                  },
                  "sources": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "gateway": {
                          "type": "string",
                          "description": "The name of the gateway. E.g.: stripe, paypal"
                        },
                        "identifier": {
                          "type": "string",
                          "description": "The object ID from the gateway"
                        },
                        "source_type": {
                          "type": "string",
                          "description": "The object type from the gateway"
                        }
                      }
                    },
                    "description": "Information related to the platform and the ID of the object this transaction was synced from"
                  },
                  "transaction_date": {
                    "type": "string",
                    "format": "date-time",
                    "description": "The datetime this transaction was recorded"
                  }
                },
                "required": [
                  "amount",
                  "currency",
                  "customer",
                  "flow_type",
                  "status"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/transaction"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      }
    },
    "/transactions/{id}": {
      "get": {
        "summary": "Retrieve a Single Transaction",
        "operationId": "Transactions_Show",
        "tags": [
          "Transactions"
        ],
        "description": "Returns a Single Transaction by its ID.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/transaction"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      }
    },
    "/warehouses": {
      "get": {
        "summary": "List Warehouses",
        "operationId": "Warehouses_Index",
        "tags": [
          "Warehouses"
        ],
        "description": "Returns a list of Warehouses.",
        "parameters": [
          {
            "name": "starting_after",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "required": false,
              "description": "Pagination cursor"
            },
            "description": "Pagination cursor"
          },
          {
            "name": "ending_before",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "required": false,
              "description": "Pagination cursor"
            },
            "description": "Pagination cursor"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "required": false,
              "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100."
            },
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100."
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/WarehousesListResponse"
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      },
      "post": {
        "summary": "Create a Warehouse",
        "operationId": "Warehouses_Create",
        "tags": [
          "Warehouses"
        ],
        "requestBody": {
          "required": false,
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "address": {
                    "type": "object",
                    "properties": {
                      "line1": {
                        "type": "string"
                      },
                      "line2": {
                        "type": "string"
                      },
                      "zip": {
                        "type": "string"
                      },
                      "city": {
                        "type": "string"
                      },
                      "state": {
                        "type": "string"
                      },
                      "country": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "country"
                    ],
                    "description": "The Warehouse's address"
                  },
                  "metadata": {
                    "type": "object",
                    "properties": {
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "description": "Set of key-value pairs that you can attach to an object"
                  },
                  "name": {
                    "type": "string",
                    "description": "The name of the warehouse"
                  }
                },
                "required": [
                  "address",
                  "name"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/warehouse"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      }
    },
    "/warehouses/{id}": {
      "get": {
        "summary": "Retrieve a Single Warehouse",
        "operationId": "Warehouses_Show",
        "tags": [
          "Warehouses"
        ],
        "description": "Returns a Single Warehouse by its ID.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/warehouse"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      },
      "patch": {
        "summary": "Update a Warehouse",
        "operationId": "Warehouses_Update",
        "tags": [
          "Warehouses"
        ],
        "description": "Update a Warehouse by its ID.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": false,
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "address": {
                    "type": "object",
                    "properties": {
                      "line1": {
                        "type": "string"
                      },
                      "line2": {
                        "type": "string"
                      },
                      "zip": {
                        "type": "string"
                      },
                      "city": {
                        "type": "string"
                      },
                      "state": {
                        "type": "string"
                      },
                      "country": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "country"
                    ],
                    "description": "The Warehouse's address"
                  },
                  "metadata": {
                    "type": "object",
                    "properties": {
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "description": "Set of key-value pairs that you can attach to an object"
                  },
                  "name": {
                    "type": "string",
                    "description": "The name of the warehouse"
                  }
                },
                "required": [
                  "address",
                  "name"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/warehouse"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      },
      "put": {
        "summary": "Update a Warehouse",
        "operationId": "Warehouses_Update",
        "tags": [
          "Warehouses"
        ],
        "description": "Update a Warehouse by its ID.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": false,
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "address": {
                    "type": "object",
                    "properties": {
                      "line1": {
                        "type": "string"
                      },
                      "line2": {
                        "type": "string"
                      },
                      "zip": {
                        "type": "string"
                      },
                      "city": {
                        "type": "string"
                      },
                      "state": {
                        "type": "string"
                      },
                      "country": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "country"
                    ],
                    "description": "The Warehouse's address"
                  },
                  "metadata": {
                    "type": "object",
                    "properties": {
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "description": "Set of key-value pairs that you can attach to an object"
                  },
                  "name": {
                    "type": "string",
                    "description": "The name of the warehouse"
                  }
                },
                "required": [
                  "address",
                  "name"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/warehouse"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      },
      "delete": {
        "summary": "Archive a Warehouse",
        "operationId": "Warehouses_Destroy",
        "tags": [
          "Warehouses"
        ],
        "description": "Update a Warehouse by its ID.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/warehouse"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      }
    },
    "/warehouses/{warehouse_id}/set_default": {
      "patch": {
        "summary": "Set a Warehouse as the default one",
        "operationId": "Warehouses_SetDefault",
        "tags": [
          "Warehouses"
        ],
        "description": "Set a Warehouse as the default one by its ID.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/warehouse"
                }
              }
            }
          },
          "default": {
            "$ref": "#/components/responses/ErrorResponse"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "BasicAuth": {
        "type": "http",
        "scheme": "basic"
      }
    },
    "schemas": {
      "credit_note_numbering_sequence": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "object": {
            "type": "string",
            "enum": [
              "credit_note_numbering_sequence"
            ],
            "description": "String representing the object type"
          },
          "livemode": {
            "type": "boolean"
          },
          "is_default": {
            "type": "boolean",
            "description": "When true, when you create an credit note by API, if no credit_note_numbering_sequence ID is filled, this sequence will be used."
          },
          "next_number": {
            "type": "integer",
            "description": "The next sequential number that will be used for the next credit note"
          },
          "prefix": {
            "type": "boolean",
            "description": "The prefix of the sequence"
          },
          "reset_to_zero": {
            "type": "boolean",
            "default": false,
            "description": "When `true`, the sequence will be resetted to 1 every year"
          }
        }
      },
      "credit_note": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The Credit Note ID"
          },
          "object": {
            "type": "string",
            "enum": [
              "credit_note"
            ],
            "description": "String representing the object type"
          },
          "livemode": {
            "type": "boolean"
          },
          "cancels_credit_note": {
            "type": "string",
            "description": "The ID of the credit note that this credit note replaces"
          },
          "cancelled_by": {
            "type": "string",
            "description": "The ID of the credit note that cancels this one."
          },
          "credit_note_date": {
            "type": "date",
            "description": "The credit note date. `null` if the credit note is a draft"
          },
          "credit_note_number": {
            "type": "string",
            "description": "The credit note number. `null` if the credit note is a draft"
          },
          "credit_note_numbering_sequence": {
            "type": "string",
            "description": "ID of the credit note numbering sequence this invoice belongs to"
          },
          "currency": {
            "type": "string",
            "description": "A string representing the ISO-code of the currency of the credit note"
          },
          "custom_fields": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "The name of the custom field."
                },
                "value": {
                  "type": "string",
                  "description": "The value of the custom field."
                }
              }
            },
            "description": "List of custom fields to be displayed in the invoice"
          },
          "customer": {
            "type": "string",
            "description": "ID of the customer that is billed"
          },
          "customer_address_line_1": {
            "type": "string"
          },
          "customer_address_line_2": {
            "type": "string"
          },
          "customer_address_city": {
            "type": "string"
          },
          "customer_address_state": {
            "type": "string"
          },
          "customer_address_zip": {
            "type": "string"
          },
          "customer_address_country": {
            "type": "string",
            "example": "FR",
            "description": "Must be an ISO alpha-2 code"
          },
          "customer_address_country_code": {
            "type": "string",
            "description": "deprecated"
          },
          "customer_business_type": {
            "type": "string"
          },
          "customer_email": {
            "type": "string"
          },
          "customer_locale": {
            "type": "string",
            "description": "The locale selected by the customer for its documents"
          },
          "customer_name": {
            "type": "string"
          },
          "customer_shipping": {
            "type": "object",
            "properties": {
              "address_line1": {
                "type": "string"
              },
              "address_line2": {
                "type": "string"
              },
              "address_city": {
                "type": "string"
              },
              "address_zip": {
                "type": "string"
              },
              "address_state": {
                "type": "string"
              },
              "address_country": {
                "type": "string",
                "example": "FR",
                "description": "Must be an ISO alpha-2 code"
              }
            }
          },
          "customer_tax_number": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "description": "A string describing the credit note's description"
          },
          "document_currency_exchange": {
            "$ref": "#/components/schemas/document_currency_exchange",
            "description": "If relevant, a hash of data representing the exchange rate and data"
          },
          "document_template": {
            "type": "string",
            "description": "ID of the document template used by this credit note"
          },
          "email_sent": {
            "type": "boolean",
            "description": "Whether the credit note has been sent by email to the customer or not"
          },
          "invoice": {
            "type": "string",
            "description": "ID of the invoice this credit note refers to. `null` if it is not related to any particular invoice"
          },
          "invoice_number": {
            "type": "string",
            "description": "If `invoice` is not null, the invoice number that is related to the credit note."
          },
          "issuer": {
            "type": "string",
            "description": "ID of the account that issued the invoice on behalf of a connected account"
          },
          "issuer_billing_details": {
            "type": "object",
            "properties": {
              "address_line1": {
                "type": "string"
              },
              "address_line2": {
                "type": "string"
              },
              "address_city": {
                "type": "string"
              },
              "address_zip": {
                "type": "string"
              },
              "address_state": {
                "type": "string"
              },
              "address_country": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "tax_number": {
                "type": "string"
              }
            },
            "description": "A hash of billing details that describe the billing details of the credit note's issuer"
          },
          "items_count": {
            "type": "integer",
            "description": "The number of items attached to the credit note"
          },
          "language": {
            "type": "string",
            "description": "A string representing the locale that is used for the credit note"
          },
          "last_sent_at": {
            "type": "string",
            "format": "date-time",
            "description": "The last time the credit note has been sent by email"
          },
          "legal_fields": {
            "type": "object",
            "properties": {
              "additionalProperties": {
                "type": "string"
              }
            },
            "description": "Set of key-value legal requirements that are printed on the credit note"
          },
          "metadata": {
            "type": "object",
            "properties": {
              "additionalProperties": {
                "type": "string"
              }
            },
            "description": "Set of key-value pairs that you can attach to an object"
          },
          "notes": {
            "type": "string",
            "description": "A custom text that you want to attach to and print on the credit note"
          },
          "payment_status": {
            "type": "string",
            "enum": [
              "to refund",
              "partial",
              "refunded"
            ],
            "description": "A string representing whether the invoice is paid or not"
          },
          "pdf_file_url": {
            "type": "string",
            "description": "URL of the hosted PDF file representing the invoice. `null` if the invoice is a draft"
          },
          "refunded_amount_cents": {
            "type": "integer",
            "description": "The amount that has been refunded"
          },
          "sources": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "gateway": {
                  "type": "string",
                  "description": "The name of the gateway. E.g.: stripe, paypal"
                },
                "identifier": {
                  "type": "string",
                  "description": "The object ID from the gateway"
                },
                "source_type": {
                  "type": "string",
                  "description": "The object type from the gateway"
                }
              }
            },
            "description": "Information related to the platform and the ID of the object this invoice was synced from"
          },
          "status": {
            "type": "string",
            "enum": [
              "draft",
              "confirmed",
              "cancelled"
            ],
            "description": "A string representing the status of the credit note"
          },
          "supplier_name": {
            "type": "string"
          },
          "supplier_address_line_1": {
            "type": "string"
          },
          "supplier_address_line_2": {
            "type": "string"
          },
          "supplier_address_city": {
            "type": "string"
          },
          "supplier_address_state": {
            "type": "string"
          },
          "supplier_address_zip": {
            "type": "string"
          },
          "supplier_address_country": {
            "type": "string"
          },
          "supplier_tax_ids": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Array of supplier `tax_id` objects used for this invoice"
          },
          "supplier_tax_number": {
            "type": "string"
          },
          "total_extratax_amount": {
            "type": "integer",
            "description": "The total tax-exclusive amount of the credit note"
          },
          "total_gross_amount": {
            "type": "integer",
            "description": "The total tax-included amount of the credit note"
          },
          "total_tax_amount": {
            "type": "integer",
            "description": "The total tax amount of the credit note"
          },
          "unrefunded_amount_cents": {
            "type": "integer",
            "description": "The amount that is still to refund"
          }
        }
      },
      "deleted_credit_note": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The credit note ID"
          },
          "object": {
            "type": "string",
            "enum": [
              "credit_note"
            ],
            "description": "String representing the object type"
          },
          "deleted": {
            "type": "boolean",
            "default": true,
            "description": "Always equals to `true`"
          }
        }
      },
      "customer_balance_transaction": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The customer balance transaction ID"
          },
          "object": {
            "type": "string",
            "enum": [
              "customer_balance_transaction"
            ],
            "description": "String representing the object type"
          },
          "livemode": {
            "type": "boolean"
          },
          "amount": {
            "type": "integer",
            "description": "The amount of the transaction. A negative value is a credit for the customer's balance, and a positive value is a debit to the customer's balance"
          },
          "balance_type": {
            "type": "string",
            "description": "Transaction type"
          },
          "credit_note": {
            "type": "string",
            "description": "The ID of the `credit_note` this `customer_balance_transaction` is related to"
          },
          "currency": {
            "type": "string",
            "description": "Currency ISO code"
          },
          "customer": {
            "type": "string",
            "description": "The ID of the `customer` this `customer_balance_transaction` is related to"
          },
          "description": {
            "type": "string",
            "description": "Name of the product / service sold."
          },
          "ending_balance_cents": {
            "type": "integer",
            "description": "The customer’s balance after the transaction was applied. A negative value decreases the amount due on the customer’s next invoice. A positive value increases the amount due on the customer’s next invoice."
          },
          "invoice": {
            "type": "string",
            "description": "The ID of the `invoice` this `customer_balance_transaction` is related to"
          },
          "metadata": {
            "type": "object",
            "properties": {
              "additionalProperties": {
                "type": "string"
              }
            },
            "description": "Set of key-value pairs that you can attach to an object"
          }
        }
      },
      "payment_source": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "object": {
            "type": "string",
            "enum": [
              "payment_source"
            ],
            "description": "String representing the object type"
          },
          "country": {
            "type": "string",
            "description": "The country this payment source was issued from"
          },
          "customer": {
            "type": "string",
            "description": "The ID of the customer which this payment source is attached to."
          },
          "details": {
            "type": "object",
            "properties": {
              "additionalProperties": {
                "type": "string"
              }
            },
            "description": "Set of key-value pairs that describes the object"
          },
          "evidence": {
            "type": "object"
          },
          "exp_month": {
            "type": "string",
            "description": "The expiration month of this payment source is relevant"
          },
          "exp_year": {
            "type": "string",
            "description": "The expiration year of this payment source is relevant"
          },
          "payment_source_type": {
            "type": "string",
            "example": "card",
            "description": "The type of the payment source"
          },
          "sources": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "gateway": {
                  "type": "string",
                  "description": "The name of the gateway. E.g.: stripe, paypal"
                },
                "identifier": {
                  "type": "string",
                  "description": "The object ID from the gateway"
                },
                "source_type": {
                  "type": "string",
                  "description": "The object type from the gateway"
                }
              }
            },
            "description": "Information related to the platform and the ID of the object this payment source was synced from"
          }
        }
      },
      "customer": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "object": {
            "type": "string",
            "enum": [
              "customer"
            ],
            "description": "String representing the object type"
          },
          "livemode": {
            "type": "boolean"
          },
          "balance_amount": {
            "type": "integer",
            "description": "Current balance, if any, being stored on the customer. If negative, the customer has credit to apply to their next invoice. If positive, the customer has an amount owed that will be added to their next invoice"
          },
          "balance_currency": {
            "type": "string",
            "description": "The currency of the current balance"
          },
          "billing_address_line1": {
            "type": "string"
          },
          "billing_address_line2": {
            "type": "string"
          },
          "billing_address_city": {
            "type": "string"
          },
          "billing_address_zip": {
            "type": "string"
          },
          "billing_address_state": {
            "type": "string"
          },
          "billing_address_country": {
            "type": "string"
          },
          "business_type": {
            "type": "string",
            "enum": [
              "B2B",
              "B2C"
            ],
            "description": "Whether the customer is an individual/sole-entrepreneur or a company"
          },
          "document_settings": {
            "type": "object",
            "properties": {
              "recipient_email": {
                "type": "string",
                "description": "Email address to which documents should be delivered automatically if different than the customer's email contact"
              },
              "email_cc": {
                "type": "string",
                "description": "Email address to which documents should be delivered automatically in cc"
              },
              "send_automatically": {
                "type": "boolean",
                "description": "Whether documents should be delivered automatically on integrations sync"
              },
              "custom_fields": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The name of the custom field."
                    },
                    "value": {
                      "type": "string",
                      "description": "The value of the custom field."
                    }
                  }
                },
                "description": "List of custom fields to be displayed in documents"
              }
            },
            "description": "The customer's default document settings"
          },
          "email": {
            "type": "string",
            "description": "The customer's email"
          },
          "metadata": {
            "type": "object",
            "properties": {
              "additionalProperties": {
                "type": "string"
              }
            },
            "description": "Set of key-value pairs that you can attach to an object"
          },
          "octobat_billing_page": {
            "type": "string",
            "description": "The URL of the Octobat's hosted page for this customer"
          },
          "name": {
            "type": "string",
            "description": "The customer's full name or business name"
          },
          "payment_sources": {
            "type": "object",
            "properties": {
              "data": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/payment_source"
                }
              },
              "has_more": {
                "type": "boolean",
                "description": "True if this list has another page of items after this one that can be fetched"
              },
              "object": {
                "type": "string",
                "enum": [
                  "list"
                ],
                "description": "String representing the object type"
              }
            },
            "description": "A list of payment methods attached to the customer"
          },
          "phone_number": {
            "type": "string"
          },
          "preferred_locales": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "fr-FR",
              "description": "The locale code"
            },
            "description": "The customer's preferred locales (languages), ordered by preference"
          },
          "shipping": {
            "type": "object",
            "properties": {
              "address_line1": {
                "type": "string"
              },
              "address_line2": {
                "type": "string"
              },
              "address_city": {
                "type": "string"
              },
              "address_zip": {
                "type": "string"
              },
              "address_state": {
                "type": "string"
              },
              "address_country": {
                "type": "string"
              }
            },
            "description": "Shipping details of the customer. Appears on invoices"
          },
          "sources": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "gateway": {
                  "type": "string",
                  "description": "The name of the gateway. E.g.: stripe, paypal"
                },
                "identifier": {
                  "type": "string",
                  "description": "The object ID from the gateway"
                },
                "source_type": {
                  "type": "string",
                  "description": "The object type from the gateway"
                }
              }
            },
            "description": "Information related to the platform and the ID of the object this customer was synced from"
          },
          "tax_number": {
            "type": "string",
            "description": "The customer's tax ID"
          },
          "website": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "deleted_customer": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "deleted": {
            "type": "boolean",
            "default": true
          }
        }
      },
      "invoice_numbering_sequence": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "object": {
            "type": "string",
            "enum": [
              "invoice_numbering_sequence"
            ],
            "description": "String representing the object type"
          },
          "livemode": {
            "type": "boolean"
          },
          "is_default": {
            "type": "boolean",
            "description": "When true, when you create an invoice by API, if no invoice_numbering_sequence ID is filled, this sequence will be used."
          },
          "next_number": {
            "type": "integer",
            "description": "The next sequential number that will be used for the next invoice"
          },
          "prefix": {
            "type": "boolean",
            "description": "The prefix of the sequence"
          },
          "reset_to_zero": {
            "type": "boolean",
            "default": false,
            "description": "When `true`, the sequence will be resetted to 1 every year"
          }
        }
      },
      "document_currency_exchange": {
        "type": "object",
        "properties": {
          "exchange_date": {
            "type": "string",
            "format": "date-time",
            "description": "The exchange rate date"
          },
          "exchange_rate": {
            "type": "number",
            "format": "float",
            "description": "The exchange rate value"
          },
          "exchanged_to_currency": {
            "type": "string",
            "description": "The Exchanged currency ISO code"
          }
        }
      },
      "deleted_invoice": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The invoice ID"
          },
          "object": {
            "type": "string",
            "enum": [
              "invoice"
            ],
            "description": "String representing the object type"
          },
          "deleted": {
            "type": "boolean",
            "default": true,
            "description": "Always equals to `true`"
          }
        }
      },
      "invoice": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The invoice ID"
          },
          "object": {
            "type": "string",
            "enum": [
              "invoice"
            ],
            "description": "String representing the object type"
          },
          "livemode": {
            "type": "boolean"
          },
          "attempted": {
            "type": "boolean",
            "description": "Whether a payment for this invoice has been tried, whether it was successful or not"
          },
          "attempt_count": {
            "type": "integer",
            "description": "Number of payment attempts made for this invoice"
          },
          "cancel_and_replace_invoice": {
            "type": "string",
            "description": "The ID of the invoice that this invoice replaces"
          },
          "currency": {
            "type": "string",
            "description": "A string representing the ISO-code of the currency of the invoice"
          },
          "custom_fields": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "The name of the custom field."
                },
                "value": {
                  "type": "string",
                  "description": "The value of the custom field."
                }
              }
            },
            "description": "List of custom fields to be displayed in the invoice"
          },
          "customer": {
            "type": "string",
            "description": "ID of the customer that is billed"
          },
          "customer_address_line_1": {
            "type": "string"
          },
          "customer_address_line_2": {
            "type": "string"
          },
          "customer_address_city": {
            "type": "string"
          },
          "customer_address_state": {
            "type": "string"
          },
          "customer_address_zip": {
            "type": "string"
          },
          "customer_address_country": {
            "type": "string",
            "example": "FR",
            "description": "Must be an ISO alpha-2 code"
          },
          "customer_address_country_code": {
            "type": "string",
            "description": "deprecated"
          },
          "customer_business_type": {
            "type": "string"
          },
          "customer_email": {
            "type": "string"
          },
          "customer_locale": {
            "type": "string",
            "description": "The locale selected by the customer for its documents"
          },
          "customer_name": {
            "type": "string"
          },
          "customer_shipping": {
            "type": "object",
            "properties": {
              "address_line1": {
                "type": "string"
              },
              "address_line2": {
                "type": "string"
              },
              "address_city": {
                "type": "string"
              },
              "address_zip": {
                "type": "string"
              },
              "address_state": {
                "type": "string"
              },
              "address_country": {
                "type": "string",
                "example": "FR",
                "description": "Must be an ISO alpha-2 code"
              }
            }
          },
          "customer_tax_number": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "description": "A string describing the invoice's description"
          },
          "document_currency_exchange": {
            "$ref": "#/components/schemas/document_currency_exchange",
            "description": "If relevant, a hash of data representing the exchange rate and data"
          },
          "document_template": {
            "type": "string",
            "description": "ID of the document template used by this invoice"
          },
          "due_date": {
            "type": "date",
            "description": "The date on which payment for this invoice is due"
          },
          "email_sent": {
            "type": "boolean",
            "description": "Whether the invoice has been sent by email to the customer or not"
          },
          "invoice_date": {
            "type": "date",
            "description": "The invoice date. `null` if the invoice is a draft"
          },
          "invoice_number": {
            "type": "string",
            "description": "The invoice number. `null` if the invoice is a draft"
          },
          "invoice_numbering_sequence": {
            "type": "string",
            "description": "ID of the invoice numbering sequence this invoice belongs to"
          },
          "issuer": {
            "type": "string",
            "description": "ID of the account that issued the invoice on behalf of a connected account"
          },
          "issuer_billing_details": {
            "type": "object",
            "properties": {
              "address_line1": {
                "type": "string"
              },
              "address_line2": {
                "type": "string"
              },
              "address_city": {
                "type": "string"
              },
              "address_zip": {
                "type": "string"
              },
              "address_state": {
                "type": "string"
              },
              "address_country": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "tax_number": {
                "type": "string"
              }
            },
            "description": "A hash of billing details that describe the billing details of the invoice's issuer"
          },
          "items_count": {
            "type": "integer",
            "description": "The number of items attached to the invoice"
          },
          "language": {
            "type": "string",
            "description": "A string representing the locale that is used for the invoice"
          },
          "last_sent_at": {
            "type": "string",
            "format": "date-time",
            "description": "The last time the invoice has been sent by email"
          },
          "legal_fields": {
            "type": "object",
            "properties": {
              "additionalProperties": {
                "type": "string"
              }
            },
            "description": "Set of key-value legal requirements that are printed on the invoice"
          },
          "metadata": {
            "type": "object",
            "properties": {
              "additionalProperties": {
                "type": "string"
              }
            },
            "description": "Set of key-value pairs that you can attach to an object"
          },
          "next_payment_attempt": {
            "type": "string",
            "format": "date-time",
            "description": "The time at which payment will next be attempted, if relevant"
          },
          "notes": {
            "type": "string",
            "description": "A custom text that you want to attach to and print on the invoice"
          },
          "order": {
            "type": "string",
            "description": "ID of the order this invoice is related to "
          },
          "payment_recipients": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Array of `payment recipient` IDs that are accepted to pay this invoice"
          },
          "paid_amount_cents": {
            "type": "integer",
            "description": "The amount that has been paid"
          },
          "payment_status": {
            "type": "string",
            "enum": [
              "unpaid",
              "partial",
              "paid",
              "uncollectible"
            ],
            "description": "A string representing whether the invoice is paid or not"
          },
          "pdf_file_url": {
            "type": "string",
            "description": "URL of the hosted PDF file representing the invoice. `null` if the invoice is a draft"
          },
          "replaced_by": {
            "type": "string",
            "description": "The ID of the invoice that replaces this invoice"
          },
          "sources": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "gateway": {
                  "type": "string",
                  "description": "The name of the gateway. E.g.: stripe, paypal"
                },
                "identifier": {
                  "type": "string",
                  "description": "The object ID from the gateway"
                },
                "source_type": {
                  "type": "string",
                  "description": "The object type from the gateway"
                }
              }
            },
            "description": "Information related to the platform and the ID of the object this invoice was synced from"
          },
          "status": {
            "type": "string",
            "enum": [
              "draft",
              "confirmed",
              "cancelled"
            ],
            "description": "A string representing the status of the invoice"
          },
          "supplier_name": {
            "type": "string"
          },
          "supplier_address_line_1": {
            "type": "string"
          },
          "supplier_address_line_2": {
            "type": "string"
          },
          "supplier_address_city": {
            "type": "string"
          },
          "supplier_address_state": {
            "type": "string"
          },
          "supplier_address_zip": {
            "type": "string"
          },
          "supplier_address_country": {
            "type": "string"
          },
          "supplier_tax_ids": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Array of supplier `tax_id` objects used for this invoice"
          },
          "supplier_tax_number": {
            "type": "string"
          },
          "total_extratax_amount": {
            "type": "integer",
            "description": "The total tax-exclusive amount of the invoice"
          },
          "total_gross_amount": {
            "type": "integer",
            "description": "The total tax-included amount of the invoice"
          },
          "total_tax_amount": {
            "type": "integer",
            "description": "The total tax amount of the invoice"
          },
          "unpaid_amount_cents": {
            "type": "integer",
            "description": "The amount that is still to pay"
          }
        }
      },
      "item_exchange": {
        "type": "object",
        "properties": {
          "exchange_date": {
            "type": "string",
            "format": "date-time",
            "description": "The exchange rate date"
          },
          "exchange_rate": {
            "type": "number",
            "format": "float",
            "description": "The exchange rate value"
          },
          "exchanged_to_currency": {
            "type": "string",
            "description": "The Exchanged currency ISO code"
          }
        }
      },
      "deleted_item": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The item ID"
          },
          "object": {
            "type": "string",
            "enum": [
              "item"
            ],
            "description": "String representing the object type"
          },
          "deleted": {
            "type": "boolean",
            "default": true,
            "description": "Always equals to `true`"
          }
        }
      },
      "item": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The item ID"
          },
          "object": {
            "type": "string",
            "enum": [
              "item"
            ],
            "description": "String representing the object type"
          },
          "confirmed_on": {
            "type": "string",
            "format": "date-time",
            "description": "DateTime of when the item's document has been confirmed"
          },
          "credit_note": {
            "type": "string",
            "description": "ID of the credit note this item is related to"
          },
          "currency": {
            "type": "string",
            "description": "Currency ISO code"
          },
          "customer": {
            "type": "string",
            "description": "ID of the customer this item is related to"
          },
          "customer_region": {
            "type": "string",
            "description": "The juridiction where the customer is located. Often a country, but can be a state for the US of CA"
          },
          "customer_zone": {
            "type": "string",
            "description": "The main tax zone to which the item is sold. Often a country, but it can be the whole EU"
          },
          "declare_in_region": {
            "type": "string",
            "description": "The juridiction for which the calculated tax is due"
          },
          "description": {
            "type": "string",
            "description": "Name of the product / service sold."
          },
          "detailed_description": {
            "type": "string",
            "description": "An arbitrary string attached to the object. Often useful for displaying to users."
          },
          "discountable": {
            "type": "boolean",
            "description": "If true, discounts will apply to this invoice item. Always false for prorations."
          },
          "extratax_amount": {
            "type": "integer",
            "description": "The extratax amount in the currency specified for the item. Always equals to `unit_extratax_amount * quantity`"
          },
          "gross_amount": {
            "type": "integer",
            "description": "The gross amount in the currency specified for the item."
          },
          "invoice": {
            "type": "string",
            "description": "ID of the invoice this item is related to"
          },
          "item_exchange": {
            "$ref": "#/components/schemas/item_exchange",
            "description": "A Hash representing the exchange rate data related to the currency of the customer's country"
          },
          "item_workspace_currency_exchange": {
            "$ref": "#/components/schemas/item_exchange",
            "description": "A Hash representing the exchange rate data related to the workspace default currency"
          },
          "period": {
            "type": "object",
            "properties": {
              "period_end": {
                "type": "string",
                "format": "date-time",
                "description": "End of the line item’s billing period"
              },
              "period_start": {
                "type": "string",
                "format": "date-time",
                "description": "Start of the line item’s billing period"
              }
            },
            "description": "The period associated with with this item."
          },
          "product": {
            "type": "string",
            "description": "ID of the product this item is related to"
          },
          "product_type": {
            "type": "string",
            "description": "Code of the product type the item refers to"
          },
          "quantity": {
            "type": "integer",
            "description": "The quantity of this item purchased by the customer"
          },
          "sale_mode": {
            "type": "string",
            "enum": [
              "B2B",
              "B2C"
            ],
            "description": "Represents if the sale is considered as a B2B or a B2C"
          },
          "sources": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "gateway": {
                  "type": "string",
                  "description": "The name of the gateway. E.g.: stripe, paypal"
                },
                "identifier": {
                  "type": "string",
                  "description": "The object ID from the gateway"
                },
                "source_type": {
                  "type": "string",
                  "description": "The object type from the gateway"
                }
              }
            },
            "description": "Information related to the platform and the ID of the object this item was synced from"
          },
          "status": {
            "type": "string",
            "enum": [
              "draft",
              "confirmed",
              "cancelled"
            ],
            "description": "String representing the item status"
          },
          "tax": {
            "type": "string",
            "description": "The tax type related to the item"
          },
          "tax_amount": {
            "type": "integer",
            "description": "The tax amount in the currency specified for the item."
          },
          "tax_evidence": {
            "type": "string",
            "description": "ID of the tax evidence this item is linked to"
          },
          "tax_rate": {
            "type": "number",
            "format": "float",
            "description": "The total tax percentage applied to the given item"
          },
          "transaction": {
            "type": "string",
            "description": "Deprecated"
          },
          "unit_extratax_amount": {
            "type": "integer",
            "description": "The unit extratax amount in the currency specified for the item."
          }
        }
      },
      "outbound_transaction": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "object": {
            "type": "string",
            "enum": [
              "outbound_transaction"
            ],
            "description": "String representing the object type"
          },
          "livemode": {
            "type": "boolean"
          },
          "amount": {
            "type": "integer",
            "description": "An integer representing the amount of the transaction in the smallest currency unit (e.g., 100 cents to charge $1.00 or 100 to charge ¥100, a zero-decimal currency)"
          },
          "currency": {
            "type": "string",
            "description": "Three-letter ISO currency code, in lowercase"
          },
          "flow_type": {
            "type": "string",
            "enum": [
              "outbound_payment",
              "outbound_payment"
            ],
            "description": "A string representing the inner type of the transaction"
          },
          "self_billing_credit_note": {
            "type": "string",
            "description": "ID of the self billing credit note this outbound transaction is linked to."
          },
          "self_billing_invoice": {
            "type": "string",
            "description": "ID of the self billing invoice this outbound transaction is linked to."
          },
          "sources": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "gateway": {
                  "type": "string",
                  "description": "The name of the gateway. E.g.: stripe, paypal"
                },
                "identifier": {
                  "type": "string",
                  "description": "The object ID from the gateway"
                },
                "source_type": {
                  "type": "string",
                  "description": "The object type from the gateway"
                }
              }
            },
            "description": "Information related to the platform and the ID of the object this outbound transaction was synced from"
          },
          "status": {
            "type": "string",
            "enum": [
              "failed",
              "succeeded"
            ],
            "description": "A string representing the outcome of the outbound transaction"
          },
          "supplier": {
            "type": "string",
            "description": "ID of the supplier this outbound transaction refers to"
          },
          "transaction_date": {
            "type": "string",
            "format": "date-time",
            "description": "The datetime this outbound transaction was recorded"
          }
        }
      },
      "payment_recipient_reference": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "object": {
            "type": "string",
            "enum": [
              "payment_recipient_reference"
            ],
            "description": "String representing the object type"
          },
          "code": {
            "type": "string",
            "description": "String describing the inner-type of the payment recipients."
          },
          "fields": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Name of the field that describes the payment recipient"
                },
                "type": {
                  "type": "string",
                  "description": "Information about the type of object that is expected for the given additional field"
                }
              }
            },
            "description": "Array of additional fields that describe the payment recipient inner data"
          }
        }
      },
      "payment_recipient": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "object": {
            "type": "string",
            "enum": [
              "payment_recipient"
            ],
            "description": "String representing the object type"
          },
          "livemode": {
            "type": "boolean"
          },
          "details": {
            "type": "object",
            "properties": {
              "additionalProperties": {
                "type": "string"
              }
            },
            "description": "Set of key-value pairs describing the payment recipient details"
          },
          "name": {
            "type": "string",
            "description": "The internal name of the payment recipient"
          },
          "payment_recipient_reference": {
            "$ref": "#/components/schemas/payment_recipient_reference",
            "description": "The payment recipient type (reference) general details"
          },
          "type": {
            "type": "string",
            "example": "check",
            "description": "String representing the payment recipient type"
          }
        }
      },
      "deleted_purchase_item": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The purchase item ID"
          },
          "object": {
            "type": "string",
            "enum": [
              "purchase_item"
            ],
            "description": "String representing the object type"
          },
          "deleted": {
            "type": "boolean",
            "default": true,
            "description": "Always equals to `true`"
          }
        }
      },
      "purchase_item": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The purchase item ID"
          },
          "object": {
            "type": "string",
            "enum": [
              "purchase_item"
            ],
            "description": "String representing the object type"
          },
          "confirmed_on": {
            "type": "string",
            "format": "date-time",
            "description": "DateTime of when the purchase item's document has been confirmed"
          },
          "currency": {
            "type": "string",
            "description": "Currency ISO code"
          },
          "description": {
            "type": "string",
            "description": "Name of the product / service sold."
          },
          "detailed_description": {
            "type": "string",
            "description": "An arbitrary string attached to the object. Often useful for displaying to users."
          },
          "discountable": {
            "type": "boolean",
            "description": "If true, discounts will apply to this invoice item. Always false for prorations."
          },
          "extratax_amount": {
            "type": "integer",
            "description": "The extratax amount in the currency specified for the item. Always equals to `unit_extratax_amount * quantity`"
          },
          "gross_amount": {
            "type": "integer",
            "description": "The gross amount in the currency specified for the item."
          },
          "item_exchange": {
            "$ref": "#/components/schemas/item_exchange",
            "description": "A Hash representing the exchange rate data related to the currency of the customer's country"
          },
          "item_workspace_currency_exchange": {
            "$ref": "#/components/schemas/item_exchange",
            "description": "A Hash representing the exchange rate data related to the workspace default currency"
          },
          "period": {
            "type": "object",
            "properties": {
              "period_end": {
                "type": "string",
                "format": "date-time",
                "description": "End of the line item’s billing period"
              },
              "period_start": {
                "type": "string",
                "format": "date-time",
                "description": "Start of the line item’s billing period"
              }
            },
            "description": "The period associated with with this item."
          },
          "product": {
            "type": "string",
            "description": "ID of the product this item is related to"
          },
          "product_type": {
            "type": "string",
            "description": "Code of the product type the item refers to"
          },
          "quantity": {
            "type": "integer",
            "description": "The quantity of this item sold by the supplier"
          },
          "sale_mode": {
            "type": "string",
            "enum": [
              "B2B",
              "B2C"
            ],
            "description": "Represents if the sale is considered as a B2B or a B2C"
          },
          "self_billing_credit_note": {
            "type": "string",
            "description": "ID of the self billing credit note this item is related to"
          },
          "self_billing_invoice": {
            "type": "string",
            "description": "ID of the self billing invoice this item is related to"
          },
          "sources": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "gateway": {
                  "type": "string",
                  "description": "The name of the gateway. E.g.: stripe, paypal"
                },
                "identifier": {
                  "type": "string",
                  "description": "The object ID from the gateway"
                },
                "source_type": {
                  "type": "string",
                  "description": "The object type from the gateway"
                }
              }
            },
            "description": "Information related to the platform and the ID of the object this item was synced from"
          },
          "status": {
            "type": "string",
            "enum": [
              "draft",
              "confirmed",
              "cancelled"
            ],
            "description": "String representing the item status"
          },
          "tax": {
            "type": "string",
            "description": "The tax type related to the item"
          },
          "tax_amount": {
            "type": "integer",
            "description": "The tax amount in the currency specified for the item."
          },
          "tax_evidence": {
            "type": "string",
            "description": "ID of the tax evidence this item is linked to"
          },
          "tax_rate": {
            "type": "number",
            "format": "float",
            "description": "The total tax percentage applied to the given item"
          },
          "unit_extratax_amount": {
            "type": "integer",
            "description": "The unit extratax amount in the currency specified for the item."
          }
        }
      },
      "deleted_self_billing_credit_note": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The self billing credit note ID"
          },
          "object": {
            "type": "string",
            "enum": [
              "self_billing_credit_note"
            ],
            "description": "String representing the object type"
          },
          "deleted": {
            "type": "boolean",
            "default": true,
            "description": "Always equals to `true`"
          }
        }
      },
      "self_billing_credit_note": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The self billing credit note ID"
          },
          "object": {
            "type": "string",
            "enum": [
              "self_billing_credit_note"
            ],
            "description": "String representing the object type"
          },
          "livemode": {
            "type": "boolean"
          },
          "cancels_self_billing_credit_note": {
            "type": "string",
            "description": "The ID of the self billing credit note that this self billing credit note replaces"
          },
          "cancelled_by": {
            "type": "string",
            "description": "The ID of the self billing credit note that cancels this one."
          },
          "currency": {
            "type": "string",
            "description": "A string representing the ISO-code of the currency of the credit note"
          },
          "custom_fields": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "The name of the custom field."
                },
                "value": {
                  "type": "string",
                  "description": "The value of the custom field."
                }
              }
            },
            "description": "List of custom fields to be displayed in the credit note"
          },
          "customer_address_line_1": {
            "type": "string"
          },
          "customer_address_line_2": {
            "type": "string"
          },
          "customer_address_city": {
            "type": "string"
          },
          "customer_address_state": {
            "type": "string"
          },
          "customer_address_zip": {
            "type": "string"
          },
          "customer_address_country": {
            "type": "string",
            "example": "FR",
            "description": "Must be an ISO alpha-2 code"
          },
          "customer_address_country_code": {
            "type": "string",
            "description": "deprecated"
          },
          "customer_business_type": {
            "type": "string"
          },
          "customer_name": {
            "type": "string"
          },
          "customer_tax_number": {
            "type": "string"
          },
          "customer_shipping": {
            "type": "object",
            "properties": {
              "address_line1": {
                "type": "string"
              },
              "address_line2": {
                "type": "string"
              },
              "address_city": {
                "type": "string"
              },
              "address_zip": {
                "type": "string"
              },
              "address_state": {
                "type": "string"
              },
              "address_country": {
                "type": "string",
                "example": "FR",
                "description": "Must be an ISO alpha-2 code"
              }
            }
          },
          "description": {
            "type": "string",
            "description": "A string describing the self billing credit note's description"
          },
          "document_currency_exchange": {
            "$ref": "#/components/schemas/document_currency_exchange",
            "description": "If relevant, a hash of data representing the exchange rate and data"
          },
          "document_template": {
            "type": "string",
            "description": "ID of the document template used by this credit note"
          },
          "email_sent": {
            "type": "boolean",
            "description": "Whether the credit note has been sent by email to the supplier or not"
          },
          "purchase_items_count": {
            "type": "integer",
            "description": "The number of items attached to the credit note"
          },
          "language": {
            "type": "string",
            "description": "A string representing the locale that is used for the credit note"
          },
          "last_sent_at": {
            "type": "string",
            "format": "date-time",
            "description": "The last time the credit note has been sent by email"
          },
          "legal_fields": {
            "type": "object",
            "properties": {
              "additionalProperties": {
                "type": "string"
              }
            },
            "description": "Set of key-value legal requirements that are displayed on the credit note"
          },
          "metadata": {
            "type": "object",
            "properties": {
              "additionalProperties": {
                "type": "string"
              }
            },
            "description": "Set of key-value pairs that you can attach to an object"
          },
          "notes": {
            "type": "string",
            "description": "A custom text that you want to attach to and display on the credit note"
          },
          "paid_amount_cents": {
            "type": "integer",
            "description": "The amount that has been paid"
          },
          "payment_status": {
            "type": "string",
            "enum": [
              "to refund",
              "partial",
              "refunded"
            ],
            "description": "A string representing whether the credit note is paid or not"
          },
          "pdf_file_url": {
            "type": "string",
            "description": "URL of the hosted PDF file representing the credit note. `null` if the credit note is a draft"
          },
          "self_billing_credit_note_date": {
            "type": "date",
            "description": "The credit note date. `null` if the credit note is a draft"
          },
          "self_billing_credit_note_number": {
            "type": "string",
            "description": "The credit note number. `null` if the credit note is a draft"
          },
          "self_billing_invoice": {
            "type": "string",
            "description": "The ID of the `self_billing_invoice` object this credit note is linked to"
          },
          "sources": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "gateway": {
                  "type": "string",
                  "description": "The name of the gateway. E.g.: stripe, paypal"
                },
                "identifier": {
                  "type": "string",
                  "description": "The object ID from the gateway"
                },
                "source_type": {
                  "type": "string",
                  "description": "The object type from the gateway"
                }
              }
            },
            "description": "Information related to the platform and the ID of the object this credit note was synced from"
          },
          "status": {
            "type": "string",
            "enum": [
              "draft",
              "confirmed",
              "cancelled"
            ],
            "description": "A string representing the status of the credit note"
          },
          "supplier": {
            "type": "string",
            "description": "ID of the supplier that bills"
          },
          "supplier_locale": {
            "type": "string",
            "description": "The locale selected by the supplier for its documents"
          },
          "supplier_email": {
            "type": "string"
          },
          "supplier_name": {
            "type": "string"
          },
          "supplier_address_line_1": {
            "type": "string"
          },
          "supplier_address_line_2": {
            "type": "string"
          },
          "supplier_address_city": {
            "type": "string"
          },
          "supplier_address_state": {
            "type": "string"
          },
          "supplier_address_zip": {
            "type": "string"
          },
          "supplier_address_country": {
            "type": "string"
          },
          "supplier_tax_number": {
            "type": "string"
          },
          "total_extratax_amount": {
            "type": "integer",
            "description": "The total tax-exclusive amount of the credit note"
          },
          "total_gross_amount": {
            "type": "integer",
            "description": "The total tax-included amount of the credit note"
          },
          "total_tax_amount": {
            "type": "integer",
            "description": "The total tax amount of the credit note"
          }
        }
      },
      "deleted_self_billing_invoice": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The self billing invoice ID"
          },
          "object": {
            "type": "string",
            "enum": [
              "self_billing_invoice"
            ],
            "description": "String representing the object type"
          },
          "deleted": {
            "type": "boolean",
            "default": true,
            "description": "Always equals to `true`"
          }
        }
      },
      "self_billing_invoice": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The self billing invoice ID"
          },
          "object": {
            "type": "string",
            "enum": [
              "self_billing_invoice"
            ],
            "description": "String representing the object type"
          },
          "livemode": {
            "type": "boolean"
          },
          "currency": {
            "type": "string",
            "description": "A string representing the ISO-code of the currency of the invoice"
          },
          "custom_fields": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "The name of the custom field."
                },
                "value": {
                  "type": "string",
                  "description": "The value of the custom field."
                }
              }
            },
            "description": "List of custom fields to be displayed in the invoice"
          },
          "customer_address_line_1": {
            "type": "string"
          },
          "customer_address_line_2": {
            "type": "string"
          },
          "customer_address_city": {
            "type": "string"
          },
          "customer_address_state": {
            "type": "string"
          },
          "customer_address_zip": {
            "type": "string"
          },
          "customer_address_country": {
            "type": "string",
            "example": "FR",
            "description": "Must be an ISO alpha-2 code"
          },
          "customer_address_country_code": {
            "type": "string",
            "description": "deprecated"
          },
          "customer_business_type": {
            "type": "string"
          },
          "customer_name": {
            "type": "string"
          },
          "customer_tax_number": {
            "type": "string"
          },
          "customer_shipping": {
            "type": "object",
            "properties": {
              "address_line1": {
                "type": "string"
              },
              "address_line2": {
                "type": "string"
              },
              "address_city": {
                "type": "string"
              },
              "address_zip": {
                "type": "string"
              },
              "address_state": {
                "type": "string"
              },
              "address_country": {
                "type": "string",
                "example": "FR",
                "description": "Must be an ISO alpha-2 code"
              }
            }
          },
          "description": {
            "type": "string",
            "description": "A string describing the invoice's description"
          },
          "document_currency_exchange": {
            "$ref": "#/components/schemas/document_currency_exchange",
            "description": "If relevant, a hash of data representing the exchange rate and data"
          },
          "document_template": {
            "type": "string",
            "description": "ID of the document template used by this invoice"
          },
          "email_sent": {
            "type": "boolean",
            "description": "Whether the invoice has been sent by email to the customer or not"
          },
          "purchase_items_count": {
            "type": "integer",
            "description": "The number of items attached to the invoice"
          },
          "language": {
            "type": "string",
            "description": "A string representing the locale that is used for the invoice"
          },
          "last_sent_at": {
            "type": "string",
            "format": "date-time",
            "description": "The last time the invoice has been sent by email"
          },
          "legal_fields": {
            "type": "object",
            "properties": {
              "additionalProperties": {
                "type": "string"
              }
            },
            "description": "Set of key-value legal requirements that are printed on the invoice"
          },
          "metadata": {
            "type": "object",
            "properties": {
              "additionalProperties": {
                "type": "string"
              }
            },
            "description": "Set of key-value pairs that you can attach to an object"
          },
          "notes": {
            "type": "string",
            "description": "A custom text that you want to attach to and print on the invoice"
          },
          "order": {
            "type": "string",
            "description": "ID of the order this invoice is related to "
          },
          "paid_amount_cents": {
            "type": "integer",
            "description": "The amount that has been paid"
          },
          "payment_status": {
            "type": "string",
            "enum": [
              "unpaid",
              "partial",
              "paid"
            ],
            "description": "A string representing whether the invoice is paid or not"
          },
          "pdf_file_url": {
            "type": "string",
            "description": "URL of the hosted PDF file representing the invoice. `null` if the invoice is a draft"
          },
          "self_billing_invoice_date": {
            "type": "date",
            "description": "The invoice date. `null` if the invoice is a draft"
          },
          "self_billing_invoice_number": {
            "type": "string",
            "description": "The invoice number. `null` if the invoice is a draft"
          },
          "sources": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "gateway": {
                  "type": "string",
                  "description": "The name of the gateway. E.g.: stripe, paypal"
                },
                "identifier": {
                  "type": "string",
                  "description": "The object ID from the gateway"
                },
                "source_type": {
                  "type": "string",
                  "description": "The object type from the gateway"
                }
              }
            },
            "description": "Information related to the platform and the ID of the object this invoice was synced from"
          },
          "status": {
            "type": "string",
            "enum": [
              "draft",
              "confirmed",
              "cancelled"
            ],
            "description": "A string representing the status of the invoice"
          },
          "supplier": {
            "type": "string",
            "description": "ID of the supplier that bills"
          },
          "supplier_locale": {
            "type": "string",
            "description": "The locale selected by the supplier for its documents"
          },
          "supplier_email": {
            "type": "string"
          },
          "supplier_name": {
            "type": "string"
          },
          "supplier_address_line_1": {
            "type": "string"
          },
          "supplier_address_line_2": {
            "type": "string"
          },
          "supplier_address_city": {
            "type": "string"
          },
          "supplier_address_state": {
            "type": "string"
          },
          "supplier_address_zip": {
            "type": "string"
          },
          "supplier_address_country": {
            "type": "string"
          },
          "supplier_tax_number": {
            "type": "string"
          },
          "total_extratax_amount": {
            "type": "integer",
            "description": "The total tax-exclusive amount of the invoice"
          },
          "total_gross_amount": {
            "type": "integer",
            "description": "The total tax-included amount of the invoice"
          },
          "total_tax_amount": {
            "type": "integer",
            "description": "The total tax amount of the invoice"
          },
          "unpaid_amount_cents": {
            "type": "integer",
            "description": "The amount that is still to pay"
          }
        }
      },
      "subscription_item": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "object": {
            "type": "string",
            "enum": [
              "subscription_item"
            ],
            "description": "String representing the object type"
          },
          "livemode": {
            "type": "boolean"
          },
          "automatic_tax": {
            "type": "boolean",
            "default": true,
            "description": "Boolean representing whether tax should be calculated automatically at each subscription renewal."
          },
          "currency": {
            "type": "string",
            "description": "Currency ISO code. Must be the same than the related subscription's currency"
          },
          "declare_in_region": {
            "type": "string",
            "description": "If `automatic_tax=false`, the jurisdiction where tax is owed. It is often the EU country or the US state code"
          },
          "description": {
            "type": "string",
            "description": "Text describing the item, that will appear on invoice lines"
          },
          "detailed_description": {
            "type": "string"
          },
          "metadata": {
            "type": "object",
            "properties": {
              "additionalProperties": {
                "type": "string"
              }
            },
            "description": "Set of key-value pairs that you can attach to an object"
          },
          "product_type": {
            "type": "string",
            "description": "Code of the product type the item refers to"
          },
          "tax_calculation": {
            "type": "string",
            "enum": [
              "inclusive",
              "exclusive"
            ],
            "description": "Decide if item amounts are considered as tax inclusive or tax exclusive. Mandatory if `automatic_tax=true` or `tax_rate` is filled"
          },
          "tax": {
            "type": "string",
            "example": "eu-vat",
            "description": "If `automatic_tax=false`, the ID of the `tax` object that should be applied to the given item. `null` if no tax should apply"
          },
          "tax_rate": {
            "type": "number",
            "format": "float",
            "description": "If `automatic_tax=false`, the percentage of tax that should be applied to the given item. `null` if no tax should apply. Can be set to `0` if, for instance, reverse charge applies"
          },
          "subscription": {
            "type": "string",
            "description": "The ID of the `subscription` this item refers to"
          },
          "quantity": {
            "type": "integer",
            "description": "The quantity of items of this type that are sold in the given subscription"
          },
          "unit_amount": {
            "type": "integer",
            "description": "The unit amount in cents in the currency specified for the item"
          }
        }
      },
      "deleted_subscription_item": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "deleted": {
            "type": "boolean",
            "default": true
          }
        }
      },
      "subscription": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "object": {
            "type": "string",
            "enum": [
              "subscription"
            ],
            "description": "String representing the object type"
          },
          "livemode": {
            "type": "boolean"
          },
          "customer": {
            "type": "string",
            "description": "The ID of the customer object whose this subscription is attached to"
          },
          "currency": {
            "type": "string",
            "description": "The currency of the subscription"
          },
          "current_period_start": {
            "type": "string",
            "format": "date-time",
            "description": "The datetime of the current subscription cycle beginning"
          },
          "current_period_end": {
            "type": "string",
            "format": "date-time",
            "description": "The datetime of the current subscription cycle end"
          },
          "description": {
            "type": "string",
            "description": "Description of the subscription, might be the products/services sold."
          },
          "interval": {
            "type": "string",
            "enum": [
              "week",
              "month",
              "year"
            ],
            "description": "The recurring interval of when an invoice must be generated"
          },
          "interval_count": {
            "type": "integer",
            "default": 1,
            "description": "The number of intervals between subscription billings. For example, interval=month and interval_count=3 bills every 3 months"
          },
          "invoice_settings": {
            "type": "object",
            "properties": {
              "document_template": {
                "type": "string",
                "description": "The ID of the DocumentTemplate, invoices generated by this subscription should relate to. Use the default one if left blank"
              },
              "invoice_numbering_sequence": {
                "type": "string",
                "description": "The ID of the InvoiceNumberingSequence, invoices generated by this subscription should relate to. Use the default one if left blank"
              }
            },
            "description": "If `type=send_invoice`, the invoice settings for this subscription"
          },
          "items": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/subscription_item"
                  }
                },
                "has_more": {
                  "type": "boolean",
                  "description": "True if this list has another page of items after this one that can be fetched"
                },
                "object": {
                  "type": "string",
                  "enum": [
                    "list"
                  ],
                  "description": "String representing the object type"
                }
              }
            },
            "description": "A list of subscription items. Null if `type=sum_usage`"
          },
          "metadata": {
            "type": "object",
            "properties": {
              "additionalProperties": {
                "type": "string"
              }
            },
            "description": "Set of key-value pairs that you can attach to an object"
          },
          "payment_recipients": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Array of `payment recipient` IDs that are accepted to pay invoices generated for this subscription. Only present if `type=send_invoice`"
          },
          "type": {
            "type": "string",
            "enum": [
              "sum_usage",
              "send_invoice"
            ],
            "description": "The type of the subscription, designing how the invoice amounts are calculated"
          },
          "sources": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "gateway": {
                  "type": "string",
                  "description": "The name of the gateway. E.g.: stripe, paypal"
                },
                "identifier": {
                  "type": "string",
                  "description": "The object ID from the gateway"
                },
                "source_type": {
                  "type": "string",
                  "description": "The object type from the gateway"
                }
              }
            },
            "description": "Information related to the platform and the ID of the object this customer was synced from"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "deleted_subscription": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "deleted": {
            "type": "boolean",
            "default": true
          }
        }
      },
      "supplier": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "object": {
            "type": "string",
            "enum": [
              "supplier"
            ],
            "description": "String representing the object type"
          },
          "livemode": {
            "type": "boolean"
          },
          "billing_address_line1": {
            "type": "string"
          },
          "billing_address_line2": {
            "type": "string"
          },
          "billing_address_city": {
            "type": "string"
          },
          "billing_address_zip": {
            "type": "string"
          },
          "billing_address_state": {
            "type": "string"
          },
          "billing_address_country": {
            "type": "string"
          },
          "business_type": {
            "type": "string",
            "enum": [
              "B2B",
              "B2C"
            ],
            "description": "Whether the supplier is an individual/sole-entrepreneur or a company"
          },
          "document_settings": {
            "type": "object",
            "properties": {
              "custom_fields": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The name of the custom field."
                    },
                    "value": {
                      "type": "string",
                      "description": "The value of the custom field."
                    }
                  }
                },
                "description": "List of custom fields to be displayed in documents"
              }
            },
            "description": "The supplier's default document settings"
          },
          "email": {
            "type": "string",
            "description": "The supplier's email"
          },
          "metadata": {
            "type": "object",
            "properties": {
              "additionalProperties": {
                "type": "string"
              }
            },
            "description": "Set of key-value pairs that you can attach to an object"
          },
          "name": {
            "type": "string",
            "description": "The supplier's full name or business name"
          },
          "phone_number": {
            "type": "string"
          },
          "preferred_locales": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "fr-FR",
              "description": "The locale code"
            },
            "description": "The supplier's preferred locales (languages), ordered by preference"
          },
          "shipping": {
            "type": "object",
            "properties": {
              "address_line1": {
                "type": "string"
              },
              "address_line2": {
                "type": "string"
              },
              "address_city": {
                "type": "string"
              },
              "address_zip": {
                "type": "string"
              },
              "address_state": {
                "type": "string"
              },
              "address_country": {
                "type": "string"
              }
            },
            "description": "Shipping details of the supplier."
          },
          "sources": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "gateway": {
                  "type": "string",
                  "description": "The name of the gateway. E.g.: stripe, paypal"
                },
                "identifier": {
                  "type": "string",
                  "description": "The object ID from the gateway"
                },
                "source_type": {
                  "type": "string",
                  "description": "The object type from the gateway"
                }
              }
            },
            "description": "Information related to the platform and the ID of the object this supplier was synced from"
          },
          "specific_tax_rates": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "rate": {
                  "type": "number",
                  "format": "float",
                  "description": "The tax percentage that applies."
                },
                "tax": {
                  "type": "string",
                  "example": "eu-vat",
                  "description": "The tax type."
                },
                "type": {
                  "type": "string",
                  "example": "Country",
                  "description": "The tax juridiction type."
                }
              }
            },
            "description": "A set of Tax rates that apply to the given supplier when they sell to the current account entity"
          },
          "tax_exempt": {
            "type": "boolean",
            "default": false,
            "description": "Whether the supplier is tax exempt or not"
          },
          "tax_number": {
            "type": "string",
            "description": "The supplier's tax ID"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "deleted_supplier": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "deleted": {
            "type": "boolean",
            "default": true
          }
        }
      },
      "tax_code": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The tax code ID"
          },
          "object": {
            "type": "string",
            "enum": [
              "tax_code"
            ],
            "description": "String representing the object type"
          },
          "name": {
            "type": "string",
            "description": "Name of the tax code"
          },
          "description": {
            "type": "string",
            "description": "Description of items that can be binded with this tax code"
          }
        }
      },
      "tax_id_validation": {
        "type": "object",
        "id": {
          "type": "String",
          "description": "The tax evidence ID"
        },
        "object": {
          "type": "String",
          "description": "String representing the object type",
          "enum": [
            "tax_id_validation"
          ]
        },
        "tax_id": {
          "type": "String",
          "description": "The Tax ID that should be validated"
        },
        "is_valid": {
          "type": "Boolean",
          "description": "Whether the input tax ID is valid or not"
        },
        "properties": {
          "type": {
            "type": "string",
            "example": "eu_vat",
            "description": "String representing the tax ID type."
          }
        }
      },
      "tax_evidence": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The tax evidence ID"
          },
          "object": {
            "type": "string",
            "enum": [
              "tax_evidence"
            ],
            "description": "String representing the object type"
          },
          "livemode": {
            "type": "boolean"
          },
          "applied_rate": {
            "type": "number",
            "format": "float",
            "description": "Total tax percentage calculated for the given evidence"
          },
          "customer_evidence": {
            "type": "object",
            "properties": {
              "tax_id": {
                "type": "string",
                "description": "The Tax ID of the customer"
              },
              "billing": {
                "type": "object",
                "properties": {
                  "zip": {
                    "type": "string"
                  },
                  "state": {
                    "type": "string"
                  },
                  "country": {
                    "type": "string"
                  }
                },
                "description": "Billing details of the customer, used for the calculation"
              },
              "ip": {
                "type": "object",
                "properties": {
                  "address": {
                    "type": "string"
                  },
                  "country": {
                    "type": "string"
                  }
                },
                "description": "IP detected for the purchase's evidence details"
              },
              "payment_source": {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string"
                  },
                  "prefix": {
                    "type": "string"
                  },
                  "country": {
                    "type": "string"
                  },
                  "source": {
                    "type": "string"
                  }
                },
                "description": "Payment Method used for the purchase's evidence details"
              }
            },
            "description": "Submitted Evidence to describe the customer"
          },
          "customer_localization": {
            "type": "object",
            "properties": {
              "tax_id": {
                "type": "string"
              },
              "zip": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "country": {
                "type": "string"
              },
              "zone": {
                "type": "string"
              }
            },
            "description": "Selected Evidence to describe the customer, calculated from the Customer evidence"
          },
          "customer_region": {
            "type": "string",
            "description": "The juridiction where the customer is located. Often a country, but can be a state for the US of CA"
          },
          "declare_in_region": {
            "type": "string",
            "description": "The juridiction for which the calculated tax is due"
          },
          "product_type": {
            "type": "string",
            "description": "Code of the product type the evidence refers to"
          },
          "sale_mode": {
            "type": "string",
            "enum": [
              "B2B",
              "B2C"
            ],
            "description": "Represents if the sale is considered as a B2B or a B2C"
          },
          "supplier_evidence": {
            "type": "object",
            "properties": {
              "tax_id": {
                "type": "string"
              },
              "zip": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "country": {
                "type": "string"
              },
              "zone": {
                "type": "string"
              }
            },
            "description": "Submitted Evidence to describe the supplier"
          },
          "supplier_localization": {
            "type": "object",
            "properties": {
              "tax_id": {
                "type": "string"
              },
              "zip": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "country": {
                "type": "string"
              },
              "zone": {
                "type": "string"
              }
            },
            "description": "Selected Evidence to describe the supplier, calculated from the Supplier evidence"
          },
          "supplier_tax_id": {
            "type": "string",
            "description": "ID of the supplier `tax_id` object used for this evidence"
          },
          "tax": {
            "type": "string",
            "description": "ID of the `tax` object that is calculated"
          },
          "tax_code": {
            "type": "string",
            "description": "ID of the `tax` object that is calculated"
          },
          "tax_details": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "rate": {
                  "type": "number",
                  "format": "float",
                  "description": "Percentage of tax applied for the given tax line"
                },
                "tax": {
                  "type": "string",
                  "description": "Code of the tax for the given line"
                },
                "tax_name": {
                  "type": "string",
                  "description": "Name of the tax for the given line"
                },
                "name": {
                  "type": "string",
                  "description": "Name of the juridiction where the given line applies"
                },
                "type": {
                  "type": "string",
                  "description": "The type of the jurisdiction where the given line applies"
                },
                "reduced": {
                  "type": "boolean",
                  "description": "Whether the given line tax rate is a reduced one or not"
                }
              }
            },
            "description": "Breakdown of the taxes that are applied to the given transaction"
          },
          "tax_enabled": {
            "type": "boolean",
            "description": "Whether a tax should be applied or not for the given request"
          },
          "tax_id_validation": {
            "$ref": "#/components/schemas/tax_id_validation",
            "description": "Object representing the validity of the Tax Number"
          },
          "tax_zone": {
            "type": "string",
            "description": "The whole zone in which the tax is determined and calculated. For instance, `EU`, or `US`"
          },
          "warehouse": {
            "type": "string",
            "description": "ID of the warehouse for which the product associated with the tax evidence has been shipped from"
          }
        }
      },
      "tax_id": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "object": {
            "type": "string",
            "enum": [
              "tax_id"
            ],
            "description": "String representing the object type"
          },
          "livemode": {
            "type": "boolean"
          },
          "zone_type": {
            "type": "string",
            "enum": [
              "au_abn",
              "ca_qst",
              "ch_vat",
              "eu_vat",
              "eu_vat",
              "hk_br",
              "in_gst",
              "jp_cn",
              "kr_brn",
              "no_vat",
              "nz_gst",
              "ru_inn",
              "tw_vat",
              "za_vat"
            ],
            "description": "Type of the tax ID"
          },
          "country": {
            "type": "string",
            "description": "Alpha2 ISO code representing the country of the tax ID"
          },
          "value": {
            "type": "string",
            "description": "Value representing the tax ID"
          },
          "archived": {
            "type": "boolean",
            "default": false,
            "description": "Whether the tax ID is no longer in use"
          }
        }
      },
      "tax_region_setting": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "eu-vat"
          },
          "object": {
            "type": "string",
            "enum": [
              "tax_region_setting"
            ],
            "description": "String representing the object type"
          },
          "livemode": {
            "type": "boolean"
          },
          "tax": {
            "type": "string",
            "example": "eu-vat",
            "description": "String representing the tax code"
          },
          "zone": {
            "type": "string",
            "example": "EU",
            "description": "String representing the tax region"
          },
          "activated": {
            "type": "boolean",
            "description": "Whether tax is activated for current region or not"
          },
          "regions": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "FR",
              "description": "The region code (country ISO alpha2 or province/state code)"
            },
            "description": "If tax has sub-regions, such as EU countries or US states, or CA provinces, the ones where tax is activated"
          },
          "physical_regions": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "FR",
              "description": "The region code (country ISO alpha2 or province/state code)"
            },
            "description": "Specifically for EU-VAT, countries where the seller is registered in for distance selling VAT. If a region is not activated, B2C physical VAT for sales in this region will automatically be calculated at the seller's country. If activated they will be calculated at the customer's country rate."
          }
        }
      },
      "tax": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "eu-vat"
          },
          "object": {
            "type": "string",
            "enum": [
              "tax"
            ],
            "description": "String representing the object type"
          },
          "code": {
            "type": "string",
            "example": "eu-vat",
            "description": "String representing the tax code"
          },
          "name": {
            "type": "string",
            "example": "VAT",
            "description": "Tax name"
          },
          "zone": {
            "type": "string",
            "example": "EU",
            "description": "Zone where tax applies"
          },
          "tax_digital_services": {
            "type": "boolean",
            "description": "Whether out-of-zone sellers may need to register to local authorities when selling digital goods to in-zone customers"
          },
          "has_tax_regions": {
            "type": "boolean",
            "description": "Whether the zone is divided into regions where different rates or 'sub-taxes' may apply."
          },
          "reverse_charge_mechanism": {
            "type": "boolean",
            "description": "Whether B2B cross-border sales may apply for reverse charge"
          }
        }
      },
      "transaction": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "object": {
            "type": "string",
            "enum": [
              "transaction"
            ],
            "description": "String representing the object type"
          },
          "livemode": {
            "type": "boolean"
          },
          "amount": {
            "type": "integer",
            "description": "An integer representing the amount of the transaction in the smallest currency unit (e.g., 100 cents to charge $1.00 or 100 to charge ¥100, a zero-decimal currency)"
          },
          "credit_note": {
            "type": "string",
            "description": "ID of the credit note this transaction is linked to."
          },
          "currency": {
            "type": "string",
            "description": "Three-letter ISO currency code, in lowercase"
          },
          "customer": {
            "type": "string",
            "description": "ID of the customer this transaction refers to"
          },
          "flow_type": {
            "type": "string",
            "enum": [
              "payment",
              "refund",
              "adjustment",
              "reinstatement"
            ],
            "description": "A string representing the inner type of the transaction"
          },
          "invoice": {
            "type": "string",
            "description": "ID of the invoice this transaction is linked to."
          },
          "payment_recipient": {
            "type": "string",
            "description": "ID of the payment_source this transaction refers to"
          },
          "payment_source": {
            "type": "string",
            "description": "ID of the payment_source this transaction refers to"
          },
          "sources": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "gateway": {
                  "type": "string",
                  "description": "The name of the gateway. E.g.: stripe, paypal"
                },
                "identifier": {
                  "type": "string",
                  "description": "The object ID from the gateway"
                },
                "source_type": {
                  "type": "string",
                  "description": "The object type from the gateway"
                }
              }
            },
            "description": "Information related to the platform and the ID of the object this transaction was synced from"
          },
          "status": {
            "type": "string",
            "enum": [
              "failed",
              "succeeded"
            ],
            "description": "A string representing the outcome of the transaction"
          },
          "transaction_date": {
            "type": "string",
            "format": "date-time",
            "description": "The datetime this transaction was recorded"
          }
        }
      },
      "deleted_usage_item": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The usage item ID"
          },
          "object": {
            "type": "string",
            "enum": [
              "usage_item"
            ],
            "description": "String representing the object type"
          },
          "deleted": {
            "type": "boolean",
            "default": true,
            "description": "Always equals to `true`"
          }
        }
      },
      "usage_item": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The purchase item ID"
          },
          "object": {
            "type": "string",
            "enum": [
              "usage_item"
            ],
            "description": "String representing the object type"
          },
          "amount": {
            "type": "integer",
            "description": "The gross amount in the currency specified for the usage item."
          },
          "currency": {
            "type": "string",
            "description": "Currency ISO code"
          },
          "description": {
            "type": "string",
            "description": "Description of the usage item."
          },
          "item": {
            "type": "string",
            "description": "The object ID of the Item this usage item has been aggregated in"
          },
          "metadata": {
            "type": "object",
            "properties": {
              "additionalProperties": {
                "type": "string"
              }
            },
            "description": "Set of key-value pairs that you can attach to an object"
          },
          "sources": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "gateway": {
                  "type": "string",
                  "description": "The name of the gateway. E.g.: stripe, paypal"
                },
                "identifier": {
                  "type": "string",
                  "description": "The object ID from the gateway"
                },
                "source_type": {
                  "type": "string",
                  "description": "The object type from the gateway"
                }
              }
            },
            "description": "Information related to the platform and the ID of the object this item was synced from"
          },
          "status": {
            "type": "string",
            "enum": [
              "pending",
              "billed",
              "cancelled"
            ],
            "description": "String representing the usage item status"
          },
          "subscription": {
            "type": "string",
            "description": "The object ID of the subscription this usage item belongs to"
          }
        }
      },
      "warehouse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "object": {
            "type": "string",
            "enum": [
              "warehouse"
            ],
            "description": "String representing the object type"
          },
          "livemode": {
            "type": "boolean"
          },
          "address": {
            "type": "object",
            "properties": {
              "line1": {
                "type": "string"
              },
              "line2": {
                "type": "string"
              },
              "zip": {
                "type": "string"
              },
              "city": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "country": {
                "type": "string"
              }
            },
            "description": "The Warehouse's address"
          },
          "archived": {
            "type": "boolean",
            "description": "Whether the warehouse is archived or not"
          },
          "country": {
            "type": "string",
            "description": "The country where the warehouse is located"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "is_default": {
            "type": "boolean",
            "description": "Whether the warehouse is the default one for the given account"
          },
          "metadata": {
            "type": "object",
            "properties": {
              "additionalProperties": {
                "type": "string"
              }
            },
            "description": "Set of key-value pairs that you can attach to an object"
          },
          "name": {
            "type": "string",
            "description": "The name of the warehouse"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "beanieConfiguration": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "object": {
            "type": "string",
            "enum": [
              "beanie.configuration"
            ],
            "description": "String representing the object type"
          },
          "livemode": {
            "type": "boolean"
          },
          "name": {
            "type": "string",
            "description": "An internal code to help you identify your configuration among others."
          },
          "submit_type": {
            "type": "string",
            "default": "auto",
            "enum": [
              "auto",
              "pay",
              "donate",
              "book"
            ],
            "description": "Describes the type of transaction being performed by Beanie in order to customize relevant text on the page, such as the submit button"
          },
          "primary_color": {
            "type": "string",
            "default": "#212CA7",
            "description": "The Hex code of the main color for the Beanie hosted page"
          },
          "locale": {
            "type": "string",
            "default": "auto",
            "enum": [
              "auto",
              "en",
              "fr",
              "es",
              "de"
            ],
            "description": "The Beanie Session locale. If blank or `auto`, the default browser locale is used"
          },
          "success_url": {
            "type": "string",
            "description": "The URL the customer will be directed to after the session is successful."
          },
          "cancel_url": {
            "type": "string",
            "description": "The URL the customer will be directed to if they decide to cancel the session and return to your website."
          },
          "custom_domain": {
            "type": "string",
            "description": "The Beanie Payment page custom domain host. Must be a valid host"
          },
          "tax_calculation": {
            "type": "string",
            "default": "exclusive",
            "enum": [
              "inclusive",
              "exclusive"
            ],
            "description": "Decide if item amounts are considered as tax inclusive or tax exclusive"
          },
          "billing_address_collection": {
            "type": "string",
            "enum": [
              "required",
              "auto"
            ],
            "description": "Whether Beanie should collect the full billing address or not"
          },
          "billing_address_options": {
            "type": "object",
            "properties": {
              "allowed_countries": {
                "type": "array",
                "example": [
                  "FR",
                  "DE",
                  "US",
                  "CA"
                ],
                "items": {
                  "type": "string"
                },
                "description": "An explicit list of ISO3166-alpha2 codes of countries where you allow shipping"
              },
              "required_fields": {
                "type": "boolean",
                "default": false,
                "description": "Whether the full address is required (not only the country)"
              }
            },
            "description": "Whether you want to specify specific required fields or limit the countries you will allow delivery of your services"
          },
          "shipping_address_collection": {
            "type": "object",
            "properties": {
              "allowed_countries": {
                "type": "array",
                "example": [
                  "FR",
                  "DE",
                  "US",
                  "CA"
                ],
                "items": {
                  "type": "string"
                },
                "description": "An explicit list of ISO3166-alpha2 codes of countries where you allow shipping"
              }
            },
            "description": "Whether Beanie should collect the shipping address of the order, and describes the countries you will allow shipping"
          },
          "company_details_collection": {
            "type": "string",
            "default": "optional",
            "enum": [
              "require_name",
              "optional",
              "never"
            ],
            "description": "Whether Beanie asks for company details (Tax number / Company name)"
          },
          "phone_number_collection": {
            "type": "boolean",
            "description": "Whether Beanie should collect the phone number or not"
          },
          "tax_number_validation": {
            "type": "string",
            "default": "true",
            "enum": [
              "true",
              "false",
              "format"
            ],
            "description": "Whether Beanie should validate the tax number on input"
          },
          "coupon_collection": {
            "type": "boolean",
            "default": false,
            "description": "Whether Beanie should collect coupons or not"
          },
          "multiple_evidence_collection": {
            "type": "boolean",
            "default": true,
            "description": "Whether Beanie should collect multiple evidence such as the IP address and the payment method issuer country to calculate tax."
          },
          "prefill_settings": {
            "type": "object",
            "properties": {
              "editable_fields": {
                "type": "boolean",
                "default": false,
                "description": "Whether fields that are prefilled with `prefill_data` are editable or not"
              }
            },
            "description": "Configuration of fields for which data is prefilled."
          },
          "save_payment_method": {
            "type": "string",
            "default": "never",
            "enum": [
              "never",
              "always",
              "optional"
            ],
            "description": "Whether you need to save the payment method of the customer in the PSP's vault for future use. If value is `optional`, the customer will have a checkbox to decide if they want or not to save their credit card for future use."
          },
          "setup_future_usage": {
            "type": "string",
            "enum": [
              "on_session",
              "off_session"
            ],
            "description": "If the payment method is saved, whether it will be used when the customer is always on your website `on_session`, or if you may charge them when they are offline `off_session`."
          }
        }
      },
      "orderItem": {
        "type": "object",
        "id": "String",
        "object": {
          "type": "String",
          "description": "String representing the object type",
          "enum": [
            "order_item"
          ]
        },
        "livemode": {
          "type": "Boolean"
        },
        "amount": {
          "type": "Integer",
          "description": "The unit amount for the order item. Is tax inclusive or tax exclusive, depending on the underlying order `tax_calculation` parameter"
        },
        "currency": {
          "type": "String",
          "description": "Currency ISO code"
        },
        "quantity": {
          "type": "Integer",
          "description": "The quantity of this item purchased by the customer"
        },
        "product_type": {
          "type": "String",
          "description": "The Octobat-supported tax class/product type for this item"
        },
        "billing_scheme": {
          "type": "String",
          "description": "Describes how to compute the price. Only for `plan` object types",
          "enum": [
            "per_unit",
            "metered"
          ]
        },
        "tiers_mode": {
          "type": "String",
          "description": "Defines if the tiering price should be `graduated` or `volume` based",
          "enum": [
            "per_unit",
            "metered"
          ]
        },
        "transform_usage": {
          "description": "Apply a transformation to the reported usage or set quantity before computing the billed price",
          "type": {
            "divide_by": {
              "type": "Integer",
              "description": "Divide usage by this number."
            },
            "round": {
              "type": "String",
              "description": "After division, either round the result.",
              "enum": [
                "up",
                "down"
              ]
            }
          }
        },
        "reference_type": {
          "type": "String",
          "description": "Type of item sold: A predefined price/SKU or plan, or a dynamic JWT charge",
          "enum": [
            "charge",
            "sku",
            "plan",
            "price"
          ]
        },
        "reference_id": {
          "type": "String",
          "description": "The underlying plan-ID, SKU-ID or charge JWT-ID"
        },
        "created_at": {
          "type": "DateTime"
        },
        "updated_at": {
          "type": "DateTime"
        },
        "properties": {
          "description": {
            "type": "string",
            "description": "Description of the item"
          }
        }
      },
      "beanieSession": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "object": {
            "type": "string",
            "enum": [
              "beanie.session"
            ],
            "description": "String representing the object type"
          },
          "livemode": {
            "type": "boolean"
          },
          "mode": {
            "type": "string",
            "enum": [
              "payment",
              "setup",
              "subscription"
            ],
            "description": "The mode of the Beanie Session"
          },
          "customer": {
            "type": "string",
            "description": "The ID of the customer for this session. A new customer is created unless an existing is provided at session creation time."
          },
          "success_url": {
            "type": "string",
            "description": "The URL the customer will be directed to after the session is successful."
          },
          "cancel_url": {
            "type": "string",
            "description": "The URL the customer will be directed to if they decide to cancel the session and return to your website."
          },
          "display_items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/orderItem"
            },
            "description": "The line items, plans, or SKUs purchased by the customer"
          },
          "save_payment_method": {
            "type": "string",
            "default": "never",
            "enum": [
              "never",
              "always",
              "optional"
            ],
            "description": "Whether you need to save the payment method of the customer in the PSP's vault for future use. If value is `optional`, the customer will have a checkbox to decide if they want or not to save their credit card for future use."
          },
          "setup_future_usage": {
            "type": "string",
            "enum": [
              "off_session",
              "on_session"
            ],
            "description": "If the payment method is saved, whether it will be used when the customer is always on your website `on_session`, or if you may charge them when they are offline `off_session`."
          },
          "tax_calculation": {
            "type": "string",
            "enum": [
              "inclusive",
              "exclusive"
            ],
            "description": "Decide if item amounts are considered as tax inclusive or tax exclusive"
          },
          "billing_address_collection": {
            "type": "string",
            "enum": [
              "required",
              "auto"
            ],
            "description": "Whether Beanie should collect the full billing address or not"
          },
          "billing_address_options": {
            "type": "object",
            "properties": {
              "allowed_countries": {
                "type": "array",
                "example": [
                  "FR",
                  "DE",
                  "US",
                  "CA"
                ],
                "items": {
                  "type": "string"
                },
                "description": "An explicit list of ISO3166-alpha2 codes of countries where you allow shipping"
              },
              "required_fields": {
                "type": "boolean",
                "default": false,
                "description": "Whether the full address is required (not only the country)"
              }
            },
            "description": "Whether you want to specify specific required fields or limit the countries you will allow delivery of your services"
          },
          "shipping_address_collection": {
            "type": "object",
            "properties": {
              "allowed_countries": {
                "type": "array",
                "example": [
                  "FR",
                  "DE",
                  "US",
                  "CA"
                ],
                "items": {
                  "type": "string"
                },
                "description": "An explicit list of ISO3166-alpha2 codes of countries where you allow shipping"
              }
            },
            "description": "Whether Beanie should collect the shipping address of the order, and describes the countries you will allow shipping. Leave blank to not collect shipping address."
          },
          "company_details_collection": {
            "type": "string",
            "default": "optional",
            "enum": [
              "optional",
              "never"
            ],
            "description": "Whether Beanie asks for company details (Tax number / Company name)"
          },
          "phone_number_collection": {
            "type": "boolean",
            "description": "Whether Beanie should collect the phone number or not"
          },
          "tax_number_validation": {
            "type": "string",
            "enum": [
              "true",
              "false",
              "format"
            ],
            "description": "Whether Beanie should validate the tax number on input"
          },
          "coupon_collection": {
            "type": "boolean",
            "description": "Whether Beanie should collect coupons or not"
          },
          "primary_color": {
            "type": "string",
            "default": "#212CA7",
            "description": "The main color for the Beanie theme. Must be an hex-formatted color"
          },
          "locale": {
            "type": "string",
            "enum": [
              "auto",
              "en",
              "fr",
              "es",
              "de"
            ],
            "description": "The Beanie Session locale. If blank or `auto`, the default browser locale is used"
          },
          "client_reference_id": {
            "type": "string",
            "description": "A unique string to reference the Beanie Session. This can be a customer ID, a cart ID, or similar, and can be used to reconcile the session with your internal systems."
          },
          "prefill_data": {
            "type": "object",
            "properties": {
              "customer_billing_address_line1": {
                "type": "string"
              },
              "customer_billing_address_city": {
                "type": "string"
              },
              "customer_billing_address_zip": {
                "type": "string"
              },
              "customer_billing_address_state": {
                "type": "string"
              },
              "customer_billing_address_country": {
                "type": "string",
                "description": "Must be ISO3166-alpha2"
              },
              "customer_email": {
                "type": "string"
              },
              "customer_name": {
                "type": "string"
              },
              "customer_company_name": {
                "type": "string"
              },
              "customer_tax_number": {
                "type": "string"
              }
            },
            "description": "Set of key-value pairs that you can attach to prefill the Beanie form fields"
          },
          "prefill_settings": {
            "type": "object",
            "properties": {
              "editable_fields": {
                "type": "boolean",
                "default": false,
                "description": "Whether fields that are prefilled with `prefill_data` are editable or not"
              }
            },
            "description": "Configuration of fields for which data is prefilled."
          },
          "metadata": {
            "type": "object",
            "properties": {
              "additionalProperties": {
                "type": "string"
              }
            },
            "description": "Set of key-value pairs that you can attach to an object"
          }
        }
      },
      "error": {
        "type": "object",
        "default": {
          "message": "Unprocessable Entity",
          "code": 422,
          "status": "unprocessable_entity"
        },
        "properties": {
          "message": {
            "type": "string"
          },
          "code": {
            "type": "integer"
          },
          "status": {
            "type": "string"
          }
        }
      },
      "api_errors": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "api_connection_error",
              "api_error",
              "authentication_error",
              "idempotency_error",
              "invalid_request_error",
              "rate_limit_error"
            ],
            "description": "The type of error returned"
          },
          "message": {
            "type": "string",
            "description": "A human-readable message providing more details about the error."
          },
          "errors": {
            "type": "object",
            "properties": {
              "additionalProperties": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/error"
                }
              }
            }
          }
        }
      },
      "account": {
        "type": "object",
        "default": {
          "id": "oc_acct_xxxxxxxxxxxxx",
          "object": "account",
          "type": "custom",
          "country": "FR",
          "email": "john.doe@octobat.com",
          "active": true,
          "capabilities": {
            "tax": "active",
            "invoicing": "active"
          },
          "business_type": "company",
          "company": {
            "name": "Octobat SAS",
            "address": {
              "city": "Paris",
              "country": "FR",
              "line1": "8 Boulevard Haussmann",
              "line2": null,
              "zip": "75008",
              "state": null
            },
            "legal": {
              "registry_office": "Pontoise",
              "registration_id": "82056750100014",
              "capital": "2400€"
            }
          },
          "business_profile": {
            "name": "Beanie",
            "support_url": null,
            "url": "https://www.octobat.com/products/beanie"
          },
          "created_at": "2020-03-12T18:10:21+00:00",
          "updated_at": "2020-03-12T18:10:21+00:00"
        },
        "properties": {
          "id": {
            "type": "string"
          },
          "object": {
            "type": "string",
            "enum": [
              "account"
            ],
            "description": "String representing the object type"
          },
          "type": {
            "type": "string",
            "enum": [
              "standard",
              "custom",
              "express"
            ],
            "description": "String representing the account type"
          },
          "country": {
            "type": "string",
            "description": "String representing the account country"
          },
          "email": {
            "type": "string",
            "description": "String representing the account email"
          },
          "capabilities": {
            "type": "object",
            "properties": {
              "additionalProperties": {
                "type": "string",
                "enum": [
                  "active",
                  "inactive",
                  "pending"
                ]
              }
            },
            "description": "A hash containing the set of capabilities that was requested for this account and their associated states. Keys are names of capabilities, values are `active`, `inactive`, or `pending`"
          },
          "business_type": {
            "type": "string",
            "enum": [
              "individual",
              "company"
            ],
            "description": "The business type"
          },
          "active": {
            "type": "boolean"
          },
          "company": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "The company legal name"
              },
              "address": {
                "type": "object",
                "properties": {
                  "city": {
                    "type": "string"
                  },
                  "country": {
                    "type": "string",
                    "description": "Two-letter country code (ISO 3166-1 alpha-2)"
                  },
                  "line1": {
                    "type": "string"
                  },
                  "line2": {
                    "type": "string"
                  },
                  "zip": {
                    "type": "string",
                    "description": "Postal code or Zip Code"
                  },
                  "state": {
                    "type": "string"
                  }
                },
                "description": "The company billing address"
              },
              "tax_id": {
                "type": "string"
              },
              "legal": {
                "type": "object",
                "properties": {
                  "registry_office": {
                    "type": "string"
                  },
                  "registration_id": {
                    "type": "string"
                  },
                  "capital": {
                    "type": "string"
                  }
                },
                "description": "Legal additional information that could be requested in a given country"
              }
            },
            "description": "Information about the company or business. This field is null unless business_type is set to `company`"
          },
          "individual": {
            "type": "object",
            "properties": {
              "address": {
                "type": "object",
                "properties": {
                  "city": {
                    "type": "string"
                  },
                  "country": {
                    "type": "string",
                    "description": "Two-letter country code (ISO 3166-1 alpha-2)"
                  },
                  "line1": {
                    "type": "string"
                  },
                  "line2": {
                    "type": "string"
                  },
                  "zip": {
                    "type": "string",
                    "description": "Postal code or Zip Code"
                  },
                  "state": {
                    "type": "string"
                  }
                },
                "description": "The company billing address"
              },
              "first_name": {
                "type": "string"
              },
              "last_name": {
                "type": "string"
              },
              "gender": {
                "type": "string"
              },
              "dob": {
                "type": "object",
                "properties": {
                  "day": {
                    "type": "integer"
                  },
                  "month": {
                    "type": "integer"
                  },
                  "year": {
                    "type": "integer"
                  }
                },
                "required": [
                  "day",
                  "month",
                  "year"
                ],
                "description": "The individual’s date of birth."
              }
            },
            "description": "Information about the person represented by the account. This field is null unless business_type is set to `individual`"
          },
          "business_profile": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "The customer-facing business name"
              },
              "support_url": {
                "type": "string",
                "description": "A publicly available email address for sending support issues to"
              },
              "url": {
                "type": "string",
                "description": "A publicly available website for the business"
              }
            },
            "description": "Business Information about the account"
          },
          "settings": {
            "type": "object",
            "properties": {
              "branding": {
                "type": "object",
                "properties": {
                  "logo": {
                    "type": "string",
                    "description": "The logo of the account"
                  },
                  "primary_color": {
                    "type": "string",
                    "description": "A CSS hex color representing the account"
                  }
                }
              },
              "tax": {
                "type": "object",
                "properties": {
                  "collection": {
                    "type": "boolean",
                    "default": true,
                    "description": "Whether your account needs to collect tax or not"
                  },
                  "default_product_type": {
                    "type": "string",
                    "default": "eservice",
                    "enum": [
                      "eservice",
                      "saas",
                      "physical",
                      "standard"
                    ],
                    "description": "The default tax class for the connected account"
                  },
                  "exemption_due_to_threshold": {
                    "type": "boolean",
                    "default": false,
                    "description": "Whether your account is tax-exempted in their own country"
                  },
                  "vat_moss_registration": {
                    "type": "boolean",
                    "default": false,
                    "description": "Whether your account is registered to the MOSS for EU VAT collection"
                  }
                },
                "description": "Settings for the tax capability"
              },
              "invoicing": {
                "type": "object",
                "properties": {
                  "mandate": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string",
                        "enum": [
                          "active",
                          "inactive",
                          "pending"
                        ],
                        "description": "The status of the Mandate, one of `pending`, `inactive`, or `active`. The Mandate can be used to delegate invoicing only if `status=active`."
                      },
                      "acceptance": {
                        "type": "object",
                        "properties": {
                          "accepted_at": {
                            "type": "string",
                            "format": "date-time",
                            "description": "The time at which the customer accepted the Mandate."
                          },
                          "ip_address": {
                            "type": "string",
                            "description": "The IP address from which the Mandate was accepted by the customer."
                          },
                          "user_agent": {
                            "type": "string",
                            "description": "The user agent of the browser from which the Mandate was accepted by the customer."
                          }
                        },
                        "description": "Details about the merchant’s acceptance of the mandate"
                      }
                    },
                    "description": "A Mandate is a record of the permission a merchant has given you to generate invoices on their behalf"
                  }
                },
                "description": "Settings for the invoicing capability"
              }
            },
            "description": "Options for customizing how the account functions within Octobat"
          },
          "metadata": {
            "type": "object",
            "properties": {
              "additionalProperties": {
                "type": "string"
              }
            },
            "description": "Set of key-value pairs that you can attach to an object"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "capability": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "object": {
            "type": "string",
            "enum": [
              "plaza.capability"
            ],
            "description": "String representing the object type"
          },
          "account": {
            "type": "string",
            "description": "The account for which the capability enables functionality"
          },
          "livemode": {
            "type": "boolean"
          },
          "requested": {
            "type": "boolean",
            "description": "Whether the capability has been requested"
          },
          "requested_at": {
            "type": "string",
            "format": "date-time",
            "description": "Time at which the capability has been requested"
          },
          "status": {
            "type": "string",
            "enum": [
              "unrequested",
              "inactive",
              "pending",
              "active"
            ],
            "description": "String representing the capability status"
          },
          "requirements": {
            "type": "object",
            "properties": {
              "past_due": {
                "type": "array",
                "description": "Fields that weren’t collected on time, and need to be collected to reenable the capability for the account"
              },
              "currently_due": {
                "type": "array",
                "description": "Fields that need to be collected to keep the capability enabled"
              },
              "eventually_due": {
                "type": "array",
                "description": "Fields that may need to be collected in the future"
              },
              "pending_verification": {
                "type": "array",
                "description": "Fields that may become required depending on the results of verification or review"
              },
              "errors": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "Error code"
                    },
                    "reason": {
                      "type": "string",
                      "description": "Informative message about the error"
                    }
                  }
                },
                "description": "The fields that need to be collected again because validation or verification failed"
              },
              "disabled_reason": {
                "type": "string",
                "enum": [
                  "requirement.fields_needed"
                ],
                "description": "String representing the reason why a capability has been rejected"
              },
              "current_deadline": {
                "type": "string",
                "format": "date-time",
                "description": "The date the fields in currently_due must be collected by to keep the capability enabled for the account"
              }
            },
            "description": "Requirements for the capability"
          }
        }
      },
      "country_spec": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "object": {
            "type": "string",
            "enum": [
              "country_spec"
            ],
            "description": "String representing the object type"
          },
          "country": {
            "type": "string",
            "description": "String representing the country"
          },
          "requirements": {
            "type": "object",
            "properties": {
              "company": {
                "type": "object",
                "properties": {
                  "minimum": {
                    "type": "array",
                    "description": "List of required attributes for creating a company subaccount"
                  },
                  "additional": {
                    "type": "array",
                    "description": "List of additional attributes for creating a company subaccount"
                  }
                },
                "description": "Requirements for creating accounts for companies and businesses"
              },
              "individual": {
                "type": "object",
                "properties": {
                  "minimum": {
                    "type": "array",
                    "description": "List of required attributes for creating a company subaccount"
                  },
                  "additional": {
                    "type": "array",
                    "description": "List of additional attributes for creating a company subaccount"
                  }
                },
                "description": "Requirements for creating accounts for individuals or sole-businesses"
              }
            },
            "description": "Requirements for creating accounts in a given country"
          }
        }
      },
      "report_run": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "object": {
            "type": "string",
            "enum": [
              "reporting.report_run"
            ],
            "description": "String representing the object type"
          },
          "livemode": {
            "type": "boolean"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "When this ReportRun was created"
          },
          "parameters": {
            "type": "object",
            "properties": {
              "additionalProperties": {
                "type": "object"
              }
            },
            "description": "Parameters of this report run"
          },
          "report_type": {
            "type": "string",
            "description": "The ID of the Report Type that should be run"
          },
          "result": {
            "type": "object",
            "description": {
              "type": "An object, often a `file` representing the result of the report run"
            }
          },
          "status": {
            "type": "string",
            "description": "Status of this report run. This will be `pending` when the run is initially created. When it finishes, this will be set to `succeeded` and the `result` field will be populated"
          }
        }
      },
      "report_type": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "object": {
            "type": "string",
            "enum": [
              "reporting.report_type"
            ],
            "description": "String representing the object type"
          },
          "livemode": {
            "type": "boolean"
          },
          "name": {
            "type": "string",
            "description": "Display name of the report type"
          },
          "data_available_start": {
            "type": "string",
            "format": "date-time",
            "description": "Earliest DateTime for which this Report Type is available"
          },
          "data_available_end": {
            "type": "string",
            "format": "date-time",
            "description": "Most recent DateTime for which this Report Type is available"
          },
          "version": {
            "type": "integer",
            "default": 1,
            "description": "Version of the Report Type. Different versions report with the same ID will have the same purpose, but may take different run parameters or have different result schemas"
          },
          "recurring": {
            "type": "object",
            "properties": {
              "interval": {
                "type": "string",
                "enum": [
                  "year",
                  "month",
                  "week",
                  "day",
                  "hour",
                  "minute"
                ]
              },
              "interval_count": {
                "type": "integer",
                "default": 1,
                "description": "The number of intervals (specified in the `interval` attribute) between report updates. For example, `interval=month` and `interval_count=3` updates every 3 months."
              },
              "additionalProperties": {
                "type": "object",
                "example": {
                  "month": {
                    "day": 5
                  }
                }
              }
            },
            "description": "The frequency of updates for this Report Type"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "The last time this Report was updated"
          }
        }
      }
    },
    "responses": {
      "CreditNoteNumberingSequencesListResponse": {
        "description": "success",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/credit_note_numbering_sequence"
                  }
                },
                "has_more": {
                  "type": "boolean",
                  "description": "True if this list has another page of items after this one that can be fetched"
                },
                "object": {
                  "type": "string",
                  "enum": [
                    "list"
                  ],
                  "description": "String representing the object type"
                }
              }
            }
          }
        }
      },
      "ErrorResponse": {
        "description": "bad request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/api_errors"
            }
          }
        }
      },
      "CreditNotesListResponse": {
        "description": "success",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/credit_note"
                  }
                },
                "has_more": {
                  "type": "boolean",
                  "description": "True if this list has another page of items after this one that can be fetched"
                },
                "object": {
                  "type": "string",
                  "enum": [
                    "list"
                  ],
                  "description": "String representing the object type"
                }
              }
            }
          }
        }
      },
      "CustomerBalanceTransactionsListResponse": {
        "description": "success",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/customer_balance_transaction"
                  }
                },
                "has_more": {
                  "type": "boolean",
                  "description": "True if this list has another page of items after this one that can be fetched"
                },
                "object": {
                  "type": "string",
                  "enum": [
                    "list"
                  ],
                  "description": "String representing the object type"
                }
              }
            }
          }
        }
      },
      "CustomersListResponse": {
        "description": "success",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/customer"
                  }
                },
                "has_more": {
                  "type": "boolean",
                  "description": "True if this list has another page of items after this one that can be fetched"
                },
                "object": {
                  "type": "string",
                  "enum": [
                    "list"
                  ],
                  "description": "String representing the object type"
                }
              }
            }
          }
        }
      },
      "InvoiceNumberingSequencesListResponse": {
        "description": "success",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/invoice_numbering_sequence"
                  }
                },
                "has_more": {
                  "type": "boolean",
                  "description": "True if this list has another page of items after this one that can be fetched"
                },
                "object": {
                  "type": "string",
                  "enum": [
                    "list"
                  ],
                  "description": "String representing the object type"
                }
              }
            }
          }
        }
      },
      "InvoicesListResponse": {
        "description": "success",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/invoice"
                  }
                },
                "has_more": {
                  "type": "boolean",
                  "description": "True if this list has another page of items after this one that can be fetched"
                },
                "object": {
                  "type": "string",
                  "enum": [
                    "list"
                  ],
                  "description": "String representing the object type"
                }
              }
            }
          }
        }
      },
      "ItemsListResponse": {
        "description": "success",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/item"
                  }
                },
                "has_more": {
                  "type": "boolean",
                  "description": "True if this list has another page of items after this one that can be fetched"
                },
                "object": {
                  "type": "string",
                  "enum": [
                    "list"
                  ],
                  "description": "String representing the object type"
                }
              }
            }
          }
        }
      },
      "OutboundTransactionsListResponse": {
        "description": "success",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/outbound_transaction"
                  }
                },
                "has_more": {
                  "type": "boolean",
                  "description": "True if this list has another page of items after this one that can be fetched"
                },
                "object": {
                  "type": "string",
                  "enum": [
                    "list"
                  ],
                  "description": "String representing the object type"
                }
              }
            }
          }
        }
      },
      "PaymentRecipientReferencesListResponse": {
        "description": "success",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/payment_recipient_reference"
                  }
                },
                "has_more": {
                  "type": "boolean",
                  "description": "True if this list has another page of items after this one that can be fetched"
                },
                "object": {
                  "type": "string",
                  "enum": [
                    "list"
                  ],
                  "description": "String representing the object type"
                }
              }
            }
          }
        }
      },
      "PaymentRecipientsListResponse": {
        "description": "success",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/payment_recipient"
                  }
                },
                "has_more": {
                  "type": "boolean",
                  "description": "True if this list has another page of items after this one that can be fetched"
                },
                "object": {
                  "type": "string",
                  "enum": [
                    "list"
                  ],
                  "description": "String representing the object type"
                }
              }
            }
          }
        }
      },
      "PurchaseItemsListResponse": {
        "description": "success",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/purchase_item"
                  }
                },
                "has_more": {
                  "type": "boolean",
                  "description": "True if this list has another page of items after this one that can be fetched"
                },
                "object": {
                  "type": "string",
                  "enum": [
                    "list"
                  ],
                  "description": "String representing the object type"
                }
              }
            }
          }
        }
      },
      "SelfBillingCreditNotesListResponse": {
        "description": "success",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/self_billing_credit_note"
                  }
                },
                "has_more": {
                  "type": "boolean",
                  "description": "True if this list has another page of items after this one that can be fetched"
                },
                "object": {
                  "type": "string",
                  "enum": [
                    "list"
                  ],
                  "description": "String representing the object type"
                }
              }
            }
          }
        }
      },
      "SelfBillingInvoicesListResponse": {
        "description": "success",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/self_billing_invoice"
                  }
                },
                "has_more": {
                  "type": "boolean",
                  "description": "True if this list has another page of items after this one that can be fetched"
                },
                "object": {
                  "type": "string",
                  "enum": [
                    "list"
                  ],
                  "description": "String representing the object type"
                }
              }
            }
          }
        }
      },
      "SubscriptionItemsListResponse": {
        "description": "success",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/subscription_item"
                  }
                },
                "has_more": {
                  "type": "boolean",
                  "description": "True if this list has another page of items after this one that can be fetched"
                },
                "object": {
                  "type": "string",
                  "enum": [
                    "list"
                  ],
                  "description": "String representing the object type"
                }
              }
            }
          }
        }
      },
      "SubscriptionsListResponse": {
        "description": "success",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/subscription"
                  }
                },
                "has_more": {
                  "type": "boolean",
                  "description": "True if this list has another page of items after this one that can be fetched"
                },
                "object": {
                  "type": "string",
                  "enum": [
                    "list"
                  ],
                  "description": "String representing the object type"
                }
              }
            }
          }
        }
      },
      "SuppliersListResponse": {
        "description": "success",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/supplier"
                  }
                },
                "has_more": {
                  "type": "boolean",
                  "description": "True if this list has another page of items after this one that can be fetched"
                },
                "object": {
                  "type": "string",
                  "enum": [
                    "list"
                  ],
                  "description": "String representing the object type"
                }
              }
            }
          }
        }
      },
      "TaxCodesListResponse": {
        "description": "success",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/tax_code"
                  }
                },
                "has_more": {
                  "type": "boolean",
                  "description": "True if this list has another page of items after this one that can be fetched"
                },
                "object": {
                  "type": "string",
                  "enum": [
                    "list"
                  ],
                  "description": "String representing the object type"
                }
              }
            }
          }
        }
      },
      "TaxIdsListResponse": {
        "description": "success",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/tax_id"
                  }
                },
                "has_more": {
                  "type": "boolean",
                  "description": "True if this list has another page of items after this one that can be fetched"
                },
                "object": {
                  "type": "string",
                  "enum": [
                    "list"
                  ],
                  "description": "String representing the object type"
                }
              }
            }
          }
        }
      },
      "TaxRegionSettingsListResponse": {
        "description": "success",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/tax_region_setting"
                  }
                },
                "has_more": {
                  "type": "boolean",
                  "description": "True if this list has another page of items after this one that can be fetched"
                },
                "object": {
                  "type": "string",
                  "enum": [
                    "list"
                  ],
                  "description": "String representing the object type"
                }
              }
            }
          }
        }
      },
      "TaxesListResponse": {
        "description": "success",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/tax"
                  }
                },
                "has_more": {
                  "type": "boolean",
                  "description": "True if this list has another page of items after this one that can be fetched"
                },
                "object": {
                  "type": "string",
                  "enum": [
                    "list"
                  ],
                  "description": "String representing the object type"
                }
              }
            }
          }
        }
      },
      "TransactionsListResponse": {
        "description": "success",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/transaction"
                  }
                },
                "has_more": {
                  "type": "boolean",
                  "description": "True if this list has another page of items after this one that can be fetched"
                },
                "object": {
                  "type": "string",
                  "enum": [
                    "list"
                  ],
                  "description": "String representing the object type"
                }
              }
            }
          }
        }
      },
      "UsageItemsListResponse": {
        "description": "success",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/usage_item"
                  }
                },
                "has_more": {
                  "type": "boolean",
                  "description": "True if this list has another page of items after this one that can be fetched"
                },
                "object": {
                  "type": "string",
                  "enum": [
                    "list"
                  ],
                  "description": "String representing the object type"
                }
              }
            }
          }
        }
      },
      "WarehousesListResponse": {
        "description": "success",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/warehouse"
                  }
                },
                "has_more": {
                  "type": "boolean",
                  "description": "True if this list has another page of items after this one that can be fetched"
                },
                "object": {
                  "type": "string",
                  "enum": [
                    "list"
                  ],
                  "description": "String representing the object type"
                }
              }
            }
          }
        }
      },
      "BeanieConfigurationsListResponse": {
        "description": "success",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/beanieConfiguration"
                  }
                },
                "object": {
                  "type": "string",
                  "enum": [
                    "list"
                  ],
                  "description": "String representing the object type"
                }
              }
            }
          }
        }
      },
      "AccountsListResponse": {
        "description": "success",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/account"
                  }
                },
                "has_more": {
                  "type": "boolean",
                  "description": "True if this list has another page of items after this one that can be fetched"
                },
                "object": {
                  "type": "string",
                  "enum": [
                    "list"
                  ],
                  "description": "String representing the object type"
                }
              }
            }
          }
        }
      },
      "CapabilityListResponse": {
        "description": "success",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/capability"
                  }
                },
                "object": {
                  "type": "string",
                  "enum": [
                    "list"
                  ],
                  "description": "String representing the object type"
                }
              }
            }
          }
        }
      },
      "CountrySpecsListResponse": {
        "description": "success",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/country_spec"
                  }
                },
                "has_more": {
                  "type": "boolean",
                  "description": "True if this list has another page of items after this one that can be fetched"
                },
                "object": {
                  "type": "string",
                  "enum": [
                    "list"
                  ],
                  "description": "String representing the object type"
                }
              }
            }
          }
        }
      },
      "ReportRunsListResponse": {
        "description": "success",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/report_run"
                  }
                },
                "has_more": {
                  "type": "boolean",
                  "description": "True if this list has another page of items after this one that can be fetched"
                },
                "object": {
                  "type": "string",
                  "enum": [
                    "list"
                  ],
                  "description": "String representing the object type"
                }
              }
            }
          }
        }
      },
      "ReportTypesListResponse": {
        "description": "success",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/report_type"
                  }
                },
                "has_more": {
                  "type": "boolean",
                  "description": "True if this list has another page of items after this one that can be fetched"
                },
                "object": {
                  "type": "string",
                  "enum": [
                    "list"
                  ],
                  "description": "String representing the object type"
                }
              }
            }
          }
        }
      }
    }
  },
  "x-tagGroups": [
    {
      "name": "General Usage",
      "tags": [
        "Introduction",
        "Authentication",
        "Errors",
        "Pagination",
        "Source objects",
        "Expandable objects",
        "Idempotent requests"
      ]
    },
    {
      "name": "Core & Tax API",
      "tags": [
        "Customers",
        "Taxes",
        "TaxCodes",
        "TaxEvidences",
        "TaxIds",
        "TaxIdValidations",
        "TaxRegionSettings",
        "Warehouses"
      ]
    },
    {
      "name": "Billing API",
      "tags": [
        "Credit Notes",
        "Credit Note Numbering Sequences",
        "Invoices",
        "Invoice Numbering Sequences",
        "Items",
        "PaymentRecipients",
        "PaymentRecipientReferences",
        "Transactions"
      ]
    },
    {
      "name": "Recurring API",
      "tags": [
        "Subscriptions",
        "SubscriptionItems",
        "UsageItems"
      ]
    },
    {
      "name": "Self Billing API",
      "tags": [
        "Suppliers",
        "SelfBillingInvoices",
        "SelfBillingCreditNotes",
        "PurchaseItems",
        "OutboundTransactions"
      ]
    },
    {
      "name": "Beanie",
      "tags": [
        "Sessions",
        "Configurations"
      ]
    },
    {
      "name": "Plaza",
      "tags": [
        "Accounts",
        "Capabilities",
        "CountrySpecs"
      ]
    }
  ]
}