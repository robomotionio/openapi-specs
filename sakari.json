{
  "openapi": "3.0.0",
  "servers": [
    {
      "description": "Sakari Production",
      "url": "https://api.sakari.io/v1"
    }
  ],
  "info": {
    "description": "# Introduction\n\nWelcome to the documentation for the Sakari Messaging REST API. \n\nSakari provides an advanced platform to drive large scale customized SMS communication\n\nREST is a web-service protocol that lends itself to rapid development by using everyday HTTP and JSON technology.\n\nTo find out more about our product offering, please visit [https://sakari.io](https://sakari.io).\n\n# Quickstart\n\nFor your convenience we have created a quickstart guide to get you up and running in 5 minutes. \n\n[https://sakari.io/blog/sakari-api-quickstart](https://sakari.io/blog/sakari-api-quickstart)\n\n# PostMan Collection\n\nWe've created a simple set of examples using [PostMan](https://www.getpostman.com/) Simply click below to import these. You will need to setup three environment variables in PostMan - AccountId, ClientId and ClientSecret. Check out our PostMan blog post for more information\n\n[![Run in Postman](https://run.pstmn.io/button.svg)](https://app.getpostman.com/run-collection/d616e273edc916a7a6eb)\n\n# Finding your client id, client secret and account id\n\nTo authenticate against the API's you will need three key pieces of data\n - client id\n - client secret\n - account id\n\nTo retrieve these, simply login into [https://hub.sakari.io](https://hub.sakari.io) and click on the \"cog\" in the top right corner. In the popup dialog at the bottom you should see your API credentials and account id. If these are not visible you will need to click on \"Request Credentials\"\n\n# Versioning\n\nWith any breaking changes we will introduce a new version of the API. The latest version is v1.\n\nThe API uses an open schema model, which means server may add extra properties to responses. Likewise, the server will ignore any extra query parameters and request body properties. When you write clients, you need to ignore additional properties in responses to ensure they do not break.\n\n# Testing\n\nThere are numerous tools available for testing the API's. We will include examples using curl and the client SDKs that we have created. If you would like to see an SDK in a language not currently available, please let us know.\n\n# Throttling / Limits\n\nOur API's have been specifically designed to support bulk messaging in a single API call. We therefore impose limits on the frequency of calling the APIs to prevent abuse or runaway processes. If you feel you need a higher limit, please contact us. If you hit the limit you will get a 429 error code returned from our servers\n\n# Errors\n\nThe API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be JSON in the following format:\n\n```\n{\n  \"success\": false,\n  \"error\": {\n    \"code\": \"CONT-001\",\n    \"message\": \"Invalid mobile number\"\n  }\n}\n```\n\n# Pagination\n\nFor performance, most GET calls return a subset of data. This data is paginated for easy access. Most APIs which return collections of data will return a pagination object as such:\n\n```\n{\n  \"pagination\": {\n    \"offset\": 0,\n    \"limit\": 10\n    \"totalCount\": 21\n  }  \n}\n```\n\nWhen making calls to the API, you can adjust the slice of data returned using query parameters such as:\n\n`` https://api.sakari.io/v1/accounts/123/contacts?offset=20&limit=25 ``\n\nThis will return 25 contacts with an offset of 20.\n",
    "version": "1.0.1",
    "title": "Sakari",
    "termsOfService": "https://sakari.io/terms-service.html",
    "contact": {
      "email": "support@sakari.io"
    },
    "x-logo": {
      "url": "https://logo.clearbit.com/sakari.io"
    }
  },
  "tags": [
    {
      "name": "authentication",
      "description": "Sakari uses OAuth2 for authentication. After you have created an account at [https://hub.sakari.io](https://hub.sakari.io), you can retrieve your client id and secret from the 'Account Details' screen (click on the 'cog' icon in the top right corner and scroll down to API Credentials)\n\nUsing your client id and secret, you can exchange these for a JWT ([JSON Web Token](https://en.wikipedia.org/wiki/JSON_Web_Token))\n\nThe JWT should then be used when accessing any of the core API's. It should be passed in the `Authorization` header.\n\nFor example:\n\n``Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImt....``\n"
    },
    {
      "name": "contacts",
      "description": "Create, modify or delete contacts"
    },
    {
      "name": "messages",
      "description": "Send or track messages to one contact, a group of contacts or your entire address book"
    },
    {
      "name": "templates",
      "description": "Define reusable message or web templates"
    },
    {
      "name": "campaigns",
      "description": "Define reusable message campaigns with a predefined contact list/filter, template and schedule"
    },
    {
      "name": "conversations",
      "description": "Conversations group your message history with each contact into one thread"
    },
    {
      "name": "tools",
      "description": "Tools to assist with sending and receiving messages, such as file sharing, translation, etc."
    },
    {
      "name": "webhooks",
      "description": "Webhooks allow your own system to be automatically notified upon certin events, such as a new message received from one of your contacts or a status change notification for your messages"
    }
  ],
  "paths": {
    "/oauth2/token": {
      "post": {
        "tags": [
          "authentication"
        ],
        "summary": "Get token for accessing APIs",
        "operationId": "auth.token",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TokenRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenResponse"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "CURL",
            "source": "curl -X POST \\\n  https://api.sakari.io/oauth2/token \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"grant_type\": \"client_credentials\",\n  \"client_id\": \"12345678-1234-1234-1234-123456789012\",\n  \"client_secret\": \"87654321-4321-4321-4321-098765432121\"\n}'\n"
          },
          {
            "lang": "JavaScript",
            "source": "var settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.sakari.io/oauth2/token\",\n  \"method\": \"POST\",\n  \"headers\": {\n    \"Content-Type\": \"application/json\"\n  },\n  \"processData\": false,\n  \"data\": \"{\\n\\t\\\"grant_type\\\": \\\"client_credentials\\\",\\n\\t\\\"client_id\\\": \\\"12345678-1234-1234-1234-123456789012\\\",\\n\\t\\\"client_secret\\\": \\\"87654321-4321-4321-4321-098765432121\\\"\\n}\"\n}\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});\n"
          },
          {
            "lang": "PHP",
            "source": "<?php\n\n  $request = new HttpRequest();\n  $request->setUrl('https://api.sakari.io/oauth2/token');\n  $request->setMethod(HTTP_METH_POST);\n\n  $request->setHeaders(array(\n    'Content-Type' => 'application/json'\n  ));\n\n  $request->setBody('{\n    \"grant_type\": \"client_credentials\",\n    \"client_id\": \"12345678-1234-1234-123456789012\",\n    \"client_secret\": \"87654321-4321-4321-898765432121\"\n  }');\n\n  try {\n    $response = $request->send();\n\n    echo $response->getBody();\n  } catch (HttpException $ex) {\n    echo $ex;\n  }\n"
          }
        ]
      }
    },
    "/accounts/{accountId}/contacts": {
      "get": {
        "tags": [
          "contacts"
        ],
        "summary": "Fetch contacts",
        "operationId": "contacts.fetchAll",
        "parameters": [
          {
            "$ref": "#/components/parameters/accountId"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/firstNameFilter"
          },
          {
            "$ref": "#/components/parameters/lastNameFilter"
          },
          {
            "$ref": "#/components/parameters/mobileFilter"
          },
          {
            "$ref": "#/components/parameters/emailFilter"
          },
          {
            "$ref": "#/components/parameters/tagsFilter"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactsResponse"
                }
              }
            }
          },
          "4XX": {
            "description": "invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "5XX": {
            "description": "invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "sakari_auth": []
          }
        ],
        "x-code-samples": [
          {
            "lang": "CURL",
            "source": "curl -X GET \\\n  https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/contacts \\\n  -H 'Authorization: Bearer {{TOKEN}}'\n"
          },
          {
            "lang": "JavaScript",
            "source": "var request = require(\"request\");\nvar options = { method: 'GET',\n  url: 'https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/contacts',\n  headers:\n   { Authorization: 'Bearer {{TOKEN}}' } };\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "PHP",
            "source": "<?php\n  $request = new HttpRequest();\n  $request->setUrl('https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/contacts');\n  $request->setMethod(HTTP_METH_GET);\n\n  $request->setHeaders(array(\n    'Authorization' => 'Bearer {{TOKEN}}'\n  ));\n\n  try {\n    $response = $request->send();\n\n    echo $response->getBody();\n  } catch (HttpException $ex) {\n    echo $ex;\n  }\n"
          }
        ]
      },
      "post": {
        "tags": [
          "contacts"
        ],
        "summary": "Create contact",
        "operationId": "contacts.create",
        "parameters": [
          {
            "$ref": "#/components/parameters/accountId"
          },
          {
            "name": "mergeStrategy",
            "in": "query",
            "description": "Determines how existing contacts with matching mobile numbers are treated",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "append",
                "core",
                "remove"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContactRequest"
              }
            },
            "text/csv": {
              "schema": {
                "type": "string",
                "example": "country,firstName,lastName,email,mobile,jobTitle,Address,City,State,ZipCode US,Joe,Bloggs,joebloggs@sakari.co,123-456-7890,mover,123 Text Street,San Francisco,CA,12345\n"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ContactsResponse"
                    },
                    {
                      "$ref": "#/components/schemas/ContactUploadResponse"
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "sakari_auth": []
          }
        ],
        "x-code-samples": [
          {
            "lang": "CURL",
            "source": "curl -X POST \\\n  https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/contacts \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"firstName\": \"Chris\",\n  \"lastName\": \"Thomson\",\n  \"mobile\": {\n    \"number\": \"+1234567890\",\n    \"country\": \"US\"\n  }\n}'\n"
          },
          {
            "lang": "JavaScript",
            "source": "var request = require(\"request\");\nvar options = { method: 'POST',\n  url: 'https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/contacts',\n  headers: {\n     Authorization: 'Bearer {{TOKEN}}',\n     'Content-Type': 'application/json' },\n  body:\n   { firstName: 'Chris',\n     lastName: 'Thomson',\n     mobile: { number: '+1234567890', country: 'US' } },\n  json: true };\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "PHP",
            "source": "<?php\n  $request = new HttpRequest();\n  $request->setUrl('https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/contacts');\n  $request->setMethod(HTTP_METH_POST);\n\n  $request->setHeaders(array(\n    'Content-Type' => 'application/json'\n  ));\n\n  $request->setBody('{\n    \"firstName\": \"Chris\",\n    \"lastName\": \"Thomson\",\n    \"mobile\": {\n      \"number\": \"+1234567890\",\n      \"country\": \"US\"\n    }\n  }');\n\n  try {\n    $response = $request->send();\n\n    echo $response->getBody();\n  } catch (HttpException $ex) {\n    echo $ex;\n  }\n"
          }
        ]
      }
    },
    "/accounts/{accountId}/contacts/{contactId}": {
      "get": {
        "tags": [
          "contacts"
        ],
        "summary": "Fetch contact by ID",
        "operationId": "contacts.fetch",
        "parameters": [
          {
            "$ref": "#/components/parameters/accountId"
          },
          {
            "name": "contactId",
            "in": "path",
            "description": "ID of contact to return",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "sakari_auth": []
          }
        ],
        "x-code-samples": [
          {
            "lang": "CURL",
            "source": "curl -X GET \\\n  https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/contacts/{{CONTACT_ID}} \\\n  -H 'Authorization: Bearer {{TOKEN}}'\n"
          },
          {
            "lang": "JavaScript",
            "source": "var request = require(\"request\");\nvar options = { method: 'GET',\n  url: 'https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/contacts/{{CONTACT_ID}}',\n  headers:\n   { Authorization: 'Bearer {{TOKEN}}' } };\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "PHP",
            "source": "<?php\n  $request = new HttpRequest();\n  $request->setUrl('https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/contacts/{{CONTACT_ID}}');\n  $request->setMethod(HTTP_METH_GET);\n\n  $request->setHeaders(array(\n    'Authorization' => 'Bearer {{TOKEN}}'\n  ));\n\n  try {\n    $response = $request->send();\n\n    echo $response->getBody();\n  } catch (HttpException $ex) {\n    echo $ex;\n  }\n"
          }
        ]
      },
      "put": {
        "tags": [
          "contacts"
        ],
        "summary": "Updates a contact",
        "operationId": "contacts.update",
        "parameters": [
          {
            "$ref": "#/components/parameters/accountId"
          },
          {
            "name": "contactId",
            "in": "path",
            "description": "ID of contact",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "sakari_auth": []
          }
        ],
        "x-code-samples": [
          {
            "lang": "CURL",
            "source": "curl -X PUT \\\n  https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/contacts/{{CONTACT_ID}} \\\n  -H 'Authorization: Bearer {{TOKEN}}'' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"firstName\": \"Bob\",\n  \"lastName\": \"Thomson\",\n  \"mobile\": {\n    \"number\": \"+1234567890\",\n    \"country\": \"US\"\n  }\n}'\n"
          },
          {
            "lang": "JavaScript",
            "source": "var request = require(\"request\");\nvar options = { method: 'PUT',\n  url: 'https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/contacts/{{CONTACT_ID}}',\n  headers:\n   { 'Authorization': 'Bearer {{TOKEN}}',\n     'Content-Type': 'application/json' },\n  body:\n   { firstName: 'Bob',\n     lastName: 'Thomson',\n     mobile: { number: '+1234567890', country: 'US' } },\n  json: true };\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "PHP",
            "source": "<?php\n  $request = new HttpRequest();\n  $request->setUrl('https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/contacts/{{CONTACT_ID}}');\n  $request->setMethod(HTTP_METH_PUT);\n\n  $request->setHeaders(array(\n    'Authorization' => 'Bearer {{TOKEN}}',\n    'Content-Type' => 'application/json'\n  ));\n\n  $request->setBody('{\n    \"firstName\": \"Bob\",\n    \"lastName\": \"Thomson\",\n    \"mobile\": {\n      \"number\": \"+1234567890\",\n      \"country\": \"US\"\n    }\n  }');\n\n  try {\n    $response = $request->send();\n\n    echo $response->getBody();\n  } catch (HttpException $ex) {\n    echo $ex;\n  }\n"
          }
        ]
      },
      "delete": {
        "tags": [
          "contacts"
        ],
        "summary": "Deletes a contact",
        "operationId": "contacts.remove",
        "parameters": [
          {
            "$ref": "#/components/parameters/accountId"
          },
          {
            "name": "contactId",
            "in": "path",
            "description": "Contact id to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "sakari_auth": []
          }
        ],
        "x-code-samples": [
          {
            "lang": "CURL",
            "source": "curl -X DELETE \\\n  https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/contacts/{{CONTACT_ID}} \\\n  -H 'Authorization: Bearer {{TOKEN}}' \\\n  -H 'Content-Type: application/json' \\\n}'\n"
          },
          {
            "lang": "JavaScript",
            "source": "var request = require(\"request\");\nvar options = { method: 'DELETE',\n  url: 'https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/contacts/{{CONTACT_ID}}',\n  headers:\n   { 'Authorization': 'Bearer {{TOKEN}}',\n     'Content-Type': 'application/json' } };\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "PHP",
            "source": "<?php\n  $request = new HttpRequest();\n  $request->setUrl('https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/contacts/{{CONTACT_ID}}');\n  $request->setMethod(HTTP_METH_DELETE);\n\n  $request->setHeaders(array(\n    'Authorization' => 'Bearer {{TOKEN}}',\n    'Content-Type' => 'application/json'\n  ));\n\n  $request->setBody('{\n    \"firstName\": \"Chris\",\n    \"lastName\": \"Thomson\",\n    \"mobile\": {\n      \"number\": \"+1234567890\",\n      \"country\": \"US\"\n    }\n  }');\n\n  try {\n    $response = $request->send();\n\n    echo $response->getBody();\n  } catch (HttpException $ex) {\n    echo $ex;\n  }\n"
          }
        ]
      }
    },
    "/accounts/{accountId}/messages": {
      "get": {
        "tags": [
          "messages"
        ],
        "summary": "Fetch messages",
        "operationId": "messages.fetchAll",
        "parameters": [
          {
            "$ref": "#/components/parameters/accountId"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/contactIdFilter"
          },
          {
            "$ref": "#/components/parameters/conversationIdFilter"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessagesResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "sakari_auth": []
          }
        ],
        "x-code-samples": [
          {
            "lang": "CURL",
            "source": "curl -X GET \\\n  https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/messages \\\n  -H 'Authorization: Bearer {{TOKEN}}'\n"
          },
          {
            "lang": "JavaScript",
            "source": "var settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/messages\",\n  \"method\": \"GET\",\n  \"headers\": {\n    \"Authorization\": \"Bearer {{TOKEN}}\"\n  }\n}\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});\n"
          },
          {
            "lang": "PHP",
            "source": "<?php\n  $request = new HttpRequest();\n  $request->setUrl('https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/messages');\n  $request->setMethod(HTTP_METH_GET);\n\n  $request->setHeaders(array(\n    'Authorization' => 'Bearer {{TOKEN}}'\n  ));\n\n  try {\n    $response = $request->send();\n\n    echo $response->getBody();\n  } catch (HttpException $ex) {\n    echo $ex;\n  }\n"
          }
        ]
      },
      "post": {
        "tags": [
          "messages"
        ],
        "summary": "Send Messages",
        "operationId": "messages.send",
        "parameters": [
          {
            "$ref": "#/components/parameters/accountId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendMessagesRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SendMessagesResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "sakari_auth": []
          }
        ],
        "x-code-samples": [
          {
            "lang": "CURL",
            "source": "curl -X POST \\\n  https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/messages \\\n  -H 'Accept: application/json' \\\n  -H 'Authorization: Bearer {{TOKEN}}' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"contacts\": [{\n    \"mobile\": {\n      \"number\": \"+1234567890\",\n      \"country\": \"US\"\n    }\n  }],\n  \"template\": \"Congratulations! You just sent your first message\"\n} '\n"
          },
          {
            "lang": "JavaScript",
            "source": "var request = require(\"request\");\nvar options = { method: 'POST',\n  url: 'https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/messages',\n  headers:\n   { 'Authorization': 'Bearer {{TOKEN}}',\n     Accept: 'application/json',\n     'Content-Type': 'application/json' },\n  body:\n   { contacts: [ { mobile: { number: '+1234567890', country: 'US' } } ],\n     template: 'Congratulations! You just sent your first message' },\n  json: true };\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "PHP",
            "source": "<?php\n  $request = new HttpRequest();\n  $request->setUrl('https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/messages');\n  $request->setMethod(HTTP_METH_POST);\n\n  $request->setHeaders(array(\n    'Authorization' => 'Bearer {{TOKEN}}',\n    'Accept' => 'application/json',\n    'Content-Type' => 'application/json'\n  ));\n\n  $request->setBody('{\n    \"contacts\": [{\n      \"mobile\": {\n        \"number\": \"+1234567890\",\n        \"country\": \"US\"\n      }\n    }],\n    \"template\": \"Congratulations! You just sent your first message\"\n  } ');\n\n  try {\n    $response = $request->send();\n\n    echo $response->getBody();\n  } catch (HttpException $ex) {\n    echo $ex;\n  }\n"
          }
        ]
      }
    },
    "/accounts/{accountId}/messages/{messageId}": {
      "get": {
        "tags": [
          "messages"
        ],
        "summary": "Fetch message by id",
        "description": "Returns a single messag",
        "operationId": "messages.fetch",
        "parameters": [
          {
            "$ref": "#/components/parameters/accountId"
          },
          {
            "name": "messageId",
            "in": "path",
            "description": "ID of message to return",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "sakari_auth": []
          }
        ],
        "x-code-samples": [
          {
            "lang": "CURL",
            "source": "curl -X GET \\\n  https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/messages/{{MESSAGE_ID}} \\\n  -H 'Authorization: Bearer {{TOKEN}}'\n"
          },
          {
            "lang": "JavaScript",
            "source": "var request = require(\"request\");\nvar options = { method: 'GET',\n  url: 'https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/messages/{{MESSAGE_ID}}',\n  headers:\n   { 'Authorization': 'Bearer {{TOKEN}}' } };\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "PHP",
            "source": "<?php\n  $request = new HttpRequest();\n  $request->setUrl('https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/messages/{{MESSAGE_ID}}');\n  $request->setMethod(HTTP_METH_GET);\n\n  $request->setHeaders(array(\n    'Authorization' => 'Bearer {{TOKEN}}'\n  ));\n\n  try {\n    $response = $request->send();\n\n    echo $response->getBody();\n  } catch (HttpException $ex) {\n    echo $ex;\n  }\n"
          }
        ]
      }
    },
    "/accounts/{accountId}/templates": {
      "get": {
        "tags": [
          "templates"
        ],
        "summary": "Fetch templates",
        "operationId": "templates.fetchAll",
        "parameters": [
          {
            "$ref": "#/components/parameters/accountId"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/nameFilter"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TemplatesResponse"
                }
              }
            }
          },
          "4XX": {
            "description": "invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "5XX": {
            "description": "invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "sakari_auth": []
          }
        ],
        "x-code-samples": [
          {
            "lang": "CURL",
            "source": "curl -X GET \\\n  https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/templates \\\n  -H 'Authorization: Bearer {{TOKEN}}'\n"
          },
          {
            "lang": "JavaScript",
            "source": "var request = require(\"request\");\nvar options = { method: 'GET',\n  url: 'https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/templates',\n  headers:\n   { 'Authorization': 'Bearer {{TOKEN}}' } };\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "PHP",
            "source": "<?php\n  $request = new HttpRequest();\n  $request->setUrl('https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/templates');\n  $request->setMethod(HTTP_METH_GET);\n\n  $request->setHeaders(array(\n    'Authorization' => 'Bearer {{TOKEN}}'\n  ));\n\n  try {\n    $response = $request->send();\n\n    echo $response->getBody();\n  } catch (HttpException $ex) {\n    echo $ex;\n  }\n"
          }
        ]
      },
      "post": {
        "tags": [
          "templates"
        ],
        "summary": "Create template",
        "operationId": "templates.create",
        "parameters": [
          {
            "$ref": "#/components/parameters/accountId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TemplateRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TemplatesResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "sakari_auth": []
          }
        ],
        "x-code-samples": [
          {
            "lang": "CURL",
            "source": "curl -X POST \\\n  https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/templates \\\n  -H 'Authorization: Bearer {{TOKEN}}' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"name\": \"Test Template\",\n  \"template\": \"Hi {{ firstName }}, Welcome to Sakari!\",\n  \"type\": \"SMS\"\n}'\n"
          },
          {
            "lang": "JavaScript",
            "source": "var request = require(\"request\");\nvar options = { method: 'POST',\n  url: 'https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/templates',\n  headers:\n   { 'Content-Type': 'application/json' },\n  body:\n   { name: 'Test Template',\n     template: 'Hi {{ firstName }}, Welcome to Sakari!',\n     type: 'SMS' },\n  json: true };\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "PHP",
            "source": "<?php\n  $request = new HttpRequest();\n  $request->setUrl('https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/templates');\n  $request->setMethod(HTTP_METH_POST);\n\n  $request->setHeaders(array(\n    'Authorization' => 'Bearer {{TOKEN}}',\n    'Content-Type' => 'application/json'\n  ));\n\n  $request->setBody('{\n    \"name\": \"Test Template\",\n    \"template\": \"Hi {{ firstName }}, Welcome to Sakari!\",\n    \"type\": \"SMS\"\n  }');\n\n  try {\n    $response = $request->send();\n\n    echo $response->getBody();\n  } catch (HttpException $ex) {\n    echo $ex;\n  }\n"
          }
        ]
      }
    },
    "/accounts/{accountId}/templates/{templateId}": {
      "get": {
        "tags": [
          "templates"
        ],
        "summary": "Fetch template by ID",
        "operationId": "templates.fetch",
        "parameters": [
          {
            "$ref": "#/components/parameters/accountId"
          },
          {
            "name": "templateId",
            "in": "path",
            "description": "ID of template to return",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TemplateResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "sakari_auth": []
          }
        ],
        "x-code-samples": [
          {
            "lang": "CURL",
            "source": "curl -X GET \\\n  https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/templates/{{TEMPLATE_ID}} \\\n  -H 'Authorization: Bearer {{TOKEN}}'\n"
          },
          {
            "lang": "JavaScript",
            "source": "var request = require(\"request\");\nvar options = { method: 'GET',\n  url: 'https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/templates/{{TEMPLATE_ID}}',\n  headers:\n   { Authorization: 'Bearer {{TOKEN}}' } };\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "PHP",
            "source": "<?php\n  $request = new HttpRequest();\n  $request->setUrl('https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/templates/{{TEMPLATE_ID}}');\n  $request->setMethod(HTTP_METH_GET);\n\n  $request->setHeaders(array(\n    'Authorization' => 'Bearer {{TOKEN}}'\n  ));\n\n  try {\n    $response = $request->send();\n\n    echo $response->getBody();\n  } catch (HttpException $ex) {\n    echo $ex;\n  }\n"
          }
        ]
      },
      "put": {
        "tags": [
          "templates"
        ],
        "summary": "Updates a template",
        "operationId": "templates.update",
        "parameters": [
          {
            "$ref": "#/components/parameters/accountId"
          },
          {
            "name": "templateId",
            "in": "path",
            "description": "ID of template",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TemplateResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "sakari_auth": []
          }
        ],
        "x-code-samples": [
          {
            "lang": "CURL",
            "source": "curl -X PUT \\\n  https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/templates/{{TEMPLATE_ID}} \\\n  -H 'Authorization: Bearer {{TOKEN}}' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"name\": \"Test Template\",\n  \"template\": \"Hi {{ firstName }}, Welcome to Sakari!\",\n  \"type\": \"SMS\"\n}'\n"
          },
          {
            "lang": "JavaScript",
            "source": "var request = require(\"request\");\n\nvar options = { method: 'PUT',\n  url: 'https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/templates/{{TEMPLATE_ID}}',\n  headers:\n   { Authorization: 'Bearer {{TOKEN}}',\n     'Content-Type': 'application/json' },\n  body:\n   { name: 'Test Template',\n     template: 'Hi {{ firstName }}, Welcome to Sakari!',\n     type: 'SMS' },\n  json: true };\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "PHP",
            "source": "<?php\n  $request = new HttpRequest();\n  $request->setUrl('https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/templates/{{TEMPLATE_ID}}');\n  $request->setMethod(HTTP_METH_PUT);\n\n  $request->setHeaders(array(\n    'Authorization' => 'Bearer {{TOKEN}}',\n    'Content-Type' => 'application/json'\n  ));\n\n  $request->setBody('{\n    \"name\": \"Test Template\",\n    \"template\": \"Hi {{ firstName }}, Welcome to Sakari!\",\n    \"type\": \"SMS\"\n  }');\n\n  try {\n    $response = $request->send();\n\n    echo $response->getBody();\n  } catch (HttpException $ex) {\n    echo $ex;\n  }\n"
          }
        ]
      },
      "delete": {
        "tags": [
          "templates"
        ],
        "summary": "Deletes a template",
        "operationId": "templates.remove",
        "parameters": [
          {
            "$ref": "#/components/parameters/accountId"
          },
          {
            "name": "templateId",
            "in": "path",
            "description": "Template id to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "sakari_auth": []
          }
        ],
        "x-code-samples": [
          {
            "lang": "CURL",
            "source": "curl -X DELETE \\\n  https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/templates/{{TEMPLATE_ID}} \\\n  -H 'Authorization: Bearer {{TOKEN}}'\n"
          },
          {
            "lang": "JavaScript",
            "source": "var request = require(\"request\");\n\nvar options = { method: 'DELETE',\n  url: 'https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/templates/{{TEMPLATE_ID}}',\n  headers:\n   { Authorization: 'Bearer {{TOKEN}}' } };\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "PHP",
            "source": "<?php\n  $request = new HttpRequest();\n  $request->setUrl('https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/templates/{{TEMPLATE_ID}}');\n  $request->setMethod(HTTP_METH_DELETE);\n\n  $request->setHeaders(array(\n    'Authorization' => 'Bearer {{TOKEN}}'\n  ));\n\n  try {\n    $response = $request->send();\n\n    echo $response->getBody();\n  } catch (HttpException $ex) {\n    echo $ex;\n  }\n"
          }
        ]
      }
    },
    "/accounts/{accountId}/campaigns": {
      "get": {
        "tags": [
          "campaigns"
        ],
        "summary": "Fetch campaigns",
        "operationId": "campaigns.fetchAll",
        "parameters": [
          {
            "$ref": "#/components/parameters/accountId"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/nameFilter"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CampaignsResponse"
                }
              }
            }
          },
          "4XX": {
            "description": "invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "5XX": {
            "description": "invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "sakari_auth": []
          }
        ],
        "x-code-samples": [
          {
            "lang": "CURL",
            "source": "curl -X GET \\\n  https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/campaigns \\\n  -H 'Authorization: Bearer {{TOKEN}}'\n"
          },
          {
            "lang": "JavaScript",
            "source": "var request = require(\"request\");\nvar options = { method: 'GET',\n  url: 'https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/campaigns',\n  headers:\n   { Authorization: 'Bearer {{TOKEN}}' } };\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "PHP",
            "source": "<?php\n  $request = new HttpRequest();\n  $request->setUrl('https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/campaigns');\n  $request->setMethod(HTTP_METH_GET);\n\n  $request->setHeaders(array(\n    'Authorization' => 'Bearer {{TOKEN}}'\n  ));\n\n  try {\n    $response = $request->send();\n\n    echo $response->getBody();\n  } catch (HttpException $ex) {\n    echo $ex;\n  }\n"
          }
        ]
      },
      "post": {
        "tags": [
          "campaigns"
        ],
        "summary": "Create campaign",
        "operationId": "campaigns.create",
        "parameters": [
          {
            "$ref": "#/components/parameters/accountId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CampaignRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CampaignResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "sakari_auth": []
          }
        ],
        "x-code-samples": [
          {
            "lang": "CURL",
            "source": "curl -X POST \\\n  https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/campaigns \\\n  -H 'Authorization: Bearer {{TOKEN}}' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"name\": \"Marketing Campaign\",\n  \"trigger\": {\n    \"code\":\"M\"\n  },\n  \"template\":\"Hi {{{contact.firstName}}}\",\n  \"reporting\":{\"when\":\"NoReport\"}\n}'\n"
          },
          {
            "lang": "JavaScript",
            "source": "var request = require(\"request\");\nvar options = { method: 'POST',\n  url: 'https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/campaigns',\n  headers:\n   { Authorization: 'Bearer {{TOKEN}}',\n     'Content-Type': 'application/json' },\n  body:\n   { name: 'Marketing Campaign',\n     trigger: { code: 'M' },\n     template: 'Hi {{{contact.firstName}}}',\n     reporting: { when: 'NoReport' } },\n  json: true };\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "PHP",
            "source": "<?php\n  $request = new HttpRequest();\n  $request->setUrl('https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/campaigns');\n  $request->setMethod(HTTP_METH_POST);\n\n  $request->setHeaders(array(\n    'Authorization' => 'Bearer {{TOKEN}}',\n    'Content-Type' => 'application/json'\n  ));\n\n  $request->setBody('{\n    \"name\": \"Marketing Campaign\",\n    \"trigger\": {\n      \"code\":\"M\"\n    },\n    \"template\":\"Hi {{{contact.firstName}}}\",\n    \"reporting\":{\"when\":\"NoReport\"}\n  }');\n\n  try {\n    $response = $request->send();\n\n    echo $response->getBody();\n  } catch (HttpException $ex) {\n    echo $ex;\n  }\n"
          }
        ]
      }
    },
    "/accounts/{accountId}/campaigns/{campaignId}": {
      "get": {
        "tags": [
          "campaigns"
        ],
        "summary": "Fetch campaign by ID",
        "operationId": "campaigns.fetch",
        "parameters": [
          {
            "$ref": "#/components/parameters/accountId"
          },
          {
            "name": "campaignId",
            "in": "path",
            "description": "ID of campaign to return",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CampaignResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "sakari_auth": []
          }
        ],
        "x-code-samples": [
          {
            "lang": "CURL",
            "source": "curl -X GET \\\n  https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/campaigns/{{CAMPAIGN_ID}} \\\n  -H 'Authorization: Bearer {{TOKEN}}'\n"
          },
          {
            "lang": "JavaScript",
            "source": "var request = require(\"request\");\nvar options = { method: 'GET',\n  url: 'https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/campaigns/{{CAMPAIGN_ID}}',\n  headers:\n   { Authorization: 'Bearer {{TOKEN}}' } };\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "PHP",
            "source": "<?php\n  $request = new HttpRequest();\n  $request->setUrl('https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/campaigns/{{CAMPAIGN_ID}}');\n  $request->setMethod(HTTP_METH_GET);\n\n  $request->setHeaders(array(\n    'Authorization' => 'Bearer {{TOKEN}}'\n  ));\n\n  try {\n    $response = $request->send();\n\n    echo $response->getBody();\n  } catch (HttpException $ex) {\n    echo $ex;\n  }\n"
          }
        ]
      },
      "put": {
        "tags": [
          "campaigns"
        ],
        "summary": "Updates a campaign",
        "operationId": "campaigns.update",
        "parameters": [
          {
            "$ref": "#/components/parameters/accountId"
          },
          {
            "name": "campaignId",
            "in": "path",
            "description": "ID of campaign",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CampaignResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "sakari_auth": []
          }
        ],
        "x-code-samples": [
          {
            "lang": "CURL",
            "source": "curl -X POST \\\n  https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/campaigns/{{CAMPAIGN_ID}} \\\n  -H 'Authorization: Bearer {{TOKEN}}' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"name\": \"Marketing Campaign\",\n  \"trigger\": {\n    \"code\":\"M\"\n  },\n  \"template\":\"Hi {{{contact.firstName}}}\",\n  \"reporting\":{\"when\":\"NoReport\"}\n}'\n"
          },
          {
            "lang": "JavaScript",
            "source": "var request = require(\"request\");\nvar options = { method: 'POST',\n  url: 'https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/campaigns/{{CAMPAIGN_ID}}',\n  headers:\n   { Authorization: 'Bearer {{TOKEN}}',\n     'Content-Type': 'application/json' },\n  body:\n   { name: 'Marketing Campaign',\n     trigger: { code: 'M' },\n     template: 'Hi {{{contact.firstName}}}',\n     reporting: { when: 'NoReport' } },\n  json: true };\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "PHP",
            "source": "<?php\n  $request = new HttpRequest();\n  $request->setUrl('https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/campaigns/{{CAMPAIGN_ID}}');\n  $request->setMethod(HTTP_METH_POST);\n\n  $request->setHeaders(array(\n    'Authorization' => 'Bearer {{TOKEN}}',\n    'Content-Type' => 'application/json'\n  ));\n\n  $request->setBody('{\n    \"name\": \"Marketing Campaign\",\n    \"trigger\": {\n      \"code\":\"M\"\n    },\n    \"template\":\"Hi {{{contact.firstName}}}\",\n    \"reporting\":{\"when\":\"NoReport\"}\n  }');\n\n  try {\n    $response = $request->send();\n\n    echo $response->getBody();\n  } catch (HttpException $ex) {\n    echo $ex;\n  }\n"
          }
        ]
      },
      "delete": {
        "tags": [
          "campaigns"
        ],
        "summary": "Deletes a campaign",
        "operationId": "campaigns.remove",
        "parameters": [
          {
            "$ref": "#/components/parameters/accountId"
          },
          {
            "name": "campaignId",
            "in": "path",
            "description": "Campaign id to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "sakari_auth": []
          }
        ],
        "x-code-samples": [
          {
            "lang": "CURL",
            "source": "curl -X DELETE \\\n  https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/campaigns/{{CAMPAIGN_ID}} \\\n  -H 'Authorization: Bearer {{TOKEN}}'\n"
          },
          {
            "lang": "JavaScript",
            "source": "var request = require(\"request\");\nvar options = { method: 'DELETE',\n  url: 'https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/campaigns/{{CAMPAIGN_ID}}',\n  headers:\n   { Authorization: 'Bearer {{TOKEN}}' } };\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "PHP",
            "source": "<?php\n  $request = new HttpRequest();\n  $request->setUrl('https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/campaigns/{{CAMPAIGN_ID}}');\n  $request->setMethod(HTTP_METH_DELETE);\n\n  $request->setHeaders(array(\n    'Authorization' => 'Bearer {{TOKEN}}'\n  ));\n\n  try {\n    $response = $request->send();\n\n    echo $response->getBody();\n  } catch (HttpException $ex) {\n    echo $ex;\n  }\n"
          }
        ]
      }
    },
    "/accounts/{accountId}/conversations": {
      "get": {
        "tags": [
          "conversations"
        ],
        "summary": "Fetch conversations",
        "operationId": "conversations.fetchAll",
        "parameters": [
          {
            "$ref": "#/components/parameters/accountId"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/limit"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConversationsResponse"
                }
              }
            }
          },
          "4XX": {
            "description": "invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "5XX": {
            "description": "invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "sakari_auth": []
          }
        ],
        "x-code-samples": [
          {
            "lang": "CURL",
            "source": "curl -X GET \\\n  https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/conversations \\\n  -H 'Authorization: Bearer {{TOKEN}}'\n"
          },
          {
            "lang": "JavaScript",
            "source": "var request = require(\"request\");\nvar options = { method: 'GET',\n  url: 'https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/conversations',\n  headers:\n   { Authorization: 'Bearer {{TOKEN}}' } };\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "PHP",
            "source": "<?php\n  $request = new HttpRequest();\n  $request->setUrl('https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/conversations');\n  $request->setMethod(HTTP_METH_GET);\n\n  $request->setHeaders(array(\n    'Authorization' => 'Bearer {{TOKEN}}'\n  ));\n\n  try {\n    $response = $request->send();\n\n    echo $response->getBody();\n  } catch (HttpException $ex) {\n    echo $ex;\n  }\n"
          }
        ]
      }
    },
    "/accounts/{accountId}/conversations/{conversationId}": {
      "get": {
        "tags": [
          "conversations"
        ],
        "summary": "Fetch conversation by ID",
        "operationId": "conversations.fetch",
        "parameters": [
          {
            "$ref": "#/components/parameters/accountId"
          },
          {
            "name": "conversationId",
            "in": "path",
            "description": "ID of template to return",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConversationResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "sakari_auth": []
          }
        ],
        "x-code-samples": [
          {
            "lang": "CURL",
            "source": "curl -X GET \\\n  https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/conversations/{{CONVERSATION_ID}} \\\n  -H 'Authorization: Bearer {{TOKEN}}'\n"
          },
          {
            "lang": "JavaScript",
            "source": "var request = require(\"request\");\nvar options = { method: 'GET',\n  url: 'https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/conversations/{{CONVERSATION_ID}}',\n  headers:\n   { Authorization: 'Bearer {{TOKEN}}' } };\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "PHP",
            "source": "<?php\n  $request = new HttpRequest();\n  $request->setUrl('https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/conversations/{{CONVERSATION_ID}}');\n  $request->setMethod(HTTP_METH_GET);\n\n  $request->setHeaders(array(\n    'Authorization' => 'Bearer {{TOKEN}}'\n  ));\n\n  try {\n    $response = $request->send();\n\n    echo $response->getBody();\n  } catch (HttpException $ex) {\n    echo $ex;\n  }\n"
          }
        ]
      }
    },
    "/accounts/{accountId}/conversations/{conversationId}/close": {
      "put": {
        "tags": [
          "conversations"
        ],
        "summary": "Closes a conversation",
        "operationId": "conversations.close",
        "parameters": [
          {
            "$ref": "#/components/parameters/accountId"
          },
          {
            "name": "conversationId",
            "in": "path",
            "description": "ID of conversation",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConversationResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "sakari_auth": []
          }
        ],
        "x-code-samples": [
          {
            "lang": "CURL",
            "source": "curl -X GET \\\n  https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/conversations/{{CONVERSATION_ID}}/close \\\n  -H 'Authorization: Bearer {{TOKEN}}'\n"
          },
          {
            "lang": "JavaScript",
            "source": "var request = require(\"request\");\nvar options = { method: 'GET',\n  url: 'https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/conversations/{{CONVERSATION_ID}}/close',\n  headers:\n   { Authorization: 'Bearer {{TOKEN}}' } };\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "PHP",
            "source": "<?php\n  $request = new HttpRequest();\n  $request->setUrl('https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/conversations/{{CONVERSATION_ID}}/close');\n  $request->setMethod(HTTP_METH_PUT);\n\n  $request->setHeaders(array(\n    'Authorization' => 'Bearer {{TOKEN}}',\n    'Content-Type' => 'application/json'\n  ));\n\n  $request->setBody('{\n    \"name\": \"Test Template\",\n    \"template\": \"Hi {{ firstName }}, Welcome to Sakari!\",\n    \"type\": \"SMS\"\n  }');\n\n  try {\n    $response = $request->send();\n\n    echo $response->getBody();\n  } catch (HttpException $ex) {\n    echo $ex;\n  }\n"
          }
        ]
      }
    },
    "/tools/sharefile": {
      "post": {
        "tags": [
          "tools"
        ],
        "summary": "Share file - use to host a file and generate a short link to be used directly in a message or as a link to media for a MMS",
        "operationId": "tools.shareFile",
        "requestBody": {
          "required": true,
          "content": {
            "application/octet-stream": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            },
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "media": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShareFileResponse"
                }
              }
            }
          },
          "4XX": {
            "description": "invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "5XX": {
            "description": "invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "sakari_auth": []
          }
        ]
      }
    },
    "/accounts/{accountId}/webhooks": {
      "get": {
        "tags": [
          "webhooks"
        ],
        "summary": "Fetch active webhooks",
        "description": "When messages are acknowledge by carriers, a notification is sent to the specified URL",
        "operationId": "webhooks.fetchAll",
        "parameters": [
          {
            "$ref": "#/components/parameters/accountId"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhooksResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "sakari_auth": []
          }
        ],
        "x-code-samples": [
          {
            "lang": "CURL",
            "source": "curl -X GET \\\n  https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/webhooks \\\n  -H 'Authorization: Bearer {{TOKEN}}' \\\n  -d '{\n  \"url\": \"https://requestbin.io\"\n}'\n"
          },
          {
            "lang": "JavaScript",
            "source": "var settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/webhooks\",\n  \"method\": \"GET\",\n  \"headers\": {\n    \"Authorization\": \"Bearer {{TOKEN}}\"\n  },\n  \"data\": \"{\\n\\t\\\"url\\\": \\\"https://requestbin.io\\\"\\n}\"\n}\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});\n"
          },
          {
            "lang": "PHP",
            "source": "<?php\n  $request = new HttpRequest();\n  $request->setUrl('https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/webhooks');\n  $request->setMethod(HTTP_METH_GET);\n\n  $request->setHeaders(array(\n    'Authorization' => 'Bearer {{TOKEN}}'\n  ));\n\n  $request->setBody('{\n    \"url\": \"https://requestbin.io\"\n  }');\n\n  try {\n    $response = $request->send();\n\n    echo $response->getBody();\n  } catch (HttpException $ex) {\n    echo $ex;\n  }\n"
          }
        ]
      },
      "post": {
        "tags": [
          "webhooks"
        ],
        "summary": "Subscribe to message events",
        "description": "When messages are acknowledge by carriers, a notification is sent to the specified URL",
        "operationId": "webhooks.subscribe",
        "parameters": [
          {
            "$ref": "#/components/parameters/accountId"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "url": {
                    "type": "string",
                    "format": "uri",
                    "example": "https://myserver.com/send/callback/here"
                  },
                  "eventTypes": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "required": [
                  "callbackUrl"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "sakari_auth": []
          }
        ],
        "x-code-samples": [
          {
            "lang": "CURL",
            "source": "curl -X POST \\\n  https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/webhooks \\\n  -H 'Authorization: Bearer {{TOKEN}}' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"url\": \"https://requestbin.io\",\n  \"eventTypes\": [\"message-received\"]\n}'\n"
          },
          {
            "lang": "JavaScript",
            "source": "var request = require(\"request\");\nvar options = { method: 'POST',\n  url: 'https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/webhooks',\n  headers:\n   { Authorization: 'Bearer {{TOKEN}}',\n     'Content-Type': 'application/json' },\n  body: { url: 'https://requestbin.io', eventTypes: [ 'message-received' ] },\n  json: true };\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "PHP",
            "source": "<?php\n  $request = new HttpRequest();\n  $request->setUrl('https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/webhooks');\n  $request->setMethod(HTTP_METH_POST);\n\n  $request->setHeaders(array(\n    'Authorization' => 'Bearer {{TOKEN}}',\n    'Content-Type' => 'application/json'\n  ));\n\n  $request->setBody('{\n    \"url\": \"https://requestbin.io\",\n    \"eventTypes\": [\"message-received\"]\n  }');\n\n  try {\n    $response = $request->send();\n\n    echo $response->getBody();\n  } catch (HttpException $ex) {\n    echo $ex;\n  }\n"
          }
        ]
      }
    },
    "/accounts/{accountId}/webhooks/{url}": {
      "delete": {
        "tags": [
          "webhooks"
        ],
        "summary": "Unsubscribe to message events",
        "description": "Delete subscription for receiving notifications",
        "operationId": "webhooks.unsubscribe",
        "parameters": [
          {
            "$ref": "#/components/parameters/accountId"
          },
          {
            "name": "url",
            "in": "path",
            "description": "Account to apply operations to",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "sakari_auth": []
          }
        ],
        "x-code-samples": [
          {
            "lang": "CURL",
            "source": "curl -X DELETE \\\n  https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/webhooks/{{URL_ENCODED CALLBACK_URL}} \\\n  -H 'Authorization: Bearer {{TOKEN}}'\n"
          },
          {
            "lang": "JavaScript",
            "source": "var request = require(\"request\");\nvar options = { method: 'DELETE',\n  url: 'https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/webhooks/{{URL_ENCODED CALLBACK_URL}}',\n  headers:\n   { Authorization: 'Bearer {{TOKEN}}' };\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "PHP",
            "source": "<?php\n  $request = new HttpRequest();\n  $request->setUrl('https://api.sakari.io/v1/accounts/{{ACCOUNT_ID}}/webhooks/{{URL_ENCODED CALLBACK_URL}}');\n  $request->setMethod(HTTP_METH_DELETE);\n\n  $request->setHeaders(array(\n    'Authorization' => 'Bearer {{TOKEN}}'\n  ));\n\n  try {\n    $response = $request->send();\n\n    echo $response->getBody();\n  } catch (HttpException $ex) {\n    echo $ex;\n  }\n"
          }
        ],
        "callbacks": {
          "event": {
            "{$request.body#/callbackUrl}": {
              "post": {
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/Event"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "Your server returns this code if it accepts the callback"
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "externalDocs": {
    "description": "Find out more about Sakari",
    "url": "https://sakari.io"
  },
  "components": {
    "parameters": {
      "accountId": {
        "name": "accountId",
        "in": "path",
        "description": "Account to apply operations to",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "offset": {
        "name": "offset",
        "in": "query",
        "description": "Results to skip when paginating through a result set",
        "required": false,
        "schema": {
          "type": "integer",
          "format": "int64",
          "minimum": 0
        }
      },
      "limit": {
        "name": "limit",
        "in": "query",
        "description": "Maximum number of results to return",
        "required": false,
        "schema": {
          "type": "integer",
          "format": "int64",
          "minimum": 1,
          "maximum": 100
        }
      },
      "contactIdFilter": {
        "name": "contactId",
        "in": "query",
        "description": "ID of contact",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "firstNameFilter": {
        "name": "firstName",
        "in": "query",
        "description": "Filter by first name or part of",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "lastNameFilter": {
        "name": "lastName",
        "in": "query",
        "description": "Filter by last name or part of",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "nameFilter": {
        "name": "name",
        "in": "query",
        "description": "Filter by name or part of",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "mobileFilter": {
        "name": "mobile",
        "in": "query",
        "description": "Filter by mobile or part of",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "emailFilter": {
        "name": "email",
        "in": "query",
        "description": "Filter by email or part of",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "tagsFilter": {
        "name": "tags",
        "in": "query",
        "description": "Filter by tag(s)",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "conversationIdFilter": {
        "name": "conversationId",
        "in": "query",
        "description": "ID of conversation",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "firstName": {
        "name": "firstName",
        "in": "query",
        "description": "First name of contact",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "lastName": {
        "name": "lastName",
        "in": "query",
        "description": "Last name of contact",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "mobile": {
        "name": "mobile",
        "in": "query",
        "description": "Mobile of contact",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "email": {
        "name": "email",
        "in": "query",
        "description": "Email of contact",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "tags": {
        "name": "tags",
        "in": "query",
        "description": "Tag of contact",
        "required": false,
        "schema": {
          "type": "string"
        }
      }
    },
    "schemas": {
      "TokenRequest": {
        "type": "object",
        "properties": {
          "grant_type": {
            "type": "string",
            "example": "client_credentials"
          },
          "client_id": {
            "type": "string",
            "example": "00000000-0000-0000-0000-00000000000"
          },
          "client_secret": {
            "type": "string",
            "example": "00000000-0000-0000-0000-00000000000"
          }
        }
      },
      "TokenResponse": {
        "type": "object",
        "properties": {
          "access_token": {
            "type": "string"
          },
          "token_type": {
            "type": "string"
          }
        }
      },
      "AccountId": {
        "type": "string"
      },
      "EventType": {
        "type": "string",
        "example": "message",
        "enum": [
          "account",
          "messageStatus",
          "messageIncoming"
        ]
      },
      "Updated": {
        "type": "object",
        "properties": {
          "at": {
            "type": "string",
            "format": "date-time"
          },
          "by": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "firstName": {
                "type": "string",
                "example": "Joe"
              },
              "lastName": {
                "type": "string",
                "example": "Bloggs"
              }
            }
          }
        }
      },
      "Error": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "example": "CONT-010"
          },
          "description": {
            "type": "string",
            "example": "Contact has requested no further communication"
          }
        }
      },
      "PhoneNumber": {
        "type": "object",
        "properties": {
          "country": {
            "type": "string"
          },
          "number": {
            "type": "string"
          },
          "active": {
            "type": "boolean"
          }
        }
      },
      "ContactIdentifiers": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "email": {
            "type": "string",
            "example": "chris@sakari.io"
          },
          "firstName": {
            "type": "string",
            "example": "Chris"
          },
          "lastName": {
            "type": "string",
            "example": "Bloggs"
          },
          "mobile": {
            "type": "object",
            "properties": {
              "country": {
                "type": "string"
              },
              "number": {
                "type": "string",
                "example": "123-456-7890"
              }
            }
          }
        }
      },
      "ContactRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ContactIdentifiers"
          },
          {
            "type": "object",
            "properties": {
              "tags": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Tag"
                }
              },
              "attributes": {
                "type": "object"
              }
            }
          }
        ]
      },
      "Contact": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ContactRequest"
          },
          {
            "type": "object",
            "properties": {
              "valid": {
                "type": "boolean"
              },
              "error": {
                "$ref": "#/components/schemas/Error"
              },
              "created": {
                "$ref": "#/components/schemas/Updated"
              },
              "updated": {
                "$ref": "#/components/schemas/Updated"
              }
            }
          }
        ]
      },
      "Tag": {
        "type": "object",
        "properties": {
          "tag": {
            "type": "string"
          },
          "visible": {
            "type": "boolean"
          }
        }
      },
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "default": false,
            "example": false
          },
          "error": {
            "type": "object",
            "properties": {
              "code": {
                "type": "string",
                "example": "CONV-001"
              },
              "message": {
                "type": "string",
                "example": "Invalid conversation id"
              }
            }
          }
        }
      },
      "PaginatedResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "pagination": {
            "type": "object",
            "properties": {
              "totalCount": {
                "type": "integer"
              },
              "limit": {
                "type": "integer"
              },
              "offset": {
                "type": "integer"
              }
            }
          },
          "error": {
            "type": "object",
            "properties": {
              "code": {
                "type": "string"
              },
              "message": {
                "type": "string"
              }
            }
          }
        }
      },
      "ContactsResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PaginatedResponse"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Contact"
                }
              }
            }
          }
        ]
      },
      "ContactResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "default": true
          },
          "data": {
            "$ref": "#/components/schemas/Contact"
          }
        }
      },
      "ContactUploadResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "default": true
          },
          "data": {
            "type": "object",
            "properties": {
              "contacts": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Contact"
                },
                "description": "Uploaded contacts"
              },
              "errors": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Contact"
                },
                "description": "Contacts that failed validation"
              },
              "submitted": {
                "type": "integer"
              },
              "inserted": {
                "type": "integer"
              },
              "updated": {
                "type": "integer"
              },
              "success": {
                "type": "integer"
              }
            }
          }
        }
      },
      "SendMessagesRequest": {
        "type": "object",
        "properties": {
          "conversations": {
            "type": "array",
            "description": "List of conversation ids to send messages to",
            "items": {
              "type": "string"
            }
          },
          "contacts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContactRequest"
            }
          },
          "filters": {
            "type": "object",
            "properties": {
              "tags": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "attributes": {
                "type": "array",
                "items": {
                  "type": "object"
                }
              }
            }
          },
          "template": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "SMS",
              "MMS"
            ]
          },
          "media": {
            "type": "array",
            "description": "List of media objects to attach to message",
            "items": {
              "type": "object",
              "properties": {
                "url": {
                  "type": "string"
                }
              }
            }
          },
          "conversationStrategy": {
            "type": "string"
          }
        }
      },
      "SendMessagesResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "messages": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Message"
                }
              },
              "jobId": {
                "type": "string"
              },
              "queued": {
                "type": "integer"
              },
              "estimatedPrice": {
                "type": "number",
                "format": "double"
              }
            }
          }
        }
      },
      "Message": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "contact": {
            "$ref": "#/components/schemas/ContactIdentifiers"
          },
          "conversation": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              }
            }
          },
          "message": {
            "type": "string"
          },
          "template": {
            "type": "string"
          },
          "outgoing": {
            "type": "boolean"
          },
          "phoneNumber": {
            "type": "string",
            "example": "+1234567890"
          },
          "price": {
            "type": "number"
          },
          "segments": {
            "type": "number"
          },
          "read": {
            "type": "boolean"
          },
          "status": {
            "type": "string"
          },
          "media": {
            "type": "array",
            "description": "List of media objects attached to message",
            "items": {
              "type": "object",
              "properties": {
                "url": {
                  "type": "string"
                },
                "type": {
                  "type": "string"
                },
                "filename": {
                  "type": "string"
                }
              }
            }
          },
          "error": {
            "$ref": "#/components/schemas/Error"
          },
          "created": {
            "$ref": "#/components/schemas/Updated"
          },
          "updated": {
            "$ref": "#/components/schemas/Updated"
          }
        }
      },
      "MessagesResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PaginatedResponse"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          }
        ]
      },
      "MessageResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "$ref": "#/components/schemas/Message"
          }
        }
      },
      "TemplateRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "example": "SMS",
            "enum": [
              "SMS",
              "Web"
            ]
          },
          "template": {
            "type": "string",
            "example": "Hi {{{firstName}}}. Grab 20% off today only at ABC Shoes"
          }
        }
      },
      "Template": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TemplateRequest"
          },
          {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              }
            }
          }
        ]
      },
      "TemplatesResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PaginatedResponse"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Template"
                }
              }
            }
          }
        ]
      },
      "TemplateResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "$ref": "#/components/schemas/Template"
          }
        }
      },
      "Conversation": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "contact": {
            "$ref": "#/components/schemas/ContactIdentifiers"
          },
          "closed": {
            "type": "boolean"
          },
          "lastMessage": {
            "$ref": "#/components/schemas/Message"
          },
          "phoneNumber": {
            "$ref": "#/components/schemas/PhoneNumber"
          },
          "unread": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "created": {
            "$ref": "#/components/schemas/Updated"
          },
          "updated": {
            "$ref": "#/components/schemas/Updated"
          }
        }
      },
      "ConversationsResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PaginatedResponse"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Conversation"
                }
              }
            }
          }
        ]
      },
      "ConversationResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "$ref": "#/components/schemas/Conversation"
          }
        }
      },
      "CampaignRequest": {
        "type": "object",
        "properties": {
          "trigger": {
            "type": "object",
            "properties": {
              "code": {
                "type": "string",
                "description": "Campaign type specifies how it sources contacts and what event triggers its execution Sort order  * `M` - Manual\n  * `S` - Scheduled\n  * `FU` - File Upload\n",
                "enum": [
                  "M",
                  "S",
                  "FU"
                ]
              }
            }
          },
          "filters": {
            "type": "object",
            "properties": {
              "contacts": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "tags": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "attributes": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "template": {
            "type": "string"
          }
        }
      },
      "AttributeFilter": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "comparator": {
            "type": "string",
            "enum": [
              "=",
              "<",
              "<=",
              ">",
              ">=",
              "!="
            ]
          },
          "value": {
            "type": "string"
          }
        }
      },
      "AccountEvent": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/EventType"
          },
          "accountId": {
            "$ref": "#/components/schemas/AccountId"
          }
        }
      },
      "Campaign": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          }
        }
      },
      "CampaignsResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PaginatedResponse"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Campaign"
                }
              }
            }
          }
        ]
      },
      "CampaignResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "$ref": "#/components/schemas/Campaign"
          }
        }
      },
      "ShareFileResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "type": "object",
            "properties": {
              "link": {
                "type": "string"
              },
              "expires": {
                "type": "string",
                "format": "date-time"
              }
            }
          }
        }
      },
      "Webhook": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string"
          },
          "eventTypes": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "message-received",
                "message-status",
                "message-sent",
                "conversation-closed",
                "contact-created",
                "contact-updated",
                "contact-removed"
              ]
            }
          }
        }
      },
      "WebhooksResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PaginatedResponse"
          },
          {
            "type": "object",
            "properties": {
              "data": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Webhook"
                }
              }
            }
          }
        ]
      },
      "WebhookResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "$ref": "#/components/schemas/Webhook"
          }
        }
      },
      "Event": {
        "type": "object",
        "properties": {
          "eventId": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/EventType"
          },
          "accountId": {
            "$ref": "#/components/schemas/AccountId"
          },
          "data": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/AccountEventPayload"
              },
              {
                "$ref": "#/components/schemas/MessageEventPayload"
              }
            ]
          }
        }
      },
      "AccountEventPayload": {
        "type": "object",
        "properties": {
          "balance": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "MessageEventPayload": {
        "type": "object",
        "properties": {
          "contact": {
            "$ref": "#/components/schemas/ContactIdentifiers"
          },
          "message": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "error": {
            "type": "string"
          }
        }
      }
    },
    "requestBodies": {
      "Contact": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ContactRequest"
            }
          }
        },
        "description": "Pet object that needs to be added to the store",
        "required": true
      },
      "Contacts": {
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ContactRequest"
              }
            }
          }
        },
        "description": "List of contacts",
        "required": true
      }
    },
    "securitySchemes": {
      "sakari_auth": {
        "type": "oauth2",
        "flows": {
          "clientCredentials": {
            "tokenUrl": "/oauth2/token",
            "scopes": {
              "messages:send": "Send messages"
            }
          }
        }
      }
    }
  }
}