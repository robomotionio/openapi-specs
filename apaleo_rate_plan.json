{
  "openapi": "3.0.0",
  "info": {
    "title": "apaleo Rate Plan API",
    "description": "Manage the rate plans and rates to rent out your inventory and extra services.",
    "contact": {
      "url": "https://apaleo.dev/",
      "name": "Apaleo"
    },
    "version": "v1"
  },
  "servers": [
    {
      "url": "https://api.apaleo.com",
      "variables": {}
    }
  ],
  "paths": {
    "/settings/v1/age-categories/{id}": {
      "get": {
        "tags": [
          "AgeCategory"
        ],
        "summary": "SettingsAge-categoriesByIdGet",
        "description": "Get an age category by id.<br>You must have at least one of these scopes: 'settings.read, setup.read, setup.manage'.",
        "operationId": "SettingsAge-categoriesByIdGet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the age category.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "languages",
            "in": "query",
            "description": "'all' or comma separated list of two-letter language codes (ISO Alpha-2)",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return all the age category data.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AgeCategoryModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "headers": {},
            "content": {}
          },
          "401": {
            "description": "You are unauthorized.",
            "headers": {},
            "content": {}
          },
          "403": {
            "description": "Forbidden.",
            "headers": {},
            "content": {}
          },
          "404": {
            "description": "The Request-URI could not be found.",
            "headers": {},
            "content": {}
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred.",
            "headers": {},
            "content": {}
          },
          "503": {
            "description": "The server is currently unavailable. Please try later.",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": false,
        "security": [
          {
            "Client credentials grant flow": [
              "settings.read",
              "setup.read",
              "setup.manage",
              "admin"
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "AgeCategory"
        ],
        "summary": "SettingsAge-categoriesByIdPatch",
        "description": "Here is the list of operations that are currently allowed:\r\n- Replace name, minimum age and maximum age<br /><br /><br>You must have at least one of these scopes: 'settings.manage, setup.manage'.",
        "operationId": "SettingsAge-categoriesByIdPatch",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the age category to be modified.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Define the list of operations to be applied to the resource. Learn more about JSON Patch here: http://jsonpatch.com/.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                },
                "description": "Define the list of operations to be applied to the resource. Learn more about JSON Patch here: http://jsonpatch.com/."
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Success",
            "headers": {},
            "content": {}
          },
          "400": {
            "description": "Bad request.",
            "headers": {},
            "content": {}
          },
          "401": {
            "description": "You are unauthorized.",
            "headers": {},
            "content": {}
          },
          "403": {
            "description": "Forbidden.",
            "headers": {},
            "content": {}
          },
          "404": {
            "description": "The Request-URI could not be found.",
            "headers": {},
            "content": {}
          },
          "415": {
            "description": "Unsupported media type.",
            "headers": {},
            "content": {}
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred.",
            "headers": {},
            "content": {}
          },
          "503": {
            "description": "The server is currently unavailable. Please try later.",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": false,
        "security": [
          {
            "Client credentials grant flow": [
              "settings.manage",
              "setup.manage",
              "admin"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "AgeCategory"
        ],
        "summary": "SettingsAge-categoriesByIdDelete",
        "description": "Use this call to delete an age category. You can only delete an age category if it is not already used in a rate\r\nplan to define age specific prices.<br /><br>You must have at least one of these scopes: 'settings.manage, setup.manage'.",
        "operationId": "SettingsAge-categoriesByIdDelete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the age category.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Deletion of the age category was successful.",
            "headers": {},
            "content": {}
          },
          "400": {
            "description": "Bad request.",
            "headers": {},
            "content": {}
          },
          "401": {
            "description": "You are unauthorized.",
            "headers": {},
            "content": {}
          },
          "403": {
            "description": "Forbidden.",
            "headers": {},
            "content": {}
          },
          "404": {
            "description": "The Request-URI could not be found.",
            "headers": {},
            "content": {}
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred.",
            "headers": {},
            "content": {}
          },
          "503": {
            "description": "The server is currently unavailable. Please try later.",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": false,
        "security": [
          {
            "Client credentials grant flow": [
              "settings.manage",
              "setup.manage",
              "admin"
            ]
          }
        ]
      }
    },
    "/settings/v1/age-categories": {
      "post": {
        "tags": [
          "AgeCategory"
        ],
        "summary": "SettingsAge-categoriesPost",
        "description": "Use this call to create a new age category. The age ranges for categories must not overlap each other and the\r\nallowed values span from 0 to 17.<br /><br>You must have at least one of these scopes: 'settings.manage, setup.manage'.",
        "operationId": "SettingsAge-categoriesPost",
        "parameters": [
          {
            "name": "Idempotency-Key",
            "in": "header",
            "description": "Unique key for safely retrying requests without accidentally performing the same operation twice. \nWe'll always send back the same response for requests made with the same key, \nand keys can't be reused with different request parameters. Keys expire after 24 hours.",
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The definition of the age category.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAgeCategoryModel"
              },
              "example": {
                "code": "BABY",
                "propertyId": "MUC",
                "name": {
                  "en": "Baby",
                  "de": "Kind"
                },
                "minAge": 0,
                "maxAge": 2
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Creation of the new age category was successful.",
            "headers": {
              "Location": {
                "description": "The location of the created resource.",
                "content": {
                  "text/plain": {
                    "schema": {
                      "type": "string",
                      "description": "The location of the created resource."
                    }
                  }
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AgeCategoryCreatedModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "headers": {},
            "content": {}
          },
          "401": {
            "description": "You are unauthorized.",
            "headers": {},
            "content": {}
          },
          "403": {
            "description": "Forbidden.",
            "headers": {},
            "content": {}
          },
          "404": {
            "description": "The Request-URI could not be found.",
            "headers": {},
            "content": {}
          },
          "415": {
            "description": "Unsupported media type.",
            "headers": {},
            "content": {}
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred.",
            "headers": {},
            "content": {}
          },
          "503": {
            "description": "The server is currently unavailable. Please try later.",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": false,
        "security": [
          {
            "Client credentials grant flow": [
              "settings.manage",
              "setup.manage",
              "admin"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "AgeCategory"
        ],
        "summary": "SettingsAge-categoriesGet",
        "description": "Get the list of age categories.<br /><br>You must have at least one of these scopes: 'settings.read, setup.read, setup.manage'.",
        "operationId": "SettingsAge-categoriesGet",
        "parameters": [
          {
            "name": "propertyId",
            "in": "query",
            "description": "Return age categories for the specific property",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return all age categories.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AgeCategoryListModel"
                }
              }
            }
          },
          "204": {
            "description": "Could not find any age categories.",
            "headers": {},
            "content": {}
          },
          "400": {
            "description": "Bad request.",
            "headers": {},
            "content": {}
          },
          "401": {
            "description": "You are unauthorized.",
            "headers": {},
            "content": {}
          },
          "403": {
            "description": "Forbidden.",
            "headers": {},
            "content": {}
          },
          "404": {
            "description": "The Request-URI could not be found.",
            "headers": {},
            "content": {}
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred.",
            "headers": {},
            "content": {}
          },
          "503": {
            "description": "The server is currently unavailable. Please try later.",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": false,
        "security": [
          {
            "Client credentials grant flow": [
              "settings.read",
              "setup.read",
              "setup.manage",
              "admin"
            ]
          }
        ]
      }
    },
    "/rateplan/v1/cancellation-policies": {
      "post": {
        "tags": [
          "CancellationPolicy"
        ],
        "summary": "RateplanCancellation-policiesPost",
        "description": "Create a cancellation policy.<br>You must have at least one of these scopes: 'settings.manage, setup.manage'.",
        "operationId": "RateplanCancellation-policiesPost",
        "parameters": [
          {
            "name": "Idempotency-Key",
            "in": "header",
            "description": "Unique key for safely retrying requests without accidentally performing the same operation twice. \nWe'll always send back the same response for requests made with the same key, \nand keys can't be reused with different request parameters. Keys expire after 24 hours.",
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The definition of the cancellation policy.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCancellationPolicyModel"
              },
              "example": {
                "code": "FLE",
                "name": {
                  "en": "Flexible",
                  "de": "Flexibel"
                },
                "description": {
                  "en": "Free cancellation until 36 hours before arrival.",
                  "de": "Kostenfreies Storno bis 36 Stunden vor Ankunft."
                },
                "propertyId": "MUC",
                "periodFromReference": {
                  "hours": 12,
                  "days": 1
                },
                "reference": "PriorToArrival",
                "fee": {
                  "vatType": "Reduced",
                  "percentValue": {
                    "percent": 100,
                    "limit": 1,
                    "includeServiceIds": [
                      "MUC-BRK"
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Cancellation policy successfully created.",
            "headers": {
              "Location": {
                "description": "The location of the created resource.",
                "content": {
                  "text/plain": {
                    "schema": {
                      "type": "string",
                      "description": "The location of the created resource."
                    }
                  }
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CancellationPolicyCreatedModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "headers": {},
            "content": {}
          },
          "401": {
            "description": "You are unauthorized.",
            "headers": {},
            "content": {}
          },
          "403": {
            "description": "Forbidden.",
            "headers": {},
            "content": {}
          },
          "404": {
            "description": "The Request-URI could not be found.",
            "headers": {},
            "content": {}
          },
          "415": {
            "description": "Unsupported media type.",
            "headers": {},
            "content": {}
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred.",
            "headers": {},
            "content": {}
          },
          "503": {
            "description": "The server is currently unavailable. Please try later.",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": false,
        "security": [
          {
            "Client credentials grant flow": [
              "settings.manage",
              "setup.manage",
              "admin"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "CancellationPolicy"
        ],
        "summary": "RateplanCancellation-policiesGet",
        "description": "Get the list of cancellation policies.<br>You must have at least one of these scopes: 'settings.read, setup.read, setup.manage'.",
        "operationId": "RateplanCancellation-policiesGet",
        "parameters": [
          {
            "name": "propertyId",
            "in": "query",
            "description": "Filter cancellation policies by the specified property",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "Page number, starting from 1 and defaulting to 1. Results in 204 if there are no items on that page.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Page size. If this is not set, the pageNumber will be ignored and all values returned.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CancellationPolicyListModel"
                }
              }
            }
          },
          "204": {
            "description": "No cancellation policies could be found.",
            "headers": {},
            "content": {}
          },
          "400": {
            "description": "Bad request.",
            "headers": {},
            "content": {}
          },
          "401": {
            "description": "You are unauthorized.",
            "headers": {},
            "content": {}
          },
          "403": {
            "description": "Forbidden.",
            "headers": {},
            "content": {}
          },
          "404": {
            "description": "The Request-URI could not be found.",
            "headers": {},
            "content": {}
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred.",
            "headers": {},
            "content": {}
          },
          "503": {
            "description": "The server is currently unavailable. Please try later.",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": false,
        "security": [
          {
            "Client credentials grant flow": [
              "settings.read",
              "setup.read",
              "setup.manage",
              "admin"
            ]
          }
        ]
      }
    },
    "/rateplan/v1/cancellation-policies/{id}": {
      "get": {
        "tags": [
          "CancellationPolicy"
        ],
        "summary": "RateplanCancellation-policiesByIdGet",
        "description": "Get a specific cancellation policy.<br>You must have at least one of these scopes: 'settings.read, setup.read, setup.manage'.",
        "operationId": "RateplanCancellation-policiesByIdGet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the cancellation policy.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "languages",
            "in": "query",
            "description": "'all' or comma separated list of two-letter language codes (ISO Alpha-2)",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CancellationPolicyModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "headers": {},
            "content": {}
          },
          "401": {
            "description": "You are unauthorized.",
            "headers": {},
            "content": {}
          },
          "403": {
            "description": "Forbidden.",
            "headers": {},
            "content": {}
          },
          "404": {
            "description": "The Request-URI could not be found.",
            "headers": {},
            "content": {}
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred.",
            "headers": {},
            "content": {}
          },
          "503": {
            "description": "The server is currently unavailable. Please try later.",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": false,
        "security": [
          {
            "Client credentials grant flow": [
              "settings.read",
              "setup.read",
              "setup.manage",
              "admin"
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "CancellationPolicy"
        ],
        "summary": "RateplanCancellation-policiesByIdPatch",
        "description": "Here is the list of operations that are currently allowed:\r\n- Replace name and description\r\n- Replace the period from reference\r\n- Replace the reference\r\n- Replace the fee details: fixed and percent values<br>You must have at least one of these scopes: 'settings.manage, setup.manage'.",
        "operationId": "RateplanCancellation-policiesByIdPatch",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the cancellation policy to be modified.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Define the list of operations to be applied to the resource. Learn more about JSON Patch here: http://jsonpatch.com/.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                },
                "description": "Define the list of operations to be applied to the resource. Learn more about JSON Patch here: http://jsonpatch.com/."
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Success",
            "headers": {},
            "content": {}
          },
          "400": {
            "description": "Bad request.",
            "headers": {},
            "content": {}
          },
          "401": {
            "description": "You are unauthorized.",
            "headers": {},
            "content": {}
          },
          "403": {
            "description": "Forbidden.",
            "headers": {},
            "content": {}
          },
          "404": {
            "description": "The Request-URI could not be found.",
            "headers": {},
            "content": {}
          },
          "415": {
            "description": "Unsupported media type.",
            "headers": {},
            "content": {}
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred.",
            "headers": {},
            "content": {}
          },
          "503": {
            "description": "The server is currently unavailable. Please try later.",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": false,
        "security": [
          {
            "Client credentials grant flow": [
              "settings.manage",
              "setup.manage",
              "admin"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "CancellationPolicy"
        ],
        "summary": "RateplanCancellation-policiesByIdDelete",
        "description": "Use this call to delete a cancellation policy.<br>You must have this scope: 'setup.manage'.",
        "operationId": "RateplanCancellation-policiesByIdDelete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the cancellation policy.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Deletion of the cancellation policy was successful.",
            "headers": {},
            "content": {}
          },
          "400": {
            "description": "Bad request.",
            "headers": {},
            "content": {}
          },
          "401": {
            "description": "You are unauthorized.",
            "headers": {},
            "content": {}
          },
          "403": {
            "description": "Forbidden.",
            "headers": {},
            "content": {}
          },
          "404": {
            "description": "The Request-URI could not be found.",
            "headers": {},
            "content": {}
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred.",
            "headers": {},
            "content": {}
          },
          "503": {
            "description": "The server is currently unavailable. Please try later.",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": false,
        "security": [
          {
            "Client credentials grant flow": [
              "setup.manage",
              "admin"
            ]
          }
        ]
      }
    },
    "/rateplan/v1/companies": {
      "post": {
        "tags": [
          "Company"
        ],
        "summary": "RateplanCompaniesPost",
        "description": "Use this call to create a new company.<br>You must have at least one of these scopes: 'companies.create, companies.manage'.",
        "operationId": "RateplanCompaniesPost",
        "parameters": [
          {
            "name": "Idempotency-Key",
            "in": "header",
            "description": "Unique key for safely retrying requests without accidentally performing the same operation twice. \nWe'll always send back the same response for requests made with the same key, \nand keys can't be reused with different request parameters. Keys expire after 24 hours.",
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The definition of the company.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCompanyModel"
              },
              "example": {
                "code": "UMBRELLA",
                "propertyId": "MUC",
                "name": "Umbrella Corp.",
                "taxId": "Tax 123456",
                "address": {
                  "addressLine1": "Marienplatz 1",
                  "postalCode": "80331",
                  "city": "München",
                  "countryCode": "DE"
                },
                "canCheckOutOnAr": true,
                "ratePlans": [
                  {
                    "id": "MUC-DBL",
                    "corporateCode": "UMBRELLAINC"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Success.",
            "headers": {
              "Location": {
                "description": "The location of the created resource.",
                "content": {
                  "text/plain": {
                    "schema": {
                      "type": "string",
                      "description": "The location of the created resource."
                    }
                  }
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyCreatedModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "headers": {},
            "content": {}
          },
          "401": {
            "description": "You are unauthorized.",
            "headers": {},
            "content": {}
          },
          "403": {
            "description": "Forbidden.",
            "headers": {},
            "content": {}
          },
          "404": {
            "description": "The Request-URI could not be found.",
            "headers": {},
            "content": {}
          },
          "415": {
            "description": "Unsupported media type.",
            "headers": {},
            "content": {}
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred.",
            "headers": {},
            "content": {}
          },
          "503": {
            "description": "The server is currently unavailable. Please try later.",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": false,
        "security": [
          {
            "Client credentials grant flow": [
              "companies.create",
              "companies.manage",
              "admin"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "Company"
        ],
        "summary": "RateplanCompaniesGet",
        "description": "Get the list of companies.<br /><br>You must have at least one of these scopes: 'companies.read, companies.manage'.",
        "operationId": "RateplanCompaniesGet",
        "parameters": [
          {
            "name": "propertyId",
            "in": "query",
            "description": "Filter by the specified property",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ratePlanIds",
            "in": "query",
            "description": "Return companies with any of the specified rate plans",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "corporateCodes",
            "in": "query",
            "description": "Return companies that have any of the requested corporate codes",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "textSearch",
            "in": "query",
            "description": "This will filter all companies for the provided free text.\r\nCurrently it only looks up if the company name contains one of the provided values",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "Page number, starting from 1 and defaulting to 1. Results in 204 if there are no items on that page.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Page size. If this is not set, the pageNumber will be ignored and all values returned.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyListModel"
                }
              }
            }
          },
          "204": {
            "description": "Could not find any companies.",
            "headers": {},
            "content": {}
          },
          "400": {
            "description": "Bad request.",
            "headers": {},
            "content": {}
          },
          "401": {
            "description": "You are unauthorized.",
            "headers": {},
            "content": {}
          },
          "403": {
            "description": "Forbidden.",
            "headers": {},
            "content": {}
          },
          "404": {
            "description": "The Request-URI could not be found.",
            "headers": {},
            "content": {}
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred.",
            "headers": {},
            "content": {}
          },
          "503": {
            "description": "The server is currently unavailable. Please try later.",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": false,
        "security": [
          {
            "Client credentials grant flow": [
              "companies.read",
              "companies.manage",
              "admin"
            ]
          }
        ]
      }
    },
    "/rateplan/v1/companies/{id}": {
      "get": {
        "tags": [
          "Company"
        ],
        "summary": "RateplanCompaniesByIdGet",
        "description": "Get a company by ID.<br>You must have at least one of these scopes: 'companies.read, companies.manage'.",
        "operationId": "RateplanCompaniesByIdGet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the company.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "headers": {},
            "content": {}
          },
          "401": {
            "description": "You are unauthorized.",
            "headers": {},
            "content": {}
          },
          "403": {
            "description": "Forbidden.",
            "headers": {},
            "content": {}
          },
          "404": {
            "description": "The Request-URI could not be found.",
            "headers": {},
            "content": {}
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred.",
            "headers": {},
            "content": {}
          },
          "503": {
            "description": "The server is currently unavailable. Please try later.",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": false,
        "security": [
          {
            "Client credentials grant flow": [
              "companies.read",
              "companies.manage",
              "admin"
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "Company"
        ],
        "summary": "RateplanCompaniesByIdPatch",
        "description": "Here is the list of operations that are currently allowed:\r\n- Replace name, address, tax ID\r\n- Add and remove rate plans<br>You must have this scope: 'companies.manage'.",
        "operationId": "RateplanCompaniesByIdPatch",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the company to be modified.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Define the list of operations to be applied to the resource. Learn more about JSON Patch here: http://jsonpatch.com/.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                },
                "description": "Define the list of operations to be applied to the resource. Learn more about JSON Patch here: http://jsonpatch.com/."
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Success",
            "headers": {},
            "content": {}
          },
          "400": {
            "description": "Bad request.",
            "headers": {},
            "content": {}
          },
          "401": {
            "description": "You are unauthorized.",
            "headers": {},
            "content": {}
          },
          "403": {
            "description": "Forbidden.",
            "headers": {},
            "content": {}
          },
          "404": {
            "description": "The Request-URI could not be found.",
            "headers": {},
            "content": {}
          },
          "415": {
            "description": "Unsupported media type.",
            "headers": {},
            "content": {}
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred.",
            "headers": {},
            "content": {}
          },
          "503": {
            "description": "The server is currently unavailable. Please try later.",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": false,
        "security": [
          {
            "Client credentials grant flow": [
              "companies.manage",
              "admin"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Company"
        ],
        "summary": "RateplanCompaniesByIdDelete",
        "description": "Deletes a company.\r\nWarning: This operation also removes company from all rate plans if not yet used.\r\nThe deleted company won't be available in the company VAT report anymore.<br>You must have this scope: 'companies.manage'.",
        "operationId": "RateplanCompaniesByIdDelete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the company to delete",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success",
            "headers": {},
            "content": {}
          },
          "400": {
            "description": "Bad request.",
            "headers": {},
            "content": {}
          },
          "401": {
            "description": "You are unauthorized.",
            "headers": {},
            "content": {}
          },
          "403": {
            "description": "Forbidden.",
            "headers": {},
            "content": {}
          },
          "404": {
            "description": "The Request-URI could not be found.",
            "headers": {},
            "content": {}
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred.",
            "headers": {},
            "content": {}
          },
          "503": {
            "description": "The server is currently unavailable. Please try later.",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": false,
        "security": [
          {
            "Client credentials grant flow": [
              "companies.manage",
              "admin"
            ]
          }
        ]
      }
    },
    "/rateplan/v1/corporate-codes/codes": {
      "get": {
        "tags": [
          "CorporateCodes"
        ],
        "summary": "RateplanCorporate-codesCodesGet",
        "description": "Returns all existing corporate codes that match given criteria.<br>You must have this scope: 'rateplans.read-corporate'.",
        "operationId": "RateplanCorporate-codesCodesGet",
        "parameters": [
          {
            "name": "propertyId",
            "in": "query",
            "description": "Return codes for a specific property",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "Page number, starting from 1 and defaulting to 1. Results in 204 if there are no items on that page.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Page size. If this is not set, the pageNumber will be ignored and all values returned.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A collection of corporate codes.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CorporateCodeListModel"
                }
              }
            }
          },
          "204": {
            "description": "No codes found.",
            "headers": {},
            "content": {}
          },
          "400": {
            "description": "Bad request.",
            "headers": {},
            "content": {}
          },
          "401": {
            "description": "You are unauthorized.",
            "headers": {},
            "content": {}
          },
          "403": {
            "description": "Forbidden.",
            "headers": {},
            "content": {}
          },
          "404": {
            "description": "The Request-URI could not be found.",
            "headers": {},
            "content": {}
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred.",
            "headers": {},
            "content": {}
          },
          "503": {
            "description": "The server is currently unavailable. Please try later.",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": false,
        "security": [
          {
            "Client credentials grant flow": [
              "rateplans.read-corporate",
              "admin"
            ]
          }
        ]
      }
    },
    "/rateplan/v1/no-show-policies": {
      "post": {
        "tags": [
          "NoShowPolicy"
        ],
        "summary": "RateplanNo-show-policiesPost",
        "description": "Create a no-show policy.<br>You must have at least one of these scopes: 'settings.manage, setup.manage'.",
        "operationId": "RateplanNo-show-policiesPost",
        "parameters": [
          {
            "name": "Idempotency-Key",
            "in": "header",
            "description": "Unique key for safely retrying requests without accidentally performing the same operation twice. \nWe'll always send back the same response for requests made with the same key, \nand keys can't be reused with different request parameters. Keys expire after 24 hours.",
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The definition of the no-show policy.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateNoShowPolicyModel"
              },
              "example": {
                "code": "NONREF",
                "name": {
                  "en": "No-Show Fee",
                  "de": "No-Show Fee"
                },
                "description": {
                  "en": "100% of the accommodation fees, for the complete stay.",
                  "de": "100% of the accommodation fees, for the complete stay."
                },
                "propertyId": "MUC",
                "fee": {
                  "vatType": "Null",
                  "fixedValue": {
                    "amount": 100,
                    "currency": "EUR"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "No-show policy successfully created.",
            "headers": {
              "Location": {
                "description": "The location of the created resource.",
                "content": {
                  "text/plain": {
                    "schema": {
                      "type": "string",
                      "description": "The location of the created resource."
                    }
                  }
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NoShowPolicyCreatedModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "headers": {},
            "content": {}
          },
          "401": {
            "description": "You are unauthorized.",
            "headers": {},
            "content": {}
          },
          "403": {
            "description": "Forbidden.",
            "headers": {},
            "content": {}
          },
          "404": {
            "description": "The Request-URI could not be found.",
            "headers": {},
            "content": {}
          },
          "415": {
            "description": "Unsupported media type.",
            "headers": {},
            "content": {}
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred.",
            "headers": {},
            "content": {}
          },
          "503": {
            "description": "The server is currently unavailable. Please try later.",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": false,
        "security": [
          {
            "Client credentials grant flow": [
              "settings.manage",
              "setup.manage",
              "admin"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "NoShowPolicy"
        ],
        "summary": "RateplanNo-show-policiesGet",
        "description": "Get the list of no-show policies.<br>You must have at least one of these scopes: 'settings.read, setup.read, setup.manage'.",
        "operationId": "RateplanNo-show-policiesGet",
        "parameters": [
          {
            "name": "propertyId",
            "in": "query",
            "description": "Filter no-show policies by the specified property",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "Page number, starting from 1 and defaulting to 1. Results in 204 if there are no items on that page.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Page size. If this is not set, the pageNumber will be ignored and all values returned.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NoShowPolicyListModel"
                }
              }
            }
          },
          "204": {
            "description": "No no-show policies could be found.",
            "headers": {},
            "content": {}
          },
          "400": {
            "description": "Bad request.",
            "headers": {},
            "content": {}
          },
          "401": {
            "description": "You are unauthorized.",
            "headers": {},
            "content": {}
          },
          "403": {
            "description": "Forbidden.",
            "headers": {},
            "content": {}
          },
          "404": {
            "description": "The Request-URI could not be found.",
            "headers": {},
            "content": {}
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred.",
            "headers": {},
            "content": {}
          },
          "503": {
            "description": "The server is currently unavailable. Please try later.",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": false,
        "security": [
          {
            "Client credentials grant flow": [
              "settings.read",
              "setup.read",
              "setup.manage",
              "admin"
            ]
          }
        ]
      }
    },
    "/rateplan/v1/no-show-policies/{id}": {
      "get": {
        "tags": [
          "NoShowPolicy"
        ],
        "summary": "RateplanNo-show-policiesByIdGet",
        "description": "Get a specific no-show policy.<br>You must have at least one of these scopes: 'settings.read, setup.read, setup.manage'.",
        "operationId": "RateplanNo-show-policiesByIdGet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the no-show policy.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "languages",
            "in": "query",
            "description": "'all' or comma separated list of two-letter language codes (ISO Alpha-2)",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NoShowPolicyModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "headers": {},
            "content": {}
          },
          "401": {
            "description": "You are unauthorized.",
            "headers": {},
            "content": {}
          },
          "403": {
            "description": "Forbidden.",
            "headers": {},
            "content": {}
          },
          "404": {
            "description": "The Request-URI could not be found.",
            "headers": {},
            "content": {}
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred.",
            "headers": {},
            "content": {}
          },
          "503": {
            "description": "The server is currently unavailable. Please try later.",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": false,
        "security": [
          {
            "Client credentials grant flow": [
              "settings.read",
              "setup.read",
              "setup.manage",
              "admin"
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "NoShowPolicy"
        ],
        "summary": "RateplanNo-show-policiesByIdPatch",
        "description": "Here is the list of operations that are currently allowed:\r\n- Replace name and description\r\n- Replace the fee details: fixed and percent values<br>You must have at least one of these scopes: 'settings.manage, setup.manage'.",
        "operationId": "RateplanNo-show-policiesByIdPatch",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the no-show policy to be modified.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Define the list of operations to be applied to the resource. Learn more about JSON Patch here: http://jsonpatch.com/.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                },
                "description": "Define the list of operations to be applied to the resource. Learn more about JSON Patch here: http://jsonpatch.com/."
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Success",
            "headers": {},
            "content": {}
          },
          "400": {
            "description": "Bad request.",
            "headers": {},
            "content": {}
          },
          "401": {
            "description": "You are unauthorized.",
            "headers": {},
            "content": {}
          },
          "403": {
            "description": "Forbidden.",
            "headers": {},
            "content": {}
          },
          "404": {
            "description": "The Request-URI could not be found.",
            "headers": {},
            "content": {}
          },
          "415": {
            "description": "Unsupported media type.",
            "headers": {},
            "content": {}
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred.",
            "headers": {},
            "content": {}
          },
          "503": {
            "description": "The server is currently unavailable. Please try later.",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": false,
        "security": [
          {
            "Client credentials grant flow": [
              "settings.manage",
              "setup.manage",
              "admin"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "NoShowPolicy"
        ],
        "summary": "RateplanNo-show-policiesByIdDelete",
        "description": "Use this call to delete a no-show policy.<br>You must have this scope: 'setup.manage'.",
        "operationId": "RateplanNo-show-policiesByIdDelete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the no-show policy.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Deletion of the no-show policy was successful.",
            "headers": {},
            "content": {}
          },
          "400": {
            "description": "Bad request.",
            "headers": {},
            "content": {}
          },
          "401": {
            "description": "You are unauthorized.",
            "headers": {},
            "content": {}
          },
          "403": {
            "description": "Forbidden.",
            "headers": {},
            "content": {}
          },
          "404": {
            "description": "The Request-URI could not be found.",
            "headers": {},
            "content": {}
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred.",
            "headers": {},
            "content": {}
          },
          "503": {
            "description": "The server is currently unavailable. Please try later.",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": false,
        "security": [
          {
            "Client credentials grant flow": [
              "setup.manage",
              "admin"
            ]
          }
        ]
      }
    },
    "/rateplan/v1/promo-codes/codes": {
      "get": {
        "tags": [
          "PromoCodes"
        ],
        "summary": "RateplanPromo-codesCodesGet",
        "description": "Returns all existing promo codes that match given criteria.<br>You must have this scope: 'rateplans.read-corporate'.",
        "operationId": "RateplanPromo-codesCodesGet",
        "parameters": [
          {
            "name": "propertyId",
            "in": "query",
            "description": "Return codes for a specific property",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "Page number, starting from 1 and defaulting to 1. Results in 204 if there are no items on that page.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Page size. If this is not set, the pageNumber will be ignored and all values returned.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A collection of promo codes.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PromoCodeListModel"
                }
              }
            }
          },
          "204": {
            "description": "No codes found.",
            "headers": {},
            "content": {}
          },
          "400": {
            "description": "Bad request.",
            "headers": {},
            "content": {}
          },
          "401": {
            "description": "You are unauthorized.",
            "headers": {},
            "content": {}
          },
          "403": {
            "description": "Forbidden.",
            "headers": {},
            "content": {}
          },
          "404": {
            "description": "The Request-URI could not be found.",
            "headers": {},
            "content": {}
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred.",
            "headers": {},
            "content": {}
          },
          "503": {
            "description": "The server is currently unavailable. Please try later.",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": false,
        "security": [
          {
            "Client credentials grant flow": [
              "rateplans.read-corporate",
              "admin"
            ]
          }
        ]
      }
    },
    "/rateplan/v1/rate-plans/{id}/rates": {
      "get": {
        "tags": [
          "Rate"
        ],
        "summary": "RateplanRate-plansByIdRatesGet",
        "description": "Returns all rates for a specific rate plan within the specified time range. If a rate has not\r\nbeen initialized, it will still be returned, but anything besides the from and to values will be empty.\r\nThe time range of a rate is defined by the time slice definition of the rate plan.<br />\r\nTime ranges with no initialized rates will not be available for sell.<br /><br />\r\nTo be able to read rates for a corporate rate plan a client must additionally have\r\nthe 'rateplans.read-corporate' scope.<br>You must have at least one of these scopes: 'rates.read, rates.manage'.",
        "operationId": "RateplanRate-plansByIdRatesGet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the rate plan.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "The start of the time range to filter the rates by. All rates where the from date and time is equal or later than\r\nthe specified date and optional time will be affected<br />Specify either a pure date or a date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "to",
            "in": "query",
            "description": "The end of the time range to filter the rates by. All rates where the from date and time is earlier than\r\nthe specified date and optional time will be affected<br />Specify either a pure date or a date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "Page number, starting from 1 and defaulting to 1. Results in 204 if there are no items on that page.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Page size. If this is not set, the pageNumber will be ignored and all values returned.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return all rates for a rate plan.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RateListModel"
                }
              }
            }
          },
          "204": {
            "description": "There are no rates found.",
            "headers": {},
            "content": {}
          },
          "400": {
            "description": "Bad request.",
            "headers": {},
            "content": {}
          },
          "401": {
            "description": "You are unauthorized.",
            "headers": {},
            "content": {}
          },
          "403": {
            "description": "Forbidden.",
            "headers": {},
            "content": {}
          },
          "404": {
            "description": "The Request-URI could not be found.",
            "headers": {},
            "content": {}
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred.",
            "headers": {},
            "content": {}
          },
          "503": {
            "description": "The server is currently unavailable. Please try later.",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": false,
        "security": [
          {
            "Client credentials grant flow": [
              "rates.read",
              "rates.manage",
              "admin"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "Rate"
        ],
        "summary": "RateplanRate-plansByIdRatesPut",
        "description": "All rates specified in the request will be initialized, or overwritten if they already exist.\r\n<br /><br />\r\nMake sure that the from and to date and time in the rates match the time slice definition of the rate plan.\r\nThe easiest way to achieve this is calling the GET /rate-plans/{id}/rates for the time range you want to update\r\nand then resend the payload with the set prices and restrictions.<br>You must have this scope: 'rates.manage'.",
        "operationId": "RateplanRate-plansByIdRatesPut",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the rate plan.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The definition of the rates.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReplaceRateListModel"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "headers": {},
            "content": {}
          },
          "204": {
            "description": "Replace the rates was successful.",
            "headers": {},
            "content": {}
          },
          "400": {
            "description": "Bad request.",
            "headers": {},
            "content": {}
          },
          "401": {
            "description": "You are unauthorized.",
            "headers": {},
            "content": {}
          },
          "403": {
            "description": "Forbidden.",
            "headers": {},
            "content": {}
          },
          "404": {
            "description": "The Request-URI could not be found.",
            "headers": {},
            "content": {}
          },
          "415": {
            "description": "Unsupported media type.",
            "headers": {},
            "content": {}
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred.",
            "headers": {},
            "content": {}
          },
          "503": {
            "description": "The server is currently unavailable. Please try later.",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": false,
        "security": [
          {
            "Client credentials grant flow": [
              "rates.manage",
              "admin"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Rate"
        ],
        "summary": "RateplanRate-plansByIdRatesDelete",
        "description": "Deletes all rates in the specifed time range.<br>You must have at least one of these scopes: 'rates.delete, rates.manage'.",
        "operationId": "RateplanRate-plansByIdRatesDelete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the rate plan.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "The start of the time range to filter the rates by. All rates where the from date and time is equal or later than\r\nthe specified date and optional time will be affected<br />Specify either a pure date or a date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "to",
            "in": "query",
            "description": "The end of the time range to filter the rates by. All rates where the from date and time is earlier than\r\nthe specified date and optional time will be affected<br />Specify either a pure date or a date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Delete of the rates was successful.",
            "headers": {},
            "content": {}
          },
          "400": {
            "description": "Bad request.",
            "headers": {},
            "content": {}
          },
          "401": {
            "description": "You are unauthorized.",
            "headers": {},
            "content": {}
          },
          "403": {
            "description": "Forbidden.",
            "headers": {},
            "content": {}
          },
          "404": {
            "description": "The Request-URI could not be found.",
            "headers": {},
            "content": {}
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred.",
            "headers": {},
            "content": {}
          },
          "503": {
            "description": "The server is currently unavailable. Please try later.",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": false,
        "security": [
          {
            "Client credentials grant flow": [
              "rates.delete",
              "rates.manage",
              "admin"
            ]
          }
        ]
      }
    },
    "/rateplan/v1/rate-plans/{id}/rates/$count": {
      "get": {
        "tags": [
          "Rate"
        ],
        "summary": "RateplanRate-plansByIdRates$countGet",
        "description": "To be able to count rates for a corporate rate plan a client must additionaly have\r\nthe 'rateplans.read-corporate' scope.<br>You must have at least one of these scopes: 'rates.read, rates.manage'.",
        "operationId": "RateplanRate-plansByIdRates$countGet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the rate plan.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "The start of the time range to filter the rates by. All rates where the from date and time is equal or later than\r\nthe specified date and optional time will be affected<br />Specify either a pure date or a date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "to",
            "in": "query",
            "description": "The end of the time range to filter the rates by. All rates where the from date and time is earlier than\r\nthe specified date and optional time will be affected<br />Specify either a pure date or a date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CountModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "headers": {},
            "content": {}
          },
          "401": {
            "description": "You are unauthorized.",
            "headers": {},
            "content": {}
          },
          "403": {
            "description": "Forbidden.",
            "headers": {},
            "content": {}
          },
          "404": {
            "description": "The Request-URI could not be found.",
            "headers": {},
            "content": {}
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred.",
            "headers": {},
            "content": {}
          },
          "503": {
            "description": "The server is currently unavailable. Please try later.",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": false,
        "security": [
          {
            "Client credentials grant flow": [
              "rates.read",
              "rates.manage",
              "admin"
            ]
          }
        ]
      }
    },
    "/rateplan/v1/rates": {
      "patch": {
        "tags": [
          "Rate"
        ],
        "summary": "RateplanRatesPatch",
        "description": "Note that the specified PATCH operations are applied to each and every rate for the specified time range.\r\nHere is the list of operations that are currently allowed:\r\n- Add, replace and remove Price\r\n- Add, replace and remove Restrictions<br>You must have this scope: 'rates.manage'.",
        "operationId": "RateplanRatesPatch",
        "parameters": [
          {
            "name": "ratePlanIds",
            "in": "query",
            "description": "Filter rates for patching by rate plan ids",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "The start of the time range to filter the rates by. All rates where the from date and time is equal or later than\r\nthe specified date and optional time will be affected<br />Specify either a pure date or a date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "to",
            "in": "query",
            "description": "The end of the time range to filter the rates by. All rates where the from date and time is earlier than\r\nthe specified date and optional time will be affected<br />Specify either a pure date or a date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "weekDays",
            "in": "query",
            "description": "The weekdays that will be patched. If not specified, all weekdays will be patched.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/weekDay"
              }
            }
          }
        ],
        "requestBody": {
          "description": "Define the list of operations to be applied to the resource. Learn more about JSON Patch here: http://jsonpatch.com/.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                },
                "description": "Define the list of operations to be applied to the resource. Learn more about JSON Patch here: http://jsonpatch.com/."
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Rate plans were successfully modified.",
            "headers": {},
            "content": {}
          },
          "400": {
            "description": "Bad request.",
            "headers": {},
            "content": {}
          },
          "401": {
            "description": "You are unauthorized.",
            "headers": {},
            "content": {}
          },
          "403": {
            "description": "Forbidden.",
            "headers": {},
            "content": {}
          },
          "404": {
            "description": "The Request-URI could not be found.",
            "headers": {},
            "content": {}
          },
          "415": {
            "description": "Unsupported media type.",
            "headers": {},
            "content": {}
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred.",
            "headers": {},
            "content": {}
          },
          "503": {
            "description": "The server is currently unavailable. Please try later.",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": false,
        "security": [
          {
            "Client credentials grant flow": [
              "rates.manage",
              "admin"
            ]
          }
        ]
      }
    },
    "/rateplan/v1/rate-plans": {
      "get": {
        "tags": [
          "RatePlan"
        ],
        "summary": "RateplanRate-plansGet",
        "description": "Get the list of rate plans depending on client scopes.<br /><br />\r\n            \r\nIf a client has no additional scopes, only public rate plans are returned.<br />\r\nThe 'rateplans.read-corporate' scope adds corporate rate plans to the response.<br>You must have at least one of these scopes: 'rateplans.read, setup.read, setup.manage'.",
        "operationId": "RateplanRate-plansGet",
        "parameters": [
          {
            "name": "propertyId",
            "in": "query",
            "description": "Return rate plans for the specific property",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ratePlanCodes",
            "in": "query",
            "description": "Return rate plans filtered by requested codes",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "includedServiceIds",
            "in": "query",
            "description": "Return rate plans that have any of the requested included services",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "channelCodes",
            "in": "query",
            "description": "Return rate plans that are sold though any of the specified channels",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ChannelCode"
              }
            }
          },
          {
            "name": "promoCodes",
            "in": "query",
            "description": "Return rate plans that have any of the requested promo codes",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "companyIds",
            "in": "query",
            "description": "Return rate plans filtered by requested companies",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "baseRatePlanIds",
            "in": "query",
            "description": "Return rate plans derived from any of the specified rate plans",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "unitGroupIds",
            "in": "query",
            "description": "Return rate plans with any of the specified unit groups",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "timeSliceDefinitionIds",
            "in": "query",
            "description": "Return rate plans with any of the specified time slice definitions",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "unitGroupTypes",
            "in": "query",
            "description": "Return rate plans with any of the specified unit group types",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/unitGroupType"
              }
            }
          },
          {
            "name": "timeSliceTemplate",
            "in": "query",
            "description": "The time slice template, defaults to 'over night'",
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/timeSliceTemplate"
            }
          },
          {
            "name": "minGuaranteeTypes",
            "in": "query",
            "description": "Return rate plans with any of the specified min guarantee types",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/minGuaranteeType4"
              }
            }
          },
          {
            "name": "cancellationPolicyIds",
            "in": "query",
            "description": "Return rate plans with any of the specified cancellation policies",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "noShowPolicyIds",
            "in": "query",
            "description": "Return rate plans with any of the specified no-show policies",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "isDerived",
            "in": "query",
            "description": "Return only derived or base rate plans",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "derivationLevelFilter",
            "in": "query",
            "description": "This will filter rate plans based on their derivation level.<br />You can provide an array of string expressions which all need to apply.<br />Each expression has the form of 'OPERATION_VALUE' where VALUE needs to be of the valid format of the property type and OPERATION can be:<br />'eq' for equals<br />'neq' for not equals<br />'lt' for less than<br />'gt' for greater than<br />'lte' for less than or equals<br />'gte' for greater than or equals<br />For instance<br />'eq_5' would mean the value should equal 5<br />'lte_7' would mean the value should be less than or equal to 7",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "Page number, starting from 1 and defaulting to 1. Results in 204 if there are no items on that page.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Page size. If this is not set, the pageNumber will be ignored and all values returned.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          },
          {
            "name": "expand",
            "in": "query",
            "description": "List of all embedded resources that should be expanded in the response. Possible values are: property, unitGroup, cancellationPolicy, services, bookingPeriods, surcharges, ageCategories. All other values will be silently ignored.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/expand"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return all rate plans available within the client scopes.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RatePlanListModel"
                }
              }
            }
          },
          "204": {
            "description": "There are no rate plans found.",
            "headers": {},
            "content": {}
          },
          "400": {
            "description": "Bad request.",
            "headers": {},
            "content": {}
          },
          "401": {
            "description": "You are unauthorized.",
            "headers": {},
            "content": {}
          },
          "403": {
            "description": "Forbidden.",
            "headers": {},
            "content": {}
          },
          "404": {
            "description": "The Request-URI could not be found.",
            "headers": {},
            "content": {}
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred.",
            "headers": {},
            "content": {}
          },
          "503": {
            "description": "The server is currently unavailable. Please try later.",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": false,
        "security": [
          {
            "Client credentials grant flow": [
              "rateplans.read",
              "setup.read",
              "setup.manage",
              "admin"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "RatePlan"
        ],
        "summary": "RateplanRate-plansPost",
        "description": "Use this call to create a new rate plan. The rate plan will already contain empty rates, fill them later using PUT rates.<br>You must have at least one of these scopes: 'rateplans.create, setup.manage'.",
        "operationId": "RateplanRate-plansPost",
        "parameters": [
          {
            "name": "Idempotency-Key",
            "in": "header",
            "description": "Unique key for safely retrying requests without accidentally performing the same operation twice. \nWe'll always send back the same response for requests made with the same key, \nand keys can't be reused with different request parameters. Keys expire after 24 hours.",
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The definition of the rate plan.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRatePlanModel"
              },
              "example": {
                "code": "NONREF",
                "propertyId": "MUC",
                "unitGroupId": "MUC-DBL",
                "cancellationPolicyId": "MUC-FLE",
                "channelCodes": [
                  "Direct",
                  "BookingCom",
                  "Ibe"
                ],
                "promoCodes": [
                  "APA55100",
                  "DISCOUNT20"
                ],
                "isSubjectToCityTax": true,
                "timeSliceDefinitionId": "MUC-NIGHT",
                "name": {
                  "de": "Nicht Stornierbar",
                  "en": "Non Refundable"
                },
                "description": {
                  "de": "Nicht Stornierbar",
                  "en": "Non Refundable"
                },
                "minGuaranteeType": "PM6Hold",
                "priceCalculationMode": "Truncate",
                "bookingPeriods": [
                  {
                    "from": "2022-04-21T13:46:24.7698564+02:00",
                    "to": "2022-05-05T13:46:24.7698564+02:00"
                  },
                  {
                    "from": "2022-05-08T13:46:24.7698564+02:00",
                    "to": "2022-06-27T13:46:24.7698564+02:00"
                  }
                ],
                "restrictions": {
                  "minAdvance": {
                    "hours": 12,
                    "days": 180
                  },
                  "maxAdvance": {
                    "months": 24
                  }
                },
                "pricingRule": {
                  "baseRatePlanId": "MUC-NONREF-SGL",
                  "type": "Absolute",
                  "value": 20
                },
                "surcharges": [
                  {
                    "adults": 2,
                    "type": "Absolute",
                    "value": 10
                  }
                ],
                "ageCategories": [
                  {
                    "id": "MUC-BABY",
                    "surcharges": [
                      {
                        "adults": 1,
                        "value": 20
                      }
                    ]
                  }
                ],
                "includedServices": [
                  {
                    "serviceId": "MUC-BRKF",
                    "grossPrice": {
                      "amount": 10,
                      "currency": "EUR"
                    }
                  }
                ],
                "companies": [
                  {
                    "id": "MUC-APA",
                    "corporateCode": "APA-DBL"
                  }
                ],
                "accountingConfigs": [
                  {
                    "state": "Unknown",
                    "vatType": "Normal",
                    "serviceType": "FoodAndBeverages",
                    "subAccountId": "ALCO",
                    "validFrom": "2021-01-01"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Creation of the new rate plan was successful.",
            "headers": {
              "Location": {
                "description": "The location of the created resource.",
                "content": {
                  "text/plain": {
                    "schema": {
                      "type": "string",
                      "description": "The location of the created resource."
                    }
                  }
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RatePlanCreatedModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "headers": {},
            "content": {}
          },
          "401": {
            "description": "You are unauthorized.",
            "headers": {},
            "content": {}
          },
          "403": {
            "description": "Forbidden.",
            "headers": {},
            "content": {}
          },
          "404": {
            "description": "The Request-URI could not be found.",
            "headers": {},
            "content": {}
          },
          "415": {
            "description": "Unsupported media type.",
            "headers": {},
            "content": {}
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred.",
            "headers": {},
            "content": {}
          },
          "503": {
            "description": "The server is currently unavailable. Please try later.",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": false,
        "security": [
          {
            "Client credentials grant flow": [
              "rateplans.create",
              "setup.manage",
              "admin"
            ]
          }
        ]
      },
      "patch": {
        "tags": [
          "RatePlan"
        ],
        "summary": "RateplanRate-plansPatch",
        "description": "Here is the list of operations that are currently allowed:\r\n- Replace Name\r\n- Replace Description\r\n- Replace MinGuaranteeType\r\n- Replace PriceCalculationMode\r\n- Replace CancellationPolicy\r\n- Replace NoShowPolicy\r\n- Replace ChannelCodes\r\n- Replace Companies\r\n- Add, replace and remove PromoCode\r\n- Add, replace and remove Restrictions\r\n- Add, replace and remove BookingPeriods\r\n- Add, replace and remove IsSubjectToCityTax\r\n- Add, replace and remove PricingRule\r\n- Add, replace and remove Surcharges\r\n- Add, replace and remove AgeCategories\r\n- Add, replace and remove IncludedServices\r\n- Add/Replace/Remove/Update AccountingConfigs<br>You must have at least one of these scopes: 'rateplans.manage, setup.manage'.",
        "operationId": "RateplanRate-plansPatch",
        "parameters": [
          {
            "name": "ratePlanIds",
            "in": "query",
            "description": "Comma separated list of rate plan IDs, at least one.",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "requestBody": {
          "description": "Define the list of operations to be applied to the resource. Learn more about JSON Patch here: http://jsonpatch.com/.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                },
                "description": "Define the list of operations to be applied to the resource. Learn more about JSON Patch here: http://jsonpatch.com/."
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Rate plans were successfully modified.",
            "headers": {},
            "content": {}
          },
          "400": {
            "description": "Bad request.",
            "headers": {},
            "content": {}
          },
          "401": {
            "description": "You are unauthorized.",
            "headers": {},
            "content": {}
          },
          "403": {
            "description": "Forbidden.",
            "headers": {},
            "content": {}
          },
          "404": {
            "description": "The Request-URI could not be found.",
            "headers": {},
            "content": {}
          },
          "415": {
            "description": "Unsupported media type.",
            "headers": {},
            "content": {}
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred.",
            "headers": {},
            "content": {}
          },
          "503": {
            "description": "The server is currently unavailable. Please try later.",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": false,
        "security": [
          {
            "Client credentials grant flow": [
              "rateplans.manage",
              "setup.manage",
              "admin"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "RatePlan"
        ],
        "summary": "RateplanRate-plansDelete",
        "description": "Use this call to delete multiple rate plans.<br>You must have at least one of these scopes: 'rateplans.delete, setup.manage'.",
        "operationId": "RateplanRate-plansDelete",
        "parameters": [
          {
            "name": "ratePlanIds",
            "in": "query",
            "description": "The ids of the rate plans.",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Deletion of the rate plans was successful.",
            "headers": {},
            "content": {}
          },
          "400": {
            "description": "Bad request.",
            "headers": {},
            "content": {}
          },
          "401": {
            "description": "You are unauthorized.",
            "headers": {},
            "content": {}
          },
          "403": {
            "description": "Forbidden.",
            "headers": {},
            "content": {}
          },
          "404": {
            "description": "The Request-URI could not be found.",
            "headers": {},
            "content": {}
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred.",
            "headers": {},
            "content": {}
          },
          "503": {
            "description": "The server is currently unavailable. Please try later.",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": false,
        "security": [
          {
            "Client credentials grant flow": [
              "rateplans.delete",
              "setup.manage",
              "admin"
            ]
          }
        ]
      }
    },
    "/rateplan/v1/rate-plans/$count": {
      "get": {
        "tags": [
          "RatePlan"
        ],
        "summary": "RateplanRate-plans$countGet",
        "description": "Returns number of rate plans matching the filter criteria, and depending on client scopes<br /><br />\r\n            \r\nIf a client has no additional scopes, only public rate plans are counted.<br />\r\nThe 'rateplans.read-corporate' scope adds corporate rate plans to the result number.<br>You must have at least one of these scopes: 'rateplans.read, setup.read, setup.manage'.",
        "operationId": "RateplanRate-plans$countGet",
        "parameters": [
          {
            "name": "propertyId",
            "in": "query",
            "description": "Return rate plans for the specific property",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ratePlanCodes",
            "in": "query",
            "description": "Return rate plans filtered by requested codes",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "includedServiceIds",
            "in": "query",
            "description": "Return rate plans that have any of the requested included services",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "channelCodes",
            "in": "query",
            "description": "Return rate plans that are sold though any of the specified channels",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ChannelCode"
              }
            }
          },
          {
            "name": "promoCodes",
            "in": "query",
            "description": "Return rate plans that have any of the requested promo codes",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "companyIds",
            "in": "query",
            "description": "Return rate plans filtered by requested companies",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "baseRatePlanIds",
            "in": "query",
            "description": "Return rate plans derived from any of the specified rate plans",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "unitGroupIds",
            "in": "query",
            "description": "Return rate plans with any of the specified unit groups",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "timeSliceDefinitionIds",
            "in": "query",
            "description": "Return rate plans with any of the specified time slice definitions",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "unitGroupTypes",
            "in": "query",
            "description": "Return rate plans with any of the specified unit group types",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/unitGroupType"
              }
            }
          },
          {
            "name": "timeSliceTemplate",
            "in": "query",
            "description": "The time slice template, defaults to 'over night'",
            "style": "form",
            "explode": true,
            "schema": {
              "$ref": "#/components/schemas/timeSliceTemplate"
            }
          },
          {
            "name": "minGuaranteeTypes",
            "in": "query",
            "description": "Return rate plans with any of the specified min guarantee types",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/minGuaranteeType4"
              }
            }
          },
          {
            "name": "cancellationPolicyIds",
            "in": "query",
            "description": "Return rate plans with any of the specified cancellation policies",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "noShowPolicyIds",
            "in": "query",
            "description": "Return rate plans with any of the specified no-show policies",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "isDerived",
            "in": "query",
            "description": "Return only derived or base rate plans",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "derivationLevelFilter",
            "in": "query",
            "description": "This will filter rate plans based on their derivation level.<br />You can provide an array of string expressions which all need to apply.<br />Each expression has the form of 'OPERATION_VALUE' where VALUE needs to be of the valid format of the property type and OPERATION can be:<br />'eq' for equals<br />'neq' for not equals<br />'lt' for less than<br />'gt' for greater than<br />'lte' for less than or equals<br />'gte' for greater than or equals<br />For instance<br />'eq_5' would mean the value should equal 5<br />'lte_7' would mean the value should be less than or equal to 7",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CountModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "headers": {},
            "content": {}
          },
          "401": {
            "description": "You are unauthorized.",
            "headers": {},
            "content": {}
          },
          "403": {
            "description": "Forbidden.",
            "headers": {},
            "content": {}
          },
          "404": {
            "description": "The Request-URI could not be found.",
            "headers": {},
            "content": {}
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred.",
            "headers": {},
            "content": {}
          },
          "503": {
            "description": "The server is currently unavailable. Please try later.",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": false,
        "security": [
          {
            "Client credentials grant flow": [
              "rateplans.read",
              "setup.read",
              "setup.manage",
              "admin"
            ]
          }
        ]
      }
    },
    "/rateplan/v1/rate-plans/{id}": {
      "get": {
        "tags": [
          "RatePlan"
        ],
        "summary": "RateplanRate-plansByIdGet",
        "description": "Get a rate plan by id.<br /><br />\r\n            \r\nTo be able to read a corporate rate plan a client must additionaly have\r\n'rateplans.read-corporate' scope assigned.<br>You must have at least one of these scopes: 'rateplans.read, setup.read, setup.manage'.",
        "operationId": "RateplanRate-plansByIdGet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the rate plan.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "languages",
            "in": "query",
            "description": "'all' or comma separated list of two-letter language codes (ISO Alpha-2)",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "expand",
            "in": "query",
            "description": "List of all embedded resources that should be expanded in the response. Possible values are: property, cancellationPolicy. All other values will be silently ignored.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/expand1"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return all the rate plan data.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RatePlanModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "headers": {},
            "content": {}
          },
          "401": {
            "description": "You are unauthorized.",
            "headers": {},
            "content": {}
          },
          "403": {
            "description": "Forbidden.",
            "headers": {},
            "content": {}
          },
          "404": {
            "description": "The Request-URI could not be found.",
            "headers": {},
            "content": {}
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred.",
            "headers": {},
            "content": {}
          },
          "503": {
            "description": "The server is currently unavailable. Please try later.",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": false,
        "security": [
          {
            "Client credentials grant flow": [
              "rateplans.read",
              "setup.read",
              "setup.manage",
              "admin"
            ]
          }
        ]
      },
      "put": {
        "tags": [
          "RatePlan"
        ],
        "summary": "RateplanRate-plansByIdPut",
        "description": "Use this call to modify a rate plan.<br>You must have at least one of these scopes: 'rateplans.manage, setup.manage'.",
        "operationId": "RateplanRate-plansByIdPut",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the rate plan.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The definition of the rate plan.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReplaceRatePlanModel"
              },
              "example": {
                "name": {
                  "de": "Nicht Stornierbar",
                  "en": "Non Refundable"
                },
                "description": {
                  "de": "Nicht Stornierbar",
                  "en": "Non Refundable"
                },
                "minGuaranteeType": "PM6Hold",
                "priceCalculationMode": "Truncate",
                "channelCodes": [
                  "Direct",
                  "BookingCom",
                  "Ibe"
                ],
                "cancellationPolicyId": "MUC-NONREF",
                "bookingPeriods": [
                  {
                    "from": "2022-04-21T13:46:24.7698564+02:00",
                    "to": "2022-05-05T13:46:24.7698564+02:00"
                  },
                  {
                    "from": "2022-05-08T13:46:24.7698564+02:00",
                    "to": "2022-06-27T13:46:24.7698564+02:00"
                  }
                ],
                "restrictions": {
                  "minAdvance": {
                    "hours": 12,
                    "days": 180
                  },
                  "maxAdvance": {
                    "months": 24
                  }
                },
                "includedServices": [
                  {
                    "serviceId": "MUC-BRKF",
                    "grossPrice": {
                      "amount": 10,
                      "currency": "EUR"
                    }
                  },
                  {
                    "serviceId": "MUC-WLAN",
                    "grossPrice": {
                      "amount": 5,
                      "currency": "EUR"
                    }
                  }
                ],
                "companies": [
                  {
                    "id": "MUC-APA",
                    "corporateCode": "APA-DBL"
                  }
                ],
                "pricingRule": {
                  "baseRatePlanId": "MUC-NONREF-SGL",
                  "type": "Absolute",
                  "value": 20
                },
                "surcharges": [
                  {
                    "adults": 2,
                    "type": "Percent",
                    "value": 10
                  }
                ],
                "ageCategories": [
                  {
                    "id": "MUC-BABY",
                    "surcharges": [
                      {
                        "adults": 1,
                        "value": 10
                      }
                    ]
                  },
                  {
                    "id": "MUC-CHILD",
                    "surcharges": [
                      {
                        "adults": 1,
                        "value": 40
                      }
                    ]
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "headers": {},
            "content": {}
          },
          "204": {
            "description": "Replace of the rate plan was successful.",
            "headers": {},
            "content": {}
          },
          "400": {
            "description": "Bad request.",
            "headers": {},
            "content": {}
          },
          "401": {
            "description": "You are unauthorized.",
            "headers": {},
            "content": {}
          },
          "403": {
            "description": "Forbidden.",
            "headers": {},
            "content": {}
          },
          "404": {
            "description": "The Request-URI could not be found.",
            "headers": {},
            "content": {}
          },
          "415": {
            "description": "Unsupported media type.",
            "headers": {},
            "content": {}
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred.",
            "headers": {},
            "content": {}
          },
          "503": {
            "description": "The server is currently unavailable. Please try later.",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": false,
        "security": [
          {
            "Client credentials grant flow": [
              "rateplans.manage",
              "setup.manage",
              "admin"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "RatePlan"
        ],
        "summary": "RateplanRate-plansByIdDelete",
        "description": "Use this call to delete a rate plan.<br>You must have at least one of these scopes: 'rateplans.delete, setup.manage'.",
        "operationId": "RateplanRate-plansByIdDelete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the rate plan.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Deletion of the rate plan was successful.",
            "headers": {},
            "content": {}
          },
          "400": {
            "description": "Bad request.",
            "headers": {},
            "content": {}
          },
          "401": {
            "description": "You are unauthorized.",
            "headers": {},
            "content": {}
          },
          "403": {
            "description": "Forbidden.",
            "headers": {},
            "content": {}
          },
          "404": {
            "description": "The Request-URI could not be found.",
            "headers": {},
            "content": {}
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred.",
            "headers": {},
            "content": {}
          },
          "503": {
            "description": "The server is currently unavailable. Please try later.",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": false,
        "security": [
          {
            "Client credentials grant flow": [
              "rateplans.delete",
              "setup.manage",
              "admin"
            ]
          }
        ]
      }
    },
    "/rateplan/v1/rateplan-codes": {
      "get": {
        "tags": [
          "RatePlanCodes"
        ],
        "summary": "RateplanRateplan-codesGet",
        "description": "Returns all existing rate plan codes that match given criteria.<br>You must have at least one of these scopes: 'rateplans.read, setup.read, setup.manage'.",
        "operationId": "RateplanRateplan-codesGet",
        "parameters": [
          {
            "name": "propertyId",
            "in": "query",
            "description": "Return codes for a specific property",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "Page number, starting from 1 and defaulting to 1. Results in 204 if there are no items on that page.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Page size. If this is not set, the pageNumber will be ignored and all values returned.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A collection of rate plan codes.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RatePlanCodeListModel"
                }
              }
            }
          },
          "204": {
            "description": "No codes found.",
            "headers": {},
            "content": {}
          },
          "400": {
            "description": "Bad request.",
            "headers": {},
            "content": {}
          },
          "401": {
            "description": "You are unauthorized.",
            "headers": {},
            "content": {}
          },
          "403": {
            "description": "Forbidden.",
            "headers": {},
            "content": {}
          },
          "404": {
            "description": "The Request-URI could not be found.",
            "headers": {},
            "content": {}
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred.",
            "headers": {},
            "content": {}
          },
          "503": {
            "description": "The server is currently unavailable. Please try later.",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": false,
        "security": [
          {
            "Client credentials grant flow": [
              "rateplans.read",
              "setup.read",
              "setup.manage",
              "admin"
            ]
          }
        ]
      }
    },
    "/rateplan/v1/services": {
      "post": {
        "tags": [
          "Service"
        ],
        "summary": "RateplanServicesPost",
        "description": "Create a service.<br>You must have at least one of these scopes: 'services.create, setup.manage'.",
        "operationId": "RateplanServicesPost",
        "parameters": [
          {
            "name": "Idempotency-Key",
            "in": "header",
            "description": "Unique key for safely retrying requests without accidentally performing the same operation twice. \nWe'll always send back the same response for requests made with the same key, \nand keys can't be reused with different request parameters. Keys expire after 24 hours.",
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The definition of the service.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateServiceModel"
              },
              "example": {
                "code": "BRK",
                "name": {
                  "en": "Breakfast",
                  "de": "Frühstück"
                },
                "description": {
                  "en": "Yummy yummy breakfast",
                  "de": "Leckeres Frühstück"
                },
                "propertyId": "MUC",
                "defaultGrossPrice": {
                  "amount": 20,
                  "currency": "EUR"
                },
                "pricingUnit": "Person",
                "postNextDay": true,
                "availability": {
                  "mode": "Daily",
                  "quantity": 3,
                  "daysOfWeek": [
                    "Monday",
                    "Tuesday",
                    "Wednesday",
                    "Thursday",
                    "Friday",
                    "Saturday",
                    "Sunday"
                  ]
                },
                "channelCodes": [
                  "Direct",
                  "Ibe",
                  "BookingCom",
                  "ChannelManager"
                ],
                "accountingConfigs": [
                  {
                    "state": "Unknown",
                    "vatType": "Normal",
                    "serviceType": "FoodAndBeverages",
                    "subAccountId": "ALCO",
                    "validFrom": "2021-01-01"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Service successfully created.",
            "headers": {
              "Location": {
                "description": "The location of the created resource.",
                "content": {
                  "text/plain": {
                    "schema": {
                      "type": "string",
                      "description": "The location of the created resource."
                    }
                  }
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceCreatedModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "headers": {},
            "content": {}
          },
          "401": {
            "description": "You are unauthorized.",
            "headers": {},
            "content": {}
          },
          "403": {
            "description": "Forbidden.",
            "headers": {},
            "content": {}
          },
          "404": {
            "description": "The Request-URI could not be found.",
            "headers": {},
            "content": {}
          },
          "415": {
            "description": "Unsupported media type.",
            "headers": {},
            "content": {}
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred.",
            "headers": {},
            "content": {}
          },
          "503": {
            "description": "The server is currently unavailable. Please try later.",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": false,
        "security": [
          {
            "Client credentials grant flow": [
              "services.create",
              "setup.manage",
              "admin"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "Service"
        ],
        "summary": "RateplanServicesGet",
        "description": "Get the list of services.<br>You must have at least one of these scopes: 'services.read, setup.read, setup.manage'.",
        "operationId": "RateplanServicesGet",
        "parameters": [
          {
            "name": "propertyId",
            "in": "query",
            "description": "Filter services by the specified property",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "onlySoldAsExtras",
            "in": "query",
            "description": "If set to true, return only services that can be sold as extras. Otherwise, it returns both, extras, and include-only.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "channelCodes",
            "in": "query",
            "description": "The channel codes the service is sold through",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ChannelCode"
              }
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "Page number, starting from 1 and defaulting to 1. Results in 204 if there are no items on that page.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Page size. If this is not set, the pageNumber will be ignored and all values returned.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          },
          {
            "name": "expand",
            "in": "query",
            "description": "List of all embedded resources that should be expanded in the response. Possible values are: property. All other values will be silently ignored.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/expand2"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceListModel"
                }
              }
            }
          },
          "204": {
            "description": "No services could be found.",
            "headers": {},
            "content": {}
          },
          "400": {
            "description": "Bad request.",
            "headers": {},
            "content": {}
          },
          "401": {
            "description": "You are unauthorized.",
            "headers": {},
            "content": {}
          },
          "403": {
            "description": "Forbidden.",
            "headers": {},
            "content": {}
          },
          "404": {
            "description": "The Request-URI could not be found.",
            "headers": {},
            "content": {}
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred.",
            "headers": {},
            "content": {}
          },
          "503": {
            "description": "The server is currently unavailable. Please try later.",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": false,
        "security": [
          {
            "Client credentials grant flow": [
              "services.read",
              "setup.read",
              "setup.manage",
              "admin"
            ]
          }
        ]
      }
    },
    "/rateplan/v1/services/{id}": {
      "patch": {
        "tags": [
          "Service"
        ],
        "summary": "RateplanServicesByIdPatch",
        "description": "Here is the list of operations that are currently allowed:\r\n- Replace Name\r\n- Replace Description\r\n- Replace DefaultGrossPrice\r\n- Replace PricingUnit\r\n- Replace PostNextDay\r\n- Replace Availability\r\n- Add/Replace/Remove/Update AccountingConfigs\r\n- Replace ChannelCodes<br>You must have at least one of these scopes: 'services.manage, setup.manage'.",
        "operationId": "RateplanServicesByIdPatch",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the service.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Define the list of operations to be applied to the resource. Learn more about JSON Patch here: http://jsonpatch.com/.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                },
                "description": "Define the list of operations to be applied to the resource. Learn more about JSON Patch here: http://jsonpatch.com/."
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "The service was successfully modified.",
            "headers": {},
            "content": {}
          },
          "400": {
            "description": "Bad request.",
            "headers": {},
            "content": {}
          },
          "401": {
            "description": "You are unauthorized.",
            "headers": {},
            "content": {}
          },
          "403": {
            "description": "Forbidden.",
            "headers": {},
            "content": {}
          },
          "404": {
            "description": "The Request-URI could not be found.",
            "headers": {},
            "content": {}
          },
          "415": {
            "description": "Unsupported media type.",
            "headers": {},
            "content": {}
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred.",
            "headers": {},
            "content": {}
          },
          "503": {
            "description": "The server is currently unavailable. Please try later.",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": false,
        "security": [
          {
            "Client credentials grant flow": [
              "services.manage",
              "setup.manage",
              "admin"
            ]
          }
        ]
      },
      "get": {
        "tags": [
          "Service"
        ],
        "summary": "RateplanServicesByIdGet",
        "description": "Get a specific service.<br>You must have at least one of these scopes: 'services.read, setup.read, setup.manage'.",
        "operationId": "RateplanServicesByIdGet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the service.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "languages",
            "in": "query",
            "description": "'all' or comma separated list of two-letter language codes (ISO Alpha-2)",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "expand",
            "in": "query",
            "description": "List of all embedded resources that should be expanded in the response. Possible values are: property. All other values will be silently ignored.",
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/expand2"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "headers": {},
            "content": {}
          },
          "401": {
            "description": "You are unauthorized.",
            "headers": {},
            "content": {}
          },
          "403": {
            "description": "Forbidden.",
            "headers": {},
            "content": {}
          },
          "404": {
            "description": "The Request-URI could not be found.",
            "headers": {},
            "content": {}
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred.",
            "headers": {},
            "content": {}
          },
          "503": {
            "description": "The server is currently unavailable. Please try later.",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": false,
        "security": [
          {
            "Client credentials grant flow": [
              "services.read",
              "setup.read",
              "setup.manage",
              "admin"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Service"
        ],
        "summary": "RateplanServicesByIdDelete",
        "description": "Use this call to delete a service.<br>You must have at least one of these scopes: 'services.create, setup.manage'.",
        "operationId": "RateplanServicesByIdDelete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the service.",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Deletion of the service was successful.",
            "headers": {},
            "content": {}
          },
          "400": {
            "description": "Bad request.",
            "headers": {},
            "content": {}
          },
          "401": {
            "description": "You are unauthorized.",
            "headers": {},
            "content": {}
          },
          "403": {
            "description": "Forbidden.",
            "headers": {},
            "content": {}
          },
          "404": {
            "description": "The Request-URI could not be found.",
            "headers": {},
            "content": {}
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred.",
            "headers": {},
            "content": {}
          },
          "503": {
            "description": "The server is currently unavailable. Please try later.",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": false,
        "security": [
          {
            "Client credentials grant flow": [
              "services.create",
              "setup.manage",
              "admin"
            ]
          }
        ]
      }
    },
    "/rateplan/v1/services/$count": {
      "get": {
        "tags": [
          "Service"
        ],
        "summary": "RateplanServices$countGet",
        "description": "Returns number of services<br>You must have at least one of these scopes: 'services.read, setup.read, setup.manage'.",
        "operationId": "RateplanServices$countGet",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CountModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "headers": {},
            "content": {}
          },
          "401": {
            "description": "You are unauthorized.",
            "headers": {},
            "content": {}
          },
          "403": {
            "description": "Forbidden.",
            "headers": {},
            "content": {}
          },
          "404": {
            "description": "The Request-URI could not be found.",
            "headers": {},
            "content": {}
          },
          "422": {
            "description": "Validation errors in the request body or query params.",
            "headers": {},
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageItemCollection"
                }
              }
            }
          },
          "500": {
            "description": "An unexpected error occurred.",
            "headers": {},
            "content": {}
          },
          "503": {
            "description": "The server is currently unavailable. Please try later.",
            "headers": {},
            "content": {}
          }
        },
        "deprecated": false,
        "security": [
          {
            "Client credentials grant flow": [
              "services.read",
              "setup.read",
              "setup.manage",
              "admin"
            ]
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "AccountingConfigModel": {
        "title": "AccountingConfigModel",
        "required": [
          "vatType",
          "serviceType",
          "validFrom"
        ],
        "type": "object",
        "properties": {
          "vatType": {
            "$ref": "#/components/schemas/VatType"
          },
          "serviceType": {
            "$ref": "#/components/schemas/ServiceType"
          },
          "subAccountId": {
            "type": "string",
            "description": "The sub-accounts id"
          },
          "validFrom": {
            "type": "string",
            "description": "Which date this configuration is valid from",
            "format": "date",
            "example": "2020-10-10"
          }
        },
        "example": {
          "state": "Unknown",
          "vatType": "Normal",
          "serviceType": "FoodAndBeverages",
          "subAccountId": "ALCO",
          "validFrom": "2021-01-01"
        }
      },
      "AddressModel": {
        "title": "AddressModel",
        "required": [
          "addressLine1",
          "postalCode",
          "city",
          "countryCode"
        ],
        "type": "object",
        "properties": {
          "addressLine1": {
            "type": "string"
          },
          "addressLine2": {
            "type": "string"
          },
          "postalCode": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "regionCode": {
            "type": "string"
          },
          "countryCode": {
            "type": "string"
          }
        }
      },
      "AgeCategoryCreatedModel": {
        "title": "AgeCategoryCreatedModel",
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The age category id"
          }
        },
        "example": {
          "id": "MUC-BABY"
        }
      },
      "AgeCategoryItemModel": {
        "title": "AgeCategoryItemModel",
        "required": [
          "id",
          "code",
          "propertyId",
          "name",
          "minAge",
          "maxAge"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The age category id"
          },
          "code": {
            "type": "string",
            "description": "The code for the age category"
          },
          "propertyId": {
            "type": "string",
            "description": "The id of the property for which the age category will be created"
          },
          "name": {
            "type": "string",
            "description": "The name for the age category"
          },
          "minAge": {
            "type": "integer",
            "description": "The minimum age for the age category. The specified value is included in the age range",
            "format": "int32"
          },
          "maxAge": {
            "type": "integer",
            "description": "The maximum age for the age category. The specified value is included in the age range",
            "format": "int32"
          }
        }
      },
      "AgeCategoryListModel": {
        "title": "AgeCategoryListModel",
        "required": [
          "ageCategories",
          "count"
        ],
        "type": "object",
        "properties": {
          "ageCategories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AgeCategoryItemModel"
            },
            "description": "List of age categories"
          },
          "count": {
            "type": "integer",
            "description": "Total count of items",
            "format": "int64"
          }
        }
      },
      "AgeCategoryModel": {
        "title": "AgeCategoryModel",
        "required": [
          "id",
          "code",
          "propertyId",
          "name",
          "minAge",
          "maxAge"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The age category id"
          },
          "code": {
            "type": "string",
            "description": "The code for the age category"
          },
          "propertyId": {
            "type": "string",
            "description": "The id of the property for which the age category will be created"
          },
          "name": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "The name for the age category"
          },
          "minAge": {
            "type": "integer",
            "description": "The minimum age for the age category. The specified value is included in the age range",
            "format": "int32"
          },
          "maxAge": {
            "type": "integer",
            "description": "The maximum age for the age category. The specified value is included in the age range",
            "format": "int32"
          }
        }
      },
      "AgeCategorySurchargeModel": {
        "title": "AgeCategorySurchargeModel",
        "required": [
          "adults",
          "value"
        ],
        "type": "object",
        "properties": {
          "adults": {
            "type": "integer",
            "description": "The number of adults",
            "format": "int32"
          },
          "value": {
            "maximum": 2147483647,
            "minimum": 0,
            "type": "integer",
            "description": "The absolute value in the currency of the rate plan as surcharge for each child accompanied by the given number of 'adults'.\r\nThe minimum value is 0.",
            "format": "int32"
          }
        }
      },
      "AvailabilityModel": {
        "title": "AvailabilityModel",
        "required": [
          "mode"
        ],
        "type": "object",
        "properties": {
          "mode": {
            "$ref": "#/components/schemas/Mode"
          },
          "quantity": {
            "type": "integer",
            "description": "Quota/Limit for service. By default service is unlimited.",
            "format": "int32"
          },
          "daysOfWeek": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DaysOfWeek"
            },
            "description": "You can choose if the service should be available for specific days of the week"
          }
        }
      },
      "BookingPeriodModel": {
        "title": "BookingPeriodModel",
        "required": [
          "from",
          "to"
        ],
        "type": "object",
        "properties": {
          "from": {
            "type": "string",
            "description": "Start of booking period<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
            "format": "date-time"
          },
          "to": {
            "type": "string",
            "description": "End of booking period<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
            "format": "date-time"
          }
        }
      },
      "BookingRestrictionsModel": {
        "title": "BookingRestrictionsModel",
        "type": "object",
        "properties": {
          "minAdvance": {
            "$ref": "#/components/schemas/PeriodModel"
          },
          "maxAdvance": {
            "$ref": "#/components/schemas/PeriodModel"
          },
          "lateBookingUntil": {
            "type": "string",
            "description": "Time of day until the late booking can be made for this rate plan\r\nRestrictions:\r\n- the time has to be between the check-in (excl.) and check-out time (excl.)\r\n- can only be set, if MinAdvance is not set<br />A time (without fractional second part) as defined in the <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>"
          }
        }
      },
      "CalculatedRateModel": {
        "title": "CalculatedRateModel",
        "required": [
          "adults",
          "price"
        ],
        "type": "object",
        "properties": {
          "adults": {
            "type": "integer",
            "description": "Number of adults this rate is valid for",
            "format": "int32"
          },
          "price": {
            "$ref": "#/components/schemas/MonetaryValueModel"
          },
          "includedServicesPrice": {
            "$ref": "#/components/schemas/MonetaryValueModel"
          }
        }
      },
      "CancellationPolicyCreatedModel": {
        "title": "CancellationPolicyCreatedModel",
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The cancellation policy ID"
          }
        },
        "example": {
          "id": "MUC-FLE"
        }
      },
      "CancellationPolicyItemModel": {
        "title": "CancellationPolicyItemModel",
        "required": [
          "id",
          "name",
          "code",
          "description",
          "propertyId",
          "periodFromReference",
          "reference",
          "fee"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id"
          },
          "name": {
            "type": "string",
            "description": "Name"
          },
          "code": {
            "type": "string",
            "description": "The code for the cancellation policy"
          },
          "description": {
            "type": "string",
            "description": "Description"
          },
          "propertyId": {
            "type": "string",
            "description": "The id of the property where the cancellation policy was created"
          },
          "periodFromReference": {
            "$ref": "#/components/schemas/PeriodModel"
          },
          "reference": {
            "$ref": "#/components/schemas/Reference"
          },
          "fee": {
            "$ref": "#/components/schemas/FeeDetailsModel"
          }
        }
      },
      "CancellationPolicyListModel": {
        "title": "CancellationPolicyListModel",
        "required": [
          "cancellationPolicies",
          "count"
        ],
        "type": "object",
        "properties": {
          "cancellationPolicies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CancellationPolicyItemModel"
            },
            "description": "List of cancellation policies"
          },
          "count": {
            "type": "integer",
            "description": "Total count of items",
            "format": "int64"
          }
        },
        "example": {
          "cancellationPolicies": [
            {
              "id": "MUC-FLEX",
              "name": "Flexible",
              "code": "FLEX",
              "description": "Free cancellation until 36 hours before arrival.",
              "propertyId": "MUC",
              "periodFromReference": {
                "hours": 12,
                "days": 1,
                "months": 0
              },
              "reference": "PriorToArrival",
              "fee": {
                "vatType": "Reduced",
                "fixedValue": {
                  "amount": 100,
                  "currency": "EUR"
                }
              }
            },
            {
              "id": "BER-NONREF",
              "name": "Non Refundable",
              "code": "NONREF",
              "description": "25% refund up until 1 week prior to arrival.",
              "propertyId": "BER",
              "periodFromReference": {
                "hours": 0,
                "days": 0,
                "months": 0
              },
              "reference": "AfterBooking",
              "fee": {
                "vatType": "Reduced",
                "percentValue": {
                  "percent": 100,
                  "limit": 1,
                  "includeServiceIds": [
                    "MUC-BRK"
                  ]
                }
              }
            }
          ],
          "count": 2
        }
      },
      "CancellationPolicyModel": {
        "title": "CancellationPolicyModel",
        "required": [
          "id",
          "code",
          "name",
          "description",
          "propertyId",
          "periodFromReference",
          "reference",
          "fee"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The cancellation policy id"
          },
          "code": {
            "maxLength": 10,
            "minLength": 3,
            "pattern": "^[a-zA-Z0-9_]*$",
            "type": "string",
            "description": "The code for the policy"
          },
          "name": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "The name for the cancellation policy"
          },
          "description": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "The description for the cancellation policy"
          },
          "propertyId": {
            "type": "string",
            "description": "The id of the property where the cancellation policy was created"
          },
          "periodFromReference": {
            "$ref": "#/components/schemas/PeriodModel"
          },
          "reference": {
            "$ref": "#/components/schemas/Reference"
          },
          "fee": {
            "$ref": "#/components/schemas/FeeDetailsModel"
          }
        },
        "example": {
          "id": "MUC-FLE",
          "code": "FLE",
          "name": {
            "en": "Flexible",
            "de": "Flexibel"
          },
          "description": {
            "en": "Free cancellation until 36 hours before arrival.",
            "de": "Kostenfreies Storno bis 36 Stunden vor Ankunft."
          },
          "propertyId": "MUC",
          "periodFromReference": {
            "hours": 12,
            "days": 1
          },
          "reference": "PriorToArrival",
          "fee": {
            "vatType": "Reduced",
            "percentValue": {
              "percent": 100,
              "limit": 1,
              "includeServiceIds": [
                "MUC-BRK"
              ]
            }
          }
        }
      },
      "CompanyAddressModel": {
        "title": "CompanyAddressModel",
        "required": [
          "addressLine1",
          "postalCode",
          "city",
          "countryCode"
        ],
        "type": "object",
        "properties": {
          "addressLine1": {
            "type": "string"
          },
          "addressLine2": {
            "type": "string"
          },
          "postalCode": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "regionCode": {
            "type": "string"
          },
          "countryCode": {
            "type": "string"
          }
        }
      },
      "CompanyCreatedModel": {
        "title": "CompanyCreatedModel",
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The company ID"
          }
        },
        "example": {
          "id": "MUC-UMBRELLA"
        }
      },
      "CompanyListModel": {
        "title": "CompanyListModel",
        "required": [
          "companies",
          "count"
        ],
        "type": "object",
        "properties": {
          "companies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CompanyModel"
            },
            "description": "List of companies"
          },
          "count": {
            "type": "integer",
            "description": "Total count of items",
            "format": "int64"
          }
        },
        "example": {
          "companies": [
            {
              "id": "MUC-UMBRELLA",
              "code": "UMBRELLA",
              "propertyId": "MUC",
              "name": "Umbrella Corp.",
              "taxId": "Tax 123456",
              "address": {
                "addressLine1": "Marienplatz 1",
                "postalCode": "80331",
                "city": "München",
                "countryCode": "DE"
              },
              "canCheckOutOnAr": true
            },
            {
              "id": "BER-ACME",
              "code": "ACME",
              "propertyId": "BER",
              "name": "ACME Inc.",
              "taxId": "Tax 5552221",
              "address": {
                "addressLine1": "Marienplatz 1",
                "postalCode": "80331",
                "city": "München",
                "countryCode": "DE"
              },
              "canCheckOutOnAr": false
            }
          ],
          "count": 0
        }
      },
      "CompanyModel": {
        "title": "CompanyModel",
        "required": [
          "id",
          "code",
          "propertyId",
          "name",
          "address",
          "canCheckOutOnAr"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of this company"
          },
          "code": {
            "type": "string",
            "description": "The code for the company"
          },
          "propertyId": {
            "type": "string",
            "description": "The ID of the property"
          },
          "name": {
            "type": "string",
            "description": "The name of the company"
          },
          "taxId": {
            "type": "string",
            "description": "The tax ID of the company"
          },
          "address": {
            "$ref": "#/components/schemas/CompanyAddressModel"
          },
          "canCheckOutOnAr": {
            "type": "boolean",
            "description": "Whether or not the company is allowed to check out on AR / invoice"
          },
          "ratePlans": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RatePlanCompanyModel"
            },
            "description": "Rate plans that can be booked by this company"
          }
        },
        "example": {
          "id": "MUC-UMBRELLA",
          "code": "UMBRELLA",
          "propertyId": "MUC",
          "name": "Umbrella Corp.",
          "taxId": "Tax 123456",
          "address": {
            "addressLine1": "Marienplatz 1",
            "postalCode": "80331",
            "city": "München",
            "countryCode": "DE"
          },
          "canCheckOutOnAr": true,
          "ratePlans": [
            {
              "id": "MUC-DBL",
              "code": "DBL",
              "corporateCode": "UMBRELLAINC",
              "name": "Double room flexible"
            }
          ]
        }
      },
      "CompanyRatePlanModel": {
        "title": "CompanyRatePlanModel",
        "required": [
          "id",
          "code",
          "corporateCode",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Company ID that can use this rate plan"
          },
          "code": {
            "type": "string",
            "description": "The code of the company that can book this rate plan"
          },
          "corporateCode": {
            "type": "string",
            "description": "Company rate plan code, identifying the company + rate plan pair. Is used is offers."
          },
          "name": {
            "type": "string",
            "description": "The name of the company that can book this rate plan"
          }
        }
      },
      "CorporateCodeListModel": {
        "title": "CorporateCodeListModel",
        "required": [
          "corporateCodes",
          "count"
        ],
        "type": "object",
        "properties": {
          "corporateCodes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CorporateCodeModel"
            },
            "description": "List of existing corporate codes"
          },
          "count": {
            "type": "integer",
            "description": "Total count of items",
            "format": "int64"
          }
        },
        "example": {
          "corporateCodes": [
            {
              "code": "APALEO-NONREF"
            }
          ],
          "count": 1
        }
      },
      "CorporateCodeModel": {
        "title": "CorporateCodeModel",
        "required": [
          "code"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The corporate rate code"
          }
        }
      },
      "CountModel": {
        "title": "CountModel",
        "required": [
          "count"
        ],
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "format": "int64"
          }
        },
        "example": {
          "count": 50
        }
      },
      "CreateAgeCategoryModel": {
        "title": "CreateAgeCategoryModel",
        "required": [
          "code",
          "propertyId",
          "name",
          "minAge",
          "maxAge"
        ],
        "type": "object",
        "properties": {
          "code": {
            "maxLength": 10,
            "minLength": 3,
            "pattern": "^[a-zA-Z0-9_]*$",
            "type": "string",
            "description": "The code for the age category"
          },
          "propertyId": {
            "type": "string",
            "description": "The id of the property for which the age category will be created"
          },
          "name": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "The name for the age category"
          },
          "minAge": {
            "maximum": 17,
            "minimum": 0,
            "type": "integer",
            "description": "The minimum age for the age category. The specified value is included in the age range",
            "format": "int32"
          },
          "maxAge": {
            "maximum": 17,
            "minimum": 0,
            "type": "integer",
            "description": "The maximum age for the age category. The specified value is included in the age range and the maximum value\r\nis 17",
            "format": "int32"
          }
        },
        "example": {
          "code": "BABY",
          "propertyId": "MUC",
          "name": {
            "en": "Baby",
            "de": "Kind"
          },
          "minAge": 0,
          "maxAge": 2
        }
      },
      "CreateCancellationPolicyModel": {
        "title": "CreateCancellationPolicyModel",
        "required": [
          "code",
          "name",
          "description",
          "propertyId",
          "reference",
          "fee"
        ],
        "type": "object",
        "properties": {
          "code": {
            "maxLength": 10,
            "minLength": 3,
            "pattern": "^[a-zA-Z0-9_]*$",
            "type": "string",
            "description": "The code for the cancellation policy, used to assemble its id"
          },
          "name": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "The name for the cancellation policy"
          },
          "description": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "The description for the cancellation policy"
          },
          "propertyId": {
            "type": "string",
            "description": "The id of the property where the cancellation policy will be created"
          },
          "periodFromReference": {
            "$ref": "#/components/schemas/PeriodModel"
          },
          "reference": {
            "$ref": "#/components/schemas/Reference2"
          },
          "fee": {
            "$ref": "#/components/schemas/FeeDetailsModel"
          }
        },
        "example": {
          "code": "FLE",
          "name": {
            "en": "Flexible",
            "de": "Flexibel"
          },
          "description": {
            "en": "Free cancellation until 36 hours before arrival.",
            "de": "Kostenfreies Storno bis 36 Stunden vor Ankunft."
          },
          "propertyId": "MUC",
          "periodFromReference": {
            "hours": 12,
            "days": 1
          },
          "reference": "PriorToArrival",
          "fee": {
            "vatType": "Reduced",
            "percentValue": {
              "percent": 100,
              "limit": 1,
              "includeServiceIds": [
                "MUC-BRK"
              ]
            }
          }
        }
      },
      "CreateCompanyModel": {
        "title": "CreateCompanyModel",
        "required": [
          "code",
          "propertyId",
          "name",
          "address",
          "canCheckOutOnAr"
        ],
        "type": "object",
        "properties": {
          "code": {
            "maxLength": 10,
            "minLength": 3,
            "pattern": "^[a-zA-Z0-9_]*$",
            "type": "string",
            "description": "The code for the company"
          },
          "propertyId": {
            "type": "string",
            "description": "The ID of the property"
          },
          "name": {
            "type": "string",
            "description": "The name of the company"
          },
          "taxId": {
            "type": "string",
            "description": "The tax ID of the company"
          },
          "address": {
            "$ref": "#/components/schemas/AddressModel"
          },
          "canCheckOutOnAr": {
            "type": "boolean",
            "description": "Whether or not the company is allowed to check out on AR / invoice"
          },
          "ratePlans": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateRatePlanCompanyModel"
            },
            "description": "Rate plans that can be booked by this company"
          }
        },
        "example": {
          "code": "UMBRELLA",
          "propertyId": "MUC",
          "name": "Umbrella Corp.",
          "taxId": "Tax 123456",
          "address": {
            "addressLine1": "Marienplatz 1",
            "postalCode": "80331",
            "city": "München",
            "countryCode": "DE"
          },
          "canCheckOutOnAr": true,
          "ratePlans": [
            {
              "id": "MUC-DBL",
              "corporateCode": "UMBRELLAINC"
            }
          ]
        }
      },
      "CreateCompanyRatePlanModel": {
        "title": "CreateCompanyRatePlanModel",
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Company ID that can use this rate plan"
          },
          "corporateCode": {
            "type": "string",
            "description": "Optional rate plan code that is used by the company. Default is companyCode-ratePlanCode.\r\nSame code can be specified for several rate plans in one company.\r\nNo two companies can have a rate plan with the same code."
          }
        }
      },
      "CreateNoShowPolicyModel": {
        "title": "CreateNoShowPolicyModel",
        "required": [
          "code",
          "name",
          "description",
          "propertyId",
          "fee"
        ],
        "type": "object",
        "properties": {
          "code": {
            "maxLength": 10,
            "minLength": 3,
            "pattern": "^[a-zA-Z0-9_]*$",
            "type": "string",
            "description": "The code for the no-show policy, used to assemble its id"
          },
          "name": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "The name for the no-show policy"
          },
          "description": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "The description for the no-show policy"
          },
          "propertyId": {
            "type": "string",
            "description": "The id of the property where the no-show policy will be created"
          },
          "fee": {
            "$ref": "#/components/schemas/FeeDetailsModel"
          }
        },
        "example": {
          "code": "NONREF",
          "name": {
            "en": "No-Show Fee",
            "de": "No-Show Fee"
          },
          "description": {
            "en": "100% of the accommodation fees, for the complete stay.",
            "de": "100% of the accommodation fees, for the complete stay."
          },
          "propertyId": "MUC",
          "fee": {
            "vatType": "Null",
            "fixedValue": {
              "amount": 100,
              "currency": "EUR"
            }
          }
        }
      },
      "CreatePricingRuleModel": {
        "title": "CreatePricingRuleModel",
        "required": [
          "baseRatePlanId",
          "type",
          "value"
        ],
        "type": "object",
        "properties": {
          "baseRatePlanId": {
            "type": "string",
            "description": "The id of the rate plan that will be used as base when calculating the rates.\r\nThe derivation level of the rate plan used as base rate plan cannot be greater than 2"
          },
          "type": {
            "$ref": "#/components/schemas/Type"
          },
          "value": {
            "type": "number",
            "description": "The value used to control the calculation of the difference to the rates of the defined base\r\nrate plan. It can be a positive and a negative value. The system will prevent you to define\r\na value that would lead to negative rates"
          }
        }
      },
      "CreateRatePlanCompanyModel": {
        "title": "CreateRatePlanCompanyModel",
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Rate plan ID that is used by this company"
          },
          "corporateCode": {
            "type": "string",
            "description": "Optional rate plan code that is used by this company. Default is companyCode-ratePlanCode.\r\nSame code can be specified for several rate plans in one company.\r\nNo two companies can have a rate plan with the same code."
          }
        }
      },
      "CreateRatePlanModel": {
        "title": "CreateRatePlanModel",
        "required": [
          "code",
          "propertyId",
          "unitGroupId",
          "cancellationPolicyId",
          "channelCodes",
          "timeSliceDefinitionId",
          "name",
          "description",
          "minGuaranteeType"
        ],
        "type": "object",
        "properties": {
          "code": {
            "maxLength": 20,
            "minLength": 3,
            "pattern": "^[a-zA-Z0-9_]*$",
            "type": "string",
            "description": "The code for the rate plan that can be shown in reports and table views"
          },
          "propertyId": {
            "type": "string",
            "description": "The id of the property for which the rate plan will be created"
          },
          "unitGroupId": {
            "type": "string",
            "description": "The id of the unit group offered with this rate plan"
          },
          "cancellationPolicyId": {
            "type": "string",
            "description": "The id of the cancellation policy valid for this rate plan"
          },
          "noShowPolicyId": {
            "type": "string",
            "description": "The id of the no-show policy valid for this rate plan"
          },
          "channelCodes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChannelCode"
            },
            "description": "The channel codes the rate plan is sold through"
          },
          "promoCodes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The rate codes for promotional and hidden rates. If at least one code is set the rate will be not publicly visible\r\nanymore and only be offered when one of the promo codes is given in the offer request.\r\nFor backward compatibility it is still not possible to set multiple promo codes."
          },
          "isSubjectToCityTax": {
            "type": "boolean",
            "description": "Whether the rate plan is subject to city tax or not.\r\nDefault value is {true}"
          },
          "timeSliceDefinitionId": {
            "type": "string",
            "description": "Defines the time periods for which the unit group related to this rate plan is rented out"
          },
          "name": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "The name for the rate plan"
          },
          "description": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "The description for the rate plan"
          },
          "minGuaranteeType": {
            "$ref": "#/components/schemas/MinGuaranteeType"
          },
          "priceCalculationMode": {
            "$ref": "#/components/schemas/PriceCalculationMode"
          },
          "bookingPeriods": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BookingPeriodModel"
            },
            "description": "Time periods when the rate plan is bookable"
          },
          "restrictions": {
            "$ref": "#/components/schemas/BookingRestrictionsModel"
          },
          "pricingRule": {
            "$ref": "#/components/schemas/CreatePricingRuleModel"
          },
          "surcharges": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SurchargeModel"
            },
            "description": "Additional charges for more than single occupancy. The percent or absolute value will be added to\r\nthe manually defined or calculated derived rates.\r\nThe values for 'adults' must be unique within the list and starting from occupancy of 2 adults. Values higher than the maximum unit group occupancy will be silently ignored.\r\nThe surcharges are required for all possible occupancies defined by the 'MaxPersons' of the unit group."
          },
          "ageCategories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RatePlanAgeCategoryModel"
            },
            "description": "Additional charges per age category."
          },
          "includedServices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RatePlanServiceModel"
            },
            "description": "Services that are included in the rate plan"
          },
          "companies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateCompanyRatePlanModel"
            },
            "description": "Companies that can use this rate plan"
          },
          "accountingConfigs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccountingConfigModel"
            },
            "description": "The collection of accounting configs with validity periods.\r\nThis is a temporary field, avoid using it."
          }
        },
        "example": {
          "code": "NONREF",
          "propertyId": "MUC",
          "unitGroupId": "MUC-DBL",
          "cancellationPolicyId": "MUC-FLE",
          "channelCodes": [
            "Direct",
            "BookingCom",
            "Ibe"
          ],
          "promoCodes": [
            "APA55100",
            "DISCOUNT20"
          ],
          "isSubjectToCityTax": true,
          "timeSliceDefinitionId": "MUC-NIGHT",
          "name": {
            "de": "Nicht Stornierbar",
            "en": "Non Refundable"
          },
          "description": {
            "de": "Nicht Stornierbar",
            "en": "Non Refundable"
          },
          "minGuaranteeType": "PM6Hold",
          "priceCalculationMode": "Truncate",
          "bookingPeriods": [
            {
              "from": "2022-04-21T13:46:24.7698564+02:00",
              "to": "2022-05-05T13:46:24.7698564+02:00"
            },
            {
              "from": "2022-05-08T13:46:24.7698564+02:00",
              "to": "2022-06-27T13:46:24.7698564+02:00"
            }
          ],
          "restrictions": {
            "minAdvance": {
              "hours": 12,
              "days": 180
            },
            "maxAdvance": {
              "months": 24
            }
          },
          "pricingRule": {
            "baseRatePlanId": "MUC-NONREF-SGL",
            "type": "Absolute",
            "value": 20
          },
          "surcharges": [
            {
              "adults": 2,
              "type": "Absolute",
              "value": 10
            }
          ],
          "ageCategories": [
            {
              "id": "MUC-BABY",
              "surcharges": [
                {
                  "adults": 1,
                  "value": 20
                }
              ]
            }
          ],
          "includedServices": [
            {
              "serviceId": "MUC-BRKF",
              "grossPrice": {
                "amount": 10,
                "currency": "EUR"
              }
            }
          ],
          "companies": [
            {
              "id": "MUC-APA",
              "corporateCode": "APA-DBL"
            }
          ],
          "accountingConfigs": [
            {
              "state": "Unknown",
              "vatType": "Normal",
              "serviceType": "FoodAndBeverages",
              "subAccountId": "ALCO",
              "validFrom": "2021-01-01"
            }
          ]
        }
      },
      "CreateServiceModel": {
        "title": "CreateServiceModel",
        "required": [
          "code",
          "name",
          "description",
          "propertyId",
          "defaultGrossPrice",
          "pricingUnit",
          "postNextDay"
        ],
        "type": "object",
        "properties": {
          "code": {
            "maxLength": 10,
            "minLength": 3,
            "pattern": "^[a-zA-Z0-9_]*$",
            "type": "string",
            "description": "The code for the service that can be shown in reports and table views"
          },
          "name": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "The name for the service"
          },
          "description": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "The description for the service"
          },
          "propertyId": {
            "type": "string",
            "description": "The id of the property where the item will be created"
          },
          "defaultGrossPrice": {
            "$ref": "#/components/schemas/MonetaryValueModel"
          },
          "pricingUnit": {
            "$ref": "#/components/schemas/PricingUnit"
          },
          "postNextDay": {
            "type": "boolean",
            "description": "Whether the service is delivered and posted on the same business date as the accommodation, or on the next day."
          },
          "availability": {
            "$ref": "#/components/schemas/AvailabilityModel"
          },
          "channelCodes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChannelCode"
            },
            "description": "The channel codes the service is sold through. When no channels are defined, the service is sold only in a package"
          },
          "accountingConfigs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccountingConfigModel"
            },
            "description": "The collection of accounting configs with validity periods.\r\nThis is a temporary field, avoid using it."
          }
        },
        "example": {
          "code": "BRK",
          "name": {
            "en": "Breakfast",
            "de": "Frühstück"
          },
          "description": {
            "en": "Yummy yummy breakfast",
            "de": "Leckeres Frühstück"
          },
          "propertyId": "MUC",
          "defaultGrossPrice": {
            "amount": 20,
            "currency": "EUR"
          },
          "pricingUnit": "Person",
          "postNextDay": true,
          "availability": {
            "mode": "Daily",
            "quantity": 3,
            "daysOfWeek": [
              "Monday",
              "Tuesday",
              "Wednesday",
              "Thursday",
              "Friday",
              "Saturday",
              "Sunday"
            ]
          },
          "channelCodes": [
            "Direct",
            "Ibe",
            "BookingCom",
            "ChannelManager"
          ],
          "accountingConfigs": [
            {
              "state": "Unknown",
              "vatType": "Normal",
              "serviceType": "FoodAndBeverages",
              "subAccountId": "ALCO",
              "validFrom": "2021-01-01"
            }
          ]
        }
      },
      "EmbeddedCancellationPolicyModel": {
        "title": "EmbeddedCancellationPolicyModel",
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The cancellation policy id"
          },
          "code": {
            "type": "string",
            "description": "The code for the cancellation policy that can be shown in reports and table views"
          },
          "name": {
            "type": "string",
            "description": "The name for the cancellation policy"
          },
          "description": {
            "type": "string",
            "description": "The description for the cancellation policy"
          },
          "periodPriorToArrival": {
            "$ref": "#/components/schemas/PeriodModel"
          }
        }
      },
      "EmbeddedNoShowPolicyModel": {
        "title": "EmbeddedNoShowPolicyModel",
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The no-show policy id"
          },
          "code": {
            "type": "string",
            "description": "The code for the no-show policy that can be shown in reports and table views"
          },
          "name": {
            "type": "string",
            "description": "The name for the no-show policy"
          },
          "description": {
            "type": "string",
            "description": "The description for the no-show policy"
          }
        }
      },
      "EmbeddedPropertyModel": {
        "title": "EmbeddedPropertyModel",
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The property id"
          },
          "code": {
            "type": "string",
            "description": "The code for the property that can be shown in reports and table views"
          },
          "name": {
            "type": "string",
            "description": "The name for the property"
          },
          "description": {
            "type": "string",
            "description": "The description for the property"
          }
        }
      },
      "EmbeddedRatePlanModel": {
        "title": "EmbeddedRatePlanModel",
        "required": [
          "id",
          "isSubjectToCityTax"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The rate plan id"
          },
          "code": {
            "type": "string",
            "description": "The code for the rate plan that can be shown in reports and table views"
          },
          "name": {
            "type": "string",
            "description": "The name for the rate plan"
          },
          "description": {
            "type": "string",
            "description": "The description for the rate plan"
          },
          "isSubjectToCityTax": {
            "type": "boolean",
            "description": "Whether the rate plan is subject to city tax or not"
          }
        }
      },
      "EmbeddedServiceModel": {
        "title": "EmbeddedServiceModel",
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The service id"
          },
          "code": {
            "type": "string",
            "description": "The code for the service"
          },
          "name": {
            "type": "string",
            "description": "The name for the service"
          },
          "description": {
            "type": "string",
            "description": "The description for the service"
          }
        }
      },
      "EmbeddedTimeSliceDefinitionModel": {
        "title": "EmbeddedTimeSliceDefinitionModel",
        "required": [
          "id",
          "name",
          "template",
          "checkInTime",
          "checkOutTime"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The time slice definition id"
          },
          "name": {
            "type": "string",
            "description": "The name for the time slice definition"
          },
          "template": {
            "$ref": "#/components/schemas/Template"
          },
          "checkInTime": {
            "type": "string",
            "description": "The check-in time for reservations based on this rate plan<br />A time (without fractional second part) as defined in the <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>"
          },
          "checkOutTime": {
            "type": "string",
            "description": "The check-out time for reservations based on this rate plan<br />A time (without fractional second part) as defined in the <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>"
          }
        }
      },
      "EmbeddedUnitGroupModel": {
        "title": "EmbeddedUnitGroupModel",
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unit group id"
          },
          "code": {
            "type": "string",
            "description": "The code for the unit group that can be shown in reports and table views"
          },
          "name": {
            "type": "string",
            "description": "The name for the unit group"
          },
          "description": {
            "type": "string",
            "description": "The description for the unit group"
          },
          "type": {
            "$ref": "#/components/schemas/Type2"
          }
        }
      },
      "FeeDetailsModel": {
        "title": "FeeDetailsModel",
        "required": [
          "vatType"
        ],
        "type": "object",
        "properties": {
          "vatType": {
            "$ref": "#/components/schemas/VatType1"
          },
          "fixedValue": {
            "$ref": "#/components/schemas/MonetaryValueModel"
          },
          "percentValue": {
            "$ref": "#/components/schemas/PercentValueModel"
          }
        }
      },
      "MessageItemCollection": {
        "title": "MessageItemCollection",
        "type": "object",
        "properties": {
          "messages": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": ""
          }
        }
      },
      "MonetaryValueModel": {
        "title": "MonetaryValueModel",
        "required": [
          "amount",
          "currency"
        ],
        "type": "object",
        "properties": {
          "amount": {
            "type": "number"
          },
          "currency": {
            "type": "string"
          }
        }
      },
      "NoShowPolicyCreatedModel": {
        "title": "NoShowPolicyCreatedModel",
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The no-show policy ID"
          }
        },
        "example": {
          "id": "MUC-NONREF"
        }
      },
      "NoShowPolicyItemModel": {
        "title": "NoShowPolicyItemModel",
        "required": [
          "id",
          "code",
          "name",
          "description",
          "propertyId",
          "fee"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The no-show policy id"
          },
          "code": {
            "type": "string",
            "description": "The code for the policy"
          },
          "name": {
            "type": "string",
            "description": "The name for the no-show policy"
          },
          "description": {
            "type": "string",
            "description": "The description for the no-show policy"
          },
          "propertyId": {
            "type": "string",
            "description": "The id of the property where the no-show policy was created"
          },
          "fee": {
            "$ref": "#/components/schemas/FeeDetailsModel"
          }
        }
      },
      "NoShowPolicyListModel": {
        "title": "NoShowPolicyListModel",
        "required": [
          "noShowPolicies",
          "count"
        ],
        "type": "object",
        "properties": {
          "noShowPolicies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NoShowPolicyItemModel"
            },
            "description": "List of no-show policies"
          },
          "count": {
            "type": "integer",
            "description": "Total count of items",
            "format": "int64"
          }
        },
        "example": {
          "noShowPolicies": [
            {
              "id": "MUC-FLEX",
              "code": "FLEX",
              "name": "No-Show Fee",
              "description": "100 Euro of the accommodation fees, for the complete stay. Reduced VAT applies.",
              "propertyId": "MUC",
              "fee": {
                "vatType": "Reduced",
                "fixedValue": {
                  "amount": 100,
                  "currency": "EUR"
                }
              }
            },
            {
              "id": "BER-NONREF",
              "code": "NONREF",
              "name": "No-Show Fee",
              "description": "100% of the accommodation fees, for the complete stay. Reduced VAT applies.",
              "propertyId": "BER",
              "fee": {
                "vatType": "Reduced",
                "percentValue": {
                  "percent": 100,
                  "limit": 1,
                  "includeServiceIds": [
                    "MUC-BRK"
                  ]
                }
              }
            }
          ],
          "count": 2
        }
      },
      "NoShowPolicyModel": {
        "title": "NoShowPolicyModel",
        "required": [
          "id",
          "code",
          "name",
          "description",
          "propertyId",
          "fee"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The no-show policy id"
          },
          "code": {
            "maxLength": 10,
            "minLength": 3,
            "pattern": "^[a-zA-Z0-9_]*$",
            "type": "string",
            "description": "The code for the policy"
          },
          "name": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "The name for the no-show policy"
          },
          "description": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "The description for the no-show policy"
          },
          "propertyId": {
            "type": "string",
            "description": "The id of the property where the no-show policy was created"
          },
          "fee": {
            "$ref": "#/components/schemas/FeeDetailsModel"
          }
        },
        "example": {
          "id": "MUC-NOSHOW",
          "code": "NOSHOW",
          "name": {
            "en": "No-Show Fee",
            "de": "No-Show Fee"
          },
          "description": {
            "en": "100% of the accommodation fees, for the complete stay. Reduced VAT applies.",
            "de": "100% of the accommodation fees, for the complete stay. Reduced VAT applies."
          },
          "propertyId": "MUC",
          "fee": {
            "vatType": "Reduced",
            "percentValue": {
              "percent": 100,
              "limit": 1,
              "includeServiceIds": [
                "MUC-BRK"
              ]
            }
          }
        }
      },
      "Operation": {
        "title": "Operation",
        "type": "object",
        "properties": {
          "value": {},
          "path": {
            "type": "string"
          },
          "op": {
            "type": "string"
          },
          "from": {
            "type": "string"
          }
        }
      },
      "PercentValueModel": {
        "title": "PercentValueModel",
        "required": [
          "percent"
        ],
        "type": "object",
        "properties": {
          "percent": {
            "maximum": 100,
            "minimum": 0,
            "type": "integer",
            "description": "Percent to take from the base. Must be between 0 and 100.",
            "format": "int32"
          },
          "limit": {
            "type": "integer",
            "description": "If set, limits the calculation base to the specified number of time slices, starting from the beginning.<br />\r\nIf not set, the entire stay will be used as a base.",
            "format": "int32"
          },
          "includeServiceIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Services included in the calculation base. If none are set, only charges for the unit will be used.<br />\r\nThe services are only included, if they are part of the rate plan. Extra services are ignored."
          }
        }
      },
      "PeriodModel": {
        "title": "PeriodModel",
        "type": "object",
        "properties": {
          "hours": {
            "type": "integer",
            "description": "The number of hours within the period",
            "format": "int64"
          },
          "days": {
            "type": "integer",
            "description": "The number of days within the period",
            "format": "int32"
          },
          "months": {
            "type": "integer",
            "description": "The number of months within the period",
            "format": "int32"
          }
        }
      },
      "PricingRuleModel": {
        "title": "PricingRuleModel",
        "required": [
          "baseRatePlan",
          "type",
          "value"
        ],
        "type": "object",
        "properties": {
          "baseRatePlan": {
            "$ref": "#/components/schemas/EmbeddedRatePlanModel"
          },
          "type": {
            "$ref": "#/components/schemas/Type"
          },
          "value": {
            "type": "number",
            "description": "The value used to control the calculation of the difference to the rates of the defined base\r\nrate plan. It can be a positive and a negative value"
          }
        }
      },
      "PromoCodeListModel": {
        "title": "PromoCodeListModel",
        "required": [
          "promoCodes",
          "count"
        ],
        "type": "object",
        "properties": {
          "promoCodes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PromoCodeModel"
            },
            "description": "List of existing promo codes"
          },
          "count": {
            "type": "integer",
            "description": "Total count of items",
            "format": "int64"
          }
        },
        "example": {
          "promoCodes": [
            {
              "code": "APALEO",
              "relatedRateplanIds": [
                "BER-APALEO_FREE-SGL",
                "BER-APALEO_FREE-DBL",
                "MUC-APALEO_KING-SUITE"
              ]
            }
          ],
          "count": 5
        }
      },
      "PromoCodeModel": {
        "title": "PromoCodeModel",
        "required": [
          "code",
          "relatedRateplanIds"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The code of special rate or discount\r\nor agreement between the hotel and an organization"
          },
          "relatedRateplanIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "All rate plan IDs having this code"
          }
        }
      },
      "RateItemModel": {
        "title": "RateItemModel",
        "required": [
          "from",
          "to"
        ],
        "type": "object",
        "properties": {
          "from": {
            "type": "string",
            "description": "Date and time the rate begins<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
            "format": "date-time"
          },
          "to": {
            "type": "string",
            "description": "Date and time the rate ends<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
            "format": "date-time"
          },
          "price": {
            "$ref": "#/components/schemas/MonetaryValueModel"
          },
          "includedServicesPrice": {
            "$ref": "#/components/schemas/MonetaryValueModel"
          },
          "calculatedPrices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CalculatedRateModel"
            },
            "description": "A list of prices for occupancies 2 or higher. Only set, if the rate plan defines surcharges for different occupancies"
          },
          "restrictions": {
            "$ref": "#/components/schemas/RateRestrictionsModel"
          }
        }
      },
      "RateListModel": {
        "title": "RateListModel",
        "required": [
          "rates",
          "count"
        ],
        "type": "object",
        "properties": {
          "rates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RateItemModel"
            },
            "description": "List of rates"
          },
          "count": {
            "type": "integer",
            "description": "Total count of items",
            "format": "int64"
          }
        },
        "example": {
          "rates": [
            {
              "from": "2022-04-28T17:00:00+02:00",
              "to": "2022-04-29T11:00:00+02:00",
              "price": {
                "amount": 123,
                "currency": "EUR"
              },
              "calculatedPrices": [
                {
                  "adults": 2,
                  "price": {
                    "amount": 133,
                    "currency": "EUR"
                  }
                }
              ],
              "restrictions": {
                "minLengthOfStay": 2,
                "maxLengthOfStay": 30,
                "closed": false,
                "closedOnArrival": true,
                "closedOnDeparture": true
              }
            }
          ],
          "count": 0
        }
      },
      "RatePlanAgeCategoryModel": {
        "title": "RatePlanAgeCategoryModel",
        "required": [
          "id",
          "surcharges"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the age category"
          },
          "surcharges": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AgeCategorySurchargeModel"
            },
            "description": "Additional charges for the current age category. The absolute value will be added to the manually defined or calculated derived rates.\r\nThe values for 'adults' must be unique within the list, and starting from 1. Values equal or higher than\r\nthe maximum unit group occupancy will be silently ignored."
          }
        }
      },
      "RatePlanCodeListModel": {
        "title": "RatePlanCodeListModel",
        "required": [
          "ratePlanCodes",
          "count"
        ],
        "type": "object",
        "properties": {
          "ratePlanCodes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RatePlanCodeModel"
            },
            "description": "List of existing rate plan codes"
          },
          "count": {
            "type": "integer",
            "description": "Total count of items",
            "format": "int64"
          }
        },
        "example": {
          "ratePlanCodes": [
            {
              "code": "NONREF"
            }
          ],
          "count": 1
        }
      },
      "RatePlanCodeModel": {
        "title": "RatePlanCodeModel",
        "required": [
          "code"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The rate plan code"
          }
        }
      },
      "RatePlanCompanyModel": {
        "title": "RatePlanCompanyModel",
        "required": [
          "id",
          "code",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Rate plan ID that is used by this company"
          },
          "code": {
            "type": "string",
            "description": "Rate plan code that is used by this company"
          },
          "corporateCode": {
            "type": "string",
            "description": "Company rate plan code, identifying the company + rate plan pair. Is used is offers."
          },
          "name": {
            "type": "string",
            "description": "The name of the rate plan"
          }
        }
      },
      "RatePlanCreatedModel": {
        "title": "RatePlanCreatedModel",
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The rate plan id"
          }
        },
        "example": {
          "id": "MUC-NONREF-DBL"
        }
      },
      "RatePlanItemModel": {
        "title": "RatePlanItemModel",
        "required": [
          "id",
          "code",
          "name",
          "description",
          "minGuaranteeType",
          "property",
          "unitGroup",
          "cancellationPolicy",
          "noShowPolicy",
          "channelCodes",
          "timeSliceDefinition",
          "isBookable",
          "isSubjectToCityTax",
          "isDerived",
          "derivationLevel",
          "accountingConfigs"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The rate plan id"
          },
          "code": {
            "type": "string",
            "description": "The code for the rate plan that can be shown in reports and table views"
          },
          "name": {
            "type": "string",
            "description": "The name for the rate plan"
          },
          "description": {
            "type": "string",
            "description": "The description for the rate plan"
          },
          "minGuaranteeType": {
            "$ref": "#/components/schemas/MinGuaranteeType"
          },
          "priceCalculationMode": {
            "$ref": "#/components/schemas/PriceCalculationMode"
          },
          "property": {
            "$ref": "#/components/schemas/EmbeddedPropertyModel"
          },
          "unitGroup": {
            "$ref": "#/components/schemas/EmbeddedUnitGroupModel"
          },
          "cancellationPolicy": {
            "$ref": "#/components/schemas/EmbeddedCancellationPolicyModel"
          },
          "noShowPolicy": {
            "$ref": "#/components/schemas/EmbeddedNoShowPolicyModel"
          },
          "channelCodes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChannelCode"
            },
            "description": "The channel codes the rate plan is sold through"
          },
          "promoCodes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The rate codes for promotional and hidden rates. If at least one code is set the rate will be not publicly visible\r\nanymore and only be offered when one of the promo codes is given in the offer request.\r\nFor backward compatibility it is still not possible to set multiple promo codes."
          },
          "timeSliceDefinition": {
            "$ref": "#/components/schemas/EmbeddedTimeSliceDefinitionModel"
          },
          "restrictions": {
            "$ref": "#/components/schemas/BookingRestrictionsModel"
          },
          "bookingPeriods": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BookingPeriodModel"
            },
            "description": "Time periods when the rate plan is bookable"
          },
          "isBookable": {
            "type": "boolean",
            "description": "Indicates whether the rate plan has an active booking period"
          },
          "isSubjectToCityTax": {
            "type": "boolean",
            "description": "Whether the rate plan is subject to city tax or not"
          },
          "pricingRule": {
            "$ref": "#/components/schemas/PricingRuleModel"
          },
          "isDerived": {
            "type": "boolean",
            "description": "Indicates whether the rates for this rate plan are derived from another rate plan"
          },
          "derivationLevel": {
            "type": "integer",
            "description": "Indicates the derivation level of the rate plan. When zero, it is a rate plan with manually managed prices.",
            "format": "int32"
          },
          "surcharges": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SurchargeModel"
            },
            "description": "Additional charges for more than single occupancy. The percent or absolute value will be added to the manually defined or calculated derived rates."
          },
          "ageCategories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RatePlanAgeCategoryModel"
            },
            "description": "Additional charges per age category."
          },
          "includedServices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RatePlanServiceItemModel"
            },
            "description": "Services that are included in the rate plan"
          },
          "companies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CompanyRatePlanModel"
            },
            "description": "Companies that can use this rate plan"
          },
          "ratesRange": {
            "$ref": "#/components/schemas/RatesRangeModel"
          },
          "accountingConfigs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccountingConfigModel"
            },
            "description": "The collection of accounting configs with validity periods."
          }
        }
      },
      "RatePlanListModel": {
        "title": "RatePlanListModel",
        "required": [
          "ratePlans",
          "count"
        ],
        "type": "object",
        "properties": {
          "ratePlans": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RatePlanItemModel"
            },
            "description": "List of rate plans"
          },
          "count": {
            "type": "integer",
            "description": "Total count of items",
            "format": "int64"
          }
        }
      },
      "RatePlanModel": {
        "title": "RatePlanModel",
        "required": [
          "id",
          "code",
          "name",
          "description",
          "minGuaranteeType",
          "property",
          "unitGroup",
          "cancellationPolicy",
          "noShowPolicy",
          "channelCodes",
          "accountingConfigs",
          "timeSliceDefinition",
          "isBookable",
          "isSubjectToCityTax",
          "isDerived",
          "derivationLevel"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The rate plan  id"
          },
          "code": {
            "type": "string",
            "description": "The code for the rate plan that can be shown in reports and table views"
          },
          "name": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "The name for the rate plan"
          },
          "description": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "The description for the rate plan"
          },
          "minGuaranteeType": {
            "$ref": "#/components/schemas/MinGuaranteeType"
          },
          "priceCalculationMode": {
            "$ref": "#/components/schemas/PriceCalculationMode"
          },
          "property": {
            "$ref": "#/components/schemas/EmbeddedPropertyModel"
          },
          "unitGroup": {
            "$ref": "#/components/schemas/EmbeddedUnitGroupModel"
          },
          "cancellationPolicy": {
            "$ref": "#/components/schemas/EmbeddedCancellationPolicyModel"
          },
          "noShowPolicy": {
            "$ref": "#/components/schemas/EmbeddedNoShowPolicyModel"
          },
          "channelCodes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChannelCode"
            },
            "description": "The channel codes the rate plan is sold through"
          },
          "accountingConfigs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccountingConfigModel"
            },
            "description": "The collection of accounting configs with validity periods."
          },
          "promoCodes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The rate codes for promotional and hidden rates. If at least one code is set the rate will be not publicly visible\r\nanymore and only be offered when one of the promo codes is given in the offer request.\r\nFor backward compatibility it is still not possible to set multiple promo codes."
          },
          "timeSliceDefinition": {
            "$ref": "#/components/schemas/EmbeddedTimeSliceDefinitionModel"
          },
          "restrictions": {
            "$ref": "#/components/schemas/BookingRestrictionsModel"
          },
          "bookingPeriods": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BookingPeriodModel"
            },
            "description": "Time periods when the rate plan is bookable"
          },
          "isBookable": {
            "type": "boolean",
            "description": "Indicates whether the rate plan has an active booking period"
          },
          "isSubjectToCityTax": {
            "type": "boolean",
            "description": "Whether the rate plan is subject to city tax or not.\r\nDefault value is {true}"
          },
          "pricingRule": {
            "$ref": "#/components/schemas/PricingRuleModel"
          },
          "isDerived": {
            "type": "boolean",
            "description": "Indicates whether the rates for this rate plan are derived from another rate plan"
          },
          "derivationLevel": {
            "type": "integer",
            "description": "Indicates the derivation level of the rate plan. When zero, it is a rate plan with manually managed prices.",
            "format": "int32"
          },
          "surcharges": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SurchargeModel"
            },
            "description": "Additional charges for more than single occupancy. The percent or absolute value will be added to the manually defined or calculated derived rates."
          },
          "ageCategories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RatePlanAgeCategoryModel"
            },
            "description": "Additional charges per age category."
          },
          "includedServices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RatePlanServiceModel"
            },
            "description": "Services that are included in the rate plan"
          },
          "companies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CompanyRatePlanModel"
            },
            "description": "Companies that can use this rate plan"
          },
          "ratesRange": {
            "$ref": "#/components/schemas/RatesRangeModel"
          }
        }
      },
      "RatePlanServiceItemModel": {
        "title": "RatePlanServiceItemModel",
        "required": [
          "service",
          "grossPrice",
          "pricingMode"
        ],
        "type": "object",
        "properties": {
          "service": {
            "$ref": "#/components/schemas/EmbeddedServiceModel"
          },
          "grossPrice": {
            "$ref": "#/components/schemas/MonetaryValueModel"
          },
          "pricingMode": {
            "$ref": "#/components/schemas/PricingMode"
          }
        }
      },
      "RatePlanServiceModel": {
        "title": "RatePlanServiceModel",
        "required": [
          "serviceId",
          "grossPrice"
        ],
        "type": "object",
        "properties": {
          "serviceId": {
            "type": "string",
            "description": "Service id to be included in the rate plan"
          },
          "grossPrice": {
            "$ref": "#/components/schemas/MonetaryValueModel"
          },
          "pricingMode": {
            "$ref": "#/components/schemas/PricingMode"
          }
        }
      },
      "RateRestrictionsModel": {
        "title": "RateRestrictionsModel",
        "required": [
          "closed",
          "closedOnArrival",
          "closedOnDeparture"
        ],
        "type": "object",
        "properties": {
          "minLengthOfStay": {
            "maximum": 2147483647,
            "minimum": 1,
            "type": "integer",
            "description": "The minimum length of stay in order to book the rate. If at least this number\r\nof time slices are covered by the stay duration the rate will be offered.",
            "format": "int32"
          },
          "maxLengthOfStay": {
            "maximum": 2147483647,
            "minimum": 1,
            "type": "integer",
            "description": "The maximum length of stay in order to book the rate. If not more than this number\r\nof time slices are covered by the stay duration the rate will be offered.",
            "format": "int32"
          },
          "closed": {
            "type": "boolean",
            "description": "Whether the rate can be booked for a stay-through reservation"
          },
          "closedOnArrival": {
            "type": "boolean",
            "description": "Whether the rate can be booked on the reservation's arrival date"
          },
          "closedOnDeparture": {
            "type": "boolean",
            "description": "Whether the rate can be booked on the reservation's departure date"
          }
        }
      },
      "RatesRangeModel": {
        "title": "RatesRangeModel",
        "required": [
          "from",
          "to"
        ],
        "type": "object",
        "properties": {
          "from": {
            "type": "string",
            "description": "The first date when the rate plan has rates set",
            "format": "date",
            "example": "2020-10-10"
          },
          "to": {
            "type": "string",
            "description": "The last date when the rate plan has rates set",
            "format": "date",
            "example": "2020-10-10"
          }
        }
      },
      "ReplaceCompanyRatePlanModel": {
        "title": "ReplaceCompanyRatePlanModel",
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Company ID that can use this rate plan"
          },
          "corporateCode": {
            "type": "string",
            "description": "Optional rate plan code that is used by the company. Default is companyCode-ratePlanCode.\r\nSame code can be specified for several rate plans in one company.\r\nNo two companies can have a rate plan with the same code."
          }
        }
      },
      "ReplaceRateListModel": {
        "title": "ReplaceRateListModel",
        "required": [
          "rates"
        ],
        "type": "object",
        "properties": {
          "rates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReplaceRateModel"
            },
            "description": "List of rates"
          }
        }
      },
      "ReplaceRateModel": {
        "title": "ReplaceRateModel",
        "required": [
          "from",
          "to"
        ],
        "type": "object",
        "properties": {
          "from": {
            "type": "string",
            "description": "Date and time the rate begins<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
            "format": "date-time"
          },
          "to": {
            "type": "string",
            "description": "Date and time the rate ends<br />A date and time (without fractional second part) in UTC or with UTC offset as defined in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO8601:2004</a>",
            "format": "date-time"
          },
          "price": {
            "$ref": "#/components/schemas/MonetaryValueModel"
          },
          "restrictions": {
            "$ref": "#/components/schemas/RateRestrictionsModel"
          }
        },
        "example": {
          "from": "2022-04-28T17:00:00+02:00",
          "to": "2022-04-29T11:00:00+02:00",
          "price": {
            "amount": 123.5,
            "currency": "EUR"
          },
          "restrictions": {
            "minLengthOfStay": 1,
            "maxLengthOfStay": 30,
            "closed": false,
            "closedOnArrival": true,
            "closedOnDeparture": true
          }
        }
      },
      "ReplaceRatePlanModel": {
        "title": "ReplaceRatePlanModel",
        "required": [
          "name",
          "description",
          "minGuaranteeType",
          "channelCodes",
          "cancellationPolicyId"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "The name for the rate plan"
          },
          "description": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "The description for the rate plan"
          },
          "minGuaranteeType": {
            "$ref": "#/components/schemas/MinGuaranteeType"
          },
          "priceCalculationMode": {
            "$ref": "#/components/schemas/PriceCalculationMode"
          },
          "channelCodes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChannelCode"
            },
            "description": "The channel codes the rate plan is sold through"
          },
          "promoCodes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The rate codes for promotional and hidden rates. If at least one code is set the rate will be not publicly visible\r\nanymore and only be offered when one of the promo codes is given in the offer request.\r\nFor backward compatibility it is still not possible to set multiple promo codes."
          },
          "isSubjectToCityTax": {
            "type": "boolean",
            "description": "Whether the rate plan is subject to city tax or not.\r\nDefault value is {true}"
          },
          "cancellationPolicyId": {
            "type": "string",
            "description": "The id of the cancellation policy valid for this rate plan"
          },
          "noShowPolicyId": {
            "type": "string",
            "description": "The id of the no-show policy valid for this rate plan"
          },
          "bookingPeriods": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BookingPeriodModel"
            },
            "description": "Time periods when the rate plan is bookable"
          },
          "restrictions": {
            "$ref": "#/components/schemas/BookingRestrictionsModel"
          },
          "includedServices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RatePlanServiceModel"
            },
            "description": "Services that are included in the rate plan"
          },
          "companies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReplaceCompanyRatePlanModel"
            },
            "description": "Companies that can use this rate plan"
          },
          "pricingRule": {
            "$ref": "#/components/schemas/CreatePricingRuleModel"
          },
          "surcharges": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SurchargeModel"
            },
            "description": "Additional charges for more than single occupancy. The percent or absolute value will be added to the manually defined or calculated derived rates.\r\nThe values for 'adults' must be unique within the list and starting from occupancy of 2 adults. Values higher than the maximum unit group occupancy will be silently ignored.\r\nThe surcharges are required for all possible occupancies defined by the 'MaxPersons' of the unit group."
          },
          "ageCategories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RatePlanAgeCategoryModel"
            },
            "description": "Additional charges per age category."
          },
          "accountingConfigs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccountingConfigModel"
            },
            "description": "The collection of accounting configs with validity periods."
          }
        },
        "example": {
          "name": {
            "de": "Nicht Stornierbar",
            "en": "Non Refundable"
          },
          "description": {
            "de": "Nicht Stornierbar",
            "en": "Non Refundable"
          },
          "minGuaranteeType": "PM6Hold",
          "priceCalculationMode": "Truncate",
          "channelCodes": [
            "Direct",
            "BookingCom",
            "Ibe"
          ],
          "cancellationPolicyId": "MUC-NONREF",
          "bookingPeriods": [
            {
              "from": "2022-04-21T13:46:24.7698564+02:00",
              "to": "2022-05-05T13:46:24.7698564+02:00"
            },
            {
              "from": "2022-05-08T13:46:24.7698564+02:00",
              "to": "2022-06-27T13:46:24.7698564+02:00"
            }
          ],
          "restrictions": {
            "minAdvance": {
              "hours": 12,
              "days": 180
            },
            "maxAdvance": {
              "months": 24
            }
          },
          "includedServices": [
            {
              "serviceId": "MUC-BRKF",
              "grossPrice": {
                "amount": 10,
                "currency": "EUR"
              }
            },
            {
              "serviceId": "MUC-WLAN",
              "grossPrice": {
                "amount": 5,
                "currency": "EUR"
              }
            }
          ],
          "companies": [
            {
              "id": "MUC-APA",
              "corporateCode": "APA-DBL"
            }
          ],
          "pricingRule": {
            "baseRatePlanId": "MUC-NONREF-SGL",
            "type": "Absolute",
            "value": 20
          },
          "surcharges": [
            {
              "adults": 2,
              "type": "Percent",
              "value": 10
            }
          ],
          "ageCategories": [
            {
              "id": "MUC-BABY",
              "surcharges": [
                {
                  "adults": 1,
                  "value": 10
                }
              ]
            },
            {
              "id": "MUC-CHILD",
              "surcharges": [
                {
                  "adults": 1,
                  "value": 40
                }
              ]
            }
          ]
        }
      },
      "ServiceCreatedModel": {
        "title": "ServiceCreatedModel",
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The item id"
          }
        },
        "example": {
          "id": "MUC-BRKF"
        }
      },
      "ServiceItemModel": {
        "title": "ServiceItemModel",
        "required": [
          "id",
          "name",
          "code",
          "description",
          "defaultGrossPrice",
          "postNextDay",
          "serviceType",
          "vatType",
          "availability",
          "property"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id"
          },
          "name": {
            "type": "string",
            "description": "Name"
          },
          "code": {
            "type": "string",
            "description": "The code for the service"
          },
          "description": {
            "type": "string",
            "description": "Description"
          },
          "defaultGrossPrice": {
            "$ref": "#/components/schemas/MonetaryValueModel"
          },
          "pricingUnit": {
            "$ref": "#/components/schemas/PricingUnit1"
          },
          "postNextDay": {
            "type": "boolean",
            "description": "Whether the service is delivered and posted on the same business date as the accommodation, or on the next day."
          },
          "serviceType": {
            "$ref": "#/components/schemas/ServiceType1"
          },
          "vatType": {
            "$ref": "#/components/schemas/VatType2"
          },
          "availability": {
            "$ref": "#/components/schemas/AvailabilityModel"
          },
          "property": {
            "$ref": "#/components/schemas/EmbeddedPropertyModel"
          },
          "subAccountId": {
            "type": "string",
            "description": "ID of the custom sub-account, used by accounting to determine the correct revenue account"
          },
          "channelCodes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChannelCode"
            },
            "description": "The channel codes the service is sold through"
          }
        }
      },
      "ServiceListModel": {
        "title": "ServiceListModel",
        "required": [
          "services",
          "count"
        ],
        "type": "object",
        "properties": {
          "services": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ServiceItemModel"
            },
            "description": "List of packages"
          },
          "count": {
            "type": "integer",
            "description": "Total count of items",
            "format": "int64"
          }
        }
      },
      "ServiceModel": {
        "title": "ServiceModel",
        "required": [
          "id",
          "code",
          "name",
          "description",
          "defaultGrossPrice",
          "pricingUnit",
          "postNextDay",
          "availability",
          "accountingConfigs",
          "property"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The service id"
          },
          "code": {
            "type": "string",
            "description": "The code for the service"
          },
          "name": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "The name for the service"
          },
          "description": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "The description for the service"
          },
          "defaultGrossPrice": {
            "$ref": "#/components/schemas/MonetaryValueModel"
          },
          "pricingUnit": {
            "$ref": "#/components/schemas/PricingUnit2"
          },
          "postNextDay": {
            "type": "boolean",
            "description": "Whether the service is delivered and posted on the same business date as the accommodation, or on the next day."
          },
          "availability": {
            "$ref": "#/components/schemas/AvailabilityModel"
          },
          "accountingConfigs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccountingConfigModel"
            },
            "description": "The collection of accounting configs with validity periods."
          },
          "property": {
            "$ref": "#/components/schemas/EmbeddedPropertyModel"
          },
          "channelCodes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChannelCode"
            },
            "description": "The channel codes the service is sold through. When no channels are defined, the service is sold only in a package"
          }
        },
        "example": {
          "id": "MUC-BRKF",
          "code": "BRK",
          "name": {
            "en": "Breakfast",
            "de": "Frühstück"
          },
          "description": {
            "en": "Yummy yummy breakfast",
            "de": "Leckeres Frühstück"
          },
          "defaultGrossPrice": {
            "amount": 20,
            "currency": "EUR"
          },
          "pricingUnit": "Person",
          "postNextDay": true,
          "availability": {
            "mode": "Daily",
            "quantity": 3,
            "daysOfWeek": [
              "Monday",
              "Tuesday",
              "Wednesday",
              "Thursday",
              "Friday",
              "Saturday",
              "Sunday"
            ]
          },
          "accountingConfigs": [
            {
              "state": "Unknown",
              "vatType": "Normal",
              "serviceType": "FoodAndBeverages",
              "subAccountId": "ALCO",
              "validFrom": "2021-01-01"
            }
          ],
          "property": {
            "id": "MUC",
            "code": "MUC",
            "name": "Demo Hotel Munich",
            "description": "This is the demo hotel Munich"
          },
          "channelCodes": [
            "Direct",
            "Ibe",
            "BookingCom",
            "ChannelManager"
          ]
        }
      },
      "SurchargeModel": {
        "title": "SurchargeModel",
        "required": [
          "adults",
          "type",
          "value"
        ],
        "type": "object",
        "properties": {
          "adults": {
            "type": "integer",
            "description": "The total numbers of adults",
            "format": "int32"
          },
          "type": {
            "$ref": "#/components/schemas/Type1"
          },
          "value": {
            "type": "number",
            "description": "The percent or absolute value (in the rate plan's currency) of the surcharge"
          }
        }
      },
      "ChannelCode": {
        "title": "ChannelCode",
        "enum": [
          "Direct",
          "BookingCom",
          "Ibe",
          "ChannelManager",
          "Expedia",
          "Homelike",
          "Hrs"
        ],
        "type": "string",
        "example": "Direct"
      },
      "DaysOfWeek": {
        "title": "DaysOfWeek",
        "enum": [
          "Monday",
          "Tuesday",
          "Wednesday",
          "Thursday",
          "Friday",
          "Saturday",
          "Sunday"
        ],
        "type": "string",
        "example": "Monday"
      },
      "expand": {
        "title": "expand",
        "enum": [
          "property",
          "unitGroup",
          "cancellationPolicy",
          "services",
          "bookingPeriods",
          "surcharges",
          "ageCategories"
        ],
        "type": "string",
        "example": "property"
      },
      "expand1": {
        "title": "expand1",
        "enum": [
          "property",
          "cancellationPolicy"
        ],
        "type": "string",
        "example": "property"
      },
      "expand2": {
        "title": "expand2",
        "enum": [
          "property"
        ],
        "type": "string",
        "example": "property"
      },
      "MinGuaranteeType": {
        "title": "MinGuaranteeType",
        "enum": [
          "PM6Hold",
          "CreditCard",
          "Prepayment",
          "Company"
        ],
        "type": "string",
        "description": "The minimum guarantee to be provided when this rate plan is booked so\r\nthe reservation will be guaranteed to the guest",
        "example": "PM6Hold"
      },
      "minGuaranteeType4": {
        "title": "minGuaranteeType4",
        "enum": [
          "PM6Hold",
          "CreditCard",
          "Prepayment",
          "Company"
        ],
        "type": "string",
        "example": "PM6Hold"
      },
      "Mode": {
        "title": "Mode",
        "enum": [
          "Arrival",
          "Departure",
          "Daily"
        ],
        "type": "string",
        "description": "You can choose if the service will only be offered\r\nfor the arrival or departure time slice like early check-in or a final cleaning service. You can also define\r\na service that is available to be booked for the whole stay. The property defaults to 'Daily'.",
        "example": "Arrival"
      },
      "PriceCalculationMode": {
        "title": "PriceCalculationMode",
        "enum": [
          "Truncate",
          "Round"
        ],
        "type": "string",
        "description": "The calculation mode is used when calculating the adults' surcharges and derived rates.\r\nDefaults to Truncate. Example: for a rate of 125.99 and a surcharge of +10%,\r\nwhen Truncate is selected, the result would be 125.99 + 12 = 137.99\r\nWhen Round is selected, the result would be 125.99 + 12.60 = 138.59",
        "example": "Truncate"
      },
      "PricingMode": {
        "title": "PricingMode",
        "enum": [
          "Included",
          "Additional"
        ],
        "type": "string",
        "description": "Whether the service price is included in or added to the base rate. The property defaults to `Included`.",
        "example": "Included"
      },
      "PricingUnit": {
        "title": "PricingUnit",
        "enum": [
          "Room",
          "Person"
        ],
        "type": "string",
        "description": "Defines the granularity for which this item is offered and priced.",
        "example": "Room"
      },
      "PricingUnit1": {
        "title": "PricingUnit1",
        "enum": [
          "Room",
          "Person"
        ],
        "type": "string",
        "description": "Defines per which unit (flat, room, person) this item is offered and priced",
        "example": "Room"
      },
      "PricingUnit2": {
        "title": "PricingUnit2",
        "enum": [
          "Room",
          "Person"
        ],
        "type": "string",
        "description": "Defines the granularity (room, person) for which this item is offered and priced",
        "example": "Room"
      },
      "Reference": {
        "title": "Reference",
        "enum": [
          "PriorToArrival",
          "AfterBooking"
        ],
        "type": "string",
        "description": "The due date for the cancellation policy will be calculated based on this reference point, and the defined time period.\r\n<br /><br />\r\nExamples:<br />\r\n- 1 day and 12 hours prior to arrival<br />\r\n- 0 prior to arrival (meaning, cancellations are always free)<br />\r\n- 24 hours after booking<br />\r\n- 0 after booking (meaning, cancellations ar never free)",
        "example": "PriorToArrival"
      },
      "Reference2": {
        "title": "Reference2",
        "enum": [
          "PriorToArrival",
          "AfterBooking"
        ],
        "type": "string",
        "description": "The due date for the cancellation policy will be calculated based on this reference point",
        "example": "PriorToArrival"
      },
      "ServiceType": {
        "title": "ServiceType",
        "enum": [
          "Other",
          "Accommodation",
          "FoodAndBeverages"
        ],
        "type": "string",
        "description": "The service type",
        "example": "Other"
      },
      "ServiceType1": {
        "title": "ServiceType1",
        "enum": [
          "Other",
          "Accommodation",
          "FoodAndBeverages"
        ],
        "type": "string",
        "description": "The service type, used by accounting to determine the correct revenue account",
        "example": "Other"
      },
      "Template": {
        "title": "Template",
        "enum": [
          "DayUse",
          "OverNight"
        ],
        "type": "string",
        "description": "The template used by the time slice defintion",
        "example": "DayUse"
      },
      "timeSliceTemplate": {
        "title": "timeSliceTemplate",
        "enum": [
          "DayUse",
          "OverNight"
        ],
        "type": "string",
        "example": "DayUse"
      },
      "Type": {
        "title": "Type",
        "enum": [
          "Absolute",
          "Percent"
        ],
        "type": "string",
        "description": "The type used to control the calculation of the difference to the rates of the defined base\r\nrate plan",
        "example": "Absolute"
      },
      "Type1": {
        "title": "Type1",
        "enum": [
          "Absolute",
          "Percent"
        ],
        "type": "string",
        "description": "Specifies how to interpret 'Value'",
        "example": "Absolute"
      },
      "Type2": {
        "title": "Type2",
        "enum": [
          "BedRoom",
          "MeetingRoom",
          "EventSpace",
          "ParkingLot",
          "Other"
        ],
        "type": "string",
        "description": "The unit group type",
        "example": "BedRoom"
      },
      "unitGroupType": {
        "title": "unitGroupType",
        "enum": [
          "BedRoom",
          "MeetingRoom",
          "EventSpace",
          "ParkingLot",
          "Other"
        ],
        "type": "string",
        "example": "BedRoom"
      },
      "VatType": {
        "title": "VatType",
        "enum": [
          "Null",
          "VeryReduced",
          "Reduced",
          "Normal",
          "Without",
          "Special",
          "ReducedCovid19",
          "NormalCovid19"
        ],
        "type": "string",
        "description": "The VAT type",
        "example": "Null"
      },
      "VatType1": {
        "title": "VatType1",
        "enum": [
          "Null",
          "VeryReduced",
          "Reduced",
          "Normal",
          "Without",
          "Special",
          "ReducedCovid19",
          "NormalCovid19"
        ],
        "type": "string",
        "description": "VAT that applies for the fee",
        "example": "Null"
      },
      "VatType2": {
        "title": "VatType2",
        "enum": [
          "Null",
          "VeryReduced",
          "Reduced",
          "Normal",
          "Without",
          "Special",
          "ReducedCovid19",
          "NormalCovid19"
        ],
        "type": "string",
        "description": "The vat type, used by accounting to determine the correct vat amount and account",
        "example": "Null"
      },
      "weekDay": {
        "title": "weekDay",
        "enum": [
          "Monday",
          "Tuesday",
          "Wednesday",
          "Thursday",
          "Friday",
          "Saturday",
          "Sunday"
        ],
        "type": "string",
        "example": "Monday"
      }
    },
    "securitySchemes": {
      "Client credentials grant flow": {
        "type": "oauth2",
        "flows": {
          "clientCredentials": {
            "tokenUrl": "https://identity.apaleo.com/connect/token",
            "refreshUrl": "",
            "scopes": {
              "openid": "OpenID",
              "profile": "Profile",
              "account.manage": "Update the current account",
              "account.suspend": "Suspend the current account",
              "accounting.read": "Read accounting details",
              "availability.manage": "This scope allows to modify the availability",
              "availability.read": "Retrieve availabiltiy information",
              "companies.manage": "Modify companies",
              "companies.read": "Read companies",
              "folios.manage": "Perform actions on folios",
              "folios.payment-with-charges": "Requires you to provide a list of charges being covered by the payment",
              "folios.read": "Read folios, including charges and payments",
              "invoices.manage": "Mark invoices as paid",
              "invoices.read": "Retrieve invoices and preview invoices as data or PDF",
              "logs.read": "Read logs",
              "maintenances.manage": "Change maintenacne windows",
              "maintenances.read": "Read maintenance information",
              "offer-index.read": "Request offer index",
              "offers.read": "Request offers",
              "operations.change-room-state": "Change room state",
              "operations.trigger-night-audit": "Trigger night audit",
              "prepayment-notices.read": "Creates prepayment notices as PDF",
              "rateplans.read-corporate": "Read corporate rate plans",
              "rateplans.read-negotiated": "Read negotiated rate plans",
              "rates.manage": "Update rates and restrictions",
              "rates.read": "Read rates and restrictions",
              "reports.read": "Retrieve report data",
              "reservations.force-manage": "Modify stay dates regardless of availability or restrictions",
              "reservations.manage": "Modify, check in/out, cancel reservations",
              "reservations.read": "Read reservations",
              "routings.create": "Create routings",
              "routings.manage": "Modify routings",
              "routings.read": "Read routings",
              "setup.manage": "This scope allows the app to modify settings and configurations for the whole account and all properties, including creating, modifying and deleting units, unit groups, rate plans and properties.",
              "setup.read": "This scope allows the app to read settings and configurations for the whole account and all properties, including reading units, unit groups, and rate plans.",
              "payment:configuration.read": "Read payment configuration",
              "payment:invoices.read": "Read invoices",
              "payment:reports.read": "Read settlement reports",
              "payment:transactions.read": "Read payment transactions",
              "distribution:reservations.manage": "Create and modify bookings and reservations",
              "distribution:subscriptions.manage": "Manage ARI notification configuration",
              "identity:account-users.manage": "Manage users",
              "identity:account-users.read": "Read users",
              "integration:ui-integrations.manage": "Include apaleo One content",
              "profile:manage": "Manage profiles",
              "profile:read": "Read profiles"
            }
          }
        }
      },
      "Authorization code grant flow": {
        "type": "oauth2",
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "https://identity.apaleo.com/connect/authorize",
            "tokenUrl": "https://identity.apaleo.com/connect/token",
            "refreshUrl": "https://identity.apaleo.com/connect/token",
            "scopes": {
              "offline_access": "This scope is active by default for connect clients.",
              "openid": "OpenID",
              "profile": "Profile",
              "account.manage": "Update the current account",
              "account.suspend": "Suspend the current account",
              "accounting.read": "Read accounting details",
              "availability.manage": "This scope allows to modify the availability",
              "availability.read": "Retrieve availabiltiy information",
              "companies.manage": "Modify companies",
              "companies.read": "Read companies",
              "folios.manage": "Perform actions on folios",
              "folios.payment-with-charges": "Requires you to provide a list of charges being covered by the payment",
              "folios.read": "Read folios, including charges and payments",
              "invoices.manage": "Mark invoices as paid",
              "invoices.read": "Retrieve invoices and preview invoices as data or PDF",
              "logs.read": "Read logs",
              "maintenances.manage": "Change maintenacne windows",
              "maintenances.read": "Read maintenance information",
              "offer-index.read": "Request offer index",
              "offers.read": "Request offers",
              "operations.change-room-state": "Change room state",
              "operations.trigger-night-audit": "Trigger night audit",
              "prepayment-notices.read": "Creates prepayment notices as PDF",
              "rateplans.read-corporate": "Read corporate rate plans",
              "rateplans.read-negotiated": "Read negotiated rate plans",
              "rates.manage": "Update rates and restrictions",
              "rates.read": "Read rates and restrictions",
              "reports.read": "Retrieve report data",
              "reservations.force-manage": "Modify stay dates regardless of availability or restrictions",
              "reservations.manage": "Modify, check in/out, cancel reservations",
              "reservations.read": "Read reservations",
              "routings.create": "Create routings",
              "routings.manage": "Modify routings",
              "routings.read": "Read routings",
              "setup.manage": "This scope allows the app to modify settings and configurations for the whole account and all properties, including creating, modifying and deleting units, unit groups, rate plans and properties.",
              "setup.read": "This scope allows the app to read settings and configurations for the whole account and all properties, including reading units, unit groups, and rate plans.",
              "payment:configuration.read": "Read payment configuration",
              "payment:invoices.read": "Read invoices",
              "payment:reports.read": "Read settlement reports",
              "payment:transactions.read": "Read payment transactions",
              "distribution:reservations.manage": "Create and modify bookings and reservations",
              "distribution:subscriptions.manage": "Manage ARI notification configuration",
              "identity:account-users.manage": "Manage users",
              "identity:account-users.read": "Read users",
              "integration:ui-integrations.manage": "Include apaleo One content",
              "profile:manage": "Manage profiles",
              "profile:read": "Read profiles"
            }
          }
        }
      }
    }
  },
  "security": [
    {
      "Client credentials grant flow": []
    }
  ],
  "tags": [
    {
      "name": "AgeCategory",
      "description": ""
    },
    {
      "name": "CancellationPolicy",
      "description": ""
    },
    {
      "name": "Company",
      "description": ""
    },
    {
      "name": "CorporateCodes",
      "description": ""
    },
    {
      "name": "NoShowPolicy",
      "description": ""
    },
    {
      "name": "PromoCodes",
      "description": ""
    },
    {
      "name": "Rate",
      "description": ""
    },
    {
      "name": "RatePlan",
      "description": ""
    },
    {
      "name": "RatePlanCodes",
      "description": ""
    },
    {
      "name": "Service",
      "description": ""
    }
  ]
}