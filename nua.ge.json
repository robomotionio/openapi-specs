{
  "info": {
    "title": "Nua.ge API",
    "description": "Welcome on this Nua.ge API documentation!\n\n# Disclaimer\nOur product is brand new (launched in november 2021). \nEven if we try hard not to break everything, we allow ourself to make some backward-incompatible changes in this API until **June 30th 2022**.\n\nAll breaking changes modifications will be reported in the [API Changelog doc](https://docs.nua.ge/fr/article/changelog-api-pnrjt4/).\n\n\n# Direct links to specifications\n\n* OpenAPI v3 spec file: https://api.nua.ge/docs/openapi.json\n* (BETA) Hydra+LD spec file https://api.nua.ge/docs/openapi.jsonld\n\n# Open-sourced connectors\n* **(OFFICIAL)** SDK-JS *(To be published in january 2022)*\n* Developped by Nua.ge users (no support provided): \n  * Terraform provider : https://github.com/MKCG/terraform-provider-nuage\n  * Typescript library : https://github.com/Jazys/nuag.e-lib\n\n# Finding help\n\nWe recommend you start your crash course by reading [a few tutorials we wrote here](https://docs.nua.ge).\n\nWe will soon launch a \"nuage\" tag on Stackoverflow for you to post questions about our API usage.\n",
    "version": "2022-04-18",
    "x-logo": {
      "url": "/docs/logo.svg",
      "altText": "Nua.ge API",
      "href": "https://api.nua.ge/docs/"
    }
  },
  "tags": [],
  "x-tagGroups": [
    {
      "name": "Identity",
      "tags": [
        "Login",
        "Invitation",
        "Keypair",
        "OrganizationLimit",
        "Newsletter",
        "Organization",
        "Password",
        "Project",
        "Role",
        "Sponsorship",
        "User"
      ]
    },
    {
      "name": "Pricing",
      "tags": [
        "Item",
        "Product"
      ]
    },
    {
      "name": "Metrics",
      "tags": [
        "Query"
      ]
    },
    {
      "name": "Infrastructure",
      "tags": [
        "Flavor",
        "Image",
        "Ip",
        "ProjectLimit",
        "SecurityGroup",
        "SecurityRule",
        "Server",
        "ProjectUsage"
      ]
    },
    {
      "name": "Billing",
      "tags": [
        "Contract",
        "Coupon",
        "Customer",
        "Invoice",
        "PaymentMethod",
        "Sponsorshiplog"
      ]
    }
  ],
  "servers": [
    {
      "url": "https://api.nua.ge",
      "description": ""
    }
  ],
  "security": [
    {
      "apiKey": []
    }
  ],
  "openapi": "3.0.3",
  "paths": {
    "/arya/auth": {
      "summary": "Get JWT token to login.",
      "description": "Generate new JWT Token",
      "post": {
        "operationId": "postCredentialsItem",
        "tags": [
          "Login"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "token": {
                      "type": "string",
                      "example": "a JWT token that can be read on jwt.io",
                      "readOnly": true
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Get JWT token to login.",
        "description": "",
        "parameters": [],
        "requestBody": {
          "description": "Generate new JWT Token",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "example": "test@example.com"
                  },
                  "password": {
                    "type": "string",
                    "example": "mysuperpassword"
                  },
                  "organization": {
                    "type": "string",
                    "example": "acmecorp"
                  }
                }
              }
            }
          },
          "required": false
        },
        "deprecated": false
      },
      "parameters": []
    },
    "/arya/invitations": {
      "get": {
        "operationId": "getInvitationCollection",
        "tags": [
          "Invitation"
        ],
        "responses": {
          "200": {
            "description": "Invitation collection",
            "content": {
              "application/ld+json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "hydra:member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Invitation.InvitationOutput.jsonld-Read"
                      }
                    },
                    "hydra:totalItems": {
                      "type": "integer",
                      "minimum": 0
                    },
                    "hydra:view": {
                      "type": "object",
                      "properties": {
                        "@id": {
                          "type": "string",
                          "format": "iri-reference"
                        },
                        "@type": {
                          "type": "string"
                        },
                        "hydra:first": {
                          "type": "string",
                          "format": "iri-reference"
                        },
                        "hydra:last": {
                          "type": "string",
                          "format": "iri-reference"
                        },
                        "hydra:previous": {
                          "type": "string",
                          "format": "iri-reference"
                        },
                        "hydra:next": {
                          "type": "string",
                          "format": "iri-reference"
                        }
                      }
                    },
                    "hydra:search": {
                      "type": "object",
                      "properties": {
                        "@type": {
                          "type": "string"
                        },
                        "hydra:template": {
                          "type": "string"
                        },
                        "hydra:variableRepresentation": {
                          "type": "string"
                        },
                        "hydra:mapping": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "@type": {
                                "type": "string"
                              },
                              "variable": {
                                "type": "string"
                              },
                              "property": {
                                "type": "string",
                                "nullable": true
                              },
                              "required": {
                                "type": "boolean"
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "required": [
                    "hydra:member"
                  ]
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Invitation.InvitationOutput-Read"
                  }
                }
              },
              "text/html": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Invitation.InvitationOutput-Read"
                  }
                }
              }
            }
          }
        },
        "summary": "List invitations.",
        "description": "Retrieve pending invitations on current organization.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "The collection page number",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "integer",
              "default": 1
            },
            "style": "form",
            "explode": false,
            "allowReserved": false
          },
          {
            "name": "pagination",
            "in": "query",
            "description": "Enable or disable pagination",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "boolean"
            },
            "style": "form",
            "explode": false,
            "allowReserved": false
          },
          {
            "name": "id",
            "in": "query",
            "description": "",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string"
            },
            "style": "form",
            "explode": false,
            "allowReserved": false
          },
          {
            "name": "id[]",
            "in": "query",
            "description": "",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true,
            "allowReserved": false
          }
        ],
        "deprecated": false,
        "security": [
          {
            "apiKey": [
              "ROLE_ADMIN"
            ]
          }
        ]
      },
      "post": {
        "operationId": "postInvitationCollection",
        "tags": [
          "Invitation"
        ],
        "responses": {
          "201": {
            "description": "Invitation resource created",
            "content": {
              "application/ld+json": {
                "schema": {
                  "$ref": "#/components/schemas/Invitation.InvitationOutput.jsonld-Read"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Invitation.InvitationOutput-Read"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/Invitation.InvitationOutput-Read"
                }
              }
            },
            "links": {
              "GetInvitationItem": {
                "operationId": "getInvitationItem",
                "parameters": {
                  "id": "$response.body#/id"
                },
                "description": "The `id` value returned in the response can be used as the `id` parameter in `GET /arya/invitations/{id}`."
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Creates an invitation.",
        "description": "Invite a new user on your organization",
        "parameters": [],
        "requestBody": {
          "description": "The new Invitation resource",
          "content": {
            "application/ld+json": {
              "schema": {
                "$ref": "#/components/schemas/Invitation.jsonld-Write"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Invitation-Write"
              }
            },
            "text/html": {
              "schema": {
                "$ref": "#/components/schemas/Invitation-Write"
              }
            }
          },
          "required": true
        },
        "deprecated": false,
        "security": [
          {
            "apiKey": [
              "ROLE_ADMIN"
            ]
          }
        ]
      },
      "parameters": []
    },
    "/arya/invitations/{id}": {
      "get": {
        "operationId": "getInvitationItem",
        "tags": [
          "Invitation"
        ],
        "responses": {
          "200": {
            "description": "Invitation resource",
            "content": {
              "application/ld+json": {
                "schema": {
                  "$ref": "#/components/schemas/Invitation.InvitationOutput.jsonld-Read"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Invitation.InvitationOutput-Read"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/Invitation.InvitationOutput-Read"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found"
          }
        },
        "summary": "Get an invitation.",
        "description": "Retrieves an Invitation resource.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Resource identifier",
            "required": true,
            "deprecated": false,
            "allowEmptyValue": false,
            "schema": {
              "type": "string"
            },
            "style": "simple",
            "explode": false,
            "allowReserved": false
          }
        ],
        "deprecated": false,
        "security": []
      },
      "delete": {
        "operationId": "deleteInvitationItem",
        "tags": [
          "Invitation"
        ],
        "responses": {
          "204": {
            "description": "Invitation resource deleted"
          },
          "404": {
            "description": "Resource not found"
          }
        },
        "summary": "Removes an invitation.",
        "description": "Deletes an Invitation resource.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Resource identifier",
            "required": true,
            "deprecated": false,
            "allowEmptyValue": false,
            "schema": {
              "type": "string"
            },
            "style": "simple",
            "explode": false,
            "allowReserved": false
          }
        ],
        "deprecated": false,
        "security": [
          {
            "apiKey": [
              "ROLE_ADMIN"
            ]
          }
        ]
      },
      "patch": {
        "operationId": "patchInvitationItem",
        "tags": [
          "Invitation"
        ],
        "responses": {
          "200": {
            "description": "Invitation resource updated",
            "content": {
              "application/ld+json": {
                "schema": {
                  "$ref": "#/components/schemas/Invitation.InvitationOutput.jsonld-Read"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Invitation.InvitationOutput-Read"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/Invitation.InvitationOutput-Read"
                }
              }
            },
            "links": {
              "GetInvitationItem": {
                "operationId": "getInvitationItem",
                "parameters": {
                  "id": "$response.body#/id"
                },
                "description": "The `id` value returned in the response can be used as the `id` parameter in `GET /arya/invitations/{id}`."
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "404": {
            "description": "Resource not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Edit an invitation.",
        "description": "Updates an Invitation resource.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Resource identifier",
            "required": true,
            "deprecated": false,
            "allowEmptyValue": false,
            "schema": {
              "type": "string"
            },
            "style": "simple",
            "explode": false,
            "allowReserved": false
          }
        ],
        "requestBody": {
          "description": "The updated Invitation resource",
          "content": {
            "application/merge-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Invitation-Write"
              }
            }
          },
          "required": true
        },
        "deprecated": false,
        "security": []
      },
      "parameters": []
    },
    "/arya/keypairs": {
      "get": {
        "operationId": "getKeypairCollection",
        "tags": [
          "Keypair"
        ],
        "responses": {
          "200": {
            "description": "Keypair collection",
            "content": {
              "application/ld+json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "hydra:member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Keypair.jsonld-Read"
                      }
                    },
                    "hydra:totalItems": {
                      "type": "integer",
                      "minimum": 0
                    },
                    "hydra:view": {
                      "type": "object",
                      "properties": {
                        "@id": {
                          "type": "string",
                          "format": "iri-reference"
                        },
                        "@type": {
                          "type": "string"
                        },
                        "hydra:first": {
                          "type": "string",
                          "format": "iri-reference"
                        },
                        "hydra:last": {
                          "type": "string",
                          "format": "iri-reference"
                        },
                        "hydra:previous": {
                          "type": "string",
                          "format": "iri-reference"
                        },
                        "hydra:next": {
                          "type": "string",
                          "format": "iri-reference"
                        }
                      }
                    },
                    "hydra:search": {
                      "type": "object",
                      "properties": {
                        "@type": {
                          "type": "string"
                        },
                        "hydra:template": {
                          "type": "string"
                        },
                        "hydra:variableRepresentation": {
                          "type": "string"
                        },
                        "hydra:mapping": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "@type": {
                                "type": "string"
                              },
                              "variable": {
                                "type": "string"
                              },
                              "property": {
                                "type": "string",
                                "nullable": true
                              },
                              "required": {
                                "type": "boolean"
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "required": [
                    "hydra:member"
                  ]
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Keypair-Read"
                  }
                }
              },
              "text/html": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Keypair-Read"
                  }
                }
              }
            }
          }
        },
        "summary": "List SSH keys.",
        "description": "Retrieve key pairs for the current user.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "The collection page number",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "integer",
              "default": 1
            },
            "style": "form",
            "explode": false,
            "allowReserved": false
          },
          {
            "name": "pagination",
            "in": "query",
            "description": "Enable or disable pagination",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "boolean"
            },
            "style": "form",
            "explode": false,
            "allowReserved": false
          },
          {
            "name": "order[id]",
            "in": "query",
            "description": "",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            },
            "style": "form",
            "explode": false,
            "allowReserved": false
          },
          {
            "name": "order[name]",
            "in": "query",
            "description": "",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            },
            "style": "form",
            "explode": false,
            "allowReserved": false
          },
          {
            "name": "order[description]",
            "in": "query",
            "description": "",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            },
            "style": "form",
            "explode": false,
            "allowReserved": false
          },
          {
            "name": "id",
            "in": "query",
            "description": "",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string"
            },
            "style": "form",
            "explode": false,
            "allowReserved": false
          },
          {
            "name": "id[]",
            "in": "query",
            "description": "",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true,
            "allowReserved": false
          }
        ],
        "deprecated": false
      },
      "post": {
        "operationId": "postKeypairCollection",
        "tags": [
          "Keypair"
        ],
        "responses": {
          "201": {
            "description": "Keypair resource created",
            "content": {
              "application/ld+json": {
                "schema": {
                  "$ref": "#/components/schemas/Keypair.jsonld-Read"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Keypair-Read"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/Keypair-Read"
                }
              }
            },
            "links": {
              "GetKeypairItem": {
                "operationId": "getKeypairItem",
                "parameters": {
                  "id": "$response.body#/id"
                },
                "description": "The `id` value returned in the response can be used as the `id` parameter in `GET /arya/keypairs/{id}`."
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Creates a SSH key.",
        "description": "Add a public key, that will be associated to the current user.",
        "parameters": [],
        "requestBody": {
          "description": "The new Keypair resource",
          "content": {
            "application/ld+json": {
              "schema": {
                "$ref": "#/components/schemas/Keypair.jsonld-Write"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Keypair-Write"
              }
            },
            "text/html": {
              "schema": {
                "$ref": "#/components/schemas/Keypair-Write"
              }
            }
          },
          "required": true
        },
        "deprecated": false
      },
      "parameters": []
    },
    "/arya/keypairs/{id}": {
      "get": {
        "operationId": "getKeypairItem",
        "tags": [
          "Keypair"
        ],
        "responses": {
          "200": {
            "description": "Keypair resource",
            "content": {
              "application/ld+json": {
                "schema": {
                  "$ref": "#/components/schemas/Keypair.jsonld-Read"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Keypair-Read"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/Keypair-Read"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found"
          }
        },
        "summary": "Get an SSH key.",
        "description": "get a specific key",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Resource identifier",
            "required": true,
            "deprecated": false,
            "allowEmptyValue": false,
            "schema": {
              "type": "string"
            },
            "style": "simple",
            "explode": false,
            "allowReserved": false
          }
        ],
        "deprecated": false
      },
      "delete": {
        "operationId": "deleteKeypairItem",
        "tags": [
          "Keypair"
        ],
        "responses": {
          "204": {
            "description": "Keypair resource deleted"
          },
          "404": {
            "description": "Resource not found"
          }
        },
        "summary": "Delete a SSH key.",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Resource identifier",
            "required": true,
            "deprecated": false,
            "allowEmptyValue": false,
            "schema": {
              "type": "string"
            },
            "style": "simple",
            "explode": false,
            "allowReserved": false
          }
        ],
        "deprecated": false
      },
      "patch": {
        "operationId": "patchKeypairItem",
        "tags": [
          "Keypair"
        ],
        "responses": {
          "200": {
            "description": "Keypair resource updated",
            "content": {
              "application/ld+json": {
                "schema": {
                  "$ref": "#/components/schemas/Keypair.jsonld-Read"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Keypair-Read"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/Keypair-Read"
                }
              }
            },
            "links": {
              "GetKeypairItem": {
                "operationId": "getKeypairItem",
                "parameters": {
                  "id": "$response.body#/id"
                },
                "description": "The `id` value returned in the response can be used as the `id` parameter in `GET /arya/keypairs/{id}`."
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "404": {
            "description": "Resource not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Edit a SSH key.",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Resource identifier",
            "required": true,
            "deprecated": false,
            "allowEmptyValue": false,
            "schema": {
              "type": "string"
            },
            "style": "simple",
            "explode": false,
            "allowReserved": false
          }
        ],
        "requestBody": {
          "description": "The updated Keypair resource",
          "content": {
            "application/merge-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Keypair-keypair.edit"
              }
            }
          },
          "required": true
        },
        "deprecated": false
      },
      "parameters": []
    },
    "/arya/limits": {
      "get": {
        "operationId": "getOrganizationLimitCollection",
        "tags": [
          "OrganizationLimit"
        ],
        "responses": {
          "200": {
            "description": "OrganizationLimit collection",
            "content": {
              "application/ld+json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "hydra:member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/OrganizationLimit.jsonld-Read"
                      }
                    },
                    "hydra:totalItems": {
                      "type": "integer",
                      "minimum": 0
                    },
                    "hydra:view": {
                      "type": "object",
                      "properties": {
                        "@id": {
                          "type": "string",
                          "format": "iri-reference"
                        },
                        "@type": {
                          "type": "string"
                        },
                        "hydra:first": {
                          "type": "string",
                          "format": "iri-reference"
                        },
                        "hydra:last": {
                          "type": "string",
                          "format": "iri-reference"
                        },
                        "hydra:previous": {
                          "type": "string",
                          "format": "iri-reference"
                        },
                        "hydra:next": {
                          "type": "string",
                          "format": "iri-reference"
                        }
                      }
                    },
                    "hydra:search": {
                      "type": "object",
                      "properties": {
                        "@type": {
                          "type": "string"
                        },
                        "hydra:template": {
                          "type": "string"
                        },
                        "hydra:variableRepresentation": {
                          "type": "string"
                        },
                        "hydra:mapping": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "@type": {
                                "type": "string"
                              },
                              "variable": {
                                "type": "string"
                              },
                              "property": {
                                "type": "string",
                                "nullable": true
                              },
                              "required": {
                                "type": "boolean"
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "required": [
                    "hydra:member"
                  ]
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrganizationLimit-Read"
                  }
                }
              },
              "text/html": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrganizationLimit-Read"
                  }
                }
              }
            }
          }
        },
        "summary": "List organization quotas.",
        "description": "There is a limit on how many users and projects you can have. This will return what the limits are.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "The collection page number",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "integer",
              "default": 1
            },
            "style": "form",
            "explode": false,
            "allowReserved": false
          },
          {
            "name": "pagination",
            "in": "query",
            "description": "Enable or disable pagination",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "boolean"
            },
            "style": "form",
            "explode": false,
            "allowReserved": false
          },
          {
            "name": "organization",
            "in": "query",
            "description": "",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string"
            },
            "style": "form",
            "explode": false,
            "allowReserved": false
          },
          {
            "name": "organization[]",
            "in": "query",
            "description": "",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true,
            "allowReserved": false
          }
        ],
        "deprecated": false,
        "security": [
          {
            "apiKey": [
              "ROLE_USER"
            ]
          }
        ]
      },
      "parameters": []
    },
    "/arya/limits/{id}": {
      "get": {
        "operationId": "getOrganizationLimitItem",
        "tags": [
          "OrganizationLimit"
        ],
        "responses": {
          "200": {
            "description": "OrganizationLimit resource",
            "content": {
              "application/ld+json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationLimit.jsonld-Read"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationLimit-Read"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationLimit-Read"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found"
          }
        },
        "summary": "Get a specific organization quota.",
        "description": "This call should not be used, as it has little interest. It will be removed in a future version.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Resource identifier",
            "required": true,
            "deprecated": false,
            "allowEmptyValue": false,
            "schema": {
              "type": "string"
            },
            "style": "simple",
            "explode": false,
            "allowReserved": false
          }
        ],
        "deprecated": true,
        "security": [
          {
            "apiKey": [
              "ROLE_USER"
            ]
          }
        ]
      },
      "parameters": []
    },
    "/arya/mercure": {
      "get": {
        "operationId": "aryamercure",
        "tags": [
          "Login"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "token": {
                      "type": "string",
                      "example": "xxxxxxxxxxxxxxxxx"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Get a valid Mercure auth token.",
        "description": "This token should be provided to all Mercure calls. It is valid for one hour.",
        "parameters": [],
        "deprecated": false
      },
      "parameters": []
    },
    "/arya/newsletters": {
      "post": {
        "operationId": "postNewsletterCollection",
        "tags": [
          "Newsletter"
        ],
        "responses": {
          "204": {
            "description": "Newsletter resource created",
            "links": {}
          },
          "400": {
            "description": "Invalid input"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Register an email to the Plezi newsletter.",
        "description": "Register an email to the Plezi newsletter with optional fields (firstName, lastName, company).",
        "parameters": [],
        "requestBody": {
          "description": "The new Newsletter resource",
          "content": {
            "application/ld+json": {
              "schema": {
                "$ref": "#/components/schemas/Newsletter.jsonld-Write"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Newsletter-Write"
              }
            },
            "text/html": {
              "schema": {
                "$ref": "#/components/schemas/Newsletter-Write"
              }
            }
          },
          "required": true
        },
        "deprecated": false,
        "security": []
      },
      "parameters": []
    },
    "/arya/newsletters/{id}": {
      "patch": {
        "operationId": "patchNewsletterItem",
        "tags": [
          "Newsletter"
        ],
        "responses": {
          "204": {
            "description": "Newsletter resource updated",
            "links": {}
          },
          "400": {
            "description": "Invalid input"
          },
          "404": {
            "description": "Resource not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Edit a contact information in Plezi.",
        "description": "Use invitationId as ID here. This invitation contains the email we use for the update.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Resource identifier",
            "required": true,
            "deprecated": false,
            "allowEmptyValue": false,
            "schema": {
              "type": "string"
            },
            "style": "simple",
            "explode": false,
            "allowReserved": false
          }
        ],
        "requestBody": {
          "description": "The updated Newsletter resource",
          "content": {
            "application/merge-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Newsletter-Write"
              }
            }
          },
          "required": true
        },
        "deprecated": false,
        "security": []
      },
      "parameters": []
    },
    "/arya/organizations": {
      "get": {
        "operationId": "getOrganizationCollection",
        "tags": [
          "Organization"
        ],
        "responses": {
          "200": {
            "description": "Organization collection",
            "content": {
              "application/ld+json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "hydra:member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Organization.jsonld-Read"
                      }
                    },
                    "hydra:totalItems": {
                      "type": "integer",
                      "minimum": 0
                    },
                    "hydra:view": {
                      "type": "object",
                      "properties": {
                        "@id": {
                          "type": "string",
                          "format": "iri-reference"
                        },
                        "@type": {
                          "type": "string"
                        },
                        "hydra:first": {
                          "type": "string",
                          "format": "iri-reference"
                        },
                        "hydra:last": {
                          "type": "string",
                          "format": "iri-reference"
                        },
                        "hydra:previous": {
                          "type": "string",
                          "format": "iri-reference"
                        },
                        "hydra:next": {
                          "type": "string",
                          "format": "iri-reference"
                        }
                      }
                    },
                    "hydra:search": {
                      "type": "object",
                      "properties": {
                        "@type": {
                          "type": "string"
                        },
                        "hydra:template": {
                          "type": "string"
                        },
                        "hydra:variableRepresentation": {
                          "type": "string"
                        },
                        "hydra:mapping": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "@type": {
                                "type": "string"
                              },
                              "variable": {
                                "type": "string"
                              },
                              "property": {
                                "type": "string",
                                "nullable": true
                              },
                              "required": {
                                "type": "boolean"
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "required": [
                    "hydra:member"
                  ]
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Organization-Read"
                  }
                }
              },
              "text/html": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Organization-Read"
                  }
                }
              }
            }
          }
        },
        "summary": "List organizations.",
        "description": "As this call is scoped to your account, you should get only one record.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "The collection page number",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "integer",
              "default": 1
            },
            "style": "form",
            "explode": false,
            "allowReserved": false
          },
          {
            "name": "pagination",
            "in": "query",
            "description": "Enable or disable pagination",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "boolean"
            },
            "style": "form",
            "explode": false,
            "allowReserved": false
          },
          {
            "name": "order[id]",
            "in": "query",
            "description": "",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            },
            "style": "form",
            "explode": false,
            "allowReserved": false
          },
          {
            "name": "order[name]",
            "in": "query",
            "description": "",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            },
            "style": "form",
            "explode": false,
            "allowReserved": false
          },
          {
            "name": "order[description]",
            "in": "query",
            "description": "",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            },
            "style": "form",
            "explode": false,
            "allowReserved": false
          },
          {
            "name": "order[state]",
            "in": "query",
            "description": "",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            },
            "style": "form",
            "explode": false,
            "allowReserved": false
          },
          {
            "name": "order[createdAt]",
            "in": "query",
            "description": "",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            },
            "style": "form",
            "explode": false,
            "allowReserved": false
          },
          {
            "name": "order[deletedAt]",
            "in": "query",
            "description": "",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            },
            "style": "form",
            "explode": false,
            "allowReserved": false
          },
          {
            "name": "id",
            "in": "query",
            "description": "",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string"
            },
            "style": "form",
            "explode": false,
            "allowReserved": false
          },
          {
            "name": "id[]",
            "in": "query",
            "description": "",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true,
            "allowReserved": false
          },
          {
            "name": "name",
            "in": "query",
            "description": "",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string"
            },
            "style": "form",
            "explode": false,
            "allowReserved": false
          },
          {
            "name": "name[]",
            "in": "query",
            "description": "",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true,
            "allowReserved": false
          },
          {
            "name": "state",
            "in": "query",
            "description": "",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string"
            },
            "style": "form",
            "explode": false,
            "allowReserved": false
          },
          {
            "name": "state[]",
            "in": "query",
            "description": "",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true,
            "allowReserved": false
          },
          {
            "name": "description",
            "in": "query",
            "description": "",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string"
            },
            "style": "form",
            "explode": false,
            "allowReserved": false
          }
        ],
        "deprecated": false,
        "security": [
          {
            "apiKey": [
              "ROLE_USER"
            ]
          }
        ]
      },
      "parameters": []
    },
    "/arya/organizations/check/{name}": {
      "get": {
        "operationId": "organizationcheck",
        "tags": [
          "Organization"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "example": "acmecorp"
                    },
                    "description": {
                      "type": "string",
                      "example": "AcmeCORP LLC"
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Check if an organization exists.",
        "description": "Used by our webinterface to see if nua.ge subdomain is used",
        "parameters": [],
        "deprecated": false,
        "security": []
      },
      "parameters": []
    },
    "/arya/organizations/{id}": {
      "get": {
        "operationId": "getOrganizationItem",
        "tags": [
          "Organization"
        ],
        "responses": {
          "200": {
            "description": "Organization resource",
            "content": {
              "application/ld+json": {
                "schema": {
                  "$ref": "#/components/schemas/Organization.jsonld-Read"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organization-Read"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/Organization-Read"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found"
          }
        },
        "summary": "Get a specific organization.",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Resource identifier",
            "required": true,
            "deprecated": false,
            "allowEmptyValue": false,
            "schema": {
              "type": "string"
            },
            "style": "simple",
            "explode": false,
            "allowReserved": false
          }
        ],
        "deprecated": false,
        "security": [
          {
            "apiKey": [
              "ROLE_USER"
            ]
          }
        ]
      },
      "parameters": []
    },
    "/arya/passwords": {
      "post": {
        "operationId": "postPasswordCollection",
        "tags": [
          "Password"
        ],
        "responses": {
          "201": {
            "description": "Password resource created",
            "content": {
              "application/ld+json": {
                "schema": {
                  "$ref": "#/components/schemas/Password.jsonld-Read"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Password-Read"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/Password-Read"
                }
              }
            },
            "links": {
              "GetPasswordItem": {
                "operationId": "getPasswordItem",
                "parameters": {
                  "id": "$response.body#/id"
                },
                "description": "The `id` value returned in the response can be used as the `id` parameter in `GET /arya/passwords/{id}`."
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Reset a user password.",
        "description": "creates a request to reset password. This will send an email to the given user. This API call is rate-limited.",
        "parameters": [],
        "requestBody": {
          "description": "The new Password resource",
          "content": {
            "application/ld+json": {
              "schema": {
                "$ref": "#/components/schemas/Password.PasswordInput.jsonld-Write"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Password.PasswordInput-Write"
              }
            },
            "text/html": {
              "schema": {
                "$ref": "#/components/schemas/Password.PasswordInput-Write"
              }
            }
          },
          "required": true
        },
        "deprecated": false,
        "security": []
      },
      "parameters": []
    },
    "/arya/passwords/{id}": {
      "get": {
        "operationId": "getPasswordItem",
        "tags": [
          "Password"
        ],
        "responses": {
          "200": {
            "description": "Password resource",
            "content": {
              "application/ld+json": {
                "schema": {
                  "$ref": "#/components/schemas/Password.jsonld-Read"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Password-Read"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/Password-Read"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found"
          }
        },
        "summary": "Get a user password request.",
        "description": "Retrieves a given user password request to finish it.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Resource identifier",
            "required": true,
            "deprecated": false,
            "allowEmptyValue": false,
            "schema": {
              "type": "string"
            },
            "style": "simple",
            "explode": false,
            "allowReserved": false
          }
        ],
        "deprecated": false,
        "security": []
      },
      "patch": {
        "operationId": "patchPasswordItem",
        "tags": [
          "Password"
        ],
        "responses": {
          "200": {
            "description": "Password resource updated",
            "content": {
              "application/ld+json": {
                "schema": {
                  "$ref": "#/components/schemas/Password.jsonld-Read"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Password-Read"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/Password-Read"
                }
              }
            },
            "links": {
              "GetPasswordItem": {
                "operationId": "getPasswordItem",
                "parameters": {
                  "id": "$response.body#/id"
                },
                "description": "The `id` value returned in the response can be used as the `id` parameter in `GET /arya/passwords/{id}`."
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "404": {
            "description": "Resource not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Edit a user password request.",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Resource identifier",
            "required": true,
            "deprecated": false,
            "allowEmptyValue": false,
            "schema": {
              "type": "string"
            },
            "style": "simple",
            "explode": false,
            "allowReserved": false
          }
        ],
        "requestBody": {
          "description": "The updated Password resource",
          "content": {
            "application/merge-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Password.PasswordInputPatch-Write"
              }
            }
          },
          "required": true
        },
        "deprecated": false,
        "security": []
      },
      "parameters": []
    },
    "/arya/projects": {
      "get": {
        "operationId": "getProjectCollection",
        "tags": [
          "Project"
        ],
        "responses": {
          "200": {
            "description": "Project collection",
            "content": {
              "application/ld+json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "hydra:member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Project.jsonld-Read"
                      }
                    },
                    "hydra:totalItems": {
                      "type": "integer",
                      "minimum": 0
                    },
                    "hydra:view": {
                      "type": "object",
                      "properties": {
                        "@id": {
                          "type": "string",
                          "format": "iri-reference"
                        },
                        "@type": {
                          "type": "string"
                        },
                        "hydra:first": {
                          "type": "string",
                          "format": "iri-reference"
                        },
                        "hydra:last": {
                          "type": "string",
                          "format": "iri-reference"
                        },
                        "hydra:previous": {
                          "type": "string",
                          "format": "iri-reference"
                        },
                        "hydra:next": {
                          "type": "string",
                          "format": "iri-reference"
                        }
                      }
                    },
                    "hydra:search": {
                      "type": "object",
                      "properties": {
                        "@type": {
                          "type": "string"
                        },
                        "hydra:template": {
                          "type": "string"
                        },
                        "hydra:variableRepresentation": {
                          "type": "string"
                        },
                        "hydra:mapping": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "@type": {
                                "type": "string"
                              },
                              "variable": {
                                "type": "string"
                              },
                              "property": {
                                "type": "string",
                                "nullable": true
                              },
                              "required": {
                                "type": "boolean"
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "required": [
                    "hydra:member"
                  ]
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Project-Read"
                  }
                }
              },
              "text/html": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Project-Read"
                  }
                }
              }
            }
          }
        },
        "summary": "List projects.",
        "description": "",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "The collection page number",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "integer",
              "default": 1
            },
            "style": "form",
            "explode": false,
            "allowReserved": false
          },
          {
            "name": "pagination",
            "in": "query",
            "description": "Enable or disable pagination",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "boolean"
            },
            "style": "form",
            "explode": false,
            "allowReserved": false
          },
          {
            "name": "id",
            "in": "query",
            "description": "",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string"
            },
            "style": "form",
            "explode": false,
            "allowReserved": false
          },
          {
            "name": "id[]",
            "in": "query",
            "description": "",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true,
            "allowReserved": false
          },
          {
            "name": "organization",
            "in": "query",
            "description": "",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string"
            },
            "style": "form",
            "explode": false,
            "allowReserved": false
          },
          {
            "name": "organization[]",
            "in": "query",
            "description": "",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true,
            "allowReserved": false
          },
          {
            "name": "driverType",
            "in": "query",
            "description": "",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string"
            },
            "style": "form",
            "explode": false,
            "allowReserved": false
          },
          {
            "name": "driverType[]",
            "in": "query",
            "description": "",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true,
            "allowReserved": false
          },
          {
            "name": "name",
            "in": "query",
            "description": "",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string"
            },
            "style": "form",
            "explode": false,
            "allowReserved": false
          },
          {
            "name": "name[]",
            "in": "query",
            "description": "",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true,
            "allowReserved": false
          },
          {
            "name": "description",
            "in": "query",
            "description": "",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string"
            },
            "style": "form",
            "explode": false,
            "allowReserved": false
          },
          {
            "name": "order[id]",
            "in": "query",
            "description": "",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            },
            "style": "form",
            "explode": false,
            "allowReserved": false
          },
          {
            "name": "order[name]",
            "in": "query",
            "description": "",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            },
            "style": "form",
            "explode": false,
            "allowReserved": false
          },
          {
            "name": "order[description]",
            "in": "query",
            "description": "",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            },
            "style": "form",
            "explode": false,
            "allowReserved": false
          },
          {
            "name": "order[createdAt]",
            "in": "query",
            "description": "",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            },
            "style": "form",
            "explode": false,
            "allowReserved": false
          },
          {
            "name": "createdAt[before]",
            "in": "query",
            "description": "",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string"
            },
            "style": "form",
            "explode": false,
            "allowReserved": false
          },
          {
            "name": "createdAt[strictly_before]",
            "in": "query",
            "description": "",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string"
            },
            "style": "form",
            "explode": false,
            "allowReserved": false
          },
          {
            "name": "createdAt[after]",
            "in": "query",
            "description": "",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string"
            },
            "style": "form",
            "explode": false,
            "allowReserved": false
          },
          {
            "name": "createdAt[strictly_after]",
            "in": "query",
            "description": "",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string"
            },
            "style": "form",
            "explode": false,
            "allowReserved": false
          },
          {
            "name": "exists[driverConfig]",
            "in": "query",
            "description": "",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "boolean"
            },
            "style": "form",
            "explode": false,
            "allowReserved": false
          }
        ],
        "deprecated": false,
        "security": [
          {
            "apiKey": [
              "ROLE_USER"
            ]
          }
        ]
      },
      "post": {
        "operationId": "postProjectCollection",
        "tags": [
          "Project"
        ],
        "responses": {
          "201": {
            "description": "Project resource created",
            "content": {
              "application/ld+json": {
                "schema": {
                  "$ref": "#/components/schemas/Project.jsonld-Read"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project-Read"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/Project-Read"
                }
              }
            },
            "links": {
              "GetProjectItem": {
                "operationId": "getProjectItem",
                "parameters": {
                  "id": "$response.body#/id"
                },
                "description": "The `id` value returned in the response can be used as the `id` parameter in `GET /arya/projects/{id}`."
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Creates a project.",
        "description": "",
        "parameters": [],
        "requestBody": {
          "description": "The new Project resource",
          "content": {
            "application/ld+json": {
              "schema": {
                "$ref": "#/components/schemas/Project.jsonld-Write"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Project-Write"
              }
            },
            "text/html": {
              "schema": {
                "$ref": "#/components/schemas/Project-Write"
              }
            }
          },
          "required": true
        },
        "deprecated": false,
        "security": [
          {
            "apiKey": [
              "ROLE_ADMIN"
            ]
          }
        ]
      },
      "parameters": []
    },
    "/arya/projects/{id}": {
      "get": {
        "operationId": "getProjectItem",
        "tags": [
          "Project"
        ],
        "responses": {
          "200": {
            "description": "Project resource",
            "content": {
              "application/ld+json": {
                "schema": {
                  "$ref": "#/components/schemas/Project.jsonld-Read"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project-Read"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/Project-Read"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found"
          }
        },
        "summary": "Get a specific project.",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Resource identifier",
            "required": true,
            "deprecated": false,
            "allowEmptyValue": false,
            "schema": {
              "type": "string"
            },
            "style": "simple",
            "explode": false,
            "allowReserved": false
          }
        ],
        "deprecated": false,
        "security": [
          {
            "apiKey": [
              "ROLE_USER"
            ]
          }
        ]
      },
      "delete": {
        "operationId": "deleteProjectItem",
        "tags": [
          "Project"
        ],
        "responses": {
          "204": {
            "description": "Project resource deleted"
          },
          "404": {
            "description": "Resource not found"
          }
        },
        "summary": "Delete a specific project.",
        "description": "Project must be empty before deletion",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Resource identifier",
            "required": true,
            "deprecated": false,
            "allowEmptyValue": false,
            "schema": {
              "type": "string"
            },
            "style": "simple",
            "explode": false,
            "allowReserved": false
          }
        ],
        "deprecated": false,
        "security": [
          {
            "apiKey": [
              "ROLE_ADMIN"
            ]
          }
        ]
      },
      "patch": {
        "operationId": "patchProjectItem",
        "tags": [
          "Project"
        ],
        "responses": {
          "200": {
            "description": "Project resource updated",
            "content": {
              "application/ld+json": {
                "schema": {
                  "$ref": "#/components/schemas/Project.jsonld-Read"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project-Read"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/Project-Read"
                }
              }
            },
            "links": {
              "GetProjectItem": {
                "operationId": "getProjectItem",
                "parameters": {
                  "id": "$response.body#/id"
                },
                "description": "The `id` value returned in the response can be used as the `id` parameter in `GET /arya/projects/{id}`."
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "404": {
            "description": "Resource not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Edit a specific project.",
        "description": "Only description can be edited at that time",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Resource identifier",
            "required": true,
            "deprecated": false,
            "allowEmptyValue": false,
            "schema": {
              "type": "string"
            },
            "style": "simple",
            "explode": false,
            "allowReserved": false
          }
        ],
        "requestBody": {
          "description": "The updated Project resource",
          "content": {
            "application/merge-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Project-project.edit"
              }
            }
          },
          "required": true
        },
        "deprecated": false,
        "security": [
          {
            "apiKey": [
              "ROLE_ADMIN"
            ]
          }
        ]
      },
      "parameters": []
    },
    "/arya/refresh": {
      "post": {
        "operationId": "aryarefresh",
        "tags": [
          "Login"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Refresh-result"
                }
              }
            }
          }
        },
        "summary": "Get a new token with refresh token.",
        "description": "The resulted token is valid for one hour and refreshtoken used for this call is deleted. The new provided refresh token must be used for the next call. A refreshtoken is valid for one month.",
        "parameters": [],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Refresh"
              }
            }
          },
          "required": true
        },
        "deprecated": false
      },
      "parameters": []
    },
    "/arya/roles": {
      "get": {
        "operationId": "getRoleCollection",
        "tags": [
          "Role"
        ],
        "responses": {
          "200": {
            "description": "Role collection",
            "content": {
              "application/ld+json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "hydra:member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Role.jsonld-Read"
                      }
                    },
                    "hydra:totalItems": {
                      "type": "integer",
                      "minimum": 0
                    },
                    "hydra:view": {
                      "type": "object",
                      "properties": {
                        "@id": {
                          "type": "string",
                          "format": "iri-reference"
                        },
                        "@type": {
                          "type": "string"
                        },
                        "hydra:first": {
                          "type": "string",
                          "format": "iri-reference"
                        },
                        "hydra:last": {
                          "type": "string",
                          "format": "iri-reference"
                        },
                        "hydra:previous": {
                          "type": "string",
                          "format": "iri-reference"
                        },
                        "hydra:next": {
                          "type": "string",
                          "format": "iri-reference"
                        }
                      }
                    },
                    "hydra:search": {
                      "type": "object",
                      "properties": {
                        "@type": {
                          "type": "string"
                        },
                        "hydra:template": {
                          "type": "string"
                        },
                        "hydra:variableRepresentation": {
                          "type": "string"
                        },
                        "hydra:mapping": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "@type": {
                                "type": "string"
                              },
                              "variable": {
                                "type": "string"
                              },
                              "property": {
                                "type": "string",
                                "nullable": true
                              },
                              "required": {
                                "type": "boolean"
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "required": [
                    "hydra:member"
                  ]
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Role-Read"
                  }
                }
              },
              "text/html": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Role-Read"
                  }
                }
              }
            }
          }
        },
        "summary": "List roles.",
        "description": "Roles are security grants accorded to each user.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "The collection page number",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "integer",
              "default": 1
            },
            "style": "form",
            "explode": false,
            "allowReserved": false
          },
          {
            "name": "pagination",
            "in": "query",
            "description": "Enable or disable pagination",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "boolean"
            },
            "style": "form",
            "explode": false,
            "allowReserved": false
          }
        ],
        "deprecated": false,
        "security": [
          {
            "apiKey": [
              "ROLE_USER"
            ]
          }
        ]
      },
      "parameters": []
    },
    "/arya/roles/{name}": {
      "get": {
        "operationId": "getRoleItem",
        "tags": [
          "Role"
        ],
        "responses": {
          "200": {
            "description": "Role resource",
            "content": {
              "application/ld+json": {
                "schema": {
                  "$ref": "#/components/schemas/Role.jsonld-Read"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Role-Read"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/Role-Read"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found"
          }
        },
        "summary": "Get a specific role.",
        "description": "",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "Resource identifier",
            "required": true,
            "deprecated": false,
            "allowEmptyValue": false,
            "schema": {
              "type": "string"
            },
            "style": "simple",
            "explode": false,
            "allowReserved": false
          }
        ],
        "deprecated": false,
        "security": [
          {
            "apiKey": [
              "ROLE_USER"
            ]
          }
        ]
      },
      "parameters": []
    },
    "/arya/sponsorships/{id}": {
      "get": {
        "operationId": "getSponsorshipItem",
        "tags": [
          "Sponsorship"
        ],
        "responses": {
          "200": {
            "description": "Sponsorship resource",
            "content": {
              "application/ld+json": {
                "schema": {
                  "$ref": "#/components/schemas/Sponsorship.jsonld-Read"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Sponsorship-Read"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/Sponsorship-Read"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found"
          }
        },
        "summary": "Get a sponsorship information.",
        "description": "Sponsorship is a way for a user to invite people to use nua.ge. This call is about getting a sponsorship code to know what's the name of the inviter and how much credit it will give to the invited if he provides its credit card",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Resource identifier",
            "required": true,
            "deprecated": false,
            "allowEmptyValue": false,
            "schema": {
              "type": "string"
            },
            "style": "simple",
            "explode": false,
            "allowReserved": false
          }
        ],
        "deprecated": false,
        "security": []
      },
      "parameters": []
    },
    "/arya/users": {
      "get": {
        "operationId": "getUserCollection",
        "tags": [
          "User"
        ],
        "responses": {
          "200": {
            "description": "User collection",
            "content": {
              "application/ld+json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "hydra:member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/User.jsonld-Read"
                      }
                    },
                    "hydra:totalItems": {
                      "type": "integer",
                      "minimum": 0
                    },
                    "hydra:view": {
                      "type": "object",
                      "properties": {
                        "@id": {
                          "type": "string",
                          "format": "iri-reference"
                        },
                        "@type": {
                          "type": "string"
                        },
                        "hydra:first": {
                          "type": "string",
                          "format": "iri-reference"
                        },
                        "hydra:last": {
                          "type": "string",
                          "format": "iri-reference"
                        },
                        "hydra:previous": {
                          "type": "string",
                          "format": "iri-reference"
                        },
                        "hydra:next": {
                          "type": "string",
                          "format": "iri-reference"
                        }
                      }
                    },
                    "hydra:search": {
                      "type": "object",
                      "properties": {
                        "@type": {
                          "type": "string"
                        },
                        "hydra:template": {
                          "type": "string"
                        },
                        "hydra:variableRepresentation": {
                          "type": "string"
                        },
                        "hydra:mapping": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "@type": {
                                "type": "string"
                              },
                              "variable": {
                                "type": "string"
                              },
                              "property": {
                                "type": "string",
                                "nullable": true
                              },
                              "required": {
                                "type": "boolean"
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "required": [
                    "hydra:member"
                  ]
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User-Read"
                  }
                }
              },
              "text/html": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User-Read"
                  }
                }
              }
            }
          }
        },
        "summary": "List all users on the current organization.",
        "description": "",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "The collection page number",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "integer",
              "default": 1
            },
            "style": "form",
            "explode": false,
            "allowReserved": false
          },
          {
            "name": "pagination",
            "in": "query",
            "description": "Enable or disable pagination",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "boolean"
            },
            "style": "form",
            "explode": false,
            "allowReserved": false
          },
          {
            "name": "order[id]",
            "in": "query",
            "description": "",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            },
            "style": "form",
            "explode": false,
            "allowReserved": false
          },
          {
            "name": "order[name]",
            "in": "query",
            "description": "",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            },
            "style": "form",
            "explode": false,
            "allowReserved": false
          },
          {
            "name": "order[email]",
            "in": "query",
            "description": "",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            },
            "style": "form",
            "explode": false,
            "allowReserved": false
          },
          {
            "name": "id",
            "in": "query",
            "description": "",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string"
            },
            "style": "form",
            "explode": false,
            "allowReserved": false
          },
          {
            "name": "id[]",
            "in": "query",
            "description": "",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true,
            "allowReserved": false
          },
          {
            "name": "name",
            "in": "query",
            "description": "",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string"
            },
            "style": "form",
            "explode": false,
            "allowReserved": false
          },
          {
            "name": "organization",
            "in": "query",
            "description": "",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string"
            },
            "style": "form",
            "explode": false,
            "allowReserved": false
          },
          {
            "name": "organization[]",
            "in": "query",
            "description": "",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true,
            "allowReserved": false
          },
          {
            "name": "lastname",
            "in": "query",
            "description": "",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string"
            },
            "style": "form",
            "explode": false,
            "allowReserved": false
          },
          {
            "name": "firstname",
            "in": "query",
            "description": "",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string"
            },
            "style": "form",
            "explode": false,
            "allowReserved": false
          },
          {
            "name": "email",
            "in": "query",
            "description": "",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string"
            },
            "style": "form",
            "explode": false,
            "allowReserved": false
          }
        ],
        "deprecated": false,
        "security": [
          {
            "apiKey": [
              "ROLE_USER"
            ]
          }
        ]
      },
      "parameters": []
    },
    "/arya/users/{id}": {
      "get": {
        "operationId": "getUserItem",
        "tags": [
          "User"
        ],
        "responses": {
          "200": {
            "description": "User resource",
            "content": {
              "application/ld+json": {
                "schema": {
                  "$ref": "#/components/schemas/User.jsonld-Read"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User-Read"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/User-Read"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found"
          }
        },
        "summary": "Retrieve a specific user on the current organization.",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Resource identifier",
            "required": true,
            "deprecated": false,
            "allowEmptyValue": false,
            "schema": {
              "type": "string"
            },
            "style": "simple",
            "explode": false,
            "allowReserved": false
          }
        ],
        "deprecated": false,
        "security": [
          {
            "apiKey": [
              "ROLE_USER"
            ]
          }
        ]
      },
      "delete": {
        "operationId": "deleteUserItem",
        "tags": [
          "User"
        ],
        "responses": {
          "204": {
            "description": "User resource deleted"
          },
          "404": {
            "description": "Resource not found"
          }
        },
        "summary": "Delete a user from an organization.",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Resource identifier",
            "required": true,
            "deprecated": false,
            "allowEmptyValue": false,
            "schema": {
              "type": "string"
            },
            "style": "simple",
            "explode": false,
            "allowReserved": false
          }
        ],
        "deprecated": false,
        "security": [
          {
            "apiKey": [
              "ROLE_ADMIN"
            ]
          }
        ]
      },
      "patch": {
        "operationId": "patchUserItem",
        "tags": [
          "User"
        ],
        "responses": {
          "200": {
            "description": "User resource updated",
            "content": {
              "application/ld+json": {
                "schema": {
                  "$ref": "#/components/schemas/User.jsonld-Read"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User-Read"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/User-Read"
                }
              }
            },
            "links": {
              "GetUserItem": {
                "operationId": "getUserItem",
                "parameters": {
                  "id": "$response.body#/id"
                },
                "description": "The `id` value returned in the response can be used as the `id` parameter in `GET /arya/users/{id}`."
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "404": {
            "description": "Resource not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Edit a user to an organization.",
        "description": "You can always edit yourself. You can edit some attributes on other users if you are an admin",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Resource identifier",
            "required": true,
            "deprecated": false,
            "allowEmptyValue": false,
            "schema": {
              "type": "string"
            },
            "style": "simple",
            "explode": false,
            "allowReserved": false
          }
        ],
        "requestBody": {
          "description": "The updated User resource",
          "content": {
            "application/merge-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/User-Write"
              }
            }
          },
          "required": true
        },
        "deprecated": false,
        "security": [
          {
            "apiKey": [
              "ROLE_USER",
              "ROLE_ADMIN"
            ]
          }
        ]
      },
      "parameters": []
    },
    "/catalog/items": {
      "get": {
        "operationId": "getItemCollection",
        "tags": [
          "Item"
        ],
        "responses": {
          "200": {
            "description": "Item collection",
            "content": {
              "application/ld+json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "hydra:member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Item.jsonld-Read"
                      }
                    },
                    "hydra:totalItems": {
                      "type": "integer",
                      "minimum": 0
                    },
                    "hydra:view": {
                      "type": "object",
                      "properties": {
                        "@id": {
                          "type": "string",
                          "format": "iri-reference"
                        },
                        "@type": {
                          "type": "string"
                        },
                        "hydra:first": {
                          "type": "string",
                          "format": "iri-reference"
                        },
                        "hydra:last": {
                          "type": "string",
                          "format": "iri-reference"
                        },
                        "hydra:previous": {
                          "type": "string",
                          "format": "iri-reference"
                        },
                        "hydra:next": {
                          "type": "string",
                          "format": "iri-reference"
                        }
                      }
                    },
                    "hydra:search": {
                      "type": "object",
                      "properties": {
                        "@type": {
                          "type": "string"
                        },
                        "hydra:template": {
                          "type": "string"
                        },
                        "hydra:variableRepresentation": {
                          "type": "string"
                        },
                        "hydra:mapping": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "@type": {
                                "type": "string"
                              },
                              "variable": {
                                "type": "string"
                              },
                              "property": {
                                "type": "string",
                                "nullable": true
                              },
                              "required": {
                                "type": "boolean"
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "required": [
                    "hydra:member"
                  ]
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Item-Read"
                  }
                }
              },
              "text/html": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Item-Read"
                  }
                }
              }
            }
          }
        },
        "summary": "List items.",
        "description": "An item is a generic entity describing anything that can be sold: flavors, images ...",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "The collection page number",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "integer",
              "default": 1
            },
            "style": "form",
            "explode": false,
            "allowReserved": false
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "The number of items per page",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "integer",
              "default": 100,
              "minimum": 0
            },
            "style": "form",
            "explode": false,
            "allowReserved": false
          },
          {
            "name": "pagination",
            "in": "query",
            "description": "Enable or disable pagination",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "boolean"
            },
            "style": "form",
            "explode": false,
            "allowReserved": false
          },
          {
            "name": "id",
            "in": "query",
            "description": "",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string"
            },
            "style": "form",
            "explode": false,
            "allowReserved": false
          },
          {
            "name": "id[]",
            "in": "query",
            "description": "",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true,
            "allowReserved": false
          },
          {
            "name": "name",
            "in": "query",
            "description": "",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string"
            },
            "style": "form",
            "explode": false,
            "allowReserved": false
          },
          {
            "name": "name[]",
            "in": "query",
            "description": "",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true,
            "allowReserved": false
          },
          {
            "name": "type",
            "in": "query",
            "description": "",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string"
            },
            "style": "form",
            "explode": false,
            "allowReserved": false
          },
          {
            "name": "type[]",
            "in": "query",
            "description": "",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true,
            "allowReserved": false
          },
          {
            "name": "description",
            "in": "query",
            "description": "",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string"
            },
            "style": "form",
            "explode": false,
            "allowReserved": false
          }
        ],
        "deprecated": false,
        "security": []
      },
      "parameters": []
    },
    "/catalog/items/{id}": {
      "get": {
        "operationId": "getItemItem",
        "tags": [
          "Item"
        ],
        "responses": {
          "200": {
            "description": "Item resource",
            "content": {
              "application/ld+json": {
                "schema": {
                  "$ref": "#/components/schemas/Item.jsonld-Read"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Item-Read"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/Item-Read"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found"
          }
        },
        "summary": "Get a specific item.",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Resource identifier",
            "required": true,
            "deprecated": false,
            "allowEmptyValue": false,
            "schema": {
              "type": "string"
            },
            "style": "simple",
            "explode": false,
            "allowReserved": false
          }
        ],
        "deprecated": false,
        "security": []
      },
      "parameters": []
    },
    "/catalog/products": {
      "get": {
        "operationId": "getProductCollection",
        "tags": [
          "Product"
        ],
        "responses": {
          "200": {
            "description": "Product collection",
            "content": {
              "application/ld+json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "hydra:member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Product.jsonld-Read"
                      }
                    },
                    "hydra:totalItems": {
                      "type": "integer",
                      "minimum": 0
                    },
                    "hydra:view": {
                      "type": "object",
                      "properties": {
                        "@id": {
                          "type": "string",
                          "format": "iri-reference"
                        },
                        "@type": {
                          "type": "string"
                        },
                        "hydra:first": {
                          "type": "string",
                          "format": "iri-reference"
                        },
                        "hydra:last": {
                          "type": "string",
                          "format": "iri-reference"
                        },
                        "hydra:previous": {
                          "type": "string",
                          "format": "iri-reference"
                        },
                        "hydra:next": {
                          "type": "string",
                          "format": "iri-reference"
                        }
                      }
                    },
                    "hydra:search": {
                      "type": "object",
                      "properties": {
                        "@type": {
                          "type": "string"
                        },
                        "hydra:template": {
                          "type": "string"
                        },
                        "hydra:variableRepresentation": {
                          "type": "string"
                        },
                        "hydra:mapping": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "@type": {
                                "type": "string"
                              },
                              "variable": {
                                "type": "string"
                              },
                              "property": {
                                "type": "string",
                                "nullable": true
                              },
                              "required": {
                                "type": "boolean"
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "required": [
                    "hydra:member"
                  ]
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Product-Read"
                  }
                }
              },
              "text/html": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Product-Read"
                  }
                }
              }
            }
          }
        },
        "summary": "List products.",
        "description": "Product is just an item, with price.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "The collection page number",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "integer",
              "default": 1
            },
            "style": "form",
            "explode": false,
            "allowReserved": false
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "The number of items per page",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "integer",
              "default": 100,
              "minimum": 0
            },
            "style": "form",
            "explode": false,
            "allowReserved": false
          },
          {
            "name": "pagination",
            "in": "query",
            "description": "Enable or disable pagination",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "boolean"
            },
            "style": "form",
            "explode": false,
            "allowReserved": false
          },
          {
            "name": "id",
            "in": "query",
            "description": "",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string"
            },
            "style": "form",
            "explode": false,
            "allowReserved": false
          },
          {
            "name": "id[]",
            "in": "query",
            "description": "",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true,
            "allowReserved": false
          },
          {
            "name": "item.type",
            "in": "query",
            "description": "",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string"
            },
            "style": "form",
            "explode": false,
            "allowReserved": false
          },
          {
            "name": "item.type[]",
            "in": "query",
            "description": "",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true,
            "allowReserved": false
          },
          {
            "name": "item.externalId",
            "in": "query",
            "description": "",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string"
            },
            "style": "form",
            "explode": false,
            "allowReserved": false
          },
          {
            "name": "item.externalId[]",
            "in": "query",
            "description": "",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true,
            "allowReserved": false
          },
          {
            "name": "item.name",
            "in": "query",
            "description": "",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string"
            },
            "style": "form",
            "explode": false,
            "allowReserved": false
          },
          {
            "name": "item.description",
            "in": "query",
            "description": "",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string"
            },
            "style": "form",
            "explode": false,
            "allowReserved": false
          }
        ],
        "deprecated": false,
        "security": []
      },
      "parameters": []
    },
    "/catalog/products/{id}": {
      "get": {
        "operationId": "getProductItem",
        "tags": [
          "Product"
        ],
        "responses": {
          "200": {
            "description": "Product resource",
            "content": {
              "application/ld+json": {
                "schema": {
                  "$ref": "#/components/schemas/Product.jsonld-Read"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product-Read"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/Product-Read"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found"
          }
        },
        "summary": "Get a specific product.",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Resource identifier",
            "required": true,
            "deprecated": false,
            "allowEmptyValue": false,
            "schema": {
              "type": "string"
            },
            "style": "simple",
            "explode": false,
            "allowReserved": false
          }
        ],
        "deprecated": false,
        "security": []
      },
      "parameters": []
    },
    "/condorcet/query": {
      "post": {
        "operationId": "postQueryCollection",
        "tags": [
          "Query"
        ],
        "responses": {
          "201": {
            "description": "Query resource created",
            "content": {
              "application/ld+json": {
                "schema": {
                  "$ref": "#/components/schemas/Query.jsonld"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Query"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/Query"
                }
              }
            },
            "links": {}
          },
          "400": {
            "description": "Invalid input"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Grab metrics",
        "description": "This is a unique endpoints to get all the metrics you want about your usage, let it be cores, memory ... or money.\n *                  This endpoint tries to follow standard Simpod/Json, so that it may be easy, in a future version, to plug it directly into Grafana",
        "parameters": [],
        "requestBody": {
          "description": "The new Query resource",
          "content": {
            "application/ld+json": {
              "schema": {
                "$ref": "#/components/schemas/Query.jsonld"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Query"
              }
            },
            "text/html": {
              "schema": {
                "$ref": "#/components/schemas/Query"
              }
            }
          },
          "required": true
        },
        "deprecated": false,
        "security": [
          {
            "apiKey": [
              "ROLE_USER"
            ]
          }
        ]
      },
      "parameters": []
    },
    "/rockefeller/flavors": {
      "get": {
        "operationId": "getFlavorCollection",
        "tags": [
          "Flavor"
        ],
        "responses": {
          "200": {
            "description": "Flavor collection",
            "content": {
              "application/ld+json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "hydra:member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Flavor.jsonld-Read"
                      }
                    },
                    "hydra:totalItems": {
                      "type": "integer",
                      "minimum": 0
                    },
                    "hydra:view": {
                      "type": "object",
                      "properties": {
                        "@id": {
                          "type": "string",
                          "format": "iri-reference"
                        },
                        "@type": {
                          "type": "string"
                        },
                        "hydra:first": {
                          "type": "string",
                          "format": "iri-reference"
                        },
                        "hydra:last": {
                          "type": "string",
                          "format": "iri-reference"
                        },
                        "hydra:previous": {
                          "type": "string",
                          "format": "iri-reference"
                        },
                        "hydra:next": {
                          "type": "string",
                          "format": "iri-reference"
                        }
                      }
                    },
                    "hydra:search": {
                      "type": "object",
                      "properties": {
                        "@type": {
                          "type": "string"
                        },
                        "hydra:template": {
                          "type": "string"
                        },
                        "hydra:variableRepresentation": {
                          "type": "string"
                        },
                        "hydra:mapping": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "@type": {
                                "type": "string"
                              },
                              "variable": {
                                "type": "string"
                              },
                              "property": {
                                "type": "string",
                                "nullable": true
                              },
                              "required": {
                                "type": "boolean"
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "required": [
                    "hydra:member"
                  ]
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Flavor-Read"
                  }
                }
              }
            }
          }
        },
        "summary": "List flavors.",
        "description": "Flavors details a specific hardware configuration: cores, memory and base storage. You may get different results whether you are logged or not because custom flavors can be returned per organization.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "The collection page number",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "integer",
              "default": 1
            },
            "style": "form",
            "explode": false,
            "allowReserved": false
          },
          {
            "name": "pagination",
            "in": "query",
            "description": "Enable or disable pagination",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "boolean"
            },
            "style": "form",
            "explode": false,
            "allowReserved": false
          },
          {
            "name": "order[id]",
            "in": "query",
            "description": "",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            },
            "style": "form",
            "explode": false,
            "allowReserved": false
          },
          {
            "name": "order[name]",
            "in": "query",
            "description": "",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            },
            "style": "form",
            "explode": false,
            "allowReserved": false
          },
          {
            "name": "order[ram]",
            "in": "query",
            "description": "",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            },
            "style": "form",
            "explode": false,
            "allowReserved": false
          },
          {
            "name": "order[core]",
            "in": "query",
            "description": "",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            },
            "style": "form",
            "explode": false,
            "allowReserved": false
          },
          {
            "name": "order[disk]",
            "in": "query",
            "description": "",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            },
            "style": "form",
            "explode": false,
            "allowReserved": false
          },
          {
            "name": "id",
            "in": "query",
            "description": "",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string"
            },
            "style": "form",
            "explode": false,
            "allowReserved": false
          },
          {
            "name": "id[]",
            "in": "query",
            "description": "",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true,
            "allowReserved": false
          },
          {
            "name": "name",
            "in": "query",
            "description": "",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string"
            },
            "style": "form",
            "explode": false,
            "allowReserved": false
          },
          {
            "name": "ram",
            "in": "query",
            "description": "",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "integer"
            },
            "style": "form",
            "explode": false,
            "allowReserved": false
          },
          {
            "name": "ram[]",
            "in": "query",
            "description": "",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "style": "form",
            "explode": true,
            "allowReserved": false
          },
          {
            "name": "core",
            "in": "query",
            "description": "",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "integer"
            },
            "style": "form",
            "explode": false,
            "allowReserved": false
          },
          {
            "name": "core[]",
            "in": "query",
            "description": "",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "style": "form",
            "explode": true,
            "allowReserved": false
          },
          {
            "name": "disk",
            "in": "query",
            "description": "",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "integer"
            },
            "style": "form",
            "explode": false,
            "allowReserved": false
          },
          {
            "name": "disk[]",
            "in": "query",
            "description": "",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            },
            "style": "form",
            "explode": true,
            "allowReserved": false
          }
        ],
        "deprecated": false,
        "security": []
      },
      "parameters": []
    },
    "/rockefeller/flavors/{id}": {
      "get": {
        "operationId": "getFlavorItem",
        "tags": [
          "Flavor"
        ],
        "responses": {
          "200": {
            "description": "Flavor resource",
            "content": {
              "application/ld+json": {
                "schema": {
                  "$ref": "#/components/schemas/Flavor.jsonld-Read"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Flavor-Read"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found"
          }
        },
        "summary": "Get a specific flavor.",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Resource identifier",
            "required": true,
            "deprecated": false,
            "allowEmptyValue": false,
            "schema": {
              "type": "string"
            },
            "style": "simple",
            "explode": false,
            "allowReserved": false
          }
        ],
        "deprecated": false,
        "security": []
      },
      "parameters": []
    },
    "/rockefeller/images": {
      "get": {
        "operationId": "getImageCollection",
        "tags": [
          "Image"
        ],
        "responses": {
          "200": {
            "description": "Image collection",
            "content": {
              "application/ld+json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "hydra:member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Image.jsonld-Read"
                      }
                    },
                    "hydra:totalItems": {
                      "type": "integer",
                      "minimum": 0
                    },
                    "hydra:view": {
                      "type": "object",
                      "properties": {
                        "@id": {
                          "type": "string",
                          "format": "iri-reference"
                        },
                        "@type": {
                          "type": "string"
                        },
                        "hydra:first": {
                          "type": "string",
                          "format": "iri-reference"
                        },
                        "hydra:last": {
                          "type": "string",
                          "format": "iri-reference"
                        },
                        "hydra:previous": {
                          "type": "string",
                          "format": "iri-reference"
                        },
                        "hydra:next": {
                          "type": "string",
                          "format": "iri-reference"
                        }
                      }
                    },
                    "hydra:search": {
                      "type": "object",
                      "properties": {
                        "@type": {
                          "type": "string"
                        },
                        "hydra:template": {
                          "type": "string"
                        },
                        "hydra:variableRepresentation": {
                          "type": "string"
                        },
                        "hydra:mapping": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "@type": {
                                "type": "string"
                              },
                              "variable": {
                                "type": "string"
                              },
                              "property": {
                                "type": "string",
                                "nullable": true
                              },
                              "required": {
                                "type": "boolean"
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "required": [
                    "hydra:member"
                  ]
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Image-Read"
                  }
                }
              }
            }
          }
        },
        "summary": "List images.",
        "description": "Images represents operating system originally installed in your VM. You may get more results if logged because custom images will be returned.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "The collection page number",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "integer",
              "default": 1
            },
            "style": "form",
            "explode": false,
            "allowReserved": false
          },
          {
            "name": "pagination",
            "in": "query",
            "description": "Enable or disable pagination",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "boolean"
            },
            "style": "form",
            "explode": false,
            "allowReserved": false
          },
          {
            "name": "order[id]",
            "in": "query",
            "description": "",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            },
            "style": "form",
            "explode": false,
            "allowReserved": false
          },
          {
            "name": "order[name]",
            "in": "query",
            "description": "",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            },
            "style": "form",
            "explode": false,
            "allowReserved": false
          },
          {
            "name": "order[description]",
            "in": "query",
            "description": "",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            },
            "style": "form",
            "explode": false,
            "allowReserved": false
          },
          {
            "name": "order[createdAt]",
            "in": "query",
            "description": "",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            },
            "style": "form",
            "explode": false,
            "allowReserved": false
          },
          {
            "name": "id",
            "in": "query",
            "description": "",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string"
            },
            "style": "form",
            "explode": false,
            "allowReserved": false
          },
          {
            "name": "id[]",
            "in": "query",
            "description": "",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true,
            "allowReserved": false
          },
          {
            "name": "name",
            "in": "query",
            "description": "",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string"
            },
            "style": "form",
            "explode": false,
            "allowReserved": false
          },
          {
            "name": "description",
            "in": "query",
            "description": "",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string"
            },
            "style": "form",
            "explode": false,
            "allowReserved": false
          },
          {
            "name": "osName",
            "in": "query",
            "description": "",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string"
            },
            "style": "form",
            "explode": false,
            "allowReserved": false
          }
        ],
        "deprecated": false,
        "security": []
      },
      "parameters": []
    },
    "/rockefeller/images/{id}": {
      "get": {
        "operationId": "getImageItem",
        "tags": [
          "Image"
        ],
        "responses": {
          "200": {
            "description": "Image resource",
            "content": {
              "application/ld+json": {
                "schema": {
                  "$ref": "#/components/schemas/Image.jsonld-Read"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Image-Read"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found"
          }
        },
        "summary": "Get a specific image.",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Resource identifier",
            "required": true,
            "deprecated": false,
            "allowEmptyValue": false,
            "schema": {
              "type": "string"
            },
            "style": "simple",
            "explode": false,
            "allowReserved": false
          }
        ],
        "deprecated": false,
        "security": []
      },
      "parameters": []
    },
    "/rockefeller/ips": {
      "get": {
        "operationId": "getIpCollection",
        "tags": [
          "Ip"
        ],
        "responses": {
          "200": {
            "description": "Ip collection",
            "content": {
              "application/ld+json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "hydra:member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Ip.IpOutput.jsonld-Read"
                      }
                    },
                    "hydra:totalItems": {
                      "type": "integer",
                      "minimum": 0
                    },
                    "hydra:view": {
                      "type": "object",
                      "properties": {
                        "@id": {
                          "type": "string",
                          "format": "iri-reference"
                        },
                        "@type": {
                          "type": "string"
                        },
                        "hydra:first": {
                          "type": "string",
                          "format": "iri-reference"
                        },
                        "hydra:last": {
                          "type": "string",
                          "format": "iri-reference"
                        },
                        "hydra:previous": {
                          "type": "string",
                          "format": "iri-reference"
                        },
                        "hydra:next": {
                          "type": "string",
                          "format": "iri-reference"
                        }
                      }
                    },
                    "hydra:search": {
                      "type": "object",
                      "properties": {
                        "@type": {
                          "type": "string"
                        },
                        "hydra:template": {
                          "type": "string"
                        },
                        "hydra:variableRepresentation": {
                          "type": "string"
                        },
                        "hydra:mapping": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "@type": {
                                "type": "string"
                              },
                              "variable": {
                                "type": "string"
                              },
                              "property": {
                                "type": "string",
                                "nullable": true
                              },
                              "required": {
                                "type": "boolean"
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "required": [
                    "hydra:member"
                  ]
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Ip.IpOutput-Read"
                  }
                }
              }
            }
          }
        },
        "summary": "List IPs.",
        "description": "List IP associated to your servers",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "The collection page number",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "integer",
              "default": 1
            },
            "style": "form",
            "explode": false,
            "allowReserved": false
          },
          {
            "name": "pagination",
            "in": "query",
            "description": "Enable or disable pagination",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "boolean"
            },
            "style": "form",
            "explode": false,
            "allowReserved": false
          },
          {
            "name": "id",
            "in": "query",
            "description": "",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string"
            },
            "style": "form",
            "explode": false,
            "allowReserved": false
          },
          {
            "name": "id[]",
            "in": "query",
            "description": "",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true,
            "allowReserved": false
          }
        ],
        "deprecated": false,
        "security": [
          {
            "apiKey": [
              "ROLE_USER"
            ]
          }
        ]
      },
      "post": {
        "operationId": "postIpCollection",
        "tags": [
          "Ip"
        ],
        "responses": {
          "201": {
            "description": "Ip resource created",
            "content": {
              "application/ld+json": {
                "schema": {
                  "$ref": "#/components/schemas/Ip.IpOutput.jsonld-Read"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Ip.IpOutput-Read"
                }
              }
            },
            "links": {
              "GetIpItem": {
                "operationId": "getIpItem",
                "parameters": {
                  "id": "$response.body#/id"
                },
                "description": "The `id` value returned in the response can be used as the `id` parameter in `GET /rockefeller/ips/{id}`."
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Creates an IP.",
        "description": "",
        "parameters": [],
        "requestBody": {
          "description": "The new Ip resource",
          "content": {
            "application/ld+json": {
              "schema": {
                "$ref": "#/components/schemas/Ip.jsonld-Write"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Ip-Write"
              }
            }
          },
          "required": true
        },
        "deprecated": false,
        "security": [
          {
            "apiKey": [
              "ROLE_USER"
            ]
          }
        ]
      },
      "parameters": []
    },
    "/rockefeller/ips/{id}": {
      "get": {
        "operationId": "getIpItem",
        "tags": [
          "Ip"
        ],
        "responses": {
          "200": {
            "description": "Ip resource",
            "content": {
              "application/ld+json": {
                "schema": {
                  "$ref": "#/components/schemas/Ip.IpOutput.jsonld-Read"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Ip.IpOutput-Read"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found"
          }
        },
        "summary": "Get a specific IP",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Resource identifier",
            "required": true,
            "deprecated": false,
            "allowEmptyValue": false,
            "schema": {
              "type": "string"
            },
            "style": "simple",
            "explode": false,
            "allowReserved": false
          }
        ],
        "deprecated": false,
        "security": [
          {
            "apiKey": [
              "ROLE_USER"
            ]
          }
        ]
      },
      "delete": {
        "operationId": "deleteIpItem",
        "tags": [
          "Ip"
        ],
        "responses": {
          "204": {
            "description": "Ip resource deleted"
          },
          "404": {
            "description": "Resource not found"
          }
        },
        "summary": "Deletes a specific IP.",
        "description": "You can only delete public IPs.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Resource identifier",
            "required": true,
            "deprecated": false,
            "allowEmptyValue": false,
            "schema": {
              "type": "string"
            },
            "style": "simple",
            "explode": false,
            "allowReserved": false
          }
        ],
        "deprecated": false,
        "security": [
          {
            "apiKey": [
              "ROLE_USER"
            ]
          }
        ]
      },
      "patch": {
        "operationId": "patchIpItem",
        "tags": [
          "Ip"
        ],
        "responses": {
          "200": {
            "description": "Ip resource updated",
            "content": {
              "application/ld+json": {
                "schema": {
                  "$ref": "#/components/schemas/Ip.IpOutput.jsonld-Read"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Ip.IpOutput-Read"
                }
              }
            },
            "links": {
              "GetIpItem": {
                "operationId": "getIpItem",
                "parameters": {
                  "id": "$response.body#/id"
                },
                "description": "The `id` value returned in the response can be used as the `id` parameter in `GET /rockefeller/ips/{id}`."
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "404": {
            "description": "Resource not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Edit a specific ip.",
        "description": "editable fields: server, description, protected",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Resource identifier",
            "required": true,
            "deprecated": false,
            "allowEmptyValue": false,
            "schema": {
              "type": "string"
            },
            "style": "simple",
            "explode": false,
            "allowReserved": false
          }
        ],
        "requestBody": {
          "description": "The updated Ip resource",
          "content": {
            "application/merge-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Ip-ip.edit"
              }
            }
          },
          "required": true
        },
        "deprecated": false,
        "security": [
          {
            "apiKey": [
              "ROLE_USER"
            ]
          }
        ]
      },
      "parameters": []
    },
    "/rockefeller/limits": {
      "get": {
        "operationId": "getProjectLimitCollection",
        "tags": [
          "ProjectLimit"
        ],
        "responses": {
          "200": {
            "description": "ProjectLimit collection",
            "content": {
              "application/ld+json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "hydra:member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ProjectLimit.ProjectLimitOutput.jsonld-Read"
                      }
                    },
                    "hydra:totalItems": {
                      "type": "integer",
                      "minimum": 0
                    },
                    "hydra:view": {
                      "type": "object",
                      "properties": {
                        "@id": {
                          "type": "string",
                          "format": "iri-reference"
                        },
                        "@type": {
                          "type": "string"
                        },
                        "hydra:first": {
                          "type": "string",
                          "format": "iri-reference"
                        },
                        "hydra:last": {
                          "type": "string",
                          "format": "iri-reference"
                        },
                        "hydra:previous": {
                          "type": "string",
                          "format": "iri-reference"
                        },
                        "hydra:next": {
                          "type": "string",
                          "format": "iri-reference"
                        }
                      }
                    },
                    "hydra:search": {
                      "type": "object",
                      "properties": {
                        "@type": {
                          "type": "string"
                        },
                        "hydra:template": {
                          "type": "string"
                        },
                        "hydra:variableRepresentation": {
                          "type": "string"
                        },
                        "hydra:mapping": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "@type": {
                                "type": "string"
                              },
                              "variable": {
                                "type": "string"
                              },
                              "property": {
                                "type": "string",
                                "nullable": true
                              },
                              "required": {
                                "type": "boolean"
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "required": [
                    "hydra:member"
                  ]
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProjectLimit.ProjectLimitOutput-Read"
                  }
                }
              }
            }
          }
        },
        "summary": "List project quotas.",
        "description": "",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "The collection page number",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "integer",
              "default": 1
            },
            "style": "form",
            "explode": false,
            "allowReserved": false
          },
          {
            "name": "pagination",
            "in": "query",
            "description": "Enable or disable pagination",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "boolean"
            },
            "style": "form",
            "explode": false,
            "allowReserved": false
          },
          {
            "name": "target",
            "in": "query",
            "description": "",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string"
            },
            "style": "form",
            "explode": false,
            "allowReserved": false
          },
          {
            "name": "target[]",
            "in": "query",
            "description": "",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true,
            "allowReserved": false
          },
          {
            "name": "scope",
            "in": "query",
            "description": "",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string"
            },
            "style": "form",
            "explode": false,
            "allowReserved": false
          },
          {
            "name": "scope[]",
            "in": "query",
            "description": "",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true,
            "allowReserved": false
          },
          {
            "name": "resource",
            "in": "query",
            "description": "",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string"
            },
            "style": "form",
            "explode": false,
            "allowReserved": false
          },
          {
            "name": "resource[]",
            "in": "query",
            "description": "",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true,
            "allowReserved": false
          }
        ],
        "deprecated": false,
        "security": [
          {
            "apiKey": [
              "ROLE_USER"
            ]
          }
        ]
      },
      "parameters": []
    },
    "/rockefeller/limits/{id}": {
      "get": {
        "operationId": "getProjectLimitItem",
        "tags": [
          "ProjectLimit"
        ],
        "responses": {
          "200": {
            "description": "ProjectLimit resource",
            "content": {
              "application/ld+json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectLimit.ProjectLimitOutput.jsonld-Read"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectLimit.ProjectLimitOutput-Read"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found"
          }
        },
        "summary": "Get a specific quota",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Resource identifier",
            "required": true,
            "deprecated": false,
            "allowEmptyValue": false,
            "schema": {
              "type": "string"
            },
            "style": "simple",
            "explode": false,
            "allowReserved": false
          }
        ],
        "deprecated": false,
        "security": [
          {
            "apiKey": [
              "ROLE_USER"
            ]
          }
        ]
      },
      "parameters": []
    },
    "/rockefeller/security_groups": {
      "get": {
        "operationId": "getSecurityGroupCollection",
        "tags": [
          "SecurityGroup"
        ],
        "responses": {
          "200": {
            "description": "SecurityGroup collection",
            "content": {
              "application/ld+json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "hydra:member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/SecurityGroup.jsonld-Read"
                      }
                    },
                    "hydra:totalItems": {
                      "type": "integer",
                      "minimum": 0
                    },
                    "hydra:view": {
                      "type": "object",
                      "properties": {
                        "@id": {
                          "type": "string",
                          "format": "iri-reference"
                        },
                        "@type": {
                          "type": "string"
                        },
                        "hydra:first": {
                          "type": "string",
                          "format": "iri-reference"
                        },
                        "hydra:last": {
                          "type": "string",
                          "format": "iri-reference"
                        },
                        "hydra:previous": {
                          "type": "string",
                          "format": "iri-reference"
                        },
                        "hydra:next": {
                          "type": "string",
                          "format": "iri-reference"
                        }
                      }
                    },
                    "hydra:search": {
                      "type": "object",
                      "properties": {
                        "@type": {
                          "type": "string"
                        },
                        "hydra:template": {
                          "type": "string"
                        },
                        "hydra:variableRepresentation": {
                          "type": "string"
                        },
                        "hydra:mapping": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "@type": {
                                "type": "string"
                              },
                              "variable": {
                                "type": "string"
                              },
                              "property": {
                                "type": "string",
                                "nullable": true
                              },
                              "required": {
                                "type": "boolean"
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "required": [
                    "hydra:member"
                  ]
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SecurityGroup-Read"
                  }
                }
              }
            }
          }
        },
        "summary": "List security groups.",
        "description": "Security groups represents a group of firewall rules, that can be applied to a server",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "The collection page number",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "integer",
              "default": 1
            },
            "style": "form",
            "explode": false,
            "allowReserved": false
          },
          {
            "name": "pagination",
            "in": "query",
            "description": "Enable or disable pagination",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "boolean"
            },
            "style": "form",
            "explode": false,
            "allowReserved": false
          },
          {
            "name": "id",
            "in": "query",
            "description": "",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string"
            },
            "style": "form",
            "explode": false,
            "allowReserved": false
          },
          {
            "name": "id[]",
            "in": "query",
            "description": "",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true,
            "allowReserved": false
          },
          {
            "name": "name",
            "in": "query",
            "description": "",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string"
            },
            "style": "form",
            "explode": false,
            "allowReserved": false
          },
          {
            "name": "name[]",
            "in": "query",
            "description": "",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true,
            "allowReserved": false
          },
          {
            "name": "description",
            "in": "query",
            "description": "",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string"
            },
            "style": "form",
            "explode": false,
            "allowReserved": false
          },
          {
            "name": "order[id]",
            "in": "query",
            "description": "",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            },
            "style": "form",
            "explode": false,
            "allowReserved": false
          },
          {
            "name": "order[name]",
            "in": "query",
            "description": "",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            },
            "style": "form",
            "explode": false,
            "allowReserved": false
          },
          {
            "name": "order[description]",
            "in": "query",
            "description": "",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            },
            "style": "form",
            "explode": false,
            "allowReserved": false
          }
        ],
        "deprecated": false,
        "security": [
          {
            "apiKey": [
              "ROLE_USER"
            ]
          }
        ]
      },
      "parameters": []
    },
    "/rockefeller/security_groups/{id}": {
      "get": {
        "operationId": "getSecurityGroupItem",
        "tags": [
          "SecurityGroup"
        ],
        "responses": {
          "200": {
            "description": "SecurityGroup resource",
            "content": {
              "application/ld+json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityGroup.jsonld-Read"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityGroup-Read"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found"
          }
        },
        "summary": "Get a specific security group.",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Resource identifier",
            "required": true,
            "deprecated": false,
            "allowEmptyValue": false,
            "schema": {
              "type": "string"
            },
            "style": "simple",
            "explode": false,
            "allowReserved": false
          }
        ],
        "deprecated": false,
        "security": [
          {
            "apiKey": [
              "ROLE_USER"
            ]
          }
        ]
      },
      "parameters": []
    },
    "/rockefeller/security_rules": {
      "get": {
        "operationId": "getSecurityRuleCollection",
        "tags": [
          "SecurityRule"
        ],
        "responses": {
          "200": {
            "description": "SecurityRule collection",
            "content": {
              "application/ld+json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "hydra:member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/SecurityRule.jsonld-Read"
                      }
                    },
                    "hydra:totalItems": {
                      "type": "integer",
                      "minimum": 0
                    },
                    "hydra:view": {
                      "type": "object",
                      "properties": {
                        "@id": {
                          "type": "string",
                          "format": "iri-reference"
                        },
                        "@type": {
                          "type": "string"
                        },
                        "hydra:first": {
                          "type": "string",
                          "format": "iri-reference"
                        },
                        "hydra:last": {
                          "type": "string",
                          "format": "iri-reference"
                        },
                        "hydra:previous": {
                          "type": "string",
                          "format": "iri-reference"
                        },
                        "hydra:next": {
                          "type": "string",
                          "format": "iri-reference"
                        }
                      }
                    },
                    "hydra:search": {
                      "type": "object",
                      "properties": {
                        "@type": {
                          "type": "string"
                        },
                        "hydra:template": {
                          "type": "string"
                        },
                        "hydra:variableRepresentation": {
                          "type": "string"
                        },
                        "hydra:mapping": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "@type": {
                                "type": "string"
                              },
                              "variable": {
                                "type": "string"
                              },
                              "property": {
                                "type": "string",
                                "nullable": true
                              },
                              "required": {
                                "type": "boolean"
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "required": [
                    "hydra:member"
                  ]
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SecurityRule-Read"
                  }
                }
              }
            }
          }
        },
        "summary": "List security rules.",
        "description": "We recommand you use SecurityGroup entity instead, that will return security rules aggregated.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "The collection page number",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "integer",
              "default": 1
            },
            "style": "form",
            "explode": false,
            "allowReserved": false
          },
          {
            "name": "pagination",
            "in": "query",
            "description": "Enable or disable pagination",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "boolean"
            },
            "style": "form",
            "explode": false,
            "allowReserved": false
          },
          {
            "name": "id",
            "in": "query",
            "description": "",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string"
            },
            "style": "form",
            "explode": false,
            "allowReserved": false
          },
          {
            "name": "id[]",
            "in": "query",
            "description": "",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true,
            "allowReserved": false
          },
          {
            "name": "direction",
            "in": "query",
            "description": "",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string"
            },
            "style": "form",
            "explode": false,
            "allowReserved": false
          },
          {
            "name": "direction[]",
            "in": "query",
            "description": "",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true,
            "allowReserved": false
          },
          {
            "name": "protocol",
            "in": "query",
            "description": "",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string"
            },
            "style": "form",
            "explode": false,
            "allowReserved": false
          },
          {
            "name": "protocol[]",
            "in": "query",
            "description": "",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true,
            "allowReserved": false
          },
          {
            "name": "ethertype",
            "in": "query",
            "description": "",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string"
            },
            "style": "form",
            "explode": false,
            "allowReserved": false
          },
          {
            "name": "ethertype[]",
            "in": "query",
            "description": "",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true,
            "allowReserved": false
          }
        ],
        "deprecated": false,
        "security": [
          {
            "apiKey": [
              "ROLE_USER"
            ]
          }
        ]
      },
      "parameters": []
    },
    "/rockefeller/security_rules/{id}": {
      "get": {
        "operationId": "getSecurityRuleItem",
        "tags": [
          "SecurityRule"
        ],
        "responses": {
          "200": {
            "description": "SecurityRule resource",
            "content": {
              "application/ld+json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityRule.jsonld-Read"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityRule-Read"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found"
          }
        },
        "summary": "Get a specific security rule.",
        "description": "We recommand you use SecurityGroup entity instead, that will return security rules aggregated.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Resource identifier",
            "required": true,
            "deprecated": false,
            "allowEmptyValue": false,
            "schema": {
              "type": "string"
            },
            "style": "simple",
            "explode": false,
            "allowReserved": false
          }
        ],
        "deprecated": false,
        "security": [
          {
            "apiKey": [
              "ROLE_USER"
            ]
          }
        ]
      },
      "parameters": []
    },
    "/rockefeller/servers": {
      "get": {
        "operationId": "getServerCollection",
        "tags": [
          "Server"
        ],
        "responses": {
          "200": {
            "description": "Server collection",
            "content": {
              "application/ld+json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "hydra:member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Server.ServerOutput.jsonld-Read"
                      }
                    },
                    "hydra:totalItems": {
                      "type": "integer",
                      "minimum": 0
                    },
                    "hydra:view": {
                      "type": "object",
                      "properties": {
                        "@id": {
                          "type": "string",
                          "format": "iri-reference"
                        },
                        "@type": {
                          "type": "string"
                        },
                        "hydra:first": {
                          "type": "string",
                          "format": "iri-reference"
                        },
                        "hydra:last": {
                          "type": "string",
                          "format": "iri-reference"
                        },
                        "hydra:previous": {
                          "type": "string",
                          "format": "iri-reference"
                        },
                        "hydra:next": {
                          "type": "string",
                          "format": "iri-reference"
                        }
                      }
                    },
                    "hydra:search": {
                      "type": "object",
                      "properties": {
                        "@type": {
                          "type": "string"
                        },
                        "hydra:template": {
                          "type": "string"
                        },
                        "hydra:variableRepresentation": {
                          "type": "string"
                        },
                        "hydra:mapping": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "@type": {
                                "type": "string"
                              },
                              "variable": {
                                "type": "string"
                              },
                              "property": {
                                "type": "string",
                                "nullable": true
                              },
                              "required": {
                                "type": "boolean"
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "required": [
                    "hydra:member"
                  ]
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Server.ServerOutput-Read"
                  }
                }
              }
            }
          }
        },
        "summary": "List servers.",
        "description": "This is the list of your servers, or instances, or VM (whatever you called them).",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "The collection page number",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "integer",
              "default": 1
            },
            "style": "form",
            "explode": false,
            "allowReserved": false
          },
          {
            "name": "pagination",
            "in": "query",
            "description": "Enable or disable pagination",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "boolean"
            },
            "style": "form",
            "explode": false,
            "allowReserved": false
          },
          {
            "name": "id",
            "in": "query",
            "description": "",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string"
            },
            "style": "form",
            "explode": false,
            "allowReserved": false
          },
          {
            "name": "id[]",
            "in": "query",
            "description": "",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true,
            "allowReserved": false
          },
          {
            "name": "project",
            "in": "query",
            "description": "",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string"
            },
            "style": "form",
            "explode": false,
            "allowReserved": false
          },
          {
            "name": "project[]",
            "in": "query",
            "description": "",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true,
            "allowReserved": false
          },
          {
            "name": "state",
            "in": "query",
            "description": "",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string"
            },
            "style": "form",
            "explode": false,
            "allowReserved": false
          },
          {
            "name": "state[]",
            "in": "query",
            "description": "",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true,
            "allowReserved": false
          },
          {
            "name": "status",
            "in": "query",
            "description": "",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string"
            },
            "style": "form",
            "explode": false,
            "allowReserved": false
          },
          {
            "name": "status[]",
            "in": "query",
            "description": "",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true,
            "allowReserved": false
          },
          {
            "name": "name",
            "in": "query",
            "description": "",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string"
            },
            "style": "form",
            "explode": false,
            "allowReserved": false
          },
          {
            "name": "description",
            "in": "query",
            "description": "",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string"
            },
            "style": "form",
            "explode": false,
            "allowReserved": false
          },
          {
            "name": "order[id]",
            "in": "query",
            "description": "",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            },
            "style": "form",
            "explode": false,
            "allowReserved": false
          },
          {
            "name": "order[name]",
            "in": "query",
            "description": "",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            },
            "style": "form",
            "explode": false,
            "allowReserved": false
          },
          {
            "name": "order[description]",
            "in": "query",
            "description": "",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            },
            "style": "form",
            "explode": false,
            "allowReserved": false
          },
          {
            "name": "order[createdAt]",
            "in": "query",
            "description": "",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            },
            "style": "form",
            "explode": false,
            "allowReserved": false
          },
          {
            "name": "createdAt[before]",
            "in": "query",
            "description": "",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string"
            },
            "style": "form",
            "explode": false,
            "allowReserved": false
          },
          {
            "name": "createdAt[strictly_before]",
            "in": "query",
            "description": "",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string"
            },
            "style": "form",
            "explode": false,
            "allowReserved": false
          },
          {
            "name": "createdAt[after]",
            "in": "query",
            "description": "",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string"
            },
            "style": "form",
            "explode": false,
            "allowReserved": false
          },
          {
            "name": "createdAt[strictly_after]",
            "in": "query",
            "description": "",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string"
            },
            "style": "form",
            "explode": false,
            "allowReserved": false
          },
          {
            "name": "exists[deletedAt]",
            "in": "query",
            "description": "",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "boolean"
            },
            "style": "form",
            "explode": false,
            "allowReserved": false
          }
        ],
        "deprecated": false,
        "security": [
          {
            "apiKey": [
              "ROLE_USER"
            ]
          }
        ]
      },
      "post": {
        "operationId": "postServerCollection",
        "tags": [
          "Server"
        ],
        "responses": {
          "201": {
            "description": "Server resource created",
            "content": {
              "application/ld+json": {
                "schema": {
                  "$ref": "#/components/schemas/Server.ServerOutput.jsonld-Read"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Server.ServerOutput-Read"
                }
              }
            },
            "links": {
              "GetServerItem": {
                "operationId": "getServerItem",
                "parameters": {
                  "id": "$response.body#/id"
                },
                "description": "The `id` value returned in the response can be used as the `id` parameter in `GET /rockefeller/servers/{id}`."
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Creates a server.",
        "description": "",
        "parameters": [],
        "requestBody": {
          "description": "The new Server resource",
          "content": {
            "application/ld+json": {
              "schema": {
                "$ref": "#/components/schemas/Server.jsonld-Write"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Server-Write"
              }
            }
          },
          "required": true
        },
        "deprecated": false,
        "security": [
          {
            "apiKey": [
              "ROLE_USER"
            ]
          }
        ]
      },
      "parameters": []
    },
    "/rockefeller/servers/{id}": {
      "get": {
        "operationId": "getServerItem",
        "tags": [
          "Server"
        ],
        "responses": {
          "200": {
            "description": "Server resource",
            "content": {
              "application/ld+json": {
                "schema": {
                  "$ref": "#/components/schemas/Server.ServerOutput.jsonld-Read"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Server.ServerOutput-Read"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found"
          }
        },
        "summary": "Get a specific server.",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Resource identifier",
            "required": true,
            "deprecated": false,
            "allowEmptyValue": false,
            "schema": {
              "type": "string"
            },
            "style": "simple",
            "explode": false,
            "allowReserved": false
          }
        ],
        "deprecated": false,
        "security": [
          {
            "apiKey": [
              "ROLE_USER"
            ]
          }
        ]
      },
      "delete": {
        "operationId": "deleteServerItem",
        "tags": [
          "Server"
        ],
        "responses": {
          "204": {
            "description": "Server resource deleted"
          },
          "404": {
            "description": "Resource not found"
          }
        },
        "summary": "Delete a specific server.",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Resource identifier",
            "required": true,
            "deprecated": false,
            "allowEmptyValue": false,
            "schema": {
              "type": "string"
            },
            "style": "simple",
            "explode": false,
            "allowReserved": false
          }
        ],
        "deprecated": false,
        "security": [
          {
            "apiKey": [
              "ROLE_USER"
            ]
          }
        ]
      },
      "patch": {
        "operationId": "patchServerItem",
        "tags": [
          "Server"
        ],
        "responses": {
          "200": {
            "description": "Server resource updated",
            "content": {
              "application/ld+json": {
                "schema": {
                  "$ref": "#/components/schemas/Server.ServerOutput.jsonld-Read"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Server.ServerOutput-Read"
                }
              }
            },
            "links": {
              "GetServerItem": {
                "operationId": "getServerItem",
                "parameters": {
                  "id": "$response.body#/id"
                },
                "description": "The `id` value returned in the response can be used as the `id` parameter in `GET /rockefeller/servers/{id}`."
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "404": {
            "description": "Resource not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Edit a specific server.",
        "description": "So far, only fields description and status can be edited.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Resource identifier",
            "required": true,
            "deprecated": false,
            "allowEmptyValue": false,
            "schema": {
              "type": "string"
            },
            "style": "simple",
            "explode": false,
            "allowReserved": false
          }
        ],
        "requestBody": {
          "description": "The updated Server resource",
          "content": {
            "application/merge-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Server-server.edit"
              }
            }
          },
          "required": true
        },
        "deprecated": false,
        "security": [
          {
            "apiKey": [
              "ROLE_USER"
            ]
          }
        ]
      },
      "parameters": []
    },
    "/rockefeller/servers/{id}/security_groups/{secGroup}": {
      "post": {
        "operationId": "server_post_securitygroup",
        "tags": [
          "Server"
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "404": {
            "description": "Server or Security Group does not exist"
          }
        },
        "summary": "Assign a securityGroup to a server.",
        "description": "Adds a security group (firewall rules) to a specific server. These rules will be applied to all PUBLIC interfaces.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Server ID (see entity Server)",
            "required": true,
            "deprecated": false,
            "allowEmptyValue": false,
            "schema": {
              "type": "string"
            },
            "style": "simple",
            "explode": false,
            "allowReserved": false,
            "example": "984d98a0-51a8-4068-8a64-316c1e6d9f3c"
          },
          {
            "name": "secGroup",
            "in": "path",
            "description": "SecurityGroup ID (see entity SecurityGroup)",
            "required": true,
            "deprecated": false,
            "allowEmptyValue": false,
            "schema": {
              "type": "string"
            },
            "style": "simple",
            "explode": false,
            "allowReserved": false,
            "example": "e6cd4920-0efc-40bc-b45b-9c8aa4bebe5b"
          }
        ],
        "deprecated": false,
        "security": [
          {
            "apiKey": [
              "ROLE_USER"
            ]
          }
        ]
      },
      "delete": {
        "operationId": "server_delete_securitygroup",
        "tags": [
          "Server"
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "404": {
            "description": "Server or Security Group does not exist"
          }
        },
        "summary": "Unassign a securityGroup from a server.",
        "description": "Removes a security group from a specific server.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Server ID (see entity Server)",
            "required": true,
            "deprecated": false,
            "allowEmptyValue": false,
            "schema": {
              "type": "string"
            },
            "style": "simple",
            "explode": false,
            "allowReserved": false,
            "example": "984d98a0-51a8-4068-8a64-316c1e6d9f3c"
          },
          {
            "name": "secGroup",
            "in": "path",
            "description": "SecurityGroup ID (see entity SecurityGroup)",
            "required": true,
            "deprecated": false,
            "allowEmptyValue": false,
            "schema": {
              "type": "string"
            },
            "style": "simple",
            "explode": false,
            "allowReserved": false,
            "example": "e6cd4920-0efc-40bc-b45b-9c8aa4bebe5b"
          }
        ],
        "deprecated": false,
        "security": [
          {
            "apiKey": [
              "ROLE_USER"
            ]
          }
        ]
      },
      "parameters": []
    },
    "/rockefeller/usages": {
      "get": {
        "operationId": "getProjectUsageCollection",
        "tags": [
          "ProjectUsage"
        ],
        "responses": {
          "200": {
            "description": "ProjectUsage collection",
            "content": {
              "application/ld+json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "hydra:member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ProjectUsage.jsonld-Read"
                      }
                    },
                    "hydra:totalItems": {
                      "type": "integer",
                      "minimum": 0
                    },
                    "hydra:view": {
                      "type": "object",
                      "properties": {
                        "@id": {
                          "type": "string",
                          "format": "iri-reference"
                        },
                        "@type": {
                          "type": "string"
                        },
                        "hydra:first": {
                          "type": "string",
                          "format": "iri-reference"
                        },
                        "hydra:last": {
                          "type": "string",
                          "format": "iri-reference"
                        },
                        "hydra:previous": {
                          "type": "string",
                          "format": "iri-reference"
                        },
                        "hydra:next": {
                          "type": "string",
                          "format": "iri-reference"
                        }
                      }
                    },
                    "hydra:search": {
                      "type": "object",
                      "properties": {
                        "@type": {
                          "type": "string"
                        },
                        "hydra:template": {
                          "type": "string"
                        },
                        "hydra:variableRepresentation": {
                          "type": "string"
                        },
                        "hydra:mapping": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "@type": {
                                "type": "string"
                              },
                              "variable": {
                                "type": "string"
                              },
                              "property": {
                                "type": "string",
                                "nullable": true
                              },
                              "required": {
                                "type": "boolean"
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "required": [
                    "hydra:member"
                  ]
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProjectUsage-Read"
                  }
                }
              }
            }
          }
        },
        "summary": "List project usages.",
        "description": "",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "The collection page number",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "integer",
              "default": 1
            },
            "style": "form",
            "explode": false,
            "allowReserved": false
          },
          {
            "name": "pagination",
            "in": "query",
            "description": "Enable or disable pagination",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "boolean"
            },
            "style": "form",
            "explode": false,
            "allowReserved": false
          }
        ],
        "deprecated": false,
        "security": [
          {
            "apiKey": [
              "ROLE_USER"
            ]
          }
        ]
      },
      "parameters": []
    },
    "/scrooge/contracts": {
      "get": {
        "operationId": "getContractCollection",
        "tags": [
          "Contract"
        ],
        "responses": {
          "200": {
            "description": "Contract collection",
            "content": {
              "application/ld+json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "hydra:member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Contract.jsonld-Read"
                      }
                    },
                    "hydra:totalItems": {
                      "type": "integer",
                      "minimum": 0
                    },
                    "hydra:view": {
                      "type": "object",
                      "properties": {
                        "@id": {
                          "type": "string",
                          "format": "iri-reference"
                        },
                        "@type": {
                          "type": "string"
                        },
                        "hydra:first": {
                          "type": "string",
                          "format": "iri-reference"
                        },
                        "hydra:last": {
                          "type": "string",
                          "format": "iri-reference"
                        },
                        "hydra:previous": {
                          "type": "string",
                          "format": "iri-reference"
                        },
                        "hydra:next": {
                          "type": "string",
                          "format": "iri-reference"
                        }
                      }
                    },
                    "hydra:search": {
                      "type": "object",
                      "properties": {
                        "@type": {
                          "type": "string"
                        },
                        "hydra:template": {
                          "type": "string"
                        },
                        "hydra:variableRepresentation": {
                          "type": "string"
                        },
                        "hydra:mapping": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "@type": {
                                "type": "string"
                              },
                              "variable": {
                                "type": "string"
                              },
                              "property": {
                                "type": "string",
                                "nullable": true
                              },
                              "required": {
                                "type": "boolean"
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "required": [
                    "hydra:member"
                  ]
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Contract-Read"
                  }
                }
              },
              "text/html": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Contract-Read"
                  }
                }
              }
            }
          }
        },
        "summary": "List contracts.",
        "description": "Retrieve all contracts, signed or not, visible to your organization.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "The collection page number",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "integer",
              "default": 1
            },
            "style": "form",
            "explode": false,
            "allowReserved": false
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "The number of items per page",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "integer",
              "default": 10,
              "minimum": 0
            },
            "style": "form",
            "explode": false,
            "allowReserved": false
          },
          {
            "name": "pagination",
            "in": "query",
            "description": "Enable or disable pagination",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "boolean"
            },
            "style": "form",
            "explode": false,
            "allowReserved": false
          },
          {
            "name": "order[id]",
            "in": "query",
            "description": "",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            },
            "style": "form",
            "explode": false,
            "allowReserved": false
          },
          {
            "name": "order[createdAt]",
            "in": "query",
            "description": "",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            },
            "style": "form",
            "explode": false,
            "allowReserved": false
          },
          {
            "name": "order[activeAt]",
            "in": "query",
            "description": "",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            },
            "style": "form",
            "explode": false,
            "allowReserved": false
          }
        ],
        "deprecated": false,
        "security": [
          {
            "apiKey": [
              "ROLE_USER"
            ]
          }
        ]
      },
      "parameters": []
    },
    "/scrooge/contracts/{id}": {
      "get": {
        "operationId": "getContractItem",
        "tags": [
          "Contract"
        ],
        "responses": {
          "200": {
            "description": "Contract resource",
            "content": {
              "application/ld+json": {
                "schema": {
                  "$ref": "#/components/schemas/Contract.jsonld-Read"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Contract-Read"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/Contract-Read"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found"
          }
        },
        "summary": "Get a contract.",
        "description": "Retrieve a specific contract.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Resource identifier",
            "required": true,
            "deprecated": false,
            "allowEmptyValue": false,
            "schema": {
              "type": "string"
            },
            "style": "simple",
            "explode": false,
            "allowReserved": false
          }
        ],
        "deprecated": false,
        "security": [
          {
            "apiKey": [
              "ROLE_USER"
            ]
          }
        ]
      },
      "parameters": []
    },
    "/scrooge/coupons/{name}": {
      "get": {
        "operationId": "getCouponItem",
        "tags": [
          "Coupon"
        ],
        "responses": {
          "200": {
            "description": "Coupon resource",
            "content": {
              "application/ld+json": {
                "schema": {
                  "$ref": "#/components/schemas/Coupon.jsonld-Read"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Coupon-Read"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/Coupon-Read"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found"
          }
        },
        "summary": "Get a specific coupon.",
        "description": "Allows to check if a specific coupon exists and has not been used before. This call is rate-limited",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "Resource identifier",
            "required": true,
            "deprecated": false,
            "allowEmptyValue": false,
            "schema": {
              "type": "string"
            },
            "style": "simple",
            "explode": false,
            "allowReserved": false
          }
        ],
        "deprecated": false,
        "security": []
      },
      "parameters": []
    },
    "/scrooge/customers": {
      "get": {
        "operationId": "getCustomerCollection",
        "tags": [
          "Customer"
        ],
        "responses": {
          "200": {
            "description": "Customer collection",
            "content": {
              "application/ld+json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "hydra:member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Customer.jsonld-Read"
                      }
                    },
                    "hydra:totalItems": {
                      "type": "integer",
                      "minimum": 0
                    },
                    "hydra:view": {
                      "type": "object",
                      "properties": {
                        "@id": {
                          "type": "string",
                          "format": "iri-reference"
                        },
                        "@type": {
                          "type": "string"
                        },
                        "hydra:first": {
                          "type": "string",
                          "format": "iri-reference"
                        },
                        "hydra:last": {
                          "type": "string",
                          "format": "iri-reference"
                        },
                        "hydra:previous": {
                          "type": "string",
                          "format": "iri-reference"
                        },
                        "hydra:next": {
                          "type": "string",
                          "format": "iri-reference"
                        }
                      }
                    },
                    "hydra:search": {
                      "type": "object",
                      "properties": {
                        "@type": {
                          "type": "string"
                        },
                        "hydra:template": {
                          "type": "string"
                        },
                        "hydra:variableRepresentation": {
                          "type": "string"
                        },
                        "hydra:mapping": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "@type": {
                                "type": "string"
                              },
                              "variable": {
                                "type": "string"
                              },
                              "property": {
                                "type": "string",
                                "nullable": true
                              },
                              "required": {
                                "type": "boolean"
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "required": [
                    "hydra:member"
                  ]
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Customer-Read"
                  }
                }
              },
              "text/html": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Customer-Read"
                  }
                }
              }
            }
          }
        },
        "summary": "List customers.",
        "description": "As there is only one customer per org, you should get only one record.",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "The collection page number",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "integer",
              "default": 1
            },
            "style": "form",
            "explode": false,
            "allowReserved": false
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "The number of items per page",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "integer",
              "default": 10,
              "minimum": 0
            },
            "style": "form",
            "explode": false,
            "allowReserved": false
          },
          {
            "name": "pagination",
            "in": "query",
            "description": "Enable or disable pagination",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "boolean"
            },
            "style": "form",
            "explode": false,
            "allowReserved": false
          }
        ],
        "deprecated": false,
        "security": [
          {
            "apiKey": [
              "ROLE_USER"
            ]
          }
        ]
      },
      "parameters": []
    },
    "/scrooge/customers/{id}": {
      "get": {
        "operationId": "getCustomerItem",
        "tags": [
          "Customer"
        ],
        "responses": {
          "200": {
            "description": "Customer resource",
            "content": {
              "application/ld+json": {
                "schema": {
                  "$ref": "#/components/schemas/Customer.jsonld-Read"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Customer-Read"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/Customer-Read"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found"
          }
        },
        "summary": "Get a specific customer.",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Resource identifier",
            "required": true,
            "deprecated": false,
            "allowEmptyValue": false,
            "schema": {
              "type": "string"
            },
            "style": "simple",
            "explode": false,
            "allowReserved": false
          }
        ],
        "deprecated": false,
        "security": [
          {
            "apiKey": [
              "ROLE_USER"
            ]
          }
        ]
      },
      "patch": {
        "operationId": "patchCustomerItem",
        "tags": [
          "Customer"
        ],
        "responses": {
          "200": {
            "description": "Customer resource updated",
            "content": {
              "application/ld+json": {
                "schema": {
                  "$ref": "#/components/schemas/Customer.jsonld-Read"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Customer-Read"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/Customer-Read"
                }
              }
            },
            "links": {
              "GetCustomerItem": {
                "operationId": "getCustomerItem",
                "parameters": {
                  "id": "$response.body#/id"
                },
                "description": "The `id` value returned in the response can be used as the `id` parameter in `GET /scrooge/customers/{id}`."
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "404": {
            "description": "Resource not found"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Edit a customer.",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Resource identifier",
            "required": true,
            "deprecated": false,
            "allowEmptyValue": false,
            "schema": {
              "type": "string"
            },
            "style": "simple",
            "explode": false,
            "allowReserved": false
          }
        ],
        "requestBody": {
          "description": "The updated Customer resource",
          "content": {
            "application/merge-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/Customer-customer.edit"
              }
            }
          },
          "required": true
        },
        "deprecated": false,
        "security": [
          {
            "apiKey": [
              "ROLE_ADMIN"
            ]
          }
        ]
      },
      "parameters": []
    },
    "/scrooge/customers/{id}/contract/{contract}": {
      "post": {
        "operationId": "contractSigned",
        "tags": [
          "Contract"
        ],
        "responses": {
          "204": {
            "description": "Success"
          }
        },
        "summary": "Sign a contract.",
        "description": "Allows an admin user to sign a new contract.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Customer ID (see entity Customer)",
            "required": true,
            "deprecated": false,
            "allowEmptyValue": false,
            "schema": {
              "type": "string"
            },
            "style": "simple",
            "explode": false,
            "allowReserved": false,
            "example": "984d98a0-51a8-4068-8a64-316c1e6d9f3c"
          },
          {
            "name": "contract",
            "in": "path",
            "description": "Contract ID (see entity Contract)",
            "required": true,
            "deprecated": false,
            "allowEmptyValue": false,
            "schema": {
              "type": "string"
            },
            "style": "simple",
            "explode": false,
            "allowReserved": false,
            "example": "e6cd4920-0efc-40bc-b45b-9c8aa4bebe5b"
          }
        ],
        "deprecated": false,
        "security": [
          {
            "apiKey": [
              "ROLE_ADMIN"
            ]
          }
        ]
      },
      "parameters": []
    },
    "/scrooge/invoices": {
      "get": {
        "operationId": "getInvoiceCollection",
        "tags": [
          "Invoice"
        ],
        "responses": {
          "200": {
            "description": "Invoice collection",
            "content": {
              "application/ld+json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "hydra:member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Invoice.jsonld-Read"
                      }
                    },
                    "hydra:totalItems": {
                      "type": "integer",
                      "minimum": 0
                    },
                    "hydra:view": {
                      "type": "object",
                      "properties": {
                        "@id": {
                          "type": "string",
                          "format": "iri-reference"
                        },
                        "@type": {
                          "type": "string"
                        },
                        "hydra:first": {
                          "type": "string",
                          "format": "iri-reference"
                        },
                        "hydra:last": {
                          "type": "string",
                          "format": "iri-reference"
                        },
                        "hydra:previous": {
                          "type": "string",
                          "format": "iri-reference"
                        },
                        "hydra:next": {
                          "type": "string",
                          "format": "iri-reference"
                        }
                      }
                    },
                    "hydra:search": {
                      "type": "object",
                      "properties": {
                        "@type": {
                          "type": "string"
                        },
                        "hydra:template": {
                          "type": "string"
                        },
                        "hydra:variableRepresentation": {
                          "type": "string"
                        },
                        "hydra:mapping": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "@type": {
                                "type": "string"
                              },
                              "variable": {
                                "type": "string"
                              },
                              "property": {
                                "type": "string",
                                "nullable": true
                              },
                              "required": {
                                "type": "boolean"
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "required": [
                    "hydra:member"
                  ]
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Invoice-Read"
                  }
                }
              },
              "text/html": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Invoice-Read"
                  }
                }
              }
            }
          }
        },
        "summary": "List invoices.",
        "description": "",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "The collection page number",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "integer",
              "default": 1
            },
            "style": "form",
            "explode": false,
            "allowReserved": false
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "The number of items per page",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "integer",
              "default": 10,
              "minimum": 0
            },
            "style": "form",
            "explode": false,
            "allowReserved": false
          },
          {
            "name": "pagination",
            "in": "query",
            "description": "Enable or disable pagination",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "boolean"
            },
            "style": "form",
            "explode": false,
            "allowReserved": false
          }
        ],
        "deprecated": false,
        "security": [
          {
            "apiKey": [
              "ROLE_USER"
            ]
          }
        ]
      },
      "parameters": []
    },
    "/scrooge/invoices/{id}": {
      "get": {
        "operationId": "getInvoiceItem",
        "tags": [
          "Invoice"
        ],
        "responses": {
          "200": {
            "description": "Invoice resource",
            "content": {
              "application/ld+json": {
                "schema": {
                  "$ref": "#/components/schemas/Invoice.jsonld-Read"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Invoice-Read"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/Invoice-Read"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found"
          }
        },
        "summary": "Get a specific invoice.",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Resource identifier",
            "required": true,
            "deprecated": false,
            "allowEmptyValue": false,
            "schema": {
              "type": "string"
            },
            "style": "simple",
            "explode": false,
            "allowReserved": false
          }
        ],
        "deprecated": false,
        "security": [
          {
            "apiKey": [
              "ROLE_USER"
            ]
          }
        ]
      },
      "parameters": []
    },
    "/scrooge/invoices/{id}/capture": {
      "post": {
        "operationId": "post_captureInvoiceItem",
        "tags": [
          "Invoice"
        ],
        "responses": {
          "200": {
            "description": "Paid or already paid"
          },
          "201": {
            "description": "Not used"
          },
          "400": {
            "description": "Invalid input"
          },
          "402": {
            "description": "Invoice still not fully payed"
          },
          "404": {
            "description": "Resource not found"
          },
          "409": {
            "description": "Invoice is draft or uncollectible"
          },
          "422": {
            "description": "No invoice found"
          }
        },
        "summary": "Capture an invoice.",
        "description": "Try to capture the money of an invoice and update the linked billing period if available.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Resource identifier",
            "required": true,
            "deprecated": false,
            "allowEmptyValue": false,
            "schema": {
              "type": "string"
            },
            "style": "simple",
            "explode": false,
            "allowReserved": false
          }
        ],
        "requestBody": {
          "description": "",
          "content": {},
          "required": false
        },
        "deprecated": false,
        "security": [
          {
            "apiKey": [
              "ROLE_ADMIN"
            ]
          }
        ]
      },
      "parameters": []
    },
    "/scrooge/payment_methods": {
      "get": {
        "operationId": "getPaymentMethodCollection",
        "tags": [
          "PaymentMethod"
        ],
        "responses": {
          "200": {
            "description": "PaymentMethod collection",
            "content": {
              "application/ld+json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "hydra:member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/PaymentMethod.jsonld-paymentmethod.read"
                      }
                    },
                    "hydra:totalItems": {
                      "type": "integer",
                      "minimum": 0
                    },
                    "hydra:view": {
                      "type": "object",
                      "properties": {
                        "@id": {
                          "type": "string",
                          "format": "iri-reference"
                        },
                        "@type": {
                          "type": "string"
                        },
                        "hydra:first": {
                          "type": "string",
                          "format": "iri-reference"
                        },
                        "hydra:last": {
                          "type": "string",
                          "format": "iri-reference"
                        },
                        "hydra:previous": {
                          "type": "string",
                          "format": "iri-reference"
                        },
                        "hydra:next": {
                          "type": "string",
                          "format": "iri-reference"
                        }
                      }
                    },
                    "hydra:search": {
                      "type": "object",
                      "properties": {
                        "@type": {
                          "type": "string"
                        },
                        "hydra:template": {
                          "type": "string"
                        },
                        "hydra:variableRepresentation": {
                          "type": "string"
                        },
                        "hydra:mapping": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "@type": {
                                "type": "string"
                              },
                              "variable": {
                                "type": "string"
                              },
                              "property": {
                                "type": "string",
                                "nullable": true
                              },
                              "required": {
                                "type": "boolean"
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "required": [
                    "hydra:member"
                  ]
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PaymentMethod-paymentmethod.read"
                  }
                }
              },
              "text/html": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PaymentMethod-paymentmethod.read"
                  }
                }
              }
            }
          }
        },
        "summary": "List payment methods.",
        "description": "",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "The collection page number",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "integer",
              "default": 1
            },
            "style": "form",
            "explode": false,
            "allowReserved": false
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "The number of items per page",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "integer",
              "default": 10,
              "minimum": 0
            },
            "style": "form",
            "explode": false,
            "allowReserved": false
          },
          {
            "name": "pagination",
            "in": "query",
            "description": "Enable or disable pagination",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "boolean"
            },
            "style": "form",
            "explode": false,
            "allowReserved": false
          }
        ],
        "deprecated": false,
        "security": [
          {
            "apiKey": [
              "ROLE_USER"
            ]
          }
        ]
      },
      "post": {
        "operationId": "postPaymentMethodCollection",
        "tags": [
          "PaymentMethod"
        ],
        "responses": {
          "201": {
            "description": "PaymentMethod resource created",
            "content": {
              "application/ld+json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentMethod.jsonld-Read"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentMethod-Read"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentMethod-Read"
                }
              }
            },
            "links": {
              "GetPaymentMethodItem": {
                "operationId": "getPaymentMethodItem",
                "parameters": {
                  "id": "$response.body#/id"
                },
                "description": "The `id` value returned in the response can be used as the `id` parameter in `GET /scrooge/payment_methods/{id}`."
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "422": {
            "description": "Unprocessable entity"
          }
        },
        "summary": "Add a payment method.",
        "description": "",
        "parameters": [],
        "requestBody": {
          "description": "The new PaymentMethod resource",
          "content": {
            "application/ld+json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentMethod.jsonld-Write"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PaymentMethod-Write"
              }
            },
            "text/html": {
              "schema": {
                "$ref": "#/components/schemas/PaymentMethod-Write"
              }
            }
          },
          "required": true
        },
        "deprecated": false,
        "security": [
          {
            "apiKey": [
              "ROLE_ADMIN"
            ]
          }
        ]
      },
      "parameters": []
    },
    "/scrooge/payment_methods/{id}": {
      "get": {
        "operationId": "getPaymentMethodItem",
        "tags": [
          "PaymentMethod"
        ],
        "responses": {
          "200": {
            "description": "PaymentMethod resource",
            "content": {
              "application/ld+json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentMethod.jsonld-Read"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentMethod-Read"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentMethod-Read"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found"
          }
        },
        "summary": "Get a specific payment method.",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Resource identifier",
            "required": true,
            "deprecated": false,
            "allowEmptyValue": false,
            "schema": {
              "type": "string"
            },
            "style": "simple",
            "explode": false,
            "allowReserved": false
          }
        ],
        "deprecated": false,
        "security": [
          {
            "apiKey": [
              "ROLE_USER"
            ]
          }
        ]
      },
      "delete": {
        "operationId": "deletePaymentMethodItem",
        "tags": [
          "PaymentMethod"
        ],
        "responses": {
          "204": {
            "description": "PaymentMethod resource deleted"
          },
          "404": {
            "description": "Resource not found"
          }
        },
        "summary": "Delete a specific payment method.",
        "description": "You cannot delete the default PM (or the last one)",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Resource identifier",
            "required": true,
            "deprecated": false,
            "allowEmptyValue": false,
            "schema": {
              "type": "string"
            },
            "style": "simple",
            "explode": false,
            "allowReserved": false
          }
        ],
        "deprecated": false,
        "security": [
          {
            "apiKey": [
              "ROLE_ADMIN"
            ]
          }
        ]
      },
      "parameters": []
    },
    "/scrooge/sponsorshiplogs": {
      "get": {
        "operationId": "getSponsorshiplogCollection",
        "tags": [
          "Sponsorshiplog"
        ],
        "responses": {
          "200": {
            "description": "Sponsorshiplog collection",
            "content": {
              "application/ld+json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "hydra:member": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Sponsorshiplog.jsonld-Read"
                      }
                    },
                    "hydra:totalItems": {
                      "type": "integer",
                      "minimum": 0
                    },
                    "hydra:view": {
                      "type": "object",
                      "properties": {
                        "@id": {
                          "type": "string",
                          "format": "iri-reference"
                        },
                        "@type": {
                          "type": "string"
                        },
                        "hydra:first": {
                          "type": "string",
                          "format": "iri-reference"
                        },
                        "hydra:last": {
                          "type": "string",
                          "format": "iri-reference"
                        },
                        "hydra:previous": {
                          "type": "string",
                          "format": "iri-reference"
                        },
                        "hydra:next": {
                          "type": "string",
                          "format": "iri-reference"
                        }
                      }
                    },
                    "hydra:search": {
                      "type": "object",
                      "properties": {
                        "@type": {
                          "type": "string"
                        },
                        "hydra:template": {
                          "type": "string"
                        },
                        "hydra:variableRepresentation": {
                          "type": "string"
                        },
                        "hydra:mapping": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "@type": {
                                "type": "string"
                              },
                              "variable": {
                                "type": "string"
                              },
                              "property": {
                                "type": "string",
                                "nullable": true
                              },
                              "required": {
                                "type": "boolean"
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "required": [
                    "hydra:member"
                  ]
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Sponsorshiplog-Read"
                  }
                }
              },
              "text/html": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Sponsorshiplog-Read"
                  }
                }
              }
            }
          }
        },
        "summary": "List sponsorship logs.",
        "description": "Sponsorship logs is the history of sponsorships on your organization. It allows you to see if you sponsored user, and when will you get the money $$$",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "The collection page number",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "integer",
              "default": 1
            },
            "style": "form",
            "explode": false,
            "allowReserved": false
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "The number of items per page",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "integer",
              "default": 100,
              "minimum": 0
            },
            "style": "form",
            "explode": false,
            "allowReserved": false
          },
          {
            "name": "pagination",
            "in": "query",
            "description": "Enable or disable pagination",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "boolean"
            },
            "style": "form",
            "explode": false,
            "allowReserved": false
          },
          {
            "name": "order[id]",
            "in": "query",
            "description": "",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            },
            "style": "form",
            "explode": false,
            "allowReserved": false
          },
          {
            "name": "order[createdAt]",
            "in": "query",
            "description": "",
            "required": false,
            "deprecated": false,
            "allowEmptyValue": true,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            },
            "style": "form",
            "explode": false,
            "allowReserved": false
          }
        ],
        "deprecated": false,
        "security": [
          {
            "apiKey": [
              "ROLE_USER"
            ]
          }
        ]
      },
      "parameters": []
    },
    "/scrooge/sponsorshiplogs/{id}": {
      "get": {
        "operationId": "getSponsorshiplogItem",
        "tags": [
          "Sponsorshiplog"
        ],
        "responses": {
          "200": {
            "description": "Sponsorshiplog resource",
            "content": {
              "application/ld+json": {
                "schema": {
                  "$ref": "#/components/schemas/Sponsorshiplog.jsonld-Read"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Sponsorshiplog-Read"
                }
              },
              "text/html": {
                "schema": {
                  "$ref": "#/components/schemas/Sponsorshiplog-Read"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found"
          }
        },
        "summary": "Get a specific sponsorship logs.",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Resource identifier",
            "required": true,
            "deprecated": false,
            "allowEmptyValue": false,
            "schema": {
              "type": "string"
            },
            "style": "simple",
            "explode": false,
            "allowReserved": false
          }
        ],
        "deprecated": false,
        "security": [
          {
            "apiKey": [
              "ROLE_USER"
            ]
          }
        ]
      },
      "parameters": []
    }
  },
  "components": {
    "schemas": {
      "Invitation-Write": {
        "type": "object",
        "description": "",
        "properties": {
          "firstname": {
            "minLength": 1,
            "maxLength": 255,
            "example": "John",
            "type": "string",
            "nullable": true
          },
          "lastname": {
            "minLength": 1,
            "maxLength": 255,
            "example": "Doe",
            "type": "string",
            "nullable": true
          },
          "email": {
            "format": "email",
            "externalDocs": {
              "url": "http://schema.org/email"
            },
            "type": "string"
          },
          "password": {
            "minLength": 4,
            "maxLength": 128,
            "writeOnly": true,
            "description": "password should be provided through this field.",
            "type": "string",
            "nullable": true
          },
          "organizationDescription": {
            "minLength": 1,
            "maxLength": 128,
            "example": "My team name",
            "description": "This is your team name.",
            "type": "string",
            "nullable": true
          },
          "organizationBillingDescription": {
            "minLength": 1,
            "maxLength": 128,
            "example": "AcmeCORP LLC",
            "description": "This is the organization name as used on invoices.",
            "type": "string",
            "nullable": true
          },
          "organizationName": {
            "minLength": 4,
            "maxLength": 63,
            "pattern": "^([a-z0-9][a-z0-9-]{2,61}[a-z0-9])$",
            "example": "acmecorp",
            "description": "Slug used as nua.ge subdomain.",
            "type": "string",
            "nullable": true
          },
          "organizationAddress": {
            "minLength": 1,
            "maxLength": 255,
            "example": "Place Bellecour",
            "type": "string",
            "nullable": true
          },
          "organizationZipcode": {
            "minLength": 1,
            "maxLength": 32,
            "example": 69002,
            "type": "string",
            "nullable": true
          },
          "organizationCity": {
            "minLength": 1,
            "maxLength": 255,
            "example": "Lyon",
            "type": "string",
            "nullable": true
          },
          "organizationCountry": {
            "minLength": 1,
            "maxLength": 2,
            "example": "FR",
            "type": "string",
            "nullable": true
          },
          "organizationVAT": {
            "example": "FR0123456789",
            "description": "Organization VAT number.",
            "type": "string",
            "nullable": true
          },
          "contractSigned": {
            "description": "Whether our Terms and Conditions has been read and accepted.",
            "type": "boolean"
          },
          "organization": {
            "example": "/arya/organizations/b4b90ee5-4778-4670-aba4-457a999ee5d2",
            "description": "Organization ID, only set when this is an invitation (not an onboarding).",
            "type": "string",
            "format": "iri-reference",
            "nullable": true
          },
          "createdBy": {
            "example": "/arya/users/710baa0d-2afc-4f3e-a032-699bc879def2",
            "description": "If this invitation has been created on behalf of someone else, this is the user ID.",
            "type": "string",
            "format": "iri-reference",
            "nullable": true
          },
          "status": {
            "enum": [
              "new",
              "sent",
              "progress",
              "error",
              "ready",
              "completed",
              "building"
            ],
            "description": "Current status of this invitation.",
            "default": "new",
            "example": "new",
            "type": "string"
          },
          "newsletter": {
            "description": "Whether the user subscribes to the newsletter.",
            "type": "boolean"
          },
          "roles": {
            "description": "Store the final roles of the user.",
            "default": [
              "ROLE_USER"
            ],
            "example": [
              "ROLE_USER"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "coupon": {
            "minLength": 1,
            "maxLength": 32,
            "writeOnly": true,
            "example": "MYCOUPON",
            "description": "Coupon name.",
            "type": "string",
            "nullable": true
          },
          "sponsor": {
            "minLength": 1,
            "maxLength": 32,
            "writeOnly": true,
            "description": "Sponsorship code.",
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "email",
          "roles"
        ]
      },
      "Invitation.InvitationOutput-Read": {
        "type": "object",
        "description": "",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "firstname": {
            "minLength": 1,
            "maxLength": 255,
            "example": "John",
            "type": "string",
            "nullable": true
          },
          "lastname": {
            "minLength": 1,
            "maxLength": 255,
            "example": "Doe",
            "type": "string",
            "nullable": true
          },
          "email": {
            "format": "email",
            "externalDocs": {
              "url": "http://schema.org/email"
            },
            "type": "string"
          },
          "password": {
            "minLength": 4,
            "maxLength": 128,
            "writeOnly": true,
            "description": "password should be provided through this field.",
            "type": "string",
            "nullable": true
          },
          "organizationDescription": {
            "minLength": 1,
            "maxLength": 128,
            "example": "My team name",
            "description": "This is your team name.",
            "type": "string",
            "nullable": true
          },
          "organizationBillingDescription": {
            "minLength": 1,
            "maxLength": 128,
            "example": "AcmeCORP LLC",
            "description": "This is the organization name as used on invoices.",
            "type": "string",
            "nullable": true
          },
          "organizationName": {
            "minLength": 4,
            "maxLength": 63,
            "pattern": "^([a-z0-9][a-z0-9-]{2,61}[a-z0-9])$",
            "example": "acmecorp",
            "description": "Slug used as nua.ge subdomain.",
            "type": "string",
            "nullable": true
          },
          "organizationAddress": {
            "minLength": 1,
            "maxLength": 255,
            "example": "Place Bellecour",
            "type": "string",
            "nullable": true
          },
          "organizationZipcode": {
            "minLength": 1,
            "maxLength": 32,
            "example": 69002,
            "type": "string",
            "nullable": true
          },
          "organizationCity": {
            "minLength": 1,
            "maxLength": 255,
            "example": "Lyon",
            "type": "string",
            "nullable": true
          },
          "organizationCountry": {
            "minLength": 1,
            "maxLength": 2,
            "example": "FR",
            "type": "string",
            "nullable": true
          },
          "organizationVAT": {
            "example": "FR0123456789",
            "description": "Organization VAT number.",
            "type": "string",
            "nullable": true
          },
          "contract": {
            "description": "Contract ID the user must sign (initialized when the invitation is created).",
            "type": "string",
            "nullable": true
          },
          "contractSigned": {
            "description": "Whether our Terms and Conditions has been read and accepted.",
            "type": "boolean"
          },
          "organization": {
            "example": "/arya/organizations/b4b90ee5-4778-4670-aba4-457a999ee5d2",
            "description": "Organization ID, only set when this is an invitation (not an onboarding).",
            "type": "string",
            "format": "iri-reference",
            "nullable": true
          },
          "createdBy": {
            "example": "/arya/users/710baa0d-2afc-4f3e-a032-699bc879def2",
            "description": "If this invitation has been created on behalf of someone else, this is the user ID.",
            "type": "string",
            "format": "iri-reference",
            "nullable": true
          },
          "validUntil": {
            "description": "Date at which the invitation expired. Note that empty invitations are automatically deleted after 24 hours, disregarding this field.",
            "type": "string",
            "format": "date-time"
          },
          "validFrom": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "enum": [
              "new",
              "sent",
              "progress",
              "error",
              "ready",
              "completed",
              "building"
            ],
            "description": "Current status of this invitation.",
            "default": "new",
            "example": "new",
            "type": "string"
          },
          "lastUpdate": {
            "description": "Last modification date.",
            "type": "string",
            "format": "date-time"
          },
          "newsletter": {
            "description": "Whether the user subscribes to the newsletter.",
            "type": "boolean"
          },
          "extensions": {
            "description": "Additional items linked to an invitation.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InvitationExtensions-Read"
            }
          },
          "roles": {
            "description": "Store the final roles of the user.",
            "default": [
              "ROLE_USER"
            ],
            "example": [
              "ROLE_USER"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "email",
          "roles"
        ]
      },
      "Invitation.InvitationOutput.jsonld-Read": {
        "type": "object",
        "description": "",
        "properties": {
          "@context": {
            "readOnly": true,
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "object",
                "properties": {
                  "@vocab": {
                    "type": "string"
                  },
                  "hydra": {
                    "type": "string",
                    "enum": [
                      "http://www.w3.org/ns/hydra/core#"
                    ]
                  }
                },
                "required": [
                  "@vocab",
                  "hydra"
                ],
                "additionalProperties": true
              }
            ]
          },
          "@id": {
            "readOnly": true,
            "type": "string"
          },
          "@type": {
            "readOnly": true,
            "type": "string"
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "firstname": {
            "minLength": 1,
            "maxLength": 255,
            "example": "John",
            "type": "string",
            "nullable": true
          },
          "lastname": {
            "minLength": 1,
            "maxLength": 255,
            "example": "Doe",
            "type": "string",
            "nullable": true
          },
          "email": {
            "format": "email",
            "externalDocs": {
              "url": "http://schema.org/email"
            },
            "type": "string"
          },
          "password": {
            "minLength": 4,
            "maxLength": 128,
            "writeOnly": true,
            "description": "password should be provided through this field.",
            "type": "string",
            "nullable": true
          },
          "organizationDescription": {
            "minLength": 1,
            "maxLength": 128,
            "example": "My team name",
            "description": "This is your team name.",
            "type": "string",
            "nullable": true
          },
          "organizationBillingDescription": {
            "minLength": 1,
            "maxLength": 128,
            "example": "AcmeCORP LLC",
            "description": "This is the organization name as used on invoices.",
            "type": "string",
            "nullable": true
          },
          "organizationName": {
            "minLength": 4,
            "maxLength": 63,
            "pattern": "^([a-z0-9][a-z0-9-]{2,61}[a-z0-9])$",
            "example": "acmecorp",
            "description": "Slug used as nua.ge subdomain.",
            "type": "string",
            "nullable": true
          },
          "organizationAddress": {
            "minLength": 1,
            "maxLength": 255,
            "example": "Place Bellecour",
            "type": "string",
            "nullable": true
          },
          "organizationZipcode": {
            "minLength": 1,
            "maxLength": 32,
            "example": 69002,
            "type": "string",
            "nullable": true
          },
          "organizationCity": {
            "minLength": 1,
            "maxLength": 255,
            "example": "Lyon",
            "type": "string",
            "nullable": true
          },
          "organizationCountry": {
            "minLength": 1,
            "maxLength": 2,
            "example": "FR",
            "type": "string",
            "nullable": true
          },
          "organizationVAT": {
            "example": "FR0123456789",
            "description": "Organization VAT number.",
            "type": "string",
            "nullable": true
          },
          "contract": {
            "description": "Contract ID the user must sign (initialized when the invitation is created).",
            "type": "string",
            "nullable": true
          },
          "contractSigned": {
            "description": "Whether our Terms and Conditions has been read and accepted.",
            "type": "boolean"
          },
          "organization": {
            "example": "/arya/organizations/b4b90ee5-4778-4670-aba4-457a999ee5d2",
            "description": "Organization ID, only set when this is an invitation (not an onboarding).",
            "type": "string",
            "format": "iri-reference",
            "nullable": true
          },
          "createdBy": {
            "example": "/arya/users/710baa0d-2afc-4f3e-a032-699bc879def2",
            "description": "If this invitation has been created on behalf of someone else, this is the user ID.",
            "type": "string",
            "format": "iri-reference",
            "nullable": true
          },
          "validUntil": {
            "description": "Date at which the invitation expired. Note that empty invitations are automatically deleted after 24 hours, disregarding this field.",
            "type": "string",
            "format": "date-time"
          },
          "validFrom": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "enum": [
              "new",
              "sent",
              "progress",
              "error",
              "ready",
              "completed",
              "building"
            ],
            "description": "Current status of this invitation.",
            "default": "new",
            "example": "new",
            "type": "string"
          },
          "lastUpdate": {
            "description": "Last modification date.",
            "type": "string",
            "format": "date-time"
          },
          "newsletter": {
            "description": "Whether the user subscribes to the newsletter.",
            "type": "boolean"
          },
          "extensions": {
            "description": "Additional items linked to an invitation.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InvitationExtensions.jsonld-Read"
            }
          },
          "roles": {
            "description": "Store the final roles of the user.",
            "default": [
              "ROLE_USER"
            ],
            "example": [
              "ROLE_USER"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "email",
          "roles"
        ]
      },
      "Invitation.jsonld-Write": {
        "type": "object",
        "description": "",
        "properties": {
          "@context": {
            "readOnly": true,
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "object",
                "properties": {
                  "@vocab": {
                    "type": "string"
                  },
                  "hydra": {
                    "type": "string",
                    "enum": [
                      "http://www.w3.org/ns/hydra/core#"
                    ]
                  }
                },
                "required": [
                  "@vocab",
                  "hydra"
                ],
                "additionalProperties": true
              }
            ]
          },
          "@id": {
            "readOnly": true,
            "type": "string"
          },
          "@type": {
            "readOnly": true,
            "type": "string"
          },
          "firstname": {
            "minLength": 1,
            "maxLength": 255,
            "example": "John",
            "type": "string",
            "nullable": true
          },
          "lastname": {
            "minLength": 1,
            "maxLength": 255,
            "example": "Doe",
            "type": "string",
            "nullable": true
          },
          "email": {
            "format": "email",
            "externalDocs": {
              "url": "http://schema.org/email"
            },
            "type": "string"
          },
          "password": {
            "minLength": 4,
            "maxLength": 128,
            "writeOnly": true,
            "description": "password should be provided through this field.",
            "type": "string",
            "nullable": true
          },
          "organizationDescription": {
            "minLength": 1,
            "maxLength": 128,
            "example": "My team name",
            "description": "This is your team name.",
            "type": "string",
            "nullable": true
          },
          "organizationBillingDescription": {
            "minLength": 1,
            "maxLength": 128,
            "example": "AcmeCORP LLC",
            "description": "This is the organization name as used on invoices.",
            "type": "string",
            "nullable": true
          },
          "organizationName": {
            "minLength": 4,
            "maxLength": 63,
            "pattern": "^([a-z0-9][a-z0-9-]{2,61}[a-z0-9])$",
            "example": "acmecorp",
            "description": "Slug used as nua.ge subdomain.",
            "type": "string",
            "nullable": true
          },
          "organizationAddress": {
            "minLength": 1,
            "maxLength": 255,
            "example": "Place Bellecour",
            "type": "string",
            "nullable": true
          },
          "organizationZipcode": {
            "minLength": 1,
            "maxLength": 32,
            "example": 69002,
            "type": "string",
            "nullable": true
          },
          "organizationCity": {
            "minLength": 1,
            "maxLength": 255,
            "example": "Lyon",
            "type": "string",
            "nullable": true
          },
          "organizationCountry": {
            "minLength": 1,
            "maxLength": 2,
            "example": "FR",
            "type": "string",
            "nullable": true
          },
          "organizationVAT": {
            "example": "FR0123456789",
            "description": "Organization VAT number.",
            "type": "string",
            "nullable": true
          },
          "contractSigned": {
            "description": "Whether our Terms and Conditions has been read and accepted.",
            "type": "boolean"
          },
          "organization": {
            "example": "/arya/organizations/b4b90ee5-4778-4670-aba4-457a999ee5d2",
            "description": "Organization ID, only set when this is an invitation (not an onboarding).",
            "type": "string",
            "format": "iri-reference",
            "nullable": true
          },
          "createdBy": {
            "example": "/arya/users/710baa0d-2afc-4f3e-a032-699bc879def2",
            "description": "If this invitation has been created on behalf of someone else, this is the user ID.",
            "type": "string",
            "format": "iri-reference",
            "nullable": true
          },
          "status": {
            "enum": [
              "new",
              "sent",
              "progress",
              "error",
              "ready",
              "completed",
              "building"
            ],
            "description": "Current status of this invitation.",
            "default": "new",
            "example": "new",
            "type": "string"
          },
          "newsletter": {
            "description": "Whether the user subscribes to the newsletter.",
            "type": "boolean"
          },
          "roles": {
            "description": "Store the final roles of the user.",
            "default": [
              "ROLE_USER"
            ],
            "example": [
              "ROLE_USER"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "coupon": {
            "minLength": 1,
            "maxLength": 32,
            "writeOnly": true,
            "example": "MYCOUPON",
            "description": "Coupon name.",
            "type": "string",
            "nullable": true
          },
          "sponsor": {
            "minLength": 1,
            "maxLength": 32,
            "writeOnly": true,
            "description": "Sponsorship code.",
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "email",
          "roles"
        ]
      },
      "InvitationExtensions-Read": {
        "type": "object",
        "description": "",
        "properties": {
          "name": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "InvitationExtensions-Write": {
        "type": "object",
        "description": "",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "InvitationExtensions.jsonld-Read": {
        "type": "object",
        "description": "",
        "properties": {
          "@id": {
            "readOnly": true,
            "type": "string"
          },
          "@type": {
            "readOnly": true,
            "type": "string"
          },
          "@context": {
            "readOnly": true,
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "object",
                "properties": {
                  "@vocab": {
                    "type": "string"
                  },
                  "hydra": {
                    "type": "string",
                    "enum": [
                      "http://www.w3.org/ns/hydra/core#"
                    ]
                  }
                },
                "required": [
                  "@vocab",
                  "hydra"
                ],
                "additionalProperties": true
              }
            ]
          },
          "name": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "Keypair-Read": {
        "type": "object",
        "description": "A few comments:\n  - no modification is allowed (itemOperations.patch/put) for security reasons.",
        "properties": {
          "id": {
            "readOnly": true,
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "name": {
            "type": "string"
          },
          "description": {
            "minLength": 1,
            "maxLength": 255,
            "example": "My YubiKey",
            "type": "string",
            "nullable": true
          },
          "publicKey": {
            "example": "ssh-rsa AAAAB3NzaC1yc2EAAAADA....",
            "type": "string"
          },
          "isDefault": {
            "type": "boolean"
          },
          "createdAt": {
            "description": "Server was created this day.",
            "type": "string",
            "format": "date-time"
          },
          "sha256": {
            "example": "ClKLRGqhhr9hNnIORnI0+HuFd5kfAfEEVlUB82Q40xI",
            "readOnly": true,
            "description": "GET SHA256 from public key.",
            "type": "string",
            "nullable": true
          },
          "md5": {
            "example": "b6:96:56:e5:de:ad:be:ef:41:cb:da:97:2b:26:f9:bd",
            "readOnly": true,
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "publicKey"
        ]
      },
      "Keypair-Write": {
        "type": "object",
        "description": "A few comments:\n  - no modification is allowed (itemOperations.patch/put) for security reasons.",
        "required": [
          "user",
          "publicKey"
        ],
        "properties": {
          "user": {
            "example": "/arya/users/710baa0d-2afc-4f3e-a032-699bc879def2",
            "description": "This field will be completed with the current user if not provided. \\\nYou can only add a keypair to yourself.",
            "type": "string",
            "format": "iri-reference"
          },
          "description": {
            "minLength": 1,
            "maxLength": 255,
            "example": "My YubiKey",
            "type": "string",
            "nullable": true
          },
          "publicKey": {
            "example": "ssh-rsa AAAAB3NzaC1yc2EAAAADA....",
            "type": "string"
          },
          "isDefault": {
            "type": "boolean"
          }
        }
      },
      "Keypair-keypair.edit": {
        "type": "object",
        "description": "A few comments:\n  - no modification is allowed (itemOperations.patch/put) for security reasons.",
        "properties": {
          "isDefault": {
            "type": "boolean"
          }
        }
      },
      "Keypair.jsonld-Read": {
        "type": "object",
        "description": "A few comments:\n  - no modification is allowed (itemOperations.patch/put) for security reasons.",
        "properties": {
          "@context": {
            "readOnly": true,
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "object",
                "properties": {
                  "@vocab": {
                    "type": "string"
                  },
                  "hydra": {
                    "type": "string",
                    "enum": [
                      "http://www.w3.org/ns/hydra/core#"
                    ]
                  }
                },
                "required": [
                  "@vocab",
                  "hydra"
                ],
                "additionalProperties": true
              }
            ]
          },
          "@id": {
            "readOnly": true,
            "type": "string"
          },
          "@type": {
            "readOnly": true,
            "type": "string"
          },
          "id": {
            "readOnly": true,
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "name": {
            "type": "string"
          },
          "description": {
            "minLength": 1,
            "maxLength": 255,
            "example": "My YubiKey",
            "type": "string",
            "nullable": true
          },
          "publicKey": {
            "example": "ssh-rsa AAAAB3NzaC1yc2EAAAADA....",
            "type": "string"
          },
          "isDefault": {
            "type": "boolean"
          },
          "createdAt": {
            "description": "Server was created this day.",
            "type": "string",
            "format": "date-time"
          },
          "sha256": {
            "example": "ClKLRGqhhr9hNnIORnI0+HuFd5kfAfEEVlUB82Q40xI",
            "readOnly": true,
            "description": "GET SHA256 from public key.",
            "type": "string",
            "nullable": true
          },
          "md5": {
            "example": "b6:96:56:e5:de:ad:be:ef:41:cb:da:97:2b:26:f9:bd",
            "readOnly": true,
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "publicKey"
        ]
      },
      "Keypair.jsonld-Write": {
        "type": "object",
        "description": "A few comments:\n  - no modification is allowed (itemOperations.patch/put) for security reasons.",
        "required": [
          "user",
          "publicKey"
        ],
        "properties": {
          "@context": {
            "readOnly": true,
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "object",
                "properties": {
                  "@vocab": {
                    "type": "string"
                  },
                  "hydra": {
                    "type": "string",
                    "enum": [
                      "http://www.w3.org/ns/hydra/core#"
                    ]
                  }
                },
                "required": [
                  "@vocab",
                  "hydra"
                ],
                "additionalProperties": true
              }
            ]
          },
          "@id": {
            "readOnly": true,
            "type": "string"
          },
          "@type": {
            "readOnly": true,
            "type": "string"
          },
          "user": {
            "example": "/arya/users/710baa0d-2afc-4f3e-a032-699bc879def2",
            "description": "This field will be completed with the current user if not provided. \\\nYou can only add a keypair to yourself.",
            "type": "string",
            "format": "iri-reference"
          },
          "description": {
            "minLength": 1,
            "maxLength": 255,
            "example": "My YubiKey",
            "type": "string",
            "nullable": true
          },
          "publicKey": {
            "example": "ssh-rsa AAAAB3NzaC1yc2EAAAADA....",
            "type": "string"
          },
          "isDefault": {
            "type": "boolean"
          }
        }
      },
      "Newsletter-Write": {
        "type": "object",
        "description": "This is a virtual entity to query the Plezi API and register users to the newletter.",
        "required": [
          "email"
        ],
        "properties": {
          "email": {
            "format": "email",
            "maxLength": 255,
            "type": "string",
            "example": "test@example.com",
            "description": "The email, it's the only mandatory field. We use the html5 validation.",
            "externalDocs": {
              "url": "http://schema.org/email"
            }
          },
          "firstName": {
            "minLength": 1,
            "maxLength": 64,
            "type": "string",
            "example": "John",
            "description": "Optional field. First name of the user.",
            "nullable": true
          },
          "lastName": {
            "minLength": 1,
            "maxLength": 64,
            "type": "string",
            "example": "Doe",
            "description": "Optional field. Last name of the user.",
            "nullable": true
          },
          "company": {
            "minLength": 1,
            "maxLength": 64,
            "type": "string",
            "example": "Acmecorp",
            "description": "Optional field. Company of the user.",
            "nullable": true
          },
          "pleziVisitor": {
            "minLength": 1,
            "maxLength": 255,
            "type": "string",
            "nullable": true
          },
          "pleziVisit": {
            "minLength": 1,
            "maxLength": 255,
            "type": "string",
            "nullable": true
          }
        }
      },
      "Newsletter.jsonld-Write": {
        "type": "object",
        "description": "This is a virtual entity to query the Plezi API and register users to the newletter.",
        "required": [
          "email"
        ],
        "properties": {
          "@context": {
            "readOnly": true,
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "object",
                "properties": {
                  "@vocab": {
                    "type": "string"
                  },
                  "hydra": {
                    "type": "string",
                    "enum": [
                      "http://www.w3.org/ns/hydra/core#"
                    ]
                  }
                },
                "required": [
                  "@vocab",
                  "hydra"
                ],
                "additionalProperties": true
              }
            ]
          },
          "@id": {
            "readOnly": true,
            "type": "string"
          },
          "@type": {
            "readOnly": true,
            "type": "string"
          },
          "email": {
            "format": "email",
            "maxLength": 255,
            "type": "string",
            "example": "test@example.com",
            "description": "The email, it's the only mandatory field. We use the html5 validation.",
            "externalDocs": {
              "url": "http://schema.org/email"
            }
          },
          "firstName": {
            "minLength": 1,
            "maxLength": 64,
            "type": "string",
            "example": "John",
            "description": "Optional field. First name of the user.",
            "nullable": true
          },
          "lastName": {
            "minLength": 1,
            "maxLength": 64,
            "type": "string",
            "example": "Doe",
            "description": "Optional field. Last name of the user.",
            "nullable": true
          },
          "company": {
            "minLength": 1,
            "maxLength": 64,
            "type": "string",
            "example": "Acmecorp",
            "description": "Optional field. Company of the user.",
            "nullable": true
          },
          "pleziVisitor": {
            "minLength": 1,
            "maxLength": 255,
            "type": "string",
            "nullable": true
          },
          "pleziVisit": {
            "minLength": 1,
            "maxLength": 255,
            "type": "string",
            "nullable": true
          }
        }
      },
      "Organization-Read": {
        "type": "object",
        "description": "",
        "properties": {
          "id": {
            "readOnly": true,
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "minLength": 3,
            "maxLength": 63,
            "pattern": "^([a-z0-9][a-z0-9-]{1,61}[a-z0-9])$",
            "example": "acmecorp",
            "description": "Short name before .nua.ge.",
            "type": "string"
          },
          "description": {
            "minLength": 1,
            "maxLength": 128,
            "example": "My team",
            "description": "Company name.",
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "sponsorship": {
            "description": "is sponsorship enabled ?",
            "default": true,
            "example": true,
            "type": "boolean"
          },
          "state": {
            "readOnly": true,
            "enum": [
              "active",
              "hold",
              "disabled",
              "blocked"
            ],
            "description": "It's state because it is not editable.",
            "type": "string",
            "example": "active"
          }
        },
        "required": [
          "name",
          "description",
          "state"
        ]
      },
      "Organization-Write": {
        "type": "object",
        "description": "",
        "properties": {
          "id": {
            "readOnly": true,
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "minLength": 3,
            "maxLength": 63,
            "pattern": "^([a-z0-9][a-z0-9-]{1,61}[a-z0-9])$",
            "example": "acmecorp",
            "description": "Short name before .nua.ge.",
            "type": "string"
          },
          "description": {
            "minLength": 1,
            "maxLength": 128,
            "example": "My team",
            "description": "Company name.",
            "type": "string"
          },
          "state": {
            "readOnly": true,
            "enum": [
              "active",
              "hold",
              "disabled",
              "blocked"
            ],
            "description": "It's state because it is not editable.",
            "type": "string",
            "example": "active"
          }
        },
        "required": [
          "name",
          "description",
          "state"
        ]
      },
      "Organization-organization.edit": {
        "type": "object",
        "description": "",
        "required": [
          "name",
          "description",
          "state"
        ],
        "properties": {
          "name": {
            "minLength": 3,
            "maxLength": 63,
            "pattern": "^([a-z0-9][a-z0-9-]{1,61}[a-z0-9])$",
            "example": "acmecorp",
            "description": "Short name before .nua.ge.",
            "type": "string"
          },
          "description": {
            "minLength": 1,
            "maxLength": 128,
            "example": "My team",
            "description": "Company name.",
            "type": "string"
          },
          "state": {
            "readOnly": true,
            "enum": [
              "active",
              "hold",
              "disabled",
              "blocked"
            ],
            "description": "It's state because it is not editable.",
            "type": "string",
            "example": "active"
          }
        }
      },
      "Organization.jsonld-Read": {
        "type": "object",
        "description": "",
        "properties": {
          "@context": {
            "readOnly": true,
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "object",
                "properties": {
                  "@vocab": {
                    "type": "string"
                  },
                  "hydra": {
                    "type": "string",
                    "enum": [
                      "http://www.w3.org/ns/hydra/core#"
                    ]
                  }
                },
                "required": [
                  "@vocab",
                  "hydra"
                ],
                "additionalProperties": true
              }
            ]
          },
          "@id": {
            "readOnly": true,
            "type": "string"
          },
          "@type": {
            "readOnly": true,
            "type": "string"
          },
          "id": {
            "readOnly": true,
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "minLength": 3,
            "maxLength": 63,
            "pattern": "^([a-z0-9][a-z0-9-]{1,61}[a-z0-9])$",
            "example": "acmecorp",
            "description": "Short name before .nua.ge.",
            "type": "string"
          },
          "description": {
            "minLength": 1,
            "maxLength": 128,
            "example": "My team",
            "description": "Company name.",
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "sponsorship": {
            "description": "is sponsorship enabled ?",
            "default": true,
            "example": true,
            "type": "boolean"
          },
          "state": {
            "readOnly": true,
            "enum": [
              "active",
              "hold",
              "disabled",
              "blocked"
            ],
            "description": "It's state because it is not editable.",
            "type": "string",
            "example": "active"
          }
        },
        "required": [
          "name",
          "description",
          "state"
        ]
      },
      "Organization.jsonld-Write": {
        "type": "object",
        "description": "",
        "properties": {
          "@context": {
            "readOnly": true,
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "object",
                "properties": {
                  "@vocab": {
                    "type": "string"
                  },
                  "hydra": {
                    "type": "string",
                    "enum": [
                      "http://www.w3.org/ns/hydra/core#"
                    ]
                  }
                },
                "required": [
                  "@vocab",
                  "hydra"
                ],
                "additionalProperties": true
              }
            ]
          },
          "@id": {
            "readOnly": true,
            "type": "string"
          },
          "@type": {
            "readOnly": true,
            "type": "string"
          },
          "id": {
            "readOnly": true,
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "minLength": 3,
            "maxLength": 63,
            "pattern": "^([a-z0-9][a-z0-9-]{1,61}[a-z0-9])$",
            "example": "acmecorp",
            "description": "Short name before .nua.ge.",
            "type": "string"
          },
          "description": {
            "minLength": 1,
            "maxLength": 128,
            "example": "My team",
            "description": "Company name.",
            "type": "string"
          },
          "state": {
            "readOnly": true,
            "enum": [
              "active",
              "hold",
              "disabled",
              "blocked"
            ],
            "description": "It's state because it is not editable.",
            "type": "string",
            "example": "active"
          }
        },
        "required": [
          "name",
          "description",
          "state"
        ]
      },
      "OrganizationLimit-Read": {
        "type": "object",
        "description": "This defines a limit an org has.",
        "properties": {
          "id": {
            "readOnly": true,
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "organization": {
            "example": "/arya/organizations/b4b90ee5-4778-4670-aba4-457a999ee5d2",
            "description": "Org can be null : this is our default value.",
            "type": "string",
            "format": "iri-reference",
            "nullable": true
          },
          "resource": {
            "example": "user",
            "type": "string"
          },
          "limit": {
            "example": 10,
            "type": "integer"
          }
        },
        "required": [
          "resource",
          "limit"
        ]
      },
      "OrganizationLimit-Write": {
        "type": "object",
        "description": "This defines a limit an org has."
      },
      "OrganizationLimit.jsonld-Read": {
        "type": "object",
        "description": "This defines a limit an org has.",
        "properties": {
          "@context": {
            "readOnly": true,
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "object",
                "properties": {
                  "@vocab": {
                    "type": "string"
                  },
                  "hydra": {
                    "type": "string",
                    "enum": [
                      "http://www.w3.org/ns/hydra/core#"
                    ]
                  }
                },
                "required": [
                  "@vocab",
                  "hydra"
                ],
                "additionalProperties": true
              }
            ]
          },
          "@id": {
            "readOnly": true,
            "type": "string"
          },
          "@type": {
            "readOnly": true,
            "type": "string"
          },
          "id": {
            "readOnly": true,
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "organization": {
            "example": "/arya/organizations/b4b90ee5-4778-4670-aba4-457a999ee5d2",
            "description": "Org can be null : this is our default value.",
            "type": "string",
            "format": "iri-reference",
            "nullable": true
          },
          "resource": {
            "example": "user",
            "type": "string"
          },
          "limit": {
            "example": 10,
            "type": "integer"
          }
        },
        "required": [
          "resource",
          "limit"
        ]
      },
      "OrganizationLimit.jsonld-Write": {
        "type": "object",
        "description": "This defines a limit an org has.",
        "properties": {
          "@context": {
            "readOnly": true,
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "object",
                "properties": {
                  "@vocab": {
                    "type": "string"
                  },
                  "hydra": {
                    "type": "string",
                    "enum": [
                      "http://www.w3.org/ns/hydra/core#"
                    ]
                  }
                },
                "required": [
                  "@vocab",
                  "hydra"
                ],
                "additionalProperties": true
              }
            ]
          },
          "@id": {
            "readOnly": true,
            "type": "string"
          },
          "@type": {
            "readOnly": true,
            "type": "string"
          }
        }
      },
      "Password-Read": {
        "type": "object",
        "description": ""
      },
      "Password.PasswordInput-Write": {
        "type": "object",
        "description": "",
        "required": [
          "organization",
          "email"
        ],
        "properties": {
          "organization": {
            "type": "string",
            "example": "acmecorp",
            "description": "This is a string, because we do not know org ID."
          },
          "email": {
            "format": "email",
            "type": "string",
            "example": "user@example.com",
            "externalDocs": {
              "url": "http://schema.org/email"
            }
          }
        }
      },
      "Password.PasswordInput.jsonld-Write": {
        "type": "object",
        "description": "",
        "required": [
          "organization",
          "email"
        ],
        "properties": {
          "@context": {
            "readOnly": true,
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "object",
                "properties": {
                  "@vocab": {
                    "type": "string"
                  },
                  "hydra": {
                    "type": "string",
                    "enum": [
                      "http://www.w3.org/ns/hydra/core#"
                    ]
                  }
                },
                "required": [
                  "@vocab",
                  "hydra"
                ],
                "additionalProperties": true
              }
            ]
          },
          "@id": {
            "readOnly": true,
            "type": "string"
          },
          "@type": {
            "readOnly": true,
            "type": "string"
          },
          "organization": {
            "type": "string",
            "example": "acmecorp",
            "description": "This is a string, because we do not know org ID."
          },
          "email": {
            "format": "email",
            "type": "string",
            "example": "user@example.com",
            "externalDocs": {
              "url": "http://schema.org/email"
            }
          }
        }
      },
      "Password.PasswordInputPatch-Write": {
        "type": "object",
        "description": "",
        "required": [
          "password"
        ],
        "properties": {
          "password": {
            "minLength": 4,
            "maxLength": 128,
            "type": "string",
            "example": "azertyuiop",
            "nullable": true
          }
        }
      },
      "Password.jsonld-Read": {
        "type": "object",
        "description": "",
        "properties": {
          "@context": {
            "readOnly": true,
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "object",
                "properties": {
                  "@vocab": {
                    "type": "string"
                  },
                  "hydra": {
                    "type": "string",
                    "enum": [
                      "http://www.w3.org/ns/hydra/core#"
                    ]
                  }
                },
                "required": [
                  "@vocab",
                  "hydra"
                ],
                "additionalProperties": true
              }
            ]
          },
          "@id": {
            "readOnly": true,
            "type": "string"
          },
          "@type": {
            "readOnly": true,
            "type": "string"
          }
        }
      },
      "Project-Read": {
        "type": "object",
        "description": "",
        "properties": {
          "id": {
            "readOnly": true,
            "type": "string",
            "format": "uuid"
          },
          "driverType": {
            "description": "Driver du projet. Pour le moment peut être uniquement \"openstack\".",
            "default": "openstack",
            "example": "openstack",
            "type": "string"
          },
          "name": {
            "pattern": "^([a-z0-9]{16})$",
            "minLength": 16,
            "maxLength": 16,
            "description": "ascii name.",
            "type": "string"
          },
          "description": {
            "minLength": 3,
            "maxLength": 255,
            "example": "My beautiful project",
            "description": "Nice project name.",
            "type": "string"
          },
          "createdAt": {
            "description": "Project creation date.",
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "driverType",
          "description"
        ]
      },
      "Project-Write": {
        "type": "object",
        "description": "",
        "required": [
          "organization",
          "description"
        ],
        "properties": {
          "organization": {
            "example": "/arya/organizations/b4b90ee5-4778-4670-aba4-457a999ee5d2",
            "type": "string",
            "format": "iri-reference"
          },
          "description": {
            "minLength": 3,
            "maxLength": 255,
            "example": "My beautiful project",
            "description": "Nice project name.",
            "type": "string"
          }
        }
      },
      "Project-project.edit": {
        "type": "object",
        "description": "",
        "required": [
          "description"
        ],
        "properties": {
          "description": {
            "minLength": 3,
            "maxLength": 255,
            "example": "My beautiful project",
            "description": "Nice project name.",
            "type": "string"
          }
        }
      },
      "Project.jsonld-Read": {
        "type": "object",
        "description": "",
        "properties": {
          "@context": {
            "readOnly": true,
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "object",
                "properties": {
                  "@vocab": {
                    "type": "string"
                  },
                  "hydra": {
                    "type": "string",
                    "enum": [
                      "http://www.w3.org/ns/hydra/core#"
                    ]
                  }
                },
                "required": [
                  "@vocab",
                  "hydra"
                ],
                "additionalProperties": true
              }
            ]
          },
          "@id": {
            "readOnly": true,
            "type": "string"
          },
          "@type": {
            "readOnly": true,
            "type": "string"
          },
          "id": {
            "readOnly": true,
            "type": "string",
            "format": "uuid"
          },
          "driverType": {
            "description": "Driver du projet. Pour le moment peut être uniquement \"openstack\".",
            "default": "openstack",
            "example": "openstack",
            "type": "string"
          },
          "name": {
            "pattern": "^([a-z0-9]{16})$",
            "minLength": 16,
            "maxLength": 16,
            "description": "ascii name.",
            "type": "string"
          },
          "description": {
            "minLength": 3,
            "maxLength": 255,
            "example": "My beautiful project",
            "description": "Nice project name.",
            "type": "string"
          },
          "createdAt": {
            "description": "Project creation date.",
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "driverType",
          "description"
        ]
      },
      "Project.jsonld-Write": {
        "type": "object",
        "description": "",
        "required": [
          "organization",
          "description"
        ],
        "properties": {
          "@context": {
            "readOnly": true,
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "object",
                "properties": {
                  "@vocab": {
                    "type": "string"
                  },
                  "hydra": {
                    "type": "string",
                    "enum": [
                      "http://www.w3.org/ns/hydra/core#"
                    ]
                  }
                },
                "required": [
                  "@vocab",
                  "hydra"
                ],
                "additionalProperties": true
              }
            ]
          },
          "@id": {
            "readOnly": true,
            "type": "string"
          },
          "@type": {
            "readOnly": true,
            "type": "string"
          },
          "organization": {
            "example": "/arya/organizations/b4b90ee5-4778-4670-aba4-457a999ee5d2",
            "type": "string",
            "format": "iri-reference"
          },
          "description": {
            "minLength": 3,
            "maxLength": 255,
            "example": "My beautiful project",
            "description": "Nice project name.",
            "type": "string"
          }
        }
      },
      "Role-Read": {
        "type": "object",
        "description": "",
        "properties": {
          "name": {
            "pattern": "^([A-Z_]{1,30})$",
            "description": "The Symfony role is \"ROLE_\" + uppercase($name).",
            "type": "string"
          }
        }
      },
      "Role.jsonld-Read": {
        "type": "object",
        "description": "",
        "properties": {
          "@id": {
            "readOnly": true,
            "type": "string"
          },
          "@type": {
            "readOnly": true,
            "type": "string"
          },
          "@context": {
            "readOnly": true,
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "object",
                "properties": {
                  "@vocab": {
                    "type": "string"
                  },
                  "hydra": {
                    "type": "string",
                    "enum": [
                      "http://www.w3.org/ns/hydra/core#"
                    ]
                  }
                },
                "required": [
                  "@vocab",
                  "hydra"
                ],
                "additionalProperties": true
              }
            ]
          },
          "name": {
            "pattern": "^([A-Z_]{1,30})$",
            "description": "The Symfony role is \"ROLE_\" + uppercase($name).",
            "type": "string"
          }
        }
      },
      "Sponsorship-Read": {
        "type": "object",
        "description": "",
        "properties": {
          "id": {
            "example": "ABCDEFGH",
            "type": "string"
          },
          "sponsor": {
            "example": "Olivier D.",
            "type": "string"
          },
          "value": {
            "example": 100,
            "type": "integer"
          },
          "currency": {
            "default": "EUR",
            "example": "EUR",
            "type": "string"
          }
        }
      },
      "Sponsorship.jsonld-Read": {
        "type": "object",
        "description": "",
        "properties": {
          "@context": {
            "readOnly": true,
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "object",
                "properties": {
                  "@vocab": {
                    "type": "string"
                  },
                  "hydra": {
                    "type": "string",
                    "enum": [
                      "http://www.w3.org/ns/hydra/core#"
                    ]
                  }
                },
                "required": [
                  "@vocab",
                  "hydra"
                ],
                "additionalProperties": true
              }
            ]
          },
          "@id": {
            "readOnly": true,
            "type": "string"
          },
          "@type": {
            "readOnly": true,
            "type": "string"
          },
          "id": {
            "example": "ABCDEFGH",
            "type": "string"
          },
          "sponsor": {
            "example": "Olivier D.",
            "type": "string"
          },
          "value": {
            "example": 100,
            "type": "integer"
          },
          "currency": {
            "default": "EUR",
            "example": "EUR",
            "type": "string"
          }
        }
      },
      "User-Read": {
        "type": "object",
        "description": "",
        "properties": {
          "id": {
            "readOnly": true,
            "type": "string",
            "nullable": true
          },
          "roles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Role-Read"
            }
          },
          "name": {
            "minLength": 1,
            "maxLength": 64,
            "format": "email",
            "externalDocs": {
              "url": "http://schema.org/email"
            },
            "type": "string"
          },
          "firstname": {
            "minLength": 1,
            "maxLength": 255,
            "example": "John",
            "type": "string"
          },
          "lastname": {
            "minLength": 1,
            "maxLength": 255,
            "example": "Doe",
            "type": "string"
          },
          "email": {
            "format": "email",
            "externalDocs": {
              "url": "http://schema.org/email"
            },
            "type": "string"
          },
          "lastLogin": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "enabled": {
            "default": true,
            "example": true,
            "type": "boolean"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "sponsorCode": {
            "example": "ABCDEFGH",
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "firstname",
          "lastname",
          "email"
        ]
      },
      "User-Write": {
        "type": "object",
        "description": "",
        "properties": {
          "name": {
            "minLength": 1,
            "maxLength": 64,
            "format": "email",
            "externalDocs": {
              "url": "http://schema.org/email"
            },
            "type": "string"
          },
          "firstname": {
            "minLength": 1,
            "maxLength": 255,
            "example": "John",
            "type": "string"
          },
          "lastname": {
            "minLength": 1,
            "maxLength": 255,
            "example": "Doe",
            "type": "string"
          },
          "email": {
            "format": "email",
            "externalDocs": {
              "url": "http://schema.org/email"
            },
            "type": "string"
          }
        },
        "required": [
          "firstname",
          "lastname",
          "email"
        ]
      },
      "User.jsonld-Read": {
        "type": "object",
        "description": "",
        "properties": {
          "@context": {
            "readOnly": true,
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "object",
                "properties": {
                  "@vocab": {
                    "type": "string"
                  },
                  "hydra": {
                    "type": "string",
                    "enum": [
                      "http://www.w3.org/ns/hydra/core#"
                    ]
                  }
                },
                "required": [
                  "@vocab",
                  "hydra"
                ],
                "additionalProperties": true
              }
            ]
          },
          "@id": {
            "readOnly": true,
            "type": "string"
          },
          "@type": {
            "readOnly": true,
            "type": "string"
          },
          "id": {
            "readOnly": true,
            "type": "string",
            "nullable": true
          },
          "roles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Role.jsonld-Read"
            }
          },
          "name": {
            "minLength": 1,
            "maxLength": 64,
            "format": "email",
            "externalDocs": {
              "url": "http://schema.org/email"
            },
            "type": "string"
          },
          "firstname": {
            "minLength": 1,
            "maxLength": 255,
            "example": "John",
            "type": "string"
          },
          "lastname": {
            "minLength": 1,
            "maxLength": 255,
            "example": "Doe",
            "type": "string"
          },
          "email": {
            "format": "email",
            "externalDocs": {
              "url": "http://schema.org/email"
            },
            "type": "string"
          },
          "lastLogin": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "enabled": {
            "default": true,
            "example": true,
            "type": "boolean"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "sponsorCode": {
            "example": "ABCDEFGH",
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "firstname",
          "lastname",
          "email"
        ]
      },
      "User.jsonld-Write": {
        "type": "object",
        "description": "",
        "properties": {
          "@context": {
            "readOnly": true,
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "object",
                "properties": {
                  "@vocab": {
                    "type": "string"
                  },
                  "hydra": {
                    "type": "string",
                    "enum": [
                      "http://www.w3.org/ns/hydra/core#"
                    ]
                  }
                },
                "required": [
                  "@vocab",
                  "hydra"
                ],
                "additionalProperties": true
              }
            ]
          },
          "@id": {
            "readOnly": true,
            "type": "string"
          },
          "@type": {
            "readOnly": true,
            "type": "string"
          },
          "name": {
            "minLength": 1,
            "maxLength": 64,
            "format": "email",
            "externalDocs": {
              "url": "http://schema.org/email"
            },
            "type": "string"
          },
          "firstname": {
            "minLength": 1,
            "maxLength": 255,
            "example": "John",
            "type": "string"
          },
          "lastname": {
            "minLength": 1,
            "maxLength": 255,
            "example": "Doe",
            "type": "string"
          },
          "email": {
            "format": "email",
            "externalDocs": {
              "url": "http://schema.org/email"
            },
            "type": "string"
          }
        },
        "required": [
          "firstname",
          "lastname",
          "email"
        ]
      },
      "Refresh": {
        "type": "object",
        "properties": {
          "refresh_token": {
            "type": "string",
            "example": "xxxxxxxxxxxxxxxxx"
          }
        }
      },
      "Refresh-result": {
        "type": "object",
        "properties": {
          "refresh_token": {
            "type": "string",
            "example": "xxxxxxxxxxxxxxxxx"
          },
          "token": {
            "type": "string",
            "example": "xxxxxxxxxxxxxxxxx"
          }
        }
      },
      "Item-Read": {
        "type": "object",
        "description": "Item is a generic entity, describing something that can be sold and is made of several resources.",
        "properties": {
          "id": {
            "readOnly": true,
            "type": "string",
            "format": "uuid"
          },
          "type": {
            "enum": [
              "flavor",
              "image"
            ],
            "description": "Item type, conditioning the Entity linked.",
            "type": "string"
          },
          "externalId": {
            "example": "5acd0270-8dc9-4270-bbdf-e99088f75e89",
            "description": "The entity UUID this item represents.",
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "name": {
            "example": "stdc2ram4disk100",
            "description": "sanitized name representing the resource type and properties.",
            "type": "string"
          },
          "description": {
            "example": "Flavor stdc2ram4disk100",
            "description": "Shiny description.",
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "type",
          "externalId",
          "name",
          "description"
        ]
      },
      "Item-Write": {
        "type": "object",
        "description": "Item is a generic entity, describing something that can be sold and is made of several resources.",
        "properties": {
          "id": {
            "readOnly": true,
            "type": "string",
            "format": "uuid"
          },
          "type": {
            "enum": [
              "flavor",
              "image"
            ],
            "description": "Item type, conditioning the Entity linked.",
            "type": "string"
          },
          "externalId": {
            "example": "5acd0270-8dc9-4270-bbdf-e99088f75e89",
            "description": "The entity UUID this item represents.",
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "name": {
            "example": "stdc2ram4disk100",
            "description": "sanitized name representing the resource type and properties.",
            "type": "string"
          },
          "description": {
            "example": "Flavor stdc2ram4disk100",
            "description": "Shiny description.",
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "type",
          "externalId",
          "name",
          "description"
        ]
      },
      "Item.jsonld-Read": {
        "type": "object",
        "description": "Item is a generic entity, describing something that can be sold and is made of several resources.",
        "properties": {
          "@context": {
            "readOnly": true,
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "object",
                "properties": {
                  "@vocab": {
                    "type": "string"
                  },
                  "hydra": {
                    "type": "string",
                    "enum": [
                      "http://www.w3.org/ns/hydra/core#"
                    ]
                  }
                },
                "required": [
                  "@vocab",
                  "hydra"
                ],
                "additionalProperties": true
              }
            ]
          },
          "@id": {
            "readOnly": true,
            "type": "string"
          },
          "@type": {
            "readOnly": true,
            "type": "string"
          },
          "id": {
            "readOnly": true,
            "type": "string",
            "format": "uuid"
          },
          "type": {
            "enum": [
              "flavor",
              "image"
            ],
            "description": "Item type, conditioning the Entity linked.",
            "type": "string"
          },
          "externalId": {
            "example": "5acd0270-8dc9-4270-bbdf-e99088f75e89",
            "description": "The entity UUID this item represents.",
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "name": {
            "example": "stdc2ram4disk100",
            "description": "sanitized name representing the resource type and properties.",
            "type": "string"
          },
          "description": {
            "example": "Flavor stdc2ram4disk100",
            "description": "Shiny description.",
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "type",
          "externalId",
          "name",
          "description"
        ]
      },
      "Item.jsonld-Write": {
        "type": "object",
        "description": "Item is a generic entity, describing something that can be sold and is made of several resources.",
        "properties": {
          "@context": {
            "readOnly": true,
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "object",
                "properties": {
                  "@vocab": {
                    "type": "string"
                  },
                  "hydra": {
                    "type": "string",
                    "enum": [
                      "http://www.w3.org/ns/hydra/core#"
                    ]
                  }
                },
                "required": [
                  "@vocab",
                  "hydra"
                ],
                "additionalProperties": true
              }
            ]
          },
          "@id": {
            "readOnly": true,
            "type": "string"
          },
          "@type": {
            "readOnly": true,
            "type": "string"
          },
          "id": {
            "readOnly": true,
            "type": "string",
            "format": "uuid"
          },
          "type": {
            "enum": [
              "flavor",
              "image"
            ],
            "description": "Item type, conditioning the Entity linked.",
            "type": "string"
          },
          "externalId": {
            "example": "5acd0270-8dc9-4270-bbdf-e99088f75e89",
            "description": "The entity UUID this item represents.",
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "name": {
            "example": "stdc2ram4disk100",
            "description": "sanitized name representing the resource type and properties.",
            "type": "string"
          },
          "description": {
            "example": "Flavor stdc2ram4disk100",
            "description": "Shiny description.",
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "type",
          "externalId",
          "name",
          "description"
        ]
      },
      "Product-Read": {
        "type": "object",
        "description": "Product is a copy of an item, but with a specific price.",
        "properties": {
          "id": {
            "readOnly": true,
            "type": "string",
            "format": "uuid"
          },
          "item": {
            "description": "Item described. See entity Item.",
            "$ref": "#/components/schemas/Item-Read"
          },
          "prices": {
            "description": "Multiple prices can be returned if we have several currencies.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductPrice-Read"
            }
          }
        },
        "required": [
          "item"
        ]
      },
      "Product-Write": {
        "type": "object",
        "description": "Product is a copy of an item, but with a specific price.",
        "properties": {
          "id": {
            "readOnly": true,
            "type": "string",
            "format": "uuid"
          },
          "item": {
            "description": "Item described. See entity Item.",
            "type": "string",
            "format": "iri-reference"
          },
          "prices": {
            "description": "Multiple prices can be returned if we have several currencies.",
            "type": "array",
            "items": {
              "type": "string",
              "format": "iri-reference"
            }
          }
        },
        "required": [
          "item"
        ]
      },
      "Product.jsonld-Read": {
        "type": "object",
        "description": "Product is a copy of an item, but with a specific price.",
        "properties": {
          "@context": {
            "readOnly": true,
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "object",
                "properties": {
                  "@vocab": {
                    "type": "string"
                  },
                  "hydra": {
                    "type": "string",
                    "enum": [
                      "http://www.w3.org/ns/hydra/core#"
                    ]
                  }
                },
                "required": [
                  "@vocab",
                  "hydra"
                ],
                "additionalProperties": true
              }
            ]
          },
          "@id": {
            "readOnly": true,
            "type": "string"
          },
          "@type": {
            "readOnly": true,
            "type": "string"
          },
          "id": {
            "readOnly": true,
            "type": "string",
            "format": "uuid"
          },
          "item": {
            "description": "Item described. See entity Item.",
            "$ref": "#/components/schemas/Item.jsonld-Read"
          },
          "prices": {
            "description": "Multiple prices can be returned if we have several currencies.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductPrice.jsonld-Read"
            }
          }
        },
        "required": [
          "item"
        ]
      },
      "Product.jsonld-Write": {
        "type": "object",
        "description": "Product is a copy of an item, but with a specific price.",
        "properties": {
          "@context": {
            "readOnly": true,
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "object",
                "properties": {
                  "@vocab": {
                    "type": "string"
                  },
                  "hydra": {
                    "type": "string",
                    "enum": [
                      "http://www.w3.org/ns/hydra/core#"
                    ]
                  }
                },
                "required": [
                  "@vocab",
                  "hydra"
                ],
                "additionalProperties": true
              }
            ]
          },
          "@id": {
            "readOnly": true,
            "type": "string"
          },
          "@type": {
            "readOnly": true,
            "type": "string"
          },
          "id": {
            "readOnly": true,
            "type": "string",
            "format": "uuid"
          },
          "item": {
            "description": "Item described. See entity Item.",
            "type": "string",
            "format": "iri-reference"
          },
          "prices": {
            "description": "Multiple prices can be returned if we have several currencies.",
            "type": "array",
            "items": {
              "type": "string",
              "format": "iri-reference"
            }
          }
        },
        "required": [
          "item"
        ]
      },
      "ProductPrice-Read": {
        "type": "object",
        "description": "",
        "properties": {
          "id": {
            "readOnly": true,
            "type": "string",
            "format": "uuid"
          },
          "currency": {
            "example": "eur",
            "description": "Currency.",
            "externalDocs": {
              "url": "http://schema.org/priceCurrency"
            },
            "type": "string"
          },
          "valueOn": {
            "description": "Hourly price when the resource is used.",
            "type": "string"
          },
          "valueOff": {
            "description": "Hourly price when the resource is shutoff.",
            "type": "string"
          }
        },
        "required": [
          "currency",
          "valueOn",
          "valueOff"
        ]
      },
      "ProductPrice-Write": {
        "type": "object",
        "description": "",
        "required": [
          "product",
          "currency",
          "valueOn",
          "valueOff",
          "validFrom"
        ],
        "properties": {
          "product": {
            "description": "Product UUID.",
            "type": "string",
            "format": "iri-reference"
          },
          "currency": {
            "example": "eur",
            "description": "Currency.",
            "externalDocs": {
              "url": "http://schema.org/priceCurrency"
            },
            "type": "string"
          },
          "valueOn": {
            "description": "Hourly price when the resource is used.",
            "type": "string"
          },
          "valueOff": {
            "description": "Hourly price when the resource is shutoff.",
            "type": "string"
          },
          "validFrom": {
            "externalDocs": {
              "url": "http://schema.org/DateTime"
            },
            "type": "string",
            "format": "date-time"
          },
          "validTo": {
            "externalDocs": {
              "url": "http://schema.org/DateTime"
            },
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "createdAt": {
            "description": "When this price was created. In case of conflict, newer price should be used within same interval.",
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "ProductPrice.jsonld-Read": {
        "type": "object",
        "description": "",
        "properties": {
          "@context": {
            "readOnly": true,
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "object",
                "properties": {
                  "@vocab": {
                    "type": "string"
                  },
                  "hydra": {
                    "type": "string",
                    "enum": [
                      "http://www.w3.org/ns/hydra/core#"
                    ]
                  }
                },
                "required": [
                  "@vocab",
                  "hydra"
                ],
                "additionalProperties": true
              }
            ]
          },
          "@id": {
            "readOnly": true,
            "type": "string"
          },
          "@type": {
            "readOnly": true,
            "type": "string"
          },
          "id": {
            "readOnly": true,
            "type": "string",
            "format": "uuid"
          },
          "currency": {
            "example": "eur",
            "description": "Currency.",
            "externalDocs": {
              "url": "http://schema.org/priceCurrency"
            },
            "type": "string"
          },
          "valueOn": {
            "description": "Hourly price when the resource is used.",
            "type": "string"
          },
          "valueOff": {
            "description": "Hourly price when the resource is shutoff.",
            "type": "string"
          }
        },
        "required": [
          "currency",
          "valueOn",
          "valueOff"
        ]
      },
      "ProductPrice.jsonld-Write": {
        "type": "object",
        "description": "",
        "required": [
          "product",
          "currency",
          "valueOn",
          "valueOff",
          "validFrom"
        ],
        "properties": {
          "@context": {
            "readOnly": true,
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "object",
                "properties": {
                  "@vocab": {
                    "type": "string"
                  },
                  "hydra": {
                    "type": "string",
                    "enum": [
                      "http://www.w3.org/ns/hydra/core#"
                    ]
                  }
                },
                "required": [
                  "@vocab",
                  "hydra"
                ],
                "additionalProperties": true
              }
            ]
          },
          "@id": {
            "readOnly": true,
            "type": "string"
          },
          "@type": {
            "readOnly": true,
            "type": "string"
          },
          "product": {
            "description": "Product UUID.",
            "type": "string",
            "format": "iri-reference"
          },
          "currency": {
            "example": "eur",
            "description": "Currency.",
            "externalDocs": {
              "url": "http://schema.org/priceCurrency"
            },
            "type": "string"
          },
          "valueOn": {
            "description": "Hourly price when the resource is used.",
            "type": "string"
          },
          "valueOff": {
            "description": "Hourly price when the resource is shutoff.",
            "type": "string"
          },
          "validFrom": {
            "externalDocs": {
              "url": "http://schema.org/DateTime"
            },
            "type": "string",
            "format": "date-time"
          },
          "validTo": {
            "externalDocs": {
              "url": "http://schema.org/DateTime"
            },
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "createdAt": {
            "description": "When this price was created. In case of conflict, newer price should be used within same interval.",
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "Query": {
        "type": "object",
        "description": "The query datapoint.",
        "properties": {
          "id": {
            "readOnly": true,
            "description": "Fake ID.",
            "type": "integer"
          },
          "range": {
            "description": "Date range.",
            "nullable": true,
            "anyOf": [
              {
                "$ref": "#/components/schemas/QueryRange"
              }
            ]
          },
          "interval": {
            "example": "1d",
            "type": "string",
            "description": "Base time to group values for. This is the equivalent of GROUPBY for SQL."
          },
          "maxDataPoints": {
            "description": "Controls the maximum of intervals returned. If you miscalculate interval, this field will block you from\ndoing anything wrong. It cannot exceed 2000.",
            "default": 2000,
            "example": 2000,
            "type": "integer"
          },
          "targets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/QueryTarget"
            }
          },
          "adhocFilters": {
            "description": "The filters you want to apply to data.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/QueryAdhocFilter"
            }
          },
          "__interval": {
            "readOnly": true,
            "type": "string"
          },
          "intervalMs": {
            "writeOnly": true
          }
        },
        "required": [
          "range",
          "interval",
          "targets"
        ]
      },
      "Query.jsonld": {
        "type": "object",
        "description": "The query datapoint.",
        "properties": {
          "@context": {
            "readOnly": true,
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "object",
                "properties": {
                  "@vocab": {
                    "type": "string"
                  },
                  "hydra": {
                    "type": "string",
                    "enum": [
                      "http://www.w3.org/ns/hydra/core#"
                    ]
                  }
                },
                "required": [
                  "@vocab",
                  "hydra"
                ],
                "additionalProperties": true
              }
            ]
          },
          "@id": {
            "readOnly": true,
            "type": "string"
          },
          "@type": {
            "readOnly": true,
            "type": "string"
          },
          "id": {
            "readOnly": true,
            "description": "Fake ID.",
            "type": "integer"
          },
          "range": {
            "description": "Date range.",
            "nullable": true,
            "anyOf": [
              {
                "$ref": "#/components/schemas/QueryRange.jsonld"
              }
            ]
          },
          "interval": {
            "example": "1d",
            "type": "string",
            "description": "Base time to group values for. This is the equivalent of GROUPBY for SQL."
          },
          "maxDataPoints": {
            "description": "Controls the maximum of intervals returned. If you miscalculate interval, this field will block you from\ndoing anything wrong. It cannot exceed 2000.",
            "default": 2000,
            "example": 2000,
            "type": "integer"
          },
          "targets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/QueryTarget.jsonld"
            }
          },
          "adhocFilters": {
            "description": "The filters you want to apply to data.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/QueryAdhocFilter.jsonld"
            }
          },
          "__interval": {
            "readOnly": true,
            "type": "string"
          },
          "intervalMs": {
            "writeOnly": true
          }
        },
        "required": [
          "range",
          "interval",
          "targets"
        ]
      },
      "QueryAdhocFilter": {
        "type": "object",
        "required": [
          "key",
          "operator",
          "value"
        ],
        "properties": {
          "key": {
            "example": "organizationId",
            "type": "string"
          },
          "operator": {
            "example": "organizationId",
            "type": "string"
          },
          "value": {
            "format": "uuid",
            "example": "6fda29e4-fc32-11ea-9bc1-0242ac110005",
            "externalDocs": {
              "url": "http://schema.org/identifier"
            },
            "type": "string"
          },
          "organization": {
            "readOnly": true,
            "type": "boolean"
          },
          "project": {
            "readOnly": true,
            "type": "boolean"
          },
          "instance": {
            "readOnly": true,
            "type": "boolean"
          },
          "equal": {
            "readOnly": true,
            "type": "boolean"
          }
        }
      },
      "QueryAdhocFilter.jsonld": {
        "type": "object",
        "required": [
          "key",
          "operator",
          "value"
        ],
        "properties": {
          "@context": {
            "readOnly": true,
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "object",
                "properties": {
                  "@vocab": {
                    "type": "string"
                  },
                  "hydra": {
                    "type": "string",
                    "enum": [
                      "http://www.w3.org/ns/hydra/core#"
                    ]
                  }
                },
                "required": [
                  "@vocab",
                  "hydra"
                ],
                "additionalProperties": true
              }
            ]
          },
          "@id": {
            "readOnly": true,
            "type": "string"
          },
          "@type": {
            "readOnly": true,
            "type": "string"
          },
          "key": {
            "example": "organizationId",
            "type": "string"
          },
          "operator": {
            "example": "organizationId",
            "type": "string"
          },
          "value": {
            "format": "uuid",
            "example": "6fda29e4-fc32-11ea-9bc1-0242ac110005",
            "externalDocs": {
              "url": "http://schema.org/identifier"
            },
            "type": "string"
          },
          "organization": {
            "readOnly": true,
            "type": "boolean"
          },
          "project": {
            "readOnly": true,
            "type": "boolean"
          },
          "instance": {
            "readOnly": true,
            "type": "boolean"
          },
          "equal": {
            "readOnly": true,
            "type": "boolean"
          }
        }
      },
      "QueryRange": {
        "type": "object",
        "required": [
          "from"
        ],
        "properties": {
          "from": {
            "example": "2021-11-01T00:00:00Z",
            "description": "Start time of interval.",
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "to": {
            "example": "2021-12-01T00:00:00Z",
            "description": "End time of interval. If not provided, will be \"now\".",
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        }
      },
      "QueryRange.jsonld": {
        "type": "object",
        "required": [
          "from"
        ],
        "properties": {
          "@context": {
            "readOnly": true,
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "object",
                "properties": {
                  "@vocab": {
                    "type": "string"
                  },
                  "hydra": {
                    "type": "string",
                    "enum": [
                      "http://www.w3.org/ns/hydra/core#"
                    ]
                  }
                },
                "required": [
                  "@vocab",
                  "hydra"
                ],
                "additionalProperties": true
              }
            ]
          },
          "@id": {
            "readOnly": true,
            "type": "string"
          },
          "@type": {
            "readOnly": true,
            "type": "string"
          },
          "from": {
            "example": "2021-11-01T00:00:00Z",
            "description": "Start time of interval.",
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "to": {
            "example": "2021-12-01T00:00:00Z",
            "description": "End time of interval. If not provided, will be \"now\".",
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        }
      },
      "QueryTarget": {
        "type": "object",
        "required": [
          "target",
          "type"
        ],
        "properties": {
          "target": {
            "example": "server",
            "type": "string"
          },
          "type": {
            "example": "timeseries",
            "type": "string"
          },
          "timeseries": {
            "readOnly": true,
            "type": "boolean"
          },
          "table": {
            "readOnly": true,
            "type": "boolean"
          },
          "cost": {
            "readOnly": true,
            "type": "boolean"
          }
        }
      },
      "QueryTarget.jsonld": {
        "type": "object",
        "required": [
          "target",
          "type"
        ],
        "properties": {
          "@context": {
            "readOnly": true,
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "object",
                "properties": {
                  "@vocab": {
                    "type": "string"
                  },
                  "hydra": {
                    "type": "string",
                    "enum": [
                      "http://www.w3.org/ns/hydra/core#"
                    ]
                  }
                },
                "required": [
                  "@vocab",
                  "hydra"
                ],
                "additionalProperties": true
              }
            ]
          },
          "@id": {
            "readOnly": true,
            "type": "string"
          },
          "@type": {
            "readOnly": true,
            "type": "string"
          },
          "target": {
            "example": "server",
            "type": "string"
          },
          "type": {
            "example": "timeseries",
            "type": "string"
          },
          "timeseries": {
            "readOnly": true,
            "type": "boolean"
          },
          "table": {
            "readOnly": true,
            "type": "boolean"
          },
          "cost": {
            "readOnly": true,
            "type": "boolean"
          }
        }
      },
      "Flavor-Read": {
        "type": "object",
        "description": "",
        "properties": {
          "id": {
            "readOnly": true,
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "pattern": "^([a-z0-9][-a-z0-9]{0,62}[a-z0-9])$",
            "minLength": 1,
            "maxLength": 64,
            "example": "stdc32ram120disk100",
            "description": "This is an internal name, used primarily for logs (easier than UUID ...).",
            "type": "string"
          },
          "ram": {
            "example": 4,
            "description": "RAM (in GiB).",
            "type": "integer"
          },
          "core": {
            "example": 8,
            "description": "Cores (or CPU).",
            "type": "integer"
          },
          "disk": {
            "example": 100,
            "description": "Initial disk size (in GiB).",
            "type": "integer"
          },
          "isPublic": {
            "description": "If this flavor can be used by everyone or not. Custom flavors will have isPublic=false.",
            "default": true,
            "example": true,
            "type": "boolean"
          }
        },
        "required": [
          "name",
          "ram",
          "core",
          "disk"
        ]
      },
      "Flavor-Write": {
        "type": "object",
        "description": "",
        "properties": {
          "id": {
            "readOnly": true,
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "pattern": "^([a-z0-9][-a-z0-9]{0,62}[a-z0-9])$",
            "minLength": 1,
            "maxLength": 64,
            "example": "stdc32ram120disk100",
            "description": "This is an internal name, used primarily for logs (easier than UUID ...).",
            "type": "string"
          },
          "ram": {
            "example": 4,
            "description": "RAM (in GiB).",
            "type": "integer"
          },
          "core": {
            "example": 8,
            "description": "Cores (or CPU).",
            "type": "integer"
          },
          "disk": {
            "example": 100,
            "description": "Initial disk size (in GiB).",
            "type": "integer"
          },
          "isPublic": {
            "description": "If this flavor can be used by everyone or not. Custom flavors will have isPublic=false.",
            "default": true,
            "example": true,
            "type": "boolean"
          }
        },
        "required": [
          "name",
          "ram",
          "core",
          "disk"
        ]
      },
      "Flavor.jsonld-Read": {
        "type": "object",
        "description": "",
        "properties": {
          "@context": {
            "readOnly": true,
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "object",
                "properties": {
                  "@vocab": {
                    "type": "string"
                  },
                  "hydra": {
                    "type": "string",
                    "enum": [
                      "http://www.w3.org/ns/hydra/core#"
                    ]
                  }
                },
                "required": [
                  "@vocab",
                  "hydra"
                ],
                "additionalProperties": true
              }
            ]
          },
          "@id": {
            "readOnly": true,
            "type": "string"
          },
          "@type": {
            "readOnly": true,
            "type": "string"
          },
          "id": {
            "readOnly": true,
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "pattern": "^([a-z0-9][-a-z0-9]{0,62}[a-z0-9])$",
            "minLength": 1,
            "maxLength": 64,
            "example": "stdc32ram120disk100",
            "description": "This is an internal name, used primarily for logs (easier than UUID ...).",
            "type": "string"
          },
          "ram": {
            "example": 4,
            "description": "RAM (in GiB).",
            "type": "integer"
          },
          "core": {
            "example": 8,
            "description": "Cores (or CPU).",
            "type": "integer"
          },
          "disk": {
            "example": 100,
            "description": "Initial disk size (in GiB).",
            "type": "integer"
          },
          "isPublic": {
            "description": "If this flavor can be used by everyone or not. Custom flavors will have isPublic=false.",
            "default": true,
            "example": true,
            "type": "boolean"
          }
        },
        "required": [
          "name",
          "ram",
          "core",
          "disk"
        ]
      },
      "Flavor.jsonld-Write": {
        "type": "object",
        "description": "",
        "properties": {
          "@context": {
            "readOnly": true,
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "object",
                "properties": {
                  "@vocab": {
                    "type": "string"
                  },
                  "hydra": {
                    "type": "string",
                    "enum": [
                      "http://www.w3.org/ns/hydra/core#"
                    ]
                  }
                },
                "required": [
                  "@vocab",
                  "hydra"
                ],
                "additionalProperties": true
              }
            ]
          },
          "@id": {
            "readOnly": true,
            "type": "string"
          },
          "@type": {
            "readOnly": true,
            "type": "string"
          },
          "id": {
            "readOnly": true,
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "pattern": "^([a-z0-9][-a-z0-9]{0,62}[a-z0-9])$",
            "minLength": 1,
            "maxLength": 64,
            "example": "stdc32ram120disk100",
            "description": "This is an internal name, used primarily for logs (easier than UUID ...).",
            "type": "string"
          },
          "ram": {
            "example": 4,
            "description": "RAM (in GiB).",
            "type": "integer"
          },
          "core": {
            "example": 8,
            "description": "Cores (or CPU).",
            "type": "integer"
          },
          "disk": {
            "example": 100,
            "description": "Initial disk size (in GiB).",
            "type": "integer"
          },
          "isPublic": {
            "description": "If this flavor can be used by everyone or not. Custom flavors will have isPublic=false.",
            "default": true,
            "example": true,
            "type": "boolean"
          }
        },
        "required": [
          "name",
          "ram",
          "core",
          "disk"
        ]
      },
      "Image-Read": {
        "type": "object",
        "description": "",
        "properties": {
          "id": {
            "readOnly": true,
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "pattern": "^([a-z0-9][-a-z0-9]{0,62}[a-z0-9])$",
            "minLength": 1,
            "maxLength": 64,
            "example": "centos-8.3.2011",
            "description": "This is an internal name, used primarily for logs (easier than UUID ...).",
            "type": "string"
          },
          "description": {
            "minLength": 1,
            "maxLength": 255,
            "example": "CentOS",
            "description": "OS name (without version).",
            "type": "string"
          },
          "osAdminUser": {
            "minLength": 1,
            "maxLength": 255,
            "example": "centos",
            "description": "SSH login to use by default.",
            "type": "string"
          },
          "isPublic": {
            "description": "Whether this image is available to anyone.",
            "default": true,
            "example": true,
            "type": "boolean"
          },
          "isDefault": {
            "description": "Whether this is the default image for this osName.",
            "type": "boolean"
          },
          "createdAt": {
            "description": "When this image was added.",
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "description": "When the image was updated.",
            "type": "string",
            "format": "date-time"
          },
          "osName": {
            "minLength": 1,
            "maxLength": 64,
            "example": "centos",
            "description": "OS name (not for print).",
            "type": "string"
          },
          "osVersion": {
            "minLength": 1,
            "maxLength": 64,
            "example": "8.3.2011",
            "description": "OS version.",
            "type": "string"
          },
          "osReleasedAt": {
            "description": "OS official release date.",
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "name",
          "description",
          "osAdminUser",
          "osName",
          "osVersion"
        ]
      },
      "Image-Write": {
        "type": "object",
        "description": "",
        "properties": {
          "id": {
            "readOnly": true,
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "pattern": "^([a-z0-9][-a-z0-9]{0,62}[a-z0-9])$",
            "minLength": 1,
            "maxLength": 64,
            "example": "centos-8.3.2011",
            "description": "This is an internal name, used primarily for logs (easier than UUID ...).",
            "type": "string"
          },
          "description": {
            "minLength": 1,
            "maxLength": 255,
            "example": "CentOS",
            "description": "OS name (without version).",
            "type": "string"
          },
          "osAdminUser": {
            "minLength": 1,
            "maxLength": 255,
            "example": "centos",
            "description": "SSH login to use by default.",
            "type": "string"
          },
          "isPublic": {
            "description": "Whether this image is available to anyone.",
            "default": true,
            "example": true,
            "type": "boolean"
          },
          "isDefault": {
            "description": "Whether this is the default image for this osName.",
            "type": "boolean"
          },
          "createdAt": {
            "description": "When this image was added.",
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "description": "When the image was updated.",
            "type": "string",
            "format": "date-time"
          },
          "osName": {
            "minLength": 1,
            "maxLength": 64,
            "example": "centos",
            "description": "OS name (not for print).",
            "type": "string"
          },
          "osVersion": {
            "minLength": 1,
            "maxLength": 64,
            "example": "8.3.2011",
            "description": "OS version.",
            "type": "string"
          },
          "osReleasedAt": {
            "description": "OS official release date.",
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "name",
          "description",
          "osAdminUser",
          "osName",
          "osVersion"
        ]
      },
      "Image.jsonld-Read": {
        "type": "object",
        "description": "",
        "properties": {
          "@context": {
            "readOnly": true,
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "object",
                "properties": {
                  "@vocab": {
                    "type": "string"
                  },
                  "hydra": {
                    "type": "string",
                    "enum": [
                      "http://www.w3.org/ns/hydra/core#"
                    ]
                  }
                },
                "required": [
                  "@vocab",
                  "hydra"
                ],
                "additionalProperties": true
              }
            ]
          },
          "@id": {
            "readOnly": true,
            "type": "string"
          },
          "@type": {
            "readOnly": true,
            "type": "string"
          },
          "id": {
            "readOnly": true,
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "pattern": "^([a-z0-9][-a-z0-9]{0,62}[a-z0-9])$",
            "minLength": 1,
            "maxLength": 64,
            "example": "centos-8.3.2011",
            "description": "This is an internal name, used primarily for logs (easier than UUID ...).",
            "type": "string"
          },
          "description": {
            "minLength": 1,
            "maxLength": 255,
            "example": "CentOS",
            "description": "OS name (without version).",
            "type": "string"
          },
          "osAdminUser": {
            "minLength": 1,
            "maxLength": 255,
            "example": "centos",
            "description": "SSH login to use by default.",
            "type": "string"
          },
          "isPublic": {
            "description": "Whether this image is available to anyone.",
            "default": true,
            "example": true,
            "type": "boolean"
          },
          "isDefault": {
            "description": "Whether this is the default image for this osName.",
            "type": "boolean"
          },
          "createdAt": {
            "description": "When this image was added.",
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "description": "When the image was updated.",
            "type": "string",
            "format": "date-time"
          },
          "osName": {
            "minLength": 1,
            "maxLength": 64,
            "example": "centos",
            "description": "OS name (not for print).",
            "type": "string"
          },
          "osVersion": {
            "minLength": 1,
            "maxLength": 64,
            "example": "8.3.2011",
            "description": "OS version.",
            "type": "string"
          },
          "osReleasedAt": {
            "description": "OS official release date.",
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "name",
          "description",
          "osAdminUser",
          "osName",
          "osVersion"
        ]
      },
      "Image.jsonld-Write": {
        "type": "object",
        "description": "",
        "properties": {
          "@context": {
            "readOnly": true,
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "object",
                "properties": {
                  "@vocab": {
                    "type": "string"
                  },
                  "hydra": {
                    "type": "string",
                    "enum": [
                      "http://www.w3.org/ns/hydra/core#"
                    ]
                  }
                },
                "required": [
                  "@vocab",
                  "hydra"
                ],
                "additionalProperties": true
              }
            ]
          },
          "@id": {
            "readOnly": true,
            "type": "string"
          },
          "@type": {
            "readOnly": true,
            "type": "string"
          },
          "id": {
            "readOnly": true,
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "pattern": "^([a-z0-9][-a-z0-9]{0,62}[a-z0-9])$",
            "minLength": 1,
            "maxLength": 64,
            "example": "centos-8.3.2011",
            "description": "This is an internal name, used primarily for logs (easier than UUID ...).",
            "type": "string"
          },
          "description": {
            "minLength": 1,
            "maxLength": 255,
            "example": "CentOS",
            "description": "OS name (without version).",
            "type": "string"
          },
          "osAdminUser": {
            "minLength": 1,
            "maxLength": 255,
            "example": "centos",
            "description": "SSH login to use by default.",
            "type": "string"
          },
          "isPublic": {
            "description": "Whether this image is available to anyone.",
            "default": true,
            "example": true,
            "type": "boolean"
          },
          "isDefault": {
            "description": "Whether this is the default image for this osName.",
            "type": "boolean"
          },
          "createdAt": {
            "description": "When this image was added.",
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "description": "When the image was updated.",
            "type": "string",
            "format": "date-time"
          },
          "osName": {
            "minLength": 1,
            "maxLength": 64,
            "example": "centos",
            "description": "OS name (not for print).",
            "type": "string"
          },
          "osVersion": {
            "minLength": 1,
            "maxLength": 64,
            "example": "8.3.2011",
            "description": "OS version.",
            "type": "string"
          },
          "osReleasedAt": {
            "description": "OS official release date.",
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "name",
          "description",
          "osAdminUser",
          "osName",
          "osVersion"
        ]
      },
      "Ip-Write": {
        "type": "object",
        "description": "",
        "properties": {
          "id": {
            "readOnly": true,
            "type": "string",
            "format": "uuid"
          },
          "project": {
            "example": "f57f197c-2156-4044-8edb-8a949f6d2f7d",
            "readOnly": true,
            "description": "Project ID (See entity Project). We don't type hint because the output DTO\nreturns a string for getProject().",
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "server": {
            "example": "659c88cc-2bc7-43bd-a89f-a488cf748b3f",
            "description": "Server ID this IP is associated with (See Server entity).",
            "type": "string",
            "format": "iri-reference"
          },
          "addressFamily": {
            "enum": [
              "ipv4",
              "ipv6"
            ],
            "type": "string"
          },
          "type": {
            "enum": [
              "public",
              "private"
            ],
            "description": "Whether IP is public or private. Private IP are not reachable from the Internet.",
            "type": "string"
          },
          "protected": {
            "example": "true",
            "description": "Tells if the IP is protected to avoid deleting it by mistake (directly or\nvia its server).",
            "type": "boolean"
          },
          "description": {
            "minLength": 1,
            "maxLength": 32,
            "example": "My very specific IP",
            "description": "IP name, human readable.",
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "server",
          "addressFamily",
          "type"
        ]
      },
      "Ip-ip.edit": {
        "type": "object",
        "description": "",
        "required": [
          "server"
        ],
        "properties": {
          "server": {
            "example": "659c88cc-2bc7-43bd-a89f-a488cf748b3f",
            "description": "Server ID this IP is associated with (See Server entity).",
            "type": "string",
            "format": "iri-reference"
          },
          "protected": {
            "example": "true",
            "description": "Tells if the IP is protected to avoid deleting it by mistake (directly or\nvia its server).",
            "type": "boolean"
          },
          "description": {
            "minLength": 1,
            "maxLength": 32,
            "example": "My very specific IP",
            "description": "IP name, human readable.",
            "type": "string",
            "nullable": true
          }
        }
      },
      "Ip.IpOutput-Read": {
        "type": "object",
        "description": "",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "project": {
            "example": "f57f197c-2156-4044-8edb-8a949f6d2f7d",
            "readOnly": true,
            "description": "Project ID (See entity Project). We don't type hint because the output DTO\nreturns a string for getProject().",
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "server": {
            "example": "659c88cc-2bc7-43bd-a89f-a488cf748b3f",
            "description": "Server ID this IP is associated with (See Server entity).",
            "type": "string",
            "format": "iri-reference"
          },
          "addressFamily": {
            "enum": [
              "ipv4",
              "ipv6"
            ],
            "type": "string"
          },
          "type": {
            "enum": [
              "public",
              "private"
            ],
            "description": "Whether IP is public or private. Private IP are not reachable from the Internet.",
            "type": "string"
          },
          "address": {
            "example": "2001:0620:0000:0000:0211:24FF:FE80:C12C",
            "description": "IP address. This cannot be set, only read.",
            "type": "string"
          },
          "protected": {
            "example": "true",
            "description": "Tells if the IP is protected to avoid deleting it by mistake (directly or\nvia its server).",
            "type": "boolean"
          },
          "description": {
            "minLength": 1,
            "maxLength": 32,
            "example": "My very specific IP",
            "description": "IP name, human readable.",
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "server",
          "addressFamily",
          "type"
        ]
      },
      "Ip.IpOutput.jsonld-Read": {
        "type": "object",
        "description": "",
        "properties": {
          "@context": {
            "readOnly": true,
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "object",
                "properties": {
                  "@vocab": {
                    "type": "string"
                  },
                  "hydra": {
                    "type": "string",
                    "enum": [
                      "http://www.w3.org/ns/hydra/core#"
                    ]
                  }
                },
                "required": [
                  "@vocab",
                  "hydra"
                ],
                "additionalProperties": true
              }
            ]
          },
          "@id": {
            "readOnly": true,
            "type": "string"
          },
          "@type": {
            "readOnly": true,
            "type": "string"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "project": {
            "example": "f57f197c-2156-4044-8edb-8a949f6d2f7d",
            "readOnly": true,
            "description": "Project ID (See entity Project). We don't type hint because the output DTO\nreturns a string for getProject().",
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "server": {
            "example": "659c88cc-2bc7-43bd-a89f-a488cf748b3f",
            "description": "Server ID this IP is associated with (See Server entity).",
            "type": "string",
            "format": "iri-reference"
          },
          "addressFamily": {
            "enum": [
              "ipv4",
              "ipv6"
            ],
            "type": "string"
          },
          "type": {
            "enum": [
              "public",
              "private"
            ],
            "description": "Whether IP is public or private. Private IP are not reachable from the Internet.",
            "type": "string"
          },
          "address": {
            "example": "2001:0620:0000:0000:0211:24FF:FE80:C12C",
            "description": "IP address. This cannot be set, only read.",
            "type": "string"
          },
          "protected": {
            "example": "true",
            "description": "Tells if the IP is protected to avoid deleting it by mistake (directly or\nvia its server).",
            "type": "boolean"
          },
          "description": {
            "minLength": 1,
            "maxLength": 32,
            "example": "My very specific IP",
            "description": "IP name, human readable.",
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "server",
          "addressFamily",
          "type"
        ]
      },
      "Ip.jsonld-Write": {
        "type": "object",
        "description": "",
        "properties": {
          "@context": {
            "readOnly": true,
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "object",
                "properties": {
                  "@vocab": {
                    "type": "string"
                  },
                  "hydra": {
                    "type": "string",
                    "enum": [
                      "http://www.w3.org/ns/hydra/core#"
                    ]
                  }
                },
                "required": [
                  "@vocab",
                  "hydra"
                ],
                "additionalProperties": true
              }
            ]
          },
          "@id": {
            "readOnly": true,
            "type": "string"
          },
          "@type": {
            "readOnly": true,
            "type": "string"
          },
          "id": {
            "readOnly": true,
            "type": "string",
            "format": "uuid"
          },
          "project": {
            "example": "f57f197c-2156-4044-8edb-8a949f6d2f7d",
            "readOnly": true,
            "description": "Project ID (See entity Project). We don't type hint because the output DTO\nreturns a string for getProject().",
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "server": {
            "example": "659c88cc-2bc7-43bd-a89f-a488cf748b3f",
            "description": "Server ID this IP is associated with (See Server entity).",
            "type": "string",
            "format": "iri-reference"
          },
          "addressFamily": {
            "enum": [
              "ipv4",
              "ipv6"
            ],
            "type": "string"
          },
          "type": {
            "enum": [
              "public",
              "private"
            ],
            "description": "Whether IP is public or private. Private IP are not reachable from the Internet.",
            "type": "string"
          },
          "protected": {
            "example": "true",
            "description": "Tells if the IP is protected to avoid deleting it by mistake (directly or\nvia its server).",
            "type": "boolean"
          },
          "description": {
            "minLength": 1,
            "maxLength": 32,
            "example": "My very specific IP",
            "description": "IP name, human readable.",
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "server",
          "addressFamily",
          "type"
        ]
      },
      "ProjectLimit-Write": {
        "type": "object",
        "description": "This defines a limit a project has.",
        "required": [
          "scope",
          "resource",
          "limit"
        ],
        "properties": {
          "scope": {
            "enum": [
              "project",
              "organization"
            ],
            "description": "A quota can be applied at two levels : globally on the whole organization, or to a specific project.",
            "type": "string"
          },
          "target": {
            "example": 50,
            "description": "Project UUID or organization UUID (based on scope). See entity.",
            "type": "string",
            "nullable": true
          },
          "resource": {
            "enum": [
              "core",
              "ram",
              "ip",
              "server"
            ],
            "description": "Resource the quota is applied to.",
            "type": "string"
          },
          "limit": {
            "example": 10,
            "description": "The limit itself.",
            "type": "integer"
          }
        }
      },
      "ProjectLimit.ProjectLimitOutput-Read": {
        "type": "object",
        "description": "This defines a limit a project has.",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "scope": {
            "enum": [
              "project",
              "organization"
            ],
            "description": "A quota can be applied at two levels : globally on the whole organization, or to a specific project.",
            "type": "string",
            "nullable": true
          },
          "target": {
            "example": 50,
            "description": "Project UUID or organization UUID (based on scope). See entity.",
            "type": "string",
            "nullable": true
          },
          "resource": {
            "enum": [
              "core",
              "ram",
              "ip",
              "server"
            ],
            "description": "Resource the quota is applied to.",
            "type": "string"
          },
          "limit": {
            "example": 10,
            "description": "The limit itself.",
            "type": "integer"
          }
        },
        "required": [
          "scope",
          "resource",
          "limit"
        ]
      },
      "ProjectLimit.ProjectLimitOutput.jsonld-Read": {
        "type": "object",
        "description": "This defines a limit a project has.",
        "properties": {
          "@context": {
            "readOnly": true,
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "object",
                "properties": {
                  "@vocab": {
                    "type": "string"
                  },
                  "hydra": {
                    "type": "string",
                    "enum": [
                      "http://www.w3.org/ns/hydra/core#"
                    ]
                  }
                },
                "required": [
                  "@vocab",
                  "hydra"
                ],
                "additionalProperties": true
              }
            ]
          },
          "@id": {
            "readOnly": true,
            "type": "string"
          },
          "@type": {
            "readOnly": true,
            "type": "string"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "scope": {
            "enum": [
              "project",
              "organization"
            ],
            "description": "A quota can be applied at two levels : globally on the whole organization, or to a specific project.",
            "type": "string",
            "nullable": true
          },
          "target": {
            "example": 50,
            "description": "Project UUID or organization UUID (based on scope). See entity.",
            "type": "string",
            "nullable": true
          },
          "resource": {
            "enum": [
              "core",
              "ram",
              "ip",
              "server"
            ],
            "description": "Resource the quota is applied to.",
            "type": "string"
          },
          "limit": {
            "example": 10,
            "description": "The limit itself.",
            "type": "integer"
          }
        },
        "required": [
          "scope",
          "resource",
          "limit"
        ]
      },
      "ProjectLimit.jsonld-Write": {
        "type": "object",
        "description": "This defines a limit a project has.",
        "required": [
          "scope",
          "resource",
          "limit"
        ],
        "properties": {
          "@context": {
            "readOnly": true,
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "object",
                "properties": {
                  "@vocab": {
                    "type": "string"
                  },
                  "hydra": {
                    "type": "string",
                    "enum": [
                      "http://www.w3.org/ns/hydra/core#"
                    ]
                  }
                },
                "required": [
                  "@vocab",
                  "hydra"
                ],
                "additionalProperties": true
              }
            ]
          },
          "@id": {
            "readOnly": true,
            "type": "string"
          },
          "@type": {
            "readOnly": true,
            "type": "string"
          },
          "scope": {
            "enum": [
              "project",
              "organization"
            ],
            "description": "A quota can be applied at two levels : globally on the whole organization, or to a specific project.",
            "type": "string"
          },
          "target": {
            "example": 50,
            "description": "Project UUID or organization UUID (based on scope). See entity.",
            "type": "string",
            "nullable": true
          },
          "resource": {
            "enum": [
              "core",
              "ram",
              "ip",
              "server"
            ],
            "description": "Resource the quota is applied to.",
            "type": "string"
          },
          "limit": {
            "example": 10,
            "description": "The limit itself.",
            "type": "integer"
          }
        }
      },
      "ProjectUsage-Read": {
        "type": "object",
        "description": "",
        "properties": {
          "project": {
            "description": "Project UUID. See Entity Project.",
            "type": "string"
          },
          "resource": {
            "enum": [
              "core",
              "ram",
              "ip",
              "server"
            ],
            "description": "Resource type.",
            "type": "string"
          },
          "value": {
            "example": 10,
            "description": "Current usage of this resource.",
            "type": "integer"
          }
        }
      },
      "ProjectUsage.jsonld-Read": {
        "type": "object",
        "description": "",
        "properties": {
          "@id": {
            "readOnly": true,
            "type": "string"
          },
          "@type": {
            "readOnly": true,
            "type": "string"
          },
          "project": {
            "description": "Project UUID. See Entity Project.",
            "type": "string"
          },
          "resource": {
            "enum": [
              "core",
              "ram",
              "ip",
              "server"
            ],
            "description": "Resource type.",
            "type": "string"
          },
          "value": {
            "example": 10,
            "description": "Current usage of this resource.",
            "type": "integer"
          }
        }
      },
      "SecurityGroup-Read": {
        "type": "object",
        "description": "",
        "properties": {
          "id": {
            "readOnly": true,
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "example": "ssh",
            "description": "A codename describing the rules in the securityGroup.",
            "type": "string"
          },
          "description": {
            "example": "Allow SSH connections",
            "description": "A human-readable description.",
            "type": "string"
          },
          "rules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SecurityRule-Read"
            }
          }
        }
      },
      "SecurityGroup-Write": {
        "type": "object",
        "description": "",
        "properties": {
          "id": {
            "readOnly": true,
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "example": "ssh",
            "description": "A codename describing the rules in the securityGroup.",
            "type": "string"
          },
          "description": {
            "example": "Allow SSH connections",
            "description": "A human-readable description.",
            "type": "string"
          },
          "rules": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "iri-reference"
            }
          }
        }
      },
      "SecurityGroup.jsonld-Read": {
        "type": "object",
        "description": "",
        "properties": {
          "@context": {
            "readOnly": true,
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "object",
                "properties": {
                  "@vocab": {
                    "type": "string"
                  },
                  "hydra": {
                    "type": "string",
                    "enum": [
                      "http://www.w3.org/ns/hydra/core#"
                    ]
                  }
                },
                "required": [
                  "@vocab",
                  "hydra"
                ],
                "additionalProperties": true
              }
            ]
          },
          "@id": {
            "readOnly": true,
            "type": "string"
          },
          "@type": {
            "readOnly": true,
            "type": "string"
          },
          "id": {
            "readOnly": true,
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "example": "ssh",
            "description": "A codename describing the rules in the securityGroup.",
            "type": "string"
          },
          "description": {
            "example": "Allow SSH connections",
            "description": "A human-readable description.",
            "type": "string"
          },
          "rules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SecurityRule.jsonld-Read"
            }
          }
        }
      },
      "SecurityGroup.jsonld-Write": {
        "type": "object",
        "description": "",
        "properties": {
          "@context": {
            "readOnly": true,
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "object",
                "properties": {
                  "@vocab": {
                    "type": "string"
                  },
                  "hydra": {
                    "type": "string",
                    "enum": [
                      "http://www.w3.org/ns/hydra/core#"
                    ]
                  }
                },
                "required": [
                  "@vocab",
                  "hydra"
                ],
                "additionalProperties": true
              }
            ]
          },
          "@id": {
            "readOnly": true,
            "type": "string"
          },
          "@type": {
            "readOnly": true,
            "type": "string"
          },
          "id": {
            "readOnly": true,
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "example": "ssh",
            "description": "A codename describing the rules in the securityGroup.",
            "type": "string"
          },
          "description": {
            "example": "Allow SSH connections",
            "description": "A human-readable description.",
            "type": "string"
          },
          "rules": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "iri-reference"
            }
          }
        }
      },
      "SecurityRule-Read": {
        "type": "object",
        "description": "",
        "properties": {
          "id": {
            "readOnly": true,
            "type": "string",
            "format": "uuid"
          },
          "direction": {
            "enum": [
              "egress",
              "ingress"
            ],
            "description": "Trafic direction.",
            "type": "string"
          },
          "protocol": {
            "enum": [
              "tcp",
              "udp",
              "icmp",
              "any"
            ],
            "description": "Protocol.",
            "type": "string",
            "nullable": true
          },
          "ethertype": {
            "enum": [
              "ipv4",
              "ipv6"
            ],
            "description": "Internet protocol.",
            "type": "string",
            "nullable": true
          },
          "portMin": {
            "example": 1024,
            "description": "Firewall rule applies to a port range. this is the lower range.",
            "type": "integer",
            "nullable": true
          },
          "portMax": {
            "example": 12345,
            "description": "Firewall rule applies to a port range. this is the upper range.",
            "type": "integer",
            "nullable": true
          },
          "remote": {
            "example": "8.8.8.8",
            "description": "The remote IP prefix (CIDR notation) that is matched by this security group rule.",
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "direction"
        ]
      },
      "SecurityRule-Write": {
        "type": "object",
        "description": "",
        "properties": {
          "id": {
            "readOnly": true,
            "type": "string",
            "format": "uuid"
          },
          "group": {
            "type": "string",
            "format": "iri-reference",
            "nullable": true
          },
          "direction": {
            "enum": [
              "egress",
              "ingress"
            ],
            "description": "Trafic direction.",
            "type": "string"
          },
          "protocol": {
            "enum": [
              "tcp",
              "udp",
              "icmp",
              "any"
            ],
            "description": "Protocol.",
            "type": "string",
            "nullable": true
          },
          "ethertype": {
            "enum": [
              "ipv4",
              "ipv6"
            ],
            "description": "Internet protocol.",
            "type": "string",
            "nullable": true
          },
          "portMin": {
            "example": 1024,
            "description": "Firewall rule applies to a port range. this is the lower range.",
            "type": "integer",
            "nullable": true
          },
          "portMax": {
            "example": 12345,
            "description": "Firewall rule applies to a port range. this is the upper range.",
            "type": "integer",
            "nullable": true
          },
          "remote": {
            "example": "8.8.8.8",
            "description": "The remote IP prefix (CIDR notation) that is matched by this security group rule.",
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "direction"
        ]
      },
      "SecurityRule.jsonld-Read": {
        "type": "object",
        "description": "",
        "properties": {
          "@context": {
            "readOnly": true,
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "object",
                "properties": {
                  "@vocab": {
                    "type": "string"
                  },
                  "hydra": {
                    "type": "string",
                    "enum": [
                      "http://www.w3.org/ns/hydra/core#"
                    ]
                  }
                },
                "required": [
                  "@vocab",
                  "hydra"
                ],
                "additionalProperties": true
              }
            ]
          },
          "@id": {
            "readOnly": true,
            "type": "string"
          },
          "@type": {
            "readOnly": true,
            "type": "string"
          },
          "id": {
            "readOnly": true,
            "type": "string",
            "format": "uuid"
          },
          "direction": {
            "enum": [
              "egress",
              "ingress"
            ],
            "description": "Trafic direction.",
            "type": "string"
          },
          "protocol": {
            "enum": [
              "tcp",
              "udp",
              "icmp",
              "any"
            ],
            "description": "Protocol.",
            "type": "string",
            "nullable": true
          },
          "ethertype": {
            "enum": [
              "ipv4",
              "ipv6"
            ],
            "description": "Internet protocol.",
            "type": "string",
            "nullable": true
          },
          "portMin": {
            "example": 1024,
            "description": "Firewall rule applies to a port range. this is the lower range.",
            "type": "integer",
            "nullable": true
          },
          "portMax": {
            "example": 12345,
            "description": "Firewall rule applies to a port range. this is the upper range.",
            "type": "integer",
            "nullable": true
          },
          "remote": {
            "example": "8.8.8.8",
            "description": "The remote IP prefix (CIDR notation) that is matched by this security group rule.",
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "direction"
        ]
      },
      "SecurityRule.jsonld-Write": {
        "type": "object",
        "description": "",
        "properties": {
          "@context": {
            "readOnly": true,
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "object",
                "properties": {
                  "@vocab": {
                    "type": "string"
                  },
                  "hydra": {
                    "type": "string",
                    "enum": [
                      "http://www.w3.org/ns/hydra/core#"
                    ]
                  }
                },
                "required": [
                  "@vocab",
                  "hydra"
                ],
                "additionalProperties": true
              }
            ]
          },
          "@id": {
            "readOnly": true,
            "type": "string"
          },
          "@type": {
            "readOnly": true,
            "type": "string"
          },
          "id": {
            "readOnly": true,
            "type": "string",
            "format": "uuid"
          },
          "group": {
            "type": "string",
            "format": "iri-reference",
            "nullable": true
          },
          "direction": {
            "enum": [
              "egress",
              "ingress"
            ],
            "description": "Trafic direction.",
            "type": "string"
          },
          "protocol": {
            "enum": [
              "tcp",
              "udp",
              "icmp",
              "any"
            ],
            "description": "Protocol.",
            "type": "string",
            "nullable": true
          },
          "ethertype": {
            "enum": [
              "ipv4",
              "ipv6"
            ],
            "description": "Internet protocol.",
            "type": "string",
            "nullable": true
          },
          "portMin": {
            "example": 1024,
            "description": "Firewall rule applies to a port range. this is the lower range.",
            "type": "integer",
            "nullable": true
          },
          "portMax": {
            "example": 12345,
            "description": "Firewall rule applies to a port range. this is the upper range.",
            "type": "integer",
            "nullable": true
          },
          "remote": {
            "example": "8.8.8.8",
            "description": "The remote IP prefix (CIDR notation) that is matched by this security group rule.",
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "direction"
        ]
      },
      "Server-Write": {
        "type": "object",
        "description": "",
        "required": [
          "project",
          "name",
          "flavor",
          "image"
        ],
        "properties": {
          "project": {
            "description": "Project UUID. See entity Project.",
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "securityGroups": {
            "description": "Security groups applied to this server.",
            "type": "array",
            "items": {
              "type": "string",
              "format": "iri-reference"
            }
          },
          "name": {
            "pattern": "^([a-z0-9][-a-z0-9]{0,62}[a-z0-9])$",
            "minLength": 2,
            "maxLength": 64,
            "example": "myserver",
            "description": "Server name, sanitized. Will be used in the future as DNS name :).",
            "type": "string"
          },
          "description": {
            "minLength": 1,
            "maxLength": 255,
            "example": "My beautiful server",
            "description": "Server name, human readable.",
            "type": "string",
            "nullable": true
          },
          "flavor": {
            "description": "See entity Flavor.",
            "type": "string",
            "format": "iri-reference"
          },
          "image": {
            "description": "See entity Image.",
            "type": "string",
            "format": "iri-reference"
          },
          "keypair": {
            "example": "6a2c1a71-0058-41e1-ba66-a5d1e3c4f89c",
            "description": "Keypair used to create this server. See entity Keypair.",
            "type": "string",
            "format": "uuid",
            "nullable": true
          }
        }
      },
      "Server-server.edit": {
        "type": "object",
        "description": "",
        "properties": {
          "description": {
            "minLength": 1,
            "maxLength": 255,
            "example": "My beautiful server",
            "description": "Server name, human readable.",
            "type": "string",
            "nullable": true
          },
          "status": {
            "enum": [
              "on",
              "off",
              "reset"
            ],
            "description": "Status is the desired state : it is deterministic,\nchangeable and indicates the state objective for the internal driver.",
            "default": "on",
            "example": "on",
            "type": "string"
          }
        }
      },
      "Server.ServerOutput-Read": {
        "type": "object",
        "description": "",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "project": {
            "description": "Project UUID. See entity Project.",
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "securityGroups": {
            "description": "Security groups applied to this server.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SecurityGroup-Read"
            }
          },
          "ips": {
            "description": "IPs associated to this server.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Ip.IpOutput-Read"
            }
          },
          "name": {
            "pattern": "^([a-z0-9][-a-z0-9]{0,62}[a-z0-9])$",
            "minLength": 2,
            "maxLength": 64,
            "example": "myserver",
            "description": "Server name, sanitized. Will be used in the future as DNS name :).",
            "type": "string"
          },
          "description": {
            "minLength": 1,
            "maxLength": 255,
            "example": "My beautiful server",
            "description": "Server name, human readable.",
            "type": "string"
          },
          "flavor": {
            "description": "See entity Flavor.",
            "type": "string",
            "format": "iri-reference"
          },
          "image": {
            "description": "See entity Image.",
            "type": "string",
            "format": "iri-reference",
            "nullable": true
          },
          "createdAt": {
            "description": "Server creation date.",
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "enum": [
              "on",
              "off",
              "reset"
            ],
            "description": "Status is the desired state : it is deterministic,\nchangeable and indicates the state objective for the internal driver.",
            "default": "on",
            "example": "on",
            "type": "string"
          },
          "state": {
            "enum": [
              "on",
              "off",
              "reset",
              "build",
              "error",
              "resize"
            ],
            "description": "This is the real state of the server.",
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "project",
          "name",
          "flavor",
          "image"
        ]
      },
      "Server.ServerOutput.jsonld-Read": {
        "type": "object",
        "description": "",
        "properties": {
          "@context": {
            "readOnly": true,
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "object",
                "properties": {
                  "@vocab": {
                    "type": "string"
                  },
                  "hydra": {
                    "type": "string",
                    "enum": [
                      "http://www.w3.org/ns/hydra/core#"
                    ]
                  }
                },
                "required": [
                  "@vocab",
                  "hydra"
                ],
                "additionalProperties": true
              }
            ]
          },
          "@id": {
            "readOnly": true,
            "type": "string"
          },
          "@type": {
            "readOnly": true,
            "type": "string"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "project": {
            "description": "Project UUID. See entity Project.",
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "securityGroups": {
            "description": "Security groups applied to this server.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SecurityGroup.jsonld-Read"
            }
          },
          "ips": {
            "description": "IPs associated to this server.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Ip.IpOutput.jsonld-Read"
            }
          },
          "name": {
            "pattern": "^([a-z0-9][-a-z0-9]{0,62}[a-z0-9])$",
            "minLength": 2,
            "maxLength": 64,
            "example": "myserver",
            "description": "Server name, sanitized. Will be used in the future as DNS name :).",
            "type": "string"
          },
          "description": {
            "minLength": 1,
            "maxLength": 255,
            "example": "My beautiful server",
            "description": "Server name, human readable.",
            "type": "string"
          },
          "flavor": {
            "description": "See entity Flavor.",
            "type": "string",
            "format": "iri-reference"
          },
          "image": {
            "description": "See entity Image.",
            "type": "string",
            "format": "iri-reference",
            "nullable": true
          },
          "createdAt": {
            "description": "Server creation date.",
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "enum": [
              "on",
              "off",
              "reset"
            ],
            "description": "Status is the desired state : it is deterministic,\nchangeable and indicates the state objective for the internal driver.",
            "default": "on",
            "example": "on",
            "type": "string"
          },
          "state": {
            "enum": [
              "on",
              "off",
              "reset",
              "build",
              "error",
              "resize"
            ],
            "description": "This is the real state of the server.",
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "project",
          "name",
          "flavor",
          "image"
        ]
      },
      "Server.jsonld-Write": {
        "type": "object",
        "description": "",
        "required": [
          "project",
          "name",
          "flavor",
          "image"
        ],
        "properties": {
          "@context": {
            "readOnly": true,
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "object",
                "properties": {
                  "@vocab": {
                    "type": "string"
                  },
                  "hydra": {
                    "type": "string",
                    "enum": [
                      "http://www.w3.org/ns/hydra/core#"
                    ]
                  }
                },
                "required": [
                  "@vocab",
                  "hydra"
                ],
                "additionalProperties": true
              }
            ]
          },
          "@id": {
            "readOnly": true,
            "type": "string"
          },
          "@type": {
            "readOnly": true,
            "type": "string"
          },
          "project": {
            "description": "Project UUID. See entity Project.",
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "securityGroups": {
            "description": "Security groups applied to this server.",
            "type": "array",
            "items": {
              "type": "string",
              "format": "iri-reference"
            }
          },
          "name": {
            "pattern": "^([a-z0-9][-a-z0-9]{0,62}[a-z0-9])$",
            "minLength": 2,
            "maxLength": 64,
            "example": "myserver",
            "description": "Server name, sanitized. Will be used in the future as DNS name :).",
            "type": "string"
          },
          "description": {
            "minLength": 1,
            "maxLength": 255,
            "example": "My beautiful server",
            "description": "Server name, human readable.",
            "type": "string",
            "nullable": true
          },
          "flavor": {
            "description": "See entity Flavor.",
            "type": "string",
            "format": "iri-reference"
          },
          "image": {
            "description": "See entity Image.",
            "type": "string",
            "format": "iri-reference"
          },
          "keypair": {
            "example": "6a2c1a71-0058-41e1-ba66-a5d1e3c4f89c",
            "description": "Keypair used to create this server. See entity Keypair.",
            "type": "string",
            "format": "uuid",
            "nullable": true
          }
        }
      },
      "BillingPeriod-Read": {
        "type": "object",
        "description": "",
        "required": [
          "customer",
          "startAt",
          "endAt",
          "amount",
          "state"
        ],
        "properties": {
          "customer": {
            "type": "string",
            "format": "iri-reference"
          },
          "invoice": {
            "nullable": true,
            "anyOf": [
              {
                "$ref": "#/components/schemas/Invoice-Read"
              }
            ]
          },
          "startAt": {
            "type": "string",
            "format": "date-time"
          },
          "endAt": {
            "type": "string",
            "format": "date-time"
          },
          "amount": {
            "example": 12.4,
            "type": "string",
            "nullable": true
          },
          "state": {
            "example": "pending",
            "type": "string",
            "enum": [
              "pending",
              "generated",
              "processed",
              "done"
            ]
          }
        }
      },
      "BillingPeriod-Write": {
        "type": "object",
        "description": "",
        "required": [
          "customer",
          "startAt",
          "endAt",
          "amount",
          "state"
        ],
        "properties": {
          "customer": {
            "type": "string",
            "format": "iri-reference"
          },
          "invoice": {
            "type": "string",
            "format": "iri-reference",
            "nullable": true
          },
          "startAt": {
            "type": "string",
            "format": "date-time"
          },
          "endAt": {
            "type": "string",
            "format": "date-time"
          },
          "amount": {
            "example": 12.4,
            "type": "string",
            "nullable": true
          },
          "state": {
            "example": "pending",
            "type": "string",
            "enum": [
              "pending",
              "generated",
              "processed",
              "done"
            ]
          }
        }
      },
      "BillingPeriod-billingperiod.edit": {
        "type": "object",
        "description": "",
        "properties": {
          "amount": {
            "example": 12.4,
            "type": "string",
            "nullable": true
          },
          "state": {
            "example": "pending",
            "type": "string",
            "enum": [
              "pending",
              "generated",
              "processed",
              "done"
            ]
          }
        }
      },
      "BillingPeriod.jsonld-Read": {
        "type": "object",
        "description": "",
        "required": [
          "customer",
          "startAt",
          "endAt",
          "amount",
          "state"
        ],
        "properties": {
          "@context": {
            "readOnly": true,
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "object",
                "properties": {
                  "@vocab": {
                    "type": "string"
                  },
                  "hydra": {
                    "type": "string",
                    "enum": [
                      "http://www.w3.org/ns/hydra/core#"
                    ]
                  }
                },
                "required": [
                  "@vocab",
                  "hydra"
                ],
                "additionalProperties": true
              }
            ]
          },
          "@id": {
            "readOnly": true,
            "type": "string"
          },
          "@type": {
            "readOnly": true,
            "type": "string"
          },
          "customer": {
            "type": "string",
            "format": "iri-reference"
          },
          "invoice": {
            "nullable": true,
            "anyOf": [
              {
                "$ref": "#/components/schemas/Invoice.jsonld-Read"
              }
            ]
          },
          "startAt": {
            "type": "string",
            "format": "date-time"
          },
          "endAt": {
            "type": "string",
            "format": "date-time"
          },
          "amount": {
            "example": 12.4,
            "type": "string",
            "nullable": true
          },
          "state": {
            "example": "pending",
            "type": "string",
            "enum": [
              "pending",
              "generated",
              "processed",
              "done"
            ]
          }
        }
      },
      "BillingPeriod.jsonld-Write": {
        "type": "object",
        "description": "",
        "required": [
          "customer",
          "startAt",
          "endAt",
          "amount",
          "state"
        ],
        "properties": {
          "@context": {
            "readOnly": true,
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "object",
                "properties": {
                  "@vocab": {
                    "type": "string"
                  },
                  "hydra": {
                    "type": "string",
                    "enum": [
                      "http://www.w3.org/ns/hydra/core#"
                    ]
                  }
                },
                "required": [
                  "@vocab",
                  "hydra"
                ],
                "additionalProperties": true
              }
            ]
          },
          "@id": {
            "readOnly": true,
            "type": "string"
          },
          "@type": {
            "readOnly": true,
            "type": "string"
          },
          "customer": {
            "type": "string",
            "format": "iri-reference"
          },
          "invoice": {
            "type": "string",
            "format": "iri-reference",
            "nullable": true
          },
          "startAt": {
            "type": "string",
            "format": "date-time"
          },
          "endAt": {
            "type": "string",
            "format": "date-time"
          },
          "amount": {
            "example": 12.4,
            "type": "string",
            "nullable": true
          },
          "state": {
            "example": "pending",
            "type": "string",
            "enum": [
              "pending",
              "generated",
              "processed",
              "done"
            ]
          }
        }
      },
      "Contract-Read": {
        "type": "object",
        "description": "Contract is just text displayed to a visitor.",
        "properties": {
          "id": {
            "readOnly": true,
            "type": "string",
            "format": "uuid"
          },
          "revision": {
            "example": 1.12,
            "description": "Contract version.",
            "type": "string"
          },
          "content": {
            "example": "A *markdown* content with **styles**",
            "description": "Contract content in markdown format.",
            "type": "string"
          },
          "createdAt": {
            "description": "Creation date.",
            "externalDocs": {
              "url": "http://schema.org/DateTime"
            },
            "type": "string",
            "format": "date-time"
          },
          "activeAt": {
            "description": "When the contract will be in effect.",
            "externalDocs": {
              "url": "http://schema.org/DateTime"
            },
            "type": "string",
            "format": "date-time"
          },
          "description": {
            "example": "Update with some typos fixes",
            "description": "A longer description.",
            "type": "string"
          }
        },
        "required": [
          "revision",
          "content",
          "activeAt",
          "description"
        ]
      },
      "Contract-Write": {
        "type": "object",
        "description": "Contract is just text displayed to a visitor.",
        "required": [
          "revision",
          "content",
          "activeAt",
          "description"
        ],
        "properties": {
          "revision": {
            "example": 1.12,
            "description": "Contract version.",
            "type": "string"
          },
          "content": {
            "example": "A *markdown* content with **styles**",
            "description": "Contract content in markdown format.",
            "type": "string"
          },
          "createdAt": {
            "description": "Creation date.",
            "externalDocs": {
              "url": "http://schema.org/DateTime"
            },
            "type": "string",
            "format": "date-time"
          },
          "activeAt": {
            "description": "When the contract will be in effect.",
            "externalDocs": {
              "url": "http://schema.org/DateTime"
            },
            "type": "string",
            "format": "date-time"
          },
          "description": {
            "example": "Update with some typos fixes",
            "description": "A longer description.",
            "type": "string"
          }
        }
      },
      "Contract.jsonld-Read": {
        "type": "object",
        "description": "Contract is just text displayed to a visitor.",
        "properties": {
          "@context": {
            "readOnly": true,
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "object",
                "properties": {
                  "@vocab": {
                    "type": "string"
                  },
                  "hydra": {
                    "type": "string",
                    "enum": [
                      "http://www.w3.org/ns/hydra/core#"
                    ]
                  }
                },
                "required": [
                  "@vocab",
                  "hydra"
                ],
                "additionalProperties": true
              }
            ]
          },
          "@id": {
            "readOnly": true,
            "type": "string"
          },
          "@type": {
            "readOnly": true,
            "type": "string"
          },
          "id": {
            "readOnly": true,
            "type": "string",
            "format": "uuid"
          },
          "revision": {
            "example": 1.12,
            "description": "Contract version.",
            "type": "string"
          },
          "content": {
            "example": "A *markdown* content with **styles**",
            "description": "Contract content in markdown format.",
            "type": "string"
          },
          "createdAt": {
            "description": "Creation date.",
            "externalDocs": {
              "url": "http://schema.org/DateTime"
            },
            "type": "string",
            "format": "date-time"
          },
          "activeAt": {
            "description": "When the contract will be in effect.",
            "externalDocs": {
              "url": "http://schema.org/DateTime"
            },
            "type": "string",
            "format": "date-time"
          },
          "description": {
            "example": "Update with some typos fixes",
            "description": "A longer description.",
            "type": "string"
          }
        },
        "required": [
          "revision",
          "content",
          "activeAt",
          "description"
        ]
      },
      "Contract.jsonld-Write": {
        "type": "object",
        "description": "Contract is just text displayed to a visitor.",
        "required": [
          "revision",
          "content",
          "activeAt",
          "description"
        ],
        "properties": {
          "@context": {
            "readOnly": true,
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "object",
                "properties": {
                  "@vocab": {
                    "type": "string"
                  },
                  "hydra": {
                    "type": "string",
                    "enum": [
                      "http://www.w3.org/ns/hydra/core#"
                    ]
                  }
                },
                "required": [
                  "@vocab",
                  "hydra"
                ],
                "additionalProperties": true
              }
            ]
          },
          "@id": {
            "readOnly": true,
            "type": "string"
          },
          "@type": {
            "readOnly": true,
            "type": "string"
          },
          "revision": {
            "example": 1.12,
            "description": "Contract version.",
            "type": "string"
          },
          "content": {
            "example": "A *markdown* content with **styles**",
            "description": "Contract content in markdown format.",
            "type": "string"
          },
          "createdAt": {
            "description": "Creation date.",
            "externalDocs": {
              "url": "http://schema.org/DateTime"
            },
            "type": "string",
            "format": "date-time"
          },
          "activeAt": {
            "description": "When the contract will be in effect.",
            "externalDocs": {
              "url": "http://schema.org/DateTime"
            },
            "type": "string",
            "format": "date-time"
          },
          "description": {
            "example": "Update with some typos fixes",
            "description": "A longer description.",
            "type": "string"
          }
        }
      },
      "Coupon-Read": {
        "type": "object",
        "description": "",
        "required": [
          "name",
          "value",
          "validUntil"
        ],
        "properties": {
          "name": {
            "minLength": 4,
            "maxLength": 32,
            "pattern": "^(.*\\b[A-Z0-9]+\\b.*)$",
            "example": "ABCDEFG",
            "description": "Coupon name.",
            "type": "string"
          },
          "value": {
            "example": 50,
            "type": "integer"
          },
          "currency": {
            "externalDocs": {
              "url": "http://schema.org/priceCurrency"
            },
            "default": "EUR",
            "example": "EUR",
            "type": "string"
          },
          "validUntil": {
            "description": "If set, the coupon must be used before this date.",
            "type": "string",
            "format": "date-time"
          },
          "isUsed": {
            "example": false,
            "readOnly": true,
            "description": "Whether this coupon has already been used.",
            "type": "boolean"
          }
        }
      },
      "Coupon-Write": {
        "type": "object",
        "description": ""
      },
      "Coupon.jsonld-Read": {
        "type": "object",
        "description": "",
        "required": [
          "name",
          "value",
          "validUntil"
        ],
        "properties": {
          "@context": {
            "readOnly": true,
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "object",
                "properties": {
                  "@vocab": {
                    "type": "string"
                  },
                  "hydra": {
                    "type": "string",
                    "enum": [
                      "http://www.w3.org/ns/hydra/core#"
                    ]
                  }
                },
                "required": [
                  "@vocab",
                  "hydra"
                ],
                "additionalProperties": true
              }
            ]
          },
          "@id": {
            "readOnly": true,
            "type": "string"
          },
          "@type": {
            "readOnly": true,
            "type": "string"
          },
          "name": {
            "minLength": 4,
            "maxLength": 32,
            "pattern": "^(.*\\b[A-Z0-9]+\\b.*)$",
            "example": "ABCDEFG",
            "description": "Coupon name.",
            "type": "string"
          },
          "value": {
            "example": 50,
            "type": "integer"
          },
          "currency": {
            "externalDocs": {
              "url": "http://schema.org/priceCurrency"
            },
            "default": "EUR",
            "example": "EUR",
            "type": "string"
          },
          "validUntil": {
            "description": "If set, the coupon must be used before this date.",
            "type": "string",
            "format": "date-time"
          },
          "isUsed": {
            "example": false,
            "readOnly": true,
            "description": "Whether this coupon has already been used.",
            "type": "boolean"
          }
        }
      },
      "Coupon.jsonld-Write": {
        "type": "object",
        "description": "",
        "properties": {
          "@context": {
            "readOnly": true,
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "object",
                "properties": {
                  "@vocab": {
                    "type": "string"
                  },
                  "hydra": {
                    "type": "string",
                    "enum": [
                      "http://www.w3.org/ns/hydra/core#"
                    ]
                  }
                },
                "required": [
                  "@vocab",
                  "hydra"
                ],
                "additionalProperties": true
              }
            ]
          },
          "@id": {
            "readOnly": true,
            "type": "string"
          },
          "@type": {
            "readOnly": true,
            "type": "string"
          }
        }
      },
      "Customer-Read": {
        "type": "object",
        "description": "Customer entity\nNOTE: to validate subentities, to not forget to add \"Valid\" constraint.",
        "properties": {
          "id": {
            "readOnly": true,
            "type": "string",
            "format": "uuid"
          },
          "state": {
            "readOnly": true,
            "enum": [
              "new",
              "active",
              "no_payment_method",
              "active_will_expire",
              "error"
            ],
            "description": "Customer state represents a summary of its payment methods.",
            "type": "string",
            "example": "new"
          },
          "address": {
            "description": "Customer address.",
            "$ref": "#/components/schemas/CustomerAddress-Read"
          },
          "vat": {
            "description": "Customer VAT specs.",
            "$ref": "#/components/schemas/CustomerVat-Read"
          },
          "email": {
            "example": "test@example.com",
            "description": "Default email associated to this customer. Any issue with invoicing will\nbe sent to this email.",
            "type": "string",
            "nullable": true
          },
          "name": {
            "example": "AcmeCORP SARL",
            "description": "Company name. Used on invoices.",
            "type": "string",
            "nullable": true
          },
          "phone": {
            "example": 3312345678,
            "description": "Company phone number.",
            "type": "string",
            "nullable": true
          },
          "currency": {
            "example": "eur",
            "description": "Customer currency.",
            "default": "eur",
            "type": "string",
            "nullable": true
          },
          "delinquent": {
            "description": "If this customer has debts.",
            "type": "boolean",
            "nullable": true
          },
          "balance": {
            "example": -50,
            "description": "Customer balance. If negative, it means customer has a credit (like a coupon).",
            "type": "number",
            "nullable": true
          },
          "defaultPaymentMethod": {
            "nullable": true,
            "anyOf": [
              {
                "$ref": "#/components/schemas/PaymentMethod-Read"
              }
            ]
          },
          "customerContracts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomerContract-Read"
            }
          },
          "vatRate": {
            "description": "vatRate is forced to 20% because we do not handle different VAT rates so far.",
            "default": 20,
            "example": 20,
            "type": "number"
          }
        },
        "required": [
          "state"
        ]
      },
      "Customer-Write": {
        "type": "object",
        "description": "Customer entity\nNOTE: to validate subentities, to not forget to add \"Valid\" constraint.",
        "required": [
          "address",
          "email",
          "name",
          "organization"
        ],
        "properties": {
          "address": {
            "description": "Customer address.",
            "$ref": "#/components/schemas/CustomerAddress-Write"
          },
          "vat": {
            "description": "Customer VAT specs.",
            "$ref": "#/components/schemas/CustomerVat-Write"
          },
          "email": {
            "format": "email",
            "example": "test@example.com",
            "description": "Default email associated to this customer. Any issue with invoicing will\nbe sent to this email.",
            "externalDocs": {
              "url": "http://schema.org/email"
            },
            "type": "string",
            "nullable": true
          },
          "name": {
            "minLength": 1,
            "maxLength": 255,
            "example": "AcmeCORP SARL",
            "description": "Company name. Used on invoices.",
            "type": "string",
            "nullable": true
          },
          "phone": {
            "example": 3312345678,
            "description": "Company phone number.",
            "type": "string",
            "nullable": true
          },
          "currency": {
            "example": "eur",
            "description": "Customer currency.",
            "default": "eur",
            "type": "string",
            "nullable": true
          },
          "delinquent": {
            "description": "If this customer has debts.",
            "type": "boolean",
            "nullable": true
          },
          "balance": {
            "example": -50,
            "description": "Customer balance. If negative, it means customer has a credit (like a coupon).",
            "type": "number",
            "nullable": true
          },
          "organization": {
            "format": "uuid",
            "description": "Organization this customer refers to.",
            "externalDocs": {
              "url": "http://schema.org/identifier"
            },
            "type": "string"
          },
          "coupon": {
            "minLength": 1,
            "maxLength": 255,
            "description": "Coupon name, if available.",
            "type": "string",
            "nullable": true
          },
          "vatRate": {
            "description": "vatRate is forced to 20% because we do not handle different VAT rates so far.",
            "default": 20,
            "example": 20,
            "type": "number"
          }
        }
      },
      "Customer-customer.edit": {
        "type": "object",
        "description": "Customer entity\nNOTE: to validate subentities, to not forget to add \"Valid\" constraint.",
        "properties": {
          "address": {
            "description": "Customer address.",
            "$ref": "#/components/schemas/CustomerAddress-customer.edit"
          },
          "vat": {
            "description": "Customer VAT specs.",
            "$ref": "#/components/schemas/CustomerVat-customer.edit"
          },
          "email": {
            "format": "email",
            "example": "test@example.com",
            "description": "Default email associated to this customer. Any issue with invoicing will\nbe sent to this email.",
            "externalDocs": {
              "url": "http://schema.org/email"
            },
            "type": "string",
            "nullable": true
          },
          "phone": {
            "example": 3312345678,
            "description": "Company phone number.",
            "type": "string",
            "nullable": true
          },
          "defaultPaymentMethod": {
            "type": "string",
            "format": "iri-reference",
            "nullable": true
          }
        }
      },
      "Customer.jsonld-Read": {
        "type": "object",
        "description": "Customer entity\nNOTE: to validate subentities, to not forget to add \"Valid\" constraint.",
        "properties": {
          "@context": {
            "readOnly": true,
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "object",
                "properties": {
                  "@vocab": {
                    "type": "string"
                  },
                  "hydra": {
                    "type": "string",
                    "enum": [
                      "http://www.w3.org/ns/hydra/core#"
                    ]
                  }
                },
                "required": [
                  "@vocab",
                  "hydra"
                ],
                "additionalProperties": true
              }
            ]
          },
          "@id": {
            "readOnly": true,
            "type": "string"
          },
          "@type": {
            "readOnly": true,
            "type": "string"
          },
          "id": {
            "readOnly": true,
            "type": "string",
            "format": "uuid"
          },
          "state": {
            "readOnly": true,
            "enum": [
              "new",
              "active",
              "no_payment_method",
              "active_will_expire",
              "error"
            ],
            "description": "Customer state represents a summary of its payment methods.",
            "type": "string",
            "example": "new"
          },
          "address": {
            "description": "Customer address.",
            "$ref": "#/components/schemas/CustomerAddress.jsonld-Read"
          },
          "vat": {
            "description": "Customer VAT specs.",
            "$ref": "#/components/schemas/CustomerVat.jsonld-Read"
          },
          "email": {
            "example": "test@example.com",
            "description": "Default email associated to this customer. Any issue with invoicing will\nbe sent to this email.",
            "type": "string",
            "nullable": true
          },
          "name": {
            "example": "AcmeCORP SARL",
            "description": "Company name. Used on invoices.",
            "type": "string",
            "nullable": true
          },
          "phone": {
            "example": 3312345678,
            "description": "Company phone number.",
            "type": "string",
            "nullable": true
          },
          "currency": {
            "example": "eur",
            "description": "Customer currency.",
            "default": "eur",
            "type": "string",
            "nullable": true
          },
          "delinquent": {
            "description": "If this customer has debts.",
            "type": "boolean",
            "nullable": true
          },
          "balance": {
            "example": -50,
            "description": "Customer balance. If negative, it means customer has a credit (like a coupon).",
            "type": "number",
            "nullable": true
          },
          "defaultPaymentMethod": {
            "nullable": true,
            "anyOf": [
              {
                "$ref": "#/components/schemas/PaymentMethod.jsonld-Read"
              }
            ]
          },
          "customerContracts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomerContract.jsonld-Read"
            }
          },
          "vatRate": {
            "description": "vatRate is forced to 20% because we do not handle different VAT rates so far.",
            "default": 20,
            "example": 20,
            "type": "number"
          }
        },
        "required": [
          "state"
        ]
      },
      "Customer.jsonld-Write": {
        "type": "object",
        "description": "Customer entity\nNOTE: to validate subentities, to not forget to add \"Valid\" constraint.",
        "required": [
          "address",
          "email",
          "name",
          "organization"
        ],
        "properties": {
          "@context": {
            "readOnly": true,
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "object",
                "properties": {
                  "@vocab": {
                    "type": "string"
                  },
                  "hydra": {
                    "type": "string",
                    "enum": [
                      "http://www.w3.org/ns/hydra/core#"
                    ]
                  }
                },
                "required": [
                  "@vocab",
                  "hydra"
                ],
                "additionalProperties": true
              }
            ]
          },
          "@id": {
            "readOnly": true,
            "type": "string"
          },
          "@type": {
            "readOnly": true,
            "type": "string"
          },
          "address": {
            "description": "Customer address.",
            "$ref": "#/components/schemas/CustomerAddress.jsonld-Write"
          },
          "vat": {
            "description": "Customer VAT specs.",
            "$ref": "#/components/schemas/CustomerVat.jsonld-Write"
          },
          "email": {
            "format": "email",
            "example": "test@example.com",
            "description": "Default email associated to this customer. Any issue with invoicing will\nbe sent to this email.",
            "externalDocs": {
              "url": "http://schema.org/email"
            },
            "type": "string",
            "nullable": true
          },
          "name": {
            "minLength": 1,
            "maxLength": 255,
            "example": "AcmeCORP SARL",
            "description": "Company name. Used on invoices.",
            "type": "string",
            "nullable": true
          },
          "phone": {
            "example": 3312345678,
            "description": "Company phone number.",
            "type": "string",
            "nullable": true
          },
          "currency": {
            "example": "eur",
            "description": "Customer currency.",
            "default": "eur",
            "type": "string",
            "nullable": true
          },
          "delinquent": {
            "description": "If this customer has debts.",
            "type": "boolean",
            "nullable": true
          },
          "balance": {
            "example": -50,
            "description": "Customer balance. If negative, it means customer has a credit (like a coupon).",
            "type": "number",
            "nullable": true
          },
          "organization": {
            "format": "uuid",
            "description": "Organization this customer refers to.",
            "externalDocs": {
              "url": "http://schema.org/identifier"
            },
            "type": "string"
          },
          "coupon": {
            "minLength": 1,
            "maxLength": 255,
            "description": "Coupon name, if available.",
            "type": "string",
            "nullable": true
          },
          "vatRate": {
            "description": "vatRate is forced to 20% because we do not handle different VAT rates so far.",
            "default": 20,
            "example": 20,
            "type": "number"
          }
        }
      },
      "CustomerAddress-Read": {
        "type": "object",
        "required": [
          "city",
          "country",
          "line1",
          "postalCode",
          "state"
        ],
        "properties": {
          "city": {
            "minLength": 1,
            "maxLength": 255,
            "example": "Lyon",
            "type": "string"
          },
          "country": {
            "example": "FR",
            "description": "Country is a two letter code (ISO-3166 alpha-2).",
            "type": "string"
          },
          "line1": {
            "minLength": 1,
            "maxLength": 255,
            "example": "Rue du Parc",
            "description": "First line of address.",
            "type": "string"
          },
          "line2": {
            "minLength": 1,
            "maxLength": 255,
            "description": "Second line of address.",
            "type": "string"
          },
          "postalCode": {
            "minLength": 1,
            "maxLength": 32,
            "example": 69002,
            "type": "string"
          },
          "state": {
            "example": "Hauts-de-France",
            "description": "State, if any.",
            "type": "string"
          }
        }
      },
      "CustomerAddress-Write": {
        "type": "object",
        "required": [
          "city",
          "country",
          "line1",
          "postalCode",
          "state"
        ],
        "properties": {
          "city": {
            "minLength": 1,
            "maxLength": 255,
            "example": "Lyon",
            "type": "string"
          },
          "country": {
            "example": "FR",
            "description": "Country is a two letter code (ISO-3166 alpha-2).",
            "type": "string"
          },
          "line1": {
            "minLength": 1,
            "maxLength": 255,
            "example": "Rue du Parc",
            "description": "First line of address.",
            "type": "string"
          },
          "line2": {
            "minLength": 1,
            "maxLength": 255,
            "description": "Second line of address.",
            "type": "string"
          },
          "postalCode": {
            "minLength": 1,
            "maxLength": 32,
            "example": 69002,
            "type": "string"
          },
          "state": {
            "example": "Hauts-de-France",
            "description": "State, if any.",
            "type": "string"
          }
        }
      },
      "CustomerAddress-customer.edit": {
        "type": "object",
        "required": [
          "city",
          "country",
          "line1",
          "postalCode",
          "state"
        ],
        "properties": {
          "city": {
            "minLength": 1,
            "maxLength": 255,
            "example": "Lyon",
            "type": "string"
          },
          "country": {
            "example": "FR",
            "description": "Country is a two letter code (ISO-3166 alpha-2).",
            "type": "string"
          },
          "line1": {
            "minLength": 1,
            "maxLength": 255,
            "example": "Rue du Parc",
            "description": "First line of address.",
            "type": "string"
          },
          "line2": {
            "minLength": 1,
            "maxLength": 255,
            "description": "Second line of address.",
            "type": "string"
          },
          "postalCode": {
            "minLength": 1,
            "maxLength": 32,
            "example": 69002,
            "type": "string"
          },
          "state": {
            "example": "Hauts-de-France",
            "description": "State, if any.",
            "type": "string"
          }
        }
      },
      "CustomerAddress.jsonld-Read": {
        "type": "object",
        "required": [
          "city",
          "country",
          "line1",
          "postalCode",
          "state"
        ],
        "properties": {
          "@context": {
            "readOnly": true,
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "object",
                "properties": {
                  "@vocab": {
                    "type": "string"
                  },
                  "hydra": {
                    "type": "string",
                    "enum": [
                      "http://www.w3.org/ns/hydra/core#"
                    ]
                  }
                },
                "required": [
                  "@vocab",
                  "hydra"
                ],
                "additionalProperties": true
              }
            ]
          },
          "@id": {
            "readOnly": true,
            "type": "string"
          },
          "@type": {
            "readOnly": true,
            "type": "string"
          },
          "city": {
            "minLength": 1,
            "maxLength": 255,
            "example": "Lyon",
            "type": "string"
          },
          "country": {
            "example": "FR",
            "description": "Country is a two letter code (ISO-3166 alpha-2).",
            "type": "string"
          },
          "line1": {
            "minLength": 1,
            "maxLength": 255,
            "example": "Rue du Parc",
            "description": "First line of address.",
            "type": "string"
          },
          "line2": {
            "minLength": 1,
            "maxLength": 255,
            "description": "Second line of address.",
            "type": "string"
          },
          "postalCode": {
            "minLength": 1,
            "maxLength": 32,
            "example": 69002,
            "type": "string"
          },
          "state": {
            "example": "Hauts-de-France",
            "description": "State, if any.",
            "type": "string"
          }
        }
      },
      "CustomerAddress.jsonld-Write": {
        "type": "object",
        "required": [
          "city",
          "country",
          "line1",
          "postalCode",
          "state"
        ],
        "properties": {
          "@context": {
            "readOnly": true,
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "object",
                "properties": {
                  "@vocab": {
                    "type": "string"
                  },
                  "hydra": {
                    "type": "string",
                    "enum": [
                      "http://www.w3.org/ns/hydra/core#"
                    ]
                  }
                },
                "required": [
                  "@vocab",
                  "hydra"
                ],
                "additionalProperties": true
              }
            ]
          },
          "@id": {
            "readOnly": true,
            "type": "string"
          },
          "@type": {
            "readOnly": true,
            "type": "string"
          },
          "city": {
            "minLength": 1,
            "maxLength": 255,
            "example": "Lyon",
            "type": "string"
          },
          "country": {
            "example": "FR",
            "description": "Country is a two letter code (ISO-3166 alpha-2).",
            "type": "string"
          },
          "line1": {
            "minLength": 1,
            "maxLength": 255,
            "example": "Rue du Parc",
            "description": "First line of address.",
            "type": "string"
          },
          "line2": {
            "minLength": 1,
            "maxLength": 255,
            "description": "Second line of address.",
            "type": "string"
          },
          "postalCode": {
            "minLength": 1,
            "maxLength": 32,
            "example": 69002,
            "type": "string"
          },
          "state": {
            "example": "Hauts-de-France",
            "description": "State, if any.",
            "type": "string"
          }
        }
      },
      "CustomerContract-Read": {
        "type": "object",
        "properties": {
          "contract": {
            "type": "string",
            "format": "iri-reference"
          },
          "acceptedAt": {
            "description": "When the contract was signed.",
            "type": "string",
            "format": "date-time"
          },
          "acceptedBy": {
            "description": "Who signed the contract.",
            "type": "string",
            "format": "uuid",
            "nullable": true
          }
        }
      },
      "CustomerContract.jsonld-Read": {
        "type": "object",
        "properties": {
          "@context": {
            "readOnly": true,
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "object",
                "properties": {
                  "@vocab": {
                    "type": "string"
                  },
                  "hydra": {
                    "type": "string",
                    "enum": [
                      "http://www.w3.org/ns/hydra/core#"
                    ]
                  }
                },
                "required": [
                  "@vocab",
                  "hydra"
                ],
                "additionalProperties": true
              }
            ]
          },
          "@id": {
            "readOnly": true,
            "type": "string"
          },
          "@type": {
            "readOnly": true,
            "type": "string"
          },
          "contract": {
            "type": "string",
            "format": "iri-reference"
          },
          "acceptedAt": {
            "description": "When the contract was signed.",
            "type": "string",
            "format": "date-time"
          },
          "acceptedBy": {
            "description": "Who signed the contract.",
            "type": "string",
            "format": "uuid",
            "nullable": true
          }
        }
      },
      "CustomerVat-Read": {
        "type": "object",
        "properties": {
          "value": {
            "minLength": 1,
            "maxLength": 20,
            "example": "FR123456789",
            "description": "VAT number.",
            "type": "string",
            "nullable": true
          },
          "country": {
            "example": "FR",
            "description": "VAT country of origin.",
            "type": "string",
            "nullable": true
          },
          "type": {
            "example": "eu_vat",
            "description": "VAT type. We only handle 'eu_vat' for now.",
            "default": "eu_vat",
            "type": "string"
          },
          "verified": {
            "description": "If the VAT number has been successfully verified.",
            "type": "boolean",
            "nullable": true
          }
        }
      },
      "CustomerVat-Write": {
        "type": "object",
        "properties": {
          "value": {
            "minLength": 1,
            "maxLength": 20,
            "example": "FR123456789",
            "description": "VAT number.",
            "type": "string",
            "nullable": true
          }
        }
      },
      "CustomerVat-customer.edit": {
        "type": "object",
        "properties": {
          "value": {
            "minLength": 1,
            "maxLength": 20,
            "example": "FR123456789",
            "description": "VAT number.",
            "type": "string",
            "nullable": true
          }
        }
      },
      "CustomerVat.jsonld-Read": {
        "type": "object",
        "properties": {
          "@context": {
            "readOnly": true,
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "object",
                "properties": {
                  "@vocab": {
                    "type": "string"
                  },
                  "hydra": {
                    "type": "string",
                    "enum": [
                      "http://www.w3.org/ns/hydra/core#"
                    ]
                  }
                },
                "required": [
                  "@vocab",
                  "hydra"
                ],
                "additionalProperties": true
              }
            ]
          },
          "@id": {
            "readOnly": true,
            "type": "string"
          },
          "@type": {
            "readOnly": true,
            "type": "string"
          },
          "value": {
            "minLength": 1,
            "maxLength": 20,
            "example": "FR123456789",
            "description": "VAT number.",
            "type": "string",
            "nullable": true
          },
          "country": {
            "example": "FR",
            "description": "VAT country of origin.",
            "type": "string",
            "nullable": true
          },
          "type": {
            "example": "eu_vat",
            "description": "VAT type. We only handle 'eu_vat' for now.",
            "default": "eu_vat",
            "type": "string"
          },
          "verified": {
            "description": "If the VAT number has been successfully verified.",
            "type": "boolean",
            "nullable": true
          }
        }
      },
      "CustomerVat.jsonld-Write": {
        "type": "object",
        "properties": {
          "@context": {
            "readOnly": true,
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "object",
                "properties": {
                  "@vocab": {
                    "type": "string"
                  },
                  "hydra": {
                    "type": "string",
                    "enum": [
                      "http://www.w3.org/ns/hydra/core#"
                    ]
                  }
                },
                "required": [
                  "@vocab",
                  "hydra"
                ],
                "additionalProperties": true
              }
            ]
          },
          "@id": {
            "readOnly": true,
            "type": "string"
          },
          "@type": {
            "readOnly": true,
            "type": "string"
          },
          "value": {
            "minLength": 1,
            "maxLength": 20,
            "example": "FR123456789",
            "description": "VAT number.",
            "type": "string",
            "nullable": true
          }
        }
      },
      "Invoice-Read": {
        "type": "object",
        "description": "Most of the fields are virtual and hydrated from Stripe.",
        "properties": {
          "status": {
            "example": "done",
            "type": "string",
            "nullable": true
          }
        }
      },
      "Invoice.InvoiceInput-Write": {
        "type": "object",
        "description": "Most of the fields are virtual and hydrated from Stripe."
      },
      "Invoice.InvoiceInput.jsonld-Write": {
        "type": "object",
        "description": "Most of the fields are virtual and hydrated from Stripe.",
        "properties": {
          "@context": {
            "readOnly": true,
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "object",
                "properties": {
                  "@vocab": {
                    "type": "string"
                  },
                  "hydra": {
                    "type": "string",
                    "enum": [
                      "http://www.w3.org/ns/hydra/core#"
                    ]
                  }
                },
                "required": [
                  "@vocab",
                  "hydra"
                ],
                "additionalProperties": true
              }
            ]
          },
          "@id": {
            "readOnly": true,
            "type": "string"
          },
          "@type": {
            "readOnly": true,
            "type": "string"
          }
        }
      },
      "Invoice.jsonld-Read": {
        "type": "object",
        "description": "Most of the fields are virtual and hydrated from Stripe.",
        "properties": {
          "@context": {
            "readOnly": true,
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "object",
                "properties": {
                  "@vocab": {
                    "type": "string"
                  },
                  "hydra": {
                    "type": "string",
                    "enum": [
                      "http://www.w3.org/ns/hydra/core#"
                    ]
                  }
                },
                "required": [
                  "@vocab",
                  "hydra"
                ],
                "additionalProperties": true
              }
            ]
          },
          "@id": {
            "readOnly": true,
            "type": "string"
          },
          "@type": {
            "readOnly": true,
            "type": "string"
          },
          "status": {
            "example": "done",
            "type": "string",
            "nullable": true
          }
        }
      },
      "PaymentMethod-Read": {
        "type": "object",
        "description": "",
        "properties": {
          "id": {
            "readOnly": true,
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "PaymentMethod-Write": {
        "type": "object",
        "description": "",
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "example": "card",
            "description": "PM Type.",
            "type": "string",
            "enum": [
              "card",
              "sepaDebit",
              null
            ],
            "nullable": true
          }
        }
      },
      "PaymentMethod-paymentmethod.edit": {
        "type": "object",
        "description": "",
        "properties": {
          "customer": {
            "type": "string",
            "format": "iri-reference",
            "nullable": true
          }
        }
      },
      "PaymentMethod-paymentmethod.read": {
        "type": "object",
        "description": "",
        "properties": {
          "id": {
            "readOnly": true,
            "type": "string",
            "format": "uuid"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "card": {
            "description": "Details if PM is a credit card.",
            "nullable": true,
            "anyOf": [
              {
                "$ref": "#/components/schemas/PaymentMethodCard-paymentmethod.read"
              }
            ]
          },
          "sepaDebit": {
            "description": "Details if PM is a SEPA debit.",
            "nullable": true,
            "anyOf": [
              {
                "$ref": "#/components/schemas/PaymentMethodSepaDebit-paymentmethod.read"
              }
            ]
          },
          "type": {
            "example": "card",
            "description": "PM Type.",
            "type": "string",
            "enum": [
              "card",
              "sepaDebit",
              null
            ],
            "nullable": true
          },
          "clientSecret": {
            "description": "clientSecret if PaymentMethod is still a setupIntent.",
            "type": "string",
            "nullable": true
          },
          "state": {
            "description": "calculate state based on fields. For setupIntent, return Stripe status.",
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "type"
        ]
      },
      "PaymentMethod.jsonld-Read": {
        "type": "object",
        "description": "",
        "properties": {
          "@context": {
            "readOnly": true,
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "object",
                "properties": {
                  "@vocab": {
                    "type": "string"
                  },
                  "hydra": {
                    "type": "string",
                    "enum": [
                      "http://www.w3.org/ns/hydra/core#"
                    ]
                  }
                },
                "required": [
                  "@vocab",
                  "hydra"
                ],
                "additionalProperties": true
              }
            ]
          },
          "@id": {
            "readOnly": true,
            "type": "string"
          },
          "@type": {
            "readOnly": true,
            "type": "string"
          },
          "id": {
            "readOnly": true,
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "PaymentMethod.jsonld-Write": {
        "type": "object",
        "description": "",
        "required": [
          "type"
        ],
        "properties": {
          "@context": {
            "readOnly": true,
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "object",
                "properties": {
                  "@vocab": {
                    "type": "string"
                  },
                  "hydra": {
                    "type": "string",
                    "enum": [
                      "http://www.w3.org/ns/hydra/core#"
                    ]
                  }
                },
                "required": [
                  "@vocab",
                  "hydra"
                ],
                "additionalProperties": true
              }
            ]
          },
          "@id": {
            "readOnly": true,
            "type": "string"
          },
          "@type": {
            "readOnly": true,
            "type": "string"
          },
          "type": {
            "example": "card",
            "description": "PM Type.",
            "type": "string",
            "enum": [
              "card",
              "sepaDebit",
              null
            ],
            "nullable": true
          }
        }
      },
      "PaymentMethod.jsonld-paymentmethod.read": {
        "type": "object",
        "description": "",
        "properties": {
          "@id": {
            "readOnly": true,
            "type": "string"
          },
          "@type": {
            "readOnly": true,
            "type": "string"
          },
          "id": {
            "readOnly": true,
            "type": "string",
            "format": "uuid"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "card": {
            "description": "Details if PM is a credit card.",
            "nullable": true,
            "anyOf": [
              {
                "$ref": "#/components/schemas/PaymentMethodCard.jsonld-paymentmethod.read"
              }
            ]
          },
          "sepaDebit": {
            "description": "Details if PM is a SEPA debit.",
            "nullable": true,
            "anyOf": [
              {
                "$ref": "#/components/schemas/PaymentMethodSepaDebit.jsonld-paymentmethod.read"
              }
            ]
          },
          "type": {
            "example": "card",
            "description": "PM Type.",
            "type": "string",
            "enum": [
              "card",
              "sepaDebit",
              null
            ],
            "nullable": true
          },
          "clientSecret": {
            "description": "clientSecret if PaymentMethod is still a setupIntent.",
            "type": "string",
            "nullable": true
          },
          "state": {
            "description": "calculate state based on fields. For setupIntent, return Stripe status.",
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "type"
        ]
      },
      "PaymentMethodCard-paymentmethod.read": {
        "type": "object",
        "properties": {
          "brand": {
            "example": "mastercard",
            "description": "Brand.",
            "type": "string",
            "nullable": true
          },
          "country": {
            "example": "FR",
            "description": "Country of origin.",
            "type": "string",
            "nullable": true
          },
          "name": {
            "example": "JEAN DUPONT",
            "description": "Name on credit card.",
            "type": "string",
            "nullable": true
          },
          "cvcCheck": {
            "description": "Whether CVC was checked.",
            "type": "boolean"
          },
          "expMonth": {
            "example": 11,
            "description": "Expiration month.",
            "type": "integer"
          },
          "expYear": {
            "example": 2022,
            "description": "Expiration year (4 digits).",
            "type": "integer"
          },
          "last4": {
            "example": 1234,
            "description": "Last 4 digits.",
            "type": "string"
          },
          "fingerprint": {
            "example": "eLYCmjqOqtwGEuU8",
            "description": "Credit card fingerprint (used to check for duplicates).",
            "type": "string"
          }
        }
      },
      "PaymentMethodCard.jsonld-paymentmethod.read": {
        "type": "object",
        "properties": {
          "@context": {
            "readOnly": true,
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "object",
                "properties": {
                  "@vocab": {
                    "type": "string"
                  },
                  "hydra": {
                    "type": "string",
                    "enum": [
                      "http://www.w3.org/ns/hydra/core#"
                    ]
                  }
                },
                "required": [
                  "@vocab",
                  "hydra"
                ],
                "additionalProperties": true
              }
            ]
          },
          "@id": {
            "readOnly": true,
            "type": "string"
          },
          "@type": {
            "readOnly": true,
            "type": "string"
          },
          "brand": {
            "example": "mastercard",
            "description": "Brand.",
            "type": "string",
            "nullable": true
          },
          "country": {
            "example": "FR",
            "description": "Country of origin.",
            "type": "string",
            "nullable": true
          },
          "name": {
            "example": "JEAN DUPONT",
            "description": "Name on credit card.",
            "type": "string",
            "nullable": true
          },
          "cvcCheck": {
            "description": "Whether CVC was checked.",
            "type": "boolean"
          },
          "expMonth": {
            "example": 11,
            "description": "Expiration month.",
            "type": "integer"
          },
          "expYear": {
            "example": 2022,
            "description": "Expiration year (4 digits).",
            "type": "integer"
          },
          "last4": {
            "example": 1234,
            "description": "Last 4 digits.",
            "type": "string"
          },
          "fingerprint": {
            "example": "eLYCmjqOqtwGEuU8",
            "description": "Credit card fingerprint (used to check for duplicates).",
            "type": "string"
          }
        }
      },
      "PaymentMethodSepaDebit-paymentmethod.read": {
        "type": "object",
        "properties": {
          "bankCode": {
            "description": "Bank.",
            "type": "string"
          },
          "branchCode": {
            "description": "Branch.",
            "type": "string"
          },
          "country": {
            "description": "Country.",
            "type": "string"
          },
          "fingerprint": {
            "description": "Fingerprint.",
            "type": "string"
          },
          "last4": {
            "description": "Last 4 digits of SEPA.",
            "type": "string"
          }
        }
      },
      "PaymentMethodSepaDebit.jsonld-paymentmethod.read": {
        "type": "object",
        "properties": {
          "@context": {
            "readOnly": true,
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "object",
                "properties": {
                  "@vocab": {
                    "type": "string"
                  },
                  "hydra": {
                    "type": "string",
                    "enum": [
                      "http://www.w3.org/ns/hydra/core#"
                    ]
                  }
                },
                "required": [
                  "@vocab",
                  "hydra"
                ],
                "additionalProperties": true
              }
            ]
          },
          "@id": {
            "readOnly": true,
            "type": "string"
          },
          "@type": {
            "readOnly": true,
            "type": "string"
          },
          "bankCode": {
            "description": "Bank.",
            "type": "string"
          },
          "branchCode": {
            "description": "Branch.",
            "type": "string"
          },
          "country": {
            "description": "Country.",
            "type": "string"
          },
          "fingerprint": {
            "description": "Fingerprint.",
            "type": "string"
          },
          "last4": {
            "description": "Last 4 digits of SEPA.",
            "type": "string"
          }
        }
      },
      "Sponsorshiplog-Read": {
        "type": "object",
        "description": "",
        "properties": {
          "id": {
            "readOnly": true,
            "type": "string",
            "format": "uuid"
          },
          "user": {
            "type": "string",
            "format": "uuid"
          },
          "targetOrganization": {
            "description": "Organization invited.",
            "type": "string",
            "format": "uuid"
          },
          "createdAt": {
            "description": "When the sponsored organization was created.",
            "type": "string",
            "format": "date-time"
          },
          "payedAt": {
            "description": "When this sponsorship was payed.",
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "amount": {
            "description": "Amount earned for this sponsorship.",
            "type": "integer"
          },
          "currency": {
            "description": "Currency.",
            "externalDocs": {
              "url": "http://schema.org/priceCurrency"
            },
            "default": "EUR",
            "example": "EUR",
            "type": "string"
          },
          "state": {
            "readOnly": true,
            "enum": [
              "pending",
              "error",
              "done"
            ],
            "description": "Sponsorship state.",
            "default": "pending",
            "example": "pending",
            "type": "string"
          },
          "reason": {
            "description": "If state is error, this is the reason why.",
            "type": "string"
          }
        },
        "required": [
          "user",
          "targetOrganization",
          "amount",
          "currency"
        ]
      },
      "Sponsorshiplog-Write": {
        "type": "object",
        "description": ""
      },
      "Sponsorshiplog.jsonld-Read": {
        "type": "object",
        "description": "",
        "properties": {
          "@context": {
            "readOnly": true,
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "object",
                "properties": {
                  "@vocab": {
                    "type": "string"
                  },
                  "hydra": {
                    "type": "string",
                    "enum": [
                      "http://www.w3.org/ns/hydra/core#"
                    ]
                  }
                },
                "required": [
                  "@vocab",
                  "hydra"
                ],
                "additionalProperties": true
              }
            ]
          },
          "@id": {
            "readOnly": true,
            "type": "string"
          },
          "@type": {
            "readOnly": true,
            "type": "string"
          },
          "id": {
            "readOnly": true,
            "type": "string",
            "format": "uuid"
          },
          "user": {
            "type": "string",
            "format": "uuid"
          },
          "targetOrganization": {
            "description": "Organization invited.",
            "type": "string",
            "format": "uuid"
          },
          "createdAt": {
            "description": "When the sponsored organization was created.",
            "type": "string",
            "format": "date-time"
          },
          "payedAt": {
            "description": "When this sponsorship was payed.",
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "amount": {
            "description": "Amount earned for this sponsorship.",
            "type": "integer"
          },
          "currency": {
            "description": "Currency.",
            "externalDocs": {
              "url": "http://schema.org/priceCurrency"
            },
            "default": "EUR",
            "example": "EUR",
            "type": "string"
          },
          "state": {
            "readOnly": true,
            "enum": [
              "pending",
              "error",
              "done"
            ],
            "description": "Sponsorship state.",
            "default": "pending",
            "example": "pending",
            "type": "string"
          },
          "reason": {
            "description": "If state is error, this is the reason why.",
            "type": "string"
          }
        },
        "required": [
          "user",
          "targetOrganization",
          "amount",
          "currency"
        ]
      },
      "Sponsorshiplog.jsonld-Write": {
        "type": "object",
        "description": "",
        "properties": {
          "@context": {
            "readOnly": true,
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "object",
                "properties": {
                  "@vocab": {
                    "type": "string"
                  },
                  "hydra": {
                    "type": "string",
                    "enum": [
                      "http://www.w3.org/ns/hydra/core#"
                    ]
                  }
                },
                "required": [
                  "@vocab",
                  "hydra"
                ],
                "additionalProperties": true
              }
            ]
          },
          "@id": {
            "readOnly": true,
            "type": "string"
          },
          "@type": {
            "readOnly": true,
            "type": "string"
          }
        }
      }
    },
    "securitySchemes": {
      "apiKey": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}