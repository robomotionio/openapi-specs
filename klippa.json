{
  "openapi": "3.0.0",
  "info": {
    "description": "# Introduction\nThe Klippa Custom OCR Webservice API is a REST webservice for custom OCR implementations by Klippa.\n\nThe service replies are JSON only.\n\nThe service base URL is https://custom-ocr.klippa.com/api/v1.\n\n# Authentication\n## APIKeyHeader\nThe API requires the following header to be set:\n\nHeader | Description |\n---\t|---\t|\n  X-Auth-Key \t|  The auth key provided by Klippa.\t|\n\nThe Key is provided per customer by Klippa.\n\n## APIPublicKeyHeader\nThe Public API requires the following header to be set:\n\nHeader | Description |\n---\t|---\t|\n  X-Auth-Public-Key \t|  The public auth key provided by Klippa.\t|\n\n# Calling the API from public applications\nIf you want to call the API from a public application, like a mobile app, you should **NOT** embed your API key in the app, this key could be extracted and abused.\n\nThe way to do this is using our API to [generate a public key](#operation/createPublicKey) from your backend, and send that public key to your application. That way only users that are authenticated are allowed to call the API.\nThat way you can also better monitor which users are using the API and prevent abuse. You can also configure the public key to be valid for a certain time and give a maximum amount of scans.\n\nThe public key API is not available for every API key, we have to enable this for you.\n\nWe also have a [complete scanner SDK for Android and iOS](https://www.klippa.com/en/ocr/ocr-sdk/) available that has this API integrated.\n\nThe Public API requires the following header to be set:\n\nHeader | Description |\n---\t|---\t|\n  X-Auth-Public-Key \t|  The public auth key provided by Klippa.\t|\n\n# Error codes\n## Authentication errors\n\nCode | Name |\n---\t|---\t|\n  100001 \t|   ErrorCodeAuthMissingKey\t|\n  100002 \t|   ErrorCodeAuthInvalidKey\t|\n  100003 \t|   ErrorCodeAuthError\t|\n  100004 \t|   ErrorCodeAuthNoCreditsLeft\t|\n  100005 \t|   ErrorCodeAuthInvalidPublicKey\t|\n  100006 \t|   ErrorCodeAuthPublicKeyNoScansLeft\t|\n  100007 \t|   ErrorCodeAuthPublicKeyExpired\t|\n  100008 \t|   ErrorCodeAuthWrongKeyType\t|\n\n## PDF Parser errors\n\nCode | Name |\n---\t|---\t|\n  200001 \t|   ErrorCodePDFParserDocumentError\t|\n  200002 \t|   Obsolete\t|\n  200003 \t|   Obsolete\t|\n  200004 \t|   ErrorCodePDFParserNoAccessToTemplate\t|\n  200005 \t|   ErrorCodePDFParserConvertError\t|\n  200006 \t|   ErrorCodePDFParserParseError\t|\n\n\n## Document Parser errors\n\nCode | Name |\n---\t|---\t|\n  300001 \t|   ErrorCodeDocumentParserDocumentError\t|\n  300002 \t|   Obsolete\t|\n  300003 \t|   Obsolete\t|\n  300004 \t|   ErrorCodeDocumentParserNoAccessToTemplate\t|\n  300005 \t|   ErrorCodeDocumentParserConvertError\t|\n  300006 \t|   ErrorCodeDocumentParserParseError\t|\n  300007 \t|   ErrorCodeDocumentParserTooBigFileError\t|\n  300008 \t|   ErrorCodeDocumentParserInvalidUserDataError\t|\n  300009 \t|   ErrorCodeDocumentParserTooBigFileResolutionError\t|\n\n## Public Key errors\n\nCode | Name |\n---\t|---\t|\n  400001 \t|   ErrorCodePublicKeyNotAllowed\t|\n  400002 \t|   ErrorCodePublicKeyCreationFailed\t|\n  400003 \t|   ErrorCodePublicKeyInvalidScanLimit\t|\n  400004 \t|   ErrorCodePublicKeyInvalidValidTime\t|\n  400005 \t|   ErrorCodePublicKeyLoadError\t|\n  400006 \t|   ErrorCodePublicKeyNotFoundError\t|\n\n## Miscellaneous errors\n\nCode | Name |\n---\t|---\t|\n  900000 \t|   ErrorCodeStatisticsFetchError\t|\n  900001 \t|   ErrorCodeCreditsFetchError\t|\n  900002 \t|   ErrorCodeInternalError\t|\n\n# Userdata\n\nThe user_data field allows for sending additional data into the parser and can be used to enable extra features, improve the recognition of certain fields and improve the processing speed. The user_data must be given as a JSON-encoded string. All fields are optional, a documents may be submitted without this field.\n\nThe following fields are accepted in the user_data object:\n\nKey | Value type  | Description |\n--|--|--|\n`client`| `Relation` object | A relation object containing information about the client that submits the document. It should contain information either the merchant of the customer of the invoice. This is indicated by the `transaction_type` key. If the `transaction_type` is set to `purchase`, the client is considered to be the customer. If the `transaction_type` is set to `sale`, the client is considered to be the merchant.\n`transaction_type`  | string  | The transaction type of the document for the client. If the invoices contains a sale that the client made, this field can be set to `sale`. If the invoice contains a purchase that the client made, this field can be set to `purchase`.|\n`relations`  | array of `Relation` objects  | An optional list of relations which have previously been used by the client. The list does not have to be complete, the OCR may suggest merchants and customers which are not in this list. |\n`transactions`  | array of `Transaction` objects  | An optional list of open transactions for the client. We use this list to validate and improve our OCR detections. |\n`purchase_orders`  | array of `PurchaseOrder` objects  | An optional list of purchase orders. Its identifier will be present in the output if the purchase order was found on the document |\n`project_codes`  | array of `ProjectCode` objects  | An optional list of project codes. Its identifier will be present in the output if the project code was found on the document |\n`locale`| `Locale` object | If the language or originating country of the document is known, these values may be set.\n\n\n## Relation object\n\nThe relation object may contain the following fields. All fields are optional and may be omitted if a field is not available. This user data can also be managed by [User Data Sets](#tag/UserDataSets) when allowed for your key.\n\nKey | Value type  | Description |\n--|--|--|\nid|string|The ID of the relation in your own system, we will return this id in the `merchant_id` field if there is a match. In the User Data Set this is the ExternalID.\nname|string|The company name of the client\nstreet_name|string|The street name of the client address\nstreet_number|string|The street number of the client address\nzipcode|string|The zipcode of the client address\ncity|string|The city of the client address\ncountry|string|The country of the client address. It must be provided as a 2-letter country code as specified by ISO 3166-1. For example `FR` for France and `NL` for The Netherlands\nvat_number|string|The vat number, formatted according to the EU VAT directive. It must start with the country code prefix, such as `FR` or `NL`\ncoc_number|string|A chamber of commerce number. E.g. the Dutch KVK number, or the French SIRET/SIREN number\nphone|string|The phone number of the client. International calling codes, such as `+33` may be provided but are not required\nwebsite|string|The full URL to the website\nemail|string|The email address\nbank_account_number|string|The IBAN number\n\n\n## Transaction object\n\nThe transaction object may contain the following fields. All fields are optional and may be omitted if a field is not available. This user data can also be managed by [User Data Sets](#tag/UserDataSets) when allowed for your key.\n\nKey | Value type  | Description |\n--|--|--|\nidentifier|string|The identifier of the transaction as given by the bank\ndate|string|The date of the transaction, in the format 2019-06-24 11:16:33\ncurrency|string|The currency of the transaction, eg. EUR\namount|float|The amount of the transaction, eg 23.56\ndescription|string|The description of the transaction as given by the bank\niban|string|The IBAN number that made the transaction\nname|string|The name of the bank account\n\n## PurchaseOrder object\n\nThe PurchaseOrder object may contain the following fields. The `date` and `amount` fields are optional. If given, the purchase order will only be searched for on the document if those fields match the document date and document total amount, respectively.\n\nKey | Value type  | Description |\n--|--|--|\nidentifier|string|The identifier of the purchase order\npurchase_order_number|string|The purchase order number which should be searched for on the document, e.g 'PO-12345'\ndate|string|The expected document date, in the format 2019-06-24 11:16:33\namount|float|The expected total amount on the document, eg 23.56\n\n\n## ProjectCode object\n\nThe ProjectCode object may contain the following fields. The `identifier` field is optional. If given, the identifier is returned in the field `matched_project_code_id`. The matched project code is returned in the field `project_code`. This user data can also be managed by [User Data Sets](#tag/UserDataSets) when allowed for your key.\n\nKey | Value type  | Description |\n--|--|--|\nidentifier|string|The identifier of the project code\nproject_code_number|string|The project code number which should be searched for on the document, e.g 'PC-12345'\n\n\n## Locale object\nIn case the language and/or originating country of the document are known, these may be set in the locale object. The locale object may contain the following fields. Both fields are optional.\n\nKey | Value type  | Description |\n--|--|--|\nlanguage|string|A 2-letter language code according to ISO 3166-1.\ncountry|string|A 2-letter country code according to ISO 639.\n\n## Keyword and lineitem matching\nKeyword rules can be use to find strings in the text of the document using either a list of keywords or a regex.\n\nMultiple rules may be given, each rule will provide a separate object in the output. All keywords and regexes are treated case-insensitive.\n\nFor example, by passing the following `keyword_rules` object, the regex will match all \"new product\" strings which are followed by a number. The matches are provided in the output in an object with \"id\" set to \"products\".\nThe \"coupon\" rule can be used to count the number of occurrences of a list of words:\n\n```\n{\n\"keyword_rules\": [\n{\n\"id\": \"products\",\n\"regex\": \"(new product [0-9]+)\"\n},\n{\n\"id\": \"coupon\",\n\"keywords\": [\n\"coupon\"\n]\n}\n]\n}\n```\n\nIf for example the keywords of \"products\" are matched 3 times in the text of the document, and the keywords of \"coupons\" 2 times, the output will be:\n```\n{\n\"matched_keywords\": [\n{\n\"id\": \"products\",\n\"count\": 3\n\"matches\": [\"new product 6\", \"new product 1\", \"new product 14\"]\n},\n{\n\"id\": \"coupons\",\n\"count\": 2\n\"matches\": [\"COUPON\", \"coupon\"]\n}\n]\n}\n```\n\n### Lineitem matching\nSimilar to keyword rules, lineitems rules can be used to list products which contain a certain keyword.\n```\n{\n\"lineitem_rules\": [\n{\n\"id\": \"fruit\",\n\"regex\": \"apple|banana\"\n},\n{\n\"id\": \"vegetables\",\n\"keywords\": [\n\"carrots\",\n\"broccoli\"\n]\n}\n]\n}\n```\nFor example, if some of the lineitems on the document contain a word that is in the \"vegetables\" keyword list, they\nare of the present in the output under the \"vegetables\" key:\n```\n{\n\"matched_lineitems\": [\n{\n\"id\": \"vegetables\",\n\"lineitems\": [\n{\n\"title\": \"1kg carrots\",\n\"amount\": 164,\n\"amount_each\": 82,\n\"quantity\": 2\n},\n{\n\"title\": \"Set of 2 broccoli\",\n\"amount\": 164,\n\"amount_each\": 592,\n\"quantity\": 4\n}\n]\n}\n]\n}\n```\n\n## Userdata Example\n```\n{\n\"client\": {\n\"name\": \"\",\n\"street_name\": \"\",\n\"street_number\": \"\",\n\"zipcode\": \"\",\n\"city\": \"\",\n\"country\": \"\",\n\"vat_number\": \"\",\n\"coc_number\": \"\",\n\"phone\": \"\",\n\"website\": \"\",\n\"email\": \"\",\n\"bank_account_number\": \"\"\n},\n\"transaction_type\": \"\",\n\"relations\": [\n{\n\"name\": \"\",\n\"street_name\": \"\",\n\"street_number\": \"\",\n\"zipcode\": \"\",\n\"city\": \"\",\n\"country\": \"\",\n\"vat_number\": \"\",\n\"coc_number\": \"\",\n\"phone\": \"\",\n\"website\": \"\",\n\"email\": \"\",\n\"bank_account_number\": \"\"\n},\n{\n\"name\": \"\",\n\"street_name\": \"\",\n\"street_number\": \"\",\n\"zipcode\": \"\",\n\"city\": \"\",\n\"country\": \"\",\n\"vat_number\": \"\",\n\"coc_number\": \"\",\n\"phone\": \"\",\n\"website\": \"\",\n\"email\": \"\",\n\"bank_account_number\": \"\"\n}\n],\n\"locale\": {\n\"language\": \"\",\n\"country\": \"\"\n}\n}\n\n```\n\n# Dataset schema\nThe 'Create new document endpoint' of the DataSet section allows annotations of certain values of the document to be included in the request. The annotations that can be sent along with the document depends on the annotation schema that is specified on the dataset to which this document is added.\nCurrently, only the annotation schema 'invoices/receipts' is supported.\nAnnotations must be given as a JSON-encoded string in the following format:\n\n```\n{\n\"annotations\": {\n\"field_name\": [ValueObject, ValueObject],\n\"field_name_2\": [ValueObject]\n}\n}\n```\n\nFor example, annotations for the 'amount' and 'merchant_name' fields for a PDF file may look like:\n```\n{\n\"annotations\": {\n\"amount\": [{\"value\": 914, \"coordinates\": {\"file\": 0, \"page\": 2, \"coordinates\": [[0, 0], [1, 0], [1, 1], [0, 1]] } ],\n\"merchant_name\": [{\"value\": \"Klippa\", \"coordinates\": {\"file\": 0, \"page\": 0, \"coordinates\": [[0, 0], [1, 0], [1, 1], [0, 1]] } ]\n}\n}\n```\n\nThe allowed field names depend on the schema that is being followed. The `ValueObjects` objects contain the value that is being annotated, and also may include the coordinates of the location(s) where this value can be obtained from the document.\n\n## ValueObject\nThe `ValueObject` object may contain the following fields:\n\nKey | Value type  | Description |\n--|--|--|\nvalue| Depends on the field name, see below of the field names and values | The value type depends on the field name to which this annotated value belongs.\ncoordinates | Array of `Coordinates` object | Optional coordinates where the value is found on the document. Multiple `Coordinates` object may be given in case the object can be obtained from multiple locations\n\n## Coordinates object\nThe `Coordinates` object may contain the following fields:\n\nKey | Value type  | Description |\n--|--|--|\nfile|int|The 0-indexed file to which these coordinates refer to|\npage|int|In case the document is a PDF file, the 0-indexed page to which the coordinates refer to|\nvertices|array of array of floats| An array of at least 4 points which enclose an area. For example: `[[0, 0], [1, 0], [1, 1], [0, 1]]`\n\n### Coordinates on PDF files\nCoordinates for PDF file must be delivered in a normalized format, where (0,0) represents the top-left corner of the document, and (1,1) represents the bottom right corner. For\n\n### Coordinates on Images\nThe the file to which the coordinates refer to is an image instead of a PDF, the `page` field may be omitted or set to 0.\n\n## Allowed fields names and corresponding value types\n\nKey | Value type  | Description |\n--|--|--|\namount|int|The total amount, in cents\namount_change|int|The change amount, in cents|\ncurrency|string|The three-letter currency code, as defined in ISO 4217, e.g. `EUR`|\ndate|string|The purchase datetime as ISO string, E.g. `2019-07-01T16:46:00`|\npaymentmethod|string enum: cash,creditcard,debit,bank|The payment method. Currently supported values: cash, creditcard, debit, bank (for SEPA, iDEAL, PayPal)|\npayment_auth_code|string|The transaction authorization code|\npayment_card_number|string|The payment card number|\npayment_card_account_number|string|The account number of the card that was used to complete the payment|\npayment_card_issuer|string|Name of the party that issued the credit- or debit card|\npayment_due_date|string|Date on which the payment is due as ISO string, E.g. `2019-07-01T00:00:00`|\nterminal_number|string|A number that identifies the terminal on which the payment was processed. Usually found on EFT receipts.|\ndocument_subject|string|The subject of the document|\npackage_number|string|Package number, usually found on packaging slips|\ninvoice_number|string|The number of the invoice|\ninvoice_type|strin enum: invoice, credit_invoice| The type of invoice if the document is a invoice|\nreceipt_number|string|The receipt ticket number|\nshop_number|string|A number that identifies the store in which the payment was processed. Usually found on EFT receipts.|\ntransaction_number|string|The transaction number provided by the payment processor. Usually found on EFT receipts.|\ntransaction_reference|string|A transaction reference provided by the merchant|\norder_number|string|The order number|\nmerchant_name|string|The name of the merchant|\nmerchant_coc_number|string|The chamber of commerce number of the merchant|\nmerchant_vat_number|string|The VAT number of the merchant. It contains the two-letter country code, followed by a country-specific implementation of the VAT number.|\nmerchant_bank_account_number|string|The IBAN bank account number of the merchant.|\nmerchant_bank_account_number_bic|string|The BIC associated with the IBAN bank account number of the merchant|\nmerchant_chain_liability_bank_account_number|string|The IBAN bank account number of the merchant used for Chain Liability G-Account (Wet Ketenaansprakelijkheid G-rekening)|\nmerchant_chain_liability_amount|int|The amount that is due on the Chain Liability G-Account (Wet Ketenaansprakelijkheid G-rekening)|\nmerchant_bank_domestic_account_number|string|The domestic bank account number of the merchant|\nmerchant_bank_domestic_bank_code|string|The domestic bank code of the bank account of the merchant|\nmerchant_email|string|The website of the merchant|\nmerchant_phone|string|The phone number of the merchant|\ncustomer_name|string|The name of the customer|\ncustomer_number|string|A number used by the merchant to identify the customer|\ncustomer_reference|string|A reference to this document, given by the customer|\ncustomer_vat_number|string|The VAT number of the customer. It contains the two-letter country code, followed by a country-specific implementation of the VAT number.|\ncustomer_coc_number|string|The chamber of commerce number of the customer|\ncustomer_bank_account_number|string|The IBAN number of the customer.|\ncustomer_bank_account_number_bic|string|The BIC associated with the IBAN number of the customer|\ncustomer_email|string|The email adress of the customer\npayment_slip_code|string|The full code of the payment slip|\npayment_slip_reference_number|string|The reference number of the payment slip|\npayment_slip_customer_number|string|The customer number of the payment slip|\ndocument_language|string|The language of the document as a two-letter country code|",
    "title": "Klippa Custom OCR API",
    "contact": {
      "name": "Jeroen Bobbeldijk",
      "url": "https://www.klippa.com",
      "email": "jeroen@klippa.com"
    },
    "version": "v0-16-49 - 799e05661485a592beb0511e081abd75d341c0fa",
    "x-logo": {
      "url": "/docs/static/images/logo.png"
    }
  },
  "paths": {
    "/": {
      "get": {
        "tags": [
          "Information"
        ],
        "summary": "Information about the API.",
        "operationId": "getAPIIndex",
        "responses": {
          "200": {
            "$ref": "#/components/responses/getAPIIndexResponse"
          },
          "500": {
            "$ref": "#/components/responses/errorResponse"
          }
        }
      }
    },
    "/IdentityVerification/SDK/{Token}": {
      "get": {
        "security": [],
        "tags": [
          "IdentityVerification"
        ],
        "summary": "Get IdentityVerification SDK session.",
        "operationId": "getIdentityVerificationSDKSession",
        "parameters": [
          {
            "description": "The token of the session.",
            "name": "Token",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/getIdentityVerificationSDKSessionResponse"
          },
          "500": {
            "$ref": "#/components/responses/errorResponse"
          }
        }
      }
    },
    "/IdentityVerification/SDK/{Token}/File/{FileRef}": {
      "get": {
        "security": [
          {
            "NoAuth": [
              "[]"
            ]
          }
        ],
        "tags": [
          "IdentityVerification"
        ],
        "summary": "Get IdentityVerification SDK session File.",
        "operationId": "getIdentityVerificationSDKSessionFile",
        "parameters": [
          {
            "description": "The token of the session.",
            "name": "Token",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The fileRef of the session file.",
            "name": "FileRef",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/fileResponse"
          },
          "500": {
            "$ref": "#/components/responses/errorResponse"
          }
        }
      }
    },
    "/IdentityVerification/SDK/{Token}/Upload": {
      "post": {
        "security": [],
        "description": "Note: ***this request is in multipart/form-data***.",
        "tags": [
          "IdentityVerification"
        ],
        "summary": "Upload data to an IdentityVerification SDK session.",
        "operationId": "identityVerificationSDKSessionUpload",
        "parameters": [
          {
            "description": "The token of the session.",
            "name": "Token",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "File": {
                    "description": "The file to attach.",
                    "type": "string",
                    "format": "binary"
                  },
                  "Type": {
                    "description": "The type of the file that is being uploaded.",
                    "type": "string",
                    "enum": [
                      "PictureIDFront",
                      "PictureIDBack",
                      "Selfie",
                      "Signature"
                    ]
                  },
                  "Index": {
                    "description": "The index of the file, to be able to replace files in a specific step.",
                    "type": "integer",
                    "format": "int64"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/identityVerificationSDKSessionUploadResponse"
          },
          "500": {
            "$ref": "#/components/responses/errorResponse"
          }
        }
      }
    },
    "/IdentityVerification/Session": {
      "get": {
        "tags": [
          "IdentityVerification"
        ],
        "summary": "List IdentityVerification sessions.",
        "operationId": "listIdentityVerificationSessions",
        "parameters": [
          {
            "x-go-name": "PerPage",
            "description": "The amount of results per page.",
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 10,
              "maximum": 1000,
              "default": 10
            }
          },
          {
            "x-go-name": "Page",
            "description": "The page to load.",
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 1,
              "default": 1
            }
          },
          {
            "x-go-name": "SortOrder",
            "description": "The order to sort.",
            "name": "sort_order",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "DESC",
                "ASC"
              ],
              "default": "ASC"
            }
          },
          {
            "x-go-name": "SortField",
            "description": "The field to sort on.",
            "name": "sort_field",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "CreatedAt",
                "UpdatedAt",
                "ID",
                "Token"
              ],
              "default": "CreatedAt"
            }
          },
          {
            "x-go-name": "Filter",
            "description": "A filter to use for the list.\nThis query can be used multiple times.\n\nFormat is:\n\nCreatedAt:{value}:{operator}\n\nUpdatedAt:{value}:{operator}\n\nID:{value}:{operator}\n\nToken:{value}:{operator}\n\n{operator} is one of:\n\nEQ (Equal)\n\nNEQ (Not equal)\n\nGT (Greater than)\n\nGTE (Greater than or equal)\n\nLT (Lower than)\n\nLTE (Lower than or equal)\n\nLIKE\n\nNULL (value can be empty)\n\nNOTNULL (value can be empty)",
            "name": "filter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/listIdentityVerificationSessionsResponse"
          },
          "500": {
            "$ref": "#/components/responses/errorResponse"
          }
        }
      },
      "post": {
        "tags": [
          "IdentityVerification"
        ],
        "summary": "Create IdentityVerification session.",
        "operationId": "createIdentityVerificationSession",
        "requestBody": {
          "$ref": "#/components/requestBodies/createOrUpdateIdentityVerificationSessionForm"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/createIdentityVerificationSessionResponse"
          },
          "500": {
            "$ref": "#/components/responses/errorResponse"
          }
        }
      }
    },
    "/IdentityVerification/Session/{ID}": {
      "get": {
        "tags": [
          "IdentityVerification"
        ],
        "summary": "Get IdentityVerification session.",
        "operationId": "getIdentityVerificationSession",
        "parameters": [
          {
            "description": "The ID of the session.",
            "name": "ID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "uint64"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/getIdentityVerificationSessionResponse"
          },
          "500": {
            "$ref": "#/components/responses/errorResponse"
          }
        }
      },
      "delete": {
        "tags": [
          "IdentityVerification"
        ],
        "summary": "Delete IdentityVerification session.",
        "operationId": "deleteIdentityVerificationSession",
        "parameters": [
          {
            "description": "The ID of the session.",
            "name": "ID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "uint64"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/deleteIdentityVerificationSessionResponse"
          },
          "500": {
            "$ref": "#/components/responses/errorResponse"
          }
        }
      },
      "patch": {
        "tags": [
          "IdentityVerification"
        ],
        "summary": "Update IdentityVerification session.",
        "operationId": "updateIdentityVerificationSession",
        "parameters": [
          {
            "description": "The ID of the session.",
            "name": "ID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "uint64"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/createOrUpdateIdentityVerificationSessionForm"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/updateIdentityVerificationSessionResponse"
          },
          "500": {
            "$ref": "#/components/responses/errorResponse"
          }
        }
      }
    },
    "/IdentityVerification/Session/{ID}/File/{FileRef}": {
      "get": {
        "tags": [
          "IdentityVerification"
        ],
        "summary": "Get IdentityVerification session file.",
        "operationId": "getIdentityVerificationSessionFile",
        "parameters": [
          {
            "description": "The ID of the session.",
            "name": "ID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "uint64"
            }
          },
          {
            "description": "The fileRef of the session file.",
            "name": "FileRef",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/fileResponse"
          },
          "500": {
            "$ref": "#/components/responses/errorResponse"
          }
        }
      }
    },
    "/credits": {
      "get": {
        "tags": [
          "Information"
        ],
        "summary": "List available credits.",
        "operationId": "credits",
        "responses": {
          "200": {
            "$ref": "#/components/responses/getCreditsResponse"
          },
          "500": {
            "$ref": "#/components/responses/errorResponse"
          }
        }
      }
    },
    "/dataSet": {
      "get": {
        "description": "Returns all datasets which match the given filters. If no filters are given, all datasets are returned",
        "tags": [
          "Datasets"
        ],
        "summary": "List datasets",
        "operationId": "ListDatasets",
        "parameters": [
          {
            "x-go-name": "PerPage",
            "description": "The amount of results per page.",
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 10,
              "maximum": 1000,
              "default": 10
            }
          },
          {
            "x-go-name": "Page",
            "description": "The page to load.",
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 1,
              "default": 1
            }
          },
          {
            "x-go-name": "SortOrder",
            "description": "The order to sort.",
            "name": "sort_order",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "DESC",
                "ASC"
              ],
              "default": "ASC"
            }
          },
          {
            "x-go-name": "SortField",
            "description": "The field to sort on.",
            "name": "sort_field",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "CreatedAt",
                "UpdatedAt",
                "ID",
                "ExternalID",
                "DocumentAnnotationSchema"
              ],
              "default": "CreatedAt"
            }
          },
          {
            "x-go-name": "ExternalID",
            "description": "The external IDs to filter on. Separated by a comma.\nWhen no external IDs are given, items of all external ids are returned.",
            "name": "external_id",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "x-go-name": "Filter",
            "description": "A filter to use for the list.\nThis query can be used multiple times.\n\nFormat is:\n\nCreatedAt:{value}:{operator}\n\nUpdatedAt:{value}:{operator}\n\nID:{value}:{operator}\n\nExternalID:{value}:{operator}\n\n{operator} is one of:\n\nEQ (Equal)\n\nNEQ (Not equal)\n\nGT (Greater than)\n\nGTE (Greater than or equal)\n\nLT (Lower than)\n\nLTE (Lower than or equal)\n\nLIKE\n\nNULL (value can be empty)\n\nNOTNULL (value can be empty)",
            "name": "filter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/getDataSetsResponse"
          },
          "500": {
            "$ref": "#/components/responses/errorResponse"
          }
        }
      },
      "post": {
        "description": "The DocumentAnnotationSchema refers to the kind of annotations that will be delivered for documents in this dataset",
        "tags": [
          "Datasets"
        ],
        "summary": "Create a new dataset",
        "operationId": "CreateDataSet",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataSetForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/createDataSetResponse"
          },
          "500": {
            "$ref": "#/components/responses/errorResponse"
          }
        }
      }
    },
    "/dataSet/document": {
      "get": {
        "description": "Returns all documents which match the given filters. If no filters are given, all documents are returned",
        "tags": [
          "Datasets"
        ],
        "summary": "List documents",
        "operationId": "ListDocuments",
        "parameters": [
          {
            "x-go-name": "PerPage",
            "description": "The amount of results per page.",
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 10,
              "maximum": 1000,
              "default": 10
            }
          },
          {
            "x-go-name": "Page",
            "description": "The page to load.",
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 1,
              "default": 1
            }
          },
          {
            "x-go-name": "SortOrder",
            "description": "The order to sort.",
            "name": "sort_order",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "DESC",
                "ASC"
              ],
              "default": "ASC"
            }
          },
          {
            "x-go-name": "SortField",
            "description": "The field to sort on.",
            "name": "sort_field",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "CreatedAt",
                "UpdatedAt",
                "ID",
                "Type",
                "ExternalID",
                "LastSyncDate"
              ],
              "default": "CreatedAt"
            }
          },
          {
            "x-go-name": "Datasets",
            "description": "The datasets to filter on. Separated by a comma.\nWhen no datasets are given, documents from all datasets may be returned.",
            "name": "datasets",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "x-go-name": "ExternalID",
            "description": "The external IDs to filter on. Separated by a comma.\nWhen no external IDs are given, items of all external ids are returned.",
            "name": "external_id",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "x-go-name": "UserID",
            "description": "The user IDs to filter on. Separated by comma.",
            "name": "user_id",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "x-go-name": "Filter",
            "description": "A filter to use for the list.\nThis query can be used multiple times.\n\nFormat is:\n\nCreatedAt:{value}:{operator}\n\nUpdatedAt:{value}:{operator}\n\nID:{value}:{operator}\n\nExternalID:{value}:{operator}\n\n{operator} is one of:\n\nEQ (Equal)\n\nNEQ (Not equal)\n\nGT (Greater than)\n\nGTE (Greater than or equal)\n\nLT (Lower than)\n\nLTE (Lower than or equal)\n\nLIKE\n\nNULL (value can be empty)\n\nNOTNULL (value can be empty)",
            "name": "filter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/getDocumentsResponse"
          },
          "500": {
            "$ref": "#/components/responses/errorResponse"
          }
        }
      },
      "post": {
        "description": "Create a new document, and add it to one or more datasets.",
        "tags": [
          "Datasets"
        ],
        "summary": "Create a new document",
        "operationId": "createDocument",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "document": {
                    "description": "The document to create as a multipart/form-data file. You can add this key multiple times if the document consists of multiple files. Only add multiple documents if they together form a single document.",
                    "type": "string",
                    "format": "binary",
                    "x-go-name": "Document"
                  },
                  "datasets": {
                    "description": "The dataset ID's to assign this document to. Separated by a comma.\nTo use an external dataset ID, prefix the ID with E-.",
                    "type": "string",
                    "x-go-name": "DataSets"
                  },
                  "external_id": {
                    "description": "An optional external identifier for this document",
                    "type": "string",
                    "x-go-name": "ExternalID"
                  },
                  "user_id": {
                    "description": "An optional external reference to a owner or user of this document",
                    "type": "string",
                    "x-go-name": "UserID"
                  },
                  "annotations": {
                    "description": "The annotations object for this document. The annotations must follow the annotation schema(s) of the dataset(s)\nto which this document will be assigned",
                    "type": "string",
                    "x-go-name": "Annotations"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/createDocumentResponse"
          },
          "500": {
            "$ref": "#/components/responses/errorResponse"
          }
        }
      }
    },
    "/dataSet/document/{DocumentID}": {
      "get": {
        "description": "The response object contains the metadata of the document. Use /dataSet/document/{DocumentID/annotations to retrieve\nthe annotations for this document",
        "tags": [
          "Datasets"
        ],
        "summary": "Get a single document",
        "operationId": "GetDocument",
        "parameters": [
          {
            "description": "The ID of the document. To use the external ID, prefix the ID with E-.",
            "name": "DocumentID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/getDocumentResponse"
          },
          "500": {
            "$ref": "#/components/responses/errorResponse"
          }
        }
      },
      "delete": {
        "description": "The document will be removed from all datasets to which it is associated. All its document's files will also be removed",
        "tags": [
          "Datasets"
        ],
        "summary": "Delete a document",
        "operationId": "DeleteDocument",
        "parameters": [
          {
            "description": "The ID of the document. To use the external ID, prefix the ID with E-.",
            "name": "DocumentID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/deleteDocumentResponse"
          },
          "500": {
            "$ref": "#/components/responses/errorResponse"
          }
        }
      }
    },
    "/dataSet/document/{DocumentID}/annotations": {
      "get": {
        "description": "The response object contains the annotations of the document.",
        "tags": [
          "Datasets"
        ],
        "summary": "Get the annotations of a document",
        "operationId": "GetDocumentAnnotations",
        "parameters": [
          {
            "description": "The ID of the document. To use the external ID, prefix the ID with E-.",
            "name": "DocumentID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/getDocumentAnnotationsResponse"
          },
          "500": {
            "$ref": "#/components/responses/errorResponse"
          }
        }
      }
    },
    "/dataSet/{DataSetID}": {
      "get": {
        "description": "Get a single dataset",
        "tags": [
          "Datasets"
        ],
        "operationId": "GetDataSet",
        "parameters": [
          {
            "description": "The ID of the data set. To use the external ID, prefix the ID with E-.",
            "name": "DataSetID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/getDataSetResponse"
          },
          "500": {
            "$ref": "#/components/responses/errorResponse"
          }
        }
      },
      "delete": {
        "description": "The documents which are assigned to this dataset will not be removed.",
        "tags": [
          "Datasets"
        ],
        "summary": "Delete a dataset",
        "operationId": "DeleteDataSet",
        "parameters": [
          {
            "description": "The ID of the data set to delete. To use the external ID, prefix the ID with E-.",
            "name": "DataSetID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/deleteDataSetResponse"
          },
          "500": {
            "$ref": "#/components/responses/errorResponse"
          }
        }
      }
    },
    "/fields": {
      "get": {
        "tags": [
          "Information"
        ],
        "summary": "List of available fields.",
        "operationId": "getFields",
        "responses": {
          "200": {
            "$ref": "#/components/responses/getFieldsResponse"
          },
          "500": {
            "$ref": "#/components/responses/errorResponse"
          }
        }
      }
    },
    "/fields/{Template}": {
      "get": {
        "tags": [
          "Information"
        ],
        "summary": "List of available fields for a specific template.",
        "operationId": "getFieldsByTemplate",
        "parameters": [
          {
            "description": "The key of the template.",
            "name": "Template",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/getFieldsResponse"
          },
          "500": {
            "$ref": "#/components/responses/errorResponse"
          }
        }
      }
    },
    "/parseDocument": {
      "post": {
        "security": [
          {
            "APIPublicKeyQueryParam": [
              "[]"
            ]
          },
          {
            "APIPublicKeyHeader": [
              "[]"
            ]
          },
          {
            "APIKeyQueryParam": [
              "[]"
            ]
          },
          {
            "APIKeyHeader": [
              "[]"
            ]
          }
        ],
        "description": "Body is the raw document file in the ```document``` field. You can also give a URL in the ```url``` field to let the API download the file.\nNote: you need to either pass a document or a URL.\nThe service accepts image (jpg/png/gif/heic/heif) and PDF files.\n\nThe template (when available) has to be given in the ```template``` value or in the query argument ```template```. The query overwrites the form value.\n\nThe output is not the same for every template.\n\nNote: ***this request is in multipart/form-data or application/json***.",
        "tags": [
          "Parsing"
        ],
        "summary": "Template Financial (default): Parse GIF, PNG, JPG, HEIC/HEIF or PDF file.",
        "operationId": "parseDocument",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "document": {
                    "description": "The document to scan as a multipart/form-data file. You can add this key multiple times to scan multiple parts of a document at once. If you are calling this method using JSON, the document field allows you to send a base64 string or an array of base64 strings for multiple files. Every file is seen as 1 scan.",
                    "type": "string",
                    "format": "binary",
                    "x-go-name": "Document"
                  },
                  "url": {
                    "description": "The document to scan as a file available at this URL. The request should be completed within 30 seconds. You can add this key multiple times to scan multiple parts of a document at once. Every url is seen as 1 scan.",
                    "type": "string",
                    "x-go-name": "URL"
                  },
                  "template": {
                    "description": "The template to use for parsing. Empty for default parsing.",
                    "type": "string",
                    "x-go-name": "Template"
                  },
                  "pdf_text_extraction": {
                    "description": "PDF Text extraction.\nUse full when you want the best quality scan, use fast when you want fast scan results.\nFast will try to extract the text from the PDF. Full will actually scan the full PDF, which is slower.",
                    "type": "string",
                    "enum": [
                      "fast",
                      "full"
                    ],
                    "default": "fast",
                    "x-go-name": "PDFTextExtraction"
                  },
                  "user_data": {
                    "description": "Extra metadata in JSON format to give to the parser. Only works with templates that are configured to accept user data.",
                    "type": "string",
                    "x-go-name": "UserData"
                  },
                  "user_data_set_external_id": {
                    "description": "The external ID of the user data set.",
                    "type": "string",
                    "x-go-name": "UserDataSetExternalID"
                  },
                  "hash_duplicate_group_id": {
                    "description": "An identifier to use when saving/detecting hash duplicates.\nThis way you can allow to have the same document scanned more than once for multiple groups.\nWhen doing a scan, the combination of the Hash Group ID and the document Hash will be used to detect duplicates.\nThis value is saved hashed on our side. Common use cases: Company ID, Campaign ID, User ID.",
                    "type": "string",
                    "x-go-name": "HashDuplicateGroupID"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/parseDocumentResponse"
          },
          "400": {
            "$ref": "#/components/responses/validationErrorResponseResponse"
          },
          "500": {
            "$ref": "#/components/responses/errorResponse"
          }
        }
      }
    },
    "/parseDocument/eu-passport": {
      "post": {
        "security": [
          {
            "APIPublicKeyQueryParam": [
              "[]"
            ]
          },
          {
            "APIPublicKeyHeader": [
              "[]"
            ]
          },
          {
            "APIKeyQueryParam": [
              "[]"
            ]
          },
          {
            "APIKeyHeader": [
              "[]"
            ]
          }
        ],
        "description": "Body is the raw document file in the ```document``` field. You can also give a URL in the ```url``` field to let the API download the file.\nNote: you need to either pass a document or a URL.\nThe service accepts image (jpg/png/gif/heic/heif) and PDF files.\n\nThe template (when available) has to be given in the ```template``` value or in the query argument ```template```. The query overwrites the form value.\n\nThe output is not the same for every template.\n\nNote: ***this request is in multipart/form-data or application/json***.",
        "tags": [
          "Parsing"
        ],
        "summary": "Template EU Passport: Parse GIF, PNG, JPG, HEIC/HEIF or PDF file.",
        "operationId": "parseDocumentEUPassport",
        "deprecated": true,
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "document": {
                    "description": "The passport document to scan as a multipart/form-data file. You can add this key multiple times to scan multiple parts of a passport document at once. If you are calling this method using JSON, the document field allows you to send a base64 string or an array of base64 strings for multiple files. Every file is seen as 1 scan.",
                    "type": "string",
                    "format": "binary",
                    "x-go-name": "Document"
                  },
                  "url": {
                    "description": "The passport document to scan as a file available at this URL. The request should be completed within 30 seconds. You can add this key multiple times to scan multiple parts of a passport document at once. Every url is seen as 1 scan.",
                    "type": "string",
                    "x-go-name": "URL"
                  },
                  "template": {
                    "description": "The template to use for parsing. Empty for default parsing.",
                    "type": "string",
                    "default": "eu-passport",
                    "x-go-name": "Template"
                  },
                  "pdf_text_extraction": {
                    "description": "PDF Text extraction.\nUse full when you want the best quality scan, use fast when you want fast scan results.\nFast will try to extract the text from the PDF. Full will actually scan the full PDF, which is slower.\nSpeed difference: full: ~5s, fast: ~2.5.\nWhen a PDF does not contain text, e.g., scans of documents and pictures, we will automatically use full for that request.\nThis value is ignored for non-PDF requests.",
                    "type": "string",
                    "enum": [
                      "fast",
                      "full"
                    ],
                    "default": "fast",
                    "x-go-name": "PDFTextExtraction"
                  },
                  "user_data": {
                    "description": "Extra metadata in JSON format to give to the parser. Only works with templates that are configured to accept user data.",
                    "type": "string",
                    "x-go-name": "UserData"
                  },
                  "user_data_set_external_id": {
                    "description": "The external ID of the user data set.",
                    "type": "string",
                    "x-go-name": "UserDataSetExternalID"
                  },
                  "hash_duplicate_group_id": {
                    "description": "An identifier to use when saving/detecting hash duplicates.\nThis way you can allow to have the same document scanned more than once for multiple groups.\nWhen doing a scan, the combination of the Hash Group ID and the document Hash will be used to detect duplicates.\nThis value is saved hashed on our side. Common use cases: Company ID, Campaign ID, User ID.",
                    "type": "string",
                    "x-go-name": "HashDuplicateGroupID"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/parseDocumentResponseEUPassport"
          },
          "400": {
            "$ref": "#/components/responses/validationErrorResponseResponse"
          },
          "500": {
            "$ref": "#/components/responses/errorResponse"
          }
        }
      }
    },
    "/parseDocument/identity": {
      "post": {
        "security": [
          {
            "APIPublicKeyQueryParam": [
              "[]"
            ]
          },
          {
            "APIPublicKeyHeader": [
              "[]"
            ]
          },
          {
            "APIKeyQueryParam": [
              "[]"
            ]
          },
          {
            "APIKeyHeader": [
              "[]"
            ]
          }
        ],
        "description": "Body is the raw document file in the ```document``` field. You can also give a URL in the ```url``` field to let the API download the file.\nNote: you need to either pass a document or a URL.\nThe service accepts image (jpg/png/gif/heic/heif) and PDF files.\n\nThe template (when available) has to be given in the ```template``` value or in the query argument ```template```. The query overwrites the form value.\n\nThe output is not the same for every template.\n\nNote: ***this request is in multipart/form-data or application/json***.",
        "tags": [
          "Parsing"
        ],
        "summary": "Template Identity Document: Parse GIF, PNG, JPG, HEIC/HEIF or PDF file.",
        "operationId": "parseDocumentIdentityDocument",
        "requestBody": {
          "$ref": "#/components/requestBodies/parseDocumentIdentityDocument"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/parseDocumentResponseIdentityDocument"
          },
          "400": {
            "$ref": "#/components/responses/validationErrorResponseResponse"
          },
          "500": {
            "$ref": "#/components/responses/errorResponse"
          }
        }
      }
    },
    "/parseDocument/menu_card": {
      "post": {
        "security": [
          {
            "APIPublicKeyQueryParam": [
              "[]"
            ]
          },
          {
            "APIPublicKeyHeader": [
              "[]"
            ]
          },
          {
            "APIKeyQueryParam": [
              "[]"
            ]
          },
          {
            "APIKeyHeader": [
              "[]"
            ]
          }
        ],
        "description": "Body is the raw document file in the ```document``` field. You can also give a URL in the ```url``` field to let the API download the file.\nNote: you need to either pass a document or a URL.\nThe service accepts image (jpg/png/gif/heic/heif) and PDF files.\n\nThe template (when available) has to be given in the ```template``` value or in the query argument ```template```. The query overwrites the form value.\n\nNote: ***this request is in multipart/form-data or application/json***.",
        "tags": [
          "Parsing"
        ],
        "summary": "Template Menu card: Parse GIF, PNG, JPG, HEIC/HEIF or PDF file.",
        "operationId": "parseDocumentMenuCard",
        "requestBody": {
          "$ref": "#/components/requestBodies/parseDocumentIdentityDocument"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/parseDocumentResponseMenuCard"
          },
          "400": {
            "$ref": "#/components/responses/validationErrorResponseResponse"
          },
          "500": {
            "$ref": "#/components/responses/errorResponse"
          }
        }
      }
    },
    "/parseStructuredPDF": {
      "post": {
        "description": "Only use this when you are sure your PDF is plain text and not an image of a document.\n\nResults in quicker / better parses in cases where the PDF only consists of plain text.\n\nBody is the raw document file in the document field.\n\nThe template (when available) has to be given in the template value.\n\nThe output is not the same for every template.\n\nNote: ***this request is in multipart/form-data***.",
        "tags": [
          "Parsing"
        ],
        "summary": "Parse a structured PDF file.",
        "operationId": "parseStructuredPDF",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "document": {
                    "description": "The passport document to scan as a multipart/form-data file.",
                    "type": "string",
                    "format": "binary",
                    "x-go-name": "PDFUpload"
                  },
                  "template": {
                    "description": "The template to use for parsing. Empty for default parsing.",
                    "type": "string",
                    "x-go-name": "Template"
                  },
                  "user_data": {
                    "description": "Extra metadata in JSON format to give to the parser. Only works with templates that are configured to accept user data.",
                    "type": "string",
                    "x-go-name": "UserData"
                  },
                  "hash_duplicate_group_id": {
                    "description": "An identifier to use when saving/detecting hash duplicates.\nThis way you can allow to have the same document scanned more than once for multiple groups.\nWhen doing a scan, the combination of the Hash Group ID and the document Hash will be used to detect duplicates.\nThis value is saved hashed on our side. Common use cases: Company ID, Campaign ID, User ID.",
                    "type": "string",
                    "x-go-name": "HashDuplicateGroupID"
                  }
                },
                "required": [
                  "document"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/parseStructuredPDFResponse"
          },
          "400": {
            "$ref": "#/components/responses/validationErrorResponseResponse"
          },
          "500": {
            "$ref": "#/components/responses/errorResponse"
          }
        }
      }
    },
    "/parseText": {
      "post": {
        "description": "The template (when available) has to be given in the template property.\n\nThe output is not the same for every template.",
        "tags": [
          "Parsing"
        ],
        "summary": "Parse plain text.",
        "operationId": "parseText",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TextUploadForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/parseTextResponse"
          },
          "400": {
            "$ref": "#/components/responses/validationErrorResponseResponse"
          },
          "500": {
            "$ref": "#/components/responses/errorResponse"
          }
        }
      }
    },
    "/publicKey": {
      "get": {
        "security": [
          {
            "APIPublicKeyQueryParam": [
              "[]"
            ]
          },
          {
            "APIPublicKeyHeader": [
              "[]"
            ]
          }
        ],
        "description": "This call can only be made with public key authentication.",
        "tags": [
          "PublicKey"
        ],
        "summary": "Get information about the public key.",
        "operationId": "publicKeyInfo",
        "responses": {
          "200": {
            "$ref": "#/components/responses/getPublicKeyInfoResponse"
          },
          "500": {
            "$ref": "#/components/responses/errorResponse"
          }
        }
      },
      "post": {
        "description": "The public key API is not available for every API key, we have to enable this for you.",
        "tags": [
          "PublicKey"
        ],
        "summary": "Create a public key.",
        "operationId": "createPublicKey",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePublicKeyForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/createPublicKeyResponse"
          },
          "500": {
            "$ref": "#/components/responses/errorResponse"
          }
        }
      }
    },
    "/publicKey/{PublicKeyID}": {
      "get": {
        "tags": [
          "PublicKey"
        ],
        "summary": "Get information about the public key by a public key ID.",
        "operationId": "publicKeyInfoByID",
        "parameters": [
          {
            "description": "The ID of the public key.",
            "name": "PublicKeyID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/getPublicKeyInfoResponse"
          },
          "500": {
            "$ref": "#/components/responses/errorResponse"
          }
        }
      }
    },
    "/publicKey/{PublicKeyID}/statistics": {
      "get": {
        "tags": [
          "PublicKey"
        ],
        "summary": "Get API usage statistics for the public key.",
        "operationId": "publicKeyStatistics",
        "parameters": [
          {
            "description": "The ID of the public key.",
            "name": "PublicKeyID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "x-go-name": "DateMin",
            "description": "The minimum date of the receipts.",
            "name": "date_min",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "x-go-name": "DateMax",
            "description": "The maximum date of the receipts.",
            "name": "date_max",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "x-go-name": "Granularity",
            "description": "The granularity of the stat.",
            "name": "granularity",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "year",
                "month",
                "day",
                "hour"
              ],
              "default": "day"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/publicKeyStatisticsResponse"
          },
          "500": {
            "$ref": "#/components/responses/errorResponse"
          }
        }
      }
    },
    "/statistics": {
      "get": {
        "tags": [
          "Information"
        ],
        "summary": "Get API usage statistics.",
        "operationId": "listStatisticsInput",
        "parameters": [
          {
            "x-go-name": "DateMin",
            "description": "The minimum date of the receipts.",
            "name": "date_min",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "x-go-name": "DateMax",
            "description": "The maximum date of the receipts.",
            "name": "date_max",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "x-go-name": "Granularity",
            "description": "The granularity of the stat.",
            "name": "granularity",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "year",
                "month",
                "day",
                "hour"
              ],
              "default": "day"
            }
          },
          {
            "x-go-name": "PublicKeyID",
            "description": "The id of the public key.",
            "name": "public_key_id",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "uint64"
            }
          },
          {
            "x-go-name": "PublicKeyExternalID",
            "description": "The external identifier of the public key.",
            "name": "public_key_external_id",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "x-go-name": "IncludeSubKeys",
            "description": "Whether to include sub keys in the stats.",
            "name": "include_sub_keys",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "1",
                "0"
              ],
              "default": "1"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/getStatisticsResponse"
          },
          "500": {
            "$ref": "#/components/responses/errorResponse"
          }
        }
      }
    },
    "/subKey": {
      "get": {
        "tags": [
          "SubKey"
        ],
        "summary": "Get a list of sub keys.",
        "operationId": "subKeyList",
        "parameters": [
          {
            "x-go-name": "PerPage",
            "description": "The amount of results per page.",
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 10,
              "maximum": 1000,
              "default": 10
            }
          },
          {
            "x-go-name": "Page",
            "description": "The page to load.",
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 1,
              "default": 1
            }
          },
          {
            "x-go-name": "SortOrder",
            "description": "The order to sort.",
            "name": "sort_order",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "DESC",
                "ASC"
              ],
              "default": "ASC"
            }
          },
          {
            "x-go-name": "SortField",
            "description": "The field to sort on.",
            "name": "sort_field",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "CreatedAt",
                "UpdatedAt",
                "ID"
              ],
              "default": "CreatedAt"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/subKeyListResponse"
          },
          "500": {
            "$ref": "#/components/responses/errorResponse"
          }
        }
      },
      "post": {
        "description": "The sub key API is not available for every API key, we have to enable this for you.",
        "tags": [
          "SubKey"
        ],
        "summary": "Create a sub key.",
        "operationId": "createSubKey",
        "requestBody": {
          "$ref": "#/components/requestBodies/SubKeyForm"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/createSubKeyResponse"
          },
          "500": {
            "$ref": "#/components/responses/errorResponse"
          }
        }
      }
    },
    "/subKey/{SubKeyID}": {
      "get": {
        "tags": [
          "SubKey"
        ],
        "summary": "Get the sub key.",
        "operationId": "getSubKey",
        "parameters": [
          {
            "description": "The ID of the sub key.",
            "name": "SubKeyID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/getSubKeyResponse"
          },
          "500": {
            "$ref": "#/components/responses/errorResponse"
          }
        }
      },
      "delete": {
        "tags": [
          "SubKey"
        ],
        "summary": "Delete the sub key.",
        "operationId": "deleteSubKey",
        "parameters": [
          {
            "description": "The ID of the sub key.",
            "name": "SubKeyID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/deleteSubKeyResponse"
          },
          "500": {
            "$ref": "#/components/responses/errorResponse"
          }
        }
      },
      "patch": {
        "tags": [
          "SubKey"
        ],
        "summary": "Update the sub key.",
        "operationId": "updateSubKey",
        "parameters": [
          {
            "description": "The ID of the sub key.",
            "name": "SubKeyID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/SubKeyForm"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/updateSubKeyResponse"
          },
          "500": {
            "$ref": "#/components/responses/errorResponse"
          }
        }
      }
    },
    "/subKey/{SubKeyID}/statistics": {
      "get": {
        "tags": [
          "SubKey"
        ],
        "summary": "Get API usage statistics for the sub key.",
        "operationId": "subKeyStatistics",
        "parameters": [
          {
            "description": "The ID of the sub key.",
            "name": "SubKeyID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "x-go-name": "DateMin",
            "description": "The minimum date of the receipts.",
            "name": "date_min",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "x-go-name": "DateMax",
            "description": "The maximum date of the receipts.",
            "name": "date_max",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "x-go-name": "Granularity",
            "description": "The granularity of the stat.",
            "name": "granularity",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "year",
                "month",
                "day",
                "hour"
              ],
              "default": "day"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/subKeyStatisticsResponse"
          },
          "500": {
            "$ref": "#/components/responses/errorResponse"
          }
        }
      }
    },
    "/templates": {
      "get": {
        "tags": [
          "Information"
        ],
        "summary": "List of available templates.",
        "operationId": "getTemplates",
        "responses": {
          "200": {
            "$ref": "#/components/responses/getTemplatesResponse"
          },
          "500": {
            "$ref": "#/components/responses/errorResponse"
          }
        }
      }
    },
    "/userDataSet": {
      "get": {
        "tags": [
          "UserDataSets"
        ],
        "summary": "List user data sets.",
        "operationId": "getUserDataSets",
        "parameters": [
          {
            "x-go-name": "PerPage",
            "description": "The amount of results per page.",
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 10,
              "maximum": 1000,
              "default": 10
            }
          },
          {
            "x-go-name": "Page",
            "description": "The page to load.",
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 1,
              "default": 1
            }
          },
          {
            "x-go-name": "SortOrder",
            "description": "The order to sort.",
            "name": "sort_order",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "DESC",
                "ASC"
              ],
              "default": "ASC"
            }
          },
          {
            "x-go-name": "SortField",
            "description": "The field to sort on.",
            "name": "sort_field",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "CreatedAt",
                "UpdatedAt",
                "ID",
                "Type",
                "ExternalID",
                "LastSyncDate"
              ],
              "default": "CreatedAt"
            }
          },
          {
            "x-go-name": "Type",
            "description": "The types to filter on. Separated by a comma.\nWhen no types are given, all types are returned.",
            "name": "type",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "x-go-name": "ExternalID",
            "description": "The external IDs to filter on. Separated by a comma.\nWhen no external IDs are given, items of all external ids are returned.",
            "name": "external_id",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "x-go-name": "Filter",
            "description": "A filter to use for the list.\nThis query can be used multiple times.\n\nFormat is:\n\nCreatedAt:{value}:{operator}\n\nUpdatedAt:{value}:{operator}\n\nID:{value}:{operator}\n\nType:{value}:{operator}\n\nExternalID:{value}:{operator}\n\nLastSyncDate:{value}:{operator}\n\n{operator} is one of:\n\nEQ (Equal)\n\nNEQ (Not equal)\n\nGT (Greater than)\n\nGTE (Greater than or equal)\n\nLT (Lower than)\n\nLTE (Lower than or equal)\n\nLIKE\n\nNULL (value can be empty)\n\nNOTNULL (value can be empty)",
            "name": "filter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/getUserDataSetsResponse"
          },
          "500": {
            "$ref": "#/components/responses/errorResponse"
          }
        }
      },
      "post": {
        "tags": [
          "UserDataSets"
        ],
        "summary": "Create a new user data set.",
        "operationId": "createUserDataSet",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/createUserDataSetForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/createUserDataSetResponse"
          },
          "500": {
            "$ref": "#/components/responses/errorResponse"
          }
        }
      }
    },
    "/userDataSet/{ID}": {
      "get": {
        "tags": [
          "UserDataSets"
        ],
        "summary": "Get user data set.",
        "operationId": "getUserDataSet",
        "parameters": [
          {
            "description": "The ID of the user data set. To use the external ID, prefix the ID with E-{type}-.",
            "name": "ID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "uint64"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/getUserDataSetResponse"
          },
          "500": {
            "$ref": "#/components/responses/errorResponse"
          }
        }
      },
      "delete": {
        "tags": [
          "UserDataSets"
        ],
        "summary": "Delete user data set.",
        "operationId": "deleteUserDataSet",
        "parameters": [
          {
            "description": "The ID of the user data set. To use the external ID, prefix the ID with E-{type}-.",
            "name": "ID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "uint64"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/deleteUserDataSetResponse"
          },
          "500": {
            "$ref": "#/components/responses/errorResponse"
          }
        }
      },
      "patch": {
        "tags": [
          "UserDataSets"
        ],
        "summary": "Update user data set.",
        "operationId": "updateUserDataSet",
        "parameters": [
          {
            "description": "The ID of the user data set. To use the external ID, prefix the ID with E-{type}-.",
            "name": "ID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "uint64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/updateUserDataSetForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/updateUserDataSetResponse"
          },
          "500": {
            "$ref": "#/components/responses/errorResponse"
          }
        }
      }
    },
    "/userDataSet/{ID}/records": {
      "get": {
        "description": "Note: we do not output the values of the record for privacy reasons.",
        "tags": [
          "UserDataSets"
        ],
        "summary": "List user data set records.",
        "operationId": "getUserDataSetRecords",
        "parameters": [
          {
            "x-go-name": "PerPage",
            "description": "The amount of results per page.",
            "name": "per_page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 10,
              "maximum": 1000,
              "default": 10
            }
          },
          {
            "x-go-name": "Page",
            "description": "The page to load.",
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 1,
              "default": 1
            }
          },
          {
            "x-go-name": "SortOrder",
            "description": "The order to sort.",
            "name": "sort_order",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "DESC",
                "ASC"
              ],
              "default": "ASC"
            }
          },
          {
            "x-go-name": "SortField",
            "description": "The field to sort on.",
            "name": "sort_field",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "CreatedAt",
                "UpdatedAt",
                "ID",
                "ExternalID",
                "LastSyncDate"
              ],
              "default": "CreatedAt"
            }
          },
          {
            "x-go-name": "Type",
            "description": "The types to filter on. Separated by a comma.\nWhen no types are given, all types are returned.",
            "name": "type",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "x-go-name": "ExternalID",
            "description": "The external IDs to filter on. Separated by a comma.\nWhen no external IDs are given, items of all external ids are returned.",
            "name": "external_id",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "x-go-name": "Filter",
            "description": "A filter to use for the list.\nThis query can be used multiple times.\n\nFormat is:\n\nCreatedAt:{value}:{operator}\n\nUpdatedAt:{value}:{operator}\n\nID:{value}:{operator}\n\nExternalID:{value}:{operator}\n\nLastSyncDate:{value}:{operator}\n\n{operator} is one of:\n\nEQ (Equal)\n\nNEQ (Not equal)\n\nGT (Greater than)\n\nGTE (Greater than or equal)\n\nLT (Lower than)\n\nLTE (Lower than or equal)\n\nLIKE\n\nNULL (value can be empty)\n\nNOTNULL (value can be empty)",
            "name": "filter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The ID of the user data set. To use the external ID, prefix the ID with E-{type}-.",
            "name": "ID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "uint64"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/getUserDataSetRecordsResponse"
          },
          "500": {
            "$ref": "#/components/responses/errorResponse"
          }
        }
      },
      "post": {
        "tags": [
          "UserDataSets"
        ],
        "summary": "Create a new user data set record.",
        "operationId": "createUserDataSetRecord",
        "parameters": [
          {
            "description": "The ID of the user data set. To use the external ID, prefix the ID with E-{type}-.",
            "name": "ID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "uint64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/createUserDataSetRecordForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/createUserDataSetRecordResponse"
          },
          "500": {
            "$ref": "#/components/responses/errorResponse"
          }
        }
      }
    },
    "/userDataSet/{ID}/records/bulk": {
      "post": {
        "tags": [
          "UserDataSets"
        ],
        "summary": "Bulk create/update/delete user data set record.",
        "operationId": "bulkUserDataSetRecord",
        "parameters": [
          {
            "description": "The ID of the user data set. To use the external ID, prefix the ID with E-{type}-.",
            "name": "ID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "uint64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/bulkUserDataSetRecordForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/bulkUserDataSetRecordResponse"
          },
          "500": {
            "$ref": "#/components/responses/errorResponse"
          }
        }
      }
    },
    "/userDataSet/{ID}/records/{RecordID}": {
      "get": {
        "description": "Note: we do not output the values of the record for privacy reasons.",
        "tags": [
          "UserDataSets"
        ],
        "summary": "Get user data set record.",
        "operationId": "getUserDataSetRecord",
        "parameters": [
          {
            "description": "The ID of the user data set. To use the external ID, prefix the ID with E-{type}-.",
            "name": "ID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "uint64"
            }
          },
          {
            "description": "The ID of the user data set record. To use the external ID, prefix the ID with E.",
            "name": "RecordID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "uint64"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/getUserDataSetRecordResponse"
          },
          "500": {
            "$ref": "#/components/responses/errorResponse"
          }
        }
      },
      "delete": {
        "tags": [
          "UserDataSets"
        ],
        "summary": "Delete user data set record.",
        "operationId": "deleteUserDataSetRecord",
        "parameters": [
          {
            "description": "The ID of the user data set. To use the external ID, prefix the ID with E-{type}-.",
            "name": "ID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "uint64"
            }
          },
          {
            "description": "The ID of the user data set record. To use the external ID, prefix the ID with E.",
            "name": "RecordID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "uint64"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/deleteUserDataSetRecordResponse"
          },
          "500": {
            "$ref": "#/components/responses/errorResponse"
          }
        }
      },
      "patch": {
        "tags": [
          "UserDataSets"
        ],
        "summary": "Update user data set record.",
        "operationId": "updateUserDataSetRecord",
        "parameters": [
          {
            "description": "The ID of the user data set. To use the external ID, prefix the ID with E-{type}-.",
            "name": "ID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "uint64"
            }
          },
          {
            "description": "The ID of the user data set record. To use the external ID, prefix the ID with E.",
            "name": "RecordID",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "uint64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/updateUserDataSetRecordForm"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/updateUserDataSetRecordResponse"
          },
          "500": {
            "$ref": "#/components/responses/errorResponse"
          }
        }
      }
    }
  },
  "security": [
    {
      "APIKeyHeader": [
        "[]"
      ]
    }
  ],
  "servers": [
    {
      "url": "https://custom-ocr.klippa.com/api/v1"
    }
  ],
  "components": {
    "responses": {
      "bulkUserDataSetRecordResponse": {
        "description": "Response with the user data set.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/bulkUserDataSetRecordBody"
            }
          }
        }
      },
      "createDataSetResponse": {
        "description": "Response with the created dataset",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/createDataSetResponseBody"
            }
          }
        }
      },
      "createDocumentResponse": {
        "description": "Response with the created document",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/createDocumentBody"
            }
          }
        }
      },
      "createIdentityVerificationSessionResponse": {
        "description": "Response with the new IdentityVerification session.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/createIdentityVerificationSessionBody"
            }
          }
        }
      },
      "createPublicKeyResponse": {
        "description": "Response with the new public key.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/createPublicKeyBody"
            }
          }
        }
      },
      "createSubKeyResponse": {
        "description": "Response with the new key.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/createSubKeyBody"
            }
          }
        }
      },
      "createUserDataSetRecordResponse": {
        "description": "Response with the user data record.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/createUserDataSetRecordResponseBody"
            }
          }
        }
      },
      "createUserDataSetResponse": {
        "description": "Response with the user data set.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/createUserDataSetResponseBody"
            }
          }
        }
      },
      "deleteDataSetResponse": {
        "description": "Response with an empty body",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/deleteDataSetRecordBody"
            }
          }
        }
      },
      "deleteDocumentResponse": {
        "description": "Response with an empty body",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/deleteDocumentRecordBody"
            }
          }
        }
      },
      "deleteIdentityVerificationSessionResponse": {
        "description": "Response with an empty body.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/deleteIdentityVerificationSessionBody"
            }
          }
        }
      },
      "deleteSubKeyResponse": {
        "description": "Response about the deleted sub key.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/DeleteSubKeyBody"
            }
          }
        }
      },
      "deleteUserDataSetRecordResponse": {
        "description": "Response with an empty body.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/deleteUserDataSetRecordBody"
            }
          }
        }
      },
      "deleteUserDataSetResponse": {
        "description": "Response with an empty body.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/deleteUserDataSetBody"
            }
          }
        }
      },
      "errorResponse": {
        "description": "The serializable Error structure.\n\nUsed for any common errors.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "fileResponse": {
        "description": "A raw file.",
        "content": {
          "application/json": {
            "schema": {
              "type": "string",
              "format": "binary"
            }
          }
        }
      },
      "getAPIIndexResponse": {
        "description": "Information about the API.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/APIIndexBody"
            }
          }
        }
      },
      "getCreditsResponse": {
        "description": "Response with available credits.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/getCreditsBody"
            }
          }
        }
      },
      "getDataSetResponse": {
        "description": "Response with the dataset",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/getDataSetBody"
            }
          }
        }
      },
      "getDataSetsResponse": {
        "description": "Response with the data sets.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/getDataSetsBody"
            }
          }
        }
      },
      "getDocumentAnnotationsResponse": {
        "description": "Response with the annotations of the document",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/getDocumentAnnotationsBody"
            }
          }
        }
      },
      "getDocumentResponse": {
        "description": "Response with the document",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/getDocumentBody"
            }
          }
        }
      },
      "getDocumentsResponse": {
        "description": "Response with the documents.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/getDocumentsBody"
            }
          }
        }
      },
      "getFieldsResponse": {
        "description": "Response with available fields.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/getFieldsBody"
            }
          }
        }
      },
      "getIdentityVerificationSDKSessionResponse": {
        "description": "Response with the IdentityVerification session.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/getIdentityVerificationSDKSessionBody"
            }
          }
        }
      },
      "getIdentityVerificationSessionResponse": {
        "description": "Response with the IdentityVerification session.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/getIdentityVerificationSessionBody"
            }
          }
        }
      },
      "getPublicKeyInfoResponse": {
        "description": "Response with public key details.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetPublicKeyInfoBody"
            }
          }
        }
      },
      "getStatisticsResponse": {
        "description": "Response with statistics of the API usage.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/getStatisticsBody"
            }
          }
        }
      },
      "getSubKeyResponse": {
        "description": "Response with the sub key.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetSubKeyBody"
            }
          }
        }
      },
      "getTemplatesResponse": {
        "description": "Response with available templates.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/getTemplatesBody"
            }
          }
        }
      },
      "getUserDataSetRecordResponse": {
        "description": "Response with the user data set.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/getUserDataSetRecordBody"
            }
          }
        }
      },
      "getUserDataSetRecordsResponse": {
        "description": "Response with the user data sets.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/getUserDataSetRecordsBody"
            }
          }
        }
      },
      "getUserDataSetResponse": {
        "description": "Response with the user data set.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/getUserDataSetBody"
            }
          }
        }
      },
      "getUserDataSetsResponse": {
        "description": "Response with the user data sets.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/getUserDataSetsBody"
            }
          }
        }
      },
      "identityVerificationSDKSessionUploadResponse": {
        "description": "Response with the IdentityVerification session.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/identityVerificationSDKSessionUploadBody"
            }
          }
        }
      },
      "listIdentityVerificationSessionsResponse": {
        "description": "Response with the IdentityVerification sessions.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/listIdentityVerificationSessionsBody"
            }
          }
        }
      },
      "parseDocumentResponse": {
        "description": "The parsed document with the default template.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ReceiptBody"
            }
          }
        }
      },
      "parseDocumentResponseEUPassport": {
        "description": "The parsed document with the eu-passport template.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/EuropeanPassportBody"
            }
          }
        }
      },
      "parseDocumentResponseIdentityDocument": {
        "description": "The parsed document with the identity_document template.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/IdentityDocumentBody"
            }
          }
        }
      },
      "parseDocumentResponseMenuCard": {
        "description": "The parsed document with the menu_card template.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/MenuCardBody"
            }
          }
        }
      },
      "parseStructuredPDFResponse": {
        "description": "The parsed PDF.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ReceiptBody"
            }
          }
        }
      },
      "parseTextResponse": {
        "description": "The parsed text.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ReceiptBody"
            }
          }
        }
      },
      "publicKeyStatisticsResponse": {
        "description": "Response with statistics of the credit usage for a public key.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/publicKeyStatisticsBody"
            }
          }
        }
      },
      "subKeyListResponse": {
        "description": "Response with sub key details.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/subKeyListBody"
            }
          }
        }
      },
      "subKeyStatisticsResponse": {
        "description": "Response with statistics of the credit usage for a sub key.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/subKeyStatisticsBody"
            }
          }
        }
      },
      "updateIdentityVerificationSessionResponse": {
        "description": "Response with the updated IdentityVerification session.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/updateIdentityVerificationSessionBody"
            }
          }
        }
      },
      "updateSubKeyResponse": {
        "description": "Response with the updated sub key.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/UpdateSubKeyBody"
            }
          }
        }
      },
      "updateUserDataSetRecordResponse": {
        "description": "Response with the user data set record.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/updateUserDataSetRecordBody"
            }
          }
        }
      },
      "updateUserDataSetResponse": {
        "description": "Response with the user data set.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/updateUserDataSetBody"
            }
          }
        }
      },
      "validationErrorResponseResponse": {
        "description": "The serializable Error with extra data structure.\n\nUsed for any common for form validation errors.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ValidationError"
            }
          }
        }
      }
    },
    "requestBodies": {
      "createOrUpdateIdentityVerificationSessionForm": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/createOrUpdateIdentityVerificationSessionForm"
            }
          }
        }
      },
      "SubKeyForm": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/SubKeyForm"
            }
          }
        }
      },
      "parseDocumentIdentityDocument": {
        "content": {
          "multipart/form-data": {
            "schema": {
              "type": "object",
              "properties": {
                "document": {
                  "description": "The identity document to scan as a multipart/form-data file. You can add this key multiple times to scan multiple parts of a identity document at once. If you are calling this method using JSON, the document field allows you to send a base64 string or an array of base64 strings for multiple files. Every file is seen as 1 scan.",
                  "type": "string",
                  "format": "binary",
                  "x-go-name": "Document"
                },
                "url": {
                  "description": "The identity document to scan as a file available at this URL. The request should be completed within 30 seconds. You can add this key multiple times to scan multiple parts of a identity document at once. Every url is seen as 1 scan.",
                  "type": "string",
                  "x-go-name": "URL"
                },
                "template": {
                  "description": "The template to use for parsing. Empty for default parsing.",
                  "type": "string",
                  "default": "identity",
                  "x-go-name": "Template"
                },
                "pdf_text_extraction": {
                  "description": "PDF Text extraction.\nUse full when you want the best quality scan, use fast when you want fast scan results.\nFast will try to extract the text from the PDF. Full will actually scan the full PDF, which is slower.\nSpeed difference: full: ~5s, fast: ~2.5.\nWhen a PDF does not contain text, e.g., scans of documents and pictures, we will automatically use full for that request.\nThis value is ignored for non-PDF requests.",
                  "type": "string",
                  "enum": [
                    "fast",
                    "full"
                  ],
                  "default": "fast",
                  "x-go-name": "PDFTextExtraction"
                },
                "user_data": {
                  "description": "Extra metadata in JSON format to give to the parser. Only works with templates that are configured to accept user data.",
                  "type": "string",
                  "x-go-name": "UserData"
                },
                "user_data_set_external_id": {
                  "description": "The external ID of the user data set.",
                  "type": "string",
                  "x-go-name": "UserDataSetExternalID"
                },
                "hash_duplicate_group_id": {
                  "description": "An identifier to use when saving/detecting hash duplicates.\nThis way you can allow to have the same document scanned more than once for multiple groups.\nWhen doing a scan, the combination of the Hash Group ID and the document Hash will be used to detect duplicates.\nThis value is saved hashed on our side. Common use cases: Company ID, Campaign ID, User ID.",
                  "type": "string",
                  "x-go-name": "HashDuplicateGroupID"
                }
              }
            }
          }
        }
      }
    },
    "securitySchemes": {
      "APIKeyHeader": {
        "type": "apiKey",
        "name": "X-Auth-Key",
        "in": "header"
      },
      "APIPublicKeyHeader": {
        "type": "apiKey",
        "name": "X-Auth-Public-Key",
        "in": "header"
      }
    },
    "schemas": {
      "APIIndex": {
        "type": "object",
        "properties": {
          "Branch": {
            "type": "string"
          },
          "Commit": {
            "type": "string"
          },
          "Contact": {
            "type": "string"
          },
          "Title": {
            "type": "string"
          },
          "Version": {
            "type": "string"
          }
        },
        "x-go-package": "git.devpros.nl/klippa/custom-ocr/controllers/GlobalController"
      },
      "APIIndexBody": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/APIIndex"
          },
          "request_id": {
            "type": "string",
            "x-go-name": "RequestId"
          },
          "result": {
            "type": "string",
            "x-go-name": "Result"
          }
        },
        "x-go-package": "git.devpros.nl/klippa/custom-ocr/controllers/GlobalController"
      },
      "Barcode": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "",
              "AZTEC",
              "CODABAR",
              "CODE39",
              "CODE93",
              "CODE128",
              "DATAMATRIX",
              "EAN8",
              "EAN13",
              "ITF",
              "MAXICODE",
              "PDF417",
              "QRCODE",
              "RSS14",
              "RSSEXPANDED",
              "UPCA",
              "UPCE"
            ],
            "x-go-name": "Type"
          },
          "value": {
            "description": "The contents of the barcode",
            "type": "string",
            "x-go-name": "Value"
          }
        },
        "x-go-package": "git.devpros.nl/klippa/custom-ocr/helpers/ocr_api"
      },
      "CreatePublicKeyForm": {
        "type": "object",
        "required": [
          "scan_limit",
          "valid_time"
        ],
        "properties": {
          "external_id": {
            "type": "string",
            "x-go-name": "ExternalID",
            "example": "customer or user id. You can use this ID to get more specific statistics using the statistics endpoint."
          },
          "scan_limit": {
            "description": "The amount of scans the public key can do.",
            "type": "integer",
            "format": "int64",
            "maximum": 100,
            "minimum": 1,
            "x-go-name": "ScanLimit"
          },
          "valid_time": {
            "description": "The amount of seconds the public key should be valid. With a minimum of 1 minute (60) and a maximum of 1 hour (3600).",
            "type": "integer",
            "format": "int64",
            "maximum": 3600,
            "minimum": 60,
            "x-go-name": "ValidTime"
          }
        },
        "x-go-package": "git.devpros.nl/klippa/custom-ocr/controllers/PublicKeyController"
      },
      "DataSet": {
        "type": "object",
        "properties": {
          "CreatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "DeletedAt": {
            "type": "string",
            "format": "date-time"
          },
          "DocumentAnnotationSchema": {
            "description": "The schema of the annotations of documents in this set.",
            "type": "string"
          },
          "ExternalID": {
            "description": "The external ID of this dataset",
            "type": "string",
            "maxLength": 255
          },
          "ID": {
            "type": "integer",
            "format": "uint64"
          },
          "UpdatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "x-go-package": "git.devpros.nl/klippa/custom-ocr/models"
      },
      "DataSetForm": {
        "type": "object",
        "properties": {
          "DocumentAnnotationSchema": {
            "type": "string",
            "enum": [
              "invoices_and_receipts"
            ]
          },
          "ExternalID": {
            "description": "An external identifier for this dataset",
            "type": "string"
          }
        },
        "x-go-package": "git.devpros.nl/klippa/custom-ocr/controllers/DataSetController"
      },
      "DeleteSubKeyBody": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/DeletedObjectData"
          },
          "request_id": {
            "type": "string",
            "x-go-name": "RequestId"
          },
          "result": {
            "type": "string",
            "x-go-name": "Result"
          }
        },
        "x-go-package": "git.devpros.nl/klippa/custom-ocr/controllers/SubKeyController"
      },
      "DeletedObjectData": {
        "type": "object",
        "title": "When an API call has no output data.",
        "properties": {
          "deleted": {
            "type": "boolean",
            "x-go-name": "Deleted"
          }
        },
        "x-go-package": "git.devpros.nl/klippa/custom-ocr/helpers/responses"
      },
      "Document": {
        "type": "object",
        "properties": {
          "CreatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "DataSets": {
            "description": "The datasets that this document belongs to",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DataSet"
            }
          },
          "DeletedAt": {
            "type": "string",
            "format": "date-time"
          },
          "ExternalID": {
            "description": "The external ID of this document",
            "type": "string",
            "maxLength": 255
          },
          "ID": {
            "type": "integer",
            "format": "uint64"
          },
          "UpdatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "UserID": {
            "description": "The external UserId of this document",
            "type": "string"
          }
        },
        "x-go-package": "git.devpros.nl/klippa/custom-ocr/models"
      },
      "Error": {
        "type": "object",
        "title": "The serializable Error structure.",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "ErrorCode"
          },
          "message": {
            "type": "string",
            "x-go-name": "ErrorMessage"
          },
          "request_id": {
            "type": "string",
            "x-go-name": "RequestId"
          },
          "result": {
            "type": "string",
            "x-go-name": "Result"
          }
        },
        "x-go-package": "git.devpros.nl/klippa/custom-ocr/helpers/responses"
      },
      "Errors": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Error"
        },
        "x-go-package": "git.devpros.nl/klippa/custom-ocr/helpers/binding"
      },
      "EuropeanPassport": {
        "type": "object",
        "properties": {
          "authority": {
            "type": "string",
            "x-go-name": "Authority"
          },
          "date_of_birth": {
            "type": "string",
            "x-go-name": "DateOfBirth"
          },
          "date_of_expiry": {
            "type": "string",
            "x-go-name": "DateOfExpiry"
          },
          "date_of_issue": {
            "type": "string",
            "x-go-name": "DateOfIssue"
          },
          "document_code": {
            "type": "string",
            "x-go-name": "DocumentCode"
          },
          "document_number": {
            "type": "string",
            "x-go-name": "DocumentNumber"
          },
          "document_type": {
            "description": "European Passport.",
            "type": "string",
            "x-go-name": "DocumentType"
          },
          "gender": {
            "type": "string",
            "x-go-name": "Gender"
          },
          "given_names": {
            "type": "string",
            "x-go-name": "GivenNames"
          },
          "height": {
            "type": "string",
            "x-go-name": "Height"
          },
          "issuing_country": {
            "type": "string",
            "x-go-name": "IssuingCountry"
          },
          "nationality": {
            "type": "string",
            "x-go-name": "Nationality"
          },
          "personal_number": {
            "type": "string",
            "x-go-name": "PersonalNumber"
          },
          "place_of_birth": {
            "type": "string",
            "x-go-name": "PlaceOfBirth"
          },
          "raw_text": {
            "type": "string",
            "x-go-name": "RawText"
          },
          "surname": {
            "type": "string",
            "x-go-name": "Surname"
          }
        },
        "x-go-package": "git.devpros.nl/klippa/custom-ocr/controllers/ParseController"
      },
      "EuropeanPassportBody": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/EuropeanPassport"
          },
          "request_id": {
            "type": "string",
            "x-go-name": "RequestId"
          },
          "result": {
            "type": "string",
            "x-go-name": "Result"
          }
        },
        "x-go-package": "git.devpros.nl/klippa/custom-ocr/controllers/ParseController"
      },
      "FullIdentityDocument": {
        "type": "object",
        "properties": {
          "parsed": {
            "$ref": "#/components/schemas/IdentityDocument"
          },
          "raw_text": {
            "type": "string",
            "x-go-name": "RawText"
          }
        },
        "x-go-package": "git.devpros.nl/klippa/custom-ocr/controllers/ParseController"
      },
      "GetPublicKeyInfoBody": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/getPublicKeyInfo"
          },
          "request_id": {
            "type": "string",
            "x-go-name": "RequestId"
          },
          "result": {
            "type": "string",
            "x-go-name": "Result"
          }
        },
        "x-go-package": "git.devpros.nl/klippa/custom-ocr/controllers/PublicKeyController"
      },
      "GetSubKeyBody": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Key"
          },
          "request_id": {
            "type": "string",
            "x-go-name": "RequestId"
          },
          "result": {
            "type": "string",
            "x-go-name": "Result"
          }
        },
        "x-go-package": "git.devpros.nl/klippa/custom-ocr/controllers/SubKeyController"
      },
      "IdentityDocument": {
        "type": "object",
        "properties": {
          "address": {
            "$ref": "#/components/schemas/IdentityDocumentAddress"
          },
          "date_of_birth": {
            "$ref": "#/components/schemas/IdentityDocumentStringValue"
          },
          "date_of_expiry": {
            "$ref": "#/components/schemas/IdentityDocumentStringValue"
          },
          "date_of_issue": {
            "$ref": "#/components/schemas/IdentityDocumentStringValue"
          },
          "document_number": {
            "$ref": "#/components/schemas/IdentityDocumentStringValue"
          },
          "document_subtype": {
            "$ref": "#/components/schemas/IdentityDocumentStringValue"
          },
          "document_type": {
            "$ref": "#/components/schemas/IdentityDocumentStringValue"
          },
          "face": {
            "$ref": "#/components/schemas/IdentityDocumentImage"
          },
          "gender": {
            "$ref": "#/components/schemas/IdentityDocumentStringValue"
          },
          "given_names": {
            "$ref": "#/components/schemas/IdentityDocumentStringValue"
          },
          "height": {
            "$ref": "#/components/schemas/IdentityDocumentStringValue"
          },
          "identity_document": {
            "description": "The area(s) which were identified as a identity document",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IdentityDocumentImageAndValue"
            },
            "x-go-name": "IdentityDocument"
          },
          "issuing_country": {
            "$ref": "#/components/schemas/IdentityDocumentStringValue"
          },
          "issuing_institution": {
            "$ref": "#/components/schemas/IdentityDocumentStringValue"
          },
          "maiden_name": {
            "$ref": "#/components/schemas/IdentityDocumentStringValue"
          },
          "mrz": {
            "$ref": "#/components/schemas/IdentityDocumentStringValue"
          },
          "mrz_full_checksum": {
            "$ref": "#/components/schemas/IdentityDocumentStringValue"
          },
          "nationality": {
            "$ref": "#/components/schemas/IdentityDocumentStringValue"
          },
          "personal_number": {
            "$ref": "#/components/schemas/IdentityDocumentStringValue"
          },
          "place_of_birth": {
            "$ref": "#/components/schemas/IdentityDocumentStringValue"
          },
          "residency": {
            "$ref": "#/components/schemas/IdentityDocumentStringValue"
          },
          "signature": {
            "$ref": "#/components/schemas/IdentityDocumentImage"
          },
          "surname": {
            "$ref": "#/components/schemas/IdentityDocumentStringValue"
          }
        },
        "x-go-package": "git.devpros.nl/klippa/custom-ocr/helpers/ocr_api"
      },
      "IdentityDocumentAddress": {
        "type": "object",
        "properties": {
          "value": {
            "type": "object",
            "properties": {
              "city": {
                "type": "string",
                "x-go-name": "City"
              },
              "country": {
                "type": "string",
                "x-go-name": "Country"
              },
              "house_number": {
                "type": "string",
                "x-go-name": "HouseNumber"
              },
              "postcode": {
                "type": "string",
                "x-go-name": "Postcode"
              },
              "province": {
                "type": "string",
                "x-go-name": "Province"
              },
              "street_name": {
                "type": "string",
                "x-go-name": "StreetName"
              }
            },
            "x-go-name": "Value"
          }
        },
        "x-go-package": "git.devpros.nl/klippa/custom-ocr/helpers/ocr_api"
      },
      "IdentityDocumentBody": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/FullIdentityDocument"
          },
          "request_id": {
            "type": "string",
            "x-go-name": "RequestId"
          },
          "result": {
            "type": "string",
            "x-go-name": "Result"
          }
        },
        "x-go-package": "git.devpros.nl/klippa/custom-ocr/controllers/ParseController"
      },
      "IdentityDocumentImage": {
        "type": "object",
        "properties": {
          "image": {
            "description": "Image of the value",
            "type": "string",
            "x-go-name": "Image"
          },
          "value": {
            "description": "The image representation for the field",
            "type": "string",
            "x-go-name": "Value"
          }
        },
        "x-go-package": "git.devpros.nl/klippa/custom-ocr/helpers/ocr_api"
      },
      "IdentityDocumentImageAndValue": {
        "type": "object",
        "properties": {
          "image": {
            "description": "Image of the area from which the value was obtained",
            "type": "string",
            "x-go-name": "Image"
          },
          "value": {
            "description": "The text representation for the field",
            "type": "string",
            "x-go-name": "Value"
          }
        },
        "x-go-package": "git.devpros.nl/klippa/custom-ocr/helpers/ocr_api"
      },
      "IdentityDocumentStringValue": {
        "type": "object",
        "properties": {
          "value": {
            "description": "The text representation for the field",
            "type": "string",
            "x-go-name": "Value"
          }
        },
        "x-go-package": "git.devpros.nl/klippa/custom-ocr/helpers/ocr_api"
      },
      "IdentityVerificationSession": {
        "type": "object",
        "properties": {
          "AttachedIDBackPicturesCount": {
            "description": "The amount of pictures of the back of the ID that were uploaded.",
            "type": "integer",
            "format": "int64"
          },
          "AttachedIDFrontPicturesCount": {
            "description": "The amount of pictures of the front of the ID that were uploaded.",
            "type": "integer",
            "format": "int64"
          },
          "AttachedSelfiesCount": {
            "description": "The amount of selfies that were uploaded.",
            "type": "integer",
            "format": "int64"
          },
          "AttachedSignatures": {
            "description": "The amount of signatures that were uploaded.",
            "type": "integer",
            "format": "int64"
          },
          "CheckIDForSignature": {
            "description": "Whether to check if the ID has an signature.",
            "type": "boolean"
          },
          "CompareSelfiesWithID": {
            "description": "Whether to compare the selfies with the photos on the ID.",
            "type": "boolean"
          },
          "CompareSignatureWithID": {
            "description": "Whether to compare the signatures with the ID.",
            "type": "boolean"
          },
          "CreatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "DeletedAt": {
            "type": "string",
            "format": "date-time"
          },
          "ID": {
            "type": "integer",
            "format": "uint64"
          },
          "IDHasSignature": {
            "description": "Whether the ID has an signature.",
            "type": "boolean"
          },
          "KeyID": {
            "type": "integer",
            "format": "uint64"
          },
          "RequiredFields": {
            "description": "The required fields of the session.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IdentityVerificationSessionRequiredField"
            }
          },
          "RequiredIDBackPicturesCount": {
            "description": "The amount of pictures to be taken of the back of the ID.",
            "type": "integer",
            "format": "int64"
          },
          "RequiredIDFrontPicturesCount": {
            "description": "The amount of pictures to be taken of the front of the ID.",
            "type": "integer",
            "format": "int64"
          },
          "RequiredSelfiesCount": {
            "description": "The amount of selfies to be taken.",
            "type": "integer",
            "format": "int64"
          },
          "RequiredSignatures": {
            "description": "The amount of signatures to be taken.",
            "type": "integer",
            "format": "int64"
          },
          "Results": {
            "description": "The results of the session. Parsed values and uploaded files.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IdentityVerificationSessionResult"
            }
          },
          "SelfiesMatchWithID": {
            "description": "Whether the selfies matched with the ID.",
            "type": "boolean"
          },
          "SignatureMatchesWithID": {
            "description": "Whether the signatures matched with the one on the ID.",
            "type": "boolean"
          },
          "Token": {
            "type": "string"
          },
          "UpdatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "ValidUntil": {
            "description": "Until when the session is valid. After this time, the files and results are not available on our system anymore.",
            "type": "string",
            "format": "date-time"
          },
          "Validations": {
            "description": "The validations of the session. Compared and checked files.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IdentityVerificationSessionValidation"
            }
          }
        },
        "x-go-package": "git.devpros.nl/klippa/custom-ocr/models"
      },
      "IdentityVerificationSessionRequiredField": {
        "type": "object",
        "properties": {
          "CreatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "DeletedAt": {
            "type": "string",
            "format": "date-time"
          },
          "ID": {
            "type": "integer",
            "format": "uint64"
          },
          "IdentityVerificationSessionID": {
            "type": "integer",
            "format": "uint64"
          },
          "Name": {
            "description": "The name of the required value.",
            "type": "string",
            "enum": [
              "DocumentType",
              "DocumentSubType",
              "Nationality",
              "DocumentNumber",
              "Surname",
              "GivenNames",
              "DateOfBirth",
              "PersonalNumber",
              "PlaceOfBirth",
              "Gender",
              "Height",
              "DateOfIssue",
              "DateOfExpiry",
              "IssuingCountry",
              "IssuingInstitution",
              "Residency",
              "MRZ",
              "Selfie",
              "Picture",
              "CapturedSignature",
              "Face",
              "IdentityDocument"
            ]
          },
          "UpdatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "x-go-package": "git.devpros.nl/klippa/custom-ocr/models"
      },
      "IdentityVerificationSessionResponse": {
        "type": "object",
        "properties": {
          "Session": {
            "$ref": "#/components/schemas/IdentityVerificationSession"
          },
          "Status": {
            "$ref": "#/components/schemas/IdentityVerificationSessionStatus"
          }
        },
        "x-go-package": "git.devpros.nl/klippa/custom-ocr/models"
      },
      "IdentityVerificationSessionResult": {
        "type": "object",
        "properties": {
          "CreatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "DeletedAt": {
            "type": "string",
            "format": "date-time"
          },
          "ID": {
            "type": "integer",
            "format": "uint64"
          },
          "IdentityVerificationSessionID": {
            "type": "integer",
            "format": "uint64"
          },
          "Name": {
            "description": "The name of the parse result value.",
            "type": "string",
            "enum": [
              "DocumentType",
              "DocumentSubType",
              "Nationality",
              "DocumentNumber",
              "Surname",
              "GivenNames",
              "DateOfBirth",
              "PersonalNumber",
              "PlaceOfBirth",
              "Gender",
              "Height",
              "DateOfIssue",
              "DateOfExpiry",
              "IssuingCountry",
              "IssuingInstitution",
              "Residency",
              "MRZ",
              "Selfie",
              "Picture",
              "CapturedSignature",
              "Face",
              "IdentityDocument"
            ]
          },
          "Step": {
            "description": "What step the parse result is from.",
            "type": "string",
            "enum": [
              "TakePictureIDFront",
              "TakePictureIDBack",
              "TakeSelfie",
              "CaptureSignature"
            ]
          },
          "StepIndex": {
            "description": "The index of the step, when name is Picture, Selfie or CapturedSignature and the step requires multiple photos.",
            "type": "integer",
            "format": "int64"
          },
          "Type": {
            "description": "The type of the parse result value.",
            "type": "string",
            "enum": [
              "string",
              "float",
              "int",
              "date",
              "fileRef"
            ]
          },
          "UpdatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "Value": {
            "description": "The value of the parse result value.\nWhen type is date, the format is in YYYY-MM-DD, when type is fileRef, the file can be fetched using the get file request.\nAll values will be string, but the FieldType hints how to parse it.",
            "type": "string"
          }
        },
        "x-go-package": "git.devpros.nl/klippa/custom-ocr/models"
      },
      "IdentityVerificationSessionStatus": {
        "type": "object",
        "properties": {
          "PendingIDBackPicturesCount": {
            "description": "How many pictures still need to be taken from the back of the ID.",
            "type": "integer",
            "format": "int64"
          },
          "PendingIDFrontPicturesCount": {
            "description": "How many pictures still need to be taken from the front of the ID.",
            "type": "integer",
            "format": "int64"
          },
          "PendingSelfiesCount": {
            "description": "How many selfies need to be taken.",
            "type": "integer",
            "format": "int64"
          },
          "PendingSignatures": {
            "description": "How many signatures need to be uploaded.",
            "type": "integer",
            "format": "int64"
          },
          "Step": {
            "description": "The current step in the process, so the SDK know what view to show.",
            "type": "string",
            "enum": [
              "TakePictureIDFront",
              "TakePictureIDBack",
              "TakeSelfie",
              "CaptureSignature",
              "Finished"
            ]
          }
        },
        "x-go-package": "git.devpros.nl/klippa/custom-ocr/models"
      },
      "IdentityVerificationSessionValidation": {
        "type": "object",
        "properties": {
          "CreatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "DeletedAt": {
            "type": "string",
            "format": "date-time"
          },
          "FileID": {
            "description": "The ID of the file that was validated.",
            "type": "string"
          },
          "FileType": {
            "description": "The type of the file that was validated.",
            "type": "string"
          },
          "ID": {
            "type": "integer",
            "format": "uint64"
          },
          "IdentityVerificationSessionID": {
            "type": "integer",
            "format": "uint64"
          },
          "OtherFileID": {
            "description": "The ID of the other file that was validated in case of comparing.",
            "type": "string"
          },
          "OtherFileType": {
            "description": "The type of the other file that was validated in case of comparing.",
            "type": "string"
          },
          "Result": {
            "description": "The result of the validation.",
            "type": "string",
            "enum": [
              "Success",
              "Error"
            ]
          },
          "ResultCode": {
            "description": "The code of the result.",
            "type": "string",
            "enum": [
              "Success",
              "SignatureNotDetected",
              "SignaturesDoNotMatch",
              "FaceNotDetected",
              "FacesDoNotMatch",
              "Error"
            ]
          },
          "ResultMessage": {
            "description": "The message of the result.",
            "type": "string"
          },
          "UpdatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "Validation": {
            "description": "The type of validation.",
            "type": "string",
            "enum": [
              "DetectFace",
              "CompareFace",
              "DetectSignature",
              "CompareSignature"
            ]
          }
        },
        "x-go-package": "git.devpros.nl/klippa/custom-ocr/models"
      },
      "Key": {
        "type": "object",
        "properties": {
          "AllowQueryAuthentication": {
            "description": "Indicates if the key is allowed to make API calls using the deprecated query authentication method",
            "type": "boolean"
          },
          "CreatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "CreditSystem": {
            "type": "boolean"
          },
          "DataCollection": {
            "type": "boolean"
          },
          "DataSets": {
            "type": "boolean"
          },
          "DeletedAt": {
            "type": "string",
            "format": "date-time"
          },
          "ErrorCollection": {
            "type": "boolean"
          },
          "ID": {
            "type": "integer",
            "format": "uint64"
          },
          "Key": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          },
          "ParentKeyID": {
            "type": "integer",
            "format": "uint64"
          },
          "PublicKeys": {
            "type": "boolean"
          },
          "Status": {
            "type": "boolean"
          },
          "SubKeys": {
            "type": "boolean"
          },
          "Templates": {
            "description": "Document parsing fields.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Template"
            }
          },
          "Type": {
            "$ref": "#/components/schemas/KeyType"
          },
          "UpdatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "UserDataSets": {
            "type": "boolean"
          }
        },
        "x-go-package": "git.devpros.nl/klippa/custom-ocr/models"
      },
      "KeyType": {
        "type": "string",
        "x-go-package": "git.devpros.nl/klippa/custom-ocr/models"
      },
      "MatchedKeyword": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Count"
          },
          "id": {
            "type": "string",
            "x-go-name": "Id"
          },
          "matches": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "x-go-name": "Matches"
          }
        },
        "x-go-package": "git.devpros.nl/klippa/custom-ocr/helpers/ocr_api"
      },
      "MatchedLineItemsReceipt": {
        "description": "Matched lineitems, where amounts are in cents",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "x-go-name": "Id"
          },
          "lineitems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReceiptLineItemItem"
            },
            "x-go-name": "Lineitems"
          }
        },
        "x-go-package": "git.devpros.nl/klippa/custom-ocr/helpers/ocr_api"
      },
      "MenuCard": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MenuCardItem"
            },
            "x-go-name": "Items"
          }
        },
        "x-go-package": "git.devpros.nl/klippa/custom-ocr/helpers/ocr_api"
      },
      "MenuCardBody": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/MenuCard"
          },
          "request_id": {
            "type": "string",
            "x-go-name": "RequestId"
          },
          "result": {
            "type": "string",
            "x-go-name": "Result"
          }
        },
        "x-go-package": "git.devpros.nl/klippa/custom-ocr/controllers/ParseController"
      },
      "MenuCardItem": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "x-go-name": "Name"
          },
          "price": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Price"
          }
        },
        "x-go-package": "git.devpros.nl/klippa/custom-ocr/helpers/ocr_api"
      },
      "Receipt": {
        "type": "object",
        "properties": {
          "amount": {
            "description": "The total amount, in cents",
            "type": "integer",
            "format": "int64",
            "x-go-name": "Amount"
          },
          "amount_change": {
            "description": "The change amount, in cents",
            "type": "integer",
            "format": "int64",
            "x-go-name": "AmountChange"
          },
          "amount_shipping": {
            "description": "The shipping cost, in cents",
            "type": "integer",
            "format": "int64",
            "x-go-name": "AmountShipping"
          },
          "amount_tip": {
            "description": "The tipping amount, in cents",
            "type": "integer",
            "format": "int64",
            "x-go-name": "AmountTip"
          },
          "amountexvat": {
            "description": "The total amount without vat, in cents",
            "type": "integer",
            "format": "int64",
            "x-go-name": "AmountExVat"
          },
          "barcodes": {
            "description": "Barcodes that are found on the document",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Barcode"
            },
            "x-go-name": "Barcodes"
          },
          "currency": {
            "description": "The three-letter currency code, as defined in ISO 4217, e.g. `EUR`",
            "type": "string",
            "x-go-name": "Currency"
          },
          "customer_address": {
            "description": "The address line of the customer, as written on the document",
            "type": "string",
            "x-go-name": "CustomerAddress"
          },
          "customer_bank_account_number": {
            "description": "The IBAN number of the customer.",
            "type": "string",
            "x-go-name": "CustomerBankAccountNumber"
          },
          "customer_bank_account_number_bic": {
            "description": "The BIC associated with the IBAN number of the customer",
            "type": "string",
            "x-go-name": "CustomerBankAccountNumberBIC"
          },
          "customer_city": {
            "type": "string",
            "x-go-name": "CustomerCity"
          },
          "customer_coc_number": {
            "description": "The chamber of commerce number of the customer",
            "type": "string",
            "x-go-name": "CustomerCoCNumber"
          },
          "customer_country": {
            "description": "The name of the country, as written on the document",
            "type": "string",
            "x-go-name": "CustomerCountry"
          },
          "customer_email": {
            "type": "string",
            "x-go-name": "CustomerEmail"
          },
          "customer_fiscal_number": {
            "description": "The fiscal number of the customer. It contains a country-specific implementation of the fiscal number.",
            "type": "string",
            "x-go-name": "CustomerFiscalNumber"
          },
          "customer_house_number": {
            "description": "The house number of the customer. It will only be set if the customer address could be split into a street name and house number",
            "type": "string",
            "x-go-name": "CustomerHouseNumber"
          },
          "customer_municipality": {
            "type": "string",
            "x-go-name": "CustomerMunicipality"
          },
          "customer_name": {
            "description": "The name of the customer",
            "type": "string",
            "x-go-name": "CustomerName"
          },
          "customer_number": {
            "description": "A number used by the merchant to identify the customer",
            "type": "string",
            "x-go-name": "CustomerNumber"
          },
          "customer_phone": {
            "type": "string",
            "x-go-name": "CustomerPhone"
          },
          "customer_province": {
            "type": "string",
            "x-go-name": "CustomerProvince"
          },
          "customer_reference": {
            "description": "A reference to this document, given by the customer",
            "type": "string",
            "x-go-name": "CustomerReference"
          },
          "customer_street_name": {
            "description": "The street name of the customer. It will only be set if the customer address could be split into a street name and house number",
            "type": "string",
            "x-go-name": "CustomerStreetName"
          },
          "customer_vat_number": {
            "description": "The VAT number of the customer. It contains the two-letter country code, followed by a country-specific implementation of the VAT number.",
            "type": "string",
            "x-go-name": "CustomerVATNumber"
          },
          "customer_website": {
            "type": "string",
            "x-go-name": "CustomerWebsite"
          },
          "customer_zipcode": {
            "description": "The zipcode of the customer. Dutch postcodes are formatted as 1234 AB",
            "type": "string",
            "x-go-name": "CustomerZipcode"
          },
          "date": {
            "description": "The purchase datetime as ISO string, E.g. `2019-07-01T16:46:00`",
            "type": "string",
            "x-go-name": "Date"
          },
          "date_of_arrival": {
            "description": "The date of arrival. Usually found on hotel invoices, E.g. `2019-07-01T16:46:00`",
            "type": "string",
            "x-go-name": "DateOfArrival"
          },
          "date_of_departure": {
            "description": "The date of departure. Usually found on hotel invoices, E.g. `2019-07-01T16:46:00`",
            "type": "string",
            "x-go-name": "DateOfDeparture"
          },
          "document_language": {
            "description": "The language of the document as a two-letter country code",
            "type": "string",
            "x-go-name": "DocumentLanguage"
          },
          "document_subject": {
            "description": "The subject of the document",
            "type": "string",
            "x-go-name": "DocumentSubject"
          },
          "document_type": {
            "type": "string",
            "enum": [
              "",
              "invoice",
              "receipt",
              "bank_transaction",
              "bank_overview",
              "parking",
              "petrol",
              "ticket",
              "boarding_pass",
              "booking_payment_confirmation",
              "tax_authority",
              "payment_card",
              "other"
            ],
            "x-go-name": "DocumentType"
          },
          "hash": {
            "description": "Unique hash of the receipt.",
            "type": "string",
            "x-go-name": "Hash"
          },
          "hash_duplicate": {
            "description": "Whether we have seen the hash before for the current key.",
            "type": "boolean",
            "x-go-name": "HashDuplicate"
          },
          "invoice_number": {
            "description": "The number of the invoice",
            "type": "string",
            "x-go-name": "InvoiceNumber"
          },
          "invoice_type": {
            "type": "string",
            "enum": [
              "",
              "invoice",
              "credit_invoice",
              "self_billing_invoice"
            ],
            "x-go-name": "InvoiceType"
          },
          "lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReceiptLineItem"
            },
            "x-go-name": "LineItems"
          },
          "matched_keywords": {
            "description": "If keywords have been given in the userdata, matched_keywords will contain the id's of the keywords that matched, and their number of occurrences.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MatchedKeyword"
            },
            "x-go-name": "MatchedKeywords"
          },
          "matched_lineitems": {
            "description": "If keywords have been given for lineitems in the userdata, matched_lineitems will contain the id's of the keywords that matched, and the lineitems on which the matches were made.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MatchedLineItemsReceipt"
            },
            "x-go-name": "MatchedLineItems"
          },
          "matched_project_code_id": {
            "description": "The id of the project code from the user data",
            "type": "string",
            "x-go-name": "MatchedProjectCodeId"
          },
          "matched_purchase_order_id": {
            "description": "The id of the purchase order from the user data",
            "type": "string",
            "x-go-name": "MatchedPurchaseOrderId"
          },
          "merchant_address": {
            "description": "The address line of the merchant, as written on the document",
            "type": "string",
            "x-go-name": "MerchantAddress"
          },
          "merchant_bank_account_number": {
            "description": "The IBAN bank account number of the merchant.",
            "type": "string",
            "x-go-name": "MerchantBankAccountNumber"
          },
          "merchant_bank_account_number_bic": {
            "description": "The BIC associated with the IBAN bank account number of the merchant",
            "type": "string",
            "x-go-name": "MerchantBankAccountNumberBIC"
          },
          "merchant_bank_domestic_account_number": {
            "description": "The domestic bank account number of the merchant",
            "type": "string",
            "x-go-name": "MerchantBankDomesticAccountNumber"
          },
          "merchant_bank_domestic_bank_code": {
            "description": "The domestic bank code of the bank account of the merchant",
            "type": "string",
            "x-go-name": "MerchantBankDomesticBankCode"
          },
          "merchant_chain_liability_amount": {
            "description": "The amount that is due on the Chain Liability G-Account (Wet Ketenaansprakelijkheid G-rekening)",
            "type": "integer",
            "format": "int64",
            "x-go-name": "MerchantChainLiabilityAmount"
          },
          "merchant_chain_liability_bank_account_number": {
            "description": "The IBAN bank account number of the merchant used for Chain Liability G-Account (Wet Ketenaansprakelijkheid G-rekening)",
            "type": "string",
            "x-go-name": "MerchantChainLiabilityBankAccountNumber"
          },
          "merchant_city": {
            "type": "string",
            "x-go-name": "MerchantCity"
          },
          "merchant_coc_number": {
            "description": "The chamber of commerce number of the merchant",
            "type": "string",
            "x-go-name": "MerchantCoCNumber"
          },
          "merchant_country": {
            "description": "The name of the country, as written on the document",
            "type": "string",
            "x-go-name": "MerchantCountry"
          },
          "merchant_country_code": {
            "description": "The name of the country as two-letter country code",
            "type": "string",
            "x-go-name": "MerchantCountryCode"
          },
          "merchant_email": {
            "type": "string",
            "x-go-name": "MerchantEmail"
          },
          "merchant_fiscal_number": {
            "description": "The fiscal number of the merchant. It contains a country-specific implementation of the fiscal number.",
            "type": "string",
            "x-go-name": "MerchantFiscalNumber"
          },
          "merchant_house_number": {
            "description": "The house number of the merchant. It will only be set if the merchant address could be split into a street name and house number",
            "type": "string",
            "x-go-name": "MerchantHouseNumber"
          },
          "merchant_id": {
            "description": "The identifier of the merchant. It is only present if the merchant is found using a relation that was provided in the user_data object, or was provided in a user_data_set.",
            "type": "string",
            "x-go-name": "MerchantId"
          },
          "merchant_main_activity_code": {
            "description": "The main activity code of the merchant",
            "type": "string",
            "x-go-name": "MerchantMainActivityCode"
          },
          "merchant_municipality": {
            "type": "string",
            "x-go-name": "MerchantMunicipality"
          },
          "merchant_name": {
            "description": "The name of the merchant",
            "type": "string",
            "x-go-name": "MerchantName"
          },
          "merchant_phone": {
            "type": "string",
            "x-go-name": "MerchantPhone"
          },
          "merchant_province": {
            "type": "string",
            "x-go-name": "MerchantProvince"
          },
          "merchant_street_name": {
            "description": "The street name of the merchant. It will only be set if the merchant address could be split into a street name and house number",
            "type": "string",
            "x-go-name": "MerchantStreetName"
          },
          "merchant_vat_number": {
            "description": "The VAT number of the merchant. It contains the two-letter country code, followed by a country-specific implementation of the VAT number.",
            "type": "string",
            "x-go-name": "MerchantVATNumber"
          },
          "merchant_website": {
            "type": "string",
            "x-go-name": "MerchantWebsite"
          },
          "merchant_zipcode": {
            "description": "The zipcode of the merchant. Dutch postcodes are formatted as 1234 AB",
            "type": "string",
            "x-go-name": "MerchantZipcode"
          },
          "order_number": {
            "description": "The order number",
            "type": "string",
            "x-go-name": "OrderNumber"
          },
          "package_number": {
            "description": "Package number, usually found on packaging slips",
            "type": "string",
            "x-go-name": "PackageNumber"
          },
          "payment_auth_code": {
            "description": "The transaction authorization code",
            "type": "string",
            "x-go-name": "PaymentAuthCode"
          },
          "payment_card_account_number": {
            "description": "The account number of the card that was used to complete the payment",
            "type": "string",
            "x-go-name": "PaymentCardAccountNumber"
          },
          "payment_card_bank": {
            "type": "string",
            "x-go-name": "PaymentCardBank"
          },
          "payment_card_issuer": {
            "description": "Name of the party that issued the credit- or debit card",
            "type": "string",
            "x-go-name": "PaymentCardIssuer"
          },
          "payment_card_number": {
            "type": "string",
            "x-go-name": "PaymentCardNumber"
          },
          "payment_due_date": {
            "description": "Date on which the payment is due as ISO string, E.g. `2019-07-01T00:00:00`",
            "type": "string",
            "x-go-name": "PaymentDueDate"
          },
          "payment_slip_code": {
            "description": "The full code of the payment slip",
            "type": "string",
            "x-go-name": "PaymentSlipCode"
          },
          "payment_slip_customer_number": {
            "description": "The customer number of the payment slip",
            "type": "string",
            "x-go-name": "PaymentSlipCustomerNumber"
          },
          "payment_slip_reference_number": {
            "description": "The reference number of the payment slip",
            "type": "string",
            "x-go-name": "PaymentSlipReferenceNumber"
          },
          "paymentmethod": {
            "type": "string",
            "enum": [
              "",
              "cash",
              "creditcard",
              "pin",
              "bank"
            ],
            "x-go-name": "PaymentMethod"
          },
          "personal_income_tax_amount": {
            "description": "The amount of personal income tax that has been withheld by the merchant, in cents",
            "type": "integer",
            "format": "int64",
            "x-go-name": "PersonalIncomeTaxAmount"
          },
          "personal_income_tax_rate": {
            "description": "The percentage of personal income tax that has been withheld by the merchant",
            "type": "integer",
            "format": "int64",
            "x-go-name": "PersonalIncomeTaxRate"
          },
          "project_code": {
            "description": "The matched project code on a document, if specified in user data",
            "type": "string",
            "x-go-name": "ProjectCode"
          },
          "purchasedate": {
            "description": "The purchase date as `yyyy-mm-dd` string, e.g. `2019-07-01`",
            "type": "string",
            "x-go-name": "PurchaseDate"
          },
          "purchasetime": {
            "description": "The purchase time as hh:mm:ss string, e.g. `16:46:00`",
            "type": "string",
            "x-go-name": "PurchaseTime"
          },
          "raw_text": {
            "description": "Original plain text of receipt.",
            "type": "string",
            "x-go-name": "RawText"
          },
          "receipt_number": {
            "description": "The receipt ticket number",
            "type": "string",
            "x-go-name": "ReceiptNumber"
          },
          "server": {
            "type": "string",
            "x-go-name": "Server"
          },
          "shop_number": {
            "description": "A number that identifies the store in which the payment was processed. Usually found on EFT receipts.",
            "type": "string",
            "x-go-name": "ShopNumber"
          },
          "table_group": {
            "type": "string",
            "x-go-name": "TableGroup"
          },
          "table_number": {
            "type": "string",
            "x-go-name": "TableNumber"
          },
          "terminal_number": {
            "description": "A number that identifies the terminal on which the payment was processed. Usually found on EFT receipts.",
            "type": "string",
            "x-go-name": "TerminalNumber"
          },
          "transaction_number": {
            "description": "The transaction number provided by the payment processor. Usually found on EFT receipts.",
            "type": "string",
            "x-go-name": "TransactionNumber"
          },
          "transaction_reference": {
            "description": "A transaction reference provided by the merchant",
            "type": "string",
            "x-go-name": "TransactionReference"
          },
          "vat_context": {
            "type": "string",
            "enum": [
              "",
              "purchase_none",
              "vat_eu",
              "vat_reverse_charged",
              "vat_exempted",
              "vat_margin"
            ],
            "x-go-name": "VATContext"
          },
          "vatamount": {
            "description": "The total VAT amount, in cents",
            "type": "integer",
            "format": "int64",
            "x-go-name": "VATAmount"
          },
          "vatitems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReceiptVAT"
            },
            "x-go-name": "VATItems"
          }
        },
        "x-go-package": "git.devpros.nl/klippa/custom-ocr/controllers/ParseController"
      },
      "ReceiptBody": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Receipt"
          },
          "request_id": {
            "type": "string",
            "x-go-name": "RequestId"
          },
          "result": {
            "type": "string",
            "x-go-name": "Result"
          }
        },
        "x-go-package": "git.devpros.nl/klippa/custom-ocr/controllers/ParseController"
      },
      "ReceiptLineItem": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "x-go-name": "Description"
          },
          "lineitems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReceiptLineItemItem"
            },
            "x-go-name": "Items"
          }
        },
        "x-go-package": "git.devpros.nl/klippa/custom-ocr/helpers/ocr_api"
      },
      "ReceiptLineItemItem": {
        "description": "A single lineitem. The amounts are in cents",
        "type": "object",
        "properties": {
          "amount": {
            "description": "The total amount of this lineitem, in cents.",
            "type": "integer",
            "format": "int64",
            "x-go-name": "Amount"
          },
          "amount_each": {
            "description": "The amount per product of this lineitem, in cents. If quantity is 1, this amount is equal to the 'amount' field.",
            "type": "integer",
            "format": "int64",
            "x-go-name": "AmountEach"
          },
          "amount_ex_vat": {
            "description": "THe total amount of this lineitem in cents, excluding VAT.",
            "type": "integer",
            "format": "int64",
            "x-go-name": "AmountExVAT"
          },
          "description": {
            "description": "An additional description of the lineitem",
            "type": "string",
            "x-go-name": "Description"
          },
          "quantity": {
            "description": "The quantity of the products of the lineitem.",
            "type": "number",
            "format": "double",
            "x-go-name": "Quantity"
          },
          "sku": {
            "description": "A code that refers to the particular stock keeping unit",
            "type": "string",
            "x-go-name": "SKU"
          },
          "title": {
            "description": "The title of the lineitem",
            "type": "string",
            "x-go-name": "Title"
          },
          "unit_of_measurement": {
            "description": "The unit of measurement",
            "type": "string",
            "x-go-name": "UnitOfMeasurement"
          },
          "vat_amount": {
            "description": "The VAT amount, in cents",
            "type": "integer",
            "format": "int64",
            "x-go-name": "VATAmount"
          },
          "vat_code": {
            "description": "A code that refers to the kind of VAT that is applied to this lineitem",
            "type": "string",
            "x-go-name": "VatCode"
          },
          "vat_percentage": {
            "description": "The VAT percentage of this lineitem, in hundreds. For example, a percentage of \"21%\" is represented as 2100.",
            "type": "integer",
            "format": "int64",
            "x-go-name": "VATPercentage"
          }
        },
        "x-go-package": "git.devpros.nl/klippa/custom-ocr/helpers/ocr_api"
      },
      "ReceiptVAT": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Amount"
          },
          "amount_excl_vat": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "AmountExclVat"
          },
          "amount_incl_excl_vat_estimated": {
            "description": "Whether we calculated the VAT base or it was actually on the invoice/receipt.",
            "type": "boolean",
            "x-go-name": "InclExclEstimated"
          },
          "amount_incl_vat": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "AmountInclVat"
          },
          "code": {
            "type": "string",
            "x-go-name": "Code"
          },
          "percentage": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Percentage"
          }
        },
        "x-go-package": "git.devpros.nl/klippa/custom-ocr/controllers/ParseController"
      },
      "StatRow": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Count"
          },
          "day": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Day"
          },
          "hour": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Hour"
          },
          "month": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Month"
          },
          "year": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "Year"
          }
        },
        "x-go-package": "git.devpros.nl/klippa/custom-ocr/helpers/statistics"
      },
      "SubKeyForm": {
        "type": "object",
        "required": [
          "Name"
        ],
        "properties": {
          "Name": {
            "description": "The name of the sub key",
            "type": "string"
          },
          "PublicKeys": {
            "description": "Whether the sub key can use public keys. Note that the parent key must also be able to do this.",
            "type": "boolean"
          },
          "Status": {
            "description": "The status of the sub key.",
            "type": "boolean"
          },
          "Templates": {
            "description": "A list of template keys that the key can use. Note that the parent key must have access to it.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "UserDataSets": {
            "description": "Whether the sub key can use user data sets. Note that the parent key must also be able to do this.",
            "type": "boolean"
          }
        },
        "x-go-package": "git.devpros.nl/klippa/custom-ocr/controllers/SubKeyController"
      },
      "Template": {
        "type": "object",
        "properties": {
          "CreatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "DeletedAt": {
            "type": "string",
            "format": "date-time"
          },
          "ID": {
            "type": "integer",
            "format": "uint64"
          },
          "Key": {
            "type": "string"
          },
          "Status": {
            "type": "boolean"
          },
          "Title": {
            "type": "string"
          },
          "UpdatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "x-go-package": "git.devpros.nl/klippa/custom-ocr/models"
      },
      "TextUploadForm": {
        "type": "object",
        "properties": {
          "add_human_review_extra_data": {
            "description": "A boolean that may be set to include candidates and OCR bounding boxes into the response. Only applicable if the\nreturned object is derived from the ocr_api.Receipt struct.\nswagger: ignore",
            "type": "boolean",
            "x-go-name": "AddHumanReviewExtraData"
          },
          "hash_duplicate_group_id": {
            "description": "An identifier to use when saving/detecting hash duplicates.\nThis way you can allow to have the same document scanned more than once for multiple groups.\nWhen doing a scan, the combination of the Hash Group ID and the document Hash will be used to detect duplicates.\nThis value is saved hashed on our side. Common use cases: Company ID, Campaign ID, User ID.\nIn: formData",
            "type": "string",
            "x-go-name": "HashDuplicateGroupID"
          },
          "template": {
            "type": "string",
            "x-go-name": "Template"
          },
          "text": {
            "type": "string",
            "x-go-name": "Text"
          },
          "user_data": {
            "description": "Extra metadata to give to the parser. Only works with templates that are configured to accept user data.",
            "type": "string",
            "x-go-name": "UserData"
          },
          "user_data_set_external_id": {
            "description": "The external ID of the user data set.",
            "type": "string",
            "x-go-name": "UserDataSetExternalID"
          }
        },
        "x-go-package": "git.devpros.nl/klippa/custom-ocr/controllers/ParseController"
      },
      "UpdateSubKeyBody": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Key"
          },
          "request_id": {
            "type": "string",
            "x-go-name": "RequestId"
          },
          "result": {
            "type": "string",
            "x-go-name": "Result"
          }
        },
        "x-go-package": "git.devpros.nl/klippa/custom-ocr/controllers/SubKeyController"
      },
      "UserDataSet": {
        "type": "object",
        "properties": {
          "CreatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "DeletedAt": {
            "type": "string",
            "format": "date-time"
          },
          "ExternalID": {
            "description": "The ID on the external user this data set belongs to.",
            "type": "string",
            "maxLength": 255
          },
          "ID": {
            "type": "integer",
            "format": "uint64"
          },
          "LastSyncDate": {
            "description": "The last sync date to keep track when this user data set was last synced.",
            "type": "string",
            "format": "date-time"
          },
          "Type": {
            "description": "The type of the data set.",
            "type": "string"
          },
          "UpdatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "x-go-package": "git.devpros.nl/klippa/custom-ocr/models"
      },
      "UserDataSetRecord": {
        "type": "object",
        "properties": {
          "CreatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "DeletedAt": {
            "type": "string",
            "format": "date-time"
          },
          "ExternalID": {
            "description": "The ID on the external user this data set belongs to.",
            "type": "string",
            "maxLength": 255
          },
          "ID": {
            "type": "integer",
            "format": "uint64"
          },
          "LastSyncDate": {
            "description": "The last sync date to keep track when this user data set was last synced.\nWe advice to make this date equal to the last update date on the external side.",
            "type": "string",
            "format": "date-time"
          },
          "UpdatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "x-go-package": "git.devpros.nl/klippa/custom-ocr/models"
      },
      "ValidationError": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int64",
            "x-go-name": "ErrorCode"
          },
          "errors": {
            "$ref": "#/components/schemas/Errors"
          },
          "request_id": {
            "type": "string",
            "x-go-name": "RequestId"
          },
          "result": {
            "type": "string",
            "x-go-name": "Result"
          }
        },
        "x-go-package": "git.devpros.nl/klippa/custom-ocr/helpers/responses"
      },
      "bulkUserDataSetRecordActionForm": {
        "type": "object",
        "required": [
          "Action",
          "ExternalID"
        ],
        "properties": {
          "Action": {
            "description": "The action to perform.",
            "type": "string",
            "enum": [
              "create",
              "update",
              "upsert",
              "delete"
            ]
          },
          "ExternalID": {
            "description": "The ID on the external user record this data set belongs to.",
            "type": "string",
            "maxLength": 255
          },
          "LastSyncDate": {
            "description": "The last sync date to keep track when you last updated this set record.\nWe advice to make this date equal to the last update date on the external side.\nMust be in RFC3339 format.",
            "type": "string",
            "format": "date-time"
          },
          "Values": {
            "description": "The values that belong to this record.\nThe available values differ per set type.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/userDataSetRecordValueForm"
            }
          }
        },
        "x-go-package": "git.devpros.nl/klippa/custom-ocr/controllers/UserDataSetController"
      },
      "bulkUserDataSetRecordBody": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/bulkUserDataSetRecordResult"
            },
            "x-go-name": "Data"
          },
          "request_id": {
            "type": "string",
            "x-go-name": "RequestId"
          },
          "result": {
            "type": "string",
            "x-go-name": "Result"
          }
        },
        "x-go-package": "git.devpros.nl/klippa/custom-ocr/controllers/UserDataSetController"
      },
      "bulkUserDataSetRecordForm": {
        "type": "object",
        "required": [
          "Actions"
        ],
        "properties": {
          "Actions": {
            "description": "A set of actions, with a maximum of 1000 actions in 1 call.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/bulkUserDataSetRecordActionForm"
            }
          }
        },
        "x-go-package": "git.devpros.nl/klippa/custom-ocr/controllers/UserDataSetController"
      },
      "bulkUserDataSetRecordResult": {
        "type": "object",
        "properties": {
          "Action": {
            "description": "The action that was performed.",
            "type": "string",
            "enum": [
              "create",
              "update",
              "upsert",
              "delete"
            ]
          },
          "ExternalID": {
            "description": "The ID on the external user record this data set belongs to.",
            "type": "string"
          },
          "FailureCode": {
            "description": "The code when Result is failure.\n1: internal error\n2: item exists (when doing a create)\n3: item does not exist (when doing update or delete)",
            "type": "integer",
            "format": "int64"
          },
          "FailureMessage": {
            "description": "The message when Result is failure.",
            "type": "string"
          },
          "Item": {
            "$ref": "#/components/schemas/UserDataSetRecord"
          },
          "Result": {
            "description": "The result of the action.",
            "type": "string",
            "enum": [
              "created",
              "updated",
              "deleted",
              "no-change",
              "failure"
            ]
          }
        },
        "x-go-package": "git.devpros.nl/klippa/custom-ocr/controllers/UserDataSetController"
      },
      "createDataSetResponseBody": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/DataSet"
          },
          "request_id": {
            "type": "string",
            "x-go-name": "RequestId"
          },
          "result": {
            "type": "string",
            "x-go-name": "Result"
          }
        },
        "x-go-package": "git.devpros.nl/klippa/custom-ocr/controllers/DataSetController"
      },
      "createDocument": {
        "type": "object",
        "properties": {
          "Document": {
            "$ref": "#/components/schemas/Document"
          }
        },
        "x-go-package": "git.devpros.nl/klippa/custom-ocr/controllers/DataSetController"
      },
      "createDocumentBody": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/createDocument"
          },
          "request_id": {
            "type": "string",
            "x-go-name": "RequestId"
          },
          "result": {
            "type": "string",
            "x-go-name": "Result"
          }
        },
        "x-go-package": "git.devpros.nl/klippa/custom-ocr/controllers/DataSetController"
      },
      "createIdentityVerificationSessionBody": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/IdentityVerificationSessionResponse"
          },
          "request_id": {
            "type": "string",
            "x-go-name": "RequestId"
          },
          "result": {
            "type": "string",
            "x-go-name": "Result"
          }
        },
        "x-go-package": "git.devpros.nl/klippa/custom-ocr/controllers/IdentityVerificationController"
      },
      "createOrUpdateIdentityVerificationSessionForm": {
        "type": "object",
        "required": [
          "ValidTime"
        ],
        "properties": {
          "CheckIDForSignature": {
            "description": "Whether to check if the ID has an signature.",
            "type": "boolean"
          },
          "CompareSelfiesWithID": {
            "description": "Whether to compare the selfies with the photos on the ID.",
            "type": "boolean"
          },
          "CompareSignatureWithID": {
            "description": "Whether to compare the signatures with the ID.",
            "type": "boolean"
          },
          "RequiredFields": {
            "description": "The fields that are required to be found before passing the checks.",
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "DocumentType",
                "DocumentSubType",
                "Nationality",
                "DocumentNumber",
                "Surname",
                "GivenNames",
                "DateOfBirth",
                "PersonalNumber",
                "PlaceOfBirth",
                "Gender",
                "Height",
                "DateOfIssue",
                "DateOfExpiry",
                "IssuingCountry",
                "IssuingInstitution",
                "Residency",
                "MRZ",
                "Selfie",
                "Picture",
                "CapturedSignature",
                "Face",
                "IdentityDocument"
              ]
            }
          },
          "RequiredIDBackPicturesCount": {
            "description": "The amount of pictures to be taken of the back of the ID.",
            "type": "integer",
            "format": "int64"
          },
          "RequiredIDFrontPicturesCount": {
            "description": "The amount of pictures to be taken of the front of the ID.",
            "type": "integer",
            "format": "int64"
          },
          "RequiredSelfiesCount": {
            "description": "The amount of selfies to be taken.",
            "type": "integer",
            "format": "int64"
          },
          "RequiredSignatures": {
            "description": "The amount of signatures to be taken.",
            "type": "integer",
            "format": "int64"
          },
          "ValidTime": {
            "description": "The amount of seconds the Session should be valid. With a minimum of 15 minutes (900) and a maximum of 2 hour (4800).\nAfter this time, the files and results are deleted from our system.",
            "type": "integer",
            "format": "int64",
            "maximum": 4800,
            "minimum": 900
          }
        },
        "x-go-package": "git.devpros.nl/klippa/custom-ocr/controllers/IdentityVerificationController"
      },
      "createPublicKey": {
        "type": "object",
        "properties": {
          "ID": {
            "description": "The ID of the public key.",
            "type": "integer",
            "format": "uint64"
          },
          "PublicKey": {
            "description": "The public key to use when using the API.",
            "type": "string"
          },
          "ScanLimit": {
            "description": "How many scans the public key can do.",
            "type": "integer",
            "format": "int64"
          },
          "ValidUntil": {
            "description": "When the public key expires.",
            "type": "string",
            "format": "date-time"
          }
        },
        "x-go-package": "git.devpros.nl/klippa/custom-ocr/controllers/PublicKeyController"
      },
      "createPublicKeyBody": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/createPublicKey"
          },
          "request_id": {
            "type": "string",
            "x-go-name": "RequestId"
          },
          "result": {
            "type": "string",
            "x-go-name": "Result"
          }
        },
        "x-go-package": "git.devpros.nl/klippa/custom-ocr/controllers/PublicKeyController"
      },
      "createSubKeyBody": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Key"
          },
          "request_id": {
            "type": "string",
            "x-go-name": "RequestId"
          },
          "result": {
            "type": "string",
            "x-go-name": "Result"
          }
        },
        "x-go-package": "git.devpros.nl/klippa/custom-ocr/controllers/SubKeyController"
      },
      "createUserDataSetForm": {
        "type": "object",
        "required": [
          "Type",
          "ExternalID"
        ],
        "properties": {
          "ExternalID": {
            "description": "The ID on the external user this data set belongs to.",
            "type": "string",
            "maxLength": 255
          },
          "LastSyncDate": {
            "description": "The last sync date to keep track when you last updated this set.\nWe advice to make this date equal to the last update date on the external side.\nMust be in RFC3339 format.",
            "type": "string",
            "format": "date-time"
          },
          "Type": {
            "description": "The type of the data set.",
            "type": "string",
            "enum": [
              "relation",
              "transaction",
              "product",
              "building",
              "purchase_order",
              "project_code"
            ]
          }
        },
        "x-go-package": "git.devpros.nl/klippa/custom-ocr/controllers/UserDataSetController"
      },
      "createUserDataSetRecordForm": {
        "type": "object",
        "required": [
          "ExternalID"
        ],
        "properties": {
          "ExternalID": {
            "description": "The ID on the external user record this data set belongs to.",
            "type": "string",
            "maxLength": 255
          },
          "LastSyncDate": {
            "description": "The last sync date to keep track when you last updated this set record.\nWe advice to make this date equal to the last update date on the external side.\nMust be in RFC3339 format.",
            "type": "string",
            "format": "date-time"
          },
          "Values": {
            "description": "The values that belong to this record.\nThe available values differ per set type.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/userDataSetRecordValueForm"
            }
          }
        },
        "x-go-package": "git.devpros.nl/klippa/custom-ocr/controllers/UserDataSetController"
      },
      "createUserDataSetRecordResponseBody": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/UserDataSetRecord"
          },
          "request_id": {
            "type": "string",
            "x-go-name": "RequestId"
          },
          "result": {
            "type": "string",
            "x-go-name": "Result"
          }
        },
        "x-go-package": "git.devpros.nl/klippa/custom-ocr/controllers/UserDataSetController"
      },
      "createUserDataSetResponseBody": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/UserDataSet"
          },
          "request_id": {
            "type": "string",
            "x-go-name": "RequestId"
          },
          "result": {
            "type": "string",
            "x-go-name": "Result"
          }
        },
        "x-go-package": "git.devpros.nl/klippa/custom-ocr/controllers/UserDataSetController"
      },
      "deleteDataSetRecordBody": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/DeletedObjectData"
          },
          "request_id": {
            "type": "string",
            "x-go-name": "RequestId"
          },
          "result": {
            "type": "string",
            "x-go-name": "Result"
          }
        },
        "x-go-package": "git.devpros.nl/klippa/custom-ocr/controllers/DataSetController"
      },
      "deleteDocumentRecordBody": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/DeletedObjectData"
          },
          "request_id": {
            "type": "string",
            "x-go-name": "RequestId"
          },
          "result": {
            "type": "string",
            "x-go-name": "Result"
          }
        },
        "x-go-package": "git.devpros.nl/klippa/custom-ocr/controllers/DataSetController"
      },
      "deleteIdentityVerificationSessionBody": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/DeletedObjectData"
          },
          "request_id": {
            "type": "string",
            "x-go-name": "RequestId"
          },
          "result": {
            "type": "string",
            "x-go-name": "Result"
          }
        },
        "x-go-package": "git.devpros.nl/klippa/custom-ocr/controllers/IdentityVerificationController"
      },
      "deleteUserDataSetBody": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/DeletedObjectData"
          },
          "request_id": {
            "type": "string",
            "x-go-name": "RequestId"
          },
          "result": {
            "type": "string",
            "x-go-name": "Result"
          }
        },
        "x-go-package": "git.devpros.nl/klippa/custom-ocr/controllers/UserDataSetController"
      },
      "deleteUserDataSetRecordBody": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/DeletedObjectData"
          },
          "request_id": {
            "type": "string",
            "x-go-name": "RequestId"
          },
          "result": {
            "type": "string",
            "x-go-name": "Result"
          }
        },
        "x-go-package": "git.devpros.nl/klippa/custom-ocr/controllers/UserDataSetController"
      },
      "getCredits": {
        "type": "object",
        "properties": {
          "AvailableCredits": {
            "description": "The total number of credits that were added to your account.",
            "type": "integer",
            "format": "int64"
          },
          "SpendableCredits": {
            "description": "The number of credits that are available to spend.\nPlease note that this can be lower than 0 if you are in the overdraw period (10% of credits).",
            "type": "integer",
            "format": "int64"
          },
          "UsedCredits": {
            "description": "The number of spent credits.",
            "type": "integer",
            "format": "int64"
          },
          "UsesCreditSystem": {
            "description": "Whether this key actually uses the credit system.",
            "type": "boolean"
          }
        },
        "x-go-package": "git.devpros.nl/klippa/custom-ocr/controllers/GlobalController"
      },
      "getCreditsBody": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/getCredits"
          },
          "request_id": {
            "type": "string",
            "x-go-name": "RequestId"
          },
          "result": {
            "type": "string",
            "x-go-name": "Result"
          }
        },
        "x-go-package": "git.devpros.nl/klippa/custom-ocr/controllers/GlobalController"
      },
      "getDataSet": {
        "type": "object",
        "properties": {
          "DataSet": {
            "$ref": "#/components/schemas/DataSet"
          }
        },
        "x-go-package": "git.devpros.nl/klippa/custom-ocr/controllers/DataSetController"
      },
      "getDataSetBody": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/getDataSet"
          },
          "request_id": {
            "type": "string",
            "x-go-name": "RequestId"
          },
          "result": {
            "type": "string",
            "x-go-name": "Result"
          }
        },
        "x-go-package": "git.devpros.nl/klippa/custom-ocr/controllers/DataSetController"
      },
      "getDataSets": {
        "type": "object",
        "properties": {
          "Count": {
            "type": "integer",
            "format": "int64"
          },
          "DataSets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DataSet"
            }
          },
          "MoreResults": {
            "type": "boolean"
          },
          "Page": {
            "type": "integer",
            "format": "int64"
          },
          "Pages": {
            "type": "integer",
            "format": "int64"
          },
          "PerPage": {
            "type": "integer",
            "format": "int64"
          }
        },
        "x-go-package": "git.devpros.nl/klippa/custom-ocr/controllers/DataSetController"
      },
      "getDataSetsBody": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/getDataSets"
          },
          "request_id": {
            "type": "string",
            "x-go-name": "RequestId"
          },
          "result": {
            "type": "string",
            "x-go-name": "Result"
          }
        },
        "x-go-package": "git.devpros.nl/klippa/custom-ocr/controllers/DataSetController"
      },
      "getDocument": {
        "type": "object",
        "properties": {
          "Document": {
            "$ref": "#/components/schemas/Document"
          }
        },
        "x-go-package": "git.devpros.nl/klippa/custom-ocr/controllers/DataSetController"
      },
      "getDocumentAnnotations": {
        "type": "object",
        "x-go-package": "git.devpros.nl/klippa/custom-ocr/controllers/DataSetController"
      },
      "getDocumentAnnotationsBody": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/getDocumentAnnotations"
          },
          "request_id": {
            "type": "string",
            "x-go-name": "RequestId"
          },
          "result": {
            "type": "string",
            "x-go-name": "Result"
          }
        },
        "x-go-package": "git.devpros.nl/klippa/custom-ocr/controllers/DataSetController"
      },
      "getDocumentBody": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/getDocument"
          },
          "request_id": {
            "type": "string",
            "x-go-name": "RequestId"
          },
          "result": {
            "type": "string",
            "x-go-name": "Result"
          }
        },
        "x-go-package": "git.devpros.nl/klippa/custom-ocr/controllers/DataSetController"
      },
      "getDocuments": {
        "type": "object",
        "properties": {
          "Count": {
            "type": "integer",
            "format": "int64"
          },
          "Documents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Document"
            }
          },
          "MoreResults": {
            "type": "boolean"
          },
          "Page": {
            "type": "integer",
            "format": "int64"
          },
          "Pages": {
            "type": "integer",
            "format": "int64"
          },
          "PerPage": {
            "type": "integer",
            "format": "int64"
          }
        },
        "x-go-package": "git.devpros.nl/klippa/custom-ocr/controllers/DataSetController"
      },
      "getDocumentsBody": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/getDocuments"
          },
          "request_id": {
            "type": "string",
            "x-go-name": "RequestId"
          },
          "result": {
            "type": "string",
            "x-go-name": "Result"
          }
        },
        "x-go-package": "git.devpros.nl/klippa/custom-ocr/controllers/DataSetController"
      },
      "getField": {
        "type": "object",
        "properties": {
          "field": {
            "description": "The key of the field in the output.",
            "type": "string",
            "x-go-name": "Field"
          },
          "nullable": {
            "description": "Whether the value of the type is nullable.",
            "type": "boolean",
            "x-go-name": "Nullable"
          },
          "sub_type": {
            "$ref": "#/components/schemas/getFieldSubtype"
          },
          "type": {
            "description": "The type of the field.",
            "type": "string",
            "enum": [
              "bool",
              "string",
              "uint",
              "int",
              "int64",
              "float",
              "float64",
              "array",
              "map",
              "key_value",
              "any"
            ],
            "x-go-name": "Type"
          }
        },
        "x-go-package": "git.devpros.nl/klippa/custom-ocr/controllers/ParseController"
      },
      "getFieldSubtype": {
        "type": "object",
        "properties": {
          "fields": {
            "description": "The subfields of maps or arrays with subtype map.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/getField"
            },
            "x-go-name": "Fields"
          },
          "nullable": {
            "description": "Whether the value of the subtype is nullable in case of array or key_value.",
            "type": "boolean",
            "x-go-name": "Nullable"
          },
          "type": {
            "description": "The type of the subfield in case of arrays or key_value.",
            "type": "string",
            "enum": [
              "bool",
              "string",
              "uint",
              "int",
              "int64",
              "float",
              "float64",
              "array",
              "map",
              "key_value",
              "any"
            ],
            "x-go-name": "Type"
          }
        },
        "x-go-package": "git.devpros.nl/klippa/custom-ocr/controllers/ParseController"
      },
      "getFields": {
        "type": "object",
        "properties": {
          "fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/getField"
            },
            "x-go-name": "Fields"
          }
        },
        "x-go-package": "git.devpros.nl/klippa/custom-ocr/controllers/ParseController"
      },
      "getFieldsBody": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/getFields"
          },
          "request_id": {
            "type": "string",
            "x-go-name": "RequestId"
          },
          "result": {
            "type": "string",
            "x-go-name": "Result"
          }
        },
        "x-go-package": "git.devpros.nl/klippa/custom-ocr/controllers/ParseController"
      },
      "getIdentityVerificationSDKSessionBody": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/IdentityVerificationSessionResponse"
          },
          "request_id": {
            "type": "string",
            "x-go-name": "RequestId"
          },
          "result": {
            "type": "string",
            "x-go-name": "Result"
          }
        },
        "x-go-package": "git.devpros.nl/klippa/custom-ocr/controllers/IdentityVerificationController"
      },
      "getIdentityVerificationSessionBody": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/IdentityVerificationSessionResponse"
          },
          "request_id": {
            "type": "string",
            "x-go-name": "RequestId"
          },
          "result": {
            "type": "string",
            "x-go-name": "Result"
          }
        },
        "x-go-package": "git.devpros.nl/klippa/custom-ocr/controllers/IdentityVerificationController"
      },
      "getPublicKeyInfo": {
        "type": "object",
        "properties": {
          "AvailableScans": {
            "description": "The number of available scans.",
            "type": "integer",
            "format": "int64"
          },
          "ID": {
            "description": "The ID of the public key.",
            "type": "integer",
            "format": "uint64"
          },
          "IsValid": {
            "description": "Whether the public key is valid at this moment.",
            "type": "boolean"
          },
          "ScanLimit": {
            "description": "How many scans the public key can do.",
            "type": "integer",
            "format": "int64"
          },
          "UsedScans": {
            "description": "The number of used scans.",
            "type": "integer",
            "format": "int64"
          },
          "ValidUntil": {
            "description": "When the public key expires.",
            "type": "string",
            "format": "date-time"
          }
        },
        "x-go-package": "git.devpros.nl/klippa/custom-ocr/controllers/PublicKeyController"
      },
      "getStatisticsBody": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StatRow"
            },
            "x-go-name": "Data"
          },
          "request_id": {
            "type": "string",
            "x-go-name": "RequestId"
          },
          "result": {
            "type": "string",
            "x-go-name": "Result"
          }
        },
        "x-go-package": "git.devpros.nl/klippa/custom-ocr/controllers/GlobalController"
      },
      "getTemplates": {
        "type": "object",
        "properties": {
          "templates": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/respTemplate"
            },
            "x-go-name": "Templates"
          }
        },
        "x-go-package": "git.devpros.nl/klippa/custom-ocr/controllers/GlobalController"
      },
      "getTemplatesBody": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/getTemplates"
          },
          "request_id": {
            "type": "string",
            "x-go-name": "RequestId"
          },
          "result": {
            "type": "string",
            "x-go-name": "Result"
          }
        },
        "x-go-package": "git.devpros.nl/klippa/custom-ocr/controllers/GlobalController"
      },
      "getUserDataSetBody": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/UserDataSet"
          },
          "request_id": {
            "type": "string",
            "x-go-name": "RequestId"
          },
          "result": {
            "type": "string",
            "x-go-name": "Result"
          }
        },
        "x-go-package": "git.devpros.nl/klippa/custom-ocr/controllers/UserDataSetController"
      },
      "getUserDataSetRecordBody": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/UserDataSetRecord"
          },
          "request_id": {
            "type": "string",
            "x-go-name": "RequestId"
          },
          "result": {
            "type": "string",
            "x-go-name": "Result"
          }
        },
        "x-go-package": "git.devpros.nl/klippa/custom-ocr/controllers/UserDataSetController"
      },
      "getUserDataSetRecords": {
        "type": "object",
        "properties": {
          "Count": {
            "type": "integer",
            "format": "int64"
          },
          "MoreResults": {
            "type": "boolean"
          },
          "Page": {
            "type": "integer",
            "format": "int64"
          },
          "Pages": {
            "type": "integer",
            "format": "int64"
          },
          "PerPage": {
            "type": "integer",
            "format": "int64"
          },
          "UserDataSetRecords": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserDataSetRecord"
            }
          }
        },
        "x-go-package": "git.devpros.nl/klippa/custom-ocr/controllers/UserDataSetController"
      },
      "getUserDataSetRecordsBody": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/getUserDataSetRecords"
          },
          "request_id": {
            "type": "string",
            "x-go-name": "RequestId"
          },
          "result": {
            "type": "string",
            "x-go-name": "Result"
          }
        },
        "x-go-package": "git.devpros.nl/klippa/custom-ocr/controllers/UserDataSetController"
      },
      "getUserDataSets": {
        "type": "object",
        "properties": {
          "Count": {
            "type": "integer",
            "format": "int64"
          },
          "MoreResults": {
            "type": "boolean"
          },
          "Page": {
            "type": "integer",
            "format": "int64"
          },
          "Pages": {
            "type": "integer",
            "format": "int64"
          },
          "PerPage": {
            "type": "integer",
            "format": "int64"
          },
          "UserDataSets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserDataSet"
            }
          }
        },
        "x-go-package": "git.devpros.nl/klippa/custom-ocr/controllers/UserDataSetController"
      },
      "getUserDataSetsBody": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/getUserDataSets"
          },
          "request_id": {
            "type": "string",
            "x-go-name": "RequestId"
          },
          "result": {
            "type": "string",
            "x-go-name": "Result"
          }
        },
        "x-go-package": "git.devpros.nl/klippa/custom-ocr/controllers/UserDataSetController"
      },
      "identityVerificationSDKSessionUploadBody": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/identityVerificationSDKSessionUploadBodyData"
          },
          "request_id": {
            "type": "string",
            "x-go-name": "RequestId"
          },
          "result": {
            "type": "string",
            "x-go-name": "Result"
          }
        },
        "x-go-package": "git.devpros.nl/klippa/custom-ocr/controllers/IdentityVerificationController"
      },
      "identityVerificationSDKSessionUploadBodyData": {
        "type": "object",
        "properties": {
          "Session": {
            "$ref": "#/components/schemas/IdentityVerificationSession"
          },
          "Status": {
            "$ref": "#/components/schemas/IdentityVerificationSessionStatus"
          },
          "Validations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IdentityVerificationSessionValidation"
            }
          }
        },
        "x-go-package": "git.devpros.nl/klippa/custom-ocr/controllers/IdentityVerificationController"
      },
      "identityVerificationSessions": {
        "type": "object",
        "properties": {
          "Count": {
            "type": "integer",
            "format": "int64"
          },
          "IdentityVerificationSessions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IdentityVerificationSessionResponse"
            }
          },
          "MoreResults": {
            "type": "boolean"
          },
          "Page": {
            "type": "integer",
            "format": "int64"
          },
          "Pages": {
            "type": "integer",
            "format": "int64"
          },
          "PerPage": {
            "type": "integer",
            "format": "int64"
          }
        },
        "x-go-package": "git.devpros.nl/klippa/custom-ocr/controllers/IdentityVerificationController"
      },
      "listIdentityVerificationSessionsBody": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/identityVerificationSessions"
          },
          "request_id": {
            "type": "string",
            "x-go-name": "RequestId"
          },
          "result": {
            "type": "string",
            "x-go-name": "Result"
          }
        },
        "x-go-package": "git.devpros.nl/klippa/custom-ocr/controllers/IdentityVerificationController"
      },
      "publicKeyStatisticsBody": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StatRow"
            },
            "x-go-name": "Data"
          },
          "request_id": {
            "type": "string",
            "x-go-name": "RequestId"
          },
          "result": {
            "type": "string",
            "x-go-name": "Result"
          }
        },
        "x-go-package": "git.devpros.nl/klippa/custom-ocr/controllers/PublicKeyController"
      },
      "respTemplate": {
        "type": "object",
        "properties": {
          "title": {
            "description": "The name of the template",
            "type": "string",
            "x-go-name": "Title"
          }
        },
        "x-go-package": "git.devpros.nl/klippa/custom-ocr/controllers/GlobalController"
      },
      "subKeyListBody": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/subKeys"
          },
          "request_id": {
            "type": "string",
            "x-go-name": "RequestId"
          },
          "result": {
            "type": "string",
            "x-go-name": "Result"
          }
        },
        "x-go-package": "git.devpros.nl/klippa/custom-ocr/controllers/SubKeyController"
      },
      "subKeyStatisticsBody": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StatRow"
            },
            "x-go-name": "Data"
          },
          "request_id": {
            "type": "string",
            "x-go-name": "RequestId"
          },
          "result": {
            "type": "string",
            "x-go-name": "Result"
          }
        },
        "x-go-package": "git.devpros.nl/klippa/custom-ocr/controllers/SubKeyController"
      },
      "subKeys": {
        "type": "object",
        "properties": {
          "Count": {
            "type": "integer",
            "format": "int64"
          },
          "MoreResults": {
            "type": "boolean"
          },
          "Page": {
            "type": "integer",
            "format": "int64"
          },
          "Pages": {
            "type": "integer",
            "format": "int64"
          },
          "PerPage": {
            "type": "integer",
            "format": "int64"
          },
          "SubKeys": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Key"
            }
          }
        },
        "x-go-package": "git.devpros.nl/klippa/custom-ocr/controllers/SubKeyController"
      },
      "updateIdentityVerificationSessionBody": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/IdentityVerificationSessionResponse"
          },
          "request_id": {
            "type": "string",
            "x-go-name": "RequestId"
          },
          "result": {
            "type": "string",
            "x-go-name": "Result"
          }
        },
        "x-go-package": "git.devpros.nl/klippa/custom-ocr/controllers/IdentityVerificationController"
      },
      "updateUserDataSetBody": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/UserDataSet"
          },
          "request_id": {
            "type": "string",
            "x-go-name": "RequestId"
          },
          "result": {
            "type": "string",
            "x-go-name": "Result"
          }
        },
        "x-go-package": "git.devpros.nl/klippa/custom-ocr/controllers/UserDataSetController"
      },
      "updateUserDataSetForm": {
        "type": "object",
        "properties": {
          "LastSyncDate": {
            "description": "The last sync date to keep track when you last updated this set.\nWe advice to make this date equal to the last update date on the external side.\nMust be in RFC3339 format.",
            "type": "string",
            "format": "date-time"
          }
        },
        "x-go-package": "git.devpros.nl/klippa/custom-ocr/controllers/UserDataSetController"
      },
      "updateUserDataSetRecordBody": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/UserDataSetRecord"
          },
          "request_id": {
            "type": "string",
            "x-go-name": "RequestId"
          },
          "result": {
            "type": "string",
            "x-go-name": "Result"
          }
        },
        "x-go-package": "git.devpros.nl/klippa/custom-ocr/controllers/UserDataSetController"
      },
      "updateUserDataSetRecordForm": {
        "type": "object",
        "properties": {
          "LastSyncDate": {
            "description": "The last sync date to keep track when you last updated this set record.\nWe advice to make this date equal to the last update date on the external side.\nMust be in RFC3339 format.",
            "type": "string",
            "format": "date-time"
          },
          "Values": {
            "description": "The values that belong to this record.\nThe available values differ per set type.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/userDataSetRecordValueForm"
            }
          }
        },
        "x-go-package": "git.devpros.nl/klippa/custom-ocr/controllers/UserDataSetController"
      },
      "userDataSetRecordValueForm": {
        "type": "object",
        "required": [
          "Name",
          "Value"
        ],
        "properties": {
          "Name": {
            "description": "The name of the value.",
            "type": "string",
            "maxLength": 255
          },
          "Value": {
            "description": "The value of the value.",
            "type": "string",
            "maxLength": 255
          }
        },
        "x-go-package": "git.devpros.nl/klippa/custom-ocr/controllers/UserDataSetController"
      }
    }
  }
}