{
  "openapi": "3.0.0",
  "info": {
    "title": "Conversion Service",
    "description": "Conversion of raw 2D and 3D data into the VDS format, so that it is consumable by other SAP applications and services.",
    "version": "Beta",
    "contact": {
      "name": "SAP 3D Visualization service",
      "email": "sap_cp_3d_visualization@sap.com"
    }
  },
  "x-sap-shortText": "Convert raw 2D and 3D data into formats usable by SAP applications and services.",
  "externalDocs": {
    "description": "Application Help",
    "url": "https://help.sap.com/viewer/b881318bde9048e69bb74379dcc75d7f/Cloud/en-US/0cf9a68e18144d0aa6ca57b878671b65.html"
  },
  "security": [
    {
      "service_auth": [
        "convert"
      ]
    }
  ],
  "paths": {
    "/files": {
      "post": {
        "tags": [
          "Files"
        ],
        "summary": "Uploads a file.",
        "description": "Uploads a file to a temporary staging area. The request body is the raw, binary content of the file.",
        "parameters": [
          {
            "name": "X-SAP-3DVis-FileName",
            "in": "header",
            "required": true,
            "description": "The name of the file being uploaded, for example `test.prt`. May contain a relative path, for example `subfolder/test.prt`. The relative path will be preserved during conversion. This is especially useful for some CAD file formats that have dependencies between files and expect some files to be in a particular folder structure. If the file name contains special characters outside of the ASCII character set, they should be URL encoded.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Content-Type",
            "in": "header",
            "description": "The MIME type of the content being uploaded, for example `text/plain`. If not specified, the file extension will be used to determine the MIME type.\n",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/expiresInDays"
          },
          {
            "$ref": "#/components/parameters/customId"
          },
          {
            "$ref": "#/components/parameters/header3DVisContext"
          }
        ],
        "responses": {
          "200": {
            "description": "File upload succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileUploadSuccessResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FailureResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Files"
        ],
        "summary": "Uploads a file.",
        "description": "Uploads a file to a temporary staging area. The request body is a `multipart/form-data` request, as commonly used by web application file uploads.\nOnly a single file upload is supported, attempting to upload multiple files in one request will be rejected by the service.",
        "parameters": [
          {
            "$ref": "#/components/parameters/expiresInDays"
          },
          {
            "$ref": "#/components/parameters/customId"
          },
          {
            "$ref": "#/components/parameters/header3DVisContext"
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "description": "The file to upload.",
                    "type": "string",
                    "format": "binary"
                  }
                },
                "required": [
                  "file"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "File upload succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileUploadSuccessResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FailureResponse"
                }
              }
            }
          }
        }
      }
    },
    "/files/{id}": {
      "get": {
        "tags": [
          "Files"
        ],
        "summary": "Downloads a file.",
        "description": "Downloads a file from the staging area.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the file to download, for example `abc123`.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/customId"
          },
          {
            "$ref": "#/components/parameters/header3DVisContext"
          }
        ],
        "responses": {
          "200": {
            "description": "File download successful.",
            "headers": {
              "Content-Disposition": {
                "description": "Contains the disposition of the content (always `attachment`), as well as the file name to use for the downloaded file.",
                "schema": {
                  "type": "string",
                  "pattern": "^(?:attachment; filename=)[\\w,\\s,-]+\\.[\\w,-]{3}$"
                }
              },
              "Content-Length": {
                "description": "The size of the file, in bytes.",
                "schema": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            },
            "content": {
              "application/binary": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/binary": {
                "schema": {
                  "$ref": "#/components/schemas/FailureResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Files"
        ],
        "summary": "Deletes a file.",
        "description": "Deletes a file from the staging area.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the file to delete, for example `abc123`.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/header3DVisContext"
          }
        ],
        "responses": {
          "200": {
            "description": "File was deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FailureResponse"
                }
              }
            }
          }
        }
      }
    },
    "/jobs": {
      "post": {
        "tags": [
          "Jobs"
        ],
        "summary": "Creates and starts a new conversion job.",
        "description": "Creates and starts a new conversion job, converting uploaded files into output VDS files.",
        "parameters": [
          {
            "$ref": "#/components/parameters/customId"
          },
          {
            "$ref": "#/components/parameters/header3DVisContext"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/JobRequest"
              }
            }
          },
          "description": "A description of the files to convert, as well as any settings to use during conversion.",
          "required": true
        },
        "responses": {
          "200": {
            "description": "Job started successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FailureResponse"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Jobs"
        ],
        "summary": "Gets a list of jobs.",
        "description": "Gets a list of the IDs of conversion jobs created by the current user. This list is limited to the `1000` most recent jobs, and is in descending order, most recent first.",
        "parameters": [
          {
            "$ref": "#/components/parameters/header3DVisContext"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of job IDs is returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "maxItems": 1000
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FailureResponse"
                }
              }
            }
          }
        }
      }
    },
    "/jobs/{id}": {
      "get": {
        "tags": [
          "Jobs"
        ],
        "summary": "Get the current status of a job.",
        "description": "Gets the status of the job identified by `id`.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the job to get the details for, e.g. `123`.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/customId"
          },
          {
            "$ref": "#/components/parameters/header3DVisContext"
          }
        ],
        "responses": {
          "200": {
            "description": "Job status retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JobDetailResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FailureResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Jobs"
        ],
        "summary": "Deletes a job.",
        "description": "Deletes a job, and all files associated with the job from the staging area. This includes the original files, as well as the converted output files.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the job to delete, for example `123`.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/header3DVisContext"
          }
        ],
        "responses": {
          "200": {
            "description": "Job deleted successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FailureResponse"
                }
              }
            }
          }
        }
      }
    },
    "/jobs/{id}/originals": {
      "delete": {
        "tags": [
          "Jobs"
        ],
        "summary": "Deletes the original files for a job.",
        "description": "Deletes all original files associated with a job from the staging area.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the job to delete original files for, for example `123`.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/header3DVisContext"
          }
        ],
        "responses": {
          "200": {
            "description": "Original files deleted successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FailureResponse"
                }
              }
            }
          }
        }
      }
    },
    "/jobs/{id}/outputs": {
      "delete": {
        "tags": [
          "Jobs"
        ],
        "summary": "Deletes the converted output files for a job.",
        "description": "Deletes all converted output files associated with a job from the staging area.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the job to delete output files for, for example `123`.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/header3DVisContext"
          }
        ],
        "responses": {
          "200": {
            "description": "Output files deleted successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FailureResponse"
                }
              }
            }
          }
        }
      }
    },
    "/settings/system": {
      "get": {
        "tags": [
          "Settings"
        ],
        "summary": "Get the system settings.",
        "operationId": "getSystemSettings",
        "parameters": [
          {
            "$ref": "#/components/parameters/header3DVisContext"
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SystemSettingsResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FailureResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "servers": [
    {
      "url": "https://{subaccountname}.sap-3d-conversion.cfapps.{region}.hana.ondemand.com/{instancename}/v1",
      "description": "Conversion Service API on SAP Business Technology Platform",
      "templates": {
        "subaccountname": "The name of the subaccount on SAP Business Technology Platform",
        "region": {
          "enum": [
            "eu10",
            "us10"
          ],
          "default": "eu10",
          "description": "The SAP Business Technology Platform region where the Conversion Service is being used from."
        },
        "instancename": "The name of the Conversion Service instance to access (obtained from service binding)."
      }
    }
  ],
  "components": {
    "parameters": {
      "customId": {
        "name": "X-SAP-3DVis-CustomId",
        "in": "header",
        "required": false,
        "description": "The custom identifier supplied by the caller.",
        "schema": {
          "type": "string",
          "pattern": "^[a-zA-Z0-9.\\\\-_]{1,64}$"
        }
      },
      "expiresInDays": {
        "name": "expiresInDays",
        "in": "query",
        "required": false,
        "description": "The amount of time, in days, after which uploaded files will expire and be deleted from the staging area.\n",
        "schema": {
          "type": "integer",
          "format": "int32",
          "minimum": 1,
          "maximum": 30,
          "default": 1
        }
      },
      "header3DVisContext": {
        "name": "X-SAP-3DVis-Context",
        "in": "header",
        "required": false,
        "description": "A value to be stored with API usage information. The API user can use this to define custom groupings for aggregating API usage information.",
        "schema": {
          "type": "string"
        }
      }
    },
    "securitySchemes": {
      "service_auth": {
        "type": "oauth2",
        "flows": {
          "clientCredentials": {
            "tokenUrl": "https://{subaccountname}.authentication.{region}.hana.ondemand.com/oauth/token",
            "scopes": {
              "convert": "Ability to convert files."
            }
          }
        }
      }
    },
    "schemas": {
      "ResultDefaultSuccess": {
        "type": "string",
        "description": "Enumerates the possible results of an operation.\n  * `success`: The operation was successful.\n  * `failure`: The operation failed.",
        "enum": [
          "success",
          "failure"
        ],
        "default": "success"
      },
      "ResultDefaultFailure": {
        "type": "string",
        "description": "Enumerates the possible results of an operation.\n  * `success`: The operation was successful.\n  * `failure`: The operation failed.",
        "enum": [
          "failure",
          "success"
        ],
        "default": "failure"
      },
      "ProcessingSettings": {
        "type": "object",
        "properties": {
          "output_expiry_days": {
            "type": "integer",
            "format": "int32",
            "description": "Number of days that output files are kept before being deleted. The default is `1` day, the maximum is `30` days.",
            "default": 1,
            "minimum": 1,
            "maximum": 30
          },
          "is_missing_cad_file_error": {
            "type": "boolean",
            "default": false,
            "description": "Whether it is an error if a file referenced by other files in a conversion job is missing. If it is not an error, conversion will proceed."
          }
        }
      },
      "ImportSettings": {
        "type": "object",
        "properties": {
          "load_hidden_geometry": {
            "type": "boolean",
            "description": "Whether to include hidden geometry in output files. The default is `false`.",
            "default": false
          },
          "load_metadata": {
            "type": "boolean",
            "description": "Whether to include metadata in output files. The default is `true`.",
            "default": true
          },
          "load_hidden_metadata": {
            "type": "boolean",
            "description": "Whether to include hidden metadata in output files. The default is `false`.",
            "default": false
          },
          "load_pmi": {
            "type": "boolean",
            "description": "Whether to include PMI information in output files. The default is `false`.",
            "default": false
          },
          "load_hidden_pmi": {
            "type": "boolean",
            "description": "Whether to include hidden PMI information in output files. The default is `false`.",
            "default": false
          },
          "quality": {
            "type": "string",
            "description": "mesh quality. if not specified - it will default to 'medium_low'",
            "enum": [
              "very_low",
              "low",
              "medium_low",
              "medium",
              "medium_high",
              "high",
              "very_high"
            ],
            "default": "medium_low",
            "example": "medium_high"
          }
        }
      },
      "ExportSettings": {
        "type": "object",
        "properties": {
          "compression": {
            "type": "integer",
            "format": "int32",
            "enum": [
              0,
              1
            ],
            "default": 1,
            "description": "Whether to compress output VDS files.\n* `0`: no compression\n* `1`: compression enabled\n"
          }
        },
        "additionalProperties": true
      },
      "Outputs": {
        "type": "string",
        "enum": [
          "viewable",
          "thumbnail"
        ]
      },
      "Original": {
        "type": "object",
        "required": [
          "id",
          "file_id"
        ],
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[a-zA-Z_]+[a-zA-Z0-9_]*$",
            "description": "An identifier for this original."
          },
          "name": {
            "type": "string",
            "description": "The name of the original. If supplied, will be used as the base name for the viewable file name, e.g. `name.vds`."
          },
          "file_id": {
            "type": "string",
            "description": "The identifier of the file as returned by file uploading. Optional when the original has children and `is_resolved_structure` is true."
          },
          "toplevel": {
            "type": "boolean",
            "default": false,
            "description": "Whether or not this file is a top-level file. The default is `false`. If every file in job request has top-level set to 'false' then conversion service will automatically detect the top-level assembly, otherwise only files with top-level set to 'true' will be martked as top-level after job is finished."
          },
          "outputs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Outputs"
            },
            "default": [
              "viewable"
            ],
            "description": "The types of outputs that should be created from the original.\n"
          },
          "import_settings": {
            "$ref": "#/components/schemas/ImportSettings"
          },
          "export_settings": {
            "$ref": "#/components/schemas/ExportSettings"
          }
        },
        "additionalProperties": true
      },
      "JobRequest": {
        "type": "object",
        "required": [
          "originals"
        ],
        "properties": {
          "processing_settings": {
            "$ref": "#/components/schemas/ProcessingSettings"
          },
          "originals": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Original"
            },
            "minItems": 1,
            "description": "An array of objects referencing files in the staging area that should be converted."
          }
        },
        "additionalProperties": true
      },
      "JobResponse": {
        "type": "object",
        "required": [
          "id",
          "result"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "The job ID of the created job."
          },
          "result": {
            "$ref": "#/components/schemas/ResultDefaultSuccess"
          }
        }
      },
      "JobOutput": {
        "type": "object",
        "required": [
          "id",
          "status",
          "kind",
          "name"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "The identifier of this output."
          },
          "status": {
            "type": "string",
            "enum": [
              "created",
              "failed",
              "skipped"
            ],
            "description": "The status of the output."
          },
          "message": {
            "type": "string",
            "description": "If the status of the output is not `created`, this will contain a message that contains the reason for the failure of this particular output."
          },
          "kind": {
            "type": "string",
            "enum": [
              "viewable",
              "thumbnail"
            ],
            "description": "The type of the output."
          },
          "name": {
            "type": "string",
            "description": "The name of the file for this output."
          },
          "file_id": {
            "type": "string",
            "description": "The ID of the file containing the content of this output, can be downloaded with `GET /files/{id}`."
          },
          "original_id": {
            "type": "string",
            "description": "The ID of the original this output is associated with."
          },
          "original_file_name": {
            "type": "string",
            "description": "The name of the file of the original this output is associated with."
          },
          "configuration": {
            "type": "string",
            "description": "The name of the CAD configuration this output is associated with, if applicable."
          },
          "is_top_level": {
            "type": "boolean",
            "description": "Whether this output is a top-level file, this is automatically detected during conversion."
          },
          "failure_reason": {
            "type": "string",
            "enum": [
              "missing_file",
              "outdated_configuration",
              "unsupported_version",
              "unsupported_file_format",
              "empty_file",
              "general_conversion_error",
              "file_corrupted"
            ],
            "description": "If conversion failed, enumerates the reasons for the conversion failure.\n* `missing_file`: A file referenced by the original associated with this output was missing.\n* `outdated_configuration`: A CAD configuration in the original is out of date and needs to be rebuilt.\n* `unsupported_version`: The original file is of a supported file type, but an unsupported version.\n* `unsupported_file_format`: The original file is not in a supported file format.\n* `empty_file`: The original file is empty and did not contain any content.\n* `general_conversion_error`: An error occurred while performing conversion.\n* `file_corrupted`: The original file is corrupt.\n"
          },
          "missing_referenced_files": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Files referenced by the original associated with this output were missing."
          },
          "out_of_date_configurations": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "CAD configurations in the original are out of date and need to be rebuilt."
          }
        }
      },
      "JobDetailResponse": {
        "type": "object",
        "required": [
          "id",
          "status",
          "progress"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "The job ID."
          },
          "status": {
            "type": "string",
            "enum": [
              "queued",
              "running",
              "completed"
            ],
            "description": "The status of the job.\n* `queued`: The job has been created, but has not yet started running.\n* `pending`: The job is running.\n* `completed`: The job has completed. Refer to `result` to determine if it was successful.\n"
          },
          "result": {
            "$ref": "#/components/schemas/ResultDefaultSuccess"
          },
          "progress": {
            "type": "number",
            "format": "double",
            "description": "The progress of the job, as a percentage."
          },
          "progress_text": {
            "type": "string",
            "description": "A human-readable text message describing the current work being performed by the job."
          },
          "message": {
            "type": "string",
            "description": "If the result of the job was failure, will contain the overall reason for the failure of the job."
          },
          "outputs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/JobOutput"
            },
            "description": "If the result is `success`, contains the list of outputs produced by the job. May be empty if the outputs have expired."
          },
          "created": {
            "description": "The time when the job was created.",
            "type": "string",
            "format": "date"
          },
          "started": {
            "description": "The time when the job was started.",
            "type": "string",
            "format": "date"
          },
          "finished": {
            "description": "The time when the job completed.",
            "type": "string",
            "format": "date"
          }
        }
      },
      "FileUploadSuccessResponse": {
        "type": "object",
        "required": [
          "result",
          "id"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "An identifier for the uploaded file. This identifier can be used to refer to the file in subsequent requests to the service, such as when calling `POST /jobs`."
          },
          "result": {
            "$ref": "#/components/schemas/ResultDefaultSuccess"
          }
        }
      },
      "SuccessResponse": {
        "type": "object",
        "required": [
          "result",
          "message"
        ],
        "properties": {
          "result": {
            "$ref": "#/components/schemas/ResultDefaultSuccess"
          },
          "message": {
            "type": "string",
            "description": "A message providing some additional information about the successful operation."
          }
        }
      },
      "FailureResponse": {
        "type": "object",
        "required": [
          "result",
          "message"
        ],
        "properties": {
          "result": {
            "$ref": "#/components/schemas/ResultDefaultFailure"
          },
          "message": {
            "type": "string",
            "description": "A message describing the reason the operation failed."
          }
        }
      },
      "SystemSettings": {
        "description": "The system settings.",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/SuccessResponse"
          },
          {
            "properties": {
              "maxRequestSize": {
                "description": "The payload size limit (in bytes) for ordinary (non-multipart MIME) requests. The service enforces this limit, but the client side code should also prevent payloads larger than this being sent to the server.",
                "type": "integer"
              },
              "maxMultipartRequestSize": {
                "description": "The payload size limit (in bytes) for multipart MIME requests. The service enforces this limit, but the client side code should also prevent payloads larger than this being sent to the server.",
                "type": "integer"
              },
              "maxJobStorageLength": {
                "description": "The max storage size limit (in bytes) for any conversion requests. The service enforces this limit, but the client side code should also prevent payloads larger than this being sent to the server.",
                "type": "integer"
              },
              "featureFlags": {
                "description": "A set of strings describing optional features to enable (allows for disabling of in-development features).",
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        ]
      },
      "SystemSettingsResponse": {
        "description": "System settings retrieval response.",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/SuccessResponse"
          },
          {
            "properties": {
              "systemSettings": {
                "$ref": "#/components/schemas/SystemSettings"
              }
            }
          }
        ]
      }
    }
  }
}