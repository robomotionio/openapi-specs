{
  "openapi": "3.0.0",
  "info": {
    "title": "OpenAI API",
    "description": "APIs for sampling from and fine-tuning language models",
    "version": "1.0.2",
    "contact": {
      "url": "https://beta.openai.com/docs/introduction",
      "name": "OpenAI"
    },
    "termsOfService": "https://openai.com/terms/"
  },
  "servers": [
    {
      "url": "https://api.openai.com/v1"
    }
  ],
  "tags": [
    {
      "name": "OpenAI",
      "description": "The OpenAI REST API"
    }
  ],
  "paths": {
    "/engines": {
      "get": {
        "operationId": "listEngines",
        "tags": [
          "OpenAI"
        ],
        "summary": "List engines",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListEnginesResponse"
                }
              }
            }
          }
        },
        "oaiMeta": {
          "name": "List engines",
          "group": "engines",
          "path": "list",
          "examples": {
            "curl": "curl https://api.openai.com/v1/engines \\\n  -H 'Authorization: Bearer YOUR_API_KEY'\n",
            "python": "import os\nimport openai\nopenai.api_key = os.getenv(\"OPENAI_API_KEY\")\nopenai.Engine.list()\n",
            "node.js": "const { Configuration, OpenAIApi } = require(\"openai\");\nconst configuration = new Configuration({\n  apiKey: process.env.OPENAI_API_KEY,\n});\nconst openai = new OpenAIApi(configuration);\nconst response = await openai.listEngines();\n"
          },
          "response": "{\n  \"data\": [\n    {\n      \"id\": \"engine-id-0\",\n      \"object\": \"engine\",\n      \"owner\": \"organization-owner\",\n      \"ready\": true\n    },\n    {\n      \"id\": \"engine-id-2\",\n      \"object\": \"engine\",\n      \"owner\": \"organization-owner\",\n      \"ready\": true\n    },\n    {\n      \"id\": \"engine-id-3\",\n      \"object\": \"engine\",\n      \"owner\": \"openai\",\n      \"ready\": false\n    },\n  ],\n  \"object\": \"list\"\n}\n"
        },
        "description": "Lists the currently available engines, and provides basic information about each one such as the owner and availability.",
        "parameters": [
          {
            "$ref": "#/components/parameters/OpenAI-Organization"
          }
        ]
      }
    },
    "/engines/{engine_id}": {
      "get": {
        "operationId": "retrieveEngine",
        "tags": [
          "OpenAI"
        ],
        "summary": "Retrieve engine",
        "parameters": [
          {
            "in": "path",
            "name": "engine_id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "davinci"
            },
            "description": "The ID of the engine to use for this request\n"
          },
          {
            "$ref": "#/components/parameters/OpenAI-Organization"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Engine"
                }
              }
            }
          }
        },
        "oaiMeta": {
          "name": "Retrieve engine",
          "group": "engines",
          "path": "retrieve",
          "examples": {
            "curl": "curl -u :YOUR_API_KEY https://api.openai.com/v1/engines/VAR_engine_id\n",
            "python": "import os\nimport openai\nopenai.api_key = os.getenv(\"OPENAI_API_KEY\")\nopenai.Engine.retrieve(\"VAR_engine_id\")\n",
            "node.js": "const { Configuration, OpenAIApi } = require(\"openai\");\nconst configuration = new Configuration({\n  apiKey: process.env.OPENAI_API_KEY,\n});\nconst openai = new OpenAIApi(configuration);\nconst response = await openai.retrieveEngine(\"VAR_engine_id\");\n"
          },
          "response": "{\n  \"id\": \"VAR_engine_id\",\n  \"object\": \"engine\",\n  \"owner\": \"openai\",\n  \"ready\": true\n}\n"
        },
        "description": "Retrieves an engine instance, providing basic information about the engine such as the owner and availability."
      }
    },
    "/engines/{engine_id}/completions": {
      "post": {
        "operationId": "createCompletion",
        "tags": [
          "OpenAI"
        ],
        "summary": "Create completion",
        "parameters": [
          {
            "in": "path",
            "name": "engine_id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "davinci"
            },
            "description": "The ID of the engine to use for this request\n"
          },
          {
            "$ref": "#/components/parameters/OpenAI-Organization"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCompletionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateCompletionResponse"
                }
              }
            }
          }
        },
        "oaiMeta": {
          "name": "Create completion",
          "group": "completions",
          "path": "create",
          "examples": {
            "curl": "curl https://api.openai.com/v1/engines/VAR_engine_id/completions \\\n  -H 'Content-Type: application/json' \\\n  -H 'Authorization: Bearer YOUR_API_KEY' \\\n  -d '{\n  \"prompt\": \"Say this is a test\",\n  \"max_tokens\": 5\n}'\n",
            "python": "import os\nimport openai\nopenai.api_key = os.getenv(\"OPENAI_API_KEY\")\nopenai.Completion.create(\n  engine=\"VAR_engine_id\",\n  prompt=\"Say this is a test\",\n  max_tokens=5\n)\n",
            "node.js": "const { Configuration, OpenAIApi } = require(\"openai\");\nconst configuration = new Configuration({\n  apiKey: process.env.OPENAI_API_KEY,\n});\nconst openai = new OpenAIApi(configuration);\nconst response = await openai.createCompletion(\"VAR_engine_id\", {\n  prompt: \"Say this is a test\",\n  max_tokens: 5,\n});\n"
          },
          "parameters": "{\n  \"prompt\": \"Say this is a test\",\n  \"max_tokens\": 5,\n  \"temperature\": 1,\n  \"top_p\": 1,\n  \"n\": 1,\n  \"stream\": false,\n  \"logprobs\": null,\n  \"stop\": \"\\n\"\n}\n",
          "response": "{\n  \"id\": \"cmpl-uqkvlQyYK7bGYrRHQ0eXlWi7\",\n  \"object\": \"text_completion\",\n  \"created\": 1589478378,\n  \"model\": \"VAR_engine_id\",\n  \"choices\": [\n    {\n      \"text\": \"\\n\\nThis is a test\",\n      \"index\": 0,\n      \"logprobs\": null,\n      \"finish_reason\": \"length\"\n    }\n  ]\n}\n"
        },
        "description": "Creates a new completion for the provided prompt and parameters"
      }
    },
    "/completions": {
      "post": {
        "operationId": "createCompletionFromModel",
        "tags": [
          "OpenAI"
        ],
        "summary": "Creates a completion using a fine-tuned model",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCompletionFromModelRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateCompletionResponse"
                }
              }
            }
          }
        },
        "oaiMeta": {
          "excludeFromDocs": true
        },
        "description": "Creates a completion using a fine-tuned model",
        "parameters": [
          {
            "$ref": "#/components/parameters/OpenAI-Organization"
          }
        ]
      }
    },
    "/engines/{engine_id}/search": {
      "post": {
        "operationId": "createSearch",
        "tags": [
          "OpenAI"
        ],
        "summary": "Create search",
        "parameters": [
          {
            "in": "path",
            "name": "engine_id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "davinci"
            },
            "description": "The ID of the engine to use for this request.  You can select one of `ada`, `babbage`, `curie`, or `davinci`."
          },
          {
            "$ref": "#/components/parameters/OpenAI-Organization"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSearchRequest"
              }
            }
          },
          "description": "The search endpoint computes similarity scores between provided query and documents. Documents can be passed directly to the API if there are no more than 200 of them.\n\nTo go beyond the 200 document limit, documents can be processed offline and then used for efficient retrieval at query time. When file is set, the search endpoint searches over all the documents in the given file and returns up to the max_rerank number of documents. These documents will be returned along with their search scores.\n\nThe similarity score is a positive score that usually ranges from 0 to 300 (but can sometimes go higher), where a score above 200 usually means the document is semantically similar to the query."
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateSearchResponse"
                }
              }
            }
          }
        },
        "oaiMeta": {
          "name": "Create search",
          "group": "searches",
          "path": "create",
          "examples": {
            "curl": "curl https://api.openai.com/v1/engines/davinci/search \\\n  -H \"Content-Type: application/json\" \\\n  -H 'Authorization: Bearer YOUR_API_KEY' \\\n  -d '{\n  \"documents\": [\"White House\", \"hospital\", \"school\"],\n  \"query\": \"the president\"\n}'\n",
            "python": "import os\nimport openai\nopenai.api_key = os.getenv(\"OPENAI_API_KEY\")\nopenai.Engine(\"davinci\").search(\n  documents=[\"White House\", \"hospital\", \"school\"],\n  query=\"the president\"\n)\n",
            "node.js": "const { Configuration, OpenAIApi } = require(\"openai\");\nconst configuration = new Configuration({\n  apiKey: process.env.OPENAI_API_KEY,\n});\nconst openai = new OpenAIApi(configuration);\nconst response = await openai.createSearch(\"davinci\", {\n  documents: [\"White House\", \"hospital\", \"school\"],\n  query: \"the president\",\n});\n"
          },
          "parameters": "{\n  \"documents\": [\n    \"White House\",\n    \"hospital\",\n    \"school\"\n  ],\n  \"query\": \"the president\"\n}\n",
          "response": "{\n  \"data\": [\n    {\n      \"document\": 0,\n      \"object\": \"search_result\",\n      \"score\": 215.412\n    },\n    {\n      \"document\": 1,\n      \"object\": \"search_result\",\n      \"score\": 40.316\n    },\n    {\n      \"document\": 2,\n      \"object\": \"search_result\",\n      \"score\":  55.226\n    }\n  ],\n  \"object\": \"list\"\n}\n"
        },
        "description": "The search endpoint computes similarity scores between provided query and documents. Documents can be passed directly to the API if there are no more than 200 of them.\n\nTo go beyond the 200 document limit, documents can be processed offline and then used for efficient retrieval at query time. When file is set, the search endpoint searches over all the documents in the given file and returns up to the max_rerank number of documents. These documents will be returned along with their search scores.\n\nThe similarity score is a positive score that usually ranges from 0 to 300 (but can sometimes go higher), where a score above 200 usually means the document is semantically similar to the query."
      }
    },
    "/files": {
      "get": {
        "operationId": "listFiles",
        "tags": [
          "OpenAI"
        ],
        "summary": "List files",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListFilesResponse"
                }
              }
            }
          }
        },
        "oaiMeta": {
          "name": "List files",
          "group": "files",
          "path": "list",
          "examples": {
            "curl": "curl https://api.openai.com/v1/files \\\n  -H 'Authorization: Bearer YOUR_API_KEY'\n",
            "python": "import os\nimport openai\nopenai.api_key = os.getenv(\"OPENAI_API_KEY\")\nopenai.File.list()\n",
            "node.js": "const { Configuration, OpenAIApi } = require(\"openai\");\nconst configuration = new Configuration({\n  apiKey: process.env.OPENAI_API_KEY,\n});\nconst openai = new OpenAIApi(configuration);\nconst response = await openai.listFiles();\n"
          },
          "response": "{\n  \"data\": [\n    {\n      \"id\": \"file-ccdDZrC3iZVNiQVeEA6Z66wf\",\n      \"object\": \"file\",\n      \"bytes\": 175,\n      \"created_at\": 1613677385,\n      \"filename\": \"train.jsonl\",\n      \"purpose\": \"search\"\n    },\n    {\n      \"id\": \"file-XjGxS3KTG0uNmNOK362iJua3\",\n      \"object\": \"file\",\n      \"bytes\": 140,\n      \"created_at\": 1613779121,\n      \"filename\": \"puppy.jsonl\",\n      \"purpose\": \"search\"\n    }\n  ],\n  \"object\": \"list\"\n}\n"
        },
        "description": "Returns a list of files that belong to the user's organization.",
        "parameters": [
          {
            "$ref": "#/components/parameters/OpenAI-Organization"
          }
        ]
      },
      "post": {
        "operationId": "createFile",
        "tags": [
          "OpenAI"
        ],
        "summary": "Upload file",
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/CreateFileRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIFile"
                }
              }
            }
          }
        },
        "oaiMeta": {
          "name": "Upload file",
          "group": "files",
          "path": "upload",
          "examples": {
            "curl": "curl https://api.openai.com/v1/files \\\n  -H \"Authorization: Bearer YOUR_API_KEY\" \\\n  -F purpose=\"answers\" \\\n  -F file='@puppy.jsonl'\n",
            "python": "import os\nimport openai\nopenai.api_key = os.getenv(\"OPENAI_API_KEY\")\nopenai.File.create(\n  file=open(\"puppy.jsonl\"),\n  purpose='answers'\n)\n",
            "node.js": "const fs = require(\"fs\");\nconst { Configuration, OpenAIApi } = require(\"openai\");\nconst configuration = new Configuration({\n  apiKey: process.env.OPENAI_API_KEY,\n});\nconst openai = new OpenAIApi(configuration);\nconst response = await openai.createFile(\n  fs.createReadStream(\"puppy.jsonl\"),\n  \"answers\"\n);\n"
          },
          "response": "{\n  \"id\": \"file-XjGxS3KTG0uNmNOK362iJua3\",\n  \"object\": \"file\",\n  \"bytes\": 140,\n  \"created_at\": 1613779121,\n  \"filename\": \"puppy.jsonl\",\n  \"purpose\": \"answers\"\n}\n"
        },
        "description": "Upload a file that contains document(s) to be used across various endpoints/features. Currently, the size of all the files uploaded by one organization can be up to 1 GB. Please contact us if you need to increase the storage limit.",
        "parameters": [
          {
            "$ref": "#/components/parameters/OpenAI-Organization"
          }
        ]
      }
    },
    "/files/{file_id}": {
      "delete": {
        "operationId": "deleteFile",
        "tags": [
          "OpenAI"
        ],
        "summary": "Delete file",
        "parameters": [
          {
            "in": "path",
            "name": "file_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the file to use for this request"
          },
          {
            "$ref": "#/components/parameters/OpenAI-Organization"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteFileResponse"
                }
              }
            }
          }
        },
        "oaiMeta": {
          "name": "Delete file",
          "group": "files",
          "path": "delete",
          "examples": {
            "curl": "curl https://api.openai.com/v1/files/file-XjGxS3KTG0uNmNOK362iJua3 \\\n  -X DELETE \\\n  -H 'Authorization: Bearer YOUR_API_KEY'\n",
            "python": "import os\nimport openai\nopenai.api_key = os.getenv(\"OPENAI_API_KEY\")\nopenai.File.delete(\"file-XjGxS3KTG0uNmNOK362iJua3\")\n",
            "node.js": "const { Configuration, OpenAIApi } = require(\"openai\");\nconst configuration = new Configuration({\n  apiKey: process.env.OPENAI_API_KEY,\n});\nconst openai = new OpenAIApi(configuration);\nconst response = await openai.deleteFile(\"file-XjGxS3KTG0uNmNOK362iJua3\");\n"
          },
          "response": "{\n  \"id\": \"file-XjGxS3KTG0uNmNOK362iJua3\",\n  \"object\": \"file\",\n  \"deleted\": true\n}\n"
        },
        "description": "Delete a file."
      },
      "get": {
        "operationId": "retrieveFile",
        "tags": [
          "OpenAI"
        ],
        "summary": "Retrieve file",
        "parameters": [
          {
            "in": "path",
            "name": "file_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the file to use for this request"
          },
          {
            "$ref": "#/components/parameters/OpenAI-Organization"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpenAIFile"
                }
              }
            }
          }
        },
        "oaiMeta": {
          "name": "Retrieve file",
          "group": "files",
          "path": "retrieve",
          "examples": {
            "curl": "curl https://api.openai.com/v1/files/file-XjGxS3KTG0uNmNOK362iJua3 \\\n  -H 'Authorization: Bearer YOUR_API_KEY'\n",
            "python": "import os\nimport openai\nopenai.api_key = os.getenv(\"OPENAI_API_KEY\")\nopenai.File.retrieve(\"file-XjGxS3KTG0uNmNOK362iJua3\")\n",
            "node.js": "const { Configuration, OpenAIApi } = require(\"openai\");\nconst configuration = new Configuration({\n  apiKey: process.env.OPENAI_API_KEY,\n});\nconst openai = new OpenAIApi(configuration);\nconst response = await openai.retrieveFile(\"file-XjGxS3KTG0uNmNOK362iJua3\");\n"
          },
          "response": "{\n  \"id\": \"file-XjGxS3KTG0uNmNOK362iJua3\",\n  \"object\": \"file\",\n  \"bytes\": 140,\n  \"created_at\": 1613779657,\n  \"filename\": \"puppy.jsonl\",\n  \"purpose\": \"answers\"\n}\n"
        },
        "description": "Returns information about a specific file."
      }
    },
    "/files/{file_id}/content": {
      "get": {
        "operationId": "downloadFile",
        "tags": [
          "OpenAI"
        ],
        "summary": "Retrieve file content",
        "parameters": [
          {
            "in": "path",
            "name": "file_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the file to use for this request"
          },
          {
            "$ref": "#/components/parameters/OpenAI-Organization"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "oaiMeta": {
          "name": "Retrieve file content",
          "group": "files",
          "path": "retrieve-content",
          "examples": {
            "curl": "curl https://api.openai.com/v1/files/file-XjGxS3KTG0uNmNOK362iJua3/content \\\n  -H 'Authorization: Bearer YOUR_API_KEY' > file.jsonl\n",
            "python": "import os\nimport openai\nopenai.api_key = os.getenv(\"OPENAI_API_KEY\")\ncontent = openai.File.download(\"file-XjGxS3KTG0uNmNOK362iJua3\")\n",
            "node.js": "const { Configuration, OpenAIApi } = require(\"openai\");\nconst configuration = new Configuration({\n  apiKey: process.env.OPENAI_API_KEY,\n});\nconst openai = new OpenAIApi(configuration);\nconst response = await openai.downloadFile(\"file-XjGxS3KTG0uNmNOK362iJua3\");\n"
          }
        },
        "description": "Returns the contents of the specified file"
      }
    },
    "/answers": {
      "post": {
        "operationId": "createAnswer",
        "tags": [
          "OpenAI"
        ],
        "summary": "Create answer",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAnswerRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateAnswerResponse"
                }
              }
            }
          }
        },
        "oaiMeta": {
          "name": "Create answer",
          "group": "answers",
          "path": "create",
          "beta": true,
          "examples": {
            "curl": "curl https://api.openai.com/v1/answers \\\n  -X POST \\\n  -H \"Authorization: Bearer YOUR_API_KEY\" \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"documents\": [\"Puppy A is happy.\", \"Puppy B is sad.\"],\n    \"question\": \"which puppy is happy?\",\n    \"search_model\": \"ada\",\n    \"model\": \"curie\",\n    \"examples_context\": \"In 2017, U.S. life expectancy was 78.6 years.\",\n    \"examples\": [[\"What is human life expectancy in the United States?\",\"78 years.\"]],\n    \"max_tokens\": 5,\n    \"stop\": [\"\\n\", \"<|endoftext|>\"]\n  }'\n",
            "python": "import os\nimport openai\nopenai.api_key = os.getenv(\"OPENAI_API_KEY\")\nopenai.Answer.create(\n  search_model=\"ada\",\n  model=\"curie\",\n  question=\"which puppy is happy?\",\n  documents=[\"Puppy A is happy.\", \"Puppy B is sad.\"],\n  examples_context=\"In 2017, U.S. life expectancy was 78.6 years.\",\n  examples=[[\"What is human life expectancy in the United States?\",\"78 years.\"]],\n  max_tokens=5,\n  stop=[\"\\n\", \"<|endoftext|>\"],\n)\n",
            "node.js": "const { Configuration, OpenAIApi } = require(\"openai\");\nconst configuration = new Configuration({\n  apiKey: process.env.OPENAI_API_KEY,\n});\nconst openai = new OpenAIApi(configuration);\nconst response = await openai.createAnswer({\n  search_model: \"ada\",\n  model: \"curie\",\n  question: \"which puppy is happy?\",\n  documents: [\"Puppy A is happy.\", \"Puppy B is sad.\"],\n  examples_context: \"In 2017, U.S. life expectancy was 78.6 years.\",\n  examples: [[\"What is human life expectancy in the United States?\",\"78 years.\"]],\n  max_tokens: 5,\n  stop: [\"\\n\", \"<|endoftext|>\"],\n});\n"
          },
          "parameters": "{\n  \"documents\": [\"Puppy A is happy.\", \"Puppy B is sad.\"],\n  \"question\": \"which puppy is happy?\",\n  \"search_model\": \"ada\",\n  \"model\": \"curie\",\n  \"examples_context\": \"In 2017, U.S. life expectancy was 78.6 years.\",\n  \"examples\": [[\"What is human life expectancy in the United States?\",\"78 years.\"]],\n  \"max_tokens\": 5,\n  \"stop\": [\"\\n\", \"<|endoftext|>\"]\n}\n",
          "response": "{\n  \"answers\": [\n    \"puppy A.\"\n  ],\n  \"completion\": \"cmpl-2euVa1kmKUuLpSX600M41125Mo9NI\",\n  \"model\": \"curie:2020-05-03\",\n  \"object\": \"answer\",\n  \"search_model\": \"ada\",\n  \"selected_documents\": [\n    {\n      \"document\": 0,\n      \"text\": \"Puppy A is happy. \"\n    },\n    {\n      \"document\": 1,\n      \"text\": \"Puppy B is sad. \"\n    }\n  ]\n}\n"
        },
        "description": "Answers the specified question using the provided documents and examples.\n\nThe endpoint first searches over provided documents or files to find relevant context. The relevant context is combined with the provided examples and question to create the prompt for completion.",
        "parameters": [
          {
            "$ref": "#/components/parameters/OpenAI-Organization"
          }
        ]
      }
    },
    "/classifications": {
      "post": {
        "operationId": "createClassification",
        "tags": [
          "OpenAI"
        ],
        "summary": "Create classification",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateClassificationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateClassificationResponse"
                }
              }
            }
          }
        },
        "oaiMeta": {
          "name": "Create classification",
          "group": "classifications",
          "path": "create",
          "beta": true,
          "examples": {
            "curl": "curl https://api.openai.com/v1/classifications \\\n  -X POST \\\n  -H \"Authorization: Bearer YOUR_API_KEY\" \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"examples\": [\n      [\"A happy moment\", \"Positive\"],\n      [\"I am sad.\", \"Negative\"],\n      [\"I am feeling awesome\", \"Positive\"]],\n    \"query\": \"It is a raining day :(\",\n    \"search_model\": \"ada\",\n    \"model\": \"curie\",\n    \"labels\":[\"Positive\", \"Negative\", \"Neutral\"]\n  }'\n",
            "python": "import os\nimport openai\nopenai.api_key = os.getenv(\"OPENAI_API_KEY\")\nopenai.Classification.create(\n  search_model=\"ada\",\n  model=\"curie\",\n  examples=[\n    [\"A happy moment\", \"Positive\"],\n    [\"I am sad.\", \"Negative\"],\n    [\"I am feeling awesome\", \"Positive\"]\n  ],\n  query=\"It is a raining day :(\",\n  labels=[\"Positive\", \"Negative\", \"Neutral\"],\n)\n",
            "node.js": "const { Configuration, OpenAIApi } = require(\"openai\");\nconst configuration = new Configuration({\n  apiKey: process.env.OPENAI_API_KEY,\n});\nconst openai = new OpenAIApi(configuration);\nconst response = await openai.createClassification({\n  search_model: \"ada\",\n  model: \"curie\",\n  examples: [\n    [\"A happy moment\", \"Positive\"],\n    [\"I am sad.\", \"Negative\"],\n    [\"I am feeling awesome\", \"Positive\"]\n  ],\n  query:\"It is a raining day :(\",\n  labels: [\"Positive\", \"Negative\", \"Neutral\"],\n});\n"
          },
          "parameters": "{\n  \"examples\": [\n    [\"A happy moment\", \"Positive\"],\n    [\"I am sad.\", \"Negative\"],\n    [\"I am feeling awesome\", \"Positive\"]\n  ],\n  \"labels\": [\"Positive\", \"Negative\", \"Neutral\"],\n  \"query\": \"It is a raining day :(\",\n  \"search_model\": \"ada\",\n  \"model\": \"curie\"\n}\n",
          "response": "{\n  \"completion\": \"cmpl-2euN7lUVZ0d4RKbQqRV79IiiE6M1f\",\n  \"label\": \"Negative\",\n  \"model\": \"curie:2020-05-03\",\n  \"object\": \"classification\",\n  \"search_model\": \"ada\",\n  \"selected_examples\": [\n    {\n      \"document\": 1,\n      \"label\": \"Negative\",\n      \"text\": \"I am sad.\"\n    },\n    {\n      \"document\": 0,\n      \"label\": \"Positive\",\n      \"text\": \"A happy moment\"\n    },\n    {\n      \"document\": 2,\n      \"label\": \"Positive\",\n      \"text\": \"I am feeling awesome\"\n    }\n  ]\n}\n"
        },
        "description": "Classifies the specified query using provided examples.\n\nThe endpoint first searches over the labeled examples to select the ones most relevant for the particular query. Then, the relevant examples are combined with the query to construct a prompt to produce the final label via the completions endpoint.\n\nLabeled examples can be provided via an uploaded file, or explicitly listed in the request using the examples parameter for quick tests and small scale use cases.",
        "parameters": [
          {
            "$ref": "#/components/parameters/OpenAI-Organization"
          }
        ]
      }
    },
    "/fine-tunes": {
      "post": {
        "operationId": "createFineTune",
        "tags": [
          "OpenAI"
        ],
        "summary": "Create fine-tune",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateFineTuneRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FineTune"
                }
              }
            }
          }
        },
        "oaiMeta": {
          "name": "Create fine-tune",
          "group": "fine-tunes",
          "path": "create",
          "beta": true,
          "examples": {
            "curl": "curl https://api.openai.com/v1/fine-tunes \\\n  -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer YOUR_API_KEY\" \\\n  -d '{\n  \"training_file\": \"file-XGinujblHPwGLSztz8cPS8XY\"\n}'\n",
            "python": "import os\nimport openai\nopenai.api_key = os.getenv(\"OPENAI_API_KEY\")\nopenai.FineTune.create(training_file=\"file-XGinujblHPwGLSztz8cPS8XY\")\n",
            "node.js": "const { Configuration, OpenAIApi } = require(\"openai\");\nconst configuration = new Configuration({\n  apiKey: process.env.OPENAI_API_KEY,\n});\nconst openai = new OpenAIApi(configuration);\nconst response = await openai.createFineTune({\n  training_file: \"file-XGinujblHPwGLSztz8cPS8XY\",\n});\n"
          },
          "response": "{\n  \"id\": \"ft-AF1WoRqd3aJAHsqc9NY7iL8F\",\n  \"object\": \"fine-tune\",\n  \"model\": \"curie\",\n  \"created_at\": 1614807352,\n  \"events\": [\n    {\n      \"object\": \"fine-tune-event\",\n      \"created_at\": 1614807352,\n      \"level\": \"info\",\n      \"message\": \"Job enqueued. Waiting for jobs ahead to complete. Queue number: 0.\"\n    }\n  ],\n  \"fine_tuned_model\": null,\n  \"hyperparams\": {\n    \"batch_size\": 4,\n    \"learning_rate_multiplier\": 0.1,\n    \"n_epochs\": 4,\n    \"prompt_loss_weight\": 0.1,\n  },\n  \"organization_id\": \"org-...\",\n  \"result_files\": [],\n  \"status\": \"pending\",\n  \"validation_files\": [],\n  \"training_files\": [\n    {\n      \"id\": \"file-XGinujblHPwGLSztz8cPS8XY\",\n      \"object\": \"file\",\n      \"bytes\": 1547276,\n      \"created_at\": 1610062281,\n      \"filename\": \"my-data-train.jsonl\",\n      \"purpose\": \"fine-tune-train\"\n    }\n  ],\n  \"updated_at\": 1614807352,\n}\n"
        },
        "description": "Creates a job that fine-tunes a specified model from a given dataset.\n\nResponse includes details of the enqueued job including job status and the name of the fine-tuned models once complete.",
        "parameters": [
          {
            "$ref": "#/components/parameters/OpenAI-Organization"
          }
        ]
      },
      "get": {
        "operationId": "listFineTunes",
        "tags": [
          "OpenAI"
        ],
        "summary": "List fine-tunes",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListFineTunesResponse"
                }
              }
            }
          }
        },
        "oaiMeta": {
          "name": "List fine-tunes",
          "group": "fine-tunes",
          "path": "list",
          "beta": true,
          "examples": {
            "curl": "curl https://api.openai.com/v1/fine-tunes \\\n  -H 'Authorization: Bearer YOUR_API_KEY'\n",
            "python": "import os\nimport openai\nopenai.api_key = os.getenv(\"OPENAI_API_KEY\")\nopenai.FineTune.list()\n",
            "node.js": "const { Configuration, OpenAIApi } = require(\"openai\");\nconst configuration = new Configuration({\n  apiKey: process.env.OPENAI_API_KEY,\n});\nconst openai = new OpenAIApi(configuration);\nconst response = await openai.listFineTunes();\n"
          },
          "response": "{\n  \"object\": \"list\",\n  \"data\": [\n    {\n      \"id\": \"ft-AF1WoRqd3aJAHsqc9NY7iL8F\",\n      \"object\": \"fine-tune\",\n      \"model\": \"curie\",\n      \"created_at\": 1614807352,\n      \"fine_tuned_model\": null,\n      \"hyperparams\": { ... },\n      \"organization_id\": \"org-...\",\n      \"result_files\": [],\n      \"status\": \"pending\",\n      \"validation_files\": [],\n      \"training_files\": [ { ... } ],\n      \"updated_at\": 1614807352,\n    },\n    { ... },\n    { ... }\n  ]\n}\n"
        },
        "description": "List your organization's fine-tuning jobs",
        "parameters": [
          {
            "$ref": "#/components/parameters/OpenAI-Organization"
          }
        ]
      }
    },
    "/fine-tunes/{fine_tune_id}": {
      "get": {
        "operationId": "retrieveFineTune",
        "tags": [
          "OpenAI"
        ],
        "summary": "Retrieve fine-tune",
        "parameters": [
          {
            "in": "path",
            "name": "fine_tune_id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "ft-AF1WoRqd3aJAHsqc9NY7iL8F"
            },
            "description": "The ID of the fine-tune job\n"
          },
          {
            "$ref": "#/components/parameters/OpenAI-Organization"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FineTune"
                }
              }
            }
          }
        },
        "oaiMeta": {
          "name": "Retrieve fine-tune",
          "group": "fine-tunes",
          "path": "retrieve",
          "beta": true,
          "examples": {
            "curl": "curl https://api.openai.com/v1/fine-tunes/ft-AF1WoRqd3aJAHsqc9NY7iL8F \\\n  -H \"Authorization: Bearer YOUR_API_KEY\"\n",
            "python": "import os\nimport openai\nopenai.api_key = os.getenv(\"OPENAI_API_KEY\")\nopenai.FineTune.retrieve(id=\"ft-AF1WoRqd3aJAHsqc9NY7iL8F\")\n",
            "node.js": "const { Configuration, OpenAIApi } = require(\"openai\");\nconst configuration = new Configuration({\n  apiKey: process.env.OPENAI_API_KEY,\n});\nconst openai = new OpenAIApi(configuration);\nconst response = await openai.retrieveFineTune(\"ft-AF1WoRqd3aJAHsqc9NY7iL8F\");\n"
          },
          "response": "{\n  \"id\": \"ft-AF1WoRqd3aJAHsqc9NY7iL8F\",\n  \"object\": \"fine-tune\",\n  \"model\": \"curie\",\n  \"created_at\": 1614807352,\n  \"events\": [\n    {\n      \"object\": \"fine-tune-event\",\n      \"created_at\": 1614807352,\n      \"level\": \"info\",\n      \"message\": \"Job enqueued. Waiting for jobs ahead to complete. Queue number: 0.\"\n    },\n    {\n      \"object\": \"fine-tune-event\",\n      \"created_at\": 1614807356,\n      \"level\": \"info\",\n      \"message\": \"Job started.\"\n    },\n    {\n      \"object\": \"fine-tune-event\",\n      \"created_at\": 1614807861,\n      \"level\": \"info\",\n      \"message\": \"Uploaded snapshot: curie:ft-acmeco-2021-03-03-21-44-20.\"\n    },\n    {\n      \"object\": \"fine-tune-event\",\n      \"created_at\": 1614807864,\n      \"level\": \"info\",\n      \"message\": \"Uploaded result files: file-QQm6ZpqdNwAaVC3aSz5sWwLT.\"\n    },\n    {\n      \"object\": \"fine-tune-event\",\n      \"created_at\": 1614807864,\n      \"level\": \"info\",\n      \"message\": \"Job succeeded.\"\n    }\n  ],\n  \"fine_tuned_model\": \"curie:ft-acmeco-2021-03-03-21-44-20\",\n  \"hyperparams\": {\n    \"batch_size\": 4,\n    \"learning_rate_multiplier\": 0.1,\n    \"n_epochs\": 4,\n    \"prompt_loss_weight\": 0.1,\n  },\n  \"organization_id\": \"org-...\",\n  \"result_files\": [\n    {\n      \"id\": \"file-QQm6ZpqdNwAaVC3aSz5sWwLT\",\n      \"object\": \"file\",\n      \"bytes\": 81509,\n      \"created_at\": 1614807863,\n      \"filename\": \"compiled_results.csv\",\n      \"purpose\": \"fine-tune-results\"\n    }\n  ],\n  \"status\": \"succeeded\",\n  \"validation_files\": [],\n  \"training_files\": [\n    {\n      \"id\": \"file-XGinujblHPwGLSztz8cPS8XY\",\n      \"object\": \"file\",\n      \"bytes\": 1547276,\n      \"created_at\": 1610062281,\n      \"filename\": \"my-data-train.jsonl\",\n      \"purpose\": \"fine-tune-train\"\n    }\n  ],\n  \"updated_at\": 1614807865,\n}\n"
        },
        "description": "Gets info about the fine-tune job."
      }
    },
    "/fine-tunes/{fine_tune_id}/cancel": {
      "post": {
        "operationId": "cancelFineTune",
        "tags": [
          "OpenAI"
        ],
        "summary": "Cancel fine-tune",
        "parameters": [
          {
            "in": "path",
            "name": "fine_tune_id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "ft-AF1WoRqd3aJAHsqc9NY7iL8F"
            },
            "description": "The ID of the fine-tune job to cancel\n"
          },
          {
            "$ref": "#/components/parameters/OpenAI-Organization"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FineTune"
                }
              }
            }
          }
        },
        "oaiMeta": {
          "name": "Cancel fine-tune",
          "group": "fine-tunes",
          "path": "cancel",
          "beta": true,
          "examples": {
            "curl": "curl https://api.openai.com/v1/fine-tunes/ft-AF1WoRqd3aJAHsqc9NY7iL8F/cancel \\\n  -X POST \\\n  -H \"Authorization: Bearer YOUR_API_KEY\"\n",
            "python": "import os\nimport openai\nopenai.api_key = os.getenv(\"OPENAI_API_KEY\")\nopenai.FineTune.cancel(id=\"ft-AF1WoRqd3aJAHsqc9NY7iL8F\")\n",
            "node.js": "const { Configuration, OpenAIApi } = require(\"openai\");\nconst configuration = new Configuration({\n  apiKey: process.env.OPENAI_API_KEY,\n});\nconst openai = new OpenAIApi(configuration);\nconst response = await openai.cancelFineTune(\"ft-AF1WoRqd3aJAHsqc9NY7iL8F\");\n"
          },
          "response": "{\n  \"id\": \"ft-xhrpBbvVUzYGo8oUO1FY4nI7\",\n  \"object\": \"fine-tune\",\n  \"model\": \"curie\",\n  \"created_at\": 1614807770,\n  \"events\": [ { ... } ],\n  \"fine_tuned_model\": null,\n  \"hyperparams\": { ... },\n  \"organization_id\": \"org-...\",\n  \"result_files\": [],\n  \"status\": \"cancelled\",\n  \"validation_files\": [],\n  \"training_files\": [\n    {\n      \"id\": \"file-XGinujblHPwGLSztz8cPS8XY\",\n      \"object\": \"file\",\n      \"bytes\": 1547276,\n      \"created_at\": 1610062281,\n      \"filename\": \"my-data-train.jsonl\",\n      \"purpose\": \"fine-tune-train\"\n    }\n  ],\n  \"updated_at\": 1614807789,\n}\n"
        },
        "description": "Immediately cancel a fine-tune job."
      }
    },
    "/fine-tunes/{fine_tune_id}/events": {
      "get": {
        "operationId": "listFineTuneEvents",
        "tags": [
          "OpenAI"
        ],
        "summary": "List fine-tune events",
        "parameters": [
          {
            "in": "path",
            "name": "fine_tune_id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "ft-AF1WoRqd3aJAHsqc9NY7iL8F"
            },
            "description": "The ID of the fine-tune job to get events for.\n"
          },
          {
            "in": "query",
            "name": "stream",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            },
            "description": "Whether to stream events for the fine-tune job. If set to true,\nevents will be sent as data-only\n[server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format)\nas they become available. The stream will terminate with a\n`data: [DONE]` message when the job is finished (succeeded, cancelled,\nor failed).\n\nIf set to false, only events generated so far will be returned.\n"
          },
          {
            "$ref": "#/components/parameters/OpenAI-Organization"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListFineTuneEventsResponse"
                }
              }
            }
          }
        },
        "oaiMeta": {
          "name": "List fine-tune events",
          "group": "fine-tunes",
          "path": "events",
          "beta": true,
          "examples": {
            "curl": "curl https://api.openai.com/v1/fine-tunes/ft-AF1WoRqd3aJAHsqc9NY7iL8F/events \\\n  -H \"Authorization: Bearer YOUR_API_KEY\"\n",
            "python": "import os\nimport openai\nopenai.api_key = os.getenv(\"OPENAI_API_KEY\")\nopenai.FineTune.list_events(id=\"ft-AF1WoRqd3aJAHsqc9NY7iL8F\")\n",
            "node.js": "const { Configuration, OpenAIApi } = require(\"openai\");\nconst configuration = new Configuration({\n  apiKey: process.env.OPENAI_API_KEY,\n});\nconst openai = new OpenAIApi(configuration);\nconst response = await openai.listFineTuneEvents(\"ft-AF1WoRqd3aJAHsqc9NY7iL8F\");\n"
          },
          "response": "{\n  \"object\": \"list\",\n  \"data\": [\n    {\n      \"object\": \"fine-tune-event\",\n      \"created_at\": 1614807352,\n      \"level\": \"info\",\n      \"message\": \"Job enqueued. Waiting for jobs ahead to complete. Queue number: 0.\"\n    },\n    {\n      \"object\": \"fine-tune-event\",\n      \"created_at\": 1614807356,\n      \"level\": \"info\",\n      \"message\": \"Job started.\"\n    },\n    {\n      \"object\": \"fine-tune-event\",\n      \"created_at\": 1614807861,\n      \"level\": \"info\",\n      \"message\": \"Uploaded snapshot: curie:ft-acmeco-2021-03-03-21-44-20.\"\n    },\n    {\n      \"object\": \"fine-tune-event\",\n      \"created_at\": 1614807864,\n      \"level\": \"info\",\n      \"message\": \"Uploaded result files: file-QQm6ZpqdNwAaVC3aSz5sWwLT.\"\n    },\n    {\n      \"object\": \"fine-tune-event\",\n      \"created_at\": 1614807864,\n      \"level\": \"info\",\n      \"message\": \"Job succeeded.\"\n    }\n  ]\n}\n"
        },
        "description": "Get fine-grained status updates for a fine-tune job."
      }
    },
    "/engines/{engine_id}/embeddings": {
      "post": {
        "operationId": "createEmbedding",
        "tags": [
          "OpenAI"
        ],
        "summary": "Create embeddings",
        "parameters": [
          {
            "in": "path",
            "name": "engine_id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "text-similarity-babbage-001"
            },
            "description": "The ID of the engine to use for this request\n"
          },
          {
            "$ref": "#/components/parameters/OpenAI-Organization"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateEmbeddingRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateEmbeddingResponse"
                }
              }
            }
          }
        },
        "oaiMeta": {
          "name": "Create embeddings",
          "group": "embeddings",
          "path": "create",
          "examples": {
            "curl": "curl https://api.openai.com/v1/engines/text-similarity-babbage-001/embeddings \\\n  -X POST \\\n  -H \"Authorization: Bearer YOUR_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"input\": \"The food was delicious and the waiter...\"}'\n",
            "python": "import os\nimport openai\nopenai.api_key = os.getenv(\"OPENAI_API_KEY\")\nopenai.Embedding.create(\n  input=\"The food was delicious and the waiter...\",\n  engine=\"text-similarity-babbage-001\"\n)\n",
            "node.js": "const { Configuration, OpenAIApi } = require(\"openai\");\nconst configuration = new Configuration({\n  apiKey: process.env.OPENAI_API_KEY,\n});\nconst openai = new OpenAIApi(configuration);\nconst response = await openai.createEmbedding(\"text-similarity-babbage-001\", {\n  input: \"The food was delicious and the waiter...\",\n});\n"
          },
          "parameters": "{\n  \"input\": \"The food was delicious and the waiter...\"\n}\n",
          "response": "{\n  \"object\": \"list\",\n  \"data\": [\n    {\n      \"object\": \"embedding\",\n      \"embedding\": [\n        0.018990106880664825,\n        -0.0073809814639389515,\n        .... (1024 floats total for ada)\n        0.021276434883475304,\n      ],\n      \"index\": 0\n    }\n  ],\n  \"model\": \"text-similarity-babbage:001\"\n}\n"
        },
        "description": "Creates an embedding vector representing the input text."
      }
    }
  },
  "components": {
    "schemas": {
      "ListEnginesResponse": {
        "type": "object",
        "properties": {
          "object": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Engine"
            }
          }
        }
      },
      "CreateCompletionRequest": {
        "type": "object",
        "properties": {
          "prompt": {
            "description": "The prompt(s) to generate completions for, encoded as a string, array of strings, array of tokens, or array of token arrays.\n\nNote that <|endoftext|> is the document separator that the model sees during training, so if a prompt is not specified the model will generate as if from the beginning of a new document.\n",
            "default": "<|endoftext|>",
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "default": "",
                "example": "This is a test."
              },
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "default": "",
                  "example": "This is a test.",
                  "nullable": false
                }
              },
              {
                "type": "array",
                "minItems": 1,
                "items": {
                  "type": "integer",
                  "nullable": false
                },
                "example": "[1212, 318, 257, 1332, 13]"
              },
              {
                "type": "array",
                "minItems": 1,
                "items": {
                  "type": "array",
                  "minItems": 1,
                  "items": {
                    "type": "integer",
                    "nullable": false
                  }
                },
                "example": "[[1212, 318, 257, 1332, 13]]"
              }
            ]
          },
          "max_tokens": {
            "type": "integer",
            "minimum": 0,
            "default": 16,
            "example": 16,
            "nullable": true,
            "description": "The maximum number of [tokens](/tokenizer) to generate in the completion.\n\nThe token count of your prompt plus `max_tokens` cannot exceed the model's context length. Most models have a context length of 2048 tokens (except `code-davinci-001`, which supports 4096).\n"
          },
          "temperature": {
            "type": "number",
            "minimum": 0,
            "maximum": 2,
            "default": 1,
            "example": 1,
            "nullable": true,
            "description": "What [sampling temperature](https://towardsdatascience.com/how-to-sample-from-language-models-682bceb97277) to use. Higher values means the model will take more risks. Try 0.9 for more creative applications, and 0 (argmax sampling) for ones with a well-defined answer.\n\nWe generally recommend altering this or `top_p` but not both.\n"
          },
          "top_p": {
            "type": "number",
            "minimum": 0,
            "maximum": 1,
            "default": 1,
            "example": 1,
            "nullable": true,
            "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.\n\nWe generally recommend altering this or `temperature` but not both.\n"
          },
          "n": {
            "type": "integer",
            "minimum": 1,
            "maximum": 128,
            "default": 1,
            "example": 1,
            "nullable": true,
            "description": "How many completions to generate for each prompt.\n\n**Note:** Because this parameter generates many completions, it can quickly consume your token quota. Use carefully and ensure that you have reasonable settings for `max_tokens` and `stop`.\n"
          },
          "stream": {
            "description": "Whether to stream back partial progress. If set, tokens will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available, with the stream terminated by a `data: [DONE]` message.\n",
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "logprobs": {
            "type": "integer",
            "minimum": 0,
            "maximum": 5,
            "default": null,
            "nullable": true,
            "description": "Include the log probabilities on the `logprobs` most likely tokens, as well the chosen tokens. For example, if `logprobs` is 5, the API will return a list of the 5 most likely tokens. The API will always return the `logprob` of the sampled token, so there may be up to `logprobs+1` elements in the response.\n\nThe maximum value for `logprobs` is 5. If you need more than this, please contact support@openai.com and describe your use case.\n"
          },
          "echo": {
            "type": "boolean",
            "default": false,
            "nullable": true,
            "description": "Echo back the prompt in addition to the completion\n"
          },
          "stop": {
            "description": "Up to 4 sequences where the API will stop generating further tokens. The returned text will not contain the stop sequence.\n",
            "default": null,
            "nullable": true,
            "oneOf": [
              {
                "type": "string",
                "default": "<|endoftext|>",
                "example": "\n",
                "nullable": true
              },
              {
                "type": "array",
                "minItems": 1,
                "maxItems": 4,
                "items": {
                  "type": "string",
                  "example": "[\"\\n\"]",
                  "nullable": false
                }
              }
            ]
          },
          "presence_penalty": {
            "type": "number",
            "default": 0,
            "minimum": -2,
            "maximum": 2,
            "nullable": true,
            "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.\n\n[See more information about frequency and presence penalties.](/docs/api-reference/parameter-details)\n"
          },
          "frequency_penalty": {
            "type": "number",
            "default": 0,
            "minimum": -2,
            "maximum": 2,
            "nullable": true,
            "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.\n\n[See more information about frequency and presence penalties.](/docs/api-reference/parameter-details)\n"
          },
          "best_of": {
            "type": "integer",
            "default": 1,
            "minimum": 0,
            "maximum": 20,
            "nullable": true,
            "description": "Generates `best_of` completions server-side and returns the \"best\" (the one with the lowest log probability per token). Results cannot be streamed.\n\nWhen used with `n`, `best_of` controls the number of candidate completions and `n` specifies how many to return – `best_of` must be greater than `n`.\n\n**Note:** Because this parameter generates many completions, it can quickly consume your token quota. Use carefully and ensure that you have reasonable settings for `max_tokens` and `stop`.\n"
          },
          "logit_bias": {
            "type": "object",
            "oaiTypeLabel": "map",
            "default": null,
            "nullable": true,
            "description": "Modify the likelihood of specified tokens appearing in the completion.\n\nAccepts a json object that maps tokens (specified by their token ID in the GPT tokenizer) to an associated bias value from -100 to 100. You can use this [tokenizer tool](/tokenizer?view=bpe) (which works for both GPT-2 and GPT-3) to convert text to token IDs. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.\n\nAs an example, you can pass `{\"50256\": -100}` to prevent the <|endoftext|> token from being generated.\n"
          }
        }
      },
      "CreateCompletionResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "object": {
            "type": "string"
          },
          "created": {
            "type": "integer"
          },
          "model": {
            "type": "string"
          },
          "choices": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "text": {
                  "type": "string"
                },
                "index": {
                  "type": "integer"
                },
                "logprobs": {
                  "type": "object",
                  "nullable": true,
                  "properties": {
                    "tokens": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "token_logprobs": {
                      "type": "array",
                      "items": {
                        "type": "number"
                      }
                    },
                    "top_logprobs": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    },
                    "text_offset": {
                      "type": "array",
                      "items": {
                        "type": "integer"
                      }
                    }
                  }
                },
                "finish_reason": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "CreateCompletionFromModelRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CreateCompletionRequest"
          },
          {
            "type": "object",
            "properties": {
              "model": {
                "description": "ID of the model to use for completion.",
                "type": "string"
              }
            }
          }
        ]
      },
      "CreateSearchRequest": {
        "type": "object",
        "properties": {
          "documents": {
            "description": "Up to 200 documents to search over, provided as a list of strings.\n\nThe maximum document length (in tokens) is 2034 minus the number of tokens in the query.\n\nYou should specify either `documents` or a `file`, but not both.\n",
            "type": "array",
            "minItems": 1,
            "maxItems": 200,
            "items": {
              "type": "string"
            },
            "nullable": true,
            "example": "['White House', 'hospital', 'school']"
          },
          "file": {
            "description": "The ID of an uploaded file that contains documents to search over.\n\nYou should specify either `documents` or a `file`, but not both.\n",
            "type": "string",
            "nullable": true
          },
          "query": {
            "description": "Query to search against the documents.",
            "type": "string",
            "nullable": false,
            "example": "the president",
            "minLength": 1
          },
          "max_rerank": {
            "description": "The maximum number of documents to be re-ranked and returned by search.\n\nThis flag only takes effect when `file` is set.\n",
            "type": "integer",
            "minimum": 1,
            "default": 200,
            "nullable": true
          },
          "return_metadata": {
            "description": "A special boolean flag for showing metadata. If set to `true`, each document entry in the returned JSON will contain a \"metadata\" field.\n\nThis flag only takes effect when `file` is set.\n",
            "type": "boolean",
            "default": false,
            "nullable": true
          }
        }
      },
      "CreateSearchResponse": {
        "type": "object",
        "properties": {
          "object": {
            "type": "string"
          },
          "model": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "object": {
                  "type": "string"
                },
                "document": {
                  "type": "integer"
                },
                "score": {
                  "type": "number"
                }
              }
            }
          }
        }
      },
      "ListFilesResponse": {
        "type": "object",
        "properties": {
          "object": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OpenAIFile"
            }
          }
        }
      },
      "CreateFileRequest": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "file": {
            "description": "Name of the [JSON Lines](https://jsonlines.readthedocs.io/en/latest/) file to be uploaded.\n\nIf the `purpose` is set to \"search\" or \"answers\", each line is a JSON record with a \"text\" field and an optional \"metadata\" field. Only \"text\" field will be used for search. Specially, when the `purpose` is \"answers\", \"\\n\" is used as a delimiter to chunk contents in the \"text\" field into multiple documents for finer-grained matching.\n\nIf the `purpose` is set to \"classifications\", each line is a JSON record representing a single training example with \"text\" and \"label\" fields along with an optional \"metadata\" field.\n\nIf the `purpose` is set to \"fine-tune\", each line is a JSON record with \"prompt\" and \"completion\" fields representing your [training examples](/docs/guides/fine-tuning/prepare-training-data).\n",
            "type": "string",
            "format": "binary"
          },
          "purpose": {
            "description": "The intended purpose of the uploaded documents.\n\nUse \"search\" for [Search](/docs/api-reference/searches), \"answers\" for [Answers](/docs/api-reference/answers), \"classifications\" for [Classifications](/docs/api-reference/classifications) and \"fine-tune\" for [Fine-tuning](/docs/api-reference/fine-tunes). This allows us to validate the format of the uploaded file.\n",
            "type": "string"
          }
        },
        "required": [
          "file",
          "purpose"
        ]
      },
      "DeleteFileResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "object": {
            "type": "string"
          },
          "deleted": {
            "type": "boolean"
          }
        }
      },
      "CreateAnswerRequest": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "model": {
            "description": "ID of the engine to use for completion. You can select one of `ada`, `babbage`, `curie`, or `davinci`.",
            "type": "string"
          },
          "question": {
            "description": "Question to get answered.",
            "type": "string",
            "minLength": 1,
            "example": "What is the capital of Japan?"
          },
          "examples": {
            "description": "List of (question, answer) pairs that will help steer the model towards the tone and answer format you'd like. We recommend adding 2 to 3 examples.",
            "type": "array",
            "minItems": 1,
            "maxItems": 200,
            "items": {
              "type": "array",
              "minItems": 2,
              "maxItems": 2,
              "items": {
                "type": "string",
                "minLength": 1
              }
            },
            "example": "[['What is the capital of Canada?', 'Ottawa'], ['Which province is Ottawa in?', 'Ontario']]"
          },
          "examples_context": {
            "description": "A text snippet containing the contextual information used to generate the answers for the `examples` you provide.",
            "type": "string",
            "example": "Ottawa, Canada's capital, is located in the east of southern Ontario, near the city of Montréal and the U.S. border."
          },
          "documents": {
            "description": "List of documents from which the answer for the input `question` should be derived. If this is an empty list, the question will be answered based on the question-answer examples.\n\nYou should specify either `documents` or a `file`, but not both.\n",
            "type": "array",
            "maxItems": 200,
            "items": {
              "type": "string"
            },
            "example": "['Japan is an island country in East Asia, located in the northwest Pacific Ocean.', 'Tokyo is the capital and most populous prefecture of Japan.']",
            "nullable": true
          },
          "file": {
            "description": "The ID of an uploaded file that contains documents to search over. See [upload file](/docs/api-reference/files/upload) for how to upload a file of the desired format and purpose.\n\nYou should specify either `documents` or a `file`, but not both.\n",
            "type": "string",
            "nullable": true
          },
          "search_model": {
            "description": "ID of the engine to use for [Search](/docs/api-reference/searches/create). You can select one of `ada`, `babbage`, `curie`, or `davinci`.",
            "type": "string",
            "default": "ada",
            "nullable": true
          },
          "max_rerank": {
            "description": "The maximum number of documents to be ranked by [Search](/docs/api-reference/searches/create) when using `file`. Setting it to a higher value leads to improved accuracy but with increased latency and cost.",
            "type": "integer",
            "default": 200,
            "nullable": true
          },
          "temperature": {
            "description": "What [sampling temperature](https://towardsdatascience.com/how-to-sample-from-language-models-682bceb97277) to use. Higher values mean the model will take more risks and value 0 (argmax sampling) works better for scenarios with a well-defined answer.",
            "type": "number",
            "default": 0,
            "nullable": true
          },
          "logprobs": {
            "type": "integer",
            "minimum": 0,
            "maximum": 5,
            "default": null,
            "nullable": true,
            "description": "Include the log probabilities on the `logprobs` most likely tokens, as well the chosen tokens. For example, if `logprobs` is 5, the API will return a list of the 5 most likely tokens. The API will always return the `logprob` of the sampled token, so there may be up to `logprobs+1` elements in the response.\n\nThe maximum value for `logprobs` is 5. If you need more than this, please contact support@openai.com and describe your use case.\n\nWhen `logprobs` is set, `completion` will be automatically added into `expand` to get the logprobs.\n"
          },
          "max_tokens": {
            "description": "The maximum number of tokens allowed for the generated answer",
            "type": "integer",
            "default": 16,
            "nullable": true
          },
          "stop": {
            "description": "Up to 4 sequences where the API will stop generating further tokens. The returned text will not contain the stop sequence.\n",
            "default": null,
            "oneOf": [
              {
                "type": "string",
                "default": "<|endoftext|>",
                "example": "\n",
                "nullable": true
              },
              {
                "type": "array",
                "minItems": 1,
                "maxItems": 4,
                "items": {
                  "type": "string",
                  "example": "[\"\\n\"]",
                  "nullable": false
                }
              }
            ],
            "nullable": true
          },
          "n": {
            "description": "How many answers to generate for each question.",
            "type": "integer",
            "minimum": 1,
            "maximum": 10,
            "default": 1,
            "nullable": true
          },
          "logit_bias": {
            "type": "object",
            "oaiTypeLabel": "map",
            "default": null,
            "nullable": true,
            "description": "Modify the likelihood of specified tokens appearing in the completion.\n\nAccepts a json object that maps tokens (specified by their token ID in the GPT tokenizer) to an associated bias value from -100 to 100. You can use this [tokenizer tool](/tokenizer?view=bpe) (which works for both GPT-2 and GPT-3) to convert text to token IDs. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.\n\nAs an example, you can pass `{\"50256\": -100}` to prevent the <|endoftext|> token from being generated.\n"
          },
          "return_metadata": {
            "description": "A special boolean flag for showing metadata. If set to `true`, each document entry in the returned JSON will contain a \"metadata\" field.\n\nThis flag only takes effect when `file` is set.\n",
            "type": "boolean",
            "default": false,
            "nullable": true
          },
          "return_prompt": {
            "description": "If set to `true`, the returned JSON will include a \"prompt\" field containing the final prompt that was used to request a completion. This is mainly useful for debugging purposes.",
            "type": "boolean",
            "default": false,
            "nullable": true
          },
          "expand": {
            "description": "If an object name is in the list, we provide the full information of the object; otherwise, we only provide the object ID. Currently we support `completion` and `file` objects for expansion.",
            "type": "array",
            "items": {},
            "nullable": true,
            "default": []
          }
        }
      },
      "CreateAnswerResponse": {
        "type": "object",
        "properties": {
          "object": {
            "type": "string"
          },
          "model": {
            "type": "string"
          },
          "search_model": {
            "type": "string"
          },
          "completion": {
            "type": "string"
          },
          "answers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "selected_documents": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "document": {
                  "type": "integer"
                },
                "text": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "CreateClassificationRequest": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "model": {
            "description": "ID of the engine to use for completion. You can select one of `ada`, `babbage`, `curie`, or `davinci`.",
            "type": "string"
          },
          "query": {
            "description": "Query to be classified.",
            "type": "string",
            "minLength": 1,
            "example": "The plot is not very attractive."
          },
          "examples": {
            "description": "A list of examples with labels, in the following format:\n\n`[[\"The movie is so interesting.\", \"Positive\"], [\"It is quite boring.\", \"Negative\"], ...]`\n\nAll the label strings will be normalized to be capitalized.\n\nYou should specify either `examples` or `file`, but not both.\n",
            "type": "array",
            "minItems": 2,
            "maxItems": 200,
            "items": {
              "type": "array",
              "minItems": 2,
              "maxItems": 2,
              "items": {
                "type": "string",
                "minLength": 1
              }
            },
            "example": "[['Do not see this film.', 'Negative'], ['Smart, provocative and blisteringly funny.', 'Positive']]",
            "nullable": true
          },
          "file": {
            "description": "The ID of the uploaded file that contains training examples. See [upload file](/docs/api-reference/files/upload) for how to upload a file of the desired format and purpose.\n\nYou should specify either `examples` or `file`, but not both.\n",
            "type": "string",
            "nullable": true
          },
          "labels": {
            "description": "The set of categories being classified. If not specified, candidate labels will be automatically collected from the examples you provide. All the label strings will be normalized to be capitalized.",
            "type": "array",
            "minItems": 2,
            "maxItems": 200,
            "default": null,
            "items": {
              "type": "string"
            },
            "example": [
              "Positive",
              "Negative"
            ],
            "nullable": true
          },
          "search_model": {
            "description": "ID of the engine to use for [Search](/docs/api-reference/searches/create). You can select one of `ada`, `babbage`, `curie`, or `davinci`.",
            "type": "string",
            "default": "ada",
            "nullable": true
          },
          "temperature": {
            "description": "What sampling `temperature` to use. Higher values mean the model will take more risks. Try 0.9 for more creative applications, and 0 (argmax sampling) for ones with a well-defined answer.",
            "type": "number",
            "minimum": 0,
            "maximum": 2,
            "default": 0,
            "nullable": true,
            "example": 0
          },
          "logprobs": {
            "type": "integer",
            "minimum": 0,
            "maximum": 5,
            "default": null,
            "nullable": true,
            "description": "Include the log probabilities on the `logprobs` most likely tokens, as well the chosen tokens. For example, if `logprobs` is 5, the API will return a list of the 5 most likely tokens. The API will always return the `logprob` of the sampled token, so there may be up to `logprobs+1` elements in the response.\n\nThe maximum value for `logprobs` is 5. If you need more than this, please contact support@openai.com and describe your use case.\n\nWhen `logprobs` is set, `completion` will be automatically added into `expand` to get the logprobs.\n"
          },
          "max_examples": {
            "description": "The maximum number of examples to be ranked by [Search](/docs/api-reference/searches/create) when using `file`. Setting it to a higher value leads to improved accuracy but with increased latency and cost.",
            "type": "integer",
            "default": 200,
            "nullable": true
          },
          "logit_bias": {
            "type": "object",
            "oaiTypeLabel": "map",
            "default": null,
            "nullable": true,
            "description": "Modify the likelihood of specified tokens appearing in the completion.\n\nAccepts a json object that maps tokens (specified by their token ID in the GPT tokenizer) to an associated bias value from -100 to 100. You can use this [tokenizer tool](/tokenizer?view=bpe) (which works for both GPT-2 and GPT-3) to convert text to token IDs. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.\n\nAs an example, you can pass `{\"50256\": -100}` to prevent the <|endoftext|> token from being generated.\n"
          },
          "return_prompt": {
            "description": "If set to `true`, the returned JSON will include a \"prompt\" field containing the final prompt that was used to request a completion. This is mainly useful for debugging purposes.",
            "type": "boolean",
            "default": false,
            "nullable": true
          },
          "return_metadata": {
            "description": "A special boolean flag for showing metadata. If set to `true`, each document entry in the returned JSON will contain a \"metadata\" field.\n\nThis flag only takes effect when `file` is set.\n",
            "type": "boolean",
            "default": false,
            "nullable": true
          },
          "expand": {
            "description": "If an object name is in the list, we provide the full information of the object; otherwise, we only provide the object ID. Currently we support `completion` and `file` objects for expansion.",
            "type": "array",
            "items": {},
            "nullable": true,
            "default": []
          }
        }
      },
      "CreateClassificationResponse": {
        "type": "object",
        "properties": {
          "object": {
            "type": "string"
          },
          "model": {
            "type": "string"
          },
          "search_model": {
            "type": "string"
          },
          "completion": {
            "type": "string"
          },
          "label": {
            "type": "string"
          },
          "selected_examples": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "document": {
                  "type": "integer"
                },
                "text": {
                  "type": "string"
                },
                "label": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "CreateFineTuneRequest": {
        "type": "object",
        "properties": {
          "training_file": {
            "description": "The ID of an uploaded file that contains training data.\n\nSee [upload file](/docs/api-reference/files/upload) for how to upload a file.\n\nYour dataset must be formatted as a JSONL file, where each training\nexample is a JSON object with the keys \"prompt\" and \"completion\".\nAdditionally, you must upload your file with the purpose `fine-tune`.\n\nSee the [fine-tuning guide](/docs/guides/fine-tuning/creating-training-data) for more details.\n",
            "type": "string",
            "nullable": false,
            "example": "file-ajSREls59WBbvgSzJSVWxMCB"
          },
          "validation_file": {
            "description": "The ID of an uploaded file that contains validation data.\n\nIf you provide this file, the data is used to generate validation\nmetrics periodically during fine-tuning. These metrics can be viewed in\nthe [fine-tuning results file](/docs/guides/fine-tuning/analyzing-your-fine-tuned-model).\nYour train and validation data should be mutually exclusive.\n\nYour dataset must be formatted as a JSONL file, where each validation\nexample is a JSON object with the keys \"prompt\" and \"completion\".\nAdditionally, you must upload your file with the purpose `fine-tune`.\n\nSee the [fine-tuning guide](/docs/guides/fine-tuning/creating-training-data) for more details.\n",
            "type": "string",
            "nullable": true,
            "example": "file-XjSREls59WBbvgSzJSVWxMCa"
          },
          "model": {
            "description": "The name of the base model to fine-tune. You can select one of \"ada\",\n\"babbage\", \"curie\", or \"davinci\". To learn more about these models, see the\n[Engines](https://beta.openai.com/docs/engines) documentation.\n",
            "default": "curie",
            "type": "string",
            "nullable": true
          },
          "n_epochs": {
            "description": "The number of epochs to train the model for. An epoch refers to one\nfull cycle through the training dataset.\n",
            "default": 4,
            "type": "integer",
            "nullable": true
          },
          "batch_size": {
            "description": "The batch size to use for training. The batch size is the number of\ntraining examples used to train a single forward and backward pass.\n\nBy default, the batch size will be dynamically configured to be\n~0.2% of the number of examples in the training set, capped at 256 -\nin general, we've found that larger batch sizes tend to work better\nfor larger datasets.\n",
            "default": null,
            "type": "integer",
            "nullable": true
          },
          "learning_rate_multiplier": {
            "description": "The learning rate multiplier to use for training.\nThe fine-tuning learning rate is the original learning rate used for\npretraining multiplied by this value.\n\nBy default, the learning rate multiplier is the 0.05, 0.1, or 0.2\ndepending on final `batch_size` (larger learning rates tend to\nperform better with larger batch sizes). We recommend experimenting\nwith values in the range 0.02 to 0.2 to see what produces the best\nresults.\n",
            "default": null,
            "type": "number",
            "nullable": true
          },
          "prompt_loss_weight": {
            "description": "The weight to use for loss on the prompt tokens. This controls how\nmuch the model tries to learn to generate the prompt (as compared\nto the completion which always has a weight of 1.0), and can add\na stabilizing effect to training when completions are short.\n\nIf prompts are extremely long (relative to completions), it may make\nsense to reduce this weight so as to avoid over-prioritizing\nlearning the prompt.\n",
            "default": 0.1,
            "type": "number",
            "nullable": true
          },
          "compute_classification_metrics": {
            "description": "If set, we calculate classification-specific metrics such as accuracy\nand F-1 score using the validation set at the end of every epoch.\nThese metrics can be viewed in the [results file](/docs/guides/fine-tuning/analyzing-your-fine-tuned-model).\n\nIn order to compute classification metrics, you must provide a\n`validation_file`. Additionally, you must\nspecify `classification_n_classes` for multiclass classification or\n`classification_positive_class` for binary classification.\n",
            "type": "boolean",
            "default": false,
            "nullable": true
          },
          "classification_n_classes": {
            "description": "The number of classes in a classification task.\n\nThis parameter is required for multiclass classification.\n",
            "type": "integer",
            "default": null,
            "nullable": true
          },
          "classification_positive_class": {
            "description": "The positive class in binary classification.\n\nThis parameter is needed to generate precision, recall, and F1\nmetrics when doing binary classification.\n",
            "type": "string",
            "default": null,
            "nullable": true
          },
          "classification_betas": {
            "description": "If this is provided, we calculate F-beta scores at the specified\nbeta values. The F-beta score is a generalization of F-1 score.\nThis is only used for binary classification.\n\nWith a beta of 1 (i.e. the F-1 score), precision and recall are\ngiven the same weight. A larger beta score puts more weight on\nrecall and less on precision. A smaller beta score puts more weight\non precision and less on recall.\n",
            "type": "array",
            "items": {
              "type": "number"
            },
            "example": [
              0.6,
              1,
              1.5,
              2
            ],
            "default": null,
            "nullable": true
          }
        }
      },
      "ListFineTunesResponse": {
        "type": "object",
        "properties": {
          "object": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FineTune"
            }
          }
        }
      },
      "ListFineTuneEventsResponse": {
        "type": "object",
        "properties": {
          "object": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FineTuneEvent"
            }
          }
        }
      },
      "CreateEmbeddingRequest": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "input": {
            "description": "Input text to get embeddings for, encoded as a string or array of tokens. To get embeddings for multiple inputs in a single request, pass an array of strings or array of token arrays. Each input must not exceed 2048 tokens in length.\n\nUnless your are embedding code, we suggest replacing newlines (`\\n`) in your input with a single space, as we have observed inferior results when newlines are present.\n",
            "example": "The quick brown fox jumped over the lazy dog",
            "oneOf": [
              {
                "type": "string",
                "default": "",
                "example": "This is a test."
              },
              {
                "type": "array",
                "items": {
                  "type": "string",
                  "default": "",
                  "example": "This is a test.",
                  "nullable": false
                }
              },
              {
                "type": "array",
                "minItems": 1,
                "items": {
                  "type": "integer",
                  "nullable": false
                },
                "example": "[1212, 318, 257, 1332, 13]"
              },
              {
                "type": "array",
                "minItems": 1,
                "items": {
                  "type": "array",
                  "minItems": 1,
                  "items": {
                    "type": "integer",
                    "nullable": false
                  }
                },
                "example": "[[1212, 318, 257, 1332, 13]]"
              }
            ]
          }
        }
      },
      "CreateEmbeddingResponse": {
        "type": "object",
        "properties": {
          "object": {
            "type": "string"
          },
          "model": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "index": {
                  "type": "integer"
                },
                "object": {
                  "type": "string"
                },
                "embedding": {
                  "type": "array",
                  "items": {
                    "type": "number"
                  }
                }
              }
            }
          }
        }
      },
      "Engine": {
        "title": "Engine",
        "properties": {
          "id": {
            "type": "string"
          },
          "object": {
            "type": "string"
          },
          "created": {
            "type": "integer"
          },
          "ready": {
            "type": "boolean"
          }
        }
      },
      "OpenAIFile": {
        "title": "OpenAIFile",
        "properties": {
          "id": {
            "type": "string"
          },
          "object": {
            "type": "string"
          },
          "bytes": {
            "type": "integer"
          },
          "created_at": {
            "type": "integer"
          },
          "filename": {
            "type": "string"
          },
          "purpose": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "status_details": {
            "type": "object",
            "nullable": true
          }
        }
      },
      "FineTune": {
        "title": "FineTune",
        "properties": {
          "id": {
            "type": "string"
          },
          "object": {
            "type": "string"
          },
          "created_at": {
            "type": "integer"
          },
          "updated_at": {
            "type": "integer"
          },
          "model": {
            "type": "string"
          },
          "fine_tuned_model": {
            "type": "string",
            "nullable": true
          },
          "organization_id": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "hyperparams": {
            "type": "object"
          },
          "training_files": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OpenAIFile"
            }
          },
          "validation_files": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OpenAIFile"
            }
          },
          "result_files": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OpenAIFile"
            }
          },
          "events": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FineTuneEvent"
            }
          }
        }
      },
      "FineTuneEvent": {
        "title": "FineTuneEvent",
        "properties": {
          "object": {
            "type": "string"
          },
          "created_at": {
            "type": "integer"
          },
          "level": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        }
      }
    },
    "securitySchemes": {
      "Authorization": {
        "type": "http",
        "scheme": "bearer",
        "description": "Bearer YOUR_API_KEY"
      }
    },
    "parameters": {
      "OpenAI-Organization": {
        "name": "OpenAI-Organization",
        "in": "header",
        "required": false,
        "schema": {
          "type": "string",
          "example": "YOUR_ORG_ID"
        },
        "description": "For users who belong to multiple organizations, you can pass a header to specify which organization is used for an API request. Usage from these API requests will count against the specified organization's subscription quota. Organization IDs can be found on your Organization settings page."
      }
    }
  },
  "oaiMeta": {
    "groups": [
      {
        "id": "engines",
        "title": "Engines",
        "description": "Engines describe and provide access to the various models available in the API. You can refer to the [Engines](/docs/engines) documentation to understand what engines are available and the differences between them.\n"
      },
      {
        "id": "completions",
        "title": "Completions",
        "description": "Given a prompt, the model will return one or more predicted completions, and can also return the probabilities of alternative tokens at each position.\n"
      },
      {
        "id": "searches",
        "title": "Searches",
        "description": "Given a query and a set of documents or labels, the model ranks each document based on its semantic similarity to the provided query.\n\nRelated guide: [Search](/docs/guides/search)\n"
      },
      {
        "id": "classifications",
        "title": "Classifications",
        "description": "Given a query and a set of labeled examples, the model will predict the most likely label for the query. Useful as a drop-in replacement for any ML classification or text-to-label task.\n\nRelated guide: [Classification](/docs/guides/classifications)\n"
      },
      {
        "id": "answers",
        "title": "Answers",
        "description": "Given a question, a set of documents, and some examples, the API generates an answer to the question based on the information in the set of documents. This is useful for question-answering applications on sources of truth, like company documentation or a knowledge base.\n\nRelated guide: [Question answering](/docs/guides/answers)\n"
      },
      {
        "id": "files",
        "title": "Files",
        "description": "Files are used to upload documents that can be used across features like [Answers](/docs/api-reference/answers), [Search](/docs/api-reference/searches), and [Classifications](/docs/api-reference/classifications)\n"
      },
      {
        "id": "fine-tunes",
        "title": "Fine-tunes",
        "description": "Manage fine-tuning jobs to tailor a model to your specific training data.\n\nRelated guide: [Fine-tune models](/docs/guides/fine-tuning)\n"
      },
      {
        "id": "embeddings",
        "title": "Embeddings",
        "description": "Get a vector representation of a given input that can be easily consumed by machine learning models and algorithms.\n\nRelated guide: [Embeddings](/docs/guides/embeddings)\n"
      }
    ]
  },
  "security": [
    {
      "Authorization": []
    }
  ]
}