{
  "openapi": "3.0.1",
  "info": {
    "title": "SumUp REST API",
    "version": "1.0.0",
    "description": "SumUp’s REST API operates with `application/json` HTTP requests and response. The request bodies are sent through resource-oriented URLs and use the standard HTTP response codes.\n\nFor testing our APIs, please <a href='https://cloud.crm.sumup.com/sumup-developers-contact-form'>contact us</a> for a test account. \n\nWhen you receive your test account you can create your <a href='https://developer.sumup.com/docs/register-app/#3-create-oauth-client-credentials' target='_blank'>client credentials</a> and process different requests with real payment instruments, without charging them.\n\n# Authentication\n\n<!-- ReDoc-Inject: <security-definitions> -->"
  },
  "servers": [
    {
      "url": "https://api.sumup.com/{version}",
      "description": "Production server",
      "variables": {
        "version": {
          "enum": [
            "v0.1",
            "v1.0"
          ],
          "default": "v0.1",
          "description": "Version of the API."
        }
      }
    }
  ],
  "tags": [
    {
      "name": "Authorization",
      "description": "Retrieve access tokens to grant your application access to specific resources or generate refresh tokens for expired access tokens.\n"
    },
    {
      "name": "Checkouts",
      "description": "Accept payments from your end users by adding the Checkouts model to your platform. \nSumUp supports standard and single payment 3DS checkout flows. \n\nThe Checkout model allows creating, listing, retrieving, processing and deactivating checkouts. \nA payment is completed by creating a checkout and then processing the checkout.\n"
    },
    {
      "name": "Customers",
      "description": "Allow your regular customers to save their information with the Customers model. \nThis will prevent re-entering payment instrument information for recurring payments on your platform. \n\nDepending on the needs you can allow, creating, listing or deactivating payment instruments & creating, retrieving and updating customers.\n"
    },
    {
      "name": "Transactions",
      "description": "Retrieve details for a specific transaction by it’s `id` \nor any other required query parameter, or list all transactions related to the merchant account.\n"
    },
    {
      "name": "Payouts",
      "description": "The Payouts model will allow you to track funds you’ve received from SumUp. \nYou can receive a detailed payouts list with information like dates, fees, references and statuses, using the `List payouts` endpoint. \n\nFor a less detailed payouts list use `List transactions`.'\n"
    },
    {
      "name": "Refunds",
      "description": "The Refunds model allows you to process a refund by identifying it with its unique transaction id."
    },
    {
      "name": "Receipts",
      "description": "The Receipts model obtains receipt-like details for specific transactions."
    },
    {
      "name": "Account Details",
      "description": "Account Details."
    },
    {
      "name": "Personal Account",
      "description": "Personal Account."
    },
    {
      "name": "Merchant Account",
      "description": "Manage merchant account."
    },
    {
      "name": "Subaccounts",
      "description": "Manage subaccounts."
    }
  ],
  "paths": {
    "/authorize": {
      "get": {
        "summary": "Request authorization from users",
        "description": "Request authorization from users and grant your application access to resources associated with the user's account.\n",
        "servers": [
          {
            "url": "https://api.sumup.com/"
          }
        ],
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthCode"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/NoBodyResponse"
          }
        }
      }
    },
    "/token": {
      "post": {
        "summary": "Generate a token",
        "description": "Generate a token or a refresh token\n",
        "servers": [
          {
            "url": "https://api.sumup.com/"
          }
        ],
        "tags": [
          "Authorization"
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthToken"
              }
            }
          }
        },
        "responses": {
          "200": {
            "type": "object",
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "access_token": {
                      "type": "string",
                      "description": "The access token that you need to use in your requests to the SumUp API.",
                      "example": "ec410d10ad7f06d3c2598473c9cd61189abcc016900a9938068542bcf9754073"
                    },
                    "tokent_type": {
                      "type": "string",
                      "description": "The type of the token. The value is always `Bearer`.",
                      "example": "Bearer"
                    },
                    "expires_in": {
                      "type": "integer",
                      "description": "The validity of the access token in seconds.",
                      "example": 3600
                    },
                    "refresh_token": {
                      "type": "string",
                      "description": "The refresh token provided in the request call",
                      "example": "d180031bfe9bac36c336e5746637810272546865e9c9586012f462a56f3fe9af"
                    },
                    "scope": {
                      "type": "string",
                      "description": "List of authorization scopes granted to your access token.",
                      "example": "payments user.app-settings transactions.history user.profile_readonly"
                    }
                  }
                },
                "examples": {
                  "access_token": {
                    "description": "Successfully created access token",
                    "value": {
                      "access_token": "565e2d19cef68203170ddadb952141326d14e03f4ccbd46daa079c26c910a864",
                      "token_type": "Bearer",
                      "expires_in": 3600,
                      "refresh_token": "d180031bfe9bac36c336e5746637810272546865e9c9586012f462a56f3fe9af"
                    }
                  },
                  "refresh_token": {
                    "description": "Successfully created access token with the refresh token",
                    "value": {
                      "access_token": "ec410d10ad7f06d3c2598473c9cd61189abcc016900a9938068542bcf9754073",
                      "token_type": "Bearer",
                      "expires_in": 3600,
                      "refresh_token": "d180031bfe9bac36c336e5746637810272546865e9c9586012f462a56f3fe9af",
                      "scope": "payments user.app-settings transactions.history user.profile_readonly"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "Invalid_Parameter": {
                    "description": "A parameter is invalid or expired.",
                    "value": {
                      "error_description": "code parameter invalid or expired",
                      "error": "invalid_grant"
                    }
                  },
                  "Missing_Parameter": {
                    "description": "A parameter is missing in the request.",
                    "value": {
                      "error_description": "code parameter is missing",
                      "error": "invalid_request"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/checkouts": {
      "post": {
        "summary": "Create a checkout",
        "description": "Creates a new payment checkout resource. The unique `checkout_reference` created by this request, is used for further manipulation of the checkout. \n\nFor 3DS checkouts, add the `redirect_url` parameter to your request body schema.\n\nFollow by processing a checkout to charge the provided payment instrument.\n",
        "tags": [
          "Checkouts"
        ],
        "security": [
          {
            "accessToken": [
              "payments"
            ]
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/CheckoutCreate"
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/Checkout"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorExtended"
                },
                "examples": {
                  "Missing_Parameter": {
                    "description": "A required parameter is missing.",
                    "value": {
                      "message": "Validation error",
                      "error_code": "MISSING",
                      "param": "pay_to_email"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/ErrorNotAuthorized"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorForbidden"
                },
                "examples": {
                  "Forbidden": {
                    "description": "You do not have the required permission for making this request.",
                    "value": {
                      "error_message": "checkout_payments_not_allowed",
                      "error_code": "FORBIDDEN",
                      "status_code": 403
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "Existing_Checkout": {
                    "description": "A resource with the specified parameters already exists on the server.",
                    "value": {
                      "error_code": "DUPLICATED_CHECKOUT",
                      "message": "Checkout with this checkout reference and pay to email already exists"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "List checkouts",
        "description": "Lists created checkout resources according to the applied `checkout_reference`.",
        "tags": [
          "Checkouts"
        ],
        "security": [
          {
            "accessToken": [
              "payments"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/CheckoutReference"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/CheckoutList"
          },
          "401": {
            "$ref": "#/components/responses/ErrorNotAuthorized"
          }
        }
      }
    },
    "/checkouts/{id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/CheckoutID"
        }
      ],
      "get": {
        "summary": "Retrieve a checkout",
        "description": "Retrieves an identified checkout resource. Use this request after processing a checkout to confirm its status and inform the end user respectively.",
        "tags": [
          "Checkouts"
        ],
        "security": [
          {
            "accessToken": [
              "payments"
            ]
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/CheckoutRetrieve"
          },
          "401": {
            "$ref": "#/components/responses/ErrorNotAuthorized"
          },
          "404": {
            "$ref": "#/components/responses/ErrorNotFound"
          }
        }
      },
      "put": {
        "summary": "Process a checkout",
        "description": "Processing a checkout will attempt to charge the provided payment instrument for the amount of the specified checkout resource initiated in the `Create a checkout` endpoint.\n\nFollow this request with `Retrieve a checkout` to confirm its status.\n",
        "tags": [
          "Checkouts"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/CheckoutProcess"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/CheckoutProcess"
          },
          "202": {
            "$ref": "#/components/responses/CheckoutProcessAccepted"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorExtended"
                    },
                    {
                      "type": "array",
                      "description": "List of error messages.",
                      "items": {
                        "$ref": "#/components/schemas/ErrorExtended"
                      }
                    }
                  ]
                },
                "examples": {
                  "Invalid_Parameter": {
                    "description": "A required parameter has an invalid value.",
                    "value": {
                      "message": "Validation error",
                      "error_code": "INVALID",
                      "param": "card.expiry_year"
                    }
                  },
                  "Multiple_Invalid_Parameters": {
                    "description": "Multiple required parameters have invalid values.",
                    "value": [
                      {
                        "error_code": "INVALID",
                        "message": "Validation error",
                        "param": "card.name"
                      },
                      {
                        "error_code": "INVALID",
                        "message": "Validation error",
                        "param": "card.number"
                      },
                      {
                        "error_code": "INVALID",
                        "message": "Validation error",
                        "param": "card.expiry_year"
                      }
                    ]
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/ErrorNotAuthorized"
          },
          "404": {
            "$ref": "#/components/responses/ErrorNotFound"
          },
          "409": {
            "$ref": "#/components/responses/ErrorConflict"
          }
        }
      },
      "delete": {
        "summary": "Deactivate a checkout",
        "description": "Deactivates an identified checkout resource. If the checkout has already been processed it can not be deactivated.",
        "tags": [
          "Checkouts"
        ],
        "security": [
          {
            "accessToken": [
              "payments"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Details of the deleted checkout.",
                  "properties": {
                    "checkout_reference": {
                      "type": "string",
                      "maxLength": 90,
                      "description": "Unique ID of the payment checkout specified by the client application when creating the checkout resource."
                    },
                    "id": {
                      "type": "string",
                      "description": "Unique ID of the checkout resource.",
                      "readOnly": true
                    },
                    "amount": {
                      "type": "number",
                      "format": "float",
                      "description": "Amount of the payment."
                    },
                    "currency": {
                      "$ref": "#/components/schemas/Currency"
                    },
                    "pay_to_email": {
                      "type": "string",
                      "format": "email",
                      "description": "Email address of the registered user (merchant) to whom the payment is made. It is highly recommended to use `merchant_code` instead of `pay_to_email`."
                    },
                    "merchant_code": {
                      "type": "string",
                      "description": "Unique identifying code of the merchant profile."
                    },
                    "description": {
                      "type": "string",
                      "description": "Short description of the checkout visible in the SumUp dashboard. The description can contribute to reporting, allowing easier identification of a checkout."
                    },
                    "purpose": {
                      "type": "string",
                      "description": "Purpose of the checkout creation initially",
                      "enum": [
                        "SETUP_RECURRING_PAYMENT",
                        "CHECKOUT"
                      ]
                    },
                    "status": {
                      "type": "string",
                      "description": "Currrent status of the checkout.",
                      "readOnly": true,
                      "enum": [
                        "EXPIRED"
                      ]
                    },
                    "date": {
                      "type": "string",
                      "example": "2020-02-29T10:56:56+00:00",
                      "format": "date-time",
                      "description": "Date and time of the creation of the payment checkout. Response format expressed according to <a href=\"https://en.wikipedia.org/wiki/ISO_8601\" target=\"_blank\" rel=\"noopener\">ISO8601</a> code.",
                      "readOnly": true
                    },
                    "valid_until": {
                      "type": "string",
                      "example": "2020-02-29T10:56:56+00:00",
                      "format": "date-time",
                      "description": "Date and time of the checkout expiration before which the client application needs to send a processing request. If no value is present, the checkout does not have an expiration time.",
                      "readOnly": true,
                      "nullable": true
                    },
                    "merchant_name": {
                      "type": "string",
                      "description": "Merchant name"
                    },
                    "transactions": {
                      "type": "array",
                      "description": "List of transactions related to the payment.",
                      "readOnly": true,
                      "uniqueItems": true,
                      "items": {
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/TransactionMixinBase"
                          },
                          {
                            "$ref": "#/components/schemas/TransactionMixinCheckout"
                          }
                        ]
                      }
                    }
                  }
                },
                "examples": {
                  "DeletedCheckout": {
                    "description": "Response body for a successfully deactivated checkout",
                    "value": {
                      "checkout_reference": "f00a8f74-b05d-4605-bd73-2a901bae5802",
                      "id": "817340ce-f1d9-4609-b90a-6152f8ee267j",
                      "amount": 2,
                      "currency": "EUR",
                      "pay_to_email": "user@example.com",
                      "merchant_code": "MH4H92C7",
                      "description": "Deletion example",
                      "purpose": "CHECKOUT",
                      "status": "EXPIRED",
                      "date": "2020-02-29T10:56:56+00:00",
                      "valid_until": "2020-02-29T10:56:56+00:00",
                      "merchant_name": "Sample Merchant",
                      "transactions": []
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/ErrorNotAuthorized"
          },
          "404": {
            "$ref": "#/components/responses/ErrorNotFound"
          },
          "409": {
            "$ref": "#/components/responses/ErrorConflict"
          }
        }
      }
    },
    "/customers": {
      "post": {
        "summary": "Create a customer",
        "description": "Creates a new saved customer resource which you can later manipulate and save payment instruments to.",
        "tags": [
          "Customers"
        ],
        "security": [
          {
            "accessToken": [
              "payment_instruments"
            ]
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/CustomerCreate"
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/Customer"
          },
          "401": {
            "$ref": "#/components/responses/ErrorNotAuthorized"
          },
          "403": {
            "$ref": "#/components/responses/ErrorForbidden"
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "Existing_Customer": {
                    "description": "A resource with the specified identifier already exists on the server.",
                    "value": {
                      "message": "Customer already exists",
                      "error_code": "CUSTOMER_ALREADY_EXISTS"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/customers/{customer_id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/CustomerID"
        }
      ],
      "get": {
        "summary": "Retrieve a customer",
        "description": "Retrieves an identified saved customer resource through the unique `customer_id` parameter, generated upon customer creation.",
        "tags": [
          "Customers"
        ],
        "security": [
          {
            "accessToken": [
              "payment_instruments"
            ]
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Customer"
          },
          "401": {
            "$ref": "#/components/responses/ErrorNotAuthorized"
          },
          "403": {
            "$ref": "#/components/responses/ErrorForbidden"
          },
          "404": {
            "$ref": "#/components/responses/ErrorNotFound"
          }
        }
      },
      "put": {
        "summary": "Update a customer",
        "description": "Updates an identified saved customer resource's personal details. \n\nThe request only overwrites the parameters included in the request, all other parameters will remain with their initially assigned values.\n",
        "tags": [
          "Customers"
        ],
        "security": [
          {
            "accessToken": [
              "payment_instruments"
            ]
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/CustomerUpdate"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Customer"
          },
          "401": {
            "$ref": "#/components/responses/ErrorNotAuthorized"
          },
          "403": {
            "$ref": "#/components/responses/ErrorForbidden"
          },
          "404": {
            "$ref": "#/components/responses/ErrorNotFound"
          }
        }
      }
    },
    "/customers/{customer_id}/payment-instruments": {
      "parameters": [
        {
          "$ref": "#/components/parameters/CustomerID"
        }
      ],
      "post": {
        "summary": "Create a payment instrument",
        "description": "Creates and activates a new payment instrument resource by saving a payment card for an identified customer. Implement to improve customer experience by skipping the step of entering payment instrument details.\n\nThe token created via this endpoint <b>can not</b> be used for recurring payments by merchants operating within the EU. For more information visit our <a href=\"https://developer.sumup.com/docs/recurring-payments/\" target=\"_blank\">recurring payments guide</a>.\n",
        "tags": [
          "Customers"
        ],
        "security": [
          {
            "accessToken": [
              "payment_instruments"
            ]
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/PaymentInstrument"
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/PaymentInstrumentCreate"
          },
          "400": {
            "$ref": "#/paths/~1checkouts~1%7Bid%7D/put/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/ErrorNotAuthorized"
          },
          "403": {
            "$ref": "#/components/responses/ErrorForbidden"
          },
          "404": {
            "$ref": "#/components/responses/ErrorNotFound"
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "Checkout_Processed": {
                    "description": "The maximum number of payment instruments per customer is reached. Currently, the maximum allowed number is 4.",
                    "value": {
                      "error_code": "MAX_INSTRUMENT_COUNT",
                      "message": "Max number of payment instruments on file reached"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "List payment instruments",
        "description": "Lists all payment instrument resources that are saved for an identified customer.",
        "tags": [
          "Customers"
        ],
        "security": [
          {
            "accessToken": [
              "payment_instruments"
            ]
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PaymentInstrumentList"
          },
          "401": {
            "$ref": "#/components/responses/ErrorNotAuthorized"
          },
          "403": {
            "$ref": "#/components/responses/ErrorForbidden"
          },
          "404": {
            "$ref": "#/components/responses/ErrorNotFound"
          }
        }
      }
    },
    "/customers/{customer_id}/payment-instruments/{token}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/CustomerID"
        },
        {
          "$ref": "#/components/parameters/Token"
        }
      ],
      "delete": {
        "summary": "Deactivate a payment instrument",
        "description": "Deactivates an identified card payment instrument resource for a customer.",
        "tags": [
          "Customers"
        ],
        "security": [
          {
            "accessToken": [
              "payment_instruments"
            ]
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoBodyResponse"
          },
          "401": {
            "$ref": "#/components/responses/ErrorNotAuthorized"
          },
          "403": {
            "$ref": "#/components/responses/ErrorForbidden"
          },
          "404": {
            "$ref": "#/components/responses/ErrorNotFound"
          }
        }
      }
    },
    "/me/refund/{txn_id}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/TxnID"
        }
      ],
      "post": {
        "summary": "Refund a transaction",
        "description": "Refunds an identified transaction either in full or partially.",
        "tags": [
          "Refunds"
        ],
        "security": [
          {
            "accessToken": [
              "payments"
            ]
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Refund"
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoBodyResponse"
          },
          "404": {
            "$ref": "#/components/responses/ErrorNotFound"
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "Transaction_Not_Refundable": {
                    "description": "The state of the identified transaction resource does not permit the requested operation.",
                    "value": {
                      "error_code": "CONFLICT",
                      "message": "The transaction is not refundable in its current state"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/me/transactions": {
      "get": {
        "summary": "Retrieve a transaction",
        "description": "Retrieves the full details of an identified transaction. The transaction resource is identified by a query parameter and *one* of following parameters is required:\n *  `id`\n *  `internal_id`\n *  `transaction_code`\n *  `foreign_transaction_id`\n *  `client_transaction_id`\n",
        "tags": [
          "Transactions"
        ],
        "security": [
          {
            "accessToken": [
              "transactions.history"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/TransactionID"
          },
          {
            "$ref": "#/components/parameters/TransactionInternalID"
          },
          {
            "$ref": "#/components/parameters/TransactionCode"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Transaction"
          },
          "401": {
            "$ref": "#/components/responses/ErrorNotAuthorized"
          },
          "404": {
            "$ref": "#/components/responses/ErrorNotFound"
          }
        }
      }
    },
    "/me/transactions/history": {
      "get": {
        "summary": "List transactions",
        "description": "Lists detailed history of all transactions associated with the merchant account.",
        "tags": [
          "Transactions"
        ],
        "security": [
          {
            "accessToken": [
              "transactions.history"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/TransactionCode"
          },
          {
            "$ref": "#/components/parameters/OrderFilter"
          },
          {
            "$ref": "#/components/parameters/LimitFilter"
          },
          {
            "$ref": "#/components/parameters/UsersFilter"
          },
          {
            "$ref": "#/components/parameters/StatusesFilter"
          },
          {
            "$ref": "#/components/parameters/PaymentTypesFilter"
          },
          {
            "$ref": "#/components/parameters/TypesFilter"
          },
          {
            "$ref": "#/components/parameters/ChangesSinceFilter"
          },
          {
            "$ref": "#/components/parameters/NewestTimeFilter"
          },
          {
            "$ref": "#/components/parameters/NewestRefFilter"
          },
          {
            "$ref": "#/components/parameters/OldestTimeFilter"
          },
          {
            "$ref": "#/components/parameters/OldestRefFilter"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Subaccounts"
          },
          "401": {
            "$ref": "#/components/responses/ErrorNotAuthorized"
          }
        }
      }
    },
    "/me": {
      "get": {
        "summary": "Retrieve an account",
        "description": "Returns user account information.",
        "tags": [
          "Account Details"
        ],
        "security": [
          {
            "accessToken": [
              "user.profile",
              "user.profile_readonly"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/MerchantAccount"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MerchantAccount"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/ErrorNotAuthorized"
          }
        }
      }
    },
    "/me/accounts": {
      "post": {
        "summary": "Create a subaccount",
        "tags": [
          "Subaccounts"
        ],
        "security": [
          {
            "accessToken": [
              "user.subaccounts"
            ]
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/SubaccountPayload"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subaccount"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/ErrorNotAuthorized"
          },
          "403": {
            "$ref": "#/components/responses/ErrorForbidden"
          }
        }
      },
      "get": {
        "summary": "List subaccounts",
        "tags": [
          "Subaccounts"
        ],
        "security": [
          {
            "accessToken": [
              "user.subaccounts"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Subaccounts"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubaccountsDetails"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/ErrorNotAuthorized"
          },
          "403": {
            "$ref": "#/components/responses/ErrorForbidden"
          }
        }
      }
    },
    "/me/accounts/{operator_code}": {
      "put": {
        "summary": "Update a subaccount",
        "tags": [
          "Subaccounts"
        ],
        "security": [
          {
            "accessToken": [
              "user.subaccounts"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Subaccount"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/SubaccountPayload"
        },
        "responses": {
          "200": {
            "$ref": "#/paths/~1me~1accounts/post/responses/200"
          },
          "401": {
            "$ref": "#/components/responses/ErrorNotAuthorized"
          },
          "403": {
            "$ref": "#/components/responses/ErrorForbidden"
          },
          "404": {
            "$ref": "#/components/responses/ErrorNotFound"
          }
        }
      },
      "delete": {
        "summary": "Deactivate a subaccount",
        "tags": [
          "Subaccounts"
        ],
        "security": [
          {
            "accessToken": [
              "user.subaccounts"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Subaccount"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/paths/~1me~1accounts/post/responses/200"
          },
          "401": {
            "$ref": "#/components/responses/ErrorNotAuthorized"
          },
          "403": {
            "$ref": "#/components/responses/ErrorForbidden"
          },
          "404": {
            "$ref": "#/components/responses/ErrorNotFound"
          }
        }
      }
    },
    "/me/financials/payouts": {
      "get": {
        "summary": "List payouts",
        "description": "Lists ordered payouts for the merchant account.",
        "tags": [
          "Payouts"
        ],
        "security": [
          {
            "accessToken": [
              "user.profile",
              "user.profile_readonly"
            ]
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "start_date",
            "description": "Start date (in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\" target=\"_blank\" rel=\"noopener\">ISO8601</a> format).",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "path",
            "name": "end_date",
            "description": "End date (in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\" target=\"_blank\" rel=\"noopener\">ISO8601</a> format).",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "path",
            "name": "format",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "json",
                "csv"
              ]
            }
          },
          {
            "in": "path",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "order",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "desc",
                "asc"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/FinancialPayouts"
          },
          "401": {
            "$ref": "#/components/responses/ErrorNotAuthorized"
          }
        }
      }
    },
    "/me/financials/transactions": {
      "get": {
        "summary": "List transactions",
        "description": "Lists a less detailed history of all transactions associated with the merchant account.",
        "tags": [
          "Payouts"
        ],
        "security": [
          {
            "accessToken": [
              "user.profile",
              "user.profile_readonly"
            ]
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "start_date",
            "required": true,
            "description": "Start date (in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\" target=\"_blank\" rel=\"noopener\">ISO8601</a> format).",
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "path",
            "name": "end_date",
            "description": "End date (in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\" target=\"_blank\" rel=\"noopener\">ISO8601</a> format).",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "in": "path",
            "name": "format",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "json",
                "csv"
              ]
            }
          },
          {
            "in": "path",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "order",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "desc",
                "asc"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/MerchantAccount"
          },
          "401": {
            "$ref": "#/components/responses/ErrorNotAuthorized"
          }
        }
      }
    },
    "/me/personal-profile": {
      "get": {
        "summary": "Retrieve a profile",
        "description": "Retrives personal profile data.",
        "tags": [
          "Personal Account"
        ],
        "security": [
          {
            "accessToken": [
              "user.profile",
              "user.profile_readonly"
            ]
          }
        ],
        "parameters": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/PersonalProfile"
          },
          "401": {
            "$ref": "#/components/responses/ErrorNotAuthorized"
          }
        }
      }
    },
    "/me/merchant-profile": {
      "get": {
        "summary": "Retrieve a profile",
        "description": "Retrieves merchant profile data.",
        "tags": [
          "Merchant Account"
        ],
        "security": [
          {
            "accessToken": [
              "user.profile",
              "user.profile_readonly"
            ]
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/MerchantProfile"
          },
          "401": {
            "$ref": "#/components/responses/ErrorNotAuthorized"
          },
          "403": {
            "$ref": "#/components/responses/ErrorForbidden"
          }
        }
      }
    },
    "/me/merchant-profile/doing-business-as": {
      "get": {
        "summary": "Retrieve DBA",
        "description": "Retrieves Doing Business As profile.",
        "tags": [
          "Merchant Account"
        ],
        "security": [
          {
            "accessToken": [
              "user.profile",
              "user.profile_readonly"
            ]
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/DoingBusinessAs"
          },
          "401": {
            "$ref": "#/components/responses/ErrorNotAuthorized"
          }
        }
      }
    },
    "/me/merchant-profile/bank-accounts": {
      "get": {
        "summary": "List bank accounts",
        "description": "Retrives bank accounts of the merchant.",
        "tags": [
          "Merchant Account"
        ],
        "security": [
          {
            "accessToken": [
              "user.payout-settings",
              "user.profile",
              "user.profile_readonly"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/BankAccounts"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/BankAccounts"
          },
          "401": {
            "$ref": "#/components/responses/ErrorNotAuthorized"
          },
          "403": {
            "$ref": "#/components/responses/ErrorForbidden"
          }
        }
      }
    },
    "/me/merchant-profile/settings": {
      "get": {
        "summary": "List settings",
        "description": "Retrieves merchant settings.",
        "tags": [
          "Merchant Account"
        ],
        "security": [
          {
            "accessToken": [
              "user.payout-settings"
            ]
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/MerchantSettings"
          },
          "401": {
            "$ref": "#/components/responses/ErrorNotAuthorized"
          },
          "403": {
            "$ref": "#/components/responses/ErrorForbidden"
          }
        }
      }
    },
    "/receipts/:id": {
      "get": {
        "summary": "Retrieve receipt details",
        "description": "Retrieves receipt specific data for a transaction.",
        "tags": [
          "Receipts"
        ],
        "security": [
          {
            "accessToken": []
          }
        ],
        "servers": [
          {
            "url": "https://api.sumup.com/v1.0"
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "id",
            "description": "SumUp unique transaction ID or transaction code, e.g. TS7HDYLSKD.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "mid",
            "description": "Merchant code.",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "tx_event_id",
            "description": "The ID of the transaction event (refund).",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/Receipts"
          },
          "400": {
            "$ref": "#/components/responses/ErrorNotFound"
          },
          "401": {
            "$ref": "#/components/responses/ErrorNotAuthorized"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Account": {
        "type": "object",
        "decription": "Account information.",
        "properties": {
          "username": {
            "type": "string",
            "description": "Type of the account."
          },
          "type": {
            "type": "string",
            "description": "The role of the user.",
            "enum": [
              "normal",
              "operator"
            ]
          }
        }
      },
      "Address": {
        "type": "object",
        "description": "Account's personal address information.",
        "properties": {
          "city": {
            "type": "string",
            "description": "City name from the address.",
            "example": "Berlin"
          },
          "country": {
            "type": "string",
            "description": "Two letter country code formatted according to <a href=\"https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2\" target=\"_blank\" rel=\"noopener\">ISO3166-1 alpha-2</a>.",
            "example": "DE"
          },
          "line1": {
            "type": "string",
            "description": "First line of the address with details of the street name and number.",
            "example": "Sample street"
          },
          "line2": {
            "type": "string",
            "description": "Second line of the address with details of the building, unit, apartment, and floor numbers.",
            "example": "ap. 5"
          },
          "postal_code": {
            "type": "string",
            "description": "Postal code from the address.",
            "example": "10115"
          },
          "state": {
            "type": "string",
            "description": "State name or abbreviation from the address.",
            "example": "Berlin"
          }
        },
        "required": [
          "country"
        ]
      },
      "AddressResponse": {
        "type": "object",
        "description": "Account's personal address information.",
        "properties": {
          "city": {
            "type": "string",
            "description": "City name from the address.",
            "example": "Berlin"
          },
          "country": {
            "type": "string",
            "description": "Two letter country code formatted according to <a href=\"https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2\" target=\"_blank\" rel=\"noopener\">ISO3166-1 alpha-2</a>.",
            "example": "DE"
          },
          "line1": {
            "type": "string",
            "description": "First line of the address with details of the street name and number.",
            "example": "Sample street"
          },
          "line2": {
            "type": "string",
            "description": "Second line of the address with details of the building, unit, apartment, and floor numbers.",
            "example": "ap. 5"
          },
          "postal_code": {
            "type": "string",
            "description": "Postal code from the address.",
            "example": "10115"
          },
          "state": {
            "type": "string",
            "description": "State name or abbreviation from the address.",
            "example": "Berlin"
          }
        }
      },
      "AddressWithDetails": {
        "type": "object",
        "description": "Details of the registered address.",
        "properties": {
          "address_line1": {
            "type": "string",
            "description": "Address line 1"
          },
          "address_line2": {
            "type": "string",
            "description": "Address line 2"
          },
          "city": {
            "type": "string",
            "description": "City"
          },
          "country": {
            "type": "string",
            "description": "Country ISO 3166-1 code"
          },
          "region_id": {
            "type": "number",
            "description": "Country region id"
          },
          "region_name": {
            "type": "string",
            "description": "Region name"
          },
          "region_code": {
            "type": "string",
            "description": "Region code"
          },
          "post_code": {
            "type": "string",
            "description": "Postal code"
          },
          "landline": {
            "type": "string",
            "description": "Landline number"
          },
          "first_name": {
            "type": "string",
            "description": "undefined"
          },
          "last_name": {
            "type": "string",
            "description": "undefined"
          },
          "company": {
            "type": "string",
            "description": "undefined"
          },
          "country_details": {
            "$ref": "#/components/schemas/CountryDetails"
          },
          "timeoffset_details": {
            "$ref": "#/components/schemas/TimeoffsetDetails"
          },
          "state_id": {
            "type": "string",
            "description": "undefined"
          }
        }
      },
      "AddressPayload": {
        "type": "object",
        "description": "Account's personal address",
        "required": [
          "address_line1",
          "city",
          "country",
          "post_code"
        ],
        "properties": {
          "address_line1": {
            "type": "string",
            "description": "Address line 1"
          },
          "address_line2": {
            "type": "string",
            "description": "Address line 2"
          },
          "city": {
            "type": "string",
            "description": "City"
          },
          "country": {
            "type": "string",
            "description": "Country ISO 3166-1 code"
          },
          "region_id": {
            "type": "number",
            "description": "Country region id"
          },
          "region_name": {
            "type": "string",
            "description": "Country region name"
          },
          "post_code": {
            "type": "string",
            "description": "Postal code"
          },
          "landline": {
            "type": "string",
            "description": "Landline number"
          },
          "first_name": {
            "type": "string",
            "description": "First name"
          },
          "last_name": {
            "type": "string",
            "description": "Last name"
          },
          "company": {
            "type": "string",
            "description": "Company name"
          }
        }
      },
      "AppSettings": {
        "type": "object",
        "description": "Mobile app settings",
        "properties": {
          "checkout_preference": {
            "type": "string",
            "description": "Checkout preference"
          },
          "include_vat": {
            "type": "boolean",
            "description": "Include vat."
          },
          "manual_entry_tutorial": {
            "type": "boolean",
            "description": "Manual entry tutorial."
          },
          "mobile_payment_tutorial": {
            "type": "boolean",
            "description": "Mobile payment tutorial."
          },
          "tax_enabled": {
            "type": "boolean",
            "description": "Tax enabled."
          },
          "mobile_payment": {
            "type": "string",
            "description": "Mobile payment."
          },
          "reader_payment": {
            "type": "string",
            "description": "Reader payment."
          },
          "cash_payment": {
            "type": "string",
            "description": "Cash payment."
          },
          "advanced_mode": {
            "type": "string",
            "description": "Advanced mode."
          },
          "expected_max_transaction_amount": {
            "type": "number",
            "description": "Expected max transaction amount."
          },
          "manual_entry": {
            "type": "string",
            "description": "Manual entry."
          },
          "terminal_mode_tutorial": {
            "type": "boolean",
            "description": "Terminal mode tutorial."
          },
          "tipping": {
            "type": "string",
            "description": "Tipping."
          },
          "tip_rates": {
            "type": "array",
            "description": "Tip rates.",
            "items": {
              "type": "number",
              "format": "float"
            }
          },
          "barcode_scanner": {
            "type": "string",
            "description": "Barcode scanner."
          },
          "referral": {
            "type": "string",
            "description": "Referral."
          }
        }
      },
      "AuthCode": {
        "type": "object",
        "description": "Authorization code flow",
        "properties": {
          "response_type": {
            "type": "string",
            "description": "The type of the expected response. The value must be `code` to indicate that you expect to receive an authorization code.",
            "example": "code"
          },
          "client_id": {
            "type": "string",
            "description": "The client ID of your application that was generated when you <a href=\"https://developer.sumup.com/docs/register-app/\" target=\"_blank\">registered it</a>.",
            "example": "fOcmczrYtYMJ7Li5GjMLLcUeC9dN"
          },
          "redirect_uri": {
            "type": "string",
            "description": "The URI to which the merchant user is redirected after authorizing your application to access their user's account data and to which the authorization code is sent. The value must match exactly one of the <a href=\"https://developer.sumup.com/docs/register-app#3-create-oauth-client-credentials\" target=\"_blank\">registered URIs</a> for your application.",
            "example": "https://sample-app.example.com/callback"
          },
          "scope": {
            "type": "string",
            "description": "A space-separated list of scopes for which you request authorization. If you don't specify any scopes in the request, your application will be granted authorization for the default scopes.",
            "example": "payments"
          },
          "state": {
            "type": "string",
            "description": "A unique local state that can be used for correlating requests and responses and for preventing <a href=\"https://tools.ietf.org/html/rfc6749#section-10.12\" targer=\"_blank\">cross-site request forgery</a>.",
            "example": "2cFCsY36y95lFHk4"
          }
        },
        "required": [
          "response_type",
          "client_id",
          "redirect_uri"
        ]
      },
      "AuthToken": {
        "type": "object",
        "description": "Authorization token flow",
        "properties": {
          "grant_type": {
            "type": "string",
            "description": "The grant type used for obtaining an access token.",
            "enum": [
              "authorization_code",
              "refresh_token"
            ],
            "example": "refresh_token"
          },
          "client_id": {
            "type": "string",
            "description": "The client ID of your application that was generated when you <a href=\"https://developer.sumup.com/docs/register-app\">registered it</a>.",
            "example": "fOcmczrYtYMJ7Li5GjMLLcUeC9dN"
          },
          "client_secret": {
            "type": "instringteger",
            "description": "The client secret of your application that was generated when you <a href=\"https://developer.sumup.com/docs/register-app\">registered it</a>.",
            "example": "717bd571b54297494cd7a79b491e8f2c1da6189c4cc2d3481380e8366eef539c"
          },
          "code": {
            "type": "string",
            "description": "The authorization code that you received from requesting an authorization code.",
            "example": "be366ce9fccd0c337d1da29b31d06dd1135ab95401562883"
          },
          "refresh_token": {
            "type": "string",
            "description": "A **required** parameter when generating a refresh token.",
            "example": "d180031bfe9bac36c336e5746637810272546865e9c9586012f462a56f3fe9af"
          }
        },
        "required": [
          "grant_type",
          "client_id",
          "client_secret",
          "code"
        ]
      },
      "BankAccount": {
        "type": "object",
        "properties": {
          "bank_code": {
            "type": "string",
            "description": "Bank code"
          },
          "branch_code": {
            "type": "string",
            "description": "Branch code"
          },
          "swift": {
            "type": "string",
            "description": "SWIFT code"
          },
          "account_number": {
            "type": "string",
            "description": "Account number"
          },
          "iban": {
            "type": "string",
            "description": "IBAN"
          },
          "account_type": {
            "type": "string",
            "description": "Type of the account"
          },
          "account_category": {
            "type": "string",
            "description": "Account category - business or personal"
          },
          "account_holder_name": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "description": "Status in the verification process"
          },
          "primary": {
            "type": "boolean",
            "description": "The primary bank account is the one used for settlemnts"
          },
          "created_at": {
            "type": "string",
            "description": "Creation date of the bank account"
          },
          "bank_name": {
            "type": "string",
            "description": "Bank name"
          }
        }
      },
      "BankAccountPayload": {
        "type": "object",
        "required": [
          "account_holder_name",
          "iban",
          "swift"
        ],
        "properties": {
          "bank_code": {
            "type": "string",
            "description": "Bank code"
          },
          "branch_code": {
            "type": "string",
            "description": "Branch code"
          },
          "account_number": {
            "type": "string",
            "description": "Account number"
          },
          "iban": {
            "type": "string",
            "description": "IBAN"
          },
          "swift": {
            "type": "string",
            "description": "SWIFT code"
          },
          "account_type": {
            "type": "string",
            "description": "Type of the account.",
            "enum": [
              "CURRENT",
              "SAVINGS"
            ]
          },
          "account_holder_name": {
            "type": "string",
            "description": "Account holder name"
          },
          "check_digit": {
            "type": "string",
            "description": "Check digit"
          },
          "primary": {
            "type": "boolean",
            "description": "Determines if this bank account will be primary. Default is false"
          },
          "status": {
            "type": "string",
            "description": "Determines the bank account status.",
            "enum": [
              "OPEN"
            ]
          },
          "account_category": {
            "type": "string",
            "description": "Determines if this bank account is business or personal.",
            "enum": [
              "PERSONAL",
              "BUSINESS"
            ]
          }
        }
      },
      "BusinessOwners": {
        "type": "array",
        "description": "Account's business address information",
        "items": {
          "type": "object",
          "properties": {
            "first_name": {
              "type": "string",
              "description": "BO's first name"
            },
            "last_name": {
              "type": "string",
              "description": "BO's last name of the user"
            },
            "date_of_birth": {
              "type": "string",
              "description": "Date of birth"
            },
            "mobile_phone": {
              "type": "string",
              "description": "Mobile phone number"
            },
            "landline": {
              "type": "string",
              "description": "BO's Landline"
            },
            "ownership": {
              "type": "number",
              "description": "Ownership percentage"
            }
          }
        }
      },
      "Card": {
        "type": "object",
        "description": "__Required when payment type is `card`.__ Details of the payment card.",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the cardholder as it appears on the payment card.",
            "writeOnly": true,
            "example": "FIRSTNAME LASTNAME"
          },
          "number": {
            "type": "string",
            "description": "Number of the payment card (without spaces).",
            "writeOnly": true,
            "example": "1234567890123456"
          },
          "expiry_year": {
            "type": "string",
            "description": "Year from the expiration time of the payment card. Accepted formats are `YY` and `YYYY`.",
            "writeOnly": true,
            "minLength": 2,
            "maxLength": 4,
            "example": "2023"
          },
          "expiry_month": {
            "type": "string",
            "description": "Month from the expiration time of the payment card. Accepted format is `MM`.",
            "writeOnly": true,
            "enum": [
              "01",
              "02",
              "03",
              "04",
              "05",
              "06",
              "07",
              "08",
              "09",
              "10",
              "11",
              "12"
            ]
          },
          "cvv": {
            "type": "string",
            "description": "Three or four-digit card verification value (security code) of the payment card.",
            "writeOnly": true,
            "maxLength": 4,
            "minLength": 3,
            "example": "123"
          },
          "zip_code": {
            "type": "string",
            "description": "Required five-digit ZIP code. Applicable only to merchant users in the USA.",
            "writeOnly": true,
            "maxLength": 5,
            "minLength": 5,
            "example": "12345"
          },
          "last_4_digits": {
            "type": "string",
            "description": "Last 4 digits of the payment card number.",
            "readOnly": true,
            "minLength": 4,
            "maxLength": 4,
            "example": "3456"
          },
          "type": {
            "type": "string",
            "description": "Issuing card network of the payment card.",
            "readOnly": true,
            "enum": [
              "AMEX",
              "CUP",
              "DINERS",
              "DISCOVER",
              "ELO",
              "ELV",
              "HIPERCARD",
              "JCB",
              "MAESTRO",
              "MASTERCARD",
              "VISA",
              "VISA_ELECTRON",
              "VISA_VPAY",
              "UNKNOWN"
            ]
          }
        },
        "required": [
          "name",
          "number",
          "expiry_month",
          "expiry_year",
          "cvv",
          "last_4_digits",
          "type"
        ]
      },
      "CardResponse": {
        "type": "object",
        "description": "Details of the payment card.",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the cardholder as it appears on the payment card.",
            "writeOnly": true,
            "example": "FIRSTNAME LASTNAME"
          },
          "number": {
            "type": "string",
            "description": "Number of the payment card (without spaces).",
            "writeOnly": true,
            "example": "1234567890123456"
          },
          "expiry_year": {
            "type": "string",
            "description": "Year from the expiration time of the payment card. Accepted formats are `YY` and `YYYY`.",
            "writeOnly": true,
            "minLength": 2,
            "maxLength": 4,
            "example": "2023"
          },
          "expiry_month": {
            "type": "string",
            "description": "Month from the expiration time of the payment card. Accepted format is `MM`.",
            "writeOnly": true,
            "enum": [
              "01",
              "02",
              "03",
              "04",
              "05",
              "06",
              "07",
              "08",
              "09",
              "10",
              "11",
              "12"
            ]
          },
          "cvv": {
            "type": "string",
            "description": "Three-digit card verification value (security code) of the payment card.",
            "writeOnly": true,
            "maxLength": 3,
            "minLength": 3,
            "example": "123"
          },
          "zip_code": {
            "type": "string",
            "description": "Required five-digit ZIP code. Applicable only to merchant users in the USA.",
            "writeOnly": true,
            "maxLength": 5,
            "minLength": 5,
            "example": "12345"
          },
          "last_4_digits": {
            "type": "string",
            "description": "Last 4 digits of the payment card number.",
            "readOnly": true,
            "minLength": 4,
            "maxLength": 4,
            "example": "3456"
          },
          "type": {
            "type": "string",
            "description": "Issuing card network of the payment card.",
            "readOnly": true,
            "enum": [
              "AMEX",
              "CUP",
              "DINERS",
              "DISCOVER",
              "ELO",
              "ELV",
              "HIPERCARD",
              "JCB",
              "MAESTRO",
              "MASTERCARD",
              "VISA",
              "VISA_ELECTRON",
              "VISA_VPAY",
              "UNKNOWN"
            ]
          }
        }
      },
      "Checkout": {
        "type": "object",
        "description": "Details of the payment checkout.",
        "properties": {
          "checkout_reference": {
            "type": "string",
            "maxLength": 90,
            "description": "Unique ID of the payment checkout specified by the client application when creating the checkout resource."
          },
          "amount": {
            "type": "number",
            "format": "float",
            "description": "Amount of the payment.",
            "example": 10.1
          },
          "currency": {
            "$ref": "#/components/schemas/Currency"
          },
          "pay_to_email": {
            "type": "string",
            "format": "email",
            "description": "Email address of the registered user (merchant) to whom the payment is made."
          },
          "merchant_code": {
            "type": "string",
            "description": "Unique identifying code of the merchant profile."
          },
          "description": {
            "type": "string",
            "description": "Short description of the checkout visible in the SumUp dashboard. The description can contribute to reporting, allowing easier identification of a checkout."
          },
          "return_url": {
            "type": "string",
            "format": "uri",
            "description": "URL to which the SumUp platform sends the processing status of the payment checkout."
          },
          "id": {
            "type": "string",
            "description": "Unique ID of the checkout resource."
          },
          "status": {
            "type": "string",
            "description": "Currrent status of the checkout.",
            "enum": [
              "PENDING",
              "FAILED",
              "PAID"
            ]
          },
          "date": {
            "type": "string",
            "example": "2020-02-29T10:56:56+00:00",
            "format": "date-time",
            "description": "Date and time of the creation of the payment checkout. Response format expressed according to <a href=\"https://en.wikipedia.org/wiki/ISO_8601\" target=\"_blank\" rel=\"noopener\">ISO8601</a> code."
          },
          "valid_until": {
            "type": "string",
            "example": "2020-02-29T10:56:56+00:00",
            "format": "date-time",
            "description": "Date and time of the checkout expiration before which the client application needs to send a processing request. If no value is present, the checkout does not have an expiration time.",
            "nullable": true
          },
          "customer_id": {
            "type": "string",
            "description": "Unique identification of a customer. If specified, the checkout session and payment instrument are associated with the referrenced customer."
          },
          "mandate": {
            "$ref": "#/components/schemas/MandateResponse"
          },
          "transactions": {
            "type": "array",
            "description": "List of transactions related to the payment.",
            "uniqueItems": true,
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/TransactionMixinBase"
                },
                {
                  "$ref": "#/components/schemas/TransactionMixinCheckout"
                }
              ]
            }
          }
        }
      },
      "CheckoutCreateRequest": {
        "type": "object",
        "description": "Details of the payment checkout.",
        "properties": {
          "checkout_reference": {
            "type": "string",
            "maxLength": 90,
            "description": "Unique ID of the payment checkout specified by the client application when creating the checkout resource."
          },
          "amount": {
            "type": "number",
            "format": "float",
            "description": "Amount of the payment."
          },
          "currency": {
            "$ref": "#/components/schemas/Currency"
          },
          "merchant_code": {
            "type": "string",
            "description": "Unique identifying code of the merchant profile."
          },
          "pay_to_email": {
            "type": "string",
            "format": "email",
            "description": "Email address of the registered user (merchant) to whom the payment is made. It is highly recommended to use `merchant_code` instead of `pay_to_email`."
          },
          "description": {
            "type": "string",
            "description": "Short description of the checkout visible in the SumUp dashboard. The description can contribute to reporting, allowing easier identification of a checkout."
          },
          "return_url": {
            "type": "string",
            "format": "uri",
            "description": "URL to which the SumUp platform sends the processing status of the payment checkout."
          },
          "customer_id": {
            "type": "string",
            "description": "Unique identification of a customer. If specified, the checkout session and payment instrument are associated with the referrenced customer."
          },
          "id": {
            "type": "string",
            "description": "Unique ID of the checkout resource.",
            "readOnly": true
          },
          "status": {
            "type": "string",
            "description": "Currrent status of the checkout.",
            "readOnly": true,
            "enum": [
              "PENDING",
              "FAILED",
              "PAID"
            ]
          },
          "date": {
            "type": "string",
            "example": "2020-02-29T10:56:56+00:00",
            "format": "date-time",
            "description": "Date and time of the creation of the payment checkout. Response format expressed according to <a href=\"https://en.wikipedia.org/wiki/ISO_8601\" target=\"_blank\" rel=\"noopener\">ISO8601</a> code.",
            "readOnly": true
          },
          "valid_until": {
            "type": "string",
            "example": "2020-02-29T10:56:56+00:00",
            "format": "date-time",
            "description": "Date and time of the checkout expiration before which the client application needs to send a processing request. If no value is present, the checkout does not have an expiration time.",
            "readOnly": true,
            "nullable": true
          },
          "transactions": {
            "type": "array",
            "description": "List of transactions related to the payment.",
            "readOnly": true,
            "uniqueItems": true,
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/TransactionMixinBase"
                },
                {
                  "$ref": "#/components/schemas/TransactionMixinCheckout"
                }
              ]
            }
          },
          "redirect_url": {
            "type": "string",
            "example": "https://mysite.com/completed_purchase",
            "description": "__Required for 3DS checkouts.__ Refers to a url where the end user is redirected once the payment processing completes."
          },
          "payment_type": {
            "type": "string",
            "description": "Alternative payment method name",
            "example": "boleto"
          },
          "personal_details": {
            "type": "object",
            "description": "Object containing personal details about the payer, typical for __Boleto__ checkouts",
            "properties": {
              "email": {
                "type": "string",
                "description": "Payer's email address",
                "example": "test@example.com"
              },
              "first_name": {
                "type": "string",
                "description": "Payer's first name",
                "example": "John"
              },
              "last_name": {
                "type": "string",
                "description": "Payer's last name",
                "example": "Doe"
              },
              "tax_id": {
                "type": "string",
                "description": "Payer's tax identification number (CPF)",
                "example": "423.378.593-47"
              },
              "address": {
                "type": "object",
                "description": "Payer's address information",
                "properties": {
                  "country": {
                    "type": "string",
                    "description": "Payer's country",
                    "example": "BR"
                  },
                  "city": {
                    "type": "string",
                    "description": "Payer's city",
                    "example": "Rio de Janeiro"
                  },
                  "line_1": {
                    "type": "string",
                    "description": "Field for address details"
                  },
                  "state": {
                    "type": "string",
                    "description": "Payer's state code",
                    "enum": [
                      "AC",
                      "AL",
                      "AP",
                      "AM",
                      "BA",
                      "CE",
                      "DF",
                      "ES",
                      "GO",
                      "MA",
                      "MT",
                      "MS",
                      "MG",
                      "PA",
                      "PB",
                      "PR",
                      "PE",
                      "PI",
                      "RJ",
                      "RN",
                      "RS",
                      "RO",
                      "RR",
                      "SC",
                      "SP",
                      "SE",
                      "TO"
                    ],
                    "example": "RJ"
                  },
                  "postal_code": {
                    "type": "integer",
                    "description": "Payer's postal code. Must be eight digits long, however an optional dash could be applied after the 5th digit (<a href=\"https://en.wikipedia.org/wiki/List_of_postal_codes_in_Brazil\" target=\"_blank\">more information about the format available here</a>). Both options are accepted as correct.",
                    "pattern": "^\\d{5}-?\\d{3}$",
                    "example": "20000-000"
                  }
                }
              }
            }
          }
        },
        "required": [
          "checkout_reference",
          "amount",
          "currency",
          "merchant_code"
        ]
      },
      "CheckoutCreate": {
        "type": "object",
        "description": "Details of the payment checkout.",
        "properties": {
          "checkout_reference": {
            "type": "string",
            "maxLength": 90,
            "description": "Unique ID of the payment checkout specified by the client application when creating the checkout resource."
          },
          "amount": {
            "type": "number",
            "format": "float",
            "description": "Amount of the payment."
          },
          "currency": {
            "$ref": "#/components/schemas/Currency"
          },
          "pay_to_email": {
            "type": "string",
            "format": "email",
            "description": "Email address of the registered user (merchant) to whom the payment is made. It is highly recommended to use `merchant_code` instead of `pay_to_email`."
          },
          "merchant_code": {
            "type": "string",
            "description": "Unique identifying code of the merchant profile."
          },
          "description": {
            "type": "string",
            "description": "Short description of the checkout visible in the SumUp dashboard. The description can contribute to reporting, allowing easier identification of a checkout."
          },
          "return_url": {
            "type": "string",
            "format": "uri",
            "description": "URL to which the SumUp platform sends the processing status of the payment checkout."
          },
          "id": {
            "type": "string",
            "description": "Unique ID of the checkout resource.",
            "readOnly": true
          },
          "status": {
            "type": "string",
            "description": "Currrent status of the checkout.",
            "readOnly": true,
            "enum": [
              "PENDING",
              "FAILED",
              "PAID"
            ]
          },
          "date": {
            "type": "string",
            "example": "2020-02-29T10:56:56+00:00",
            "format": "date-time",
            "description": "Date and time of the creation of the payment checkout. Response format expressed according to <a href=\"https://en.wikipedia.org/wiki/ISO_8601\" target=\"_blank\" rel=\"noopener\">ISO8601</a> code.",
            "readOnly": true
          },
          "valid_until": {
            "type": "string",
            "example": "2020-02-29T10:56:56+00:00",
            "format": "date-time",
            "description": "Date and time of the checkout expiration before which the client application needs to send a processing request. If no value is present, the checkout does not have an expiration time.",
            "readOnly": true,
            "nullable": true
          },
          "transactions": {
            "type": "array",
            "description": "List of transactions related to the payment.",
            "readOnly": true,
            "uniqueItems": true,
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/TransactionMixinBase"
                },
                {
                  "$ref": "#/components/schemas/TransactionMixinCheckout"
                }
              ]
            }
          },
          "redirect_url": {
            "type": "string",
            "example": "https://mysite.com/completed_purchase",
            "description": "Required for 3DS checkouts. Refers to a url where the end user is redirected once the payment processing completes."
          }
        },
        "required": [
          "checkout_reference",
          "amount",
          "currency",
          "merchant_code",
          "id",
          "status",
          "date",
          "transactions"
        ]
      },
      "CheckoutProcessMixin": {
        "type": "object",
        "description": "Details of the payment instrument for processing the checkout.",
        "properties": {
          "payment_type": {
            "type": "string",
            "description": "",
            "enum": [
              "card",
              "token",
              "boleto",
              "ideal",
              "sofort",
              "bancontact"
            ]
          },
          "installments": {
            "type": "integer",
            "description": "Number of installments for deferred payments. Available only to merchant users in Brazil.",
            "minimum": 1,
            "maximum": 12
          },
          "mandate": {
            "$ref": "#/components/schemas/MandatePayload"
          },
          "card": {
            "type": "object",
            "$ref": "#/components/schemas/Card"
          },
          "token": {
            "type": "string",
            "description": "__Required when the payment type is `token`.__ Unique token identifying the saved payment card for a customer."
          },
          "customer_id": {
            "$ref": "#/components/schemas/CustomerID"
          }
        },
        "required": [
          "payment_type"
        ]
      },
      "CheckoutSuccess": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Checkout"
          },
          {
            "type": "object",
            "properties": {
              "checkout_reference": {
                "type": "string",
                "maxLength": 90,
                "description": "Unique ID of the payment checkout specified by the client application when creating the checkout resource.",
                "example": "f00a8f74-b05d-4605-bd73-2a901bae5802"
              },
              "amount": {
                "type": "number",
                "format": "float",
                "description": "Amount of the payment.",
                "example": 10.1
              },
              "currency": {
                "$ref": "#/components/schemas/Currency"
              },
              "pay_to_email": {
                "type": "string",
                "format": "email",
                "description": "Email address of the registered user (merchant) to whom the payment is made. It is highly recommended to use `merchant_code` instead of `pay_to_email`.",
                "example": "user@example.com"
              },
              "merchant_code": {
                "type": "string",
                "description": "Unique identifying code of the merchant profile.",
                "example": "MH4H92C7"
              },
              "description": {
                "type": "string",
                "description": "Short description of the checkout visible in the SumUp dashboard. The description can contribute to reporting, allowing easier identification of a checkout.",
                "example": "Purchase"
              },
              "id": {
                "type": "string",
                "description": "Unique ID of the checkout resource.",
                "readOnly": true,
                "example": "4e425463-3e1b-431d-83fa-1e51c2925e99"
              },
              "status": {
                "type": "string",
                "description": "Currrent status of the checkout.",
                "readOnly": true,
                "enum": [
                  "PENDING",
                  "FAILED",
                  "PAID"
                ]
              },
              "date": {
                "type": "string",
                "example": "2020-02-29T10:56:56+00:00",
                "format": "date-time",
                "description": "Date and time of the creation of the payment checkout. Response format expressed according to <a href=\"https://en.wikipedia.org/wiki/ISO_8601\" target=\"_blank\" rel=\"noopener\">ISO8601</a> code.",
                "readOnly": true
              },
              "transaction_code": {
                "type": "string",
                "description": "Transaction code of the successful transaction with which the payment for the checkout is completed.",
                "readOnly": true,
                "example": "TEENSK4W2K"
              },
              "transaction_id": {
                "type": "string",
                "description": "Transaction ID of the successful transaction with which the payment for the checkout is completed.",
                "readOnly": true,
                "example": "410fc44a-5956-44e1-b5cc-19c6f8d727a4"
              },
              "merchant_name": {
                "type": "string",
                "description": "Name of the merchant",
                "example": "Sample Merchant"
              },
              "redirect_url": {
                "type": "string",
                "example": "https://mysite.com/completed_purchase",
                "description": "Refers to a url where the end user is redirected once the payment processing completes."
              },
              "customer_id": {
                "type": "string",
                "description": "Unique identification of a customer. If specified, the checkout session and payment instrument are associated with the referrenced customer.",
                "example": "831ff8d4cd5958ab5670"
              },
              "payment_instrument": {
                "type": "object",
                "description": "Object containing token information for the specified payment instrument",
                "properties": {
                  "token": {
                    "type": "string",
                    "description": "Token value",
                    "example": "e76d7e5c-9375-4fac-a7e7-b19dc5302fbc"
                  }
                }
              },
              "transactions": {
                "type": "array",
                "description": "List of transactions related to the payment.",
                "readOnly": true,
                "uniqueItems": true,
                "items": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/TransactionMixinBase"
                    },
                    {
                      "$ref": "#/components/schemas/TransactionMixinCheckout"
                    }
                  ]
                }
              }
            }
          }
        ]
      },
      "CheckoutSuccessToken": {
        "type": "object",
        "description": "Details of the payment checkout.",
        "properties": {
          "checkout_reference": {
            "type": "string",
            "maxLength": 90,
            "description": "Unique ID of the payment checkout specified by the client application when creating the checkout resource."
          },
          "amount": {
            "type": "number",
            "format": "float",
            "description": "Amount of the payment.",
            "example": 10.1
          },
          "currency": {
            "$ref": "#/components/schemas/Currency"
          },
          "pay_to_email": {
            "type": "string",
            "format": "email",
            "description": "Email address of the registered user (merchant) to whom the payment is made. It is highly recommended to use `merchant_code` instead of `pay_to_email`."
          },
          "merchant_code": {
            "type": "string",
            "description": "Unique identifying code of the merchant profile."
          },
          "description": {
            "type": "string",
            "description": "Short description of the checkout visible in the SumUp dashboard. The description can contribute to reporting, allowing easier identification of a checkout."
          },
          "id": {
            "type": "string",
            "description": "Unique ID of the checkout resource.",
            "readOnly": true
          },
          "status": {
            "type": "string",
            "description": "Currrent status of the checkout.",
            "readOnly": true,
            "enum": [
              "PENDING",
              "FAILED",
              "PAID"
            ]
          },
          "date": {
            "type": "string",
            "example": "2020-02-29T10:56:56+00:00",
            "format": "date-time",
            "description": "Date and time of the creation of the payment checkout. Response format expressed according to <a href=\"https://en.wikipedia.org/wiki/ISO_8601\" target=\"_blank\" rel=\"noopener\">ISO8601</a> code.",
            "readOnly": true
          },
          "transaction_code": {
            "type": "string",
            "description": "Transaction code of the successful transaction with which the payment for the checkout is completed.",
            "readOnly": true,
            "example": "TEENSK4W2K"
          },
          "transaction_id": {
            "type": "string",
            "description": "Transaction ID of the successful transaction with which the payment for the checkout is completed.",
            "readOnly": true,
            "example": "410fc44a-5956-44e1-b5cc-19c6f8d727a4"
          },
          "merchant_name": {
            "type": "string",
            "description": "Name of the merchant",
            "example": "Sample Merchant"
          },
          "redirect_url": {
            "type": "string",
            "example": "https://mysite.com/completed_purchase",
            "description": "Refers to a url where the end user is redirected once the payment processing completes."
          },
          "customer_id": {
            "type": "string",
            "description": "Unique identification of a customer. If specified, the checkout session and payment instrument are associated with the referrenced customer."
          },
          "payment_instrument": {
            "type": "object",
            "description": "Object containing token information for the specified payment instrument",
            "properties": {
              "token": {
                "type": "string",
                "description": "Token value",
                "example": "e76d7e5c-9375-4fac-a7e7-b19dc5302fbc"
              }
            }
          },
          "transactions": {
            "type": "array",
            "description": "List of transactions related to the payment.",
            "readOnly": true,
            "uniqueItems": true,
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/TransactionMixinBase"
                },
                {
                  "$ref": "#/components/schemas/TransactionMixinCheckout"
                }
              ]
            }
          }
        }
      },
      "CheckoutAccepted": {
        "type": "object",
        "description": "3DS Response",
        "properties": {
          "next_step": {
            "type": "object",
            "description": "Required action processing 3D Secure payments.",
            "properties": {
              "url": {
                "type": "string",
                "example": "https://dummy-3ds-gateway.com/cap?RID=1233&VAA=A",
                "description": "Where the end user is redirected."
              },
              "method": {
                "type": "string",
                "example": "POST",
                "description": "Method used to complete the redirect."
              },
              "redirect_url": {
                "type": "string",
                "example": "https://mysite.com/completed_purchase",
                "description": "Refers to a url where the end user is redirected once the payment processing completes."
              },
              "mechanism": {
                "type": "array",
                "enum": [
                  "iframe",
                  "browser"
                ],
                "description": "Indicates allowed mechanisms for redirecting an end user. If both values are provided ensure a redirect takes place in either."
              },
              "payload": {
                "type": "object",
                "description": "Contains parameters essential for form redirection. Number of object keys and their content can vary.",
                "properties": {
                  "PaReq": {
                    "example": "eJxVUttu2zAM/RXDr4MjyY5dO6BVuE27FZuDZHGG9VGRmMSFb/Wljff1k9KkF0APPCR1eHQouD6WhfWCbZfXVWyzCbUtrGSt8mof25vs3gltq+tFpURRVxjbI3b2NYfs0CLO1yiHFjmk2HVij1auYrsRW1+F0U4qZxfKwJlur4QTYcQcJoIdc+XO2/poc1gmv/GZw3k216MnLpAL1JytPIiq5yDk883Dgk+DwPV9IGcIJbYPc84o1Ye6lHqu5wVA3tJQiRL5eiiHxlqKscSq76xfeZn3qICciiDroerbkYeuvnYBMLQFP/R9MyOkM9cnCoGYJJAPScvBRJ0mOeaKr/6l08XT6jXN7tx0vvHSbOMtsj1dzB9jIKYDlOiRu1omYyy0WDCj0YxFQE55EKWZzj2f6ee9xdCYEcmnwucEaN9bvaeRR1ehFn9BgMdGr0l3aCvfYyAfem9/GENlrz36ufpTBPTv07r8lm3qpPiOo1y/7u+SJImNzacmw5hrX1wt/kRpABBDQ84bJOf16+jLt/gPhUvGGw=="
                  },
                  "MD": {
                    "example": "b1a536c0-29b9-11eb-adc1-0242ac120002"
                  },
                  "TermUrl": {
                    "example": "https://api.sumup.com/v0.1/checkouts/e552de3b-1777-4c91-bdb8-756967678572/complete_payment"
                  }
                }
              }
            }
          }
        }
      },
      "Customer": {
        "type": "object",
        "description": "",
        "required": [
          "customer_id"
        ],
        "properties": {
          "customer_id": {
            "$ref": "#/components/schemas/CustomerID"
          },
          "personal_details": {
            "$ref": "#/components/schemas/PersonalDetails"
          }
        }
      },
      "CustomerResponse": {
        "type": "object",
        "description": "Customer Response",
        "properties": {
          "customer_id": {
            "$ref": "#/components/schemas/CustomerID"
          },
          "personal_details": {
            "$ref": "#/components/schemas/PersonalDetailsResponse"
          }
        }
      },
      "CountryDetails": {
        "type": "object",
        "description": "Country Details",
        "properties": {
          "currency": {
            "type": "string",
            "description": "Currency ISO 4217 code"
          },
          "iso_code": {
            "type": "string",
            "description": "Country ISO code"
          },
          "en_name": {
            "type": "string",
            "description": "Country EN name"
          },
          "native_name": {
            "type": "string",
            "description": "Country native name"
          }
        }
      },
      "DoingBusinessAs": {
        "type": "object",
        "description": "Doing Business As information",
        "properties": {
          "business_name": {
            "type": "string",
            "description": "Doing business as name"
          },
          "company_registration_number": {
            "type": "string",
            "description": "Doing business as company registration number"
          },
          "vat_id": {
            "type": "string",
            "description": "Doing business as vat id"
          },
          "website": {
            "type": "string",
            "description": "Doing business as website"
          },
          "email": {
            "type": "string",
            "description": "Doing business as email"
          },
          "address": {
            "properties": {
              "address_line1": {
                "type": "string",
                "description": "Address line 1"
              },
              "address_line2": {
                "type": "string",
                "description": "Address line 2"
              },
              "city": {
                "type": "string",
                "description": "City"
              },
              "country": {
                "type": "string",
                "description": "Country ISO 3166-1 code"
              },
              "region_id": {
                "type": "number",
                "description": "Country region id"
              },
              "region_name": {
                "type": "string",
                "description": "Country region name"
              },
              "post_code": {
                "type": "string",
                "description": "Postal code"
              }
            }
          }
        }
      },
      "DoingBusinessAsPayload": {
        "type": "object",
        "description": "Doing Business As information",
        "properties": {
          "business_name": {
            "type": "string",
            "description": "Doing business as name"
          },
          "tax_id": {
            "type": "string",
            "description": "Doing business as Tax ID"
          },
          "vat_id": {
            "type": "string",
            "description": "Doing business as Vat ID"
          },
          "website": {
            "type": "string",
            "description": "Doing business as website"
          },
          "email": {
            "type": "string",
            "description": "Doing business as email"
          },
          "address": {
            "$ref": "#/components/schemas/AddressPayload"
          }
        }
      },
      "Error": {
        "type": "object",
        "description": "Error message structure.",
        "properties": {
          "message": {
            "type": "string",
            "description": "Short description of the error."
          },
          "error_code": {
            "type": "string",
            "description": "Platform code for the error."
          }
        }
      },
      "ErrorExtended": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Error"
          },
          {
            "type": "object",
            "properties": {
              "param": {
                "type": "string",
                "description": "Parameter name (with relative location) to which the error applies. Parameters from embedded resources are displayed using dot notation. For example, `card.name` refers to the `name` parameter embedded in the `card` object."
              }
            }
          }
        ]
      },
      "ErrorForbidden": {
        "type": "object",
        "description": "Error message for forbidden requests.",
        "properties": {
          "error_message": {
            "type": "string",
            "description": "Short description of the error."
          },
          "error_code": {
            "type": "string",
            "description": "Platform code for the error."
          },
          "status_code": {
            "type": "string",
            "description": "HTTP status code for the error."
          }
        }
      },
      "Event": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/EventID"
          },
          "transaction_id": {
            "$ref": "#/components/schemas/TransactionID"
          },
          "type": {
            "$ref": "#/components/schemas/EventType"
          },
          "status": {
            "$ref": "#/components/schemas/EventStatus"
          },
          "amount": {
            "$ref": "#/components/schemas/AmountEvent"
          },
          "timestamp": {
            "$ref": "#/components/schemas/TimestampEvent"
          },
          "fee_amount": {
            "type": "number",
            "format": "float",
            "description": "Amount of the fee related to the event."
          },
          "installment_number": {
            "type": "integer",
            "description": "Consequtive number of the installment."
          },
          "deducted_amount": {
            "type": "number",
            "format": "float",
            "description": "Amount deducted for the event."
          },
          "deducted_fee_amount": {
            "type": "number",
            "format": "float",
            "description": "Amount of the fee deducted for the event."
          }
        }
      },
      "FinancialPayouts": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "amount": {
              "type": "number",
              "format": "float"
            },
            "currency": {
              "type": "string"
            },
            "date": {
              "type": "string",
              "format": "date"
            },
            "fee": {
              "type": "number",
              "format": "float"
            },
            "id": {
              "type": "integer"
            },
            "reference": {
              "type": "string"
            },
            "status": {
              "type": "string",
              "enum": [
                "SUCCESSFUL",
                "FAILED"
              ]
            },
            "transaction_code": {
              "type": "string"
            },
            "type": {
              "type": "string",
              "enum": [
                "PAYOUT",
                "CHARGE_BACK_DEDUCTION",
                "REFUND_DEDUCTION",
                "DD_RETURN_DEDUCTION",
                "BALANCE_DEDUCTION"
              ]
            }
          }
        }
      },
      "FinancialTransactions": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "amount": {
              "type": "number",
              "format": "float"
            },
            "currency": {
              "type": "string"
            },
            "external_reference": {
              "type": "string"
            },
            "id": {
              "type": "string"
            },
            "timestamp": {
              "type": "string"
            },
            "transaction_code": {
              "type": "string"
            },
            "type": {
              "type": "string",
              "enum": [
                "SALE",
                "REFUND",
                "CHARGE_BACK",
                "DD_RETURN",
                "DD_RETURN_REVERSAL"
              ]
            }
          }
        }
      },
      "LegalType": {
        "type": "object",
        "description": "Id of the legal type of the merchant profile",
        "properties": {
          "id": {
            "type": "number",
            "description": "Unique id"
          },
          "full_description": {
            "type": "string",
            "description": "Legal type description"
          },
          "description": {
            "type": "string",
            "description": "Legal type short description"
          },
          "sole_trader": {
            "type": "boolean",
            "description": "Sole trader legal type if true"
          }
        }
      },
      "Link": {
        "type": "object",
        "description": "Details of a link to a related resource.",
        "properties": {
          "rel": {
            "type": "string",
            "description": "Specifies the relation to the current resource."
          },
          "href": {
            "type": "string",
            "format": "uri",
            "description": "URL for accessing the related resource."
          },
          "type": {
            "type": "string",
            "description": "Specifies the media type of the related resource."
          }
        }
      },
      "MandatePayload": {
        "type": "object",
        "description": "Mandate is passed when a card is to be tokenised",
        "properties": {
          "type": {
            "type": "string",
            "description": "Indicates the mandate type",
            "enum": [
              "recurrent"
            ]
          },
          "user_agent": {
            "type": "string",
            "description": "Operating system and web client used by the end user"
          },
          "user_ip": {
            "type": "string",
            "description": "IP address of the end user. Supports IPv4 and IPv6"
          }
        },
        "required": [
          "type",
          "user_agent"
        ],
        "example": {
          "type": "recurrent",
          "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.104 Safari/537.36",
          "user_ip": "172.217.169.174"
        }
      },
      "MandateResponse": {
        "type": "object",
        "description": "Created mandate",
        "properties": {
          "type": {
            "type": "string",
            "description": "Indicates the mandate type"
          },
          "status": {
            "type": "string",
            "description": "Mandate status"
          },
          "merchant_code": {
            "type": "string",
            "description": "Merchant code which has the mandate"
          }
        },
        "example": {
          "type": "recurrent",
          "status": "active",
          "merchant_code": "MDASYTPD"
        }
      },
      "MerchantAccount": {
        "type": "object",
        "decription": "Details of user account.",
        "properties": {
          "account": {
            "$ref": "#/components/schemas/Account"
          },
          "personal_profile": {
            "$ref": "#/components/schemas/PersonalProfile"
          },
          "merchant_profile": {
            "$ref": "#/components/schemas/MerchantProfile"
          },
          "operators": {
            "$ref": "#/components/schemas/Operators"
          },
          "app_settings": {
            "$ref": "#/components/schemas/AppSettings"
          },
          "permissions": {
            "$ref": "#/components/schemas/Permissions"
          },
          "is_migrated_payleven_br": {
            "type": "boolean",
            "description": "Merchant comes from payleven BR migration"
          }
        }
      },
      "MerchantProfile": {
        "type": "object",
        "description": "Account's merchant profile",
        "properties": {
          "merchant_code": {
            "type": "string",
            "description": "Unique identifying code of the merchant profile"
          },
          "company_name": {
            "type": "string",
            "description": "Company name"
          },
          "website": {
            "type": "string",
            "description": "Website"
          },
          "legal_type": {
            "$ref": "#/components/schemas/LegalType"
          },
          "merchant_category_code": {
            "type": "string",
            "description": "Merchant category code"
          },
          "mobile_phone": {
            "type": "string",
            "description": "Mobile phone number"
          },
          "company_registration_number": {
            "type": "string",
            "description": "Company registration number"
          },
          "vat_id": {
            "type": "string",
            "description": "Vat ID"
          },
          "permanent_certificate_access_code": {
            "type": "string",
            "description": "Permanent certificate access code &#40;Portugal&#41;"
          },
          "nature_and_purpose": {
            "type": "string",
            "description": "Nature and purpose of the business"
          },
          "address": {
            "$ref": "#/components/schemas/AddressWithDetails"
          },
          "business_owners": {
            "$ref": "#/components/schemas/BusinessOwners"
          },
          "doing_business_as": {
            "$ref": "#/components/schemas/DoingBusinessAs"
          },
          "settings": {
            "$ref": "#/components/schemas/MerchantSettings"
          },
          "vat_rates": {
            "$ref": "#/components/schemas/VatRates"
          },
          "locale": {
            "type": "string",
            "description": "Merchant locale &#40;for internal usage only&#41;"
          },
          "bank_accounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BankAccount"
            }
          },
          "extdev": {
            "type": "boolean",
            "description": "True if the merchant is extdev"
          },
          "payout_zone_migrated": {
            "type": "boolean",
            "description": "True if the payout zone of this merchant is migrated"
          },
          "country": {
            "type": "string",
            "description": "Merchant country isocode &#40;for internal usage only&#41;"
          }
        }
      },
      "MerchantProfilePayload": {
        "type": "object",
        "description": "Account's merchant profile",
        "required": [
          "legal_type_id",
          "company_registration_number",
          "merchant_category_code",
          "company_name",
          "address"
        ],
        "properties": {
          "legal_type_id": {
            "type": "number",
            "description": "Id of the legal type of the merchant"
          },
          "merchant_category_code": {
            "type": "string",
            "description": "Merchant category code"
          },
          "company_name": {
            "type": "string",
            "description": "Company name"
          },
          "company_registration_number": {
            "type": "string",
            "description": "Company registration number"
          },
          "vat_id": {
            "type": "string",
            "description": "Vat ID"
          },
          "permanent_certificate_access_code": {
            "type": "string",
            "description": "Payment certificate access code"
          },
          "website": {
            "type": "string",
            "description": "Company website"
          },
          "nature_and_purpose": {
            "type": "string",
            "description": "Nature and purpose of the business. Required for the following merchant category codes: 5999, 7392, 8999, 5694, 5969, 7299, 7399"
          },
          "mobile_phone": {
            "type": "string",
            "description": "Mobile number"
          },
          "address": {
            "$ref": "#/components/schemas/AddressPayload"
          },
          "doing_business_as": {
            "type": "object",
            "properties": {
              "business_name": {
                "type": "string",
                "description": "Doing business as name"
              },
              "tax_id": {
                "type": "string",
                "description": "Doing business as Tax ID"
              },
              "vat_id": {
                "type": "string",
                "description": "Doing business as Vat ID"
              },
              "website": {
                "type": "string",
                "description": "Doing business as website"
              },
              "email": {
                "type": "string",
                "description": "Doing business as email"
              },
              "address": {
                "$ref": "#/components/schemas/AddressPayload"
              }
            }
          },
          "business_owners": {
            "$ref": "#/components/schemas/BusinessOwners"
          },
          "is_test_account": {
            "type": "boolean",
            "description": "Defines if the account nature is for testing"
          }
        }
      },
      "MerchantSettings": {
        "type": "object",
        "description": "Merchant settings &#40;like \\\"payout_type\\\", \\\"payout_period\\\"&#41;",
        "properties": {
          "tax_enabled": {
            "type": "boolean",
            "description": "Whether to show tax in receipts &#40;saved per transaction&#41;"
          },
          "payout_type": {
            "type": "string",
            "description": "Payout type"
          },
          "payout_period": {
            "type": "string",
            "description": "Payout frequency"
          },
          "payout_on_demand_available": {
            "type": "boolean",
            "description": "Whether merchant can edit payouts on demand"
          },
          "payout_on_demand": {
            "type": "boolean",
            "description": "Whether merchant will receive payouts on demand"
          },
          "printers_enabled": {
            "type": "boolean",
            "description": "Whether to show printers in mobile app"
          },
          "payout_instrument": {
            "type": "string",
            "description": "Payout Instrument"
          },
          "moto_payment": {
            "type": "string",
            "description": "Whether merchant can make MOTO payments",
            "enum": [
              "UNAVAILABLE",
              "ENFORCED",
              "ON",
              "OFF"
            ]
          },
          "stone_merchant_code": {
            "type": "string",
            "description": "Stone merchant code"
          },
          "adyen_merchant_code": {
            "type": "string",
            "description": "Adyen merchant code"
          },
          "adyen_user": {
            "type": "string",
            "description": "Adyen username"
          },
          "adyen_password": {
            "type": "string",
            "description": "Adyen password"
          },
          "adyen_company": {
            "type": "string",
            "description": "Adyen company"
          },
          "daily_payout_email": {
            "type": "boolean",
            "description": "Whether merchant will receive daily payout emails"
          },
          "monthly_payout_email": {
            "type": "boolean",
            "description": "Whether merchant will receive monthly payout emails"
          },
          "gross_settlement": {
            "type": "boolean",
            "description": "Whether merchant has gross settlement enabled"
          }
        }
      },
      "MerchantSettingsPayload": {
        "type": "object",
        "properties": {
          "payout_period": {
            "type": "string",
            "description": "Payout period.",
            "enum": [
              "dayly",
              "weekly",
              "monthly"
            ]
          },
          "payout_type": {
            "type": "string",
            "description": "Payout type.",
            "enum": [
              "SINGLE_PAYMENT"
            ]
          },
          "payout_on_demand": {
            "type": "boolean",
            "description": "If true, the merchant will not receive automatic payouts."
          },
          "payout_on_demand_available": {
            "required": false,
            "type": "string",
            "description": "If true, the merchant will be able to manage  payout_on_demand settings"
          },
          "expected_max_transaction_amount": {
            "type": "number",
            "description": "Expected maximum amount of a single purchase"
          },
          "printers_enabled": {
            "type": "boolean",
            "description": "Printers enabled."
          },
          "gross_settlement": {
            "type": "boolean",
            "description": "Gross settlemnt"
          }
        }
      },
      "Operators": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "username": {
              "type": "string",
              "description": "Username of the operator"
            }
          }
        }
      },
      "PaymentInstrumentCard": {
        "type": "object",
        "description": "Details of the payment card that is saved as a payment instrument.",
        "properties": {
          "token": {
            "type": "string",
            "description": "Unique token identifying the saved payment card for a customer.",
            "readOnly": true
          },
          "active": {
            "type": "boolean",
            "description": "Indicates whether the payment instrument is active and can be used for payments. To deactivate it, send a `DELETE` request to the resource endpoint.",
            "readOnly": true,
            "default": true
          },
          "type": {
            "type": "string",
            "description": "Type of the payment instrument.",
            "enum": [
              "card"
            ]
          },
          "card": {
            "$ref": "#/components/schemas/Card"
          }
        },
        "required": [
          "token",
          "active",
          "type",
          "card"
        ]
      },
      "PaymentInstrumentResponse": {
        "type": "object",
        "description": "Payment Instrument Response",
        "properties": {
          "token": {
            "type": "string",
            "description": "Unique token identifying the saved payment card for a customer.",
            "readOnly": true
          },
          "active": {
            "type": "boolean",
            "description": "Indicates whether the payment instrument is active and can be used for payments. To deactivate it, send a `DELETE` request to the resource endpoint.",
            "readOnly": true,
            "default": true
          },
          "type": {
            "type": "string",
            "description": "Type of the payment instrument.",
            "enum": [
              "card"
            ]
          },
          "card": {
            "type": "object",
            "description": "Details of the payment card.",
            "properties": {
              "last_4_digits": {
                "type": "string",
                "description": "Last 4 digits of the payment card number.",
                "readOnly": true,
                "minLength": 4,
                "maxLength": 4,
                "example": "3456"
              },
              "type": {
                "type": "string",
                "description": "Issuing card network of the payment card.",
                "readOnly": true,
                "enum": [
                  "AMEX",
                  "CUP",
                  "DINERS",
                  "DISCOVER",
                  "ELO",
                  "ELV",
                  "HIPERCARD",
                  "JCB",
                  "MAESTRO",
                  "MASTERCARD",
                  "VISA",
                  "VISA_ELECTRON",
                  "VISA_VPAY",
                  "UNKNOWN"
                ]
              }
            }
          },
          "mandate": {
            "$ref": "#/components/schemas/MandateResponse"
          },
          "created_at": {
            "type": "string",
            "description": "Creation date of payment instrument. Response format expressed according to <a href=\"https://en.wikipedia.org/wiki/ISO_8601\" target=\"_blank\" rel=\"noopener\">ISO8601</a> code.",
            "format": "date-time"
          }
        },
        "example": {
          "token": "bcfc8e5f-3b47-4cb9-854b-3b7a4cce7be3",
          "active": true,
          "type": "card",
          "mandate": {
            "type": "recurrent",
            "status": "active",
            "merchant_code": "MDASYTPD"
          },
          "card": {
            "last_4_digits": "0001",
            "type": "VISA"
          },
          "created_at": "2021-03-30T10:06:07.000+00:00"
        }
      },
      "Permissions": {
        "type": "object",
        "description": "User permissions",
        "properties": {
          "create_moto_payments": {
            "type": "boolean",
            "description": "Create MOTO payments"
          },
          "full_transaction_history_view": {
            "type": "boolean",
            "description": "Can view full merchant transaction history"
          },
          "refund_transactions": {
            "type": "boolean",
            "description": "Refund transactions"
          },
          "create_referral": {
            "type": "boolean",
            "description": "Create referral"
          }
        }
      },
      "PersonalDetails": {
        "type": "object",
        "description": "Personal details for the customer.",
        "properties": {
          "first_name": {
            "type": "string",
            "description": "First name of the customer.",
            "example": "John"
          },
          "last_name": {
            "type": "string",
            "description": "Last name of the customer.",
            "example": "Doe"
          },
          "email": {
            "type": "string",
            "description": "Email address of the customer.",
            "example": "user@example.com"
          },
          "phone": {
            "type": "string",
            "description": "Phone number of the customer.",
            "example": "+491635559723"
          },
          "address": {
            "$ref": "#/components/schemas/Address"
          }
        }
      },
      "PersonalDetailsResponse": {
        "type": "object",
        "description": "Personal details for the customer.",
        "properties": {
          "first_name": {
            "type": "string",
            "description": "First name of the customer.",
            "example": "John"
          },
          "last_name": {
            "type": "string",
            "description": "Last name of the customer.",
            "example": "Doe"
          },
          "email": {
            "type": "string",
            "description": "Email address of the customer.",
            "example": "user@example.com"
          },
          "phone": {
            "type": "string",
            "description": "Phone number of the customer.",
            "example": "+491635559723"
          },
          "address": {
            "$ref": "#/components/schemas/AddressResponse"
          }
        }
      },
      "PersonalProfile": {
        "type": "object",
        "decription": "Account's personal profile.",
        "properties": {
          "first_name": {
            "type": "string",
            "description": "First name of the user"
          },
          "last_name": {
            "type": "string",
            "description": "Last name of the user"
          },
          "date_of_birth": {
            "type": "string",
            "description": "Date of birth"
          },
          "mobile_phone": {
            "type": "string",
            "description": "Mobile phone number"
          },
          "address": {
            "$ref": "#/components/schemas/AddressWithDetails"
          },
          "complete": {
            "type": "boolean"
          }
        }
      },
      "PersonalProfilePayload": {
        "type": "object",
        "decription": "Account's personal profile.",
        "required": [
          "first_name",
          "last_name",
          "date_of_birth",
          "address"
        ],
        "properties": {
          "first_name": {
            "type": "string",
            "description": "First name of the user"
          },
          "last_name": {
            "type": "string",
            "description": "Last name of the user"
          },
          "date_of_birth": {
            "type": "string",
            "format": "date",
            "description": "Date of birth"
          },
          "mobile_phone": {
            "type": "string",
            "description": "Mobile phone number"
          },
          "national_id": {
            "type": "string",
            "description": "National identification id. Country specific. Ex CPF &#40;Brazil&#41;, DNI (Spain), PESEL (Poland)"
          },
          "address": {
            "$ref": "#/components/schemas/AddressPayload"
          }
        }
      },
      "Product": {
        "type": "object",
        "description": "Details of the product for which the payment is made.",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the product from the merchant's catalog."
          },
          "price": {
            "type": "number",
            "format": "float",
            "description": "Price of the product without VAT."
          },
          "vat_rate": {
            "type": "number",
            "format": "float",
            "description": "VAT rate applicable to the product."
          },
          "single_vat_amount": {
            "type": "number",
            "format": "float",
            "description": "Amount of the VAT for a single product item (calculated as the product of `price` and `vat_rate`, i.e. `single_vat_amount = price * vat_rate`)."
          },
          "price_with_vat": {
            "type": "number",
            "format": "float",
            "description": "Price of a single product item with VAT."
          },
          "vat_amount": {
            "type": "number",
            "format": "float",
            "description": "Total VAT amount for the purchase (calculated as the product of `single_vat_amount` and `quantity`, i.e. `vat_amount = single_vat_amount * quantity`)."
          },
          "quantity": {
            "type": "number",
            "description": "Number of product items for the purchase."
          },
          "total_price": {
            "type": "number",
            "format": "float",
            "description": "Total price of the product items without VAT (calculated as the product of `price` and `quantity`, i.e. `total_price = price * quantity`)."
          },
          "total_with_vat": {
            "type": "number",
            "format": "float",
            "description": "Total price of the product items including VAT (calculated as the product of `price_with_vat` and `quantity`, i.e. `total_with_vat = price_with_vat * quantity`)."
          }
        }
      },
      "Receipts": {
        "type": "object",
        "description": "Receipts",
        "properties": {
          "transaction_data": {
            "$ref": "#/components/schemas/ReceiptTransaction"
          },
          "merchant_data": {
            "$ref": "#/components/schemas/ReceiptMerchantData"
          },
          "emv_data": {
            "type": "object"
          },
          "acquirer_data": {
            "type": "object",
            "properties": {
              "tid": {
                "type": "string"
              },
              "authorization_code": {
                "type": "string"
              },
              "return_code": {
                "type": "string"
              },
              "local_time": {
                "type": "string"
              }
            }
          }
        }
      },
      "ReceiptEvent": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/EventID"
          },
          "transaction_id": {
            "$ref": "#/components/schemas/TransactionID"
          },
          "type": {
            "$ref": "#/components/schemas/EventType"
          },
          "status": {
            "$ref": "#/components/schemas/EventStatus"
          },
          "amount": {
            "$ref": "#/components/schemas/AmountEvent"
          },
          "timestamp": {
            "$ref": "#/components/schemas/TimestampEvent"
          },
          "fee_amount": {
            "type": "number",
            "format": "float",
            "description": "Amount of the fee related to the event."
          },
          "receipt_no": {
            "type": "string"
          }
        }
      },
      "ReceiptCard": {
        "type": "object",
        "properties": {
          "last_4_digits": {
            "type": "string",
            "description": "Card last 4 digits."
          },
          "type": {
            "type": "string",
            "description": "Card Scheme."
          },
          "cardholder_name": {
            "type": "string",
            "description": "Cardholder name."
          },
          "expiry_month": {
            "type": "string",
            "description": "Expiry month."
          },
          "expiry_year": {
            "type": "string",
            "description": "Expiry year."
          },
          "token": {
            "type": "string",
            "description": "Token ID of these card details."
          }
        }
      },
      "ReceiptMerchantData": {
        "type": "object",
        "description": "Receipt merchant data",
        "properties": {
          "merchant_profile": {
            "type": "object",
            "properties": {
              "merchant_code": {
                "type": "string"
              },
              "business_name": {
                "type": "string"
              },
              "email": {
                "type": "string"
              },
              "address": {
                "type": "object",
                "properties": {
                  "address_line1": {
                    "type": "string"
                  },
                  "city": {
                    "type": "string"
                  },
                  "country": {
                    "type": "string"
                  },
                  "country_en_name": {
                    "type": "string"
                  },
                  "country_native_name": {
                    "type": "string"
                  },
                  "post_code": {
                    "type": "string"
                  },
                  "landline": {
                    "type": "string"
                  }
                }
              },
              "settings": {
                "type": "object",
                "properties": {
                  "tax_enabled": {
                    "type": "boolean"
                  }
                }
              },
              "legal_type": {
                "type": "object",
                "properties": {
                  "description": {
                    "type": "string"
                  },
                  "sole_trader": {
                    "type": "boolean"
                  }
                }
              }
            }
          },
          "locale": {
            "type": "string"
          }
        }
      },
      "ReceiptTransaction": {
        "type": "object",
        "description": "Transaction information.",
        "properties": {
          "transaction_code": {
            "type": "string",
            "description": "Transaction code."
          },
          "amount": {
            "type": "string",
            "description": "Transaction amount."
          },
          "vat_amount": {
            "type": "string",
            "description": "Transaction VAT amount."
          },
          "tip_amount": {
            "type": "string",
            "description": "Tip amount (included in transaction amount)."
          },
          "fee_amount": {
            "type": "integer",
            "format": "float",
            "description": "Total transaction fee."
          },
          "currency": {
            "type": "string",
            "description": "Transaction currency."
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "Time created at."
          },
          "status": {
            "type": "string",
            "description": "Transaction processing status."
          },
          "payment_type": {
            "type": "string",
            "description": "Transaction type."
          },
          "entry_mode": {
            "type": "string",
            "description": "Transaction entry mode."
          },
          "verification_method": {
            "type": "string",
            "description": "Cardholder verification method."
          },
          "card": {
            "$ref": "#/components/schemas/ReceiptCard"
          },
          "installments_count": {
            "type": "integer",
            "description": "Number of installments."
          },
          "customer_email": {
            "type": "string"
          },
          "products": {
            "type": "array",
            "description": "Products",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Product name."
                },
                "description": {
                  "type": "string",
                  "description": "Product description."
                },
                "price": {
                  "type": "integer",
                  "format": "float",
                  "description": "Product price."
                },
                "quantity": {
                  "type": "integer",
                  "description": "Product quantity."
                },
                "total_price": {
                  "type": "integer",
                  "format": "float",
                  "description": "Quantity x product price."
                }
              }
            }
          },
          "vat_rates": {
            "type": "array",
            "description": "Vat rates.",
            "items": {
              "type": "object",
              "properties": {
                "gross": {
                  "type": "integer",
                  "format": "float",
                  "description": "Gross"
                },
                "net": {
                  "type": "integer",
                  "format": "float",
                  "description": "Net"
                },
                "rate": {
                  "type": "integer",
                  "format": "float",
                  "description": "Rate"
                },
                "vat": {
                  "type": "integer",
                  "format": "float",
                  "description": "Vat"
                }
              }
            }
          },
          "location": {
            "type": "object",
            "description": "Details of the payment location as received from the payment terminal.",
            "properties": {
              "lat": {
                "$ref": "#/components/schemas/Lat"
              },
              "lon": {
                "$ref": "#/components/schemas/Lon"
              },
              "horizontal_accuracy": {
                "$ref": "#/components/schemas/HorizontalAccuracy"
              }
            }
          },
          "events": {
            "type": "array",
            "description": "Events",
            "items": [
              {
                "$ref": "#/components/schemas/ReceiptEvent"
              }
            ]
          },
          "receipt_no": {
            "type": "string",
            "description": "Receipt number"
          }
        }
      },
      "Subaccount": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "Id of the operator"
          },
          "username": {
            "type": "string",
            "description": "Username of the operator"
          },
          "disabled": {
            "type": "boolean",
            "default": true
          },
          "created_at": {
            "type": "string",
            "description": "Creation date of the operator"
          }
        }
      },
      "SubaccountsDetails": {
        "type": "array",
        "items": {
          "allOf": [
            {
              "$ref": "#/components/schemas/Subaccount"
            },
            {
              "type": "object",
              "properties": {
                "permissions": {
                  "$ref": "#/components/schemas/Permissions"
                },
                "app_settings": {
                  "$ref": "#/components/schemas/AppSettings"
                }
              }
            }
          ]
        }
      },
      "SubaccountPayload": {
        "type": "object",
        "description": "Details of the new employee",
        "properties": {
          "username": {
            "type": "string",
            "description": "Username of the new account. Must be a valid email address"
          },
          "password": {
            "type": "string",
            "description": "Password"
          }
        }
      },
      "TimeoffsetDetails": {
        "type": "object",
        "description": "TimeOffset Details",
        "properties": {
          "post_code": {
            "type": "string",
            "description": "Postal code"
          },
          "offset": {
            "type": "number",
            "description": "UTC offset"
          },
          "dst": {
            "type": "boolean",
            "description": "Daylight Saving Time"
          }
        }
      },
      "TransactionEvent": {
        "type": "object",
        "description": "Details of a transaction event.",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/EventID"
          },
          "event_type": {
            "$ref": "#/components/schemas/EventType"
          },
          "status": {
            "$ref": "#/components/schemas/EventStatus"
          },
          "amount": {
            "$ref": "#/components/schemas/AmountEvent"
          },
          "due_date": {
            "type": "string",
            "format": "date",
            "description": "Date when the transaction event is due to occur."
          },
          "date": {
            "type": "string",
            "format": "date",
            "description": "Date when the transaction event occurred."
          },
          "installment_number": {
            "type": "integer",
            "description": "Consequtive number of the installment that is paid. Applicable only payout events, i.e. `event_type = PAYOUT`."
          },
          "timestamp": {
            "$ref": "#/components/schemas/TimestampEvent"
          }
        }
      },
      "TransactionMixinBase": {
        "type": "object",
        "description": "Details of the transaction.",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique ID of the transaction.",
            "example": "6b425463-3e1b-431d-83fa-1e51c2925e99"
          },
          "transaction_code": {
            "type": "string",
            "description": "Transaction code returned by the acquirer/processing entity after processing the transaction.",
            "example": "TEENSK4W2K"
          },
          "amount": {
            "type": "number",
            "format": "float",
            "description": "Total amount of the transaction.",
            "example": 10.1
          },
          "currency": {
            "$ref": "#/components/schemas/Currency"
          },
          "timestamp": {
            "type": "string",
            "example": "2020-02-29T10:56:56.876Z",
            "format": "date-time",
            "description": "Date and time of the creation of the transaction. Response format expressed according to <a href=\"https://en.wikipedia.org/wiki/ISO_8601\" target=\"_blank\" rel=\"noopener\">ISO8601</a> code."
          },
          "status": {
            "type": "string",
            "description": "Current status of the transaction.",
            "enum": [
              "SUCCESSFUL",
              "CANCELLED",
              "FAILED",
              "PENDING"
            ]
          },
          "payment_type": {
            "type": "string",
            "description": "Payment type used for the transaction.",
            "enum": [
              "ECOM",
              "RECURRING"
            ]
          },
          "installments_count": {
            "type": "integer",
            "description": "Current number of the installment for deferred payments.",
            "minimum": 1
          }
        }
      },
      "TransactionMixinCheckout": {
        "type": "object",
        "properties": {
          "merchant_code": {
            "type": "string",
            "description": "Unique code of the registered merchant to whom the payment is made.",
            "example": "MH4H92C7"
          },
          "vat_amount": {
            "type": "number",
            "format": "float",
            "description": "Amount of the applicable VAT (out of the total transaction amount).",
            "example": 6
          },
          "tip_amount": {
            "type": "number",
            "format": "float",
            "description": "Amount of the tip (out of the total transaction amount).",
            "example": 3
          },
          "entry_mode": {
            "type": "string",
            "description": "Entry mode of the payment details.",
            "enum": [
              "CUSTOMER_ENTRY"
            ]
          },
          "auth_code": {
            "type": "string",
            "description": "Authorization code for the transaction sent by the payment card issuer or bank. Applicable only to card payments.",
            "example": "053201"
          },
          "internal_id": {
            "type": "integer",
            "description": "Internal unique ID of the transaction on the SumUp platform.",
            "example": 1763892018
          }
        }
      },
      "TransactionMixinHistory": {
        "type": "object",
        "properties": {
          "product_summary": {
            "type": "string",
            "description": "Short description of the payment. The value is taken from the `description` property of the related checkout resource."
          },
          "payouts_total": {
            "type": "integer",
            "description": "Total number of payouts to the registered user specified in the `user` property."
          },
          "payouts_received": {
            "type": "integer",
            "description": "Number of payouts that are made to the registered user specified in the `user` property."
          },
          "payout_plan": {
            "type": "string",
            "description": "Payout plan of the registered user at the time when the transaction was made.",
            "enum": [
              "SINGLE_PAYMENT",
              "TRUE_INSTALLMENT",
              "ACCELERATED_INSTALLMENT"
            ]
          }
        }
      },
      "TransactionHistory": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TransactionMixinBase"
          },
          {
            "$ref": "#/components/schemas/TransactionMixinHistory"
          },
          {
            "type": "object",
            "properties": {
              "transaction_id": {
                "$ref": "#/components/schemas/TransactionID"
              },
              "user": {
                "$ref": "#/components/schemas/User"
              },
              "type": {
                "type": "string",
                "description": "Type of the transaction for the registered user specified in the `user` property.",
                "enum": [
                  "PAYMENT",
                  "REFUND",
                  "CHARGE_BACK"
                ]
              },
              "card_type": {
                "type": "string",
                "description": "Issuing card network of the payment card used for the transaction.",
                "enum": [
                  "VISA",
                  "AMEX",
                  "CUP",
                  "DINERS",
                  "DISCOVER",
                  "ELO",
                  "ELV",
                  "HIPERCARD",
                  "JCB",
                  "MAESTRO",
                  "MASTERCARD",
                  "VISA_ELECTRON",
                  "VISA_VPAY",
                  "UNKNOWN"
                ]
              }
            }
          }
        ]
      },
      "TransactionFull": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TransactionMixinBase"
          },
          {
            "$ref": "#/components/schemas/TransactionMixinCheckout"
          },
          {
            "$ref": "#/components/schemas/TransactionMixinHistory"
          },
          {
            "type": "object",
            "properties": {
              "username": {
                "$ref": "#/components/schemas/User"
              },
              "lat": {
                "$ref": "#/components/schemas/Lat"
              },
              "lon": {
                "$ref": "#/components/schemas/Lon"
              },
              "horizontal_accuracy": {
                "$ref": "#/components/schemas/HorizontalAccuracy"
              },
              "simple_payment_type": {
                "type": "string",
                "description": "Simple name of the payment type.",
                "enum": [
                  "MOTO",
                  "CASH",
                  "CC_SIGNATURE",
                  "ELV",
                  "CC_CUSTOMER_ENTERED",
                  "MANUAL_ENTRY",
                  "EMV"
                ]
              },
              "verification_method": {
                "type": "string",
                "description": "Verification method used for the transaction.",
                "enum": [
                  "none",
                  "signature",
                  "offline pin",
                  "online pin",
                  "offline pin + signature",
                  "confirmation code verified"
                ]
              },
              "card": {
                "$ref": "#/components/schemas/CardResponse"
              },
              "local_time": {
                "type": "string",
                "format": "date-time",
                "description": "Local date and time of the creation of the transaction."
              },
              "payout_type": {
                "type": "string",
                "description": "Payout type for the transaction.",
                "enum": [
                  "BANK_ACCOUNT",
                  "BALANCE",
                  "PREPAID_CARD"
                ]
              },
              "products": {
                "type": "array",
                "description": "List of products from the merchant's catalog for which the transaction serves as a payment.",
                "items": {
                  "$ref": "#/components/schemas/Product"
                }
              },
              "vat_rates": {
                "type": "array",
                "description": "List of VAT rates applicable to the transaction.",
                "items": {}
              },
              "transaction_events": {
                "type": "array",
                "description": "List of transaction events related to the transaction.",
                "items": {
                  "$ref": "#/components/schemas/TransactionEvent"
                }
              },
              "simple_status": {
                "type": "string",
                "description": "Status generated from the processing status and the latest transaction state.",
                "enum": [
                  "SUCCESSFUL",
                  "PAID_OUT",
                  "CANCEL_FAILED",
                  "CANCELLED",
                  "CHARGEBACK",
                  "FAILED",
                  "REFUND_FAILED",
                  "REFUNDED",
                  "NON_COLLECTION"
                ]
              },
              "links": {
                "type": "array",
                "description": "List of hyperlinks for accessing related resources.",
                "uniqueItems": true,
                "items": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/Link"
                    },
                    {
                      "$ref": "#/components/schemas/LinkRefund"
                    }
                  ]
                }
              },
              "events": {
                "type": "array",
                "description": "List of events related to the transaction.",
                "uniqueItems": true,
                "items": {
                  "$ref": "#/components/schemas/Event"
                }
              },
              "location": {
                "type": "object",
                "description": "Details of the payment location as received from the payment terminal.",
                "properties": {
                  "lat": {
                    "$ref": "#/components/schemas/Lat"
                  },
                  "lon": {
                    "$ref": "#/components/schemas/Lon"
                  },
                  "horizontal_accuracy": {
                    "$ref": "#/components/schemas/HorizontalAccuracy"
                  }
                }
              },
              "tax_enabled": {
                "type": "boolean",
                "description": "Indicates whether tax deduction is enabled for the transaction."
              }
            }
          }
        ]
      },
      "VatRates": {
        "type": "object",
        "decription": "Merchant VAT rates",
        "properties": {
          "id": {
            "type": "number",
            "description": "Internal ID"
          },
          "description": {
            "type": "string",
            "description": "Description"
          },
          "rate": {
            "type": "number",
            "description": "Rate"
          },
          "ordering": {
            "type": "number",
            "description": "Ordering"
          },
          "country": {
            "type": "string",
            "description": "Country ISO code"
          }
        }
      },
      "AmountEvent": {
        "type": "number",
        "format": "float",
        "description": "Amount of the event."
      },
      "Currency": {
        "type": "string",
        "description": "Three-letter <a href=\"https://en.wikipedia.org/wiki/ISO_4217\" target=\"_blank\" rel=\"noopener\">ISO4217</a> code of the currency for the amount. Currently supported currency values are enumerated above.",
        "enum": [
          "BGN",
          "BRL",
          "CHF",
          "CLP",
          "CZK",
          "DKK",
          "EUR",
          "GBP",
          "HRK",
          "HUF",
          "NOK",
          "PLN",
          "RON",
          "SEK",
          "USD"
        ],
        "example": "EUR"
      },
      "CustomerID": {
        "type": "string",
        "description": "__Required when the payment type is `token`.__ Unique ID of the customer.",
        "example": "831ff8d4cd5958ab5670"
      },
      "EventType": {
        "type": "string",
        "description": "Type of the transaction event.",
        "enum": [
          "PAYOUT",
          "CHARGE_BACK",
          "REFUND",
          "PAYOUT_DEDUCTION"
        ]
      },
      "EventStatus": {
        "type": "string",
        "description": "Status of the transaction event.",
        "enum": [
          "PENDING",
          "SCHEDULED",
          "FAILED",
          "REFUNDED",
          "SUCCESSFUL",
          "PAID_OUT"
        ]
      },
      "EventID": {
        "type": "integer",
        "format": "int64",
        "description": "Unique ID of the transaction event."
      },
      "HorizontalAccuracy": {
        "type": "number",
        "format": "float",
        "description": "Indication of the precision of the geographical position received from the payment terminal."
      },
      "Lat": {
        "type": "number",
        "format": "float",
        "description": "Latitude value from the coordinates of the payment location (as received from the payment terminal reader).",
        "minimum": 0,
        "maximum": 90
      },
      "LinkRefund": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Link"
          },
          {
            "type": "object",
            "properties": {
              "min_amount": {
                "type": "number",
                "format": "float",
                "description": "Minimum allowed amount for the refund."
              },
              "max_amount": {
                "type": "number",
                "format": "float",
                "description": "Maximum allowed amount for the refund."
              }
            }
          }
        ]
      },
      "Lon": {
        "type": "number",
        "format": "float",
        "description": "Longitude value from the coordinates of the payment location (as received from the payment terminal reader).",
        "minimum": 0,
        "maximum": 180
      },
      "TransactionID": {
        "type": "string",
        "description": "Unique ID of the transaction."
      },
      "TimestampEvent": {
        "type": "string",
        "format": "date-time",
        "description": "Date and time of the transaction event."
      },
      "User": {
        "type": "string",
        "format": "email",
        "description": "Email address of the registered user (merchant) to whom the payment is made."
      }
    },
    "requestBodies": {
      "BankAccounts": {
        "description": "",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/BankAccountPayload"
            }
          }
        }
      },
      "CheckoutCreate": {
        "description": "",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CheckoutCreateRequest"
            },
            "examples": {
              "Checkout": {
                "description": "Standard request body for creating a checkout",
                "value": {
                  "checkout_reference": "f00a8f74-b05d-4605-bd73-2a901bae5802",
                  "amount": 10.1,
                  "currency": "EUR",
                  "pay_to_email": "user@example.com",
                  "merchant_code": "MDUDGLR9",
                  "description": "Purchase",
                  "id": "2b79757a-de87-4a2e-90e4-b17c947c730d",
                  "status": "PAID",
                  "date": "2020-02-29T10:56:56+00:00",
                  "merchant_name": "John Doe LTD",
                  "redirect_url": "https://sumup.com"
                }
              },
              "Checkout3DS": {
                "description": "Create a 3DS checkout",
                "value": {
                  "checkout_reference": "f00a8f74-b05d-4605-bd73-2a901bae5802",
                  "amount": 10.1,
                  "currency": "EUR",
                  "pay_to_email": "user@example.com",
                  "merchant_code": "MH4H92C7",
                  "description": "Purchase",
                  "return_url": "http://example.com/",
                  "customer_id": "831ff8d4cd5958ab5670",
                  "redirect_url": "https://mysite.com/completed_purchase"
                }
              },
              "CheckoutAPM": {
                "description": "Create an Alternative Payment Method checkout",
                "value": {
                  "checkout_reference": "f00a8f74-b05d-4605-bd73-2a901bae5802",
                  "amount": 10.1,
                  "currency": "EUR",
                  "merchant_code": "MH4H92C7",
                  "redirect_url": "https://mysite.com/completed_purchase"
                }
              }
            }
          }
        }
      },
      "CheckoutProcess": {
        "description": "Details of the payment instrument for processing the checkout.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CheckoutProcessMixin"
            },
            "examples": {
              "ProcessCard": {
                "description": "Process a checkout with a card",
                "value": {
                  "payment_type": "card",
                  "installments": 1,
                  "mandate": {
                    "type": "recurrent",
                    "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.104 Safari/537.36",
                    "user_ip": "172.217.169.174"
                  },
                  "card": {
                    "name": "John Doe",
                    "number": "1234567890123456",
                    "expiry_year": "2023",
                    "expiry_month": "01",
                    "cvv": "123",
                    "zip_code": "12345"
                  }
                }
              },
              "ProcessToken": {
                "description": "Process a checkout with a token",
                "value": {
                  "payment_type": "card",
                  "installments": 1,
                  "token": "ba85dfee-c3cf-48a6-84f5-d7d761fbba50",
                  "customer_id": "MEDKHDTI"
                }
              },
              "ProcessBoleto": {
                "description": "Process a checkout with Boleto",
                "value": {
                  "payment_type": "boleto",
                  "personal_details": {
                    "email": "user@example.com",
                    "first_name": "John",
                    "last_name": "Doe",
                    "tax_id": "423.378.593-47",
                    "address": {
                      "country": "BR",
                      "city": "São Paulo",
                      "line1": "Rua Gilberto Sabino, 215",
                      "state": "SP",
                      "postal_code": "05425-020"
                    }
                  }
                }
              },
              "ProcessSofort": {
                "description": "Process a checkout with Sofort",
                "value": {
                  "payment_type": "sofort",
                  "personal_details": {
                    "email": "user@example.com",
                    "first_name": "John",
                    "last_name": "Doe",
                    "address": {
                      "country": "DE"
                    }
                  }
                }
              },
              "ProcessiDeal": {
                "description": "Process a checkout with iDeal",
                "value": {
                  "payment_type": "ideal",
                  "personal_details": {
                    "email": "user@example.com",
                    "first_name": "John",
                    "last_name": "Doe",
                    "address": {
                      "country": "NL"
                    }
                  }
                }
              },
              "ProcessBancontact": {
                "description": "Process a checkout with Bancontact",
                "value": {
                  "payment_type": "bancontact",
                  "personal_details": {
                    "email": "user@example.com",
                    "first_name": "John",
                    "last_name": "Doe",
                    "address": {
                      "country": "BE"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "CustomerCreate": {
        "description": "Details of the customer.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Customer"
            }
          }
        }
      },
      "CustomerUpdate": {
        "description": "",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "personal_details": {
                  "$ref": "#/components/schemas/PersonalDetails"
                }
              }
            }
          }
        }
      },
      "DoingBusinessAs": {
        "description": "",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/DoingBusinessAsPayload"
            }
          }
        }
      },
      "MerchantProfile": {
        "description": "",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/MerchantProfilePayload"
            }
          }
        }
      },
      "MerchantSettings": {
        "description": "",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/MerchantSettingsPayload"
            }
          }
        }
      },
      "PaymentInstrument": {
        "description": "",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PaymentInstrumentCard"
            }
          }
        }
      },
      "PersonalProfile": {
        "description": "",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PersonalProfilePayload"
            }
          }
        }
      },
      "Refund": {
        "description": "",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "description": "Optional amount for partial refunds of transactions.",
              "properties": {
                "amount": {
                  "type": "number",
                  "format": "float",
                  "description": "Amount to be refunded. Eligible amount can't exceed the amount of the transaction and varies based on country and currency. If you do not specify a value, the system performs a full refund of the transaction."
                }
              }
            }
          }
        }
      },
      "SubaccountPayload": {
        "description": "",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/SubaccountPayload"
            }
          }
        }
      }
    },
    "responses": {
      "BankAccounts": {
        "description": "OK",
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/BankAccount"
              }
            }
          }
        }
      },
      "Checkout": {
        "description": "Created",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Checkout"
            },
            "examples": {
              "Checkout": {
                "description": "Standard response body for a successfully created checkout",
                "value": {
                  "checkout_reference": "8ea25ec3-3293-40e9-a165-6d7f3b3073c5",
                  "amount": 10.1,
                  "currency": "EUR",
                  "pay_to_email": "user@example.com",
                  "merchant_code": "MCNPLE22",
                  "description": "My Checkout",
                  "return_url": "http://example.com",
                  "id": "88fcf8de-304d-4820-8f1c-ec880290eb92",
                  "status": "PENDING",
                  "date": "2020-02-29T10:56:56+00:00",
                  "valid_until": "2020-02-29T10:56:56+00:00",
                  "customer_id": "831ff8d4cd5958ab5670",
                  "mandate": {
                    "type": "recurrent",
                    "status": "active",
                    "merchant_code": "MDASYTPD"
                  },
                  "transactions": [
                    {
                      "id": "410fc44a-5956-44e1-b5cc-19c6f8d727a4",
                      "transaction_code": "TEENSK4W2K",
                      "amount": 10.1,
                      "currency": "EUR",
                      "timestamp": "2020-02-29T10:56:56.876Z",
                      "status": "SUCCESSFUL",
                      "payment_type": "ECOM",
                      "installments_count": 1,
                      "merchant_code": "MH4H92C7",
                      "vat_amount": 6,
                      "tip_amount": 3,
                      "entry_mode": "CUSTOMER_ENTRY",
                      "auth_code": "012345",
                      "internal_id": 0
                    }
                  ]
                }
              },
              "Checkout3DS": {
                "description": "Response body for a successfully created 3DS checkout",
                "value": {
                  "checkout_reference": "8ea25ec3-3293-40e9-a165-6d7f3b3073c5",
                  "amount": 10.1,
                  "currency": "EUR",
                  "pay_to_email": "user@example.com",
                  "description": "My Checkout",
                  "return_url": "http://example.com",
                  "id": "88fcf8de-304d-4820-8f1c-ec880290eb92",
                  "status": "PENDING",
                  "date": "2020-02-29T10:56:56+00:00",
                  "valid_until": "2020-02-29T10:56:56+00:00",
                  "customer_id": "831ff8d4cd5958ab5670",
                  "redirect_url": "https://mysite.com/completed_purchase",
                  "transactions": [
                    {
                      "id": "410fc44a-5956-44e1-b5cc-19c6f8d727a4",
                      "transaction_code": "TEENSK4W2K",
                      "amount": 10.1,
                      "currency": "EUR",
                      "timestamp": "2020-02-29T10:56:56.876Z",
                      "status": "SUCCESSFUL",
                      "payment_type": "ECOM",
                      "installments_count": 1,
                      "merchant_code": "MH4H92C7",
                      "vat_amount": 6,
                      "tip_amount": 3,
                      "entry_mode": "CUSTOMER_ENTRY",
                      "auth_code": "012345",
                      "internal_id": 0
                    }
                  ]
                }
              },
              "CheckoutAPM": {
                "description": "Response body for APMs, including Sofort, iDeal, ...",
                "value": {
                  "checkout_reference": "8ea25ec3-3293-40e9-a165-6d7f3b3073c5",
                  "amount": 10.1,
                  "currency": "EUR",
                  "pay_to_email": "user@example.com",
                  "merchant_code": "MCNPLE22",
                  "description": "My Checkout",
                  "return_url": "http://example.com",
                  "id": "88fcf8de-304d-4820-8f1c-ec880290eb92",
                  "status": "PENDING",
                  "date": "2021-06-29T11:08:36.000+00:00",
                  "merchant_name": "My company",
                  "redirect_url": "https://sumup.com",
                  "purpose": "CHECKOUT",
                  "transactions": [
                    {
                      "id": "410fc44a-5956-44e1-b5cc-19c6f8d727a4",
                      "transaction_code": "TEENSK4W2K",
                      "amount": 10.1,
                      "currency": "EUR",
                      "timestamp": "2020-02-29T10:56:56.876Z",
                      "status": "SUCCESSFUL",
                      "payment_type": "ECOM",
                      "installments_count": 1,
                      "merchant_code": "MH4H92C7",
                      "vat_amount": 6,
                      "tip_amount": 3,
                      "entry_mode": "CUSTOMER_ENTRY",
                      "auth_code": "012345",
                      "internal_id": 0
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "CheckoutList": {
        "description": "OK",
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/CheckoutSuccess"
              }
            }
          }
        }
      },
      "CheckoutRetrieve": {
        "description": "OK",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CheckoutSuccess"
            }
          }
        }
      },
      "CheckoutCreate": {
        "description": "Created",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CheckoutCreateRequest"
            }
          }
        }
      },
      "CheckoutProcess": {
        "description": "OK",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CheckoutSuccess"
            },
            "examples": {
              "CheckoutSuccessCard": {
                "description": "Successfully processed checkout with a card",
                "value": {
                  "checkout_reference": "f00a8f74-b05d-4605-bd73-2a901bae5802",
                  "amount": 10.1,
                  "currency": "EUR",
                  "pay_to_email": "user@example.com",
                  "merchant_code": "MH4H92C7",
                  "description": "Purchase",
                  "return_url": "http://example.com",
                  "id": "4e425463-3e1b-431d-83fa-1e51c2925e99",
                  "status": "PENDING",
                  "date": "2020-02-29T10:56:56+00:00",
                  "valid_until": "2020-02-29T10:56:56+00:00",
                  "customer_id": "831ff8d4cd5958ab5670",
                  "mandate": {
                    "type": "recurrent",
                    "status": "active",
                    "merchant_code": "MDASYTPD"
                  },
                  "transactions": [
                    {
                      "id": "410fc44a-5956-44e1-b5cc-19c6f8d727a4",
                      "transaction_code": "TEENSK4W2K",
                      "amount": 10.1,
                      "currency": "EUR",
                      "timestamp": "2020-02-29T10:56:56.876Z",
                      "status": "SUCCESSFUL",
                      "payment_type": "ECOM",
                      "installments_count": 1,
                      "merchant_code": "MH4H92C7",
                      "vat_amount": 6,
                      "tip_amount": 3,
                      "entry_mode": "CUSTOMER_ENTRY",
                      "auth_code": "053201",
                      "internal_id": 1763892018
                    }
                  ],
                  "transaction_code": "TEENSK4W2K",
                  "transaction_id": "410fc44a-5956-44e1-b5cc-19c6f8d727a4"
                }
              },
              "CheckoutSuccessToken": {
                "description": "Successfully processed checkout with a token",
                "value": {
                  "checkout_reference": "f00a8f74-b05d-4605-bd73-2a901bae5802",
                  "amount": 10.1,
                  "currency": "EUR",
                  "pay_to_email": "user@example.com",
                  "merchant_code": "MH4H92C7",
                  "description": "Purchase with token",
                  "id": "4e425463-3e1b-431d-83fa-1e51c2925e99",
                  "status": "PENDING",
                  "date": "2020-02-29T10:56:56+00:00",
                  "transaction_code": "TEENSK4W2K",
                  "transaction_id": "410fc44a-5956-44e1-b5cc-19c6f8d727a4",
                  "merchant_name": "Sample Merchant",
                  "redirect_url": "https://mysite.com/completed_purchase",
                  "customer_id": "831ff8d4cd5958ab5670",
                  "payment_instrument": {
                    "token": "e76d7e5c-9375-4fac-a7e7-b19dc5302fbc"
                  },
                  "transactions": [
                    {
                      "id": "410fc44a-5956-44e1-b5cc-19c6f8d727a4",
                      "transaction_code": "TEENSK4W2K",
                      "amount": 10.1,
                      "currency": "EUR",
                      "timestamp": "2020-02-29T10:56:56.876Z",
                      "status": "SUCCESSFUL",
                      "payment_type": "ECOM",
                      "installments_count": 1,
                      "merchant_code": "MH4H92C7",
                      "vat_amount": 6,
                      "tip_amount": 3,
                      "entry_mode": "CUSTOMER_ENTRY",
                      "auth_code": "053201",
                      "internal_id": 1763892018
                    }
                  ]
                }
              },
              "CheckoutSuccessBoleto": {
                "description": "Successfully processed checkout with Boleto",
                "value": {
                  "checkout_reference": "f00a8f74-b05d-4605-bd73-2a901bae5802",
                  "amount": 10.1,
                  "currency": "BRL",
                  "pay_to_email": "user@example.com",
                  "merchant_code": "MH4H92C7",
                  "description": "Boleto checkout",
                  "id": "4e425463-3e1b-431d-83fa-1e51c2925e99",
                  "status": "PENDING",
                  "date": "2021-07-06T12:34:02.000+00:00",
                  "merchant_name": "Sample shop",
                  "boleto": {
                    "barcode": "34191090081790614310603072340007886840000000200",
                    "url": "https://checkouts.sample.com/v0.1/checkouts/2e7a36cc-7897-446b-a966-952ab5f049ea/boleto"
                  },
                  "redirect_url": "https://website.com",
                  "purpose": "CHECKOUT",
                  "transactions": [
                    {
                      "id": "debd2986-9852-4e86-8a8e-7ea9c87dd679",
                      "transaction_code": "TEN3E696NP",
                      "merchant_code": "MH4H92C9",
                      "amount": 10.1,
                      "vat_amount": 6,
                      "tip_amount": 3,
                      "currency": "BRL",
                      "timestamp": "2021-07-06T12:34:16.460+00:00",
                      "status": "PENDING",
                      "payment_type": "BOLETO",
                      "entry_mode": "BOLETO",
                      "installments_count": 1,
                      "internal_id": 1763892018
                    }
                  ]
                }
              },
              "CheckoutSuccessSofort": {
                "description": "Successfully processed checkout with Sofort",
                "value": {
                  "next_step": {
                    "url": "https://r3.girogate.de/ti/sofortueberweisungmixed",
                    "method": "GET",
                    "payload": {
                      "tx": "624786308",
                      "rs": "MyFOScJ7I3iAmU4Wmalwb1bObT1st1b1",
                      "cs": "364d0864ffa3602eb757b18326ffeb8be0c9c6e2ab7dcfebc1e2b0f6491eaae9"
                    },
                    "full": "https://r3.girogate.de/ti/sofortueberweisungmixed?tx=624786308&rs=MyFOScJ7I3iAmU4Wmalwb1bObT1st1b1&cs=364d0864ffa3602eb757b18326ffeb8be0c9c6e2ab7dcfebc1e2b0f6491eaae9",
                    "mechanism": [
                      "browser"
                    ]
                  }
                }
              },
              "CheckoutSuccessiDeal": {
                "description": "Successfully processed checkout with iDeal",
                "value": {
                  "next_step": {
                    "url": "https://r3.girogate.de/ti/simideal",
                    "method": "GET",
                    "payload": {
                      "tx": "961473700",
                      "rs": "ILnaUeQTKJ184fVrjGILrLjePX9E4rmz",
                      "cs": "c8bc0ea231f8372431ca22d6f8319f8de0263d0b1705759ed27155f245f193c5"
                    },
                    "full": "https://r3.girogate.de/ti/simideal?tx=961473700&rs=ILnaUeQTKJ184fVrjGILrLjePX9E4rmz&cs=c8bc0ea231f8372431ca22d6f8319f8de0263d0b1705759ed27155f245f193c5",
                    "mechanism": [
                      "browser"
                    ]
                  }
                }
              },
              "CheckoutSuccessBancontact": {
                "description": "Successfully processed checkout with Bancontact",
                "value": {
                  "next_step": {
                    "url": "https://r3.girogate.de/ti/simbcmc",
                    "method": "GET",
                    "payload": {
                      "tx": "624788471",
                      "rs": "5MioXoKt2Gwj9dLgqAX1bMRBuT5xTSdB",
                      "cs": "697edacdd9175f3f99542500fa0ff08280b66aaff3c2641a2e212e4b039473cc"
                    },
                    "full": "https://r3.girogate.de/ti/simbcmc?tx=624788471&rs=5MioXoKt2Gwj9dLgqAX1bMRBuT5xTSdB&cs=697edacdd9175f3f99542500fa0ff08280b66aaff3c2641a2e212e4b039473cc",
                    "mechanism": [
                      "browser"
                    ]
                  }
                }
              }
            }
          }
        }
      },
      "CheckoutProcessAccepted": {
        "description": "Accepted",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CheckoutAccepted"
            }
          }
        }
      },
      "Customer": {
        "description": "Created",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CustomerResponse"
            }
          }
        }
      },
      "CustomerCreate": {
        "description": "Created",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CustomerResponse"
            }
          }
        }
      },
      "DoingBusinessAs": {
        "description": "OK",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/DoingBusinessAs"
            }
          }
        }
      },
      "FinancialPayouts": {
        "description": "OK",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/FinancialPayouts"
            }
          }
        }
      },
      "FinancialTransactions": {
        "$ref": "#/components/responses/MerchantAccount"
      },
      "MerchantAccount": {
        "description": "OK",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/FinancialTransactions"
            }
          }
        }
      },
      "MerchantProfile": {
        "description": "OK",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/MerchantProfile"
            }
          }
        }
      },
      "MerchantSettings": {
        "description": "OK",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/MerchantSettings"
            }
          }
        }
      },
      "PaymentInstrumentList": {
        "description": "OK",
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/PaymentInstrumentResponse"
              }
            }
          }
        }
      },
      "PaymentInstrument": {
        "description": "OK",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PaymentInstrumentCard"
            }
          }
        }
      },
      "PaymentInstrumentCreate": {
        "description": "Created",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PaymentInstrumentResponse"
            }
          }
        }
      },
      "PersonalProfile": {
        "description": "OK",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PersonalProfile"
            }
          }
        }
      },
      "Receipts": {
        "description": "OK",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Receipts"
            }
          }
        }
      },
      "Subaccounts": {
        "description": "OK",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TransactionHistory"
                  }
                },
                "links": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Link"
                  }
                }
              }
            }
          }
        }
      },
      "Transaction": {
        "description": "OK",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/TransactionFull"
            }
          }
        }
      },
      "NoBodyResponse": {
        "description": "No Content",
        "content": {
          "application/json": {
            "examples": {
              "NoBody": {
                "value": {}
              }
            }
          }
        }
      },
      "ErrorBadRequest": {
        "$ref": "#/components/responses/NoBodyResponse"
      },
      "ErrorNotAuthorized": {
        "description": "Unauthorized",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "examples": {
              "Invalid_Token": {
                "description": "The access token is invalid or has expired.",
                "value": {
                  "error_message": "invalid access token",
                  "error_code": "NOT_AUTHORIZED"
                }
              },
              "Not_Authorized_Token": {
                "description": "The access token is valid but the application is not authorized.",
                "value": {
                  "error_message": "NOT_AUTHORIZED",
                  "error_code": "NOT_AUTHORIZED"
                }
              },
              "Missing_Token": {
                "description": "No access token is provided.",
                "value": {
                  "message": "access token required",
                  "error_code": "NOT_AUTHORIZED"
                }
              }
            }
          }
        }
      },
      "ErrorForbidden": {
        "description": "Forbidden",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorForbidden"
            },
            "examples": {
              "Forbidden": {
                "description": "You do not have required scopes for making this request.",
                "value": {
                  "error_message": "request_not_allowed",
                  "error_code": "FORBIDDEN",
                  "status_code": 403
                }
              }
            }
          }
        }
      },
      "ErrorNotFound": {
        "description": "Not Found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "examples": {
              "Not_Found": {
                "description": "The identified resource is not found on the server.",
                "value": {
                  "error_code": "NOT_FOUND",
                  "message": "Resource not found"
                }
              }
            }
          }
        }
      },
      "ErrorConflict": {
        "description": "Conflict",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "examples": {
              "Checkout_Processed": {
                "description": "The identified checkout resource is already processed.",
                "value": {
                  "error_code": "CHECKOUT_PROCESSED",
                  "message": "Checkout is already processed"
                }
              }
            }
          }
        }
      }
    },
    "parameters": {
      "BankAccounts": {
        "name": "primary",
        "in": "query",
        "description": "The true value will return only the primary bank account (the one used for settlements).",
        "required": false,
        "schema": {
          "type": "boolean"
        }
      },
      "CheckoutReference": {
        "name": "checkout_reference",
        "in": "query",
        "description": "Filters the list of checkout resources by the unique ID of the checkout.",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "CheckoutID": {
        "name": "id",
        "in": "path",
        "required": true,
        "description": "Unique ID of the checkout resource.",
        "schema": {
          "type": "string"
        }
      },
      "CustomerID": {
        "name": "customer_id",
        "in": "path",
        "required": true,
        "description": "Unique ID of the saved customer resource.",
        "schema": {
          "type": "string"
        }
      },
      "MerchantAccount": {
        "name": "include[]",
        "in": "query",
        "description": "A list of additional information you want to receive for the user. By default only personal and merchant profile information will be returned.",
        "required": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "operators",
              "settings",
              "doing_business_as",
              "bank_accounts",
              "app_settings",
              "country_details",
              "timeoffset_details",
              "permissions"
            ]
          }
        }
      },
      "Subaccounts": {
        "name": "include[]",
        "in": "query",
        "description": "A list of additional information you want to receive for subaccounts.",
        "schema": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "permissions",
              "app_settings"
            ]
          }
        }
      },
      "Subaccount": {
        "name": "operator_code",
        "in": "path",
        "description": "Operator code",
        "schema": {
          "type": "string"
        }
      },
      "Token": {
        "name": "token",
        "in": "path",
        "required": true,
        "description": "Unique token identifying the card saved as a payment instrument resource.",
        "schema": {
          "type": "string"
        }
      },
      "TxnID": {
        "in": "path",
        "name": "txn_id",
        "required": true,
        "description": "Unique ID of the transaction.",
        "schema": {
          "type": "string"
        }
      },
      "TransactionCode": {
        "name": "transaction_code",
        "in": "query",
        "description": "Retrieves the transaction resource with the specified transaction code.",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "OrderFilter": {
        "name": "order",
        "in": "query",
        "description": "Specifies the order in which the returned results are displayed.",
        "schema": {
          "type": "string",
          "enum": [
            "ascending",
            "descending"
          ],
          "default": [
            "ascending"
          ]
        }
      },
      "LimitFilter": {
        "name": "limit",
        "in": "query",
        "description": "Specifies the maximum number of results per page. Value must be a positive integer and if not specified, will return 10 results.",
        "schema": {
          "type": "integer"
        }
      },
      "UsersFilter": {
        "name": "users",
        "in": "query",
        "description": "Filters the returned results by user email.",
        "required": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "email"
          }
        }
      },
      "GeoCoordinatesFilter": {
        "name": "geo_coordinates",
        "in": "query",
        "description": "Filters the results by the geographical coordinates of the location where the transaction is made (as retrieved from the terminal device) and returns only results that fall within the specified rectangular area. The accepted format is a comma-separated list of coordinate points that form a rectangle defined by the following parameters:\n  * `southwest_lng` (for the longitude value of the southwestern edge of the rectangle)\n  * `southwest_lat` (for the latitude value of the southwestern edge of the rectangle)\n  * `northeast_lng` (for the longitude value of the northeastern edge of the rectangle)\n  * `northeast_lat` (for the latitude value of the northeastern edge of the rectangle)\n",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "ReadersFilter": {
        "name": "readers",
        "in": "query",
        "description": "Filters the returned results by the specified list of serial numbers of the terminal readers used for the transactions.",
        "required": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "StatusesFilter": {
        "name": "statuses",
        "in": "query",
        "description": "Filters the returned results by the specified list of final statuses of the transactions.",
        "required": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "SUCCESSFUL",
              "CANCELLED",
              "FAILED",
              "REFUNDED",
              "CHARGE_BACK"
            ]
          }
        }
      },
      "PaymentTypesFilter": {
        "name": "payment_types",
        "in": "query",
        "description": "Filters the returned results by the specified list of payment types used for the transactions.",
        "required": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "CASH",
              "POS",
              "ECOM",
              "BALANCE",
              "MOTO",
              "BOLETO",
              "UNKNOWN"
            ]
          }
        }
      },
      "TypesFilter": {
        "name": "types",
        "in": "query",
        "description": "Filters the returned results by the specified list of transaction types.",
        "required": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "PAYMENT",
              "REFUND",
              "CHARGE_BACK"
            ]
          }
        }
      },
      "ChangesSinceFilter": {
        "name": "changes_since",
        "in": "query",
        "description": "Filters the results by the latest modification time of resources and returns only transactions that are modified *at or after* the specified timestamp (in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\" target=\"_blank\" rel=\"noopener\">ISO8601</a> format).",
        "required": false,
        "schema": {
          "type": "string",
          "format": "date-time"
        }
      },
      "NewestTimeFilter": {
        "name": "newest_time",
        "in": "query",
        "description": "Filters the results by the creation time of resources and returns only transactions that are created *before* the specified timestamp (in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\" target=\"_blank\" rel=\"noopener\">ISO8601</a> format).",
        "required": false,
        "schema": {
          "type": "string",
          "format": "date-time"
        }
      },
      "NewestRefFilter": {
        "name": "newest_ref",
        "in": "query",
        "description": "Filters the results by the reference ID of transaciton events and returns only transactions with events whose IDs are *smaller* than the specified value. This parameters supersedes the `newest_time` parameter (if both are provided in the request).",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "OldestTimeFilter": {
        "name": "oldest_time",
        "in": "query",
        "description": "Filters the results by the creation time of resources and returns only transactions that are created *at or after* the specified timestamp (in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\" target=\"_blank\" rel=\"noopener\">ISO8601</a> format).",
        "required": false,
        "schema": {
          "type": "string",
          "format": "date-time"
        }
      },
      "OldestRefFilter": {
        "name": "oldest_ref",
        "in": "query",
        "description": "Filters the results by the reference ID of transaciton events and returns only transactions with events whose IDs are *greater* than the specified value. This parameters supersedes the `oldest_time` parameter (if both are provided in the request).",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "TransactionID": {
        "name": "id",
        "in": "query",
        "description": "Retrieves the transaction resource with the specified transaction ID (the `id` parameter in the transaction resource).",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "TransactionInternalID": {
        "name": "internal_id",
        "in": "query",
        "description": "Retrieves the transaction resource with the specified internal transaction ID (the `internal_id` parameter in the transaction resource).",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "EventStatusesFilter": {
        "name": "event_statuses",
        "in": "query",
        "description": "Filters the returned transaction events in the transaction resource by the speficied transaction event statuses.",
        "required": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "FAILED",
              "SUCCESSFUL"
            ]
          }
        }
      },
      "EventTypesFilter": {
        "name": "event_types",
        "in": "query",
        "description": "Filters the returned transaction events in the transaction resource by specified transaction event types.",
        "required": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "PAYOUT",
              "REFUND",
              "CHARGE_BACK",
              "PAYOUT_DEDUCTION"
            ]
          }
        }
      }
    },
    "securitySchemes": {
      "Overview": {
        "description": "At SumUp authentication uses your API credentials and Basic HTTP auth. The API credentials consist of a `client_id` and `client_secret` key-value pair.\n\nIt is possible to create multiple API credentials for each of the applications you connect with your SumUp account.\n\nUse the API credentials as an authorization header for requests that require such.\n\nAuthorization\n---------\n\nSumUp uses the <a href='https://tools.ietf.org/html/rfc6749' target='_blank'>OAuth 2.0 authorization framework</a> and supports <a href='https://developer.sumup.com/docs/authorization/#authorization-flows' target='_blank'>two authorization flows</a> for <a href='https://developer.sumup.com/docs/register-app/#3-create-oauth-client-credentials' target='_blank'>obtaining an access token</a>. \n\nThe flow you choose will grant your access token specific permissions. All API calls should include the obtained access token in the `Authorization: Bearer <<valid_access_token>>` format. \n\nTo complete successful requests, ensure you have requested the <a href='https://developer.sumup.com/docs/authorization/#authorization-scopes' target='_blank'>necessary scopes</a> for your authorization flow of choice.\n",
        "type": "oauth2"
      },
      "accessToken": {
        "type": "oauth2",
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "https://api.sumup.com/authorize",
            "tokenUrl": "https://api.sumup.com/token",
            "refreshUrl": "https://api.sumup.com/token",
            "scopes": {
              "payments": "Make payments by creating and processing checkouts.",
              "transactions.history": "View transactions and transaction history.",
              "user.profile_readonly": "View user profile details.",
              "user.profile": "View and manage your user profile.",
              "user.app-settings": "View and manage the SumUp mobile application settings.",
              "payment_instruments": "Manage customers and their payment instruments.",
              "user.payout-settings": "View and manage your payout settings.",
              "user.subaccounts": "View and manage the user profile details of your employees."
            }
          },
          "clientCredentials": {
            "tokenUrl": "https://api.sumup.com/token",
            "scopes": {
              "payments": "Make payments by creating and processing checkouts.",
              "transactions.history": "View transactions and transaction history.",
              "user.profile_readonly": "View user profile details.",
              "user.profile": "View and manage your user profile.",
              "user.app-settings": "View and manage the SumUp mobile application settings.",
              "payment_instruments": "Manage customers and their payment instruments.",
              "user.payout-settings": "View and manage your payout settings.",
              "user.subaccounts": "View and manage the user profile details of your employee."
            }
          }
        }
      }
    }
  }
}